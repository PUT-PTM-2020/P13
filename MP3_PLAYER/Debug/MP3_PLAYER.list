
MP3_PLAYER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007738  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001e184  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025a44  08025a44  00040068  2**0
                  CONTENTS
  4 .ARM          00000008  08025a44  08025a44  00035a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025a4c  08025a4c  00040068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025a4c  08025a4c  00035a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025a50  08025a50  00035a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08025a54  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  20000068  08025abc  00040068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d0  08025abc  000407d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ea6  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002726  00000000  00000000  00051f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001348  00000000  00000000  00054668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00022270  00000000  00000000  000559b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000e651  00000000  00000000  00077c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d13d2  00000000  00000000  00086271  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00157643  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000011f8  00000000  00000000  001576c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00005260  00000000  00000000  001588b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080078a8 	.word	0x080078a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	080078a8 	.word	0x080078a8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b972 	b.w	8000ca0 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	4688      	mov	r8, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14b      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4615      	mov	r5, r2
 80009e6:	d967      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0720 	rsb	r7, r2, #32
 80009f2:	fa01 f302 	lsl.w	r3, r1, r2
 80009f6:	fa20 f707 	lsr.w	r7, r0, r7
 80009fa:	4095      	lsls	r5, r2
 80009fc:	ea47 0803 	orr.w	r8, r7, r3
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a0c:	fa1f fc85 	uxth.w	ip, r5
 8000a10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a18:	fb07 f10c 	mul.w	r1, r7, ip
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18eb      	adds	r3, r5, r3
 8000a22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a26:	f080 811b 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8118 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a30:	3f02      	subs	r7, #2
 8000a32:	442b      	add	r3, r5
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a48:	45a4      	cmp	ip, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	192c      	adds	r4, r5, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8107 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a56:	45a4      	cmp	ip, r4
 8000a58:	f240 8104 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	442c      	add	r4, r5
 8000a60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a64:	eba4 040c 	sub.w	r4, r4, ip
 8000a68:	2700      	movs	r7, #0
 8000a6a:	b11e      	cbz	r6, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c6 4300 	strd	r4, r3, [r6]
 8000a74:	4639      	mov	r1, r7
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0xbe>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80eb 	beq.w	8000c5a <__udivmoddi4+0x286>
 8000a84:	2700      	movs	r7, #0
 8000a86:	e9c6 0100 	strd	r0, r1, [r6]
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	fab3 f783 	clz	r7, r3
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d147      	bne.n	8000b2a <__udivmoddi4+0x156>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xd0>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 80fa 	bhi.w	8000c98 <__udivmoddi4+0x2c4>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	4698      	mov	r8, r3
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d0e0      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000ab2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ab6:	e7dd      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000ab8:	b902      	cbnz	r2, 8000abc <__udivmoddi4+0xe8>
 8000aba:	deff      	udf	#255	; 0xff
 8000abc:	fab2 f282 	clz	r2, r2
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	f040 808f 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac6:	1b49      	subs	r1, r1, r5
 8000ac8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000acc:	fa1f f885 	uxth.w	r8, r5
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ad6:	0c23      	lsrs	r3, r4, #16
 8000ad8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	f200 80cd 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000af6:	4684      	mov	ip, r0
 8000af8:	1a59      	subs	r1, r3, r1
 8000afa:	b2a3      	uxth	r3, r4
 8000afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b08:	fb08 f800 	mul.w	r8, r8, r0
 8000b0c:	45a0      	cmp	r8, r4
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x14c>
 8000b10:	192c      	adds	r4, r5, r4
 8000b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x14a>
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	f200 80b6 	bhi.w	8000c8a <__udivmoddi4+0x2b6>
 8000b1e:	4618      	mov	r0, r3
 8000b20:	eba4 0408 	sub.w	r4, r4, r8
 8000b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b28:	e79f      	b.n	8000a6a <__udivmoddi4+0x96>
 8000b2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b2e:	40bb      	lsls	r3, r7
 8000b30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b38:	fa01 f407 	lsl.w	r4, r1, r7
 8000b3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b48:	4325      	orrs	r5, r4
 8000b4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b4e:	0c2c      	lsrs	r4, r5, #16
 8000b50:	fb08 3319 	mls	r3, r8, r9, r3
 8000b54:	fa1f fa8e 	uxth.w	sl, lr
 8000b58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b60:	429c      	cmp	r4, r3
 8000b62:	fa02 f207 	lsl.w	r2, r2, r7
 8000b66:	fa00 f107 	lsl.w	r1, r0, r7
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b74:	f080 8087 	bcs.w	8000c86 <__udivmoddi4+0x2b2>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f240 8084 	bls.w	8000c86 <__udivmoddi4+0x2b2>
 8000b7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b82:	4473      	add	r3, lr
 8000b84:	1b1b      	subs	r3, r3, r4
 8000b86:	b2ad      	uxth	r5, r5
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b98:	45a2      	cmp	sl, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba4:	d26b      	bcs.n	8000c7e <__udivmoddi4+0x2aa>
 8000ba6:	45a2      	cmp	sl, r4
 8000ba8:	d969      	bls.n	8000c7e <__udivmoddi4+0x2aa>
 8000baa:	3802      	subs	r0, #2
 8000bac:	4474      	add	r4, lr
 8000bae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bb6:	eba4 040a 	sub.w	r4, r4, sl
 8000bba:	454c      	cmp	r4, r9
 8000bbc:	46c2      	mov	sl, r8
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	d354      	bcc.n	8000c6c <__udivmoddi4+0x298>
 8000bc2:	d051      	beq.n	8000c68 <__udivmoddi4+0x294>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d069      	beq.n	8000c9c <__udivmoddi4+0x2c8>
 8000bc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000bd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	40fc      	lsrs	r4, r7
 8000bd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bdc:	e9c6 5400 	strd	r5, r4, [r6]
 8000be0:	2700      	movs	r7, #0
 8000be2:	e747      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000be4:	f1c2 0320 	rsb	r3, r2, #32
 8000be8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bec:	4095      	lsls	r5, r2
 8000bee:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	4338      	orrs	r0, r7
 8000bfc:	0c01      	lsrs	r1, r0, #16
 8000bfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c02:	fa1f f885 	uxth.w	r8, r5
 8000c06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c0e:	fb07 f308 	mul.w	r3, r7, r8
 8000c12:	428b      	cmp	r3, r1
 8000c14:	fa04 f402 	lsl.w	r4, r4, r2
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x256>
 8000c1a:	1869      	adds	r1, r5, r1
 8000c1c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c20:	d22f      	bcs.n	8000c82 <__udivmoddi4+0x2ae>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d92d      	bls.n	8000c82 <__udivmoddi4+0x2ae>
 8000c26:	3f02      	subs	r7, #2
 8000c28:	4429      	add	r1, r5
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	b281      	uxth	r1, r0
 8000c2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3a:	fb00 f308 	mul.w	r3, r0, r8
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x27e>
 8000c42:	1869      	adds	r1, r5, r1
 8000c44:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c48:	d217      	bcs.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d915      	bls.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	4429      	add	r1, r5
 8000c52:	1ac9      	subs	r1, r1, r3
 8000c54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c58:	e73b      	b.n	8000ad2 <__udivmoddi4+0xfe>
 8000c5a:	4637      	mov	r7, r6
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	e709      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c60:	4607      	mov	r7, r0
 8000c62:	e6e7      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c64:	4618      	mov	r0, r3
 8000c66:	e6fb      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c68:	4541      	cmp	r1, r8
 8000c6a:	d2ab      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c70:	eb69 020e 	sbc.w	r2, r9, lr
 8000c74:	3801      	subs	r0, #1
 8000c76:	4613      	mov	r3, r2
 8000c78:	e7a4      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7a:	4660      	mov	r0, ip
 8000c7c:	e7e9      	b.n	8000c52 <__udivmoddi4+0x27e>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e795      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c82:	4667      	mov	r7, ip
 8000c84:	e7d1      	b.n	8000c2a <__udivmoddi4+0x256>
 8000c86:	4681      	mov	r9, r0
 8000c88:	e77c      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	442c      	add	r4, r5
 8000c8e:	e747      	b.n	8000b20 <__udivmoddi4+0x14c>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	442b      	add	r3, r5
 8000c96:	e72f      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c98:	4638      	mov	r0, r7
 8000c9a:	e708      	b.n	8000aae <__udivmoddi4+0xda>
 8000c9c:	4637      	mov	r7, r6
 8000c9e:	e6e9      	b.n	8000a74 <__udivmoddi4+0xa0>

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <DESELECT>:

static
inline void DESELECT(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000cca:	bf00      	nop
 8000ccc:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <xmit_spi+0x30>)
 8000cce:	f005 fc87 	bl	80065e0 <HAL_SPI_GetState>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d1f9      	bne.n	8000ccc <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 8000cd8:	1df9      	adds	r1, r7, #7
 8000cda:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <xmit_spi+0x30>)
 8000ce2:	f005 f9a7 	bl	8006034 <HAL_SPI_Transmit>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000770 	.word	0x20000770

08000cf4 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8000cfa:	23ff      	movs	r3, #255	; 0xff
 8000cfc:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000d02:	bf00      	nop
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <rcvr_spi+0x38>)
 8000d06:	f005 fc6b 	bl	80065e0 <HAL_SPI_GetState>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d1f9      	bne.n	8000d04 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8000d10:	1dba      	adds	r2, r7, #6
 8000d12:	1df9      	adds	r1, r7, #7
 8000d14:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <rcvr_spi+0x38>)
 8000d1e:	f005 fabd 	bl	800629c <HAL_SPI_TransmitReceive>

	return Data;
 8000d22:	79bb      	ldrb	r3, [r7, #6]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000770 	.word	0x20000770

08000d30 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8000d38:	f7ff ffdc 	bl	8000cf4 <rcvr_spi>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	701a      	strb	r2, [r3, #0]
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <wait_ready+0x34>)
 8000d54:	2232      	movs	r2, #50	; 0x32
 8000d56:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8000d58:	f7ff ffcc 	bl	8000cf4 <rcvr_spi>
	do
		res = rcvr_spi();
 8000d5c:	f7ff ffca 	bl	8000cf4 <rcvr_spi>
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2bff      	cmp	r3, #255	; 0xff
 8000d68:	d004      	beq.n	8000d74 <wait_ready+0x28>
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <wait_ready+0x34>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1f3      	bne.n	8000d5c <wait_ready+0x10>

	return res;
 8000d74:	79fb      	ldrb	r3, [r7, #7]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000085 	.word	0x20000085

08000d84 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8000d8a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d8e:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8000d90:	f7ff ff8f 	bl	8000cb2 <DESELECT>

	for (i = 0; i < 10; i++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e005      	b.n	8000da6 <power_on+0x22>
		xmit_spi(0xFF);
 8000d9a:	20ff      	movs	r0, #255	; 0xff
 8000d9c:	f7ff ff90 	bl	8000cc0 <xmit_spi>
	for (i = 0; i < 10; i++)
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	3301      	adds	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	2b09      	cmp	r3, #9
 8000daa:	d9f6      	bls.n	8000d9a <power_on+0x16>

	SELECT();
 8000dac:	f7ff ff7a 	bl	8000ca4 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8000dc4:	2395      	movs	r3, #149	; 0x95
 8000dc6:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e00b      	b.n	8000de6 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	f107 0210 	add.w	r2, r7, #16
 8000dd4:	4413      	add	r3, r2
 8000dd6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff70 	bl	8000cc0 <xmit_spi>
	for (i = 0; i < 6; i++)
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	3301      	adds	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	d9f0      	bls.n	8000dce <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000dec:	e002      	b.n	8000df4 <power_on+0x70>
		Count--;
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000df4:	f7ff ff7e 	bl	8000cf4 <rcvr_spi>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d002      	beq.n	8000e04 <power_on+0x80>
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f4      	bne.n	8000dee <power_on+0x6a>

	DESELECT();
 8000e04:	f7ff ff55 	bl	8000cb2 <DESELECT>
	xmit_spi(0XFF);
 8000e08:	20ff      	movs	r0, #255	; 0xff
 8000e0a:	f7ff ff59 	bl	8000cc0 <xmit_spi>

	PowerFlag = 1;
 8000e0e:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <power_on+0x98>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000087 	.word	0x20000087

08000e20 <power_off>:

static
void power_off(void) {
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <power_off+0x14>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	20000087 	.word	0x20000087

08000e38 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <chk_power+0x14>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000087 	.word	0x20000087

08000e50 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <rcvr_datablock+0x68>)
 8000e5c:	220a      	movs	r2, #10
 8000e5e:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000e60:	f7ff ff48 	bl	8000cf4 <rcvr_spi>
 8000e64:	4603      	mov	r3, r0
 8000e66:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	2bff      	cmp	r3, #255	; 0xff
 8000e6c:	d104      	bne.n	8000e78 <rcvr_datablock+0x28>
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <rcvr_datablock+0x68>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1f3      	bne.n	8000e60 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	2bfe      	cmp	r3, #254	; 0xfe
 8000e7c:	d001      	beq.n	8000e82 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e016      	b.n	8000eb0 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	1c5a      	adds	r2, r3, #1
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff51 	bl	8000d30 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff4b 	bl	8000d30 <rcvr_spi_m>
	} while (btr -= 2);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1ed      	bne.n	8000e82 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8000ea6:	f7ff ff25 	bl	8000cf4 <rcvr_spi>
	rcvr_spi();
 8000eaa:	f7ff ff23 	bl	8000cf4 <rcvr_spi>

	return TRUE; /* Return with success */
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000084 	.word	0x20000084

08000ebc <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000ecc:	f7ff ff3e 	bl	8000d4c <wait_ready>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2bff      	cmp	r3, #255	; 0xff
 8000ed4:	d001      	beq.n	8000eda <xmit_datablock+0x1e>
		return FALSE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e040      	b.n	8000f5c <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff feef 	bl	8000cc0 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
 8000ee4:	2bfd      	cmp	r3, #253	; 0xfd
 8000ee6:	d031      	beq.n	8000f4c <xmit_datablock+0x90>
		wc = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fee3 	bl	8000cc0 <xmit_spi>
			xmit_spi(*buff++);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fedc 	bl	8000cc0 <xmit_spi>
		} while (--wc);
 8000f08:	7bbb      	ldrb	r3, [r7, #14]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	73bb      	strb	r3, [r7, #14]
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1eb      	bne.n	8000eec <xmit_datablock+0x30>

		rcvr_spi();
 8000f14:	f7ff feee 	bl	8000cf4 <rcvr_spi>
		rcvr_spi();
 8000f18:	f7ff feec 	bl	8000cf4 <rcvr_spi>

		while (i <= 64) {
 8000f1c:	e00b      	b.n	8000f36 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000f1e:	f7ff fee9 	bl	8000cf4 <rcvr_spi>
 8000f22:	4603      	mov	r3, r0
 8000f24:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f003 031f 	and.w	r3, r3, #31
 8000f2c:	2b05      	cmp	r3, #5
 8000f2e:	d006      	beq.n	8000f3e <xmit_datablock+0x82>
				break;
			i++;
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	3301      	adds	r3, #1
 8000f34:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	2b40      	cmp	r3, #64	; 0x40
 8000f3a:	d9f0      	bls.n	8000f1e <xmit_datablock+0x62>
 8000f3c:	e000      	b.n	8000f40 <xmit_datablock+0x84>
				break;
 8000f3e:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000f40:	bf00      	nop
 8000f42:	f7ff fed7 	bl	8000cf4 <rcvr_spi>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0fa      	beq.n	8000f42 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d101      	bne.n	8000f5a <xmit_datablock+0x9e>
		return TRUE;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <xmit_datablock+0xa0>
	else
		return FALSE;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8000f70:	f7ff feec 	bl	8000d4c <wait_ready>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2bff      	cmp	r3, #255	; 0xff
 8000f78:	d001      	beq.n	8000f7e <send_cmd+0x1a>
		return 0xFF;
 8000f7a:	23ff      	movs	r3, #255	; 0xff
 8000f7c:	e040      	b.n	8001000 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fe9d 	bl	8000cc0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	0e1b      	lsrs	r3, r3, #24
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fe97 	bl	8000cc0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	0c1b      	lsrs	r3, r3, #16
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fe91 	bl	8000cc0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fe8b 	bl	8000cc0 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fe86 	bl	8000cc0 <xmit_spi>
	n = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b40      	cmp	r3, #64	; 0x40
 8000fbc:	d101      	bne.n	8000fc2 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8000fbe:	2395      	movs	r3, #149	; 0x95
 8000fc0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2b48      	cmp	r3, #72	; 0x48
 8000fc6:	d101      	bne.n	8000fcc <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8000fc8:	2387      	movs	r3, #135	; 0x87
 8000fca:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fe76 	bl	8000cc0 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b4c      	cmp	r3, #76	; 0x4c
 8000fd8:	d101      	bne.n	8000fde <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8000fda:	f7ff fe8b 	bl	8000cf4 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8000fde:	230a      	movs	r3, #10
 8000fe0:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8000fe2:	f7ff fe87 	bl	8000cf4 <rcvr_spi>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8000fea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	da05      	bge.n	8000ffe <send_cmd+0x9a>
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f1      	bne.n	8000fe2 <send_cmd+0x7e>

	return res; /* Return with the response value */
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8001018:	2301      	movs	r3, #1
 800101a:	e0d5      	b.n	80011c8 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 800101c:	4b6c      	ldr	r3, [pc, #432]	; (80011d0 <disk_initialize+0x1c8>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 800102a:	4b69      	ldr	r3, [pc, #420]	; (80011d0 <disk_initialize+0x1c8>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	e0ca      	b.n	80011c8 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8001032:	f7ff fea7 	bl	8000d84 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8001036:	f7ff fe35 	bl	8000ca4 <SELECT>
	ty = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 800103e:	2100      	movs	r1, #0
 8001040:	2040      	movs	r0, #64	; 0x40
 8001042:	f7ff ff8f 	bl	8000f64 <send_cmd>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	f040 80a5 	bne.w	8001198 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 800104e:	4b61      	ldr	r3, [pc, #388]	; (80011d4 <disk_initialize+0x1cc>)
 8001050:	2264      	movs	r2, #100	; 0x64
 8001052:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8001054:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001058:	2048      	movs	r0, #72	; 0x48
 800105a:	f7ff ff83 	bl	8000f64 <send_cmd>
 800105e:	4603      	mov	r3, r0
 8001060:	2b01      	cmp	r3, #1
 8001062:	d158      	bne.n	8001116 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e00c      	b.n	8001084 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800106a:	7bfc      	ldrb	r4, [r7, #15]
 800106c:	f7ff fe42 	bl	8000cf4 <rcvr_spi>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4423      	add	r3, r4
 800107a:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	3301      	adds	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b03      	cmp	r3, #3
 8001088:	d9ef      	bls.n	800106a <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 800108a:	7abb      	ldrb	r3, [r7, #10]
 800108c:	2b01      	cmp	r3, #1
 800108e:	f040 8083 	bne.w	8001198 <disk_initialize+0x190>
 8001092:	7afb      	ldrb	r3, [r7, #11]
 8001094:	2baa      	cmp	r3, #170	; 0xaa
 8001096:	d17f      	bne.n	8001198 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8001098:	2100      	movs	r1, #0
 800109a:	2077      	movs	r0, #119	; 0x77
 800109c:	f7ff ff62 	bl	8000f64 <send_cmd>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d807      	bhi.n	80010b6 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80010a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010aa:	2069      	movs	r0, #105	; 0x69
 80010ac:	f7ff ff5a 	bl	8000f64 <send_cmd>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d005      	beq.n	80010c2 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80010b6:	4b47      	ldr	r3, [pc, #284]	; (80011d4 <disk_initialize+0x1cc>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1eb      	bne.n	8001098 <disk_initialize+0x90>
 80010c0:	e000      	b.n	80010c4 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80010c2:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80010c4:	4b43      	ldr	r3, [pc, #268]	; (80011d4 <disk_initialize+0x1cc>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d064      	beq.n	8001198 <disk_initialize+0x190>
 80010ce:	2100      	movs	r1, #0
 80010d0:	207a      	movs	r0, #122	; 0x7a
 80010d2:	f7ff ff47 	bl	8000f64 <send_cmd>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d15d      	bne.n	8001198 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e00c      	b.n	80010fc <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 80010e2:	7bfc      	ldrb	r4, [r7, #15]
 80010e4:	f7ff fe06 	bl	8000cf4 <rcvr_spi>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4423      	add	r3, r4
 80010f2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	3301      	adds	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d9ef      	bls.n	80010e2 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8001102:	7a3b      	ldrb	r3, [r7, #8]
 8001104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <disk_initialize+0x108>
 800110c:	2306      	movs	r3, #6
 800110e:	e000      	b.n	8001112 <disk_initialize+0x10a>
 8001110:	2302      	movs	r3, #2
 8001112:	73bb      	strb	r3, [r7, #14]
 8001114:	e040      	b.n	8001198 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001116:	2100      	movs	r1, #0
 8001118:	2077      	movs	r0, #119	; 0x77
 800111a:	f7ff ff23 	bl	8000f64 <send_cmd>
 800111e:	4603      	mov	r3, r0
 8001120:	2b01      	cmp	r3, #1
 8001122:	d808      	bhi.n	8001136 <disk_initialize+0x12e>
 8001124:	2100      	movs	r1, #0
 8001126:	2069      	movs	r0, #105	; 0x69
 8001128:	f7ff ff1c 	bl	8000f64 <send_cmd>
 800112c:	4603      	mov	r3, r0
 800112e:	2b01      	cmp	r3, #1
 8001130:	d801      	bhi.n	8001136 <disk_initialize+0x12e>
 8001132:	2302      	movs	r3, #2
 8001134:	e000      	b.n	8001138 <disk_initialize+0x130>
 8001136:	2301      	movs	r3, #1
 8001138:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d10e      	bne.n	800115e <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8001140:	2100      	movs	r1, #0
 8001142:	2077      	movs	r0, #119	; 0x77
 8001144:	f7ff ff0e 	bl	8000f64 <send_cmd>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	d80e      	bhi.n	800116c <disk_initialize+0x164>
 800114e:	2100      	movs	r1, #0
 8001150:	2069      	movs	r0, #105	; 0x69
 8001152:	f7ff ff07 	bl	8000f64 <send_cmd>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d107      	bne.n	800116c <disk_initialize+0x164>
						break; /* ACMD41 */
 800115c:	e00d      	b.n	800117a <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 800115e:	2100      	movs	r1, #0
 8001160:	2041      	movs	r0, #65	; 0x41
 8001162:	f7ff feff 	bl	8000f64 <send_cmd>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <disk_initialize+0x1cc>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1e1      	bne.n	800113a <disk_initialize+0x132>
 8001176:	e000      	b.n	800117a <disk_initialize+0x172>
						break; /* CMD1 */
 8001178:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <disk_initialize+0x1cc>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <disk_initialize+0x18c>
 8001184:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001188:	2050      	movs	r0, #80	; 0x50
 800118a:	f7ff feeb 	bl	8000f64 <send_cmd>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <disk_initialize+0x190>
				ty = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8001198:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <disk_initialize+0x1d0>)
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 800119e:	f7ff fd88 	bl	8000cb2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80011a2:	f7ff fda7 	bl	8000cf4 <rcvr_spi>

	if (ty) /* Initialization succeded */
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d008      	beq.n	80011be <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <disk_initialize+0x1c8>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f023 0301 	bic.w	r3, r3, #1
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <disk_initialize+0x1c8>)
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	e001      	b.n	80011c2 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80011be:	f7ff fe2f 	bl	8000e20 <power_off>

	return Stat;
 80011c2:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <disk_initialize+0x1c8>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b2db      	uxtb	r3, r3
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000084 	.word	0x20000084
 80011d8:	20000086 	.word	0x20000086

080011dc <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	if (drv)
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80011ec:	2301      	movs	r3, #1
 80011ee:	e002      	b.n	80011f6 <disk_status+0x1a>
	return Stat;
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <disk_status+0x28>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000000 	.word	0x20000000

08001208 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <disk_read+0x1c>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <disk_read+0x20>
		return RES_PARERR;
 8001224:	2304      	movs	r3, #4
 8001226:	e051      	b.n	80012cc <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8001228:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <disk_read+0xcc>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <disk_read+0x32>
		return RES_NOTRDY;
 8001236:	2303      	movs	r3, #3
 8001238:	e048      	b.n	80012cc <disk_read+0xc4>

	if (!(CardType & 4))
 800123a:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <disk_read+0xd0>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	025b      	lsls	r3, r3, #9
 800124a:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 800124c:	f7ff fd2a 	bl	8000ca4 <SELECT>

	if (count == 1) { /* Single block read */
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d111      	bne.n	800127a <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	2051      	movs	r0, #81	; 0x51
 800125a:	f7ff fe83 	bl	8000f64 <send_cmd>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d129      	bne.n	80012b8 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8001264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001268:	68b8      	ldr	r0, [r7, #8]
 800126a:	f7ff fdf1 	bl	8000e50 <rcvr_datablock>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d021      	beq.n	80012b8 <disk_read+0xb0>
			count = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	e01e      	b.n	80012b8 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	2052      	movs	r0, #82	; 0x52
 800127e:	f7ff fe71 	bl	8000f64 <send_cmd>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d117      	bne.n	80012b8 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8001288:	f44f 7100 	mov.w	r1, #512	; 0x200
 800128c:	68b8      	ldr	r0, [r7, #8]
 800128e:	f7ff fddf 	bl	8000e50 <rcvr_datablock>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00a      	beq.n	80012ae <disk_read+0xa6>
					break;
				buff += 512;
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800129e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1ed      	bne.n	8001288 <disk_read+0x80>
 80012ac:	e000      	b.n	80012b0 <disk_read+0xa8>
					break;
 80012ae:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 80012b0:	2100      	movs	r1, #0
 80012b2:	204c      	movs	r0, #76	; 0x4c
 80012b4:	f7ff fe56 	bl	8000f64 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 80012b8:	f7ff fcfb 	bl	8000cb2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80012bc:	f7ff fd1a 	bl	8000cf4 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bf14      	ite	ne
 80012c6:	2301      	movne	r3, #1
 80012c8:	2300      	moveq	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000086 	.word	0x20000086

080012dc <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	4603      	mov	r3, r0
 80012ea:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d102      	bne.n	80012f8 <disk_write+0x1c>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <disk_write+0x20>
		return RES_PARERR;
 80012f8:	2304      	movs	r3, #4
 80012fa:	e06b      	b.n	80013d4 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 80012fc:	4b37      	ldr	r3, [pc, #220]	; (80013dc <disk_write+0x100>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <disk_write+0x32>
		return RES_NOTRDY;
 800130a:	2303      	movs	r3, #3
 800130c:	e062      	b.n	80013d4 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 800130e:	4b33      	ldr	r3, [pc, #204]	; (80013dc <disk_write+0x100>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <disk_write+0x44>
		return RES_WRPRT;
 800131c:	2302      	movs	r3, #2
 800131e:	e059      	b.n	80013d4 <disk_write+0xf8>

	if (!(CardType & 4))
 8001320:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <disk_write+0x104>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	025b      	lsls	r3, r3, #9
 8001330:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8001332:	f7ff fcb7 	bl	8000ca4 <SELECT>

	if (count == 1) { /* Single block write */
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d110      	bne.n	800135e <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	2058      	movs	r0, #88	; 0x58
 8001340:	f7ff fe10 	bl	8000f64 <send_cmd>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d13a      	bne.n	80013c0 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 800134a:	21fe      	movs	r1, #254	; 0xfe
 800134c:	68b8      	ldr	r0, [r7, #8]
 800134e:	f7ff fdb5 	bl	8000ebc <xmit_datablock>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d033      	beq.n	80013c0 <disk_write+0xe4>
			count = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	e030      	b.n	80013c0 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <disk_write+0x104>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <disk_write+0x9e>
			send_cmd(CMD55, 0);
 800136a:	2100      	movs	r1, #0
 800136c:	2077      	movs	r0, #119	; 0x77
 800136e:	f7ff fdf9 	bl	8000f64 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	2057      	movs	r0, #87	; 0x57
 8001376:	f7ff fdf5 	bl	8000f64 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	2059      	movs	r0, #89	; 0x59
 800137e:	f7ff fdf1 	bl	8000f64 <send_cmd>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d11b      	bne.n	80013c0 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8001388:	21fc      	movs	r1, #252	; 0xfc
 800138a:	68b8      	ldr	r0, [r7, #8]
 800138c:	f7ff fd96 	bl	8000ebc <xmit_datablock>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00a      	beq.n	80013ac <disk_write+0xd0>
					break;
				buff += 512;
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800139c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1ee      	bne.n	8001388 <disk_write+0xac>
 80013aa:	e000      	b.n	80013ae <disk_write+0xd2>
					break;
 80013ac:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 80013ae:	21fd      	movs	r1, #253	; 0xfd
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fd83 	bl	8000ebc <xmit_datablock>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <disk_write+0xe4>
				count = 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 80013c0:	f7ff fc77 	bl	8000cb2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80013c4:	f7ff fc96 	bl	8000cf4 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	bf14      	ite	ne
 80013ce:	2301      	movne	r3, #1
 80013d0:	2300      	moveq	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000086 	.word	0x20000086

080013e4 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	603a      	str	r2, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	460b      	mov	r3, r1
 80013f2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <disk_ioctl+0x1e>
		return RES_PARERR;
 80013fe:	2304      	movs	r3, #4
 8001400:	e16a      	b.n	80016d8 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	2b07      	cmp	r3, #7
 800140c:	d127      	bne.n	800145e <disk_ioctl+0x7a>
		switch (*ptr) {
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d00e      	beq.n	8001434 <disk_ioctl+0x50>
 8001416:	2b02      	cmp	r3, #2
 8001418:	d012      	beq.n	8001440 <disk_ioctl+0x5c>
 800141a:	2b00      	cmp	r3, #0
 800141c:	d11b      	bne.n	8001456 <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 800141e:	f7ff fd0b 	bl	8000e38 <chk_power>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <disk_ioctl+0x48>
				power_off(); /* Power off */
 8001428:	f7ff fcfa 	bl	8000e20 <power_off>
			res = RES_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001432:	e14f      	b.n	80016d4 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8001434:	f7ff fca6 	bl	8000d84 <power_on>
			res = RES_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800143e:	e149      	b.n	80016d4 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8001440:	f7ff fcfa 	bl	8000e38 <chk_power>
 8001444:	4602      	mov	r2, r0
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	3301      	adds	r3, #1
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001454:	e13e      	b.n	80016d4 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8001456:	2304      	movs	r3, #4
 8001458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800145c:	e13a      	b.n	80016d4 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 800145e:	4ba0      	ldr	r3, [pc, #640]	; (80016e0 <disk_ioctl+0x2fc>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 800146c:	2303      	movs	r3, #3
 800146e:	e133      	b.n	80016d8 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8001470:	f7ff fc18 	bl	8000ca4 <SELECT>

		switch (ctrl) {
 8001474:	79bb      	ldrb	r3, [r7, #6]
 8001476:	2b35      	cmp	r3, #53	; 0x35
 8001478:	f200 811d 	bhi.w	80016b6 <disk_ioctl+0x2d2>
 800147c:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <disk_ioctl+0xa0>)
 800147e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001482:	bf00      	nop
 8001484:	0800161f 	.word	0x0800161f
 8001488:	0800155d 	.word	0x0800155d
 800148c:	0800160f 	.word	0x0800160f
 8001490:	080016b7 	.word	0x080016b7
 8001494:	080016b7 	.word	0x080016b7
 8001498:	080016b7 	.word	0x080016b7
 800149c:	080016b7 	.word	0x080016b7
 80014a0:	080016b7 	.word	0x080016b7
 80014a4:	080016b7 	.word	0x080016b7
 80014a8:	080016b7 	.word	0x080016b7
 80014ac:	080016b7 	.word	0x080016b7
 80014b0:	080016b7 	.word	0x080016b7
 80014b4:	080016b7 	.word	0x080016b7
 80014b8:	080016b7 	.word	0x080016b7
 80014bc:	080016b7 	.word	0x080016b7
 80014c0:	080016b7 	.word	0x080016b7
 80014c4:	080016b7 	.word	0x080016b7
 80014c8:	080016b7 	.word	0x080016b7
 80014cc:	080016b7 	.word	0x080016b7
 80014d0:	080016b7 	.word	0x080016b7
 80014d4:	080016b7 	.word	0x080016b7
 80014d8:	080016b7 	.word	0x080016b7
 80014dc:	080016b7 	.word	0x080016b7
 80014e0:	080016b7 	.word	0x080016b7
 80014e4:	080016b7 	.word	0x080016b7
 80014e8:	080016b7 	.word	0x080016b7
 80014ec:	080016b7 	.word	0x080016b7
 80014f0:	080016b7 	.word	0x080016b7
 80014f4:	080016b7 	.word	0x080016b7
 80014f8:	080016b7 	.word	0x080016b7
 80014fc:	080016b7 	.word	0x080016b7
 8001500:	080016b7 	.word	0x080016b7
 8001504:	080016b7 	.word	0x080016b7
 8001508:	080016b7 	.word	0x080016b7
 800150c:	080016b7 	.word	0x080016b7
 8001510:	080016b7 	.word	0x080016b7
 8001514:	080016b7 	.word	0x080016b7
 8001518:	080016b7 	.word	0x080016b7
 800151c:	080016b7 	.word	0x080016b7
 8001520:	080016b7 	.word	0x080016b7
 8001524:	080016b7 	.word	0x080016b7
 8001528:	080016b7 	.word	0x080016b7
 800152c:	080016b7 	.word	0x080016b7
 8001530:	080016b7 	.word	0x080016b7
 8001534:	080016b7 	.word	0x080016b7
 8001538:	080016b7 	.word	0x080016b7
 800153c:	080016b7 	.word	0x080016b7
 8001540:	080016b7 	.word	0x080016b7
 8001544:	080016b7 	.word	0x080016b7
 8001548:	080016b7 	.word	0x080016b7
 800154c:	080016b7 	.word	0x080016b7
 8001550:	08001631 	.word	0x08001631
 8001554:	08001655 	.word	0x08001655
 8001558:	08001679 	.word	0x08001679
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800155c:	2100      	movs	r1, #0
 800155e:	2049      	movs	r0, #73	; 0x49
 8001560:	f7ff fd00 	bl	8000f64 <send_cmd>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	f040 80a9 	bne.w	80016be <disk_ioctl+0x2da>
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2110      	movs	r1, #16
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fc6c 	bl	8000e50 <rcvr_datablock>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 809f 	beq.w	80016be <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8001580:	7b3b      	ldrb	r3, [r7, #12]
 8001582:	099b      	lsrs	r3, r3, #6
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d10e      	bne.n	80015a8 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800158a:	7d7b      	ldrb	r3, [r7, #21]
 800158c:	b29a      	uxth	r2, r3
 800158e:	7d3b      	ldrb	r3, [r7, #20]
 8001590:	b29b      	uxth	r3, r3
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b29b      	uxth	r3, r3
 8001596:	4413      	add	r3, r2
 8001598:	b29b      	uxth	r3, r3
 800159a:	3301      	adds	r3, #1
 800159c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800159e:	8bfb      	ldrh	r3, [r7, #30]
 80015a0:	029a      	lsls	r2, r3, #10
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	e02e      	b.n	8001606 <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80015a8:	7c7b      	ldrb	r3, [r7, #17]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	7dbb      	ldrb	r3, [r7, #22]
 80015b2:	09db      	lsrs	r3, r3, #7
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4413      	add	r3, r2
 80015b8:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 80015ba:	7d7b      	ldrb	r3, [r7, #21]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f003 0306 	and.w	r3, r3, #6
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4413      	add	r3, r2
 80015c8:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80015ca:	3302      	adds	r3, #2
 80015cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80015d0:	7d3b      	ldrb	r3, [r7, #20]
 80015d2:	099b      	lsrs	r3, r3, #6
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	7cfb      	ldrb	r3, [r7, #19]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 80015e4:	7cbb      	ldrb	r3, [r7, #18]
 80015e6:	029b      	lsls	r3, r3, #10
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80015f4:	3301      	adds	r3, #1
 80015f6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80015f8:	8bfa      	ldrh	r2, [r7, #30]
 80015fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015fe:	3b09      	subs	r3, #9
 8001600:	409a      	lsls	r2, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800160c:	e057      	b.n	80016be <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001614:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800161c:	e056      	b.n	80016cc <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 800161e:	f7ff fb95 	bl	8000d4c <wait_ready>
 8001622:	4603      	mov	r3, r0
 8001624:	2bff      	cmp	r3, #255	; 0xff
 8001626:	d14c      	bne.n	80016c2 <disk_ioctl+0x2de>
				res = RES_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800162e:	e048      	b.n	80016c2 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8001630:	2100      	movs	r1, #0
 8001632:	2049      	movs	r0, #73	; 0x49
 8001634:	f7ff fc96 	bl	8000f64 <send_cmd>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d143      	bne.n	80016c6 <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 800163e:	2110      	movs	r1, #16
 8001640:	6a38      	ldr	r0, [r7, #32]
 8001642:	f7ff fc05 	bl	8000e50 <rcvr_datablock>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d03c      	beq.n	80016c6 <disk_ioctl+0x2e2>
				res = RES_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001652:	e038      	b.n	80016c6 <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8001654:	2100      	movs	r1, #0
 8001656:	204a      	movs	r0, #74	; 0x4a
 8001658:	f7ff fc84 	bl	8000f64 <send_cmd>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d133      	bne.n	80016ca <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8001662:	2110      	movs	r1, #16
 8001664:	6a38      	ldr	r0, [r7, #32]
 8001666:	f7ff fbf3 	bl	8000e50 <rcvr_datablock>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d02c      	beq.n	80016ca <disk_ioctl+0x2e6>
				res = RES_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001676:	e028      	b.n	80016ca <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8001678:	2100      	movs	r1, #0
 800167a:	207a      	movs	r0, #122	; 0x7a
 800167c:	f7ff fc72 	bl	8000f64 <send_cmd>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d117      	bne.n	80016b6 <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8001686:	2300      	movs	r3, #0
 8001688:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800168c:	e00b      	b.n	80016a6 <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 800168e:	6a3c      	ldr	r4, [r7, #32]
 8001690:	1c63      	adds	r3, r4, #1
 8001692:	623b      	str	r3, [r7, #32]
 8001694:	f7ff fb2e 	bl	8000cf4 <rcvr_spi>
 8001698:	4603      	mov	r3, r0
 800169a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800169c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016a0:	3301      	adds	r3, #1
 80016a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d9ef      	bls.n	800168e <disk_ioctl+0x2aa>
				res = RES_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80016b4:	e00a      	b.n	80016cc <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 80016b6:	2304      	movs	r3, #4
 80016b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016bc:	e006      	b.n	80016cc <disk_ioctl+0x2e8>
			break;
 80016be:	bf00      	nop
 80016c0:	e004      	b.n	80016cc <disk_ioctl+0x2e8>
			break;
 80016c2:	bf00      	nop
 80016c4:	e002      	b.n	80016cc <disk_ioctl+0x2e8>
			break;
 80016c6:	bf00      	nop
 80016c8:	e000      	b.n	80016cc <disk_ioctl+0x2e8>
			break;
 80016ca:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 80016cc:	f7ff faf1 	bl	8000cb2 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 80016d0:	f7ff fb10 	bl	8000cf4 <rcvr_spi>
	}

	return res;
 80016d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016d8:	4618      	mov	r0, r3
 80016da:	372c      	adds	r7, #44	; 0x2c
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd90      	pop	{r4, r7, pc}
 80016e0:	20000000 	.word	0x20000000

080016e4 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <disk_timerproc+0x44>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
	if (n)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <disk_timerproc+0x1e>
		Timer1 = --n;
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <disk_timerproc+0x44>)
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <disk_timerproc+0x48>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
	if (n)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <disk_timerproc+0x36>
		Timer2 = --n;
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	3b01      	subs	r3, #1
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <disk_timerproc+0x48>)
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	7013      	strb	r3, [r2, #0]

}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000084 	.word	0x20000084
 800172c:	20000085 	.word	0x20000085

08001730 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <sdcard_systick_timerproc+0x2c>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	3301      	adds	r3, #1
 800173c:	b29a      	uxth	r2, r3
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <sdcard_systick_timerproc+0x2c>)
 8001740:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <sdcard_systick_timerproc+0x2c>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	2b09      	cmp	r3, #9
 800174a:	d904      	bls.n	8001756 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <sdcard_systick_timerproc+0x2c>)
 800174e:	2200      	movs	r2, #0
 8001750:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8001752:	f7ff ffc7 	bl	80016e4 <disk_timerproc>
	}
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200002c8 	.word	0x200002c8

08001760 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8001764:	4b02      	ldr	r3, [pc, #8]	; (8001770 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	36c55cc0 	.word	0x36c55cc0

08001774 <ld_word>:
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3301      	adds	r3, #1
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	81fb      	strh	r3, [r7, #14]
 8001784:	89fb      	ldrh	r3, [r7, #14]
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	b21a      	sxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b21b      	sxth	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	b21b      	sxth	r3, r3
 8001794:	81fb      	strh	r3, [r7, #14]
 8001796:	89fb      	ldrh	r3, [r7, #14]
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <ld_dword>:
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3303      	adds	r3, #3
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	3202      	adds	r2, #2
 80017bc:	7812      	ldrb	r2, [r2, #0]
 80017be:	4313      	orrs	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	3201      	adds	r2, #1
 80017ca:	7812      	ldrb	r2, [r2, #0]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	7812      	ldrb	r2, [r2, #0]
 80017d8:	4313      	orrs	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <st_word>:
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	807b      	strh	r3, [r7, #2]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	887a      	ldrh	r2, [r7, #2]
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	807b      	strh	r3, [r7, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	701a      	strb	r2, [r3, #0]
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <st_dword>:
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <mem_cpy>:
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00d      	beq.n	80018ae <mem_cpy+0x36>
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	1c53      	adds	r3, r2, #1
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	1c59      	adds	r1, r3, #1
 800189c:	6179      	str	r1, [r7, #20]
 800189e:	7812      	ldrb	r2, [r2, #0]
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f1      	bne.n	8001892 <mem_cpy+0x1a>
 80018ae:	bf00      	nop
 80018b0:	371c      	adds	r7, #28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <mem_set>:
 80018ba:	b480      	push	{r7}
 80018bc:	b087      	sub	sp, #28
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	617a      	str	r2, [r7, #20]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3b01      	subs	r3, #1
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f3      	bne.n	80018ca <mem_set+0x10>
 80018e2:	bf00      	nop
 80018e4:	371c      	adds	r7, #28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <mem_cmp>:
 80018ee:	b480      	push	{r7}
 80018f0:	b089      	sub	sp, #36	; 0x24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	61fa      	str	r2, [r7, #28]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	4619      	mov	r1, r3
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	61ba      	str	r2, [r7, #24]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	1acb      	subs	r3, r1, r3
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <mem_cmp+0x40>
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0eb      	beq.n	8001906 <mem_cmp+0x18>
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	4618      	mov	r0, r3
 8001932:	3724      	adds	r7, #36	; 0x24
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <chk_chr>:
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	e002      	b.n	800194e <chk_chr+0x12>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3301      	adds	r3, #1
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <chk_chr+0x26>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4293      	cmp	r3, r2
 8001960:	d1f2      	bne.n	8001948 <chk_chr+0xc>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <dbc_1st>:
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
 800197c:	2281      	movs	r2, #129	; 0x81
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	4293      	cmp	r3, r2
 8001982:	d30f      	bcc.n	80019a4 <dbc_1st+0x32>
 8001984:	229f      	movs	r2, #159	; 0x9f
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4293      	cmp	r3, r2
 800198a:	d801      	bhi.n	8001990 <dbc_1st+0x1e>
 800198c:	2301      	movs	r3, #1
 800198e:	e00a      	b.n	80019a6 <dbc_1st+0x34>
 8001990:	22e0      	movs	r2, #224	; 0xe0
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4293      	cmp	r3, r2
 8001996:	d305      	bcc.n	80019a4 <dbc_1st+0x32>
 8001998:	22fc      	movs	r2, #252	; 0xfc
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4293      	cmp	r3, r2
 800199e:	d801      	bhi.n	80019a4 <dbc_1st+0x32>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <dbc_1st+0x34>
 80019a4:	2300      	movs	r3, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <dbc_2nd>:
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	2240      	movs	r2, #64	; 0x40
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d319      	bcc.n	80019f8 <dbc_2nd+0x46>
 80019c4:	227e      	movs	r2, #126	; 0x7e
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d801      	bhi.n	80019d0 <dbc_2nd+0x1e>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e014      	b.n	80019fa <dbc_2nd+0x48>
 80019d0:	2280      	movs	r2, #128	; 0x80
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d305      	bcc.n	80019e4 <dbc_2nd+0x32>
 80019d8:	22fc      	movs	r2, #252	; 0xfc
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	4293      	cmp	r3, r2
 80019de:	d801      	bhi.n	80019e4 <dbc_2nd+0x32>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e00a      	b.n	80019fa <dbc_2nd+0x48>
 80019e4:	2200      	movs	r2, #0
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d305      	bcc.n	80019f8 <dbc_2nd+0x46>
 80019ec:	2200      	movs	r2, #0
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d801      	bhi.n	80019f8 <dbc_2nd+0x46>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <dbc_2nd+0x48>
 80019f8:	2300      	movs	r3, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <sync_window>:
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	73fb      	strb	r3, [r7, #15]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	78db      	ldrb	r3, [r3, #3]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d02c      	beq.n	8001a74 <sync_window+0x6e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7858      	ldrb	r0, [r3, #1]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f7ff fc57 	bl	80012dc <disk_write>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d11d      	bne.n	8001a70 <sync_window+0x6a>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	70da      	strb	r2, [r3, #3]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	1ad2      	subs	r2, r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d213      	bcs.n	8001a74 <sync_window+0x6e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	789b      	ldrb	r3, [r3, #2]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d10f      	bne.n	8001a74 <sync_window+0x6e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7858      	ldrb	r0, [r3, #1]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	441a      	add	r2, r3
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f7ff fc37 	bl	80012dc <disk_write>
 8001a6e:	e001      	b.n	8001a74 <sync_window+0x6e>
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <move_window>:
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b084      	sub	sp, #16
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d01b      	beq.n	8001ace <move_window+0x50>
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffb5 	bl	8001a06 <sync_window>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d113      	bne.n	8001ace <move_window+0x50>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7858      	ldrb	r0, [r3, #1]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	f7ff fba8 	bl	8001208 <disk_read>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d004      	beq.n	8001ac8 <move_window+0x4a>
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <sync_fs>:
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff90 	bl	8001a06 <sync_window>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d158      	bne.n	8001ba2 <sync_fs+0xca>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d148      	bne.n	8001b8a <sync_fs+0xb2>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	791b      	ldrb	r3, [r3, #4]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d144      	bne.n	8001b8a <sync_fs+0xb2>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3330      	adds	r3, #48	; 0x30
 8001b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fed5 	bl	80018ba <mem_set>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3330      	adds	r3, #48	; 0x30
 8001b14:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001b18:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fe64 	bl	80017ea <st_word>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3330      	adds	r3, #48	; 0x30
 8001b26:	4921      	ldr	r1, [pc, #132]	; (8001bac <sync_fs+0xd4>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fe79 	bl	8001820 <st_dword>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3330      	adds	r3, #48	; 0x30
 8001b32:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001b36:	491e      	ldr	r1, [pc, #120]	; (8001bb0 <sync_fs+0xd8>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fe71 	bl	8001820 <st_dword>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3330      	adds	r3, #48	; 0x30
 8001b42:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	f7ff fe67 	bl	8001820 <st_dword>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3330      	adds	r3, #48	; 0x30
 8001b56:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4610      	mov	r0, r2
 8001b62:	f7ff fe5d 	bl	8001820 <st_dword>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7858      	ldrb	r0, [r3, #1]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f7ff fbac 	bl	80012dc <disk_write>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	711a      	strb	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	785b      	ldrb	r3, [r3, #1]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fc26 	bl	80013e4 <disk_ioctl>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <sync_fs+0xca>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	41615252 	.word	0x41615252
 8001bb0:	61417272 	.word	0x61417272

08001bb4 <clst2sect>:
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	3b02      	subs	r3, #2
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	3b02      	subs	r3, #2
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d301      	bcc.n	8001bd4 <clst2sect+0x20>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e008      	b.n	8001be6 <clst2sect+0x32>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	895b      	ldrh	r3, [r3, #10]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	fb03 f301 	mul.w	r3, r3, r1
 8001be4:	4413      	add	r3, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <get_fat>:
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d904      	bls.n	8001c12 <get_fat+0x20>
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d302      	bcc.n	8001c18 <get_fat+0x26>
 8001c12:	2301      	movs	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e08c      	b.n	8001d32 <get_fat+0x140>
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d045      	beq.n	8001cb2 <get_fat+0xc0>
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d05d      	beq.n	8001ce6 <get_fat+0xf4>
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d177      	bne.n	8001d1e <get_fat+0x12c>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4413      	add	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	6a1a      	ldr	r2, [r3, #32]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	0a5b      	lsrs	r3, r3, #9
 8001c44:	4413      	add	r3, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	6938      	ldr	r0, [r7, #16]
 8001c4a:	f7ff ff18 	bl	8001a7e <move_window>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d167      	bne.n	8001d24 <get_fat+0x132>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	60fa      	str	r2, [r7, #12]
 8001c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	6a1a      	ldr	r2, [r3, #32]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	0a5b      	lsrs	r3, r3, #9
 8001c70:	4413      	add	r3, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	6938      	ldr	r0, [r7, #16]
 8001c76:	f7ff ff02 	bl	8001a7e <move_window>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d153      	bne.n	8001d28 <get_fat+0x136>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	461a      	mov	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <get_fat+0xb6>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	e002      	b.n	8001cae <get_fat+0xbc>
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e03f      	b.n	8001d32 <get_fat+0x140>
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	6a1a      	ldr	r2, [r3, #32]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	4413      	add	r3, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6938      	ldr	r0, [r7, #16]
 8001cc0:	f7ff fedd 	bl	8001a7e <move_window>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d130      	bne.n	8001d2c <get_fat+0x13a>
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001cd8:	4413      	add	r3, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fd4a 	bl	8001774 <ld_word>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	e025      	b.n	8001d32 <get_fat+0x140>
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	09db      	lsrs	r3, r3, #7
 8001cee:	4413      	add	r3, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	6938      	ldr	r0, [r7, #16]
 8001cf4:	f7ff fec3 	bl	8001a7e <move_window>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d118      	bne.n	8001d30 <get_fat+0x13e>
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001d0c:	4413      	add	r3, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fd48 	bl	80017a4 <ld_dword>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e009      	b.n	8001d32 <get_fat+0x140>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e006      	b.n	8001d32 <get_fat+0x140>
 8001d24:	bf00      	nop
 8001d26:	e004      	b.n	8001d32 <get_fat+0x140>
 8001d28:	bf00      	nop
 8001d2a:	e002      	b.n	8001d32 <get_fat+0x140>
 8001d2c:	bf00      	nop
 8001d2e:	e000      	b.n	8001d32 <get_fat+0x140>
 8001d30:	bf00      	nop
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <put_fat>:
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	2302      	movs	r3, #2
 8001d4a:	77fb      	strb	r3, [r7, #31]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	f240 80d6 	bls.w	8001f00 <put_fat+0x1c4>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	f080 80d0 	bcs.w	8001f00 <put_fat+0x1c4>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d073      	beq.n	8001e50 <put_fat+0x114>
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	f000 8091 	beq.w	8001e90 <put_fat+0x154>
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	f040 80c6 	bne.w	8001f00 <put_fat+0x1c4>
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4413      	add	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a1a      	ldr	r2, [r3, #32]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	0a5b      	lsrs	r3, r3, #9
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f7ff fe75 	bl	8001a7e <move_window>
 8001d94:	4603      	mov	r3, r0
 8001d96:	77fb      	strb	r3, [r7, #31]
 8001d98:	7ffb      	ldrb	r3, [r7, #31]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 80a9 	bne.w	8001ef2 <put_fat+0x1b6>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	1c59      	adds	r1, r3, #1
 8001daa:	61b9      	str	r1, [r7, #24]
 8001dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db0:	4413      	add	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00d      	beq.n	8001dda <put_fat+0x9e>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	b25a      	sxtb	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	b25b      	sxtb	r3, r3
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	e001      	b.n	8001dde <put_fat+0xa2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	7013      	strb	r3, [r2, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	70da      	strb	r2, [r3, #3]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a1a      	ldr	r2, [r3, #32]
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	0a5b      	lsrs	r3, r3, #9
 8001df0:	4413      	add	r3, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7ff fe42 	bl	8001a7e <move_window>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	77fb      	strb	r3, [r7, #31]
 8001dfe:	7ffb      	ldrb	r3, [r7, #31]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d178      	bne.n	8001ef6 <put_fat+0x1ba>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e10:	4413      	add	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <put_fat+0xea>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	e00e      	b.n	8001e44 <put_fat+0x108>
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	b25b      	sxtb	r3, r3
 8001e2c:	f023 030f 	bic.w	r3, r3, #15
 8001e30:	b25a      	sxtb	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	b25b      	sxtb	r3, r3
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	b25b      	sxtb	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	7013      	strb	r3, [r2, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	70da      	strb	r2, [r3, #3]
 8001e4e:	e057      	b.n	8001f00 <put_fat+0x1c4>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a1a      	ldr	r2, [r3, #32]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	4413      	add	r3, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f7ff fe0e 	bl	8001a7e <move_window>
 8001e62:	4603      	mov	r3, r0
 8001e64:	77fb      	strb	r3, [r7, #31]
 8001e66:	7ffb      	ldrb	r3, [r7, #31]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d146      	bne.n	8001efa <put_fat+0x1be>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001e7a:	4413      	add	r3, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	b292      	uxth	r2, r2
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fcb1 	bl	80017ea <st_word>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	70da      	strb	r2, [r3, #3]
 8001e8e:	e037      	b.n	8001f00 <put_fat+0x1c4>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a1a      	ldr	r2, [r3, #32]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	09db      	lsrs	r3, r3, #7
 8001e98:	4413      	add	r3, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f7ff fdee 	bl	8001a7e <move_window>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	77fb      	strb	r3, [r7, #31]
 8001ea6:	7ffb      	ldrb	r3, [r7, #31]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d128      	bne.n	8001efe <put_fat+0x1c2>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fc6e 	bl	80017a4 <ld_dword>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001ece:	4323      	orrs	r3, r4
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001ee0:	4413      	add	r3, r2
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fc9b 	bl	8001820 <st_dword>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2201      	movs	r2, #1
 8001eee:	70da      	strb	r2, [r3, #3]
 8001ef0:	e006      	b.n	8001f00 <put_fat+0x1c4>
 8001ef2:	bf00      	nop
 8001ef4:	e004      	b.n	8001f00 <put_fat+0x1c4>
 8001ef6:	bf00      	nop
 8001ef8:	e002      	b.n	8001f00 <put_fat+0x1c4>
 8001efa:	bf00      	nop
 8001efc:	e000      	b.n	8001f00 <put_fat+0x1c4>
 8001efe:	bf00      	nop
 8001f00:	7ffb      	ldrb	r3, [r7, #31]
 8001f02:	4618      	mov	r0, r3
 8001f04:	3724      	adds	r7, #36	; 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd90      	pop	{r4, r7, pc}

08001f0a <remove_chain>:
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b088      	sub	sp, #32
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	2300      	movs	r3, #0
 8001f18:	77fb      	strb	r3, [r7, #31]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d904      	bls.n	8001f30 <remove_chain+0x26>
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d301      	bcc.n	8001f34 <remove_chain+0x2a>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e04b      	b.n	8001fcc <remove_chain+0xc2>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00c      	beq.n	8001f54 <remove_chain+0x4a>
 8001f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	69b8      	ldr	r0, [r7, #24]
 8001f42:	f7ff fefb 	bl	8001d3c <put_fat>
 8001f46:	4603      	mov	r3, r0
 8001f48:	77fb      	strb	r3, [r7, #31]
 8001f4a:	7ffb      	ldrb	r3, [r7, #31]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <remove_chain+0x4a>
 8001f50:	7ffb      	ldrb	r3, [r7, #31]
 8001f52:	e03b      	b.n	8001fcc <remove_chain+0xc2>
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f7ff fe4b 	bl	8001bf2 <get_fat>
 8001f5c:	6178      	str	r0, [r7, #20]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d031      	beq.n	8001fc8 <remove_chain+0xbe>
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <remove_chain+0x64>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e02e      	b.n	8001fcc <remove_chain+0xc2>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d101      	bne.n	8001f7a <remove_chain+0x70>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e028      	b.n	8001fcc <remove_chain+0xc2>
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	69b8      	ldr	r0, [r7, #24]
 8001f80:	f7ff fedc 	bl	8001d3c <put_fat>
 8001f84:	4603      	mov	r3, r0
 8001f86:	77fb      	strb	r3, [r7, #31]
 8001f88:	7ffb      	ldrb	r3, [r7, #31]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <remove_chain+0x88>
 8001f8e:	7ffb      	ldrb	r3, [r7, #31]
 8001f90:	e01c      	b.n	8001fcc <remove_chain+0xc2>
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	3b02      	subs	r3, #2
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d20b      	bcs.n	8001fb8 <remove_chain+0xae>
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	611a      	str	r2, [r3, #16]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	791b      	ldrb	r3, [r3, #4]
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	711a      	strb	r2, [r3, #4]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d3c6      	bcc.n	8001f54 <remove_chain+0x4a>
 8001fc6:	e000      	b.n	8001fca <remove_chain+0xc0>
 8001fc8:	bf00      	nop
 8001fca:	2300      	movs	r3, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <create_chain>:
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <create_chain+0x32>
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <create_chain+0x2c>
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d31b      	bcc.n	8002038 <create_chain+0x64>
 8002000:	2301      	movs	r3, #1
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	e018      	b.n	8002038 <create_chain+0x64>
 8002006:	6839      	ldr	r1, [r7, #0]
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fdf2 	bl	8001bf2 <get_fat>
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d801      	bhi.n	800201a <create_chain+0x46>
 8002016:	2301      	movs	r3, #1
 8002018:	e0a9      	b.n	800216e <create_chain+0x19a>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d101      	bne.n	8002026 <create_chain+0x52>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	e0a3      	b.n	800216e <create_chain+0x19a>
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	429a      	cmp	r2, r3
 800202e:	d201      	bcs.n	8002034 <create_chain+0x60>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	e09c      	b.n	800216e <create_chain+0x19a>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <create_chain+0x70>
 8002040:	2300      	movs	r3, #0
 8002042:	e094      	b.n	800216e <create_chain+0x19a>
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d129      	bne.n	80020a4 <create_chain+0xd0>
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	3301      	adds	r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	429a      	cmp	r2, r3
 800205e:	d301      	bcc.n	8002064 <create_chain+0x90>
 8002060:	2302      	movs	r3, #2
 8002062:	61fb      	str	r3, [r7, #28]
 8002064:	69f9      	ldr	r1, [r7, #28]
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fdc3 	bl	8001bf2 <get_fat>
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d003      	beq.n	800207c <create_chain+0xa8>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207a:	d101      	bne.n	8002080 <create_chain+0xac>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	e076      	b.n	800216e <create_chain+0x19a>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00e      	beq.n	80020a4 <create_chain+0xd0>
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d906      	bls.n	80020a0 <create_chain+0xcc>
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	429a      	cmp	r2, r3
 800209a:	d201      	bcs.n	80020a0 <create_chain+0xcc>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d129      	bne.n	80020fe <create_chain+0x12a>
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3301      	adds	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d307      	bcc.n	80020ce <create_chain+0xfa>
 80020be:	2302      	movs	r3, #2
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d901      	bls.n	80020ce <create_chain+0xfa>
 80020ca:	2300      	movs	r3, #0
 80020cc:	e04f      	b.n	800216e <create_chain+0x19a>
 80020ce:	69f9      	ldr	r1, [r7, #28]
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fd8e 	bl	8001bf2 <get_fat>
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00e      	beq.n	80020fc <create_chain+0x128>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d003      	beq.n	80020ec <create_chain+0x118>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ea:	d101      	bne.n	80020f0 <create_chain+0x11c>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	e03e      	b.n	800216e <create_chain+0x19a>
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1da      	bne.n	80020ae <create_chain+0xda>
 80020f8:	2300      	movs	r3, #0
 80020fa:	e038      	b.n	800216e <create_chain+0x19a>
 80020fc:	bf00      	nop
 80020fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002102:	69f9      	ldr	r1, [r7, #28]
 8002104:	6938      	ldr	r0, [r7, #16]
 8002106:	f7ff fe19 	bl	8001d3c <put_fat>
 800210a:	4603      	mov	r3, r0
 800210c:	75fb      	strb	r3, [r7, #23]
 800210e:	7dfb      	ldrb	r3, [r7, #23]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <create_chain+0x154>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <create_chain+0x154>
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	6839      	ldr	r1, [r7, #0]
 800211e:	6938      	ldr	r0, [r7, #16]
 8002120:	f7ff fe0c 	bl	8001d3c <put_fat>
 8002124:	4603      	mov	r3, r0
 8002126:	75fb      	strb	r3, [r7, #23]
 8002128:	7dfb      	ldrb	r3, [r7, #23]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d116      	bne.n	800215c <create_chain+0x188>
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	3b02      	subs	r3, #2
 800213e:	429a      	cmp	r2, r3
 8002140:	d804      	bhi.n	800214c <create_chain+0x178>
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	1e5a      	subs	r2, r3, #1
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	611a      	str	r2, [r3, #16]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	791b      	ldrb	r3, [r3, #4]
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	b2da      	uxtb	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	711a      	strb	r2, [r3, #4]
 800215a:	e007      	b.n	800216c <create_chain+0x198>
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d102      	bne.n	8002168 <create_chain+0x194>
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	e000      	b.n	800216a <create_chain+0x196>
 8002168:	2301      	movs	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	4618      	mov	r0, r3
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <dir_clear>:
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	6039      	str	r1, [r7, #0]
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff fc40 	bl	8001a06 <sync_window>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <dir_clear+0x1a>
 800218c:	2301      	movs	r3, #1
 800218e:	e036      	b.n	80021fe <dir_clear+0x88>
 8002190:	6839      	ldr	r1, [r7, #0]
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fd0e 	bl	8001bb4 <clst2sect>
 8002198:	6138      	str	r0, [r7, #16]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3330      	adds	r3, #48	; 0x30
 80021a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fb85 	bl	80018ba <mem_set>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3330      	adds	r3, #48	; 0x30
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	2301      	movs	r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	e003      	b.n	80021c8 <dir_clear+0x52>
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	4413      	add	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	895b      	ldrh	r3, [r3, #10]
 80021cc:	461a      	mov	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d20b      	bcs.n	80021ec <dir_clear+0x76>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7858      	ldrb	r0, [r3, #1]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	441a      	add	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	68f9      	ldr	r1, [r7, #12]
 80021e2:	f7ff f87b 	bl	80012dc <disk_write>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0e9      	beq.n	80021c0 <dir_clear+0x4a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	895b      	ldrh	r3, [r3, #10]
 80021f0:	461a      	mov	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	4293      	cmp	r3, r2
 80021f6:	bf14      	ite	ne
 80021f8:	2301      	movne	r3, #1
 80021fa:	2300      	moveq	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <dir_sdi>:
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800221c:	d204      	bcs.n	8002228 <dir_sdi+0x22>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <dir_sdi+0x26>
 8002228:	2302      	movs	r3, #2
 800222a:	e063      	b.n	80022f4 <dir_sdi+0xee>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	611a      	str	r2, [r3, #16]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <dir_sdi+0x46>
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d902      	bls.n	800224c <dir_sdi+0x46>
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10c      	bne.n	800226c <dir_sdi+0x66>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	8912      	ldrh	r2, [r2, #8]
 800225a:	4293      	cmp	r3, r2
 800225c:	d301      	bcc.n	8002262 <dir_sdi+0x5c>
 800225e:	2302      	movs	r3, #2
 8002260:	e048      	b.n	80022f4 <dir_sdi+0xee>
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	619a      	str	r2, [r3, #24]
 800226a:	e029      	b.n	80022c0 <dir_sdi+0xba>
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	895b      	ldrh	r3, [r3, #10]
 8002270:	025b      	lsls	r3, r3, #9
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e019      	b.n	80022aa <dir_sdi+0xa4>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6979      	ldr	r1, [r7, #20]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fcb9 	bl	8001bf2 <get_fat>
 8002280:	6178      	str	r0, [r7, #20]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d101      	bne.n	800228e <dir_sdi+0x88>
 800228a:	2301      	movs	r3, #1
 800228c:	e032      	b.n	80022f4 <dir_sdi+0xee>
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d904      	bls.n	800229e <dir_sdi+0x98>
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	429a      	cmp	r2, r3
 800229c:	d301      	bcc.n	80022a2 <dir_sdi+0x9c>
 800229e:	2302      	movs	r3, #2
 80022a0:	e028      	b.n	80022f4 <dir_sdi+0xee>
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d2e1      	bcs.n	8002276 <dir_sdi+0x70>
 80022b2:	6979      	ldr	r1, [r7, #20]
 80022b4:	6938      	ldr	r0, [r7, #16]
 80022b6:	f7ff fc7d 	bl	8001bb4 <clst2sect>
 80022ba:	4602      	mov	r2, r0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	615a      	str	r2, [r3, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <dir_sdi+0xcc>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e010      	b.n	80022f4 <dir_sdi+0xee>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	0a5b      	lsrs	r3, r3, #9
 80022da:	441a      	add	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ec:	441a      	add	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	61da      	str	r2, [r3, #28]
 80022f2:	2300      	movs	r3, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <dir_next>:
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	3320      	adds	r3, #32
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800231a:	d302      	bcc.n	8002322 <dir_next+0x26>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	619a      	str	r2, [r3, #24]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <dir_next+0x32>
 800232a:	2304      	movs	r3, #4
 800232c:	e078      	b.n	8002420 <dir_next+0x124>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002334:	2b00      	cmp	r3, #0
 8002336:	d166      	bne.n	8002406 <dir_next+0x10a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	619a      	str	r2, [r3, #24]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10a      	bne.n	8002360 <dir_next+0x64>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	8912      	ldrh	r2, [r2, #8]
 8002352:	4293      	cmp	r3, r2
 8002354:	d357      	bcc.n	8002406 <dir_next+0x10a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
 800235c:	2304      	movs	r3, #4
 800235e:	e05f      	b.n	8002420 <dir_next+0x124>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	0a5b      	lsrs	r3, r3, #9
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	8952      	ldrh	r2, [r2, #10]
 8002368:	3a01      	subs	r2, #1
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d14a      	bne.n	8002406 <dir_next+0x10a>
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4619      	mov	r1, r3
 8002378:	4610      	mov	r0, r2
 800237a:	f7ff fc3a 	bl	8001bf2 <get_fat>
 800237e:	6178      	str	r0, [r7, #20]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d801      	bhi.n	800238a <dir_next+0x8e>
 8002386:	2302      	movs	r3, #2
 8002388:	e04a      	b.n	8002420 <dir_next+0x124>
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d101      	bne.n	8002396 <dir_next+0x9a>
 8002392:	2301      	movs	r3, #1
 8002394:	e044      	b.n	8002420 <dir_next+0x124>
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	429a      	cmp	r2, r3
 800239e:	d328      	bcc.n	80023f2 <dir_next+0xf6>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <dir_next+0xb4>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
 80023ac:	2304      	movs	r3, #4
 80023ae:	e037      	b.n	8002420 <dir_next+0x124>
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f7ff fe0b 	bl	8001fd4 <create_chain>
 80023be:	6178      	str	r0, [r7, #20]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <dir_next+0xce>
 80023c6:	2307      	movs	r3, #7
 80023c8:	e02a      	b.n	8002420 <dir_next+0x124>
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <dir_next+0xd8>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e025      	b.n	8002420 <dir_next+0x124>
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023da:	d101      	bne.n	80023e0 <dir_next+0xe4>
 80023dc:	2301      	movs	r3, #1
 80023de:	e01f      	b.n	8002420 <dir_next+0x124>
 80023e0:	6979      	ldr	r1, [r7, #20]
 80023e2:	6938      	ldr	r0, [r7, #16]
 80023e4:	f7ff fec7 	bl	8002176 <dir_clear>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <dir_next+0xf6>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e016      	b.n	8002420 <dir_next+0x124>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	615a      	str	r2, [r3, #20]
 80023f8:	6979      	ldr	r1, [r7, #20]
 80023fa:	6938      	ldr	r0, [r7, #16]
 80023fc:	f7ff fbda 	bl	8001bb4 <clst2sect>
 8002400:	4602      	mov	r2, r0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	619a      	str	r2, [r3, #24]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	611a      	str	r2, [r3, #16]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002418:	441a      	add	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	61da      	str	r2, [r3, #28]
 800241e:	2300      	movs	r3, #0
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <dir_alloc>:
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	2100      	movs	r1, #0
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff fee3 	bl	8002206 <dir_sdi>
 8002440:	4603      	mov	r3, r0
 8002442:	75fb      	strb	r3, [r7, #23]
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d12b      	bne.n	80024a2 <dir_alloc+0x7a>
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	4619      	mov	r1, r3
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f7ff fb12 	bl	8001a7e <move_window>
 800245a:	4603      	mov	r3, r0
 800245c:	75fb      	strb	r3, [r7, #23]
 800245e:	7dfb      	ldrb	r3, [r7, #23]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d11d      	bne.n	80024a0 <dir_alloc+0x78>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2be5      	cmp	r3, #229	; 0xe5
 800246c:	d004      	beq.n	8002478 <dir_alloc+0x50>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d107      	bne.n	8002488 <dir_alloc+0x60>
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	3301      	adds	r3, #1
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d102      	bne.n	800248c <dir_alloc+0x64>
 8002486:	e00c      	b.n	80024a2 <dir_alloc+0x7a>
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	2101      	movs	r1, #1
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ff34 	bl	80022fc <dir_next>
 8002494:	4603      	mov	r3, r0
 8002496:	75fb      	strb	r3, [r7, #23]
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0d7      	beq.n	800244e <dir_alloc+0x26>
 800249e:	e000      	b.n	80024a2 <dir_alloc+0x7a>
 80024a0:	bf00      	nop
 80024a2:	7dfb      	ldrb	r3, [r7, #23]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d101      	bne.n	80024ac <dir_alloc+0x84>
 80024a8:	2307      	movs	r3, #7
 80024aa:	75fb      	strb	r3, [r7, #23]
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <ld_clust>:
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	331a      	adds	r3, #26
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff f955 	bl	8001774 <ld_word>
 80024ca:	4603      	mov	r3, r0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d109      	bne.n	80024ea <ld_clust+0x34>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	3314      	adds	r3, #20
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff f94a 	bl	8001774 <ld_word>
 80024e0:	4603      	mov	r3, r0
 80024e2:	041b      	lsls	r3, r3, #16
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <st_clust>:
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	331a      	adds	r3, #26
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	b292      	uxth	r2, r2
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f96d 	bl	80017ea <st_word>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d109      	bne.n	800252c <st_clust+0x38>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f103 0214 	add.w	r2, r3, #20
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0c1b      	lsrs	r3, r3, #16
 8002522:	b29b      	uxth	r3, r3
 8002524:	4619      	mov	r1, r3
 8002526:	4610      	mov	r0, r2
 8002528:	f7ff f95f 	bl	80017ea <st_word>
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <dir_find>:
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	2100      	movs	r1, #0
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fe5e 	bl	8002206 <dir_sdi>
 800254a:	4603      	mov	r3, r0
 800254c:	75fb      	strb	r3, [r7, #23]
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <dir_find+0x24>
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	e03e      	b.n	80025d6 <dir_find+0xa2>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	4619      	mov	r1, r3
 800255e:	6938      	ldr	r0, [r7, #16]
 8002560:	f7ff fa8d 	bl	8001a7e <move_window>
 8002564:	4603      	mov	r3, r0
 8002566:	75fb      	strb	r3, [r7, #23]
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d12f      	bne.n	80025ce <dir_find+0x9a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <dir_find+0x4e>
 800257c:	2304      	movs	r3, #4
 800257e:	75fb      	strb	r3, [r7, #23]
 8002580:	e028      	b.n	80025d4 <dir_find+0xa0>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	330b      	adds	r3, #11
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800258e:	b2da      	uxtb	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	719a      	strb	r2, [r3, #6]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	330b      	adds	r3, #11
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <dir_find+0x86>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69d8      	ldr	r0, [r3, #28]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3320      	adds	r3, #32
 80025ac:	220b      	movs	r2, #11
 80025ae:	4619      	mov	r1, r3
 80025b0:	f7ff f99d 	bl	80018ee <mem_cmp>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <dir_find+0x9e>
 80025ba:	2100      	movs	r1, #0
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff fe9d 	bl	80022fc <dir_next>
 80025c2:	4603      	mov	r3, r0
 80025c4:	75fb      	strb	r3, [r7, #23]
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0c5      	beq.n	8002558 <dir_find+0x24>
 80025cc:	e002      	b.n	80025d4 <dir_find+0xa0>
 80025ce:	bf00      	nop
 80025d0:	e000      	b.n	80025d4 <dir_find+0xa0>
 80025d2:	bf00      	nop
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <dir_register>:
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	2101      	movs	r1, #1
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ff1a 	bl	8002428 <dir_alloc>
 80025f4:	4603      	mov	r3, r0
 80025f6:	73fb      	strb	r3, [r7, #15]
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d11c      	bne.n	8002638 <dir_register+0x5a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	4619      	mov	r1, r3
 8002604:	68b8      	ldr	r0, [r7, #8]
 8002606:	f7ff fa3a 	bl	8001a7e <move_window>
 800260a:	4603      	mov	r3, r0
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d111      	bne.n	8002638 <dir_register+0x5a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2220      	movs	r2, #32
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff f94c 	bl	80018ba <mem_set>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69d8      	ldr	r0, [r3, #28]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3320      	adds	r3, #32
 800262a:	220b      	movs	r2, #11
 800262c:	4619      	mov	r1, r3
 800262e:	f7ff f923 	bl	8001878 <mem_cpy>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2201      	movs	r2, #1
 8002636:	70da      	strb	r2, [r3, #3]
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <create_name>:
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3320      	adds	r3, #32
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	220b      	movs	r2, #11
 800265c:	2120      	movs	r1, #32
 800265e:	6938      	ldr	r0, [r7, #16]
 8002660:	f7ff f92b 	bl	80018ba <mem_set>
 8002664:	2300      	movs	r3, #0
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	2308      	movs	r3, #8
 800266e:	623b      	str	r3, [r7, #32]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	61fa      	str	r2, [r7, #28]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4413      	add	r3, r2
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002684:	2b20      	cmp	r3, #32
 8002686:	d97c      	bls.n	8002782 <create_name+0x13e>
 8002688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800268c:	2b2f      	cmp	r3, #47	; 0x2f
 800268e:	d007      	beq.n	80026a0 <create_name+0x5c>
 8002690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002694:	2b5c      	cmp	r3, #92	; 0x5c
 8002696:	d110      	bne.n	80026ba <create_name+0x76>
 8002698:	e002      	b.n	80026a0 <create_name+0x5c>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3301      	adds	r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	4413      	add	r3, r2
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b2f      	cmp	r3, #47	; 0x2f
 80026aa:	d0f6      	beq.n	800269a <create_name+0x56>
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	4413      	add	r3, r2
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b5c      	cmp	r3, #92	; 0x5c
 80026b6:	d0f0      	beq.n	800269a <create_name+0x56>
 80026b8:	e064      	b.n	8002784 <create_name+0x140>
 80026ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026be:	2b2e      	cmp	r3, #46	; 0x2e
 80026c0:	d003      	beq.n	80026ca <create_name+0x86>
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d30d      	bcc.n	80026e6 <create_name+0xa2>
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	2b0b      	cmp	r3, #11
 80026ce:	d003      	beq.n	80026d8 <create_name+0x94>
 80026d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026d4:	2b2e      	cmp	r3, #46	; 0x2e
 80026d6:	d001      	beq.n	80026dc <create_name+0x98>
 80026d8:	2306      	movs	r3, #6
 80026da:	e06f      	b.n	80027bc <create_name+0x178>
 80026dc:	2308      	movs	r3, #8
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	230b      	movs	r3, #11
 80026e2:	623b      	str	r3, [r7, #32]
 80026e4:	e04c      	b.n	8002780 <create_name+0x13c>
 80026e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff f941 	bl	8001972 <dbc_1st>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d024      	beq.n	8002740 <create_name+0xfc>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	61fa      	str	r2, [r7, #28]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4413      	add	r3, r2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f953 	bl	80019b2 <dbc_2nd>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d004      	beq.n	800271c <create_name+0xd8>
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	3b01      	subs	r3, #1
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	429a      	cmp	r2, r3
 800271a:	d301      	bcc.n	8002720 <create_name+0xdc>
 800271c:	2306      	movs	r3, #6
 800271e:	e04d      	b.n	80027bc <create_name+0x178>
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	61ba      	str	r2, [r7, #24]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800272e:	701a      	strb	r2, [r3, #0]
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	61ba      	str	r2, [r7, #24]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	e797      	b.n	8002670 <create_name+0x2c>
 8002740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002744:	4619      	mov	r1, r3
 8002746:	481f      	ldr	r0, [pc, #124]	; (80027c4 <create_name+0x180>)
 8002748:	f7ff f8f8 	bl	800193c <chk_chr>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <create_name+0x112>
 8002752:	2306      	movs	r3, #6
 8002754:	e032      	b.n	80027bc <create_name+0x178>
 8002756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800275a:	2b60      	cmp	r3, #96	; 0x60
 800275c:	d908      	bls.n	8002770 <create_name+0x12c>
 800275e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002762:	2b7a      	cmp	r3, #122	; 0x7a
 8002764:	d804      	bhi.n	8002770 <create_name+0x12c>
 8002766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800276a:	3b20      	subs	r3, #32
 800276c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	61ba      	str	r2, [r7, #24]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e776      	b.n	8002670 <create_name+0x2c>
 8002782:	bf00      	nop
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	441a      	add	r2, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <create_name+0x154>
 8002794:	2306      	movs	r3, #6
 8002796:	e011      	b.n	80027bc <create_name+0x178>
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2be5      	cmp	r3, #229	; 0xe5
 800279e:	d102      	bne.n	80027a6 <create_name+0x162>
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2205      	movs	r2, #5
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d801      	bhi.n	80027b2 <create_name+0x16e>
 80027ae:	2204      	movs	r2, #4
 80027b0:	e000      	b.n	80027b4 <create_name+0x170>
 80027b2:	2200      	movs	r2, #0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	330b      	adds	r3, #11
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	2300      	movs	r3, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	3728      	adds	r7, #40	; 0x28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	080078c0 	.word	0x080078c0

080027c8 <follow_path>:
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	e002      	b.n	80027e0 <follow_path+0x18>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	3301      	adds	r3, #1
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b2f      	cmp	r3, #47	; 0x2f
 80027e6:	d0f8      	beq.n	80027da <follow_path+0x12>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b5c      	cmp	r3, #92	; 0x5c
 80027ee:	d0f4      	beq.n	80027da <follow_path+0x12>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b1f      	cmp	r3, #31
 80027fc:	d80a      	bhi.n	8002814 <follow_path+0x4c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2280      	movs	r2, #128	; 0x80
 8002802:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8002806:	2100      	movs	r1, #0
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff fcfc 	bl	8002206 <dir_sdi>
 800280e:	4603      	mov	r3, r0
 8002810:	75fb      	strb	r3, [r7, #23]
 8002812:	e043      	b.n	800289c <follow_path+0xd4>
 8002814:	463b      	mov	r3, r7
 8002816:	4619      	mov	r1, r3
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ff13 	bl	8002644 <create_name>
 800281e:	4603      	mov	r3, r0
 8002820:	75fb      	strb	r3, [r7, #23]
 8002822:	7dfb      	ldrb	r3, [r7, #23]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d134      	bne.n	8002892 <follow_path+0xca>
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fe83 	bl	8002534 <dir_find>
 800282e:	4603      	mov	r3, r0
 8002830:	75fb      	strb	r3, [r7, #23]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	7dfb      	ldrb	r3, [r7, #23]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <follow_path+0x8e>
 8002840:	7dfb      	ldrb	r3, [r7, #23]
 8002842:	2b04      	cmp	r3, #4
 8002844:	d127      	bne.n	8002896 <follow_path+0xce>
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d122      	bne.n	8002896 <follow_path+0xce>
 8002850:	2305      	movs	r3, #5
 8002852:	75fb      	strb	r3, [r7, #23]
 8002854:	e01f      	b.n	8002896 <follow_path+0xce>
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d11c      	bne.n	800289a <follow_path+0xd2>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	799b      	ldrb	r3, [r3, #6]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <follow_path+0xaa>
 800286c:	2305      	movs	r3, #5
 800286e:	75fb      	strb	r3, [r7, #23]
 8002870:	e014      	b.n	800289c <follow_path+0xd4>
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002880:	4413      	add	r3, r2
 8002882:	4619      	mov	r1, r3
 8002884:	6938      	ldr	r0, [r7, #16]
 8002886:	f7ff fe16 	bl	80024b6 <ld_clust>
 800288a:	4602      	mov	r2, r0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	e7c0      	b.n	8002814 <follow_path+0x4c>
 8002892:	bf00      	nop
 8002894:	e002      	b.n	800289c <follow_path+0xd4>
 8002896:	bf00      	nop
 8002898:	e000      	b.n	800289c <follow_path+0xd4>
 800289a:	bf00      	nop
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <get_ldnumber>:
 80028a6:	b480      	push	{r7}
 80028a8:	b089      	sub	sp, #36	; 0x24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <get_ldnumber+0x22>
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	e02d      	b.n	8002924 <get_ldnumber+0x7e>
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	61fa      	str	r2, [r7, #28]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	73fb      	strb	r3, [r7, #15]
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d902      	bls.n	80028de <get_ldnumber+0x38>
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b3a      	cmp	r3, #58	; 0x3a
 80028dc:	d1f4      	bne.n	80028c8 <get_ldnumber+0x22>
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	2b3a      	cmp	r3, #58	; 0x3a
 80028e2:	d11c      	bne.n	800291e <get_ldnumber+0x78>
 80028e4:	2301      	movs	r3, #1
 80028e6:	61bb      	str	r3, [r7, #24]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b2f      	cmp	r3, #47	; 0x2f
 80028ee:	d90c      	bls.n	800290a <get_ldnumber+0x64>
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b39      	cmp	r3, #57	; 0x39
 80028f6:	d808      	bhi.n	800290a <get_ldnumber+0x64>
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	3302      	adds	r3, #2
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d103      	bne.n	800290a <get_ldnumber+0x64>
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	3b30      	subs	r3, #48	; 0x30
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	2b00      	cmp	r3, #0
 800290e:	dc04      	bgt.n	800291a <get_ldnumber+0x74>
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	e002      	b.n	8002924 <get_ldnumber+0x7e>
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	4618      	mov	r0, r3
 8002926:	3724      	adds	r7, #36	; 0x24
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <check_fs>:
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	70da      	strb	r2, [r3, #3]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f04f 32ff 	mov.w	r2, #4294967295
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c
 8002948:	6839      	ldr	r1, [r7, #0]
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff f897 	bl	8001a7e <move_window>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <check_fs+0x2a>
 8002956:	2304      	movs	r3, #4
 8002958:	e038      	b.n	80029cc <check_fs+0x9c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3330      	adds	r3, #48	; 0x30
 800295e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe ff06 	bl	8001774 <ld_word>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <check_fs+0x48>
 8002974:	2303      	movs	r3, #3
 8002976:	e029      	b.n	80029cc <check_fs+0x9c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800297e:	2be9      	cmp	r3, #233	; 0xe9
 8002980:	d009      	beq.n	8002996 <check_fs+0x66>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002988:	2beb      	cmp	r3, #235	; 0xeb
 800298a:	d004      	beq.n	8002996 <check_fs+0x66>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002992:	2be8      	cmp	r3, #232	; 0xe8
 8002994:	d119      	bne.n	80029ca <check_fs+0x9a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3330      	adds	r3, #48	; 0x30
 800299a:	3336      	adds	r3, #54	; 0x36
 800299c:	2203      	movs	r2, #3
 800299e:	490d      	ldr	r1, [pc, #52]	; (80029d4 <check_fs+0xa4>)
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe ffa4 	bl	80018ee <mem_cmp>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <check_fs+0x80>
 80029ac:	2300      	movs	r3, #0
 80029ae:	e00d      	b.n	80029cc <check_fs+0x9c>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3330      	adds	r3, #48	; 0x30
 80029b4:	3352      	adds	r3, #82	; 0x52
 80029b6:	2205      	movs	r2, #5
 80029b8:	4907      	ldr	r1, [pc, #28]	; (80029d8 <check_fs+0xa8>)
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe ff97 	bl	80018ee <mem_cmp>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <check_fs+0x9a>
 80029c6:	2300      	movs	r3, #0
 80029c8:	e000      	b.n	80029cc <check_fs+0x9c>
 80029ca:	2302      	movs	r3, #2
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	080078d0 	.word	0x080078d0
 80029d8:	080078d4 	.word	0x080078d4

080029dc <find_volume>:
 80029dc:	b580      	push	{r7, lr}
 80029de:	b096      	sub	sp, #88	; 0x58
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	4613      	mov	r3, r2
 80029e8:	71fb      	strb	r3, [r7, #7]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff ff58 	bl	80028a6 <get_ldnumber>
 80029f6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80029f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	da01      	bge.n	8002a02 <find_volume+0x26>
 80029fe:	230b      	movs	r3, #11
 8002a00:	e238      	b.n	8002e74 <find_volume+0x498>
 8002a02:	4aa8      	ldr	r2, [pc, #672]	; (8002ca4 <find_volume+0x2c8>)
 8002a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <find_volume+0x3a>
 8002a12:	230c      	movs	r3, #12
 8002a14:	e22e      	b.n	8002e74 <find_volume+0x498>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	71fb      	strb	r3, [r7, #7]
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d01a      	beq.n	8002a62 <find_volume+0x86>
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2e:	785b      	ldrb	r3, [r3, #1]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe fbd3 	bl	80011dc <disk_status>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002a3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10c      	bne.n	8002a62 <find_volume+0x86>
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <find_volume+0x82>
 8002a4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <find_volume+0x82>
 8002a5a:	230a      	movs	r3, #10
 8002a5c:	e20a      	b.n	8002e74 <find_volume+0x498>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e208      	b.n	8002e74 <find_volume+0x498>
 8002a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6e:	705a      	strb	r2, [r3, #1]
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	785b      	ldrb	r3, [r3, #1]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fe fac7 	bl	8001008 <disk_initialize>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002a80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <find_volume+0xb4>
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e1f1      	b.n	8002e74 <find_volume+0x498>
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <find_volume+0xca>
 8002a96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <find_volume+0xca>
 8002aa2:	230a      	movs	r3, #10
 8002aa4:	e1e6      	b.n	8002e74 <find_volume+0x498>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	653b      	str	r3, [r7, #80]	; 0x50
 8002aaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002aac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002aae:	f7ff ff3f 	bl	8002930 <check_fs>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002ab8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d14b      	bne.n	8002b58 <find_volume+0x17c>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ac4:	e01f      	b.n	8002b06 <find_volume+0x12a>
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002ad4:	4413      	add	r3, r2
 8002ad6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	3304      	adds	r3, #4
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <find_volume+0x114>
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	3308      	adds	r3, #8
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fe5c 	bl	80017a4 <ld_dword>
 8002aec:	4602      	mov	r2, r0
 8002aee:	e000      	b.n	8002af2 <find_volume+0x116>
 8002af0:	2200      	movs	r2, #0
 8002af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002afa:	440b      	add	r3, r1
 8002afc:	f843 2c44 	str.w	r2, [r3, #-68]
 8002b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b02:	3301      	adds	r3, #1
 8002b04:	643b      	str	r3, [r7, #64]	; 0x40
 8002b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d9dc      	bls.n	8002ac6 <find_volume+0xea>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <find_volume+0x140>
 8002b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002b24:	4413      	add	r3, r2
 8002b26:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <find_volume+0x162>
 8002b32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002b34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b36:	f7ff fefb 	bl	8002930 <check_fs>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	e000      	b.n	8002b40 <find_volume+0x164>
 8002b3e:	2303      	movs	r3, #3
 8002b40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002b44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d905      	bls.n	8002b58 <find_volume+0x17c>
 8002b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b4e:	3301      	adds	r3, #1
 8002b50:	643b      	str	r3, [r7, #64]	; 0x40
 8002b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d9e1      	bls.n	8002b1c <find_volume+0x140>
 8002b58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d101      	bne.n	8002b64 <find_volume+0x188>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e187      	b.n	8002e74 <find_volume+0x498>
 8002b64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d901      	bls.n	8002b70 <find_volume+0x194>
 8002b6c:	230d      	movs	r3, #13
 8002b6e:	e181      	b.n	8002e74 <find_volume+0x498>
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	3330      	adds	r3, #48	; 0x30
 8002b74:	330b      	adds	r3, #11
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fdfc 	bl	8001774 <ld_word>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b82:	d001      	beq.n	8002b88 <find_volume+0x1ac>
 8002b84:	230d      	movs	r3, #13
 8002b86:	e175      	b.n	8002e74 <find_volume+0x498>
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	3330      	adds	r3, #48	; 0x30
 8002b8c:	3316      	adds	r3, #22
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fdf0 	bl	8001774 <ld_word>
 8002b94:	4603      	mov	r3, r0
 8002b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <find_volume+0x1d0>
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba0:	3330      	adds	r3, #48	; 0x30
 8002ba2:	3324      	adds	r3, #36	; 0x24
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe fdfd 	bl	80017a4 <ld_dword>
 8002baa:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bb0:	619a      	str	r2, [r3, #24]
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bba:	709a      	strb	r2, [r3, #2]
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbe:	789b      	ldrb	r3, [r3, #2]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d005      	beq.n	8002bd0 <find_volume+0x1f4>
 8002bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc6:	789b      	ldrb	r3, [r3, #2]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d001      	beq.n	8002bd0 <find_volume+0x1f4>
 8002bcc:	230d      	movs	r3, #13
 8002bce:	e151      	b.n	8002e74 <find_volume+0x498>
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd2:	789b      	ldrb	r3, [r3, #2]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	815a      	strh	r2, [r3, #10]
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	895b      	ldrh	r3, [r3, #10]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <find_volume+0x228>
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf4:	895b      	ldrh	r3, [r3, #10]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfa:	895b      	ldrh	r3, [r3, #10]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <find_volume+0x22c>
 8002c04:	230d      	movs	r3, #13
 8002c06:	e135      	b.n	8002e74 <find_volume+0x498>
 8002c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0a:	3330      	adds	r3, #48	; 0x30
 8002c0c:	3311      	adds	r3, #17
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fdb0 	bl	8001774 <ld_word>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1a:	811a      	strh	r2, [r3, #8]
 8002c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1e:	891b      	ldrh	r3, [r3, #8]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <find_volume+0x252>
 8002c2a:	230d      	movs	r3, #13
 8002c2c:	e122      	b.n	8002e74 <find_volume+0x498>
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c30:	3330      	adds	r3, #48	; 0x30
 8002c32:	3313      	adds	r3, #19
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe fd9d 	bl	8001774 <ld_word>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d106      	bne.n	8002c52 <find_volume+0x276>
 8002c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c46:	3330      	adds	r3, #48	; 0x30
 8002c48:	3320      	adds	r3, #32
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fdaa 	bl	80017a4 <ld_dword>
 8002c50:	64b8      	str	r0, [r7, #72]	; 0x48
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c54:	3330      	adds	r3, #48	; 0x30
 8002c56:	330e      	adds	r3, #14
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe fd8b 	bl	8001774 <ld_word>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002c62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <find_volume+0x290>
 8002c68:	230d      	movs	r3, #13
 8002c6a:	e103      	b.n	8002e74 <find_volume+0x498>
 8002c6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c70:	4413      	add	r3, r2
 8002c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c74:	8912      	ldrh	r2, [r2, #8]
 8002c76:	0912      	lsrs	r2, r2, #4
 8002c78:	b292      	uxth	r2, r2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d201      	bcs.n	8002c8a <find_volume+0x2ae>
 8002c86:	230d      	movs	r3, #13
 8002c88:	e0f4      	b.n	8002e74 <find_volume+0x498>
 8002c8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c92:	8952      	ldrh	r2, [r2, #10]
 8002c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <find_volume+0x2cc>
 8002ca0:	230d      	movs	r3, #13
 8002ca2:	e0e7      	b.n	8002e74 <find_volume+0x498>
 8002ca4:	20000088 	.word	0x20000088
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	4a72      	ldr	r2, [pc, #456]	; (8002e7c <find_volume+0x4a0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d802      	bhi.n	8002cbc <find_volume+0x2e0>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d802      	bhi.n	8002ccc <find_volume+0x2f0>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d802      	bhi.n	8002cdc <find_volume+0x300>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002cdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <find_volume+0x30c>
 8002ce4:	230d      	movs	r3, #13
 8002ce6:	e0c5      	b.n	8002e74 <find_volume+0x498>
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	1c9a      	adds	r2, r3, #2
 8002cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cee:	615a      	str	r2, [r3, #20]
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cf4:	61da      	str	r2, [r3, #28]
 8002cf6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cfa:	441a      	add	r2, r3
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	621a      	str	r2, [r3, #32]
 8002d00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d04:	441a      	add	r2, r3
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	629a      	str	r2, [r3, #40]	; 0x28
 8002d0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d11e      	bne.n	8002d50 <find_volume+0x374>
 8002d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d14:	3330      	adds	r3, #48	; 0x30
 8002d16:	332a      	adds	r3, #42	; 0x2a
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe fd2b 	bl	8001774 <ld_word>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <find_volume+0x34c>
 8002d24:	230d      	movs	r3, #13
 8002d26:	e0a5      	b.n	8002e74 <find_volume+0x498>
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	891b      	ldrh	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <find_volume+0x358>
 8002d30:	230d      	movs	r3, #13
 8002d32:	e09f      	b.n	8002e74 <find_volume+0x498>
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	3330      	adds	r3, #48	; 0x30
 8002d38:	332c      	adds	r3, #44	; 0x2c
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe fd32 	bl	80017a4 <ld_dword>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24
 8002d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d4e:	e01f      	b.n	8002d90 <find_volume+0x3b4>
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	891b      	ldrh	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <find_volume+0x380>
 8002d58:	230d      	movs	r3, #13
 8002d5a:	e08b      	b.n	8002e74 <find_volume+0x498>
 8002d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5e:	6a1a      	ldr	r2, [r3, #32]
 8002d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d62:	441a      	add	r2, r3
 8002d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24
 8002d68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d103      	bne.n	8002d78 <find_volume+0x39c>
 8002d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	e00a      	b.n	8002d8e <find_volume+0x3b2>
 8002d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	085a      	lsrs	r2, r3, #1
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d96:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d9a:	0a5b      	lsrs	r3, r3, #9
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d201      	bcs.n	8002da4 <find_volume+0x3c8>
 8002da0:	230d      	movs	r3, #13
 8002da2:	e067      	b.n	8002e74 <find_volume+0x498>
 8002da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da6:	f04f 32ff 	mov.w	r2, #4294967295
 8002daa:	611a      	str	r2, [r3, #16]
 8002dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	2280      	movs	r2, #128	; 0x80
 8002db8:	711a      	strb	r2, [r3, #4]
 8002dba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d149      	bne.n	8002e56 <find_volume+0x47a>
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	3330      	adds	r3, #48	; 0x30
 8002dc6:	3330      	adds	r3, #48	; 0x30
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fe fcd3 	bl	8001774 <ld_word>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d140      	bne.n	8002e56 <find_volume+0x47a>
 8002dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	4619      	mov	r1, r3
 8002dda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ddc:	f7fe fe4f 	bl	8001a7e <move_window>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d137      	bne.n	8002e56 <find_volume+0x47a>
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de8:	2200      	movs	r2, #0
 8002dea:	711a      	strb	r2, [r3, #4]
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	3330      	adds	r3, #48	; 0x30
 8002df0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe fcbd 	bl	8001774 <ld_word>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d127      	bne.n	8002e56 <find_volume+0x47a>
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	3330      	adds	r3, #48	; 0x30
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fcca 	bl	80017a4 <ld_dword>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <find_volume+0x4a4>)
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d11e      	bne.n	8002e56 <find_volume+0x47a>
 8002e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1a:	3330      	adds	r3, #48	; 0x30
 8002e1c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe fcbf 	bl	80017a4 <ld_dword>
 8002e26:	4602      	mov	r2, r0
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <find_volume+0x4a8>)
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d113      	bne.n	8002e56 <find_volume+0x47a>
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	3330      	adds	r3, #48	; 0x30
 8002e32:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe fcb4 	bl	80017a4 <ld_dword>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e40:	611a      	str	r2, [r3, #16]
 8002e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e44:	3330      	adds	r3, #48	; 0x30
 8002e46:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe fcaa 	bl	80017a4 <ld_dword>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <find_volume+0x4ac>)
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	3301      	adds	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <find_volume+0x4ac>)
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <find_volume+0x4ac>)
 8002e6c:	881a      	ldrh	r2, [r3, #0]
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	80da      	strh	r2, [r3, #6]
 8002e72:	2300      	movs	r3, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	3758      	adds	r7, #88	; 0x58
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	0ffffff5 	.word	0x0ffffff5
 8002e80:	41615252 	.word	0x41615252
 8002e84:	61417272 	.word	0x61417272
 8002e88:	2000008c 	.word	0x2000008c

08002e8c <validate>:
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
 8002e96:	2309      	movs	r3, #9
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01c      	beq.n	8002eda <validate+0x4e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d018      	beq.n	8002eda <validate+0x4e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d013      	beq.n	8002eda <validate+0x4e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	889a      	ldrh	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	88db      	ldrh	r3, [r3, #6]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d10c      	bne.n	8002eda <validate+0x4e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	785b      	ldrb	r3, [r3, #1]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe f988 	bl	80011dc <disk_status>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <validate+0x4e>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d102      	bne.n	8002ee6 <validate+0x5a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	e000      	b.n	8002ee8 <validate+0x5c>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <f_mount>:
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	4613      	mov	r3, r2
 8002f04:	71fb      	strb	r3, [r7, #7]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	f107 0310 	add.w	r3, r7, #16
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fcc9 	bl	80028a6 <get_ldnumber>
 8002f14:	61f8      	str	r0, [r7, #28]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da01      	bge.n	8002f20 <f_mount+0x28>
 8002f1c:	230b      	movs	r3, #11
 8002f1e:	e025      	b.n	8002f6c <f_mount+0x74>
 8002f20:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <f_mount+0x7c>)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <f_mount+0x3e>
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <f_mount+0x4a>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	490b      	ldr	r1, [pc, #44]	; (8002f74 <f_mount+0x7c>)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <f_mount+0x5e>
 8002f52:	2300      	movs	r3, #0
 8002f54:	e00a      	b.n	8002f6c <f_mount+0x74>
 8002f56:	f107 010c 	add.w	r1, r7, #12
 8002f5a:	f107 0308 	add.w	r3, r7, #8
 8002f5e:	2200      	movs	r2, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fd3b 	bl	80029dc <find_volume>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3720      	adds	r7, #32
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000088 	.word	0x20000088

08002f78 <f_open>:
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b099      	sub	sp, #100	; 0x64
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	4613      	mov	r3, r2
 8002f84:	71fb      	strb	r3, [r7, #7]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <f_open+0x18>
 8002f8c:	2309      	movs	r3, #9
 8002f8e:	e172      	b.n	8003276 <f_open+0x2fe>
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f96:	71fb      	strb	r3, [r7, #7]
 8002f98:	79fa      	ldrb	r2, [r7, #7]
 8002f9a:	f107 0114 	add.w	r1, r7, #20
 8002f9e:	f107 0308 	add.w	r3, r7, #8
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fd1a 	bl	80029dc <find_volume>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002fae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f040 8156 	bne.w	8003264 <f_open+0x2ec>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	f107 0318 	add.w	r3, r7, #24
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fbff 	bl	80027c8 <follow_path>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002fd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d107      	bne.n	8002fe8 <f_open+0x70>
 8002fd8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002fdc:	b25b      	sxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	da02      	bge.n	8002fe8 <f_open+0x70>
 8002fe2:	2306      	movs	r3, #6
 8002fe4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	f003 031c 	and.w	r3, r3, #28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d073      	beq.n	80030da <f_open+0x162>
 8002ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d010      	beq.n	800301c <f_open+0xa4>
 8002ffa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d107      	bne.n	8003012 <f_open+0x9a>
 8003002:	f107 0318 	add.w	r3, r7, #24
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fae9 	bl	80025de <dir_register>
 800300c:	4603      	mov	r3, r0
 800300e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	f043 0308 	orr.w	r3, r3, #8
 8003018:	71fb      	strb	r3, [r7, #7]
 800301a:	e010      	b.n	800303e <f_open+0xc6>
 800301c:	7fbb      	ldrb	r3, [r7, #30]
 800301e:	f003 0311 	and.w	r3, r3, #17
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <f_open+0xb6>
 8003026:	2307      	movs	r3, #7
 8003028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800302c:	e007      	b.n	800303e <f_open+0xc6>
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <f_open+0xc6>
 8003038:	2308      	movs	r3, #8
 800303a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800303e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003042:	2b00      	cmp	r3, #0
 8003044:	d163      	bne.n	800310e <f_open+0x196>
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d05e      	beq.n	800310e <f_open+0x196>
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fa2d 	bl	80024b6 <ld_clust>
 800305c:	6538      	str	r0, [r7, #80]	; 0x50
 800305e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003060:	f103 040e 	add.w	r4, r3, #14
 8003064:	f7fe fb7c 	bl	8001760 <get_fattime>
 8003068:	4603      	mov	r3, r0
 800306a:	4619      	mov	r1, r3
 800306c:	4620      	mov	r0, r4
 800306e:	f7fe fbd7 	bl	8001820 <st_dword>
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	330b      	adds	r3, #11
 8003076:	2220      	movs	r2, #32
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800307e:	2200      	movs	r2, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fa37 	bl	80024f4 <st_clust>
 8003086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003088:	331c      	adds	r3, #28
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe fbc7 	bl	8001820 <st_dword>
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2201      	movs	r2, #1
 8003096:	70da      	strb	r2, [r3, #3]
 8003098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309a:	2b00      	cmp	r3, #0
 800309c:	d037      	beq.n	800310e <f_open+0x196>
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a4:	f107 0318 	add.w	r3, r7, #24
 80030a8:	2200      	movs	r2, #0
 80030aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe ff2c 	bl	8001f0a <remove_chain>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80030b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d126      	bne.n	800310e <f_open+0x196>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fe fcda 	bl	8001a7e <move_window>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030d4:	3a01      	subs	r2, #1
 80030d6:	60da      	str	r2, [r3, #12]
 80030d8:	e019      	b.n	800310e <f_open+0x196>
 80030da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d115      	bne.n	800310e <f_open+0x196>
 80030e2:	7fbb      	ldrb	r3, [r7, #30]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <f_open+0x17c>
 80030ec:	2304      	movs	r3, #4
 80030ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80030f2:	e00c      	b.n	800310e <f_open+0x196>
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d007      	beq.n	800310e <f_open+0x196>
 80030fe:	7fbb      	ldrb	r3, [r7, #30]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <f_open+0x196>
 8003108:	2307      	movs	r3, #7
 800310a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800310e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10f      	bne.n	8003136 <f_open+0x1be>
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <f_open+0x1b0>
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003126:	71fb      	strb	r3, [r7, #7]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	621a      	str	r2, [r3, #32]
 8003130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	625a      	str	r2, [r3, #36]	; 0x24
 8003136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800313a:	2b00      	cmp	r3, #0
 800313c:	f040 8092 	bne.w	8003264 <f_open+0x2ec>
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff f9b5 	bl	80024b6 <ld_clust>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003154:	331c      	adds	r3, #28
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe fb24 	bl	80017a4 <ld_dword>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	88da      	ldrh	r2, [r3, #6]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	809a      	strh	r2, [r3, #4]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	79fa      	ldrb	r2, [r7, #7]
 8003174:	741a      	strb	r2, [r3, #16]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	745a      	strb	r2, [r3, #17]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	615a      	str	r2, [r3, #20]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3328      	adds	r3, #40	; 0x28
 800318c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe fb91 	bl	80018ba <mem_set>
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d060      	beq.n	8003264 <f_open+0x2ec>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d05c      	beq.n	8003264 <f_open+0x2ec>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	615a      	str	r2, [r3, #20]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	895b      	ldrh	r3, [r3, #10]
 80031b6:	025b      	lsls	r3, r3, #9
 80031b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	65bb      	str	r3, [r7, #88]	; 0x58
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	657b      	str	r3, [r7, #84]	; 0x54
 80031c6:	e016      	b.n	80031f6 <f_open+0x27e>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fe fd10 	bl	8001bf2 <get_fat>
 80031d2:	65b8      	str	r0, [r7, #88]	; 0x58
 80031d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d802      	bhi.n	80031e0 <f_open+0x268>
 80031da:	2302      	movs	r3, #2
 80031dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80031e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d102      	bne.n	80031ee <f_open+0x276>
 80031e8:	2301      	movs	r3, #1
 80031ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80031ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	657b      	str	r3, [r7, #84]	; 0x54
 80031f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d103      	bne.n	8003206 <f_open+0x28e>
 80031fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003202:	429a      	cmp	r2, r3
 8003204:	d8e0      	bhi.n	80031c8 <f_open+0x250>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800320a:	619a      	str	r2, [r3, #24]
 800320c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003210:	2b00      	cmp	r3, #0
 8003212:	d127      	bne.n	8003264 <f_open+0x2ec>
 8003214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321a:	2b00      	cmp	r3, #0
 800321c:	d022      	beq.n	8003264 <f_open+0x2ec>
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe fcc6 	bl	8001bb4 <clst2sect>
 8003228:	6478      	str	r0, [r7, #68]	; 0x44
 800322a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800322c:	2b00      	cmp	r3, #0
 800322e:	d103      	bne.n	8003238 <f_open+0x2c0>
 8003230:	2302      	movs	r3, #2
 8003232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003236:	e015      	b.n	8003264 <f_open+0x2ec>
 8003238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800323a:	0a5a      	lsrs	r2, r3, #9
 800323c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323e:	441a      	add	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	61da      	str	r2, [r3, #28]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	7858      	ldrb	r0, [r3, #1]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	2301      	movs	r3, #1
 8003254:	f7fd ffd8 	bl	8001208 <disk_read>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <f_open+0x2ec>
 800325e:	2301      	movs	r3, #1
 8003260:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003264:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <f_open+0x2fa>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003276:	4618      	mov	r0, r3
 8003278:	3764      	adds	r7, #100	; 0x64
 800327a:	46bd      	mov	sp, r7
 800327c:	bd90      	pop	{r4, r7, pc}

0800327e <f_read>:
 800327e:	b580      	push	{r7, lr}
 8003280:	b08e      	sub	sp, #56	; 0x38
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f107 0214 	add.w	r2, r7, #20
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fdf4 	bl	8002e8c <validate>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80032aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d107      	bne.n	80032c2 <f_read+0x44>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	7c5b      	ldrb	r3, [r3, #17]
 80032b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80032ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <f_read+0x4a>
 80032c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80032c6:	e109      	b.n	80034dc <f_read+0x25e>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	7c1b      	ldrb	r3, [r3, #16]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <f_read+0x5a>
 80032d4:	2307      	movs	r3, #7
 80032d6:	e101      	b.n	80034dc <f_read+0x25e>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	623b      	str	r3, [r7, #32]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	f240 80f2 	bls.w	80034d2 <f_read+0x254>
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	e0ee      	b.n	80034d2 <f_read+0x254>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f040 80ba 	bne.w	8003476 <f_read+0x1f8>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	0a5b      	lsrs	r3, r3, #9
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	8952      	ldrh	r2, [r2, #10]
 800330c:	3a01      	subs	r2, #1
 800330e:	4013      	ands	r3, r2
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d123      	bne.n	8003360 <f_read+0xe2>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d103      	bne.n	8003328 <f_read+0xaa>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	633b      	str	r3, [r7, #48]	; 0x30
 8003326:	e007      	b.n	8003338 <f_read+0xba>
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	4619      	mov	r1, r3
 8003330:	4610      	mov	r0, r2
 8003332:	f7fe fc5e 	bl	8001bf2 <get_fat>
 8003336:	6338      	str	r0, [r7, #48]	; 0x30
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	2b01      	cmp	r3, #1
 800333c:	d804      	bhi.n	8003348 <f_read+0xca>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2202      	movs	r2, #2
 8003342:	745a      	strb	r2, [r3, #17]
 8003344:	2302      	movs	r3, #2
 8003346:	e0c9      	b.n	80034dc <f_read+0x25e>
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d104      	bne.n	800335a <f_read+0xdc>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	745a      	strb	r2, [r3, #17]
 8003356:	2301      	movs	r3, #1
 8003358:	e0c0      	b.n	80034dc <f_read+0x25e>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800335e:	619a      	str	r2, [r3, #24]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f7fe fc23 	bl	8001bb4 <clst2sect>
 800336e:	61b8      	str	r0, [r7, #24]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d104      	bne.n	8003380 <f_read+0x102>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2202      	movs	r2, #2
 800337a:	745a      	strb	r2, [r3, #17]
 800337c:	2302      	movs	r3, #2
 800337e:	e0ad      	b.n	80034dc <f_read+0x25e>
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	0a5b      	lsrs	r3, r3, #9
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	d039      	beq.n	8003408 <f_read+0x18a>
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	4413      	add	r3, r2
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	8952      	ldrh	r2, [r2, #10]
 800339e:	4293      	cmp	r3, r2
 80033a0:	d905      	bls.n	80033ae <f_read+0x130>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	895b      	ldrh	r3, [r3, #10]
 80033a6:	461a      	mov	r2, r3
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	7858      	ldrb	r0, [r3, #1]
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b8:	f7fd ff26 	bl	8001208 <disk_read>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <f_read+0x14e>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	745a      	strb	r2, [r3, #17]
 80033c8:	2301      	movs	r3, #1
 80033ca:	e087      	b.n	80034dc <f_read+0x25e>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	7c1b      	ldrb	r3, [r3, #16]
 80033d0:	b25b      	sxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	da14      	bge.n	8003400 <f_read+0x182>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d90d      	bls.n	8003400 <f_read+0x182>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	025b      	lsls	r3, r3, #9
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	18d0      	adds	r0, r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3328      	adds	r3, #40	; 0x28
 80033f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033fa:	4619      	mov	r1, r3
 80033fc:	f7fe fa3c 	bl	8001878 <mem_cpy>
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	025b      	lsls	r3, r3, #9
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003406:	e050      	b.n	80034aa <f_read+0x22c>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	429a      	cmp	r2, r3
 8003410:	d02e      	beq.n	8003470 <f_read+0x1f2>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	7c1b      	ldrb	r3, [r3, #16]
 8003416:	b25b      	sxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	da18      	bge.n	800344e <f_read+0x1d0>
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	7858      	ldrb	r0, [r3, #1]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	2301      	movs	r3, #1
 800342c:	f7fd ff56 	bl	80012dc <disk_write>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d004      	beq.n	8003440 <f_read+0x1c2>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	745a      	strb	r2, [r3, #17]
 800343c:	2301      	movs	r3, #1
 800343e:	e04d      	b.n	80034dc <f_read+0x25e>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	7c1b      	ldrb	r3, [r3, #16]
 8003444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	741a      	strb	r2, [r3, #16]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	7858      	ldrb	r0, [r3, #1]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003458:	2301      	movs	r3, #1
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	f7fd fed4 	bl	8001208 <disk_read>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d004      	beq.n	8003470 <f_read+0x1f2>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	745a      	strb	r2, [r3, #17]
 800346c:	2301      	movs	r3, #1
 800346e:	e035      	b.n	80034dc <f_read+0x25e>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	61da      	str	r2, [r3, #28]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	429a      	cmp	r2, r3
 800348a:	d901      	bls.n	8003490 <f_read+0x212>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349e:	4413      	add	r3, r2
 80034a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a2:	4619      	mov	r1, r3
 80034a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034a6:	f7fe f9e7 	bl	8001878 <mem_cpy>
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	441a      	add	r2, r3
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	4413      	add	r3, r2
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	441a      	add	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	615a      	str	r2, [r3, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f47f af0d 	bne.w	80032f4 <f_read+0x76>
 80034da:	2300      	movs	r3, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	3738      	adds	r7, #56	; 0x38
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <f_sync>:
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f107 0208 	add.w	r2, r7, #8
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fcc9 	bl	8002e8c <validate>
 80034fa:	4603      	mov	r3, r0
 80034fc:	75fb      	strb	r3, [r7, #23]
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d168      	bne.n	80035d6 <f_sync+0xf2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7c1b      	ldrb	r3, [r3, #16]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d062      	beq.n	80035d6 <f_sync+0xf2>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7c1b      	ldrb	r3, [r3, #16]
 8003514:	b25b      	sxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	da15      	bge.n	8003546 <f_sync+0x62>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	7858      	ldrb	r0, [r3, #1]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	2301      	movs	r3, #1
 800352a:	f7fd fed7 	bl	80012dc <disk_write>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <f_sync+0x54>
 8003534:	2301      	movs	r3, #1
 8003536:	e04f      	b.n	80035d8 <f_sync+0xf4>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	7c1b      	ldrb	r3, [r3, #16]
 800353c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003540:	b2da      	uxtb	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	741a      	strb	r2, [r3, #16]
 8003546:	f7fe f90b 	bl	8001760 <get_fattime>
 800354a:	6138      	str	r0, [r7, #16]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4619      	mov	r1, r3
 8003554:	4610      	mov	r0, r2
 8003556:	f7fe fa92 	bl	8001a7e <move_window>
 800355a:	4603      	mov	r3, r0
 800355c:	75fb      	strb	r3, [r7, #23]
 800355e:	7dfb      	ldrb	r3, [r7, #23]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d138      	bne.n	80035d6 <f_sync+0xf2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	330b      	adds	r3, #11
 800356e:	781a      	ldrb	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	330b      	adds	r3, #11
 8003574:	f042 0220 	orr.w	r2, r2, #32
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	461a      	mov	r2, r3
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	f7fe ffb4 	bl	80024f4 <st_clust>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f103 021c 	add.w	r2, r3, #28
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f7fe f941 	bl	8001820 <st_dword>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3316      	adds	r3, #22
 80035a2:	6939      	ldr	r1, [r7, #16]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe f93b 	bl	8001820 <st_dword>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3312      	adds	r3, #18
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe f91a 	bl	80017ea <st_word>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2201      	movs	r2, #1
 80035ba:	70da      	strb	r2, [r3, #3]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe fa8a 	bl	8001ad8 <sync_fs>
 80035c4:	4603      	mov	r3, r0
 80035c6:	75fb      	strb	r3, [r7, #23]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7c1b      	ldrb	r3, [r3, #16]
 80035cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	741a      	strb	r2, [r3, #16]
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <f_close>:
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ff7b 	bl	80034e4 <f_sync>
 80035ee:	4603      	mov	r3, r0
 80035f0:	73fb      	strb	r3, [r7, #15]
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10e      	bne.n	8003616 <f_close+0x36>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f107 0208 	add.w	r2, r7, #8
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fc43 	bl	8002e8c <validate>
 8003606:	4603      	mov	r3, r0
 8003608:	73fb      	strb	r3, [r7, #15]
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <f_close+0x36>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_ADC_ConvCpltCallback>:
static void MX_USART3_UART_Init(void);
static void MX_TIM6_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]


		  		  value = HAL_ADC_GetValue(&hadc1);
 8003628:	4851      	ldr	r0, [pc, #324]	; (8003770 <HAL_ADC_ConvCpltCallback+0x150>)
 800362a:	f001 f9e0 	bl	80049ee <HAL_ADC_GetValue>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	4b50      	ldr	r3, [pc, #320]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 8003634:	601a      	str	r2, [r3, #0]

//za pierwszym ustawieniem potencjometru działa ale potem się nie zmienia
		  	  if(value>0 && value <= 410) indeks_glosnosci = 0;
 8003636:	4b4f      	ldr	r3, [pc, #316]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	dd08      	ble.n	8003650 <HAL_ADC_ConvCpltCallback+0x30>
 800363e:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8003646:	dc03      	bgt.n	8003650 <HAL_ADC_ConvCpltCallback+0x30>
 8003648:	4b4b      	ldr	r3, [pc, #300]	; (8003778 <HAL_ADC_ConvCpltCallback+0x158>)
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e088      	b.n	8003762 <HAL_ADC_ConvCpltCallback+0x142>
		  	  else if(value>410 && value <= 819) indeks_glosnosci = 1;
 8003650:	4b48      	ldr	r3, [pc, #288]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8003658:	dd08      	ble.n	800366c <HAL_ADC_ConvCpltCallback+0x4c>
 800365a:	4b46      	ldr	r3, [pc, #280]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003662:	da03      	bge.n	800366c <HAL_ADC_ConvCpltCallback+0x4c>
 8003664:	4b44      	ldr	r3, [pc, #272]	; (8003778 <HAL_ADC_ConvCpltCallback+0x158>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e07a      	b.n	8003762 <HAL_ADC_ConvCpltCallback+0x142>
		  	  else if(value>819 && value <= 1228) indeks_glosnosci = 2;
 800366c:	4b41      	ldr	r3, [pc, #260]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003674:	db09      	blt.n	800368a <HAL_ADC_ConvCpltCallback+0x6a>
 8003676:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800367e:	4293      	cmp	r3, r2
 8003680:	dc03      	bgt.n	800368a <HAL_ADC_ConvCpltCallback+0x6a>
 8003682:	4b3d      	ldr	r3, [pc, #244]	; (8003778 <HAL_ADC_ConvCpltCallback+0x158>)
 8003684:	2202      	movs	r2, #2
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e06b      	b.n	8003762 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>1228 && value <= 1647) indeks_glosnosci = 3;
 800368a:	4b3a      	ldr	r3, [pc, #232]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8003692:	4293      	cmp	r3, r2
 8003694:	dd08      	ble.n	80036a8 <HAL_ADC_ConvCpltCallback+0x88>
 8003696:	4b37      	ldr	r3, [pc, #220]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 800369e:	da03      	bge.n	80036a8 <HAL_ADC_ConvCpltCallback+0x88>
 80036a0:	4b35      	ldr	r3, [pc, #212]	; (8003778 <HAL_ADC_ConvCpltCallback+0x158>)
 80036a2:	2203      	movs	r2, #3
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e05c      	b.n	8003762 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>1647 && value <= 2058) indeks_glosnosci = 4;
 80036a8:	4b32      	ldr	r3, [pc, #200]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80036b0:	db09      	blt.n	80036c6 <HAL_ADC_ConvCpltCallback+0xa6>
 80036b2:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f640 020a 	movw	r2, #2058	; 0x80a
 80036ba:	4293      	cmp	r3, r2
 80036bc:	dc03      	bgt.n	80036c6 <HAL_ADC_ConvCpltCallback+0xa6>
 80036be:	4b2e      	ldr	r3, [pc, #184]	; (8003778 <HAL_ADC_ConvCpltCallback+0x158>)
 80036c0:	2204      	movs	r2, #4
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	e04d      	b.n	8003762 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2058 && value <= 2467) indeks_glosnosci = 5;
 80036c6:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f640 020a 	movw	r2, #2058	; 0x80a
 80036ce:	4293      	cmp	r3, r2
 80036d0:	dd09      	ble.n	80036e6 <HAL_ADC_ConvCpltCallback+0xc6>
 80036d2:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f640 12a3 	movw	r2, #2467	; 0x9a3
 80036da:	4293      	cmp	r3, r2
 80036dc:	dc03      	bgt.n	80036e6 <HAL_ADC_ConvCpltCallback+0xc6>
 80036de:	4b26      	ldr	r3, [pc, #152]	; (8003778 <HAL_ADC_ConvCpltCallback+0x158>)
 80036e0:	2205      	movs	r2, #5
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e03d      	b.n	8003762 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2467 && value <= 2876) indeks_glosnosci = 6;
 80036e6:	4b23      	ldr	r3, [pc, #140]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f640 12a3 	movw	r2, #2467	; 0x9a3
 80036ee:	4293      	cmp	r3, r2
 80036f0:	dd09      	ble.n	8003706 <HAL_ADC_ConvCpltCallback+0xe6>
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f640 323c 	movw	r2, #2876	; 0xb3c
 80036fa:	4293      	cmp	r3, r2
 80036fc:	dc03      	bgt.n	8003706 <HAL_ADC_ConvCpltCallback+0xe6>
 80036fe:	4b1e      	ldr	r3, [pc, #120]	; (8003778 <HAL_ADC_ConvCpltCallback+0x158>)
 8003700:	2206      	movs	r2, #6
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e02d      	b.n	8003762 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2876 && value <= 3285) indeks_glosnosci = 7;
 8003706:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f640 323c 	movw	r2, #2876	; 0xb3c
 800370e:	4293      	cmp	r3, r2
 8003710:	dd09      	ble.n	8003726 <HAL_ADC_ConvCpltCallback+0x106>
 8003712:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f640 42d5 	movw	r2, #3285	; 0xcd5
 800371a:	4293      	cmp	r3, r2
 800371c:	dc03      	bgt.n	8003726 <HAL_ADC_ConvCpltCallback+0x106>
 800371e:	4b16      	ldr	r3, [pc, #88]	; (8003778 <HAL_ADC_ConvCpltCallback+0x158>)
 8003720:	2207      	movs	r2, #7
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e01d      	b.n	8003762 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>3285 && value <= 3692) indeks_glosnosci = 8;
 8003726:	4b13      	ldr	r3, [pc, #76]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f640 42d5 	movw	r2, #3285	; 0xcd5
 800372e:	4293      	cmp	r3, r2
 8003730:	dd09      	ble.n	8003746 <HAL_ADC_ConvCpltCallback+0x126>
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f640 626c 	movw	r2, #3692	; 0xe6c
 800373a:	4293      	cmp	r3, r2
 800373c:	dc03      	bgt.n	8003746 <HAL_ADC_ConvCpltCallback+0x126>
 800373e:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <HAL_ADC_ConvCpltCallback+0x158>)
 8003740:	2208      	movs	r2, #8
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e00d      	b.n	8003762 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>3692 && value <= 4095) indeks_glosnosci = 9;
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f640 626c 	movw	r2, #3692	; 0xe6c
 800374e:	4293      	cmp	r3, r2
 8003750:	dd07      	ble.n	8003762 <HAL_ADC_ConvCpltCallback+0x142>
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_ADC_ConvCpltCallback+0x154>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375a:	da02      	bge.n	8003762 <HAL_ADC_ConvCpltCallback+0x142>
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_ADC_ConvCpltCallback+0x158>)
 800375e:	2209      	movs	r2, #9
 8003760:	601a      	str	r2, [r3, #0]
		  	HAL_ADC_Start_IT(&hadc1);
 8003762:	4803      	ldr	r0, [pc, #12]	; (8003770 <HAL_ADC_ConvCpltCallback+0x150>)
 8003764:	f000 ff32 	bl	80045cc <HAL_ADC_Start_IT>
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	200005cc 	.word	0x200005cc
 8003774:	200002c4 	.word	0x200002c4
 8003778:	20000004 	.word	0x20000004

0800377c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	80fb      	strh	r3, [r7, #6]

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET){
 8003786:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800378a:	4831      	ldr	r0, [pc, #196]	; (8003850 <HAL_GPIO_EXTI_Callback+0xd4>)
 800378c:	f001 ff40 	bl	8005610 <HAL_GPIO_ReadPin>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10c      	bne.n	80037b0 <HAL_GPIO_EXTI_Callback+0x34>

		 //ciszej

		 if(indeks_glosnosci>0 && indeks_glosnosci<=9) indeks_glosnosci--;
 8003796:	4b2f      	ldr	r3, [pc, #188]	; (8003854 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	dd08      	ble.n	80037b0 <HAL_GPIO_EXTI_Callback+0x34>
 800379e:	4b2d      	ldr	r3, [pc, #180]	; (8003854 <HAL_GPIO_EXTI_Callback+0xd8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b09      	cmp	r3, #9
 80037a4:	dc04      	bgt.n	80037b0 <HAL_GPIO_EXTI_Callback+0x34>
 80037a6:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <HAL_GPIO_EXTI_Callback+0xd8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	4a29      	ldr	r2, [pc, #164]	; (8003854 <HAL_GPIO_EXTI_Callback+0xd8>)
 80037ae:	6013      	str	r3, [r2, #0]

		  	}

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 80037b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037b4:	4826      	ldr	r0, [pc, #152]	; (8003850 <HAL_GPIO_EXTI_Callback+0xd4>)
 80037b6:	f001 ff2b 	bl	8005610 <HAL_GPIO_ReadPin>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d104      	bne.n	80037ca <HAL_GPIO_EXTI_Callback+0x4e>
			  		//prev song
			  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80037c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037c4:	4824      	ldr	r0, [pc, #144]	; (8003858 <HAL_GPIO_EXTI_Callback+0xdc>)
 80037c6:	f001 ff54 	bl	8005672 <HAL_GPIO_TogglePin>

			}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 80037ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037ce:	4820      	ldr	r0, [pc, #128]	; (8003850 <HAL_GPIO_EXTI_Callback+0xd4>)
 80037d0:	f001 ff1e 	bl	8005610 <HAL_GPIO_ReadPin>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d110      	bne.n	80037fc <HAL_GPIO_EXTI_Callback+0x80>

		 //pause/start
		 //na razie tylko startuje
		 if(stan==1){
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_GPIO_EXTI_Callback+0xe0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d106      	bne.n	80037f0 <HAL_GPIO_EXTI_Callback+0x74>
		 HAL_TIM_Base_Start_IT(&htim4);
 80037e2:	481f      	ldr	r0, [pc, #124]	; (8003860 <HAL_GPIO_EXTI_Callback+0xe4>)
 80037e4:	f002 ffe1 	bl	80067aa <HAL_TIM_Base_Start_IT>
		 stan = 0;
 80037e8:	4b1c      	ldr	r3, [pc, #112]	; (800385c <HAL_GPIO_EXTI_Callback+0xe0>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e005      	b.n	80037fc <HAL_GPIO_EXTI_Callback+0x80>
		 }
		 else
		 {
			 HAL_TIM_Base_Stop_IT(&htim4);
 80037f0:	481b      	ldr	r0, [pc, #108]	; (8003860 <HAL_GPIO_EXTI_Callback+0xe4>)
 80037f2:	f002 fffe 	bl	80067f2 <HAL_TIM_Base_Stop_IT>
			 stan=1;
 80037f6:	4b19      	ldr	r3, [pc, #100]	; (800385c <HAL_GPIO_EXTI_Callback+0xe0>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
		 }

	 		}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET){
 80037fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003800:	4813      	ldr	r0, [pc, #76]	; (8003850 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003802:	f001 ff05 	bl	8005610 <HAL_GPIO_ReadPin>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d104      	bne.n	8003816 <HAL_GPIO_EXTI_Callback+0x9a>
		 //volume up
		 		 	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800380c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003810:	4811      	ldr	r0, [pc, #68]	; (8003858 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003812:	f001 ff2e 	bl	8005672 <HAL_GPIO_TogglePin>

		 	}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 8003816:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800381a:	480d      	ldr	r0, [pc, #52]	; (8003850 <HAL_GPIO_EXTI_Callback+0xd4>)
 800381c:	f001 fef8 	bl	8005610 <HAL_GPIO_ReadPin>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10c      	bne.n	8003840 <HAL_GPIO_EXTI_Callback+0xc4>

		 //glosniej

		 if(indeks_glosnosci>=0 && indeks_glosnosci<9)
 8003826:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	db08      	blt.n	8003840 <HAL_GPIO_EXTI_Callback+0xc4>
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b08      	cmp	r3, #8
 8003834:	dc04      	bgt.n	8003840 <HAL_GPIO_EXTI_Callback+0xc4>
			 indeks_glosnosci++;
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3301      	adds	r3, #1
 800383c:	4a05      	ldr	r2, [pc, #20]	; (8003854 <HAL_GPIO_EXTI_Callback+0xd8>)
 800383e:	6013      	str	r3, [r2, #0]
			 	}
	 HAL_Delay(200);
 8003840:	20c8      	movs	r0, #200	; 0xc8
 8003842:	f000 fe5d 	bl	8004500 <HAL_Delay>

}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40020400 	.word	0x40020400
 8003854:	20000004 	.word	0x20000004
 8003858:	40020c00 	.word	0x40020c00
 800385c:	20000058 	.word	0x20000058
 8003860:	200002cc 	.word	0x200002cc

08003864 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
if(htim->Instance == TIM4)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d122      	bne.n	80038bc <HAL_TIM_PeriodElapsedCallback+0x58>
{
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,rawAudio[i]*glosnosc_guziczki[indeks_glosnosci]);
 8003876:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a14      	ldr	r2, [pc, #80]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x68>)
 800387c:	5cd3      	ldrb	r3, [r2, r3]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fc fdf4 	bl	800046c <__aeabi_i2d>
 8003884:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a12      	ldr	r2, [pc, #72]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003892:	461a      	mov	r2, r3
 8003894:	4623      	mov	r3, r4
 8003896:	f7fc fe53 	bl	8000540 <__aeabi_dmul>
 800389a:	4603      	mov	r3, r0
 800389c:	460c      	mov	r4, r1
 800389e:	4618      	mov	r0, r3
 80038a0:	4621      	mov	r1, r4
 80038a2:	f7fd f85f 	bl	8000964 <__aeabi_d2uiz>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2200      	movs	r2, #0
 80038aa:	2100      	movs	r1, #0
 80038ac:	480a      	ldr	r0, [pc, #40]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80038ae:	f001 fccd 	bl	800524c <HAL_DAC_SetValue>
	i++;
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3301      	adds	r3, #1
 80038b8:	4a03      	ldr	r2, [pc, #12]	; (80038c8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80038ba:	6013      	str	r3, [r2, #0]
}
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd90      	pop	{r4, r7, pc}
 80038c4:	40000800 	.word	0x40000800
 80038c8:	200002c0 	.word	0x200002c0
 80038cc:	080078ec 	.word	0x080078ec
 80038d0:	20000004 	.word	0x20000004
 80038d4:	20000008 	.word	0x20000008
 80038d8:	20000618 	.word	0x20000618

080038dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
	{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
			{

			// tutaj umieszczamy kod wykonywany w zależności od odebranej inf

			}
	}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038f4:	f000 fd92 	bl	800441c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038f8:	f000 f84e 	bl	8003998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038fc:	f000 fa48 	bl	8003d90 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003900:	f000 f8b4 	bl	8003a6c <MX_ADC1_Init>
  MX_DAC_Init();
 8003904:	f000 f904 	bl	8003b10 <MX_DAC_Init>
  MX_SPI1_Init();
 8003908:	f000 f92c 	bl	8003b64 <MX_SPI1_Init>
  MX_SPI3_Init();
 800390c:	f000 f960 	bl	8003bd0 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8003910:	f000 fa14 	bl	8003d3c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8003914:	f000 f9de 	bl	8003cd4 <MX_TIM6_Init>
  MX_TIM4_Init();
 8003918:	f000 f990 	bl	8003c3c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  fresult = f_mount(&FatFs, "", 0);
 800391c:	2200      	movs	r2, #0
 800391e:	4915      	ldr	r1, [pc, #84]	; (8003974 <main+0x84>)
 8003920:	4815      	ldr	r0, [pc, #84]	; (8003978 <main+0x88>)
 8003922:	f7ff fae9 	bl	8002ef8 <f_mount>
 8003926:	4603      	mov	r3, r0
 8003928:	461a      	mov	r2, r3
 800392a:	4b14      	ldr	r3, [pc, #80]	; (800397c <main+0x8c>)
 800392c:	701a      	strb	r2, [r3, #0]
  fresult = f_open(&file, "read.txt", FA_READ);
 800392e:	2201      	movs	r2, #1
 8003930:	4913      	ldr	r1, [pc, #76]	; (8003980 <main+0x90>)
 8003932:	4814      	ldr	r0, [pc, #80]	; (8003984 <main+0x94>)
 8003934:	f7ff fb20 	bl	8002f78 <f_open>
 8003938:	4603      	mov	r3, r0
 800393a:	461a      	mov	r2, r3
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <main+0x8c>)
 800393e:	701a      	strb	r2, [r3, #0]
  fresult = f_read(&file, buffer, 16, &bytes_read);
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <main+0x98>)
 8003942:	2210      	movs	r2, #16
 8003944:	4911      	ldr	r1, [pc, #68]	; (800398c <main+0x9c>)
 8003946:	480f      	ldr	r0, [pc, #60]	; (8003984 <main+0x94>)
 8003948:	f7ff fc99 	bl	800327e <f_read>
 800394c:	4603      	mov	r3, r0
 800394e:	461a      	mov	r2, r3
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <main+0x8c>)
 8003952:	701a      	strb	r2, [r3, #0]
  fresult = f_close(&file);
 8003954:	480b      	ldr	r0, [pc, #44]	; (8003984 <main+0x94>)
 8003956:	f7ff fe43 	bl	80035e0 <f_close>
 800395a:	4603      	mov	r3, r0
 800395c:	461a      	mov	r2, r3
 800395e:	4b07      	ldr	r3, [pc, #28]	; (800397c <main+0x8c>)
 8003960:	701a      	strb	r2, [r3, #0]
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8003962:	2100      	movs	r1, #0
 8003964:	480a      	ldr	r0, [pc, #40]	; (8003990 <main+0xa0>)
 8003966:	f001 fbbe 	bl	80050e6 <HAL_DAC_Start>
  HAL_ADC_Start_IT(&hadc1);
 800396a:	480a      	ldr	r0, [pc, #40]	; (8003994 <main+0xa4>)
 800396c:	f000 fe2e 	bl	80045cc <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003970:	e7fe      	b.n	8003970 <main+0x80>
 8003972:	bf00      	nop
 8003974:	080078dc 	.word	0x080078dc
 8003978:	20000090 	.word	0x20000090
 800397c:	2000076d 	.word	0x2000076d
 8003980:	080078e0 	.word	0x080078e0
 8003984:	200003a4 	.word	0x200003a4
 8003988:	20000614 	.word	0x20000614
 800398c:	2000062c 	.word	0x2000062c
 8003990:	20000618 	.word	0x20000618
 8003994:	200005cc 	.word	0x200005cc

08003998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b094      	sub	sp, #80	; 0x50
 800399c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800399e:	f107 0320 	add.w	r3, r7, #32
 80039a2:	2230      	movs	r2, #48	; 0x30
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 ff76 	bl	8007898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	60da      	str	r2, [r3, #12]
 80039ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039bc:	2300      	movs	r3, #0
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	4b28      	ldr	r3, [pc, #160]	; (8003a64 <SystemClock_Config+0xcc>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	4a27      	ldr	r2, [pc, #156]	; (8003a64 <SystemClock_Config+0xcc>)
 80039c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ca:	6413      	str	r3, [r2, #64]	; 0x40
 80039cc:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <SystemClock_Config+0xcc>)
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039d8:	2300      	movs	r3, #0
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	4b22      	ldr	r3, [pc, #136]	; (8003a68 <SystemClock_Config+0xd0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a21      	ldr	r2, [pc, #132]	; (8003a68 <SystemClock_Config+0xd0>)
 80039e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <SystemClock_Config+0xd0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f0:	607b      	str	r3, [r7, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039fe:	2302      	movs	r3, #2
 8003a00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003a08:	2304      	movs	r3, #4
 8003a0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003a0c:	23a8      	movs	r3, #168	; 0xa8
 8003a0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a10:	2302      	movs	r3, #2
 8003a12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a14:	2304      	movs	r3, #4
 8003a16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a18:	f107 0320 	add.w	r3, r7, #32
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 fe75 	bl	800570c <HAL_RCC_OscConfig>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a28:	f000 fa52 	bl	8003ed0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a2c:	230f      	movs	r3, #15
 8003a2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a30:	2302      	movs	r3, #2
 8003a32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a44:	f107 030c 	add.w	r3, r7, #12
 8003a48:	2105      	movs	r1, #5
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f002 f8a0 	bl	8005b90 <HAL_RCC_ClockConfig>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003a56:	f000 fa3b 	bl	8003ed0 <Error_Handler>
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	3750      	adds	r7, #80	; 0x50
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40007000 	.word	0x40007000

08003a6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a72:	463b      	mov	r3, r7
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003a7e:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <MX_ADC1_Init+0x98>)
 8003a80:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <MX_ADC1_Init+0x9c>)
 8003a82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a84:	4b1f      	ldr	r3, [pc, #124]	; (8003b04 <MX_ADC1_Init+0x98>)
 8003a86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <MX_ADC1_Init+0x98>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003a92:	4b1c      	ldr	r3, [pc, #112]	; (8003b04 <MX_ADC1_Init+0x98>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003a98:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <MX_ADC1_Init+0x98>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003a9e:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <MX_ADC1_Init+0x98>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003aa6:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <MX_ADC1_Init+0x98>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003aac:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <MX_ADC1_Init+0x98>)
 8003aae:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <MX_ADC1_Init+0xa0>)
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ab2:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <MX_ADC1_Init+0x98>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003ab8:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <MX_ADC1_Init+0x98>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <MX_ADC1_Init+0x98>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <MX_ADC1_Init+0x98>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003acc:	480d      	ldr	r0, [pc, #52]	; (8003b04 <MX_ADC1_Init+0x98>)
 8003ace:	f000 fd39 	bl	8004544 <HAL_ADC_Init>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003ad8:	f000 f9fa 	bl	8003ed0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003adc:	2303      	movs	r3, #3
 8003ade:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ae8:	463b      	mov	r3, r7
 8003aea:	4619      	mov	r1, r3
 8003aec:	4805      	ldr	r0, [pc, #20]	; (8003b04 <MX_ADC1_Init+0x98>)
 8003aee:	f000 ff9f 	bl	8004a30 <HAL_ADC_ConfigChannel>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003af8:	f000 f9ea 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	200005cc 	.word	0x200005cc
 8003b08:	40012000 	.word	0x40012000
 8003b0c:	0f000001 	.word	0x0f000001

08003b10 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003b16:	463b      	mov	r3, r7
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <MX_DAC_Init+0x4c>)
 8003b20:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <MX_DAC_Init+0x50>)
 8003b22:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003b24:	480d      	ldr	r0, [pc, #52]	; (8003b5c <MX_DAC_Init+0x4c>)
 8003b26:	f001 fabc 	bl	80050a2 <HAL_DAC_Init>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003b30:	f000 f9ce 	bl	8003ed0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	2200      	movs	r2, #0
 8003b40:	4619      	mov	r1, r3
 8003b42:	4806      	ldr	r0, [pc, #24]	; (8003b5c <MX_DAC_Init+0x4c>)
 8003b44:	f001 fb35 	bl	80051b2 <HAL_DAC_ConfigChannel>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003b4e:	f000 f9bf 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000618 	.word	0x20000618
 8003b60:	40007400 	.word	0x40007400

08003b64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003b68:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <MX_SPI1_Init+0x64>)
 8003b6a:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <MX_SPI1_Init+0x68>)
 8003b6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b6e:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <MX_SPI1_Init+0x64>)
 8003b70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <MX_SPI1_Init+0x64>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <MX_SPI1_Init+0x64>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <MX_SPI1_Init+0x64>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <MX_SPI1_Init+0x64>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <MX_SPI1_Init+0x64>)
 8003b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003b96:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <MX_SPI1_Init+0x64>)
 8003b98:	2220      	movs	r2, #32
 8003b9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <MX_SPI1_Init+0x64>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <MX_SPI1_Init+0x64>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <MX_SPI1_Init+0x64>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <MX_SPI1_Init+0x64>)
 8003bb0:	220a      	movs	r2, #10
 8003bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bb4:	4804      	ldr	r0, [pc, #16]	; (8003bc8 <MX_SPI1_Init+0x64>)
 8003bb6:	f002 f9d9 	bl	8005f6c <HAL_SPI_Init>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003bc0:	f000 f986 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003bc4:	bf00      	nop
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	20000770 	.word	0x20000770
 8003bcc:	40013000 	.word	0x40013000

08003bd0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003bd4:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <MX_SPI3_Init+0x64>)
 8003bd6:	4a18      	ldr	r2, [pc, #96]	; (8003c38 <MX_SPI3_Init+0x68>)
 8003bd8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003bda:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <MX_SPI3_Init+0x64>)
 8003bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003be0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <MX_SPI3_Init+0x64>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003be8:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <MX_SPI3_Init+0x64>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bee:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <MX_SPI3_Init+0x64>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <MX_SPI3_Init+0x64>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003bfa:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <MX_SPI3_Init+0x64>)
 8003bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c00:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003c02:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <MX_SPI3_Init+0x64>)
 8003c04:	2218      	movs	r2, #24
 8003c06:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <MX_SPI3_Init+0x64>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <MX_SPI3_Init+0x64>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c14:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <MX_SPI3_Init+0x64>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <MX_SPI3_Init+0x64>)
 8003c1c:	220a      	movs	r2, #10
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003c20:	4804      	ldr	r0, [pc, #16]	; (8003c34 <MX_SPI3_Init+0x64>)
 8003c22:	f002 f9a3 	bl	8005f6c <HAL_SPI_Init>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003c2c:	f000 f950 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003c30:	bf00      	nop
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	2000034c 	.word	0x2000034c
 8003c38:	40003c00 	.word	0x40003c00

08003c3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c42:	f107 0308 	add.w	r3, r7, #8
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
 8003c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c50:	463b      	mov	r3, r7
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c58:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <MX_TIM4_Init+0x90>)
 8003c5a:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <MX_TIM4_Init+0x94>)
 8003c5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 249;
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <MX_TIM4_Init+0x90>)
 8003c60:	22f9      	movs	r2, #249	; 0xf9
 8003c62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c64:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <MX_TIM4_Init+0x90>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 8003c6a:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <MX_TIM4_Init+0x90>)
 8003c6c:	2214      	movs	r2, #20
 8003c6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c70:	4b16      	ldr	r3, [pc, #88]	; (8003ccc <MX_TIM4_Init+0x90>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <MX_TIM4_Init+0x90>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003c7c:	4813      	ldr	r0, [pc, #76]	; (8003ccc <MX_TIM4_Init+0x90>)
 8003c7e:	f002 fd69 	bl	8006754 <HAL_TIM_Base_Init>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8003c88:	f000 f922 	bl	8003ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c92:	f107 0308 	add.w	r3, r7, #8
 8003c96:	4619      	mov	r1, r3
 8003c98:	480c      	ldr	r0, [pc, #48]	; (8003ccc <MX_TIM4_Init+0x90>)
 8003c9a:	f002 fedd 	bl	8006a58 <HAL_TIM_ConfigClockSource>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8003ca4:	f000 f914 	bl	8003ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cac:	2300      	movs	r3, #0
 8003cae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cb0:	463b      	mov	r3, r7
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4805      	ldr	r0, [pc, #20]	; (8003ccc <MX_TIM4_Init+0x90>)
 8003cb6:	f003 f8e9 	bl	8006e8c <HAL_TIMEx_MasterConfigSynchronization>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003cc0:	f000 f906 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003cc4:	bf00      	nop
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	200002cc 	.word	0x200002cc
 8003cd0:	40000800 	.word	0x40000800

08003cd4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cda:	463b      	mov	r3, r7
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <MX_TIM6_Init+0x60>)
 8003ce4:	4a14      	ldr	r2, [pc, #80]	; (8003d38 <MX_TIM6_Init+0x64>)
 8003ce6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 249;
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <MX_TIM6_Init+0x60>)
 8003cea:	22f9      	movs	r2, #249	; 0xf9
 8003cec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <MX_TIM6_Init+0x60>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20;
 8003cf4:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <MX_TIM6_Init+0x60>)
 8003cf6:	2214      	movs	r2, #20
 8003cf8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cfa:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <MX_TIM6_Init+0x60>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003d00:	480c      	ldr	r0, [pc, #48]	; (8003d34 <MX_TIM6_Init+0x60>)
 8003d02:	f002 fd27 	bl	8006754 <HAL_TIM_Base_Init>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8003d0c:	f000 f8e0 	bl	8003ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d10:	2300      	movs	r3, #0
 8003d12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d14:	2300      	movs	r3, #0
 8003d16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003d18:	463b      	mov	r3, r7
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4805      	ldr	r0, [pc, #20]	; (8003d34 <MX_TIM6_Init+0x60>)
 8003d1e:	f003 f8b5 	bl	8006e8c <HAL_TIMEx_MasterConfigSynchronization>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8003d28:	f000 f8d2 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	2000072c 	.word	0x2000072c
 8003d38:	40001000 	.word	0x40001000

08003d3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003d40:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <MX_USART3_UART_Init+0x4c>)
 8003d42:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <MX_USART3_UART_Init+0x50>)
 8003d44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <MX_USART3_UART_Init+0x4c>)
 8003d48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <MX_USART3_UART_Init+0x4c>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d54:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <MX_USART3_UART_Init+0x4c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <MX_USART3_UART_Init+0x4c>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d60:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <MX_USART3_UART_Init+0x4c>)
 8003d62:	220c      	movs	r2, #12
 8003d64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <MX_USART3_UART_Init+0x4c>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d6c:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <MX_USART3_UART_Init+0x4c>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d72:	4805      	ldr	r0, [pc, #20]	; (8003d88 <MX_USART3_UART_Init+0x4c>)
 8003d74:	f003 f8e3 	bl	8006f3e <HAL_UART_Init>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003d7e:	f000 f8a7 	bl	8003ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	2000030c 	.word	0x2000030c
 8003d8c:	40004800 	.word	0x40004800

08003d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08a      	sub	sp, #40	; 0x28
 8003d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d96:	f107 0314 	add.w	r3, r7, #20
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
 8003da0:	609a      	str	r2, [r3, #8]
 8003da2:	60da      	str	r2, [r3, #12]
 8003da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	4b43      	ldr	r3, [pc, #268]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	4a42      	ldr	r2, [pc, #264]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db4:	6313      	str	r3, [r2, #48]	; 0x30
 8003db6:	4b40      	ldr	r3, [pc, #256]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	4b3c      	ldr	r3, [pc, #240]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	4a3b      	ldr	r2, [pc, #236]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd2:	4b39      	ldr	r3, [pc, #228]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	4b35      	ldr	r3, [pc, #212]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	4a34      	ldr	r2, [pc, #208]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003de8:	f043 0302 	orr.w	r3, r3, #2
 8003dec:	6313      	str	r3, [r2, #48]	; 0x30
 8003dee:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	607b      	str	r3, [r7, #4]
 8003dfe:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	4a2d      	ldr	r2, [pc, #180]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003e04:	f043 0308 	orr.w	r3, r3, #8
 8003e08:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0a:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	607b      	str	r3, [r7, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	4a26      	ldr	r2, [pc, #152]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	6313      	str	r3, [r2, #48]	; 0x30
 8003e26:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <MX_GPIO_Init+0x128>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003e32:	2200      	movs	r2, #0
 8003e34:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003e38:	4820      	ldr	r0, [pc, #128]	; (8003ebc <MX_GPIO_Init+0x12c>)
 8003e3a:	f001 fc01 	bl	8005640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e42:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <MX_GPIO_Init+0x130>)
 8003e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e46:	2302      	movs	r3, #2
 8003e48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e4a:	f107 0314 	add.w	r3, r7, #20
 8003e4e:	4619      	mov	r1, r3
 8003e50:	481c      	ldr	r0, [pc, #112]	; (8003ec4 <MX_GPIO_Init+0x134>)
 8003e52:	f001 fa43 	bl	80052dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8003e56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e5a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003e5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <MX_GPIO_Init+0x138>)
 8003e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e60:	2301      	movs	r3, #1
 8003e62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4818      	ldr	r0, [pc, #96]	; (8003ecc <MX_GPIO_Init+0x13c>)
 8003e6c:	f001 fa36 	bl	80052dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e70:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e76:	2301      	movs	r3, #1
 8003e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e82:	f107 0314 	add.w	r3, r7, #20
 8003e86:	4619      	mov	r1, r3
 8003e88:	480c      	ldr	r0, [pc, #48]	; (8003ebc <MX_GPIO_Init+0x12c>)
 8003e8a:	f001 fa27 	bl	80052dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2101      	movs	r1, #1
 8003e92:	2006      	movs	r0, #6
 8003e94:	f001 f8cf 	bl	8005036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003e98:	2006      	movs	r0, #6
 8003e9a:	f001 f8e8 	bl	800506e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	2028      	movs	r0, #40	; 0x28
 8003ea4:	f001 f8c7 	bl	8005036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ea8:	2028      	movs	r0, #40	; 0x28
 8003eaa:	f001 f8e0 	bl	800506e <HAL_NVIC_EnableIRQ>

}
 8003eae:	bf00      	nop
 8003eb0:	3728      	adds	r7, #40	; 0x28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40020c00 	.word	0x40020c00
 8003ec0:	10110000 	.word	0x10110000
 8003ec4:	40020000 	.word	0x40020000
 8003ec8:	10310000 	.word	0x10310000
 8003ecc:	40020400 	.word	0x40020400

08003ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <HAL_MspInit+0x58>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <HAL_MspInit+0x58>)
 8003ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef6:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <HAL_MspInit+0x58>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <HAL_MspInit+0x58>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	4a0b      	ldr	r2, [pc, #44]	; (8003f38 <HAL_MspInit+0x58>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6413      	str	r3, [r2, #64]	; 0x40
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_MspInit+0x58>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2100      	movs	r1, #0
 8003f22:	2001      	movs	r0, #1
 8003f24:	f001 f887 	bl	8005036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f001 f8a0 	bl	800506e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800

08003f3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	; 0x28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f44:	f107 0314 	add.w	r3, r7, #20
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	60da      	str	r2, [r3, #12]
 8003f52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1b      	ldr	r2, [pc, #108]	; (8003fc8 <HAL_ADC_MspInit+0x8c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d12f      	bne.n	8003fbe <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <HAL_ADC_MspInit+0x90>)
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <HAL_ADC_MspInit+0x90>)
 8003f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f6e:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <HAL_ADC_MspInit+0x90>)
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <HAL_ADC_MspInit+0x90>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4a12      	ldr	r2, [pc, #72]	; (8003fcc <HAL_ADC_MspInit+0x90>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <HAL_ADC_MspInit+0x90>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f96:	2308      	movs	r3, #8
 8003f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa2:	f107 0314 	add.w	r3, r7, #20
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4809      	ldr	r0, [pc, #36]	; (8003fd0 <HAL_ADC_MspInit+0x94>)
 8003faa:	f001 f997 	bl	80052dc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	2012      	movs	r0, #18
 8003fb4:	f001 f83f 	bl	8005036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003fb8:	2012      	movs	r0, #18
 8003fba:	f001 f858 	bl	800506e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fbe:	bf00      	nop
 8003fc0:	3728      	adds	r7, #40	; 0x28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40012000 	.word	0x40012000
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40020000 	.word	0x40020000

08003fd4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08a      	sub	sp, #40	; 0x28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fdc:	f107 0314 	add.w	r3, r7, #20
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a17      	ldr	r2, [pc, #92]	; (8004050 <HAL_DAC_MspInit+0x7c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d127      	bne.n	8004046 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	4b16      	ldr	r3, [pc, #88]	; (8004054 <HAL_DAC_MspInit+0x80>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	4a15      	ldr	r2, [pc, #84]	; (8004054 <HAL_DAC_MspInit+0x80>)
 8004000:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004004:	6413      	str	r3, [r2, #64]	; 0x40
 8004006:	4b13      	ldr	r3, [pc, #76]	; (8004054 <HAL_DAC_MspInit+0x80>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <HAL_DAC_MspInit+0x80>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	4a0e      	ldr	r2, [pc, #56]	; (8004054 <HAL_DAC_MspInit+0x80>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6313      	str	r3, [r2, #48]	; 0x30
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <HAL_DAC_MspInit+0x80>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800402e:	2310      	movs	r3, #16
 8004030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004032:	2303      	movs	r3, #3
 8004034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800403a:	f107 0314 	add.w	r3, r7, #20
 800403e:	4619      	mov	r1, r3
 8004040:	4805      	ldr	r0, [pc, #20]	; (8004058 <HAL_DAC_MspInit+0x84>)
 8004042:	f001 f94b 	bl	80052dc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004046:	bf00      	nop
 8004048:	3728      	adds	r7, #40	; 0x28
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40007400 	.word	0x40007400
 8004054:	40023800 	.word	0x40023800
 8004058:	40020000 	.word	0x40020000

0800405c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08c      	sub	sp, #48	; 0x30
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004064:	f107 031c 	add.w	r3, r7, #28
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a32      	ldr	r2, [pc, #200]	; (8004144 <HAL_SPI_MspInit+0xe8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d12c      	bne.n	80040d8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	4b31      	ldr	r3, [pc, #196]	; (8004148 <HAL_SPI_MspInit+0xec>)
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	4a30      	ldr	r2, [pc, #192]	; (8004148 <HAL_SPI_MspInit+0xec>)
 8004088:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800408c:	6453      	str	r3, [r2, #68]	; 0x44
 800408e:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <HAL_SPI_MspInit+0xec>)
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	4b2a      	ldr	r3, [pc, #168]	; (8004148 <HAL_SPI_MspInit+0xec>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	4a29      	ldr	r2, [pc, #164]	; (8004148 <HAL_SPI_MspInit+0xec>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6313      	str	r3, [r2, #48]	; 0x30
 80040aa:	4b27      	ldr	r3, [pc, #156]	; (8004148 <HAL_SPI_MspInit+0xec>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80040b6:	23e0      	movs	r3, #224	; 0xe0
 80040b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ba:	2302      	movs	r3, #2
 80040bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c2:	2303      	movs	r3, #3
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040c6:	2305      	movs	r3, #5
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ca:	f107 031c 	add.w	r3, r7, #28
 80040ce:	4619      	mov	r1, r3
 80040d0:	481e      	ldr	r0, [pc, #120]	; (800414c <HAL_SPI_MspInit+0xf0>)
 80040d2:	f001 f903 	bl	80052dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80040d6:	e030      	b.n	800413a <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1c      	ldr	r2, [pc, #112]	; (8004150 <HAL_SPI_MspInit+0xf4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d12b      	bne.n	800413a <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	4b18      	ldr	r3, [pc, #96]	; (8004148 <HAL_SPI_MspInit+0xec>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	4a17      	ldr	r2, [pc, #92]	; (8004148 <HAL_SPI_MspInit+0xec>)
 80040ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f0:	6413      	str	r3, [r2, #64]	; 0x40
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <HAL_SPI_MspInit+0xec>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	4b11      	ldr	r3, [pc, #68]	; (8004148 <HAL_SPI_MspInit+0xec>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	4a10      	ldr	r2, [pc, #64]	; (8004148 <HAL_SPI_MspInit+0xec>)
 8004108:	f043 0302 	orr.w	r3, r3, #2
 800410c:	6313      	str	r3, [r2, #48]	; 0x30
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <HAL_SPI_MspInit+0xec>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800411a:	2338      	movs	r3, #56	; 0x38
 800411c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411e:	2302      	movs	r3, #2
 8004120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004122:	2300      	movs	r3, #0
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004126:	2303      	movs	r3, #3
 8004128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800412a:	2306      	movs	r3, #6
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800412e:	f107 031c 	add.w	r3, r7, #28
 8004132:	4619      	mov	r1, r3
 8004134:	4807      	ldr	r0, [pc, #28]	; (8004154 <HAL_SPI_MspInit+0xf8>)
 8004136:	f001 f8d1 	bl	80052dc <HAL_GPIO_Init>
}
 800413a:	bf00      	nop
 800413c:	3730      	adds	r7, #48	; 0x30
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40013000 	.word	0x40013000
 8004148:	40023800 	.word	0x40023800
 800414c:	40020000 	.word	0x40020000
 8004150:	40003c00 	.word	0x40003c00
 8004154:	40020400 	.word	0x40020400

08004158 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a18      	ldr	r2, [pc, #96]	; (80041c8 <HAL_TIM_Base_MspInit+0x70>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d116      	bne.n	8004198 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	4b17      	ldr	r3, [pc, #92]	; (80041cc <HAL_TIM_Base_MspInit+0x74>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	4a16      	ldr	r2, [pc, #88]	; (80041cc <HAL_TIM_Base_MspInit+0x74>)
 8004174:	f043 0304 	orr.w	r3, r3, #4
 8004178:	6413      	str	r3, [r2, #64]	; 0x40
 800417a:	4b14      	ldr	r3, [pc, #80]	; (80041cc <HAL_TIM_Base_MspInit+0x74>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004186:	2200      	movs	r2, #0
 8004188:	2100      	movs	r1, #0
 800418a:	201e      	movs	r0, #30
 800418c:	f000 ff53 	bl	8005036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004190:	201e      	movs	r0, #30
 8004192:	f000 ff6c 	bl	800506e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004196:	e012      	b.n	80041be <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <HAL_TIM_Base_MspInit+0x78>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d10d      	bne.n	80041be <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	4b09      	ldr	r3, [pc, #36]	; (80041cc <HAL_TIM_Base_MspInit+0x74>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	4a08      	ldr	r2, [pc, #32]	; (80041cc <HAL_TIM_Base_MspInit+0x74>)
 80041ac:	f043 0310 	orr.w	r3, r3, #16
 80041b0:	6413      	str	r3, [r2, #64]	; 0x40
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_TIM_Base_MspInit+0x74>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	68bb      	ldr	r3, [r7, #8]
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40000800 	.word	0x40000800
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40001000 	.word	0x40001000

080041d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	; 0x28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041dc:	f107 0314 	add.w	r3, r7, #20
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	609a      	str	r2, [r3, #8]
 80041e8:	60da      	str	r2, [r3, #12]
 80041ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1d      	ldr	r2, [pc, #116]	; (8004268 <HAL_UART_MspInit+0x94>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d134      	bne.n	8004260 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	4b1c      	ldr	r3, [pc, #112]	; (800426c <HAL_UART_MspInit+0x98>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	4a1b      	ldr	r2, [pc, #108]	; (800426c <HAL_UART_MspInit+0x98>)
 8004200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004204:	6413      	str	r3, [r2, #64]	; 0x40
 8004206:	4b19      	ldr	r3, [pc, #100]	; (800426c <HAL_UART_MspInit+0x98>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	4b15      	ldr	r3, [pc, #84]	; (800426c <HAL_UART_MspInit+0x98>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	4a14      	ldr	r2, [pc, #80]	; (800426c <HAL_UART_MspInit+0x98>)
 800421c:	f043 0304 	orr.w	r3, r3, #4
 8004220:	6313      	str	r3, [r2, #48]	; 0x30
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <HAL_UART_MspInit+0x98>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800422e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004234:	2302      	movs	r3, #2
 8004236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004238:	2301      	movs	r3, #1
 800423a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800423c:	2303      	movs	r3, #3
 800423e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004240:	2307      	movs	r3, #7
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004244:	f107 0314 	add.w	r3, r7, #20
 8004248:	4619      	mov	r1, r3
 800424a:	4809      	ldr	r0, [pc, #36]	; (8004270 <HAL_UART_MspInit+0x9c>)
 800424c:	f001 f846 	bl	80052dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004250:	2200      	movs	r2, #0
 8004252:	2100      	movs	r1, #0
 8004254:	2027      	movs	r0, #39	; 0x27
 8004256:	f000 feee 	bl	8005036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800425a:	2027      	movs	r0, #39	; 0x27
 800425c:	f000 ff07 	bl	800506e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004260:	bf00      	nop
 8004262:	3728      	adds	r7, #40	; 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40004800 	.word	0x40004800
 800426c:	40023800 	.word	0x40023800
 8004270:	40020800 	.word	0x40020800

08004274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004278:	bf00      	nop
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004282:	b480      	push	{r7}
 8004284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004286:	e7fe      	b.n	8004286 <HardFault_Handler+0x4>

08004288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800428c:	e7fe      	b.n	800428c <MemManage_Handler+0x4>

0800428e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800428e:	b480      	push	{r7}
 8004290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004292:	e7fe      	b.n	8004292 <BusFault_Handler+0x4>

08004294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004298:	e7fe      	b.n	8004298 <UsageFault_Handler+0x4>

0800429a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800429a:	b480      	push	{r7}
 800429c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800429e:	bf00      	nop
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042b6:	b480      	push	{r7}
 80042b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042ba:	bf00      	nop
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 80042c8:	f7fd fa32 	bl	8001730 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042cc:	f000 f8f8 	bl	80044c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042d0:	bf00      	nop
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80042d8:	f001 f9fe 	bl	80056d8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80042dc:	bf00      	nop
 80042de:	bd80      	pop	{r7, pc}

080042e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80042e4:	2001      	movs	r0, #1
 80042e6:	f001 f9df 	bl	80056a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80042f4:	4802      	ldr	r0, [pc, #8]	; (8004300 <ADC_IRQHandler+0x10>)
 80042f6:	f000 fa39 	bl	800476c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	200005cc 	.word	0x200005cc

08004304 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004308:	4802      	ldr	r0, [pc, #8]	; (8004314 <TIM4_IRQHandler+0x10>)
 800430a:	f002 fa9d 	bl	8006848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200002cc 	.word	0x200002cc

08004318 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800431c:	4802      	ldr	r0, [pc, #8]	; (8004328 <USART3_IRQHandler+0x10>)
 800431e:	f002 fe5b 	bl	8006fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	2000030c 	.word	0x2000030c

0800432c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004330:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004334:	f001 f9b8 	bl	80056a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004338:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800433c:	f001 f9b4 	bl	80056a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004340:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004344:	f001 f9b0 	bl	80056a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004348:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800434c:	f001 f9ac 	bl	80056a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004350:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004354:	f001 f9a8 	bl	80056a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004358:	bf00      	nop
 800435a:	bd80      	pop	{r7, pc}

0800435c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004360:	4b16      	ldr	r3, [pc, #88]	; (80043bc <SystemInit+0x60>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	4a15      	ldr	r2, [pc, #84]	; (80043bc <SystemInit+0x60>)
 8004368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800436c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004370:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <SystemInit+0x64>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <SystemInit+0x64>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800437c:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <SystemInit+0x64>)
 800437e:	2200      	movs	r2, #0
 8004380:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004382:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <SystemInit+0x64>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a0e      	ldr	r2, [pc, #56]	; (80043c0 <SystemInit+0x64>)
 8004388:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800438c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <SystemInit+0x64>)
 8004394:	4a0b      	ldr	r2, [pc, #44]	; (80043c4 <SystemInit+0x68>)
 8004396:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004398:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <SystemInit+0x64>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <SystemInit+0x64>)
 800439e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <SystemInit+0x64>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043aa:	4b04      	ldr	r3, [pc, #16]	; (80043bc <SystemInit+0x60>)
 80043ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043b0:	609a      	str	r2, [r3, #8]
#endif
}
 80043b2:	bf00      	nop
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000ed00 	.word	0xe000ed00
 80043c0:	40023800 	.word	0x40023800
 80043c4:	24003010 	.word	0x24003010

080043c8 <Reset_Handler>:
 80043c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004400 <LoopFillZerobss+0x14>
 80043cc:	2100      	movs	r1, #0
 80043ce:	e003      	b.n	80043d8 <LoopCopyDataInit>

080043d0 <CopyDataInit>:
 80043d0:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <LoopFillZerobss+0x18>)
 80043d2:	585b      	ldr	r3, [r3, r1]
 80043d4:	5043      	str	r3, [r0, r1]
 80043d6:	3104      	adds	r1, #4

080043d8 <LoopCopyDataInit>:
 80043d8:	480b      	ldr	r0, [pc, #44]	; (8004408 <LoopFillZerobss+0x1c>)
 80043da:	4b0c      	ldr	r3, [pc, #48]	; (800440c <LoopFillZerobss+0x20>)
 80043dc:	1842      	adds	r2, r0, r1
 80043de:	429a      	cmp	r2, r3
 80043e0:	d3f6      	bcc.n	80043d0 <CopyDataInit>
 80043e2:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <LoopFillZerobss+0x24>)
 80043e4:	e002      	b.n	80043ec <LoopFillZerobss>

080043e6 <FillZerobss>:
 80043e6:	2300      	movs	r3, #0
 80043e8:	f842 3b04 	str.w	r3, [r2], #4

080043ec <LoopFillZerobss>:
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <LoopFillZerobss+0x28>)
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d3f9      	bcc.n	80043e6 <FillZerobss>
 80043f2:	f7ff ffb3 	bl	800435c <SystemInit>
 80043f6:	f003 fa2b 	bl	8007850 <__libc_init_array>
 80043fa:	f7ff fa79 	bl	80038f0 <main>
 80043fe:	4770      	bx	lr
 8004400:	20020000 	.word	0x20020000
 8004404:	08025a54 	.word	0x08025a54
 8004408:	20000000 	.word	0x20000000
 800440c:	20000068 	.word	0x20000068
 8004410:	20000068 	.word	0x20000068
 8004414:	200007d0 	.word	0x200007d0

08004418 <CAN1_RX0_IRQHandler>:
 8004418:	e7fe      	b.n	8004418 <CAN1_RX0_IRQHandler>
	...

0800441c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <HAL_Init+0x40>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0d      	ldr	r2, [pc, #52]	; (800445c <HAL_Init+0x40>)
 8004426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800442a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_Init+0x40>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a0a      	ldr	r2, [pc, #40]	; (800445c <HAL_Init+0x40>)
 8004432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <HAL_Init+0x40>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a07      	ldr	r2, [pc, #28]	; (800445c <HAL_Init+0x40>)
 800443e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004444:	2003      	movs	r0, #3
 8004446:	f000 fdeb 	bl	8005020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800444a:	2000      	movs	r0, #0
 800444c:	f000 f808 	bl	8004460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004450:	f7ff fd46 	bl	8003ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40023c00 	.word	0x40023c00

08004460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <HAL_InitTick+0x54>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_InitTick+0x58>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	4619      	mov	r1, r3
 8004472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004476:	fbb3 f3f1 	udiv	r3, r3, r1
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fe03 	bl	800508a <HAL_SYSTICK_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e00e      	b.n	80044ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b0f      	cmp	r3, #15
 8004492:	d80a      	bhi.n	80044aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004494:	2200      	movs	r2, #0
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	f000 fdcb 	bl	8005036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044a0:	4a06      	ldr	r2, [pc, #24]	; (80044bc <HAL_InitTick+0x5c>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e000      	b.n	80044ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	2000005c 	.word	0x2000005c
 80044b8:	20000064 	.word	0x20000064
 80044bc:	20000060 	.word	0x20000060

080044c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_IncTick+0x20>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_IncTick+0x24>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4413      	add	r3, r2
 80044d0:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <HAL_IncTick+0x24>)
 80044d2:	6013      	str	r3, [r2, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000064 	.word	0x20000064
 80044e4:	200007cc 	.word	0x200007cc

080044e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return uwTick;
 80044ec:	4b03      	ldr	r3, [pc, #12]	; (80044fc <HAL_GetTick+0x14>)
 80044ee:	681b      	ldr	r3, [r3, #0]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	200007cc 	.word	0x200007cc

08004500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004508:	f7ff ffee 	bl	80044e8 <HAL_GetTick>
 800450c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d005      	beq.n	8004526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800451a:	4b09      	ldr	r3, [pc, #36]	; (8004540 <HAL_Delay+0x40>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004526:	bf00      	nop
 8004528:	f7ff ffde 	bl	80044e8 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	429a      	cmp	r2, r3
 8004536:	d8f7      	bhi.n	8004528 <HAL_Delay+0x28>
  {
  }
}
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	20000064 	.word	0x20000064

08004544 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e033      	b.n	80045c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff fcea 	bl	8003f3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d118      	bne.n	80045b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800458a:	f023 0302 	bic.w	r3, r3, #2
 800458e:	f043 0202 	orr.w	r2, r3, #2
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fb6c 	bl	8004c74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f023 0303 	bic.w	r3, r3, #3
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
 80045b2:	e001      	b.n	80045b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <HAL_ADC_Start_IT+0x1a>
 80045e2:	2302      	movs	r3, #2
 80045e4:	e0b0      	b.n	8004748 <HAL_ADC_Start_IT+0x17c>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d018      	beq.n	800462e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800460c:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_ADC_Start_IT+0x188>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a51      	ldr	r2, [pc, #324]	; (8004758 <HAL_ADC_Start_IT+0x18c>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	0c9a      	lsrs	r2, r3, #18
 8004618:	4613      	mov	r3, r2
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	4413      	add	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004620:	e002      	b.n	8004628 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	3b01      	subs	r3, #1
 8004626:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f9      	bne.n	8004622 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	f040 8084 	bne.w	8004746 <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004668:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d106      	bne.n	800468c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	f023 0206 	bic.w	r2, r3, #6
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	645a      	str	r2, [r3, #68]	; 0x44
 800468a:	e002      	b.n	8004692 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800469a:	4b30      	ldr	r3, [pc, #192]	; (800475c <HAL_ADC_Start_IT+0x190>)
 800469c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80046a6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046b6:	f043 0320 	orr.w	r3, r3, #32
 80046ba:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d12a      	bne.n	800471e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a24      	ldr	r2, [pc, #144]	; (8004760 <HAL_ADC_Start_IT+0x194>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d015      	beq.n	80046fe <HAL_ADC_Start_IT+0x132>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a23      	ldr	r2, [pc, #140]	; (8004764 <HAL_ADC_Start_IT+0x198>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d105      	bne.n	80046e8 <HAL_ADC_Start_IT+0x11c>
 80046dc:	4b1f      	ldr	r3, [pc, #124]	; (800475c <HAL_ADC_Start_IT+0x190>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1e      	ldr	r2, [pc, #120]	; (8004768 <HAL_ADC_Start_IT+0x19c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d129      	bne.n	8004746 <HAL_ADC_Start_IT+0x17a>
 80046f2:	4b1a      	ldr	r3, [pc, #104]	; (800475c <HAL_ADC_Start_IT+0x190>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	2b0f      	cmp	r3, #15
 80046fc:	d823      	bhi.n	8004746 <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d11c      	bne.n	8004746 <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	e013      	b.n	8004746 <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a0f      	ldr	r2, [pc, #60]	; (8004760 <HAL_ADC_Start_IT+0x194>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d10e      	bne.n	8004746 <HAL_ADC_Start_IT+0x17a>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d107      	bne.n	8004746 <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004744:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	2000005c 	.word	0x2000005c
 8004758:	431bde83 	.word	0x431bde83
 800475c:	40012300 	.word	0x40012300
 8004760:	40012000 	.word	0x40012000
 8004764:	40012100 	.word	0x40012100
 8004768:	40012200 	.word	0x40012200

0800476c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	2300      	movs	r3, #0
 800477a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b02      	cmp	r3, #2
 8004788:	bf0c      	ite	eq
 800478a:	2301      	moveq	r3, #1
 800478c:	2300      	movne	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b20      	cmp	r3, #32
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d049      	beq.n	8004842 <HAL_ADC_IRQHandler+0xd6>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d046      	beq.n	8004842 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d105      	bne.n	80047cc <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d12b      	bne.n	8004832 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d127      	bne.n	8004832 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d006      	beq.n	80047fe <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d119      	bne.n	8004832 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0220 	bic.w	r2, r2, #32
 800480c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d105      	bne.n	8004832 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f043 0201 	orr.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fe fef4 	bl	8003620 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0212 	mvn.w	r2, #18
 8004840:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b04      	cmp	r3, #4
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004862:	2b80      	cmp	r3, #128	; 0x80
 8004864:	bf0c      	ite	eq
 8004866:	2301      	moveq	r3, #1
 8004868:	2300      	movne	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d057      	beq.n	8004924 <HAL_ADC_IRQHandler+0x1b8>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d054      	beq.n	8004924 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2b00      	cmp	r3, #0
 8004884:	d105      	bne.n	8004892 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d139      	bne.n	8004914 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d006      	beq.n	80048bc <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d12b      	bne.n	8004914 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d124      	bne.n	8004914 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d11d      	bne.n	8004914 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d119      	bne.n	8004914 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d105      	bne.n	8004914 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	f043 0201 	orr.w	r2, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 faa9 	bl	8004e6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f06f 020c 	mvn.w	r2, #12
 8004922:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b01      	cmp	r3, #1
 8004930:	bf0c      	ite	eq
 8004932:	2301      	moveq	r3, #1
 8004934:	2300      	movne	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004944:	2b40      	cmp	r3, #64	; 0x40
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d017      	beq.n	8004986 <HAL_ADC_IRQHandler+0x21a>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d014      	beq.n	8004986 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b01      	cmp	r3, #1
 8004968:	d10d      	bne.n	8004986 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f846 	bl	8004a08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0201 	mvn.w	r2, #1
 8004984:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b20      	cmp	r3, #32
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d015      	beq.n	80049e6 <HAL_ADC_IRQHandler+0x27a>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d012      	beq.n	80049e6 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c4:	f043 0202 	orr.w	r2, r3, #2
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0220 	mvn.w	r2, #32
 80049d4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f820 	bl	8004a1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0220 	mvn.w	r2, #32
 80049e4:	601a      	str	r2, [r3, #0]
  }
}
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x1c>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e105      	b.n	8004c58 <HAL_ADC_ConfigChannel+0x228>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b09      	cmp	r3, #9
 8004a5a:	d925      	bls.n	8004aa8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68d9      	ldr	r1, [r3, #12]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	4413      	add	r3, r2
 8004a70:	3b1e      	subs	r3, #30
 8004a72:	2207      	movs	r2, #7
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	43da      	mvns	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	400a      	ands	r2, r1
 8004a80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68d9      	ldr	r1, [r3, #12]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	4618      	mov	r0, r3
 8004a94:	4603      	mov	r3, r0
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	4403      	add	r3, r0
 8004a9a:	3b1e      	subs	r3, #30
 8004a9c:	409a      	lsls	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	e022      	b.n	8004aee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6919      	ldr	r1, [r3, #16]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	4413      	add	r3, r2
 8004abc:	2207      	movs	r2, #7
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	400a      	ands	r2, r1
 8004aca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6919      	ldr	r1, [r3, #16]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	4618      	mov	r0, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4403      	add	r3, r0
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b06      	cmp	r3, #6
 8004af4:	d824      	bhi.n	8004b40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	3b05      	subs	r3, #5
 8004b08:	221f      	movs	r2, #31
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43da      	mvns	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	400a      	ands	r2, r1
 8004b16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	4618      	mov	r0, r3
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	3b05      	subs	r3, #5
 8004b32:	fa00 f203 	lsl.w	r2, r0, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b3e:	e04c      	b.n	8004bda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b0c      	cmp	r3, #12
 8004b46:	d824      	bhi.n	8004b92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	3b23      	subs	r3, #35	; 0x23
 8004b5a:	221f      	movs	r2, #31
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	43da      	mvns	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	400a      	ands	r2, r1
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	4618      	mov	r0, r3
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	3b23      	subs	r3, #35	; 0x23
 8004b84:	fa00 f203 	lsl.w	r2, r0, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8004b90:	e023      	b.n	8004bda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3b41      	subs	r3, #65	; 0x41
 8004ba4:	221f      	movs	r2, #31
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43da      	mvns	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	400a      	ands	r2, r1
 8004bb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	3b41      	subs	r3, #65	; 0x41
 8004bce:	fa00 f203 	lsl.w	r2, r0, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bda:	4b22      	ldr	r3, [pc, #136]	; (8004c64 <HAL_ADC_ConfigChannel+0x234>)
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a21      	ldr	r2, [pc, #132]	; (8004c68 <HAL_ADC_ConfigChannel+0x238>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d109      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0x1cc>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b12      	cmp	r3, #18
 8004bee:	d105      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <HAL_ADC_ConfigChannel+0x238>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d123      	bne.n	8004c4e <HAL_ADC_ConfigChannel+0x21e>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d003      	beq.n	8004c16 <HAL_ADC_ConfigChannel+0x1e6>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b11      	cmp	r3, #17
 8004c14:	d11b      	bne.n	8004c4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d111      	bne.n	8004c4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c2a:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <HAL_ADC_ConfigChannel+0x23c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a10      	ldr	r2, [pc, #64]	; (8004c70 <HAL_ADC_ConfigChannel+0x240>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	0c9a      	lsrs	r2, r3, #18
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c40:	e002      	b.n	8004c48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f9      	bne.n	8004c42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	40012300 	.word	0x40012300
 8004c68:	40012000 	.word	0x40012000
 8004c6c:	2000005c 	.word	0x2000005c
 8004c70:	431bde83 	.word	0x431bde83

08004c74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c7c:	4b79      	ldr	r3, [pc, #484]	; (8004e64 <ADC_Init+0x1f0>)
 8004c7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	431a      	orrs	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ca8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6859      	ldr	r1, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	021a      	lsls	r2, r3, #8
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ccc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6859      	ldr	r1, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6899      	ldr	r1, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	4a58      	ldr	r2, [pc, #352]	; (8004e68 <ADC_Init+0x1f4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d022      	beq.n	8004d52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6899      	ldr	r1, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6899      	ldr	r1, [r3, #8]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	e00f      	b.n	8004d72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0202 	bic.w	r2, r2, #2
 8004d80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6899      	ldr	r1, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	7e1b      	ldrb	r3, [r3, #24]
 8004d8c:	005a      	lsls	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01b      	beq.n	8004dd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004dbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6859      	ldr	r1, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	035a      	lsls	r2, r3, #13
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	e007      	b.n	8004de8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004de6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	051a      	lsls	r2, r3, #20
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6899      	ldr	r1, [r3, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e2a:	025a      	lsls	r2, r3, #9
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6899      	ldr	r1, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	029a      	lsls	r2, r3, #10
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	609a      	str	r2, [r3, #8]
}
 8004e58:	bf00      	nop
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	40012300 	.word	0x40012300
 8004e68:	0f000001 	.word	0x0f000001

08004e6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e90:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004eb2:	4a04      	ldr	r2, [pc, #16]	; (8004ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	60d3      	str	r3, [r2, #12]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	e000ed00 	.word	0xe000ed00

08004ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ecc:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	0a1b      	lsrs	r3, r3, #8
 8004ed2:	f003 0307 	and.w	r3, r3, #7
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	e000ed00 	.word	0xe000ed00

08004ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	db0b      	blt.n	8004f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	f003 021f 	and.w	r2, r3, #31
 8004efc:	4907      	ldr	r1, [pc, #28]	; (8004f1c <__NVIC_EnableIRQ+0x38>)
 8004efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	2001      	movs	r0, #1
 8004f06:	fa00 f202 	lsl.w	r2, r0, r2
 8004f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	e000e100 	.word	0xe000e100

08004f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	6039      	str	r1, [r7, #0]
 8004f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	db0a      	blt.n	8004f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	490c      	ldr	r1, [pc, #48]	; (8004f6c <__NVIC_SetPriority+0x4c>)
 8004f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3e:	0112      	lsls	r2, r2, #4
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	440b      	add	r3, r1
 8004f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f48:	e00a      	b.n	8004f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	4908      	ldr	r1, [pc, #32]	; (8004f70 <__NVIC_SetPriority+0x50>)
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	3b04      	subs	r3, #4
 8004f58:	0112      	lsls	r2, r2, #4
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	761a      	strb	r2, [r3, #24]
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	e000e100 	.word	0xe000e100
 8004f70:	e000ed00 	.word	0xe000ed00

08004f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b089      	sub	sp, #36	; 0x24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f1c3 0307 	rsb	r3, r3, #7
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	bf28      	it	cs
 8004f92:	2304      	movcs	r3, #4
 8004f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	2b06      	cmp	r3, #6
 8004f9c:	d902      	bls.n	8004fa4 <NVIC_EncodePriority+0x30>
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3b03      	subs	r3, #3
 8004fa2:	e000      	b.n	8004fa6 <NVIC_EncodePriority+0x32>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43da      	mvns	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	401a      	ands	r2, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc6:	43d9      	mvns	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fcc:	4313      	orrs	r3, r2
         );
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3724      	adds	r7, #36	; 0x24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fec:	d301      	bcc.n	8004ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e00f      	b.n	8005012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ff2:	4a0a      	ldr	r2, [pc, #40]	; (800501c <SysTick_Config+0x40>)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ffa:	210f      	movs	r1, #15
 8004ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8005000:	f7ff ff8e 	bl	8004f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <SysTick_Config+0x40>)
 8005006:	2200      	movs	r2, #0
 8005008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800500a:	4b04      	ldr	r3, [pc, #16]	; (800501c <SysTick_Config+0x40>)
 800500c:	2207      	movs	r2, #7
 800500e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	e000e010 	.word	0xe000e010

08005020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff ff29 	bl	8004e80 <__NVIC_SetPriorityGrouping>
}
 800502e:	bf00      	nop
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005036:	b580      	push	{r7, lr}
 8005038:	b086      	sub	sp, #24
 800503a:	af00      	add	r7, sp, #0
 800503c:	4603      	mov	r3, r0
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	607a      	str	r2, [r7, #4]
 8005042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005048:	f7ff ff3e 	bl	8004ec8 <__NVIC_GetPriorityGrouping>
 800504c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	6978      	ldr	r0, [r7, #20]
 8005054:	f7ff ff8e 	bl	8004f74 <NVIC_EncodePriority>
 8005058:	4602      	mov	r2, r0
 800505a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff ff5d 	bl	8004f20 <__NVIC_SetPriority>
}
 8005066:	bf00      	nop
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	4603      	mov	r3, r0
 8005076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff ff31 	bl	8004ee4 <__NVIC_EnableIRQ>
}
 8005082:	bf00      	nop
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b082      	sub	sp, #8
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff ffa2 	bl	8004fdc <SysTick_Config>
 8005098:	4603      	mov	r3, r0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b082      	sub	sp, #8
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e014      	b.n	80050de <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	791b      	ldrb	r3, [r3, #4]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d105      	bne.n	80050ca <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7fe ff85 	bl	8003fd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2202      	movs	r2, #2
 80050ce:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b085      	sub	sp, #20
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	2300      	movs	r3, #0
 80050f6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	795b      	ldrb	r3, [r3, #5]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_DAC_Start+0x1e>
 8005100:	2302      	movs	r3, #2
 8005102:	e050      	b.n	80051a6 <HAL_DAC_Start+0xc0>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6819      	ldr	r1, [r3, #0]
 8005116:	2201      	movs	r2, #1
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	409a      	lsls	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d11a      	bne.n	8005160 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005140:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b04      	cmp	r3, #4
 8005146:	d127      	bne.n	8005198 <HAL_DAC_Start+0xb2>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b38      	cmp	r3, #56	; 0x38
 800514c:	d124      	bne.n	8005198 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	e01b      	b.n	8005198 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800516a:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005176:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800517e:	d10b      	bne.n	8005198 <HAL_DAC_Start+0xb2>
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8005186:	d107      	bne.n	8005198 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0202 	orr.w	r2, r2, #2
 8005196:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b087      	sub	sp, #28
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	2300      	movs	r3, #0
 80051c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	795b      	ldrb	r3, [r3, #5]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_DAC_ConfigChannel+0x20>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e036      	b.n	8005240 <HAL_DAC_ConfigChannel+0x8e>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2201      	movs	r2, #1
 80051d6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2202      	movs	r2, #2
 80051dc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80051e6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	43db      	mvns	r3, r3
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4013      	ands	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	22c0      	movs	r2, #192	; 0xc0
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	43da      	mvns	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	400a      	ands	r2, r1
 8005230:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d105      	bne.n	8005276 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4413      	add	r3, r2
 8005270:	3308      	adds	r3, #8
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	e004      	b.n	8005280 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4413      	add	r3, r2
 800527c:	3314      	adds	r3, #20
 800527e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	461a      	mov	r2, r3
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d004      	beq.n	80052b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2280      	movs	r2, #128	; 0x80
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e00c      	b.n	80052ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2205      	movs	r2, #5
 80052b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0201 	bic.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052dc:	b480      	push	{r7}
 80052de:	b089      	sub	sp, #36	; 0x24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	e16b      	b.n	80055d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052f8:	2201      	movs	r2, #1
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4013      	ands	r3, r2
 800530a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	429a      	cmp	r2, r3
 8005312:	f040 815a 	bne.w	80055ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d003      	beq.n	8005326 <HAL_GPIO_Init+0x4a>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b12      	cmp	r3, #18
 8005324:	d123      	bne.n	800536e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	08da      	lsrs	r2, r3, #3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3208      	adds	r2, #8
 800532e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	220f      	movs	r2, #15
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43db      	mvns	r3, r3
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	4013      	ands	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	691a      	ldr	r2, [r3, #16]
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	08da      	lsrs	r2, r3, #3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3208      	adds	r2, #8
 8005368:	69b9      	ldr	r1, [r7, #24]
 800536a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	2203      	movs	r2, #3
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43db      	mvns	r3, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4013      	ands	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 0203 	and.w	r2, r3, #3
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	4313      	orrs	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d00b      	beq.n	80053c2 <HAL_GPIO_Init+0xe6>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d007      	beq.n	80053c2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053b6:	2b11      	cmp	r3, #17
 80053b8:	d003      	beq.n	80053c2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b12      	cmp	r3, #18
 80053c0:	d130      	bne.n	8005424 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	2203      	movs	r2, #3
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	43db      	mvns	r3, r3
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	4013      	ands	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053f8:	2201      	movs	r2, #1
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	43db      	mvns	r3, r3
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	4013      	ands	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	091b      	lsrs	r3, r3, #4
 800540e:	f003 0201 	and.w	r2, r3, #1
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	4313      	orrs	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	2203      	movs	r2, #3
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	43db      	mvns	r3, r3
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	4013      	ands	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	4313      	orrs	r3, r2
 800544c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80b4 	beq.w	80055ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	4b5f      	ldr	r3, [pc, #380]	; (80055e4 <HAL_GPIO_Init+0x308>)
 8005468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546a:	4a5e      	ldr	r2, [pc, #376]	; (80055e4 <HAL_GPIO_Init+0x308>)
 800546c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005470:	6453      	str	r3, [r2, #68]	; 0x44
 8005472:	4b5c      	ldr	r3, [pc, #368]	; (80055e4 <HAL_GPIO_Init+0x308>)
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800547e:	4a5a      	ldr	r2, [pc, #360]	; (80055e8 <HAL_GPIO_Init+0x30c>)
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	089b      	lsrs	r3, r3, #2
 8005484:	3302      	adds	r3, #2
 8005486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	220f      	movs	r2, #15
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	43db      	mvns	r3, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4013      	ands	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a51      	ldr	r2, [pc, #324]	; (80055ec <HAL_GPIO_Init+0x310>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d02b      	beq.n	8005502 <HAL_GPIO_Init+0x226>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a50      	ldr	r2, [pc, #320]	; (80055f0 <HAL_GPIO_Init+0x314>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d025      	beq.n	80054fe <HAL_GPIO_Init+0x222>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a4f      	ldr	r2, [pc, #316]	; (80055f4 <HAL_GPIO_Init+0x318>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d01f      	beq.n	80054fa <HAL_GPIO_Init+0x21e>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a4e      	ldr	r2, [pc, #312]	; (80055f8 <HAL_GPIO_Init+0x31c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d019      	beq.n	80054f6 <HAL_GPIO_Init+0x21a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a4d      	ldr	r2, [pc, #308]	; (80055fc <HAL_GPIO_Init+0x320>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_GPIO_Init+0x216>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a4c      	ldr	r2, [pc, #304]	; (8005600 <HAL_GPIO_Init+0x324>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00d      	beq.n	80054ee <HAL_GPIO_Init+0x212>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a4b      	ldr	r2, [pc, #300]	; (8005604 <HAL_GPIO_Init+0x328>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <HAL_GPIO_Init+0x20e>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a4a      	ldr	r2, [pc, #296]	; (8005608 <HAL_GPIO_Init+0x32c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d101      	bne.n	80054e6 <HAL_GPIO_Init+0x20a>
 80054e2:	2307      	movs	r3, #7
 80054e4:	e00e      	b.n	8005504 <HAL_GPIO_Init+0x228>
 80054e6:	2308      	movs	r3, #8
 80054e8:	e00c      	b.n	8005504 <HAL_GPIO_Init+0x228>
 80054ea:	2306      	movs	r3, #6
 80054ec:	e00a      	b.n	8005504 <HAL_GPIO_Init+0x228>
 80054ee:	2305      	movs	r3, #5
 80054f0:	e008      	b.n	8005504 <HAL_GPIO_Init+0x228>
 80054f2:	2304      	movs	r3, #4
 80054f4:	e006      	b.n	8005504 <HAL_GPIO_Init+0x228>
 80054f6:	2303      	movs	r3, #3
 80054f8:	e004      	b.n	8005504 <HAL_GPIO_Init+0x228>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e002      	b.n	8005504 <HAL_GPIO_Init+0x228>
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <HAL_GPIO_Init+0x228>
 8005502:	2300      	movs	r3, #0
 8005504:	69fa      	ldr	r2, [r7, #28]
 8005506:	f002 0203 	and.w	r2, r2, #3
 800550a:	0092      	lsls	r2, r2, #2
 800550c:	4093      	lsls	r3, r2
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4313      	orrs	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005514:	4934      	ldr	r1, [pc, #208]	; (80055e8 <HAL_GPIO_Init+0x30c>)
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	089b      	lsrs	r3, r3, #2
 800551a:	3302      	adds	r3, #2
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005522:	4b3a      	ldr	r3, [pc, #232]	; (800560c <HAL_GPIO_Init+0x330>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	43db      	mvns	r3, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	4013      	ands	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005546:	4a31      	ldr	r2, [pc, #196]	; (800560c <HAL_GPIO_Init+0x330>)
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800554c:	4b2f      	ldr	r3, [pc, #188]	; (800560c <HAL_GPIO_Init+0x330>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	43db      	mvns	r3, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4013      	ands	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005570:	4a26      	ldr	r2, [pc, #152]	; (800560c <HAL_GPIO_Init+0x330>)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005576:	4b25      	ldr	r3, [pc, #148]	; (800560c <HAL_GPIO_Init+0x330>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	43db      	mvns	r3, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4013      	ands	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800559a:	4a1c      	ldr	r2, [pc, #112]	; (800560c <HAL_GPIO_Init+0x330>)
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055a0:	4b1a      	ldr	r3, [pc, #104]	; (800560c <HAL_GPIO_Init+0x330>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	43db      	mvns	r3, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4013      	ands	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055c4:	4a11      	ldr	r2, [pc, #68]	; (800560c <HAL_GPIO_Init+0x330>)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	3301      	adds	r3, #1
 80055ce:	61fb      	str	r3, [r7, #28]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	2b0f      	cmp	r3, #15
 80055d4:	f67f ae90 	bls.w	80052f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055d8:	bf00      	nop
 80055da:	3724      	adds	r7, #36	; 0x24
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	40023800 	.word	0x40023800
 80055e8:	40013800 	.word	0x40013800
 80055ec:	40020000 	.word	0x40020000
 80055f0:	40020400 	.word	0x40020400
 80055f4:	40020800 	.word	0x40020800
 80055f8:	40020c00 	.word	0x40020c00
 80055fc:	40021000 	.word	0x40021000
 8005600:	40021400 	.word	0x40021400
 8005604:	40021800 	.word	0x40021800
 8005608:	40021c00 	.word	0x40021c00
 800560c:	40013c00 	.word	0x40013c00

08005610 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	887b      	ldrh	r3, [r7, #2]
 8005622:	4013      	ands	r3, r2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005628:	2301      	movs	r3, #1
 800562a:	73fb      	strb	r3, [r7, #15]
 800562c:	e001      	b.n	8005632 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	807b      	strh	r3, [r7, #2]
 800564c:	4613      	mov	r3, r2
 800564e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005650:	787b      	ldrb	r3, [r7, #1]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005656:	887a      	ldrh	r2, [r7, #2]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800565c:	e003      	b.n	8005666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800565e:	887b      	ldrh	r3, [r7, #2]
 8005660:	041a      	lsls	r2, r3, #16
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	619a      	str	r2, [r3, #24]
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	460b      	mov	r3, r1
 800567c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	887b      	ldrh	r3, [r7, #2]
 8005684:	401a      	ands	r2, r3
 8005686:	887b      	ldrh	r3, [r7, #2]
 8005688:	429a      	cmp	r2, r3
 800568a:	d104      	bne.n	8005696 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800568c:	887b      	ldrh	r3, [r7, #2]
 800568e:	041a      	lsls	r2, r3, #16
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005694:	e002      	b.n	800569c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005696:	887a      	ldrh	r2, [r7, #2]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	619a      	str	r2, [r3, #24]
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80056b2:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056b4:	695a      	ldr	r2, [r3, #20]
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d006      	beq.n	80056cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056be:	4a05      	ldr	r2, [pc, #20]	; (80056d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056c4:	88fb      	ldrh	r3, [r7, #6]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe f858 	bl	800377c <HAL_GPIO_EXTI_Callback>
  }
}
 80056cc:	bf00      	nop
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40013c00 	.word	0x40013c00

080056d8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <HAL_PWR_PVD_IRQHandler+0x20>)
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80056e8:	f000 f808 	bl	80056fc <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80056ec:	4b02      	ldr	r3, [pc, #8]	; (80056f8 <HAL_PWR_PVD_IRQHandler+0x20>)
 80056ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80056f2:	615a      	str	r2, [r3, #20]
  }
}
 80056f4:	bf00      	nop
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40013c00 	.word	0x40013c00

080056fc <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005700:	bf00      	nop
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e22d      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d075      	beq.n	8005816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800572a:	4ba3      	ldr	r3, [pc, #652]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 030c 	and.w	r3, r3, #12
 8005732:	2b04      	cmp	r3, #4
 8005734:	d00c      	beq.n	8005750 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005736:	4ba0      	ldr	r3, [pc, #640]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800573e:	2b08      	cmp	r3, #8
 8005740:	d112      	bne.n	8005768 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005742:	4b9d      	ldr	r3, [pc, #628]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800574a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800574e:	d10b      	bne.n	8005768 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005750:	4b99      	ldr	r3, [pc, #612]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d05b      	beq.n	8005814 <HAL_RCC_OscConfig+0x108>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d157      	bne.n	8005814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e208      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005770:	d106      	bne.n	8005780 <HAL_RCC_OscConfig+0x74>
 8005772:	4b91      	ldr	r3, [pc, #580]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a90      	ldr	r2, [pc, #576]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e01d      	b.n	80057bc <HAL_RCC_OscConfig+0xb0>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005788:	d10c      	bne.n	80057a4 <HAL_RCC_OscConfig+0x98>
 800578a:	4b8b      	ldr	r3, [pc, #556]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a8a      	ldr	r2, [pc, #552]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	4b88      	ldr	r3, [pc, #544]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a87      	ldr	r2, [pc, #540]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 800579c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	e00b      	b.n	80057bc <HAL_RCC_OscConfig+0xb0>
 80057a4:	4b84      	ldr	r3, [pc, #528]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a83      	ldr	r2, [pc, #524]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 80057aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	4b81      	ldr	r3, [pc, #516]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a80      	ldr	r2, [pc, #512]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 80057b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d013      	beq.n	80057ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c4:	f7fe fe90 	bl	80044e8 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057cc:	f7fe fe8c 	bl	80044e8 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b64      	cmp	r3, #100	; 0x64
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e1cd      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057de:	4b76      	ldr	r3, [pc, #472]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0xc0>
 80057ea:	e014      	b.n	8005816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ec:	f7fe fe7c 	bl	80044e8 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057f4:	f7fe fe78 	bl	80044e8 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b64      	cmp	r3, #100	; 0x64
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e1b9      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005806:	4b6c      	ldr	r3, [pc, #432]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f0      	bne.n	80057f4 <HAL_RCC_OscConfig+0xe8>
 8005812:	e000      	b.n	8005816 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d063      	beq.n	80058ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005822:	4b65      	ldr	r3, [pc, #404]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 030c 	and.w	r3, r3, #12
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800582e:	4b62      	ldr	r3, [pc, #392]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005836:	2b08      	cmp	r3, #8
 8005838:	d11c      	bne.n	8005874 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800583a:	4b5f      	ldr	r3, [pc, #380]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d116      	bne.n	8005874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005846:	4b5c      	ldr	r3, [pc, #368]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <HAL_RCC_OscConfig+0x152>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d001      	beq.n	800585e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e18d      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585e:	4b56      	ldr	r3, [pc, #344]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	4952      	ldr	r1, [pc, #328]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 800586e:	4313      	orrs	r3, r2
 8005870:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005872:	e03a      	b.n	80058ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d020      	beq.n	80058be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800587c:	4b4f      	ldr	r3, [pc, #316]	; (80059bc <HAL_RCC_OscConfig+0x2b0>)
 800587e:	2201      	movs	r2, #1
 8005880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005882:	f7fe fe31 	bl	80044e8 <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800588a:	f7fe fe2d 	bl	80044e8 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e16e      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800589c:	4b46      	ldr	r3, [pc, #280]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f0      	beq.n	800588a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a8:	4b43      	ldr	r3, [pc, #268]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	4940      	ldr	r1, [pc, #256]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	600b      	str	r3, [r1, #0]
 80058bc:	e015      	b.n	80058ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058be:	4b3f      	ldr	r3, [pc, #252]	; (80059bc <HAL_RCC_OscConfig+0x2b0>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c4:	f7fe fe10 	bl	80044e8 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058cc:	f7fe fe0c 	bl	80044e8 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e14d      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058de:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1f0      	bne.n	80058cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d030      	beq.n	8005958 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d016      	beq.n	800592c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058fe:	4b30      	ldr	r3, [pc, #192]	; (80059c0 <HAL_RCC_OscConfig+0x2b4>)
 8005900:	2201      	movs	r2, #1
 8005902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005904:	f7fe fdf0 	bl	80044e8 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800590c:	f7fe fdec 	bl	80044e8 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e12d      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800591e:	4b26      	ldr	r3, [pc, #152]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0f0      	beq.n	800590c <HAL_RCC_OscConfig+0x200>
 800592a:	e015      	b.n	8005958 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800592c:	4b24      	ldr	r3, [pc, #144]	; (80059c0 <HAL_RCC_OscConfig+0x2b4>)
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005932:	f7fe fdd9 	bl	80044e8 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800593a:	f7fe fdd5 	bl	80044e8 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e116      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800594c:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 800594e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f0      	bne.n	800593a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 80a0 	beq.w	8005aa6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005966:	2300      	movs	r3, #0
 8005968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10f      	bne.n	8005996 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	4a0e      	ldr	r2, [pc, #56]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005984:	6413      	str	r3, [r2, #64]	; 0x40
 8005986:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <HAL_RCC_OscConfig+0x2ac>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005992:	2301      	movs	r3, #1
 8005994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <HAL_RCC_OscConfig+0x2b8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d121      	bne.n	80059e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059a2:	4b08      	ldr	r3, [pc, #32]	; (80059c4 <HAL_RCC_OscConfig+0x2b8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a07      	ldr	r2, [pc, #28]	; (80059c4 <HAL_RCC_OscConfig+0x2b8>)
 80059a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ae:	f7fe fd9b 	bl	80044e8 <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b4:	e011      	b.n	80059da <HAL_RCC_OscConfig+0x2ce>
 80059b6:	bf00      	nop
 80059b8:	40023800 	.word	0x40023800
 80059bc:	42470000 	.word	0x42470000
 80059c0:	42470e80 	.word	0x42470e80
 80059c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c8:	f7fe fd8e 	bl	80044e8 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e0cf      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059da:	4b6a      	ldr	r3, [pc, #424]	; (8005b84 <HAL_RCC_OscConfig+0x478>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d106      	bne.n	80059fc <HAL_RCC_OscConfig+0x2f0>
 80059ee:	4b66      	ldr	r3, [pc, #408]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 80059f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f2:	4a65      	ldr	r2, [pc, #404]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 80059f4:	f043 0301 	orr.w	r3, r3, #1
 80059f8:	6713      	str	r3, [r2, #112]	; 0x70
 80059fa:	e01c      	b.n	8005a36 <HAL_RCC_OscConfig+0x32a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b05      	cmp	r3, #5
 8005a02:	d10c      	bne.n	8005a1e <HAL_RCC_OscConfig+0x312>
 8005a04:	4b60      	ldr	r3, [pc, #384]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a08:	4a5f      	ldr	r2, [pc, #380]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005a0a:	f043 0304 	orr.w	r3, r3, #4
 8005a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a10:	4b5d      	ldr	r3, [pc, #372]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a14:	4a5c      	ldr	r2, [pc, #368]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005a16:	f043 0301 	orr.w	r3, r3, #1
 8005a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a1c:	e00b      	b.n	8005a36 <HAL_RCC_OscConfig+0x32a>
 8005a1e:	4b5a      	ldr	r3, [pc, #360]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a22:	4a59      	ldr	r2, [pc, #356]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005a24:	f023 0301 	bic.w	r3, r3, #1
 8005a28:	6713      	str	r3, [r2, #112]	; 0x70
 8005a2a:	4b57      	ldr	r3, [pc, #348]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2e:	4a56      	ldr	r2, [pc, #344]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005a30:	f023 0304 	bic.w	r3, r3, #4
 8005a34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d015      	beq.n	8005a6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3e:	f7fe fd53 	bl	80044e8 <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a44:	e00a      	b.n	8005a5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a46:	f7fe fd4f 	bl	80044e8 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e08e      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a5c:	4b4a      	ldr	r3, [pc, #296]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0ee      	beq.n	8005a46 <HAL_RCC_OscConfig+0x33a>
 8005a68:	e014      	b.n	8005a94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a6a:	f7fe fd3d 	bl	80044e8 <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a70:	e00a      	b.n	8005a88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a72:	f7fe fd39 	bl	80044e8 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e078      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a88:	4b3f      	ldr	r3, [pc, #252]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1ee      	bne.n	8005a72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d105      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a9a:	4b3b      	ldr	r3, [pc, #236]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	4a3a      	ldr	r2, [pc, #232]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d064      	beq.n	8005b78 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005aae:	4b36      	ldr	r3, [pc, #216]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d05c      	beq.n	8005b74 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d141      	bne.n	8005b46 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac2:	4b32      	ldr	r3, [pc, #200]	; (8005b8c <HAL_RCC_OscConfig+0x480>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac8:	f7fe fd0e 	bl	80044e8 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fe fd0a 	bl	80044e8 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e04b      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae2:	4b29      	ldr	r3, [pc, #164]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69da      	ldr	r2, [r3, #28]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	019b      	lsls	r3, r3, #6
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	085b      	lsrs	r3, r3, #1
 8005b06:	3b01      	subs	r3, #1
 8005b08:	041b      	lsls	r3, r3, #16
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	061b      	lsls	r3, r3, #24
 8005b12:	491d      	ldr	r1, [pc, #116]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b18:	4b1c      	ldr	r3, [pc, #112]	; (8005b8c <HAL_RCC_OscConfig+0x480>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1e:	f7fe fce3 	bl	80044e8 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b26:	f7fe fcdf 	bl	80044e8 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e020      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b38:	4b13      	ldr	r3, [pc, #76]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0f0      	beq.n	8005b26 <HAL_RCC_OscConfig+0x41a>
 8005b44:	e018      	b.n	8005b78 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b46:	4b11      	ldr	r3, [pc, #68]	; (8005b8c <HAL_RCC_OscConfig+0x480>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b4c:	f7fe fccc 	bl	80044e8 <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b54:	f7fe fcc8 	bl	80044e8 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e009      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b66:	4b08      	ldr	r3, [pc, #32]	; (8005b88 <HAL_RCC_OscConfig+0x47c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f0      	bne.n	8005b54 <HAL_RCC_OscConfig+0x448>
 8005b72:	e001      	b.n	8005b78 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	40007000 	.word	0x40007000
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	42470060 	.word	0x42470060

08005b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0ca      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ba4:	4b67      	ldr	r3, [pc, #412]	; (8005d44 <HAL_RCC_ClockConfig+0x1b4>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d90c      	bls.n	8005bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb2:	4b64      	ldr	r3, [pc, #400]	; (8005d44 <HAL_RCC_ClockConfig+0x1b4>)
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bba:	4b62      	ldr	r3, [pc, #392]	; (8005d44 <HAL_RCC_ClockConfig+0x1b4>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d001      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e0b6      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d020      	beq.n	8005c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005be4:	4b58      	ldr	r3, [pc, #352]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	4a57      	ldr	r2, [pc, #348]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bfc:	4b52      	ldr	r3, [pc, #328]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	4a51      	ldr	r2, [pc, #324]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c08:	4b4f      	ldr	r3, [pc, #316]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	494c      	ldr	r1, [pc, #304]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d044      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d107      	bne.n	8005c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2e:	4b46      	ldr	r3, [pc, #280]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d119      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e07d      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d003      	beq.n	8005c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d107      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4e:	4b3e      	ldr	r3, [pc, #248]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d109      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e06d      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c5e:	4b3a      	ldr	r3, [pc, #232]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e065      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c6e:	4b36      	ldr	r3, [pc, #216]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f023 0203 	bic.w	r2, r3, #3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	4933      	ldr	r1, [pc, #204]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c80:	f7fe fc32 	bl	80044e8 <HAL_GetTick>
 8005c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c86:	e00a      	b.n	8005c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c88:	f7fe fc2e 	bl	80044e8 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e04d      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9e:	4b2a      	ldr	r3, [pc, #168]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 020c 	and.w	r2, r3, #12
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d1eb      	bne.n	8005c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cb0:	4b24      	ldr	r3, [pc, #144]	; (8005d44 <HAL_RCC_ClockConfig+0x1b4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 030f 	and.w	r3, r3, #15
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d20c      	bcs.n	8005cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cbe:	4b21      	ldr	r3, [pc, #132]	; (8005d44 <HAL_RCC_ClockConfig+0x1b4>)
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc6:	4b1f      	ldr	r3, [pc, #124]	; (8005d44 <HAL_RCC_ClockConfig+0x1b4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d001      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e030      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d008      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ce4:	4b18      	ldr	r3, [pc, #96]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	4915      	ldr	r1, [pc, #84]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0308 	and.w	r3, r3, #8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d02:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	490d      	ldr	r1, [pc, #52]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d16:	f000 f81d 	bl	8005d54 <HAL_RCC_GetSysClockFreq>
 8005d1a:	4601      	mov	r1, r0
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <HAL_RCC_ClockConfig+0x1b8>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	4a09      	ldr	r2, [pc, #36]	; (8005d4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d28:	5cd3      	ldrb	r3, [r2, r3]
 8005d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8005d2e:	4a08      	ldr	r2, [pc, #32]	; (8005d50 <HAL_RCC_ClockConfig+0x1c0>)
 8005d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8005d32:	2000      	movs	r0, #0
 8005d34:	f7fe fb94 	bl	8004460 <HAL_InitTick>

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40023c00 	.word	0x40023c00
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	08025a2c 	.word	0x08025a2c
 8005d50:	2000005c 	.word	0x2000005c

08005d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	607b      	str	r3, [r7, #4]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	2300      	movs	r3, #0
 8005d64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d6a:	4b63      	ldr	r3, [pc, #396]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 030c 	and.w	r3, r3, #12
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d007      	beq.n	8005d86 <HAL_RCC_GetSysClockFreq+0x32>
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d008      	beq.n	8005d8c <HAL_RCC_GetSysClockFreq+0x38>
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f040 80b4 	bne.w	8005ee8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d80:	4b5e      	ldr	r3, [pc, #376]	; (8005efc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d82:	60bb      	str	r3, [r7, #8]
       break;
 8005d84:	e0b3      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d86:	4b5e      	ldr	r3, [pc, #376]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005d88:	60bb      	str	r3, [r7, #8]
      break;
 8005d8a:	e0b0      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d8c:	4b5a      	ldr	r3, [pc, #360]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d96:	4b58      	ldr	r3, [pc, #352]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d04a      	beq.n	8005e38 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005da2:	4b55      	ldr	r3, [pc, #340]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	099b      	lsrs	r3, r3, #6
 8005da8:	f04f 0400 	mov.w	r4, #0
 8005dac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	ea03 0501 	and.w	r5, r3, r1
 8005db8:	ea04 0602 	and.w	r6, r4, r2
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4632      	mov	r2, r6
 8005dc0:	f04f 0300 	mov.w	r3, #0
 8005dc4:	f04f 0400 	mov.w	r4, #0
 8005dc8:	0154      	lsls	r4, r2, #5
 8005dca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005dce:	014b      	lsls	r3, r1, #5
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4622      	mov	r2, r4
 8005dd4:	1b49      	subs	r1, r1, r5
 8005dd6:	eb62 0206 	sbc.w	r2, r2, r6
 8005dda:	f04f 0300 	mov.w	r3, #0
 8005dde:	f04f 0400 	mov.w	r4, #0
 8005de2:	0194      	lsls	r4, r2, #6
 8005de4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005de8:	018b      	lsls	r3, r1, #6
 8005dea:	1a5b      	subs	r3, r3, r1
 8005dec:	eb64 0402 	sbc.w	r4, r4, r2
 8005df0:	f04f 0100 	mov.w	r1, #0
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	00e2      	lsls	r2, r4, #3
 8005dfa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005dfe:	00d9      	lsls	r1, r3, #3
 8005e00:	460b      	mov	r3, r1
 8005e02:	4614      	mov	r4, r2
 8005e04:	195b      	adds	r3, r3, r5
 8005e06:	eb44 0406 	adc.w	r4, r4, r6
 8005e0a:	f04f 0100 	mov.w	r1, #0
 8005e0e:	f04f 0200 	mov.w	r2, #0
 8005e12:	0262      	lsls	r2, r4, #9
 8005e14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005e18:	0259      	lsls	r1, r3, #9
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	4618      	mov	r0, r3
 8005e20:	4621      	mov	r1, r4
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f04f 0400 	mov.w	r4, #0
 8005e28:	461a      	mov	r2, r3
 8005e2a:	4623      	mov	r3, r4
 8005e2c:	f7fa fdba 	bl	80009a4 <__aeabi_uldivmod>
 8005e30:	4603      	mov	r3, r0
 8005e32:	460c      	mov	r4, r1
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	e049      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e38:	4b2f      	ldr	r3, [pc, #188]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	099b      	lsrs	r3, r3, #6
 8005e3e:	f04f 0400 	mov.w	r4, #0
 8005e42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	ea03 0501 	and.w	r5, r3, r1
 8005e4e:	ea04 0602 	and.w	r6, r4, r2
 8005e52:	4629      	mov	r1, r5
 8005e54:	4632      	mov	r2, r6
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	f04f 0400 	mov.w	r4, #0
 8005e5e:	0154      	lsls	r4, r2, #5
 8005e60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e64:	014b      	lsls	r3, r1, #5
 8005e66:	4619      	mov	r1, r3
 8005e68:	4622      	mov	r2, r4
 8005e6a:	1b49      	subs	r1, r1, r5
 8005e6c:	eb62 0206 	sbc.w	r2, r2, r6
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	f04f 0400 	mov.w	r4, #0
 8005e78:	0194      	lsls	r4, r2, #6
 8005e7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005e7e:	018b      	lsls	r3, r1, #6
 8005e80:	1a5b      	subs	r3, r3, r1
 8005e82:	eb64 0402 	sbc.w	r4, r4, r2
 8005e86:	f04f 0100 	mov.w	r1, #0
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	00e2      	lsls	r2, r4, #3
 8005e90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005e94:	00d9      	lsls	r1, r3, #3
 8005e96:	460b      	mov	r3, r1
 8005e98:	4614      	mov	r4, r2
 8005e9a:	195b      	adds	r3, r3, r5
 8005e9c:	eb44 0406 	adc.w	r4, r4, r6
 8005ea0:	f04f 0100 	mov.w	r1, #0
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	02a2      	lsls	r2, r4, #10
 8005eaa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005eae:	0299      	lsls	r1, r3, #10
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4614      	mov	r4, r2
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f04f 0400 	mov.w	r4, #0
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	4623      	mov	r3, r4
 8005ec2:	f7fa fd6f 	bl	80009a4 <__aeabi_uldivmod>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	460c      	mov	r4, r1
 8005eca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	60bb      	str	r3, [r7, #8]
      break;
 8005ee6:	e002      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ee8:	4b04      	ldr	r3, [pc, #16]	; (8005efc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005eea:	60bb      	str	r3, [r7, #8]
      break;
 8005eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eee:	68bb      	ldr	r3, [r7, #8]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	00f42400 	.word	0x00f42400
 8005f00:	007a1200 	.word	0x007a1200

08005f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f08:	4b03      	ldr	r3, [pc, #12]	; (8005f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	2000005c 	.word	0x2000005c

08005f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f20:	f7ff fff0 	bl	8005f04 <HAL_RCC_GetHCLKFreq>
 8005f24:	4601      	mov	r1, r0
 8005f26:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	0a9b      	lsrs	r3, r3, #10
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	4a03      	ldr	r2, [pc, #12]	; (8005f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f32:	5cd3      	ldrb	r3, [r2, r3]
 8005f34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	08025a3c 	.word	0x08025a3c

08005f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f48:	f7ff ffdc 	bl	8005f04 <HAL_RCC_GetHCLKFreq>
 8005f4c:	4601      	mov	r1, r0
 8005f4e:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	0b5b      	lsrs	r3, r3, #13
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	4a03      	ldr	r2, [pc, #12]	; (8005f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f5a:	5cd3      	ldrb	r3, [r2, r3]
 8005f5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40023800 	.word	0x40023800
 8005f68:	08025a3c 	.word	0x08025a3c

08005f6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e056      	b.n	800602c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d106      	bne.n	8005f9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7fe f85f 	bl	800405c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	ea42 0103 	orr.w	r1, r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	0c1b      	lsrs	r3, r3, #16
 8005ffc:	f003 0104 	and.w	r1, r3, #4
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69da      	ldr	r2, [r3, #28]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800601a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <HAL_SPI_Transmit+0x22>
 8006052:	2302      	movs	r3, #2
 8006054:	e11e      	b.n	8006294 <HAL_SPI_Transmit+0x260>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800605e:	f7fe fa43 	bl	80044e8 <HAL_GetTick>
 8006062:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006064:	88fb      	ldrh	r3, [r7, #6]
 8006066:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	d002      	beq.n	800607a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006074:	2302      	movs	r3, #2
 8006076:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006078:	e103      	b.n	8006282 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <HAL_SPI_Transmit+0x52>
 8006080:	88fb      	ldrh	r3, [r7, #6]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d102      	bne.n	800608c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	77fb      	strb	r3, [r7, #31]
    goto error;
 800608a:	e0fa      	b.n	8006282 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2203      	movs	r2, #3
 8006090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	88fa      	ldrh	r2, [r7, #6]
 80060a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	88fa      	ldrh	r2, [r7, #6]
 80060aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d2:	d107      	bne.n	80060e4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ee:	2b40      	cmp	r3, #64	; 0x40
 80060f0:	d007      	beq.n	8006102 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006100:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800610a:	d14b      	bne.n	80061a4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_SPI_Transmit+0xe6>
 8006114:	8afb      	ldrh	r3, [r7, #22]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d13e      	bne.n	8006198 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	881a      	ldrh	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	1c9a      	adds	r2, r3, #2
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800613e:	e02b      	b.n	8006198 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b02      	cmp	r3, #2
 800614c:	d112      	bne.n	8006174 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	881a      	ldrh	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615e:	1c9a      	adds	r2, r3, #2
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	86da      	strh	r2, [r3, #54]	; 0x36
 8006172:	e011      	b.n	8006198 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006174:	f7fe f9b8 	bl	80044e8 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d803      	bhi.n	800618c <HAL_SPI_Transmit+0x158>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618a:	d102      	bne.n	8006192 <HAL_SPI_Transmit+0x15e>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d102      	bne.n	8006198 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006196:	e074      	b.n	8006282 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1ce      	bne.n	8006140 <HAL_SPI_Transmit+0x10c>
 80061a2:	e04c      	b.n	800623e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <HAL_SPI_Transmit+0x17e>
 80061ac:	8afb      	ldrh	r3, [r7, #22]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d140      	bne.n	8006234 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	330c      	adds	r3, #12
 80061bc:	7812      	ldrb	r2, [r2, #0]
 80061be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061d8:	e02c      	b.n	8006234 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d113      	bne.n	8006210 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	330c      	adds	r3, #12
 80061f2:	7812      	ldrb	r2, [r2, #0]
 80061f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	86da      	strh	r2, [r3, #54]	; 0x36
 800620e:	e011      	b.n	8006234 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006210:	f7fe f96a 	bl	80044e8 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	d803      	bhi.n	8006228 <HAL_SPI_Transmit+0x1f4>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006226:	d102      	bne.n	800622e <HAL_SPI_Transmit+0x1fa>
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d102      	bne.n	8006234 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006232:	e026      	b.n	8006282 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1cd      	bne.n	80061da <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 fa44 	bl	80066d0 <SPI_EndRxTxTransaction>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2220      	movs	r2, #32
 8006252:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	77fb      	strb	r3, [r7, #31]
 800627e:	e000      	b.n	8006282 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006280:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006292:	7ffb      	ldrb	r3, [r7, #31]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3720      	adds	r7, #32
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08c      	sub	sp, #48	; 0x30
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80062aa:	2301      	movs	r3, #1
 80062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d101      	bne.n	80062c2 <HAL_SPI_TransmitReceive+0x26>
 80062be:	2302      	movs	r3, #2
 80062c0:	e18a      	b.n	80065d8 <HAL_SPI_TransmitReceive+0x33c>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062ca:	f7fe f90d 	bl	80044e8 <HAL_GetTick>
 80062ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80062e0:	887b      	ldrh	r3, [r7, #2]
 80062e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d00f      	beq.n	800630c <HAL_SPI_TransmitReceive+0x70>
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062f2:	d107      	bne.n	8006304 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d103      	bne.n	8006304 <HAL_SPI_TransmitReceive+0x68>
 80062fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006300:	2b04      	cmp	r3, #4
 8006302:	d003      	beq.n	800630c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006304:	2302      	movs	r3, #2
 8006306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800630a:	e15b      	b.n	80065c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_SPI_TransmitReceive+0x82>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_SPI_TransmitReceive+0x82>
 8006318:	887b      	ldrh	r3, [r7, #2]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d103      	bne.n	8006326 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006324:	e14e      	b.n	80065c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b04      	cmp	r3, #4
 8006330:	d003      	beq.n	800633a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2205      	movs	r2, #5
 8006336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	887a      	ldrh	r2, [r7, #2]
 800634a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	887a      	ldrh	r2, [r7, #2]
 8006350:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	887a      	ldrh	r2, [r7, #2]
 800635c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	887a      	ldrh	r2, [r7, #2]
 8006362:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	d007      	beq.n	800638e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800638c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006396:	d178      	bne.n	800648a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_SPI_TransmitReceive+0x10a>
 80063a0:	8b7b      	ldrh	r3, [r7, #26]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d166      	bne.n	8006474 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	881a      	ldrh	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	1c9a      	adds	r2, r3, #2
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ca:	e053      	b.n	8006474 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d11b      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x176>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d016      	beq.n	8006412 <HAL_SPI_TransmitReceive+0x176>
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d113      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	881a      	ldrh	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	1c9a      	adds	r2, r3, #2
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b01      	cmp	r3, #1
 800641e:	d119      	bne.n	8006454 <HAL_SPI_TransmitReceive+0x1b8>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d014      	beq.n	8006454 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	b292      	uxth	r2, r2
 8006436:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	1c9a      	adds	r2, r3, #2
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006450:	2301      	movs	r3, #1
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006454:	f7fe f848 	bl	80044e8 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006460:	429a      	cmp	r2, r3
 8006462:	d807      	bhi.n	8006474 <HAL_SPI_TransmitReceive+0x1d8>
 8006464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646a:	d003      	beq.n	8006474 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006472:	e0a7      	b.n	80065c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1a6      	bne.n	80063cc <HAL_SPI_TransmitReceive+0x130>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006482:	b29b      	uxth	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1a1      	bne.n	80063cc <HAL_SPI_TransmitReceive+0x130>
 8006488:	e07c      	b.n	8006584 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <HAL_SPI_TransmitReceive+0x1fc>
 8006492:	8b7b      	ldrh	r3, [r7, #26]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d16b      	bne.n	8006570 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	330c      	adds	r3, #12
 80064a2:	7812      	ldrb	r2, [r2, #0]
 80064a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064be:	e057      	b.n	8006570 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d11c      	bne.n	8006508 <HAL_SPI_TransmitReceive+0x26c>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d017      	beq.n	8006508 <HAL_SPI_TransmitReceive+0x26c>
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d114      	bne.n	8006508 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	330c      	adds	r3, #12
 80064e8:	7812      	ldrb	r2, [r2, #0]
 80064ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b01      	cmp	r3, #1
 8006514:	d119      	bne.n	800654a <HAL_SPI_TransmitReceive+0x2ae>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800651a:	b29b      	uxth	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d014      	beq.n	800654a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800653c:	b29b      	uxth	r3, r3
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006546:	2301      	movs	r3, #1
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800654a:	f7fd ffcd 	bl	80044e8 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006556:	429a      	cmp	r2, r3
 8006558:	d803      	bhi.n	8006562 <HAL_SPI_TransmitReceive+0x2c6>
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d102      	bne.n	8006568 <HAL_SPI_TransmitReceive+0x2cc>
 8006562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800656e:	e029      	b.n	80065c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1a2      	bne.n	80064c0 <HAL_SPI_TransmitReceive+0x224>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d19d      	bne.n	80064c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006586:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 f8a1 	bl	80066d0 <SPI_EndRxTxTransaction>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d006      	beq.n	80065a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2220      	movs	r2, #32
 800659e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80065a0:	e010      	b.n	80065c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065aa:	2300      	movs	r3, #0
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	e000      	b.n	80065c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80065c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3730      	adds	r7, #48	; 0x30
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065ee:	b2db      	uxtb	r3, r3
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	4613      	mov	r3, r2
 800660a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800660c:	e04c      	b.n	80066a8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d048      	beq.n	80066a8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006616:	f7fd ff67 	bl	80044e8 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d902      	bls.n	800662c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d13d      	bne.n	80066a8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800663a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006644:	d111      	bne.n	800666a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800664e:	d004      	beq.n	800665a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006658:	d107      	bne.n	800666a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006672:	d10f      	bne.n	8006694 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e00f      	b.n	80066c8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689a      	ldr	r2, [r3, #8]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	4013      	ands	r3, r2
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	bf0c      	ite	eq
 80066b8:	2301      	moveq	r3, #1
 80066ba:	2300      	movne	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d1a3      	bne.n	800660e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066dc:	4b1b      	ldr	r3, [pc, #108]	; (800674c <SPI_EndRxTxTransaction+0x7c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1b      	ldr	r2, [pc, #108]	; (8006750 <SPI_EndRxTxTransaction+0x80>)
 80066e2:	fba2 2303 	umull	r2, r3, r2, r3
 80066e6:	0d5b      	lsrs	r3, r3, #21
 80066e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066ec:	fb02 f303 	mul.w	r3, r2, r3
 80066f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066fa:	d112      	bne.n	8006722 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2200      	movs	r2, #0
 8006704:	2180      	movs	r1, #128	; 0x80
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f7ff ff78 	bl	80065fc <SPI_WaitFlagStateUntilTimeout>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d016      	beq.n	8006740 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006716:	f043 0220 	orr.w	r2, r3, #32
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e00f      	b.n	8006742 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	3b01      	subs	r3, #1
 800672c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006738:	2b80      	cmp	r3, #128	; 0x80
 800673a:	d0f2      	beq.n	8006722 <SPI_EndRxTxTransaction+0x52>
 800673c:	e000      	b.n	8006740 <SPI_EndRxTxTransaction+0x70>
        break;
 800673e:	bf00      	nop
  }

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	2000005c 	.word	0x2000005c
 8006750:	165e9f81 	.word	0x165e9f81

08006754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e01d      	b.n	80067a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fd fcec 	bl	8004158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3304      	adds	r3, #4
 8006790:	4619      	mov	r1, r3
 8006792:	4610      	mov	r0, r2
 8006794:	f000 fa40 	bl	8006c18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0201 	orr.w	r2, r2, #1
 80067c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b06      	cmp	r3, #6
 80067d2:	d007      	beq.n	80067e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0201 	orr.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0201 	bic.w	r2, r2, #1
 8006808:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6a1a      	ldr	r2, [r3, #32]
 8006810:	f241 1311 	movw	r3, #4369	; 0x1111
 8006814:	4013      	ands	r3, r2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10f      	bne.n	800683a <HAL_TIM_Base_Stop_IT+0x48>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6a1a      	ldr	r2, [r3, #32]
 8006820:	f240 4344 	movw	r3, #1092	; 0x444
 8006824:	4013      	ands	r3, r2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d107      	bne.n	800683a <HAL_TIM_Base_Stop_IT+0x48>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0201 	bic.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b02      	cmp	r3, #2
 800685c:	d122      	bne.n	80068a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b02      	cmp	r3, #2
 800686a:	d11b      	bne.n	80068a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f06f 0202 	mvn.w	r2, #2
 8006874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	f003 0303 	and.w	r3, r3, #3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f9a5 	bl	8006bda <HAL_TIM_IC_CaptureCallback>
 8006890:	e005      	b.n	800689e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f997 	bl	8006bc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f9a8 	bl	8006bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d122      	bne.n	80068f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b04      	cmp	r3, #4
 80068be:	d11b      	bne.n	80068f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f06f 0204 	mvn.w	r2, #4
 80068c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2202      	movs	r2, #2
 80068ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f97b 	bl	8006bda <HAL_TIM_IC_CaptureCallback>
 80068e4:	e005      	b.n	80068f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f96d 	bl	8006bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f97e 	bl	8006bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f003 0308 	and.w	r3, r3, #8
 8006902:	2b08      	cmp	r3, #8
 8006904:	d122      	bne.n	800694c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b08      	cmp	r3, #8
 8006912:	d11b      	bne.n	800694c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f06f 0208 	mvn.w	r2, #8
 800691c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2204      	movs	r2, #4
 8006922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f951 	bl	8006bda <HAL_TIM_IC_CaptureCallback>
 8006938:	e005      	b.n	8006946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f943 	bl	8006bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f954 	bl	8006bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b10      	cmp	r3, #16
 8006958:	d122      	bne.n	80069a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b10      	cmp	r3, #16
 8006966:	d11b      	bne.n	80069a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f06f 0210 	mvn.w	r2, #16
 8006970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2208      	movs	r2, #8
 8006976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f927 	bl	8006bda <HAL_TIM_IC_CaptureCallback>
 800698c:	e005      	b.n	800699a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f919 	bl	8006bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f92a 	bl	8006bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d10e      	bne.n	80069cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d107      	bne.n	80069cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f06f 0201 	mvn.w	r2, #1
 80069c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fc ff4c 	bl	8003864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d6:	2b80      	cmp	r3, #128	; 0x80
 80069d8:	d10e      	bne.n	80069f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e4:	2b80      	cmp	r3, #128	; 0x80
 80069e6:	d107      	bne.n	80069f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fa99 	bl	8006f2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a02:	2b40      	cmp	r3, #64	; 0x40
 8006a04:	d10e      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a10:	2b40      	cmp	r3, #64	; 0x40
 8006a12:	d107      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f8ef 	bl	8006c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d10e      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b20      	cmp	r3, #32
 8006a3e:	d107      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0220 	mvn.w	r2, #32
 8006a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fa63 	bl	8006f16 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_TIM_ConfigClockSource+0x18>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e0a6      	b.n	8006bbe <HAL_TIM_ConfigClockSource+0x166>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b40      	cmp	r3, #64	; 0x40
 8006aa6:	d067      	beq.n	8006b78 <HAL_TIM_ConfigClockSource+0x120>
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	d80b      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x6c>
 8006aac:	2b10      	cmp	r3, #16
 8006aae:	d073      	beq.n	8006b98 <HAL_TIM_ConfigClockSource+0x140>
 8006ab0:	2b10      	cmp	r3, #16
 8006ab2:	d802      	bhi.n	8006aba <HAL_TIM_ConfigClockSource+0x62>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d06f      	beq.n	8006b98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006ab8:	e078      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d06c      	beq.n	8006b98 <HAL_TIM_ConfigClockSource+0x140>
 8006abe:	2b30      	cmp	r3, #48	; 0x30
 8006ac0:	d06a      	beq.n	8006b98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006ac2:	e073      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006ac4:	2b70      	cmp	r3, #112	; 0x70
 8006ac6:	d00d      	beq.n	8006ae4 <HAL_TIM_ConfigClockSource+0x8c>
 8006ac8:	2b70      	cmp	r3, #112	; 0x70
 8006aca:	d804      	bhi.n	8006ad6 <HAL_TIM_ConfigClockSource+0x7e>
 8006acc:	2b50      	cmp	r3, #80	; 0x50
 8006ace:	d033      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0xe0>
 8006ad0:	2b60      	cmp	r3, #96	; 0x60
 8006ad2:	d041      	beq.n	8006b58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006ad4:	e06a      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ada:	d066      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0x152>
 8006adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae0:	d017      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006ae2:	e063      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6818      	ldr	r0, [r3, #0]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	6899      	ldr	r1, [r3, #8]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f000 f9aa 	bl	8006e4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	609a      	str	r2, [r3, #8]
      break;
 8006b10:	e04c      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6899      	ldr	r1, [r3, #8]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f000 f993 	bl	8006e4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b34:	609a      	str	r2, [r3, #8]
      break;
 8006b36:	e039      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	6859      	ldr	r1, [r3, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	461a      	mov	r2, r3
 8006b46:	f000 f907 	bl	8006d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2150      	movs	r1, #80	; 0x50
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 f960 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006b56:	e029      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	6859      	ldr	r1, [r3, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	461a      	mov	r2, r3
 8006b66:	f000 f926 	bl	8006db6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2160      	movs	r1, #96	; 0x60
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 f950 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006b76:	e019      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	6859      	ldr	r1, [r3, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	461a      	mov	r2, r3
 8006b86:	f000 f8e7 	bl	8006d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2140      	movs	r1, #64	; 0x40
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 f940 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006b96:	e009      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	f000 f937 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006ba8:	e000      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
	...

08006c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a40      	ldr	r2, [pc, #256]	; (8006d2c <TIM_Base_SetConfig+0x114>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d013      	beq.n	8006c58 <TIM_Base_SetConfig+0x40>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c36:	d00f      	beq.n	8006c58 <TIM_Base_SetConfig+0x40>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a3d      	ldr	r2, [pc, #244]	; (8006d30 <TIM_Base_SetConfig+0x118>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d00b      	beq.n	8006c58 <TIM_Base_SetConfig+0x40>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a3c      	ldr	r2, [pc, #240]	; (8006d34 <TIM_Base_SetConfig+0x11c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d007      	beq.n	8006c58 <TIM_Base_SetConfig+0x40>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a3b      	ldr	r2, [pc, #236]	; (8006d38 <TIM_Base_SetConfig+0x120>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d003      	beq.n	8006c58 <TIM_Base_SetConfig+0x40>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a3a      	ldr	r2, [pc, #232]	; (8006d3c <TIM_Base_SetConfig+0x124>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d108      	bne.n	8006c6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a2f      	ldr	r2, [pc, #188]	; (8006d2c <TIM_Base_SetConfig+0x114>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d02b      	beq.n	8006cca <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c78:	d027      	beq.n	8006cca <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a2c      	ldr	r2, [pc, #176]	; (8006d30 <TIM_Base_SetConfig+0x118>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d023      	beq.n	8006cca <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a2b      	ldr	r2, [pc, #172]	; (8006d34 <TIM_Base_SetConfig+0x11c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d01f      	beq.n	8006cca <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a2a      	ldr	r2, [pc, #168]	; (8006d38 <TIM_Base_SetConfig+0x120>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d01b      	beq.n	8006cca <TIM_Base_SetConfig+0xb2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a29      	ldr	r2, [pc, #164]	; (8006d3c <TIM_Base_SetConfig+0x124>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d017      	beq.n	8006cca <TIM_Base_SetConfig+0xb2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a28      	ldr	r2, [pc, #160]	; (8006d40 <TIM_Base_SetConfig+0x128>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d013      	beq.n	8006cca <TIM_Base_SetConfig+0xb2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a27      	ldr	r2, [pc, #156]	; (8006d44 <TIM_Base_SetConfig+0x12c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00f      	beq.n	8006cca <TIM_Base_SetConfig+0xb2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a26      	ldr	r2, [pc, #152]	; (8006d48 <TIM_Base_SetConfig+0x130>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00b      	beq.n	8006cca <TIM_Base_SetConfig+0xb2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a25      	ldr	r2, [pc, #148]	; (8006d4c <TIM_Base_SetConfig+0x134>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d007      	beq.n	8006cca <TIM_Base_SetConfig+0xb2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a24      	ldr	r2, [pc, #144]	; (8006d50 <TIM_Base_SetConfig+0x138>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d003      	beq.n	8006cca <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a23      	ldr	r2, [pc, #140]	; (8006d54 <TIM_Base_SetConfig+0x13c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d108      	bne.n	8006cdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a0a      	ldr	r2, [pc, #40]	; (8006d2c <TIM_Base_SetConfig+0x114>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d003      	beq.n	8006d10 <TIM_Base_SetConfig+0xf8>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a0c      	ldr	r2, [pc, #48]	; (8006d3c <TIM_Base_SetConfig+0x124>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d103      	bne.n	8006d18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	615a      	str	r2, [r3, #20]
}
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40010000 	.word	0x40010000
 8006d30:	40000400 	.word	0x40000400
 8006d34:	40000800 	.word	0x40000800
 8006d38:	40000c00 	.word	0x40000c00
 8006d3c:	40010400 	.word	0x40010400
 8006d40:	40014000 	.word	0x40014000
 8006d44:	40014400 	.word	0x40014400
 8006d48:	40014800 	.word	0x40014800
 8006d4c:	40001800 	.word	0x40001800
 8006d50:	40001c00 	.word	0x40001c00
 8006d54:	40002000 	.word	0x40002000

08006d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f023 0201 	bic.w	r2, r3, #1
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f023 030a 	bic.w	r3, r3, #10
 8006d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	621a      	str	r2, [r3, #32]
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b087      	sub	sp, #28
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	f023 0210 	bic.w	r2, r3, #16
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	031b      	lsls	r3, r3, #12
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006df2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b085      	sub	sp, #20
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f043 0307 	orr.w	r3, r3, #7
 8006e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	609a      	str	r2, [r3, #8]
}
 8006e40:	bf00      	nop
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	021a      	lsls	r2, r3, #8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	609a      	str	r2, [r3, #8]
}
 8006e80:	bf00      	nop
 8006e82:	371c      	adds	r7, #28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e032      	b.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006edc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e03f      	b.n	8006fd0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d106      	bne.n	8006f6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7fd f935 	bl	80041d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2224      	movs	r2, #36	; 0x24
 8006f6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68da      	ldr	r2, [r3, #12]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fa5a 	bl	800743c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	691a      	ldr	r2, [r3, #16]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	695a      	ldr	r2, [r3, #20]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fa6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fb6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	f003 030f 	and.w	r3, r3, #15
 8007006:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10d      	bne.n	800702a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	f003 0320 	and.w	r3, r3, #32
 8007014:	2b00      	cmp	r3, #0
 8007016:	d008      	beq.n	800702a <HAL_UART_IRQHandler+0x52>
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f988 	bl	8007338 <UART_Receive_IT>
      return;
 8007028:	e0cc      	b.n	80071c4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 80ab 	beq.w	8007188 <HAL_UART_IRQHandler+0x1b0>
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d105      	bne.n	8007048 <HAL_UART_IRQHandler+0x70>
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 80a0 	beq.w	8007188 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <HAL_UART_IRQHandler+0x90>
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007060:	f043 0201 	orr.w	r2, r3, #1
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <HAL_UART_IRQHandler+0xb0>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007080:	f043 0202 	orr.w	r2, r3, #2
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <HAL_UART_IRQHandler+0xd0>
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a0:	f043 0204 	orr.w	r2, r3, #4
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f003 0308 	and.w	r3, r3, #8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <HAL_UART_IRQHandler+0xf0>
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c0:	f043 0208 	orr.w	r2, r3, #8
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d078      	beq.n	80071c2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f003 0320 	and.w	r3, r3, #32
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d007      	beq.n	80070ea <HAL_UART_IRQHandler+0x112>
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f927 	bl	8007338 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f4:	2b40      	cmp	r3, #64	; 0x40
 80070f6:	bf0c      	ite	eq
 80070f8:	2301      	moveq	r3, #1
 80070fa:	2300      	movne	r3, #0
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007104:	f003 0308 	and.w	r3, r3, #8
 8007108:	2b00      	cmp	r3, #0
 800710a:	d102      	bne.n	8007112 <HAL_UART_IRQHandler+0x13a>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d031      	beq.n	8007176 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f870 	bl	80071f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007122:	2b40      	cmp	r3, #64	; 0x40
 8007124:	d123      	bne.n	800716e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	695a      	ldr	r2, [r3, #20]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007134:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713a:	2b00      	cmp	r3, #0
 800713c:	d013      	beq.n	8007166 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007142:	4a22      	ldr	r2, [pc, #136]	; (80071cc <HAL_UART_IRQHandler+0x1f4>)
 8007144:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe f8a3 	bl	8005296 <HAL_DMA_Abort_IT>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d016      	beq.n	8007184 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007160:	4610      	mov	r0, r2
 8007162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007164:	e00e      	b.n	8007184 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f83c 	bl	80071e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800716c:	e00a      	b.n	8007184 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f838 	bl	80071e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007174:	e006      	b.n	8007184 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f834 	bl	80071e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007182:	e01e      	b.n	80071c2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007184:	bf00      	nop
    return;
 8007186:	e01c      	b.n	80071c2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718e:	2b00      	cmp	r3, #0
 8007190:	d008      	beq.n	80071a4 <HAL_UART_IRQHandler+0x1cc>
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f85d 	bl	800725c <UART_Transmit_IT>
    return;
 80071a2:	e00f      	b.n	80071c4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <HAL_UART_IRQHandler+0x1ec>
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f8a5 	bl	8007308 <UART_EndTransmit_IT>
    return;
 80071be:	bf00      	nop
 80071c0:	e000      	b.n	80071c4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80071c2:	bf00      	nop
  }
}
 80071c4:	3720      	adds	r7, #32
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	08007235 	.word	0x08007235

080071d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68da      	ldr	r2, [r3, #12]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800720e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695a      	ldr	r2, [r3, #20]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0201 	bic.w	r2, r2, #1
 800721e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007240:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f7ff ffc8 	bl	80071e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b21      	cmp	r3, #33	; 0x21
 800726e:	d144      	bne.n	80072fa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007278:	d11a      	bne.n	80072b0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800728e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d105      	bne.n	80072a4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	1c9a      	adds	r2, r3, #2
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]
 80072a2:	e00e      	b.n	80072c2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	621a      	str	r2, [r3, #32]
 80072ae:	e008      	b.n	80072c2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	1c59      	adds	r1, r3, #1
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6211      	str	r1, [r2, #32]
 80072ba:	781a      	ldrb	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	4619      	mov	r1, r3
 80072d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10f      	bne.n	80072f6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68da      	ldr	r2, [r3, #12]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	e000      	b.n	80072fc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80072fa:	2302      	movs	r3, #2
  }
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800731e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2220      	movs	r2, #32
 8007324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff ff51 	bl	80071d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b22      	cmp	r3, #34	; 0x22
 800734a:	d171      	bne.n	8007430 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007354:	d123      	bne.n	800739e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10e      	bne.n	8007382 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	b29b      	uxth	r3, r3
 800736c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007370:	b29a      	uxth	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737a:	1c9a      	adds	r2, r3, #2
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	629a      	str	r2, [r3, #40]	; 0x28
 8007380:	e029      	b.n	80073d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	b29b      	uxth	r3, r3
 800738a:	b2db      	uxtb	r3, r3
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	629a      	str	r2, [r3, #40]	; 0x28
 800739c:	e01b      	b.n	80073d6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10a      	bne.n	80073bc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6858      	ldr	r0, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b0:	1c59      	adds	r1, r3, #1
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6291      	str	r1, [r2, #40]	; 0x28
 80073b6:	b2c2      	uxtb	r2, r0
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	e00c      	b.n	80073d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c8:	1c58      	adds	r0, r3, #1
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	6288      	str	r0, [r1, #40]	; 0x28
 80073ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073da:	b29b      	uxth	r3, r3
 80073dc:	3b01      	subs	r3, #1
 80073de:	b29b      	uxth	r3, r3
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	4619      	mov	r1, r3
 80073e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d120      	bne.n	800742c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 0220 	bic.w	r2, r2, #32
 80073f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68da      	ldr	r2, [r3, #12]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007408:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695a      	ldr	r2, [r3, #20]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0201 	bic.w	r2, r2, #1
 8007418:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2220      	movs	r2, #32
 800741e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fc fa5a 	bl	80038dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	e002      	b.n	8007432 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	e000      	b.n	8007432 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007430:	2302      	movs	r3, #2
  }
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800743c:	b5b0      	push	{r4, r5, r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800747c:	f023 030c 	bic.w	r3, r3, #12
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6812      	ldr	r2, [r2, #0]
 8007484:	68f9      	ldr	r1, [r7, #12]
 8007486:	430b      	orrs	r3, r1
 8007488:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	699a      	ldr	r2, [r3, #24]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074a8:	f040 80e4 	bne.w	8007674 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4aab      	ldr	r2, [pc, #684]	; (8007760 <UART_SetConfig+0x324>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d004      	beq.n	80074c0 <UART_SetConfig+0x84>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4aaa      	ldr	r2, [pc, #680]	; (8007764 <UART_SetConfig+0x328>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d16c      	bne.n	800759a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80074c0:	f7fe fd40 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 80074c4:	4602      	mov	r2, r0
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009a      	lsls	r2, r3, #2
 80074ce:	441a      	add	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074da:	4aa3      	ldr	r2, [pc, #652]	; (8007768 <UART_SetConfig+0x32c>)
 80074dc:	fba2 2303 	umull	r2, r3, r2, r3
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	011c      	lsls	r4, r3, #4
 80074e4:	f7fe fd2e 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 80074e8:	4602      	mov	r2, r0
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	009a      	lsls	r2, r3, #2
 80074f2:	441a      	add	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	005b      	lsls	r3, r3, #1
 80074fa:	fbb2 f5f3 	udiv	r5, r2, r3
 80074fe:	f7fe fd21 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 8007502:	4602      	mov	r2, r0
 8007504:	4613      	mov	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	009a      	lsls	r2, r3, #2
 800750c:	441a      	add	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	fbb2 f3f3 	udiv	r3, r2, r3
 8007518:	4a93      	ldr	r2, [pc, #588]	; (8007768 <UART_SetConfig+0x32c>)
 800751a:	fba2 2303 	umull	r2, r3, r2, r3
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	2264      	movs	r2, #100	; 0x64
 8007522:	fb02 f303 	mul.w	r3, r2, r3
 8007526:	1aeb      	subs	r3, r5, r3
 8007528:	00db      	lsls	r3, r3, #3
 800752a:	3332      	adds	r3, #50	; 0x32
 800752c:	4a8e      	ldr	r2, [pc, #568]	; (8007768 <UART_SetConfig+0x32c>)
 800752e:	fba2 2303 	umull	r2, r3, r2, r3
 8007532:	095b      	lsrs	r3, r3, #5
 8007534:	005b      	lsls	r3, r3, #1
 8007536:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800753a:	441c      	add	r4, r3
 800753c:	f7fe fd02 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 8007540:	4602      	mov	r2, r0
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	009a      	lsls	r2, r3, #2
 800754a:	441a      	add	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	fbb2 f5f3 	udiv	r5, r2, r3
 8007556:	f7fe fcf5 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 800755a:	4602      	mov	r2, r0
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009a      	lsls	r2, r3, #2
 8007564:	441a      	add	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007570:	4a7d      	ldr	r2, [pc, #500]	; (8007768 <UART_SetConfig+0x32c>)
 8007572:	fba2 2303 	umull	r2, r3, r2, r3
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	2264      	movs	r2, #100	; 0x64
 800757a:	fb02 f303 	mul.w	r3, r2, r3
 800757e:	1aeb      	subs	r3, r5, r3
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	3332      	adds	r3, #50	; 0x32
 8007584:	4a78      	ldr	r2, [pc, #480]	; (8007768 <UART_SetConfig+0x32c>)
 8007586:	fba2 2303 	umull	r2, r3, r2, r3
 800758a:	095b      	lsrs	r3, r3, #5
 800758c:	f003 0207 	and.w	r2, r3, #7
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4422      	add	r2, r4
 8007596:	609a      	str	r2, [r3, #8]
 8007598:	e154      	b.n	8007844 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800759a:	f7fe fcbf 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 800759e:	4602      	mov	r2, r0
 80075a0:	4613      	mov	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	009a      	lsls	r2, r3, #2
 80075a8:	441a      	add	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b4:	4a6c      	ldr	r2, [pc, #432]	; (8007768 <UART_SetConfig+0x32c>)
 80075b6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ba:	095b      	lsrs	r3, r3, #5
 80075bc:	011c      	lsls	r4, r3, #4
 80075be:	f7fe fcad 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 80075c2:	4602      	mov	r2, r0
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	009a      	lsls	r2, r3, #2
 80075cc:	441a      	add	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	fbb2 f5f3 	udiv	r5, r2, r3
 80075d8:	f7fe fca0 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 80075dc:	4602      	mov	r2, r0
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	009a      	lsls	r2, r3, #2
 80075e6:	441a      	add	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	005b      	lsls	r3, r3, #1
 80075ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f2:	4a5d      	ldr	r2, [pc, #372]	; (8007768 <UART_SetConfig+0x32c>)
 80075f4:	fba2 2303 	umull	r2, r3, r2, r3
 80075f8:	095b      	lsrs	r3, r3, #5
 80075fa:	2264      	movs	r2, #100	; 0x64
 80075fc:	fb02 f303 	mul.w	r3, r2, r3
 8007600:	1aeb      	subs	r3, r5, r3
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	3332      	adds	r3, #50	; 0x32
 8007606:	4a58      	ldr	r2, [pc, #352]	; (8007768 <UART_SetConfig+0x32c>)
 8007608:	fba2 2303 	umull	r2, r3, r2, r3
 800760c:	095b      	lsrs	r3, r3, #5
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007614:	441c      	add	r4, r3
 8007616:	f7fe fc81 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 800761a:	4602      	mov	r2, r0
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	009a      	lsls	r2, r3, #2
 8007624:	441a      	add	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	005b      	lsls	r3, r3, #1
 800762c:	fbb2 f5f3 	udiv	r5, r2, r3
 8007630:	f7fe fc74 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 8007634:	4602      	mov	r2, r0
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	009a      	lsls	r2, r3, #2
 800763e:	441a      	add	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	fbb2 f3f3 	udiv	r3, r2, r3
 800764a:	4a47      	ldr	r2, [pc, #284]	; (8007768 <UART_SetConfig+0x32c>)
 800764c:	fba2 2303 	umull	r2, r3, r2, r3
 8007650:	095b      	lsrs	r3, r3, #5
 8007652:	2264      	movs	r2, #100	; 0x64
 8007654:	fb02 f303 	mul.w	r3, r2, r3
 8007658:	1aeb      	subs	r3, r5, r3
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	3332      	adds	r3, #50	; 0x32
 800765e:	4a42      	ldr	r2, [pc, #264]	; (8007768 <UART_SetConfig+0x32c>)
 8007660:	fba2 2303 	umull	r2, r3, r2, r3
 8007664:	095b      	lsrs	r3, r3, #5
 8007666:	f003 0207 	and.w	r2, r3, #7
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4422      	add	r2, r4
 8007670:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8007672:	e0e7      	b.n	8007844 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a39      	ldr	r2, [pc, #228]	; (8007760 <UART_SetConfig+0x324>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d004      	beq.n	8007688 <UART_SetConfig+0x24c>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a38      	ldr	r2, [pc, #224]	; (8007764 <UART_SetConfig+0x328>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d171      	bne.n	800776c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007688:	f7fe fc5c 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 800768c:	4602      	mov	r2, r0
 800768e:	4613      	mov	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	009a      	lsls	r2, r3, #2
 8007696:	441a      	add	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a2:	4a31      	ldr	r2, [pc, #196]	; (8007768 <UART_SetConfig+0x32c>)
 80076a4:	fba2 2303 	umull	r2, r3, r2, r3
 80076a8:	095b      	lsrs	r3, r3, #5
 80076aa:	011c      	lsls	r4, r3, #4
 80076ac:	f7fe fc4a 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 80076b0:	4602      	mov	r2, r0
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	009a      	lsls	r2, r3, #2
 80076ba:	441a      	add	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	fbb2 f5f3 	udiv	r5, r2, r3
 80076c6:	f7fe fc3d 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 80076ca:	4602      	mov	r2, r0
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	009a      	lsls	r2, r3, #2
 80076d4:	441a      	add	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e0:	4a21      	ldr	r2, [pc, #132]	; (8007768 <UART_SetConfig+0x32c>)
 80076e2:	fba2 2303 	umull	r2, r3, r2, r3
 80076e6:	095b      	lsrs	r3, r3, #5
 80076e8:	2264      	movs	r2, #100	; 0x64
 80076ea:	fb02 f303 	mul.w	r3, r2, r3
 80076ee:	1aeb      	subs	r3, r5, r3
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	3332      	adds	r3, #50	; 0x32
 80076f4:	4a1c      	ldr	r2, [pc, #112]	; (8007768 <UART_SetConfig+0x32c>)
 80076f6:	fba2 2303 	umull	r2, r3, r2, r3
 80076fa:	095b      	lsrs	r3, r3, #5
 80076fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007700:	441c      	add	r4, r3
 8007702:	f7fe fc1f 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 8007706:	4602      	mov	r2, r0
 8007708:	4613      	mov	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	009a      	lsls	r2, r3, #2
 8007710:	441a      	add	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	fbb2 f5f3 	udiv	r5, r2, r3
 800771c:	f7fe fc12 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 8007720:	4602      	mov	r2, r0
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	009a      	lsls	r2, r3, #2
 800772a:	441a      	add	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	fbb2 f3f3 	udiv	r3, r2, r3
 8007736:	4a0c      	ldr	r2, [pc, #48]	; (8007768 <UART_SetConfig+0x32c>)
 8007738:	fba2 2303 	umull	r2, r3, r2, r3
 800773c:	095b      	lsrs	r3, r3, #5
 800773e:	2264      	movs	r2, #100	; 0x64
 8007740:	fb02 f303 	mul.w	r3, r2, r3
 8007744:	1aeb      	subs	r3, r5, r3
 8007746:	011b      	lsls	r3, r3, #4
 8007748:	3332      	adds	r3, #50	; 0x32
 800774a:	4a07      	ldr	r2, [pc, #28]	; (8007768 <UART_SetConfig+0x32c>)
 800774c:	fba2 2303 	umull	r2, r3, r2, r3
 8007750:	095b      	lsrs	r3, r3, #5
 8007752:	f003 020f 	and.w	r2, r3, #15
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4422      	add	r2, r4
 800775c:	609a      	str	r2, [r3, #8]
 800775e:	e071      	b.n	8007844 <UART_SetConfig+0x408>
 8007760:	40011000 	.word	0x40011000
 8007764:	40011400 	.word	0x40011400
 8007768:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800776c:	f7fe fbd6 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 8007770:	4602      	mov	r2, r0
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009a      	lsls	r2, r3, #2
 800777a:	441a      	add	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	fbb2 f3f3 	udiv	r3, r2, r3
 8007786:	4a31      	ldr	r2, [pc, #196]	; (800784c <UART_SetConfig+0x410>)
 8007788:	fba2 2303 	umull	r2, r3, r2, r3
 800778c:	095b      	lsrs	r3, r3, #5
 800778e:	011c      	lsls	r4, r3, #4
 8007790:	f7fe fbc4 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 8007794:	4602      	mov	r2, r0
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	009a      	lsls	r2, r3, #2
 800779e:	441a      	add	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	fbb2 f5f3 	udiv	r5, r2, r3
 80077aa:	f7fe fbb7 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 80077ae:	4602      	mov	r2, r0
 80077b0:	4613      	mov	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	009a      	lsls	r2, r3, #2
 80077b8:	441a      	add	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c4:	4a21      	ldr	r2, [pc, #132]	; (800784c <UART_SetConfig+0x410>)
 80077c6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ca:	095b      	lsrs	r3, r3, #5
 80077cc:	2264      	movs	r2, #100	; 0x64
 80077ce:	fb02 f303 	mul.w	r3, r2, r3
 80077d2:	1aeb      	subs	r3, r5, r3
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	3332      	adds	r3, #50	; 0x32
 80077d8:	4a1c      	ldr	r2, [pc, #112]	; (800784c <UART_SetConfig+0x410>)
 80077da:	fba2 2303 	umull	r2, r3, r2, r3
 80077de:	095b      	lsrs	r3, r3, #5
 80077e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077e4:	441c      	add	r4, r3
 80077e6:	f7fe fb99 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 80077ea:	4602      	mov	r2, r0
 80077ec:	4613      	mov	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	009a      	lsls	r2, r3, #2
 80077f4:	441a      	add	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	fbb2 f5f3 	udiv	r5, r2, r3
 8007800:	f7fe fb8c 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 8007804:	4602      	mov	r2, r0
 8007806:	4613      	mov	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	009a      	lsls	r2, r3, #2
 800780e:	441a      	add	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	fbb2 f3f3 	udiv	r3, r2, r3
 800781a:	4a0c      	ldr	r2, [pc, #48]	; (800784c <UART_SetConfig+0x410>)
 800781c:	fba2 2303 	umull	r2, r3, r2, r3
 8007820:	095b      	lsrs	r3, r3, #5
 8007822:	2264      	movs	r2, #100	; 0x64
 8007824:	fb02 f303 	mul.w	r3, r2, r3
 8007828:	1aeb      	subs	r3, r5, r3
 800782a:	011b      	lsls	r3, r3, #4
 800782c:	3332      	adds	r3, #50	; 0x32
 800782e:	4a07      	ldr	r2, [pc, #28]	; (800784c <UART_SetConfig+0x410>)
 8007830:	fba2 2303 	umull	r2, r3, r2, r3
 8007834:	095b      	lsrs	r3, r3, #5
 8007836:	f003 020f 	and.w	r2, r3, #15
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4422      	add	r2, r4
 8007840:	609a      	str	r2, [r3, #8]
}
 8007842:	e7ff      	b.n	8007844 <UART_SetConfig+0x408>
 8007844:	bf00      	nop
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bdb0      	pop	{r4, r5, r7, pc}
 800784c:	51eb851f 	.word	0x51eb851f

08007850 <__libc_init_array>:
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	4e0d      	ldr	r6, [pc, #52]	; (8007888 <__libc_init_array+0x38>)
 8007854:	4c0d      	ldr	r4, [pc, #52]	; (800788c <__libc_init_array+0x3c>)
 8007856:	1ba4      	subs	r4, r4, r6
 8007858:	10a4      	asrs	r4, r4, #2
 800785a:	2500      	movs	r5, #0
 800785c:	42a5      	cmp	r5, r4
 800785e:	d109      	bne.n	8007874 <__libc_init_array+0x24>
 8007860:	4e0b      	ldr	r6, [pc, #44]	; (8007890 <__libc_init_array+0x40>)
 8007862:	4c0c      	ldr	r4, [pc, #48]	; (8007894 <__libc_init_array+0x44>)
 8007864:	f000 f820 	bl	80078a8 <_init>
 8007868:	1ba4      	subs	r4, r4, r6
 800786a:	10a4      	asrs	r4, r4, #2
 800786c:	2500      	movs	r5, #0
 800786e:	42a5      	cmp	r5, r4
 8007870:	d105      	bne.n	800787e <__libc_init_array+0x2e>
 8007872:	bd70      	pop	{r4, r5, r6, pc}
 8007874:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007878:	4798      	blx	r3
 800787a:	3501      	adds	r5, #1
 800787c:	e7ee      	b.n	800785c <__libc_init_array+0xc>
 800787e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007882:	4798      	blx	r3
 8007884:	3501      	adds	r5, #1
 8007886:	e7f2      	b.n	800786e <__libc_init_array+0x1e>
 8007888:	08025a4c 	.word	0x08025a4c
 800788c:	08025a4c 	.word	0x08025a4c
 8007890:	08025a4c 	.word	0x08025a4c
 8007894:	08025a50 	.word	0x08025a50

08007898 <memset>:
 8007898:	4402      	add	r2, r0
 800789a:	4603      	mov	r3, r0
 800789c:	4293      	cmp	r3, r2
 800789e:	d100      	bne.n	80078a2 <memset+0xa>
 80078a0:	4770      	bx	lr
 80078a2:	f803 1b01 	strb.w	r1, [r3], #1
 80078a6:	e7f9      	b.n	800789c <memset+0x4>

080078a8 <_init>:
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078aa:	bf00      	nop
 80078ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ae:	bc08      	pop	{r3}
 80078b0:	469e      	mov	lr, r3
 80078b2:	4770      	bx	lr

080078b4 <_fini>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	bf00      	nop
 80078b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ba:	bc08      	pop	{r3}
 80078bc:	469e      	mov	lr, r3
 80078be:	4770      	bx	lr
