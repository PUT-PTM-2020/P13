
MP3_PLAYER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007de0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007f68  08007f68  00017f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008008  08008008  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008010  08008010  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008010  08008010  00018010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008014  08008014  00018014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004658  2000007c  08008094  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046d4  08008094  000246d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014248  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cb2  00000000  00000000  000342f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001470  00000000  00000000  00036fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001308  00000000  00000000  00038418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002423c  00000000  00000000  00039720  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f678  00000000  00000000  0005d95c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6ad3  00000000  00000000  0006cfd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143aa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ba0  00000000  00000000  00143b24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f50 	.word	0x08007f50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08007f50 	.word	0x08007f50

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <DESELECT>:

static
inline void DESELECT(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0

}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <xmit_spi>:

extern SPI_HandleTypeDef hspi3;

static
void xmit_spi(BYTE Data)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 80004fe:	bf00      	nop
 8000500:	4808      	ldr	r0, [pc, #32]	; (8000524 <xmit_spi+0x30>)
 8000502:	f005 ff4b 	bl	800639c <HAL_SPI_GetState>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d1f9      	bne.n	8000500 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi3, &Data, 1, 5000);
 800050c:	1df9      	adds	r1, r7, #7
 800050e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000512:	2201      	movs	r2, #1
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <xmit_spi+0x30>)
 8000516:	f005 fc6b 	bl	8005df0 <HAL_SPI_Transmit>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200004a4 	.word	0x200004a4

08000528 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 800052e:	23ff      	movs	r3, #255	; 0xff
 8000530:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8000536:	bf00      	nop
 8000538:	4809      	ldr	r0, [pc, #36]	; (8000560 <rcvr_spi+0x38>)
 800053a:	f005 ff2f 	bl	800639c <HAL_SPI_GetState>
 800053e:	4603      	mov	r3, r0
 8000540:	2b01      	cmp	r3, #1
 8000542:	d1f9      	bne.n	8000538 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi3, &Dummy, &Data, 1, 5000);
 8000544:	1dba      	adds	r2, r7, #6
 8000546:	1df9      	adds	r1, r7, #7
 8000548:	f241 3388 	movw	r3, #5000	; 0x1388
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2301      	movs	r3, #1
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <rcvr_spi+0x38>)
 8000552:	f005 fd81 	bl	8006058 <HAL_SPI_TransmitReceive>

	return Data;
 8000556:	79bb      	ldrb	r3, [r7, #6]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200004a4 	.word	0x200004a4

08000564 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 800056c:	f7ff ffdc 	bl	8000528 <rcvr_spi>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	701a      	strb	r2, [r3, #0]
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <wait_ready+0x34>)
 8000588:	2232      	movs	r2, #50	; 0x32
 800058a:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 800058c:	f7ff ffcc 	bl	8000528 <rcvr_spi>
	do
		res = rcvr_spi();
 8000590:	f7ff ffca 	bl	8000528 <rcvr_spi>
 8000594:	4603      	mov	r3, r0
 8000596:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2bff      	cmp	r3, #255	; 0xff
 800059c:	d004      	beq.n	80005a8 <wait_ready+0x28>
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <wait_ready+0x34>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1f3      	bne.n	8000590 <wait_ready+0x10>

	return res;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000099 	.word	0x20000099

080005b8 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 80005be:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005c2:	60bb      	str	r3, [r7, #8]

	DESELECT();
 80005c4:	f7ff ff8f 	bl	80004e6 <DESELECT>

	for (i = 0; i < 10; i++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	e005      	b.n	80005da <power_on+0x22>
		xmit_spi(0xFF);
 80005ce:	20ff      	movs	r0, #255	; 0xff
 80005d0:	f7ff ff90 	bl	80004f4 <xmit_spi>
	for (i = 0; i < 10; i++)
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	3301      	adds	r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	2b09      	cmp	r3, #9
 80005de:	d9f6      	bls.n	80005ce <power_on+0x16>

	SELECT();
 80005e0:	f7ff ff7a 	bl	80004d8 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 80005e4:	2340      	movs	r3, #64	; 0x40
 80005e6:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 80005f8:	2395      	movs	r3, #149	; 0x95
 80005fa:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e00b      	b.n	800061a <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	f107 0210 	add.w	r2, r7, #16
 8000608:	4413      	add	r3, r2
 800060a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff70 	bl	80004f4 <xmit_spi>
	for (i = 0; i < 6; i++)
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	3301      	adds	r3, #1
 8000618:	73fb      	strb	r3, [r7, #15]
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	2b05      	cmp	r3, #5
 800061e:	d9f0      	bls.n	8000602 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000620:	e002      	b.n	8000628 <power_on+0x70>
		Count--;
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	3b01      	subs	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000628:	f7ff ff7e 	bl	8000528 <rcvr_spi>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d002      	beq.n	8000638 <power_on+0x80>
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f4      	bne.n	8000622 <power_on+0x6a>

	DESELECT();
 8000638:	f7ff ff55 	bl	80004e6 <DESELECT>
	xmit_spi(0XFF);
 800063c:	20ff      	movs	r0, #255	; 0xff
 800063e:	f7ff ff59 	bl	80004f4 <xmit_spi>

	PowerFlag = 1;
 8000642:	4b03      	ldr	r3, [pc, #12]	; (8000650 <power_on+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	2000009b 	.word	0x2000009b

08000654 <power_off>:

static
void power_off(void) {
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <power_off+0x14>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	2000009b 	.word	0x2000009b

0800066c <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <chk_power+0x14>)
 8000672:	781b      	ldrb	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	2000009b 	.word	0x2000009b

08000684 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <rcvr_datablock+0x68>)
 8000690:	220a      	movs	r2, #10
 8000692:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000694:	f7ff ff48 	bl	8000528 <rcvr_spi>
 8000698:	4603      	mov	r3, r0
 800069a:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	2bff      	cmp	r3, #255	; 0xff
 80006a0:	d104      	bne.n	80006ac <rcvr_datablock+0x28>
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <rcvr_datablock+0x68>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1f3      	bne.n	8000694 <rcvr_datablock+0x10>
	if (token != 0xFE)
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	2bfe      	cmp	r3, #254	; 0xfe
 80006b0:	d001      	beq.n	80006b6 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 80006b2:	2300      	movs	r3, #0
 80006b4:	e016      	b.n	80006e4 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff51 	bl	8000564 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff4b 	bl	8000564 <rcvr_spi_m>
	} while (btr -= 2);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	3b02      	subs	r3, #2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1ed      	bne.n	80006b6 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 80006da:	f7ff ff25 	bl	8000528 <rcvr_spi>
	rcvr_spi();
 80006de:	f7ff ff23 	bl	8000528 <rcvr_spi>

	return TRUE; /* Return with success */
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000098 	.word	0x20000098

080006f0 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000700:	f7ff ff3e 	bl	8000580 <wait_ready>
 8000704:	4603      	mov	r3, r0
 8000706:	2bff      	cmp	r3, #255	; 0xff
 8000708:	d001      	beq.n	800070e <xmit_datablock+0x1e>
		return FALSE;
 800070a:	2300      	movs	r3, #0
 800070c:	e040      	b.n	8000790 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 800070e:	78fb      	ldrb	r3, [r7, #3]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff feef 	bl	80004f4 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	2bfd      	cmp	r3, #253	; 0xfd
 800071a:	d031      	beq.n	8000780 <xmit_datablock+0x90>
		wc = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fee3 	bl	80004f4 <xmit_spi>
			xmit_spi(*buff++);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fedc 	bl	80004f4 <xmit_spi>
		} while (--wc);
 800073c:	7bbb      	ldrb	r3, [r7, #14]
 800073e:	3b01      	subs	r3, #1
 8000740:	73bb      	strb	r3, [r7, #14]
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1eb      	bne.n	8000720 <xmit_datablock+0x30>

		rcvr_spi();
 8000748:	f7ff feee 	bl	8000528 <rcvr_spi>
		rcvr_spi();
 800074c:	f7ff feec 	bl	8000528 <rcvr_spi>

		while (i <= 64) {
 8000750:	e00b      	b.n	800076a <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000752:	f7ff fee9 	bl	8000528 <rcvr_spi>
 8000756:	4603      	mov	r3, r0
 8000758:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	f003 031f 	and.w	r3, r3, #31
 8000760:	2b05      	cmp	r3, #5
 8000762:	d006      	beq.n	8000772 <xmit_datablock+0x82>
				break;
			i++;
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	3301      	adds	r3, #1
 8000768:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	2b40      	cmp	r3, #64	; 0x40
 800076e:	d9f0      	bls.n	8000752 <xmit_datablock+0x62>
 8000770:	e000      	b.n	8000774 <xmit_datablock+0x84>
				break;
 8000772:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000774:	bf00      	nop
 8000776:	f7ff fed7 	bl	8000528 <rcvr_spi>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0fa      	beq.n	8000776 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f003 031f 	and.w	r3, r3, #31
 8000786:	2b05      	cmp	r3, #5
 8000788:	d101      	bne.n	800078e <xmit_datablock+0x9e>
		return TRUE;
 800078a:	2301      	movs	r3, #1
 800078c:	e000      	b.n	8000790 <xmit_datablock+0xa0>
	else
		return FALSE;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 80007a4:	f7ff feec 	bl	8000580 <wait_ready>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2bff      	cmp	r3, #255	; 0xff
 80007ac:	d001      	beq.n	80007b2 <send_cmd+0x1a>
		return 0xFF;
 80007ae:	23ff      	movs	r3, #255	; 0xff
 80007b0:	e040      	b.n	8000834 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fe9d 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	0e1b      	lsrs	r3, r3, #24
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe97 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	0c1b      	lsrs	r3, r3, #16
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fe91 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fe8b 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fe86 	bl	80004f4 <xmit_spi>
	n = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b40      	cmp	r3, #64	; 0x40
 80007f0:	d101      	bne.n	80007f6 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 80007f2:	2395      	movs	r3, #149	; 0x95
 80007f4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b48      	cmp	r3, #72	; 0x48
 80007fa:	d101      	bne.n	8000800 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 80007fc:	2387      	movs	r3, #135	; 0x87
 80007fe:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe76 	bl	80004f4 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b4c      	cmp	r3, #76	; 0x4c
 800080c:	d101      	bne.n	8000812 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 800080e:	f7ff fe8b 	bl	8000528 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8000812:	230a      	movs	r3, #10
 8000814:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8000816:	f7ff fe87 	bl	8000528 <rcvr_spi>
 800081a:	4603      	mov	r3, r0
 800081c:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 800081e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000822:	2b00      	cmp	r3, #0
 8000824:	da05      	bge.n	8000832 <send_cmd+0x9a>
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	3b01      	subs	r3, #1
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f1      	bne.n	8000816 <send_cmd+0x7e>

	return res; /* Return with the response value */
 8000832:	7bbb      	ldrb	r3, [r7, #14]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 800084c:	2301      	movs	r3, #1
 800084e:	e0d5      	b.n	80009fc <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8000850:	4b6c      	ldr	r3, [pc, #432]	; (8000a04 <disk_initialize+0x1c8>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <disk_initialize+0x1c8>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	e0ca      	b.n	80009fc <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8000866:	f7ff fea7 	bl	80005b8 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 800086a:	f7ff fe35 	bl	80004d8 <SELECT>
	ty = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8000872:	2100      	movs	r1, #0
 8000874:	2040      	movs	r0, #64	; 0x40
 8000876:	f7ff ff8f 	bl	8000798 <send_cmd>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 80a5 	bne.w	80009cc <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8000882:	4b61      	ldr	r3, [pc, #388]	; (8000a08 <disk_initialize+0x1cc>)
 8000884:	2264      	movs	r2, #100	; 0x64
 8000886:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8000888:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800088c:	2048      	movs	r0, #72	; 0x48
 800088e:	f7ff ff83 	bl	8000798 <send_cmd>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d158      	bne.n	800094a <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e00c      	b.n	80008b8 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800089e:	7bfc      	ldrb	r4, [r7, #15]
 80008a0:	f7ff fe42 	bl	8000528 <rcvr_spi>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4423      	add	r3, r4
 80008ae:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	3301      	adds	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d9ef      	bls.n	800089e <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 80008be:	7abb      	ldrb	r3, [r7, #10]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	f040 8083 	bne.w	80009cc <disk_initialize+0x190>
 80008c6:	7afb      	ldrb	r3, [r7, #11]
 80008c8:	2baa      	cmp	r3, #170	; 0xaa
 80008ca:	d17f      	bne.n	80009cc <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 80008cc:	2100      	movs	r1, #0
 80008ce:	2077      	movs	r0, #119	; 0x77
 80008d0:	f7ff ff62 	bl	8000798 <send_cmd>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d807      	bhi.n	80008ea <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80008da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008de:	2069      	movs	r0, #105	; 0x69
 80008e0:	f7ff ff5a 	bl	8000798 <send_cmd>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d005      	beq.n	80008f6 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80008ea:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <disk_initialize+0x1cc>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1eb      	bne.n	80008cc <disk_initialize+0x90>
 80008f4:	e000      	b.n	80008f8 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80008f6:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80008f8:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <disk_initialize+0x1cc>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d064      	beq.n	80009cc <disk_initialize+0x190>
 8000902:	2100      	movs	r1, #0
 8000904:	207a      	movs	r0, #122	; 0x7a
 8000906:	f7ff ff47 	bl	8000798 <send_cmd>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d15d      	bne.n	80009cc <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8000910:	2300      	movs	r3, #0
 8000912:	73fb      	strb	r3, [r7, #15]
 8000914:	e00c      	b.n	8000930 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8000916:	7bfc      	ldrb	r4, [r7, #15]
 8000918:	f7ff fe06 	bl	8000528 <rcvr_spi>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4423      	add	r3, r4
 8000926:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	3301      	adds	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	2b03      	cmp	r3, #3
 8000934:	d9ef      	bls.n	8000916 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8000936:	7a3b      	ldrb	r3, [r7, #8]
 8000938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <disk_initialize+0x108>
 8000940:	2306      	movs	r3, #6
 8000942:	e000      	b.n	8000946 <disk_initialize+0x10a>
 8000944:	2302      	movs	r3, #2
 8000946:	73bb      	strb	r3, [r7, #14]
 8000948:	e040      	b.n	80009cc <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800094a:	2100      	movs	r1, #0
 800094c:	2077      	movs	r0, #119	; 0x77
 800094e:	f7ff ff23 	bl	8000798 <send_cmd>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	d808      	bhi.n	800096a <disk_initialize+0x12e>
 8000958:	2100      	movs	r1, #0
 800095a:	2069      	movs	r0, #105	; 0x69
 800095c:	f7ff ff1c 	bl	8000798 <send_cmd>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d801      	bhi.n	800096a <disk_initialize+0x12e>
 8000966:	2302      	movs	r3, #2
 8000968:	e000      	b.n	800096c <disk_initialize+0x130>
 800096a:	2301      	movs	r3, #1
 800096c:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 800096e:	7bbb      	ldrb	r3, [r7, #14]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d10e      	bne.n	8000992 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8000974:	2100      	movs	r1, #0
 8000976:	2077      	movs	r0, #119	; 0x77
 8000978:	f7ff ff0e 	bl	8000798 <send_cmd>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d80e      	bhi.n	80009a0 <disk_initialize+0x164>
 8000982:	2100      	movs	r1, #0
 8000984:	2069      	movs	r0, #105	; 0x69
 8000986:	f7ff ff07 	bl	8000798 <send_cmd>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d107      	bne.n	80009a0 <disk_initialize+0x164>
						break; /* ACMD41 */
 8000990:	e00d      	b.n	80009ae <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8000992:	2100      	movs	r1, #0
 8000994:	2041      	movs	r0, #65	; 0x41
 8000996:	f7ff feff 	bl	8000798 <send_cmd>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d005      	beq.n	80009ac <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <disk_initialize+0x1cc>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1e1      	bne.n	800096e <disk_initialize+0x132>
 80009aa:	e000      	b.n	80009ae <disk_initialize+0x172>
						break; /* CMD1 */
 80009ac:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <disk_initialize+0x1cc>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d007      	beq.n	80009c8 <disk_initialize+0x18c>
 80009b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009bc:	2050      	movs	r0, #80	; 0x50
 80009be:	f7ff feeb 	bl	8000798 <send_cmd>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <disk_initialize+0x190>
				ty = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 80009cc:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <disk_initialize+0x1d0>)
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80009d2:	f7ff fd88 	bl	80004e6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80009d6:	f7ff fda7 	bl	8000528 <rcvr_spi>

	if (ty) /* Initialization succeded */
 80009da:	7bbb      	ldrb	r3, [r7, #14]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d008      	beq.n	80009f2 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <disk_initialize+0x1c8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f023 0301 	bic.w	r3, r3, #1
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <disk_initialize+0x1c8>)
 80009ee:	701a      	strb	r2, [r3, #0]
 80009f0:	e001      	b.n	80009f6 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80009f2:	f7ff fe2f 	bl	8000654 <power_off>

	return Stat;
 80009f6:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <disk_initialize+0x1c8>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000098 	.word	0x20000098
 8000a0c:	2000009a 	.word	0x2000009a

08000a10 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000a20:	2301      	movs	r3, #1
 8000a22:	e002      	b.n	8000a2a <disk_status+0x1a>
	return Stat;
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <disk_status+0x28>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000000 	.word	0x20000000

08000a3c <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	4603      	mov	r3, r0
 8000a4a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d102      	bne.n	8000a58 <disk_read+0x1c>
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <disk_read+0x20>
		return RES_PARERR;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	e051      	b.n	8000b00 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <disk_read+0xcc>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <disk_read+0x32>
		return RES_NOTRDY;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e048      	b.n	8000b00 <disk_read+0xc4>

	if (!(CardType & 4))
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <disk_read+0xd0>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	025b      	lsls	r3, r3, #9
 8000a7e:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000a80:	f7ff fd2a 	bl	80004d8 <SELECT>

	if (count == 1) { /* Single block read */
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d111      	bne.n	8000aae <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2051      	movs	r0, #81	; 0x51
 8000a8e:	f7ff fe83 	bl	8000798 <send_cmd>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d129      	bne.n	8000aec <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8000a98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9c:	68b8      	ldr	r0, [r7, #8]
 8000a9e:	f7ff fdf1 	bl	8000684 <rcvr_datablock>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d021      	beq.n	8000aec <disk_read+0xb0>
			count = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	e01e      	b.n	8000aec <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2052      	movs	r0, #82	; 0x52
 8000ab2:	f7ff fe71 	bl	8000798 <send_cmd>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d117      	bne.n	8000aec <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8000abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac0:	68b8      	ldr	r0, [r7, #8]
 8000ac2:	f7ff fddf 	bl	8000684 <rcvr_datablock>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00a      	beq.n	8000ae2 <disk_read+0xa6>
					break;
				buff += 512;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ad2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1ed      	bne.n	8000abc <disk_read+0x80>
 8000ae0:	e000      	b.n	8000ae4 <disk_read+0xa8>
					break;
 8000ae2:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	204c      	movs	r0, #76	; 0x4c
 8000ae8:	f7ff fe56 	bl	8000798 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8000aec:	f7ff fcfb 	bl	80004e6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000af0:	f7ff fd1a 	bl	8000528 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bf14      	ite	ne
 8000afa:	2301      	movne	r3, #1
 8000afc:	2300      	moveq	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	2000009a 	.word	0x2000009a

08000b10 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <disk_write+0x1c>
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <disk_write+0x20>
		return RES_PARERR;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	e06b      	b.n	8000c08 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8000b30:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <disk_write+0x100>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <disk_write+0x32>
		return RES_NOTRDY;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e062      	b.n	8000c08 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8000b42:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <disk_write+0x100>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <disk_write+0x44>
		return RES_WRPRT;
 8000b50:	2302      	movs	r3, #2
 8000b52:	e059      	b.n	8000c08 <disk_write+0xf8>

	if (!(CardType & 4))
 8000b54:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <disk_write+0x104>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	025b      	lsls	r3, r3, #9
 8000b64:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000b66:	f7ff fcb7 	bl	80004d8 <SELECT>

	if (count == 1) { /* Single block write */
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d110      	bne.n	8000b92 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	2058      	movs	r0, #88	; 0x58
 8000b74:	f7ff fe10 	bl	8000798 <send_cmd>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d13a      	bne.n	8000bf4 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8000b7e:	21fe      	movs	r1, #254	; 0xfe
 8000b80:	68b8      	ldr	r0, [r7, #8]
 8000b82:	f7ff fdb5 	bl	80006f0 <xmit_datablock>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d033      	beq.n	8000bf4 <disk_write+0xe4>
			count = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	e030      	b.n	8000bf4 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <disk_write+0x104>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d007      	beq.n	8000bae <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2077      	movs	r0, #119	; 0x77
 8000ba2:	f7ff fdf9 	bl	8000798 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8000ba6:	6839      	ldr	r1, [r7, #0]
 8000ba8:	2057      	movs	r0, #87	; 0x57
 8000baa:	f7ff fdf5 	bl	8000798 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2059      	movs	r0, #89	; 0x59
 8000bb2:	f7ff fdf1 	bl	8000798 <send_cmd>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d11b      	bne.n	8000bf4 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8000bbc:	21fc      	movs	r1, #252	; 0xfc
 8000bbe:	68b8      	ldr	r0, [r7, #8]
 8000bc0:	f7ff fd96 	bl	80006f0 <xmit_datablock>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00a      	beq.n	8000be0 <disk_write+0xd0>
					break;
				buff += 512;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bd0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1ee      	bne.n	8000bbc <disk_write+0xac>
 8000bde:	e000      	b.n	8000be2 <disk_write+0xd2>
					break;
 8000be0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8000be2:	21fd      	movs	r1, #253	; 0xfd
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff fd83 	bl	80006f0 <xmit_datablock>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <disk_write+0xe4>
				count = 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8000bf4:	f7ff fc77 	bl	80004e6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000bf8:	f7ff fc96 	bl	8000528 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf14      	ite	ne
 8000c02:	2301      	movne	r3, #1
 8000c04:	2300      	moveq	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000000 	.word	0x20000000
 8000c14:	2000009a 	.word	0x2000009a

08000c18 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b08b      	sub	sp, #44	; 0x2c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	603a      	str	r2, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	460b      	mov	r3, r1
 8000c26:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <disk_ioctl+0x1e>
		return RES_PARERR;
 8000c32:	2304      	movs	r3, #4
 8000c34:	e16a      	b.n	8000f0c <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	d127      	bne.n	8000c92 <disk_ioctl+0x7a>
		switch (*ptr) {
 8000c42:	6a3b      	ldr	r3, [r7, #32]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d00e      	beq.n	8000c68 <disk_ioctl+0x50>
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d012      	beq.n	8000c74 <disk_ioctl+0x5c>
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d11b      	bne.n	8000c8a <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 8000c52:	f7ff fd0b 	bl	800066c <chk_power>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <disk_ioctl+0x48>
				power_off(); /* Power off */
 8000c5c:	f7ff fcfa 	bl	8000654 <power_off>
			res = RES_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c66:	e14f      	b.n	8000f08 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8000c68:	f7ff fca6 	bl	80005b8 <power_on>
			res = RES_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c72:	e149      	b.n	8000f08 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8000c74:	f7ff fcfa 	bl	800066c <chk_power>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	6a3b      	ldr	r3, [r7, #32]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c88:	e13e      	b.n	8000f08 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c90:	e13a      	b.n	8000f08 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8000c92:	4ba0      	ldr	r3, [pc, #640]	; (8000f14 <disk_ioctl+0x2fc>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e133      	b.n	8000f0c <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8000ca4:	f7ff fc18 	bl	80004d8 <SELECT>

		switch (ctrl) {
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	2b35      	cmp	r3, #53	; 0x35
 8000cac:	f200 811d 	bhi.w	8000eea <disk_ioctl+0x2d2>
 8000cb0:	a201      	add	r2, pc, #4	; (adr r2, 8000cb8 <disk_ioctl+0xa0>)
 8000cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb6:	bf00      	nop
 8000cb8:	08000e53 	.word	0x08000e53
 8000cbc:	08000d91 	.word	0x08000d91
 8000cc0:	08000e43 	.word	0x08000e43
 8000cc4:	08000eeb 	.word	0x08000eeb
 8000cc8:	08000eeb 	.word	0x08000eeb
 8000ccc:	08000eeb 	.word	0x08000eeb
 8000cd0:	08000eeb 	.word	0x08000eeb
 8000cd4:	08000eeb 	.word	0x08000eeb
 8000cd8:	08000eeb 	.word	0x08000eeb
 8000cdc:	08000eeb 	.word	0x08000eeb
 8000ce0:	08000eeb 	.word	0x08000eeb
 8000ce4:	08000eeb 	.word	0x08000eeb
 8000ce8:	08000eeb 	.word	0x08000eeb
 8000cec:	08000eeb 	.word	0x08000eeb
 8000cf0:	08000eeb 	.word	0x08000eeb
 8000cf4:	08000eeb 	.word	0x08000eeb
 8000cf8:	08000eeb 	.word	0x08000eeb
 8000cfc:	08000eeb 	.word	0x08000eeb
 8000d00:	08000eeb 	.word	0x08000eeb
 8000d04:	08000eeb 	.word	0x08000eeb
 8000d08:	08000eeb 	.word	0x08000eeb
 8000d0c:	08000eeb 	.word	0x08000eeb
 8000d10:	08000eeb 	.word	0x08000eeb
 8000d14:	08000eeb 	.word	0x08000eeb
 8000d18:	08000eeb 	.word	0x08000eeb
 8000d1c:	08000eeb 	.word	0x08000eeb
 8000d20:	08000eeb 	.word	0x08000eeb
 8000d24:	08000eeb 	.word	0x08000eeb
 8000d28:	08000eeb 	.word	0x08000eeb
 8000d2c:	08000eeb 	.word	0x08000eeb
 8000d30:	08000eeb 	.word	0x08000eeb
 8000d34:	08000eeb 	.word	0x08000eeb
 8000d38:	08000eeb 	.word	0x08000eeb
 8000d3c:	08000eeb 	.word	0x08000eeb
 8000d40:	08000eeb 	.word	0x08000eeb
 8000d44:	08000eeb 	.word	0x08000eeb
 8000d48:	08000eeb 	.word	0x08000eeb
 8000d4c:	08000eeb 	.word	0x08000eeb
 8000d50:	08000eeb 	.word	0x08000eeb
 8000d54:	08000eeb 	.word	0x08000eeb
 8000d58:	08000eeb 	.word	0x08000eeb
 8000d5c:	08000eeb 	.word	0x08000eeb
 8000d60:	08000eeb 	.word	0x08000eeb
 8000d64:	08000eeb 	.word	0x08000eeb
 8000d68:	08000eeb 	.word	0x08000eeb
 8000d6c:	08000eeb 	.word	0x08000eeb
 8000d70:	08000eeb 	.word	0x08000eeb
 8000d74:	08000eeb 	.word	0x08000eeb
 8000d78:	08000eeb 	.word	0x08000eeb
 8000d7c:	08000eeb 	.word	0x08000eeb
 8000d80:	08000eeb 	.word	0x08000eeb
 8000d84:	08000e65 	.word	0x08000e65
 8000d88:	08000e89 	.word	0x08000e89
 8000d8c:	08000ead 	.word	0x08000ead
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8000d90:	2100      	movs	r1, #0
 8000d92:	2049      	movs	r0, #73	; 0x49
 8000d94:	f7ff fd00 	bl	8000798 <send_cmd>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 80a9 	bne.w	8000ef2 <disk_ioctl+0x2da>
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2110      	movs	r1, #16
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc6c 	bl	8000684 <rcvr_datablock>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 809f 	beq.w	8000ef2 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8000db4:	7b3b      	ldrb	r3, [r7, #12]
 8000db6:	099b      	lsrs	r3, r3, #6
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d10e      	bne.n	8000ddc <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dbe:	7d7b      	ldrb	r3, [r7, #21]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	7d3b      	ldrb	r3, [r7, #20]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4413      	add	r3, r2
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3301      	adds	r3, #1
 8000dd0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dd2:	8bfb      	ldrh	r3, [r7, #30]
 8000dd4:	029a      	lsls	r2, r3, #10
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e02e      	b.n	8000e3a <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000ddc:	7c7b      	ldrb	r3, [r7, #17]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	7dbb      	ldrb	r3, [r7, #22]
 8000de6:	09db      	lsrs	r3, r3, #7
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8000dee:	7d7b      	ldrb	r3, [r7, #21]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 0306 	and.w	r3, r3, #6
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000dfe:	3302      	adds	r3, #2
 8000e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000e04:	7d3b      	ldrb	r3, [r7, #20]
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	7cfb      	ldrb	r3, [r7, #19]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8000e18:	7cbb      	ldrb	r3, [r7, #18]
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000e28:	3301      	adds	r3, #1
 8000e2a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e2c:	8bfa      	ldrh	r2, [r7, #30]
 8000e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e32:	3b09      	subs	r3, #9
 8000e34:	409a      	lsls	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e40:	e057      	b.n	8000ef2 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e48:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e50:	e056      	b.n	8000f00 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8000e52:	f7ff fb95 	bl	8000580 <wait_ready>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2bff      	cmp	r3, #255	; 0xff
 8000e5a:	d14c      	bne.n	8000ef6 <disk_ioctl+0x2de>
				res = RES_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e62:	e048      	b.n	8000ef6 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8000e64:	2100      	movs	r1, #0
 8000e66:	2049      	movs	r0, #73	; 0x49
 8000e68:	f7ff fc96 	bl	8000798 <send_cmd>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d143      	bne.n	8000efa <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8000e72:	2110      	movs	r1, #16
 8000e74:	6a38      	ldr	r0, [r7, #32]
 8000e76:	f7ff fc05 	bl	8000684 <rcvr_datablock>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d03c      	beq.n	8000efa <disk_ioctl+0x2e2>
				res = RES_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e86:	e038      	b.n	8000efa <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8000e88:	2100      	movs	r1, #0
 8000e8a:	204a      	movs	r0, #74	; 0x4a
 8000e8c:	f7ff fc84 	bl	8000798 <send_cmd>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d133      	bne.n	8000efe <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8000e96:	2110      	movs	r1, #16
 8000e98:	6a38      	ldr	r0, [r7, #32]
 8000e9a:	f7ff fbf3 	bl	8000684 <rcvr_datablock>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d02c      	beq.n	8000efe <disk_ioctl+0x2e6>
				res = RES_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000eaa:	e028      	b.n	8000efe <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8000eac:	2100      	movs	r1, #0
 8000eae:	207a      	movs	r0, #122	; 0x7a
 8000eb0:	f7ff fc72 	bl	8000798 <send_cmd>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d117      	bne.n	8000eea <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ec0:	e00b      	b.n	8000eda <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8000ec2:	6a3c      	ldr	r4, [r7, #32]
 8000ec4:	1c63      	adds	r3, r4, #1
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	f7ff fb2e 	bl	8000528 <rcvr_spi>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d9ef      	bls.n	8000ec2 <disk_ioctl+0x2aa>
				res = RES_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000ee8:	e00a      	b.n	8000f00 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8000eea:	2304      	movs	r3, #4
 8000eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ef0:	e006      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000ef2:	bf00      	nop
 8000ef4:	e004      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000ef6:	bf00      	nop
 8000ef8:	e002      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000efa:	bf00      	nop
 8000efc:	e000      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000efe:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8000f00:	f7ff faf1 	bl	80004e6 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8000f04:	f7ff fb10 	bl	8000528 <rcvr_spi>
	}

	return res;
 8000f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	372c      	adds	r7, #44	; 0x2c
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	20000000 	.word	0x20000000

08000f18 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <disk_timerproc+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d005      	beq.n	8000f36 <disk_timerproc+0x1e>
		Timer1 = --n;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <disk_timerproc+0x44>)
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <disk_timerproc+0x48>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <disk_timerproc+0x36>
		Timer2 = --n;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <disk_timerproc+0x48>)
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	7013      	strb	r3, [r2, #0]

}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000098 	.word	0x20000098
 8000f60:	20000099 	.word	0x20000099

08000f64 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f74:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	2b09      	cmp	r3, #9
 8000f7e:	d904      	bls.n	8000f8a <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8000f86:	f7ff ffc7 	bl	8000f18 <disk_timerproc>
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000030c 	.word	0x2000030c

08000f94 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	36c55cc0 	.word	0x36c55cc0

08000fa8 <ld_word>:
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	81fb      	strh	r3, [r7, #14]
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	81fb      	strh	r3, [r7, #14]
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <ld_dword>:
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3303      	adds	r3, #3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	3202      	adds	r2, #2
 8000ff0:	7812      	ldrb	r2, [r2, #0]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	3201      	adds	r2, #1
 8000ffe:	7812      	ldrb	r2, [r2, #0]
 8001000:	4313      	orrs	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	7812      	ldrb	r2, [r2, #0]
 800100c:	4313      	orrs	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <st_word>:
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	887a      	ldrh	r2, [r7, #2]
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	807b      	strh	r3, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <st_dword>:
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	0a1b      	lsrs	r3, r3, #8
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <mem_cpy>:
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00d      	beq.n	80010e2 <mem_cpy+0x36>
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	1c53      	adds	r3, r2, #1
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	1c59      	adds	r1, r3, #1
 80010d0:	6179      	str	r1, [r7, #20]
 80010d2:	7812      	ldrb	r2, [r2, #0]
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3b01      	subs	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f1      	bne.n	80010c6 <mem_cpy+0x1a>
 80010e2:	bf00      	nop
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <mem_set>:
 80010ee:	b480      	push	{r7}
 80010f0:	b087      	sub	sp, #28
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	617a      	str	r2, [r7, #20]
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3b01      	subs	r3, #1
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f3      	bne.n	80010fe <mem_set+0x10>
 8001116:	bf00      	nop
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <mem_cmp>:
 8001122:	b480      	push	{r7}
 8001124:	b089      	sub	sp, #36	; 0x24
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	61fa      	str	r2, [r7, #28]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	61ba      	str	r2, [r7, #24]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	1acb      	subs	r3, r1, r3
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <mem_cmp+0x40>
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0eb      	beq.n	800113a <mem_cmp+0x18>
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	4618      	mov	r0, r3
 8001166:	3724      	adds	r7, #36	; 0x24
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <chk_chr>:
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	e002      	b.n	8001182 <chk_chr+0x12>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3301      	adds	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <chk_chr+0x26>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4293      	cmp	r3, r2
 8001194:	d1f2      	bne.n	800117c <chk_chr+0xc>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <dbc_1st>:
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	2281      	movs	r2, #129	; 0x81
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d30f      	bcc.n	80011d8 <dbc_1st+0x32>
 80011b8:	229f      	movs	r2, #159	; 0x9f
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4293      	cmp	r3, r2
 80011be:	d801      	bhi.n	80011c4 <dbc_1st+0x1e>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e00a      	b.n	80011da <dbc_1st+0x34>
 80011c4:	22e0      	movs	r2, #224	; 0xe0
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d305      	bcc.n	80011d8 <dbc_1st+0x32>
 80011cc:	22fc      	movs	r2, #252	; 0xfc
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d801      	bhi.n	80011d8 <dbc_1st+0x32>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <dbc_1st+0x34>
 80011d8:	2300      	movs	r3, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <dbc_2nd>:
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	2240      	movs	r2, #64	; 0x40
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d319      	bcc.n	800122c <dbc_2nd+0x46>
 80011f8:	227e      	movs	r2, #126	; 0x7e
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d801      	bhi.n	8001204 <dbc_2nd+0x1e>
 8001200:	2301      	movs	r3, #1
 8001202:	e014      	b.n	800122e <dbc_2nd+0x48>
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	4293      	cmp	r3, r2
 800120a:	d305      	bcc.n	8001218 <dbc_2nd+0x32>
 800120c:	22fc      	movs	r2, #252	; 0xfc
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4293      	cmp	r3, r2
 8001212:	d801      	bhi.n	8001218 <dbc_2nd+0x32>
 8001214:	2301      	movs	r3, #1
 8001216:	e00a      	b.n	800122e <dbc_2nd+0x48>
 8001218:	2200      	movs	r2, #0
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4293      	cmp	r3, r2
 800121e:	d305      	bcc.n	800122c <dbc_2nd+0x46>
 8001220:	2200      	movs	r2, #0
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4293      	cmp	r3, r2
 8001226:	d801      	bhi.n	800122c <dbc_2nd+0x46>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <dbc_2nd+0x48>
 800122c:	2300      	movs	r3, #0
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <sync_window>:
 800123a:	b580      	push	{r7, lr}
 800123c:	b084      	sub	sp, #16
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	78db      	ldrb	r3, [r3, #3]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d02c      	beq.n	80012a8 <sync_window+0x6e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7858      	ldrb	r0, [r3, #1]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800125c:	2301      	movs	r3, #1
 800125e:	f7ff fc57 	bl	8000b10 <disk_write>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d11d      	bne.n	80012a4 <sync_window+0x6a>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	70da      	strb	r2, [r3, #3]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	1ad2      	subs	r2, r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	429a      	cmp	r2, r3
 800127e:	d213      	bcs.n	80012a8 <sync_window+0x6e>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	789b      	ldrb	r3, [r3, #2]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d10f      	bne.n	80012a8 <sync_window+0x6e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7858      	ldrb	r0, [r3, #1]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	441a      	add	r2, r3
 800129c:	2301      	movs	r3, #1
 800129e:	f7ff fc37 	bl	8000b10 <disk_write>
 80012a2:	e001      	b.n	80012a8 <sync_window+0x6e>
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <move_window>:
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d01b      	beq.n	8001302 <move_window+0x50>
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffb5 	bl	800123a <sync_window>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d113      	bne.n	8001302 <move_window+0x50>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7858      	ldrb	r0, [r3, #1]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80012e4:	2301      	movs	r3, #1
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	f7ff fba8 	bl	8000a3c <disk_read>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <move_window+0x4a>
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <sync_fs>:
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff90 	bl	800123a <sync_window>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d158      	bne.n	80013d6 <sync_fs+0xca>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d148      	bne.n	80013be <sync_fs+0xb2>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	791b      	ldrb	r3, [r3, #4]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d144      	bne.n	80013be <sync_fs+0xb2>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3330      	adds	r3, #48	; 0x30
 8001338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fed5 	bl	80010ee <mem_set>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3330      	adds	r3, #48	; 0x30
 8001348:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800134c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe64 	bl	800101e <st_word>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3330      	adds	r3, #48	; 0x30
 800135a:	4921      	ldr	r1, [pc, #132]	; (80013e0 <sync_fs+0xd4>)
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe79 	bl	8001054 <st_dword>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3330      	adds	r3, #48	; 0x30
 8001366:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800136a:	491e      	ldr	r1, [pc, #120]	; (80013e4 <sync_fs+0xd8>)
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe71 	bl	8001054 <st_dword>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3330      	adds	r3, #48	; 0x30
 8001376:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	4619      	mov	r1, r3
 8001380:	4610      	mov	r0, r2
 8001382:	f7ff fe67 	bl	8001054 <st_dword>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3330      	adds	r3, #48	; 0x30
 800138a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	4619      	mov	r1, r3
 8001394:	4610      	mov	r0, r2
 8001396:	f7ff fe5d 	bl	8001054 <st_dword>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7858      	ldrb	r0, [r3, #1]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b2:	2301      	movs	r3, #1
 80013b4:	f7ff fbac 	bl	8000b10 <disk_write>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	711a      	strb	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	785b      	ldrb	r3, [r3, #1]
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fc26 	bl	8000c18 <disk_ioctl>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <sync_fs+0xca>
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	41615252 	.word	0x41615252
 80013e4:	61417272 	.word	0x61417272

080013e8 <clst2sect>:
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	3b02      	subs	r3, #2
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	3b02      	subs	r3, #2
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d301      	bcc.n	8001408 <clst2sect+0x20>
 8001404:	2300      	movs	r3, #0
 8001406:	e008      	b.n	800141a <clst2sect+0x32>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	895b      	ldrh	r3, [r3, #10]
 8001410:	4619      	mov	r1, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	fb03 f301 	mul.w	r3, r3, r1
 8001418:	4413      	add	r3, r2
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <get_fat>:
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d904      	bls.n	8001446 <get_fat+0x20>
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d302      	bcc.n	800144c <get_fat+0x26>
 8001446:	2301      	movs	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	e08c      	b.n	8001566 <get_fat+0x140>
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d045      	beq.n	80014e6 <get_fat+0xc0>
 800145a:	2b03      	cmp	r3, #3
 800145c:	d05d      	beq.n	800151a <get_fat+0xf4>
 800145e:	2b01      	cmp	r3, #1
 8001460:	d177      	bne.n	8001552 <get_fat+0x12c>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4413      	add	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	6a1a      	ldr	r2, [r3, #32]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	0a5b      	lsrs	r3, r3, #9
 8001478:	4413      	add	r3, r2
 800147a:	4619      	mov	r1, r3
 800147c:	6938      	ldr	r0, [r7, #16]
 800147e:	f7ff ff18 	bl	80012b2 <move_window>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d167      	bne.n	8001558 <get_fat+0x132>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60fa      	str	r2, [r7, #12]
 800148e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4413      	add	r3, r2
 8001496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6a1a      	ldr	r2, [r3, #32]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	0a5b      	lsrs	r3, r3, #9
 80014a4:	4413      	add	r3, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	6938      	ldr	r0, [r7, #16]
 80014aa:	f7ff ff02 	bl	80012b2 <move_window>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d153      	bne.n	800155c <get_fat+0x136>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	461a      	mov	r2, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <get_fat+0xb6>
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	e002      	b.n	80014e2 <get_fat+0xbc>
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e03f      	b.n	8001566 <get_fat+0x140>
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	6a1a      	ldr	r2, [r3, #32]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	4413      	add	r3, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	6938      	ldr	r0, [r7, #16]
 80014f4:	f7ff fedd 	bl	80012b2 <move_window>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d130      	bne.n	8001560 <get_fat+0x13a>
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800150c:	4413      	add	r3, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fd4a 	bl	8000fa8 <ld_word>
 8001514:	4603      	mov	r3, r0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e025      	b.n	8001566 <get_fat+0x140>
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	6a1a      	ldr	r2, [r3, #32]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	09db      	lsrs	r3, r3, #7
 8001522:	4413      	add	r3, r2
 8001524:	4619      	mov	r1, r3
 8001526:	6938      	ldr	r0, [r7, #16]
 8001528:	f7ff fec3 	bl	80012b2 <move_window>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d118      	bne.n	8001564 <get_fat+0x13e>
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001540:	4413      	add	r3, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fd48 	bl	8000fd8 <ld_dword>
 8001548:	4603      	mov	r3, r0
 800154a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e009      	b.n	8001566 <get_fat+0x140>
 8001552:	2301      	movs	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	e006      	b.n	8001566 <get_fat+0x140>
 8001558:	bf00      	nop
 800155a:	e004      	b.n	8001566 <get_fat+0x140>
 800155c:	bf00      	nop
 800155e:	e002      	b.n	8001566 <get_fat+0x140>
 8001560:	bf00      	nop
 8001562:	e000      	b.n	8001566 <get_fat+0x140>
 8001564:	bf00      	nop
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <put_fat>:
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	2302      	movs	r3, #2
 800157e:	77fb      	strb	r3, [r7, #31]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b01      	cmp	r3, #1
 8001584:	f240 80d6 	bls.w	8001734 <put_fat+0x1c4>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	429a      	cmp	r2, r3
 8001590:	f080 80d0 	bcs.w	8001734 <put_fat+0x1c4>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d073      	beq.n	8001684 <put_fat+0x114>
 800159c:	2b03      	cmp	r3, #3
 800159e:	f000 8091 	beq.w	80016c4 <put_fat+0x154>
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	f040 80c6 	bne.w	8001734 <put_fat+0x1c4>
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4413      	add	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	0a5b      	lsrs	r3, r3, #9
 80015be:	4413      	add	r3, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f7ff fe75 	bl	80012b2 <move_window>
 80015c8:	4603      	mov	r3, r0
 80015ca:	77fb      	strb	r3, [r7, #31]
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f040 80a9 	bne.w	8001726 <put_fat+0x1b6>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	61b9      	str	r1, [r7, #24]
 80015e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e4:	4413      	add	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00d      	beq.n	800160e <put_fat+0x9e>
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	b25a      	sxtb	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	b25b      	sxtb	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b25b      	sxtb	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	e001      	b.n	8001612 <put_fat+0xa2>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	7013      	strb	r3, [r2, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2201      	movs	r2, #1
 800161a:	70da      	strb	r2, [r3, #3]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a1a      	ldr	r2, [r3, #32]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	0a5b      	lsrs	r3, r3, #9
 8001624:	4413      	add	r3, r2
 8001626:	4619      	mov	r1, r3
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fe42 	bl	80012b2 <move_window>
 800162e:	4603      	mov	r3, r0
 8001630:	77fb      	strb	r3, [r7, #31]
 8001632:	7ffb      	ldrb	r3, [r7, #31]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d178      	bne.n	800172a <put_fat+0x1ba>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001644:	4413      	add	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <put_fat+0xea>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	b2db      	uxtb	r3, r3
 8001658:	e00e      	b.n	8001678 <put_fat+0x108>
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b25b      	sxtb	r3, r3
 8001660:	f023 030f 	bic.w	r3, r3, #15
 8001664:	b25a      	sxtb	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	b25b      	sxtb	r3, r3
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	b25b      	sxtb	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	7013      	strb	r3, [r2, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2201      	movs	r2, #1
 8001680:	70da      	strb	r2, [r3, #3]
 8001682:	e057      	b.n	8001734 <put_fat+0x1c4>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6a1a      	ldr	r2, [r3, #32]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	4413      	add	r3, r2
 800168e:	4619      	mov	r1, r3
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff fe0e 	bl	80012b2 <move_window>
 8001696:	4603      	mov	r3, r0
 8001698:	77fb      	strb	r3, [r7, #31]
 800169a:	7ffb      	ldrb	r3, [r7, #31]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d146      	bne.n	800172e <put_fat+0x1be>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80016ae:	4413      	add	r3, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	b292      	uxth	r2, r2
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fcb1 	bl	800101e <st_word>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2201      	movs	r2, #1
 80016c0:	70da      	strb	r2, [r3, #3]
 80016c2:	e037      	b.n	8001734 <put_fat+0x1c4>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	09db      	lsrs	r3, r3, #7
 80016cc:	4413      	add	r3, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff fdee 	bl	80012b2 <move_window>
 80016d6:	4603      	mov	r3, r0
 80016d8:	77fb      	strb	r3, [r7, #31]
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d128      	bne.n	8001732 <put_fat+0x1c2>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80016f4:	4413      	add	r3, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fc6e 	bl	8000fd8 <ld_dword>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001702:	4323      	orrs	r3, r4
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001714:	4413      	add	r3, r2
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fc9b 	bl	8001054 <st_dword>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2201      	movs	r2, #1
 8001722:	70da      	strb	r2, [r3, #3]
 8001724:	e006      	b.n	8001734 <put_fat+0x1c4>
 8001726:	bf00      	nop
 8001728:	e004      	b.n	8001734 <put_fat+0x1c4>
 800172a:	bf00      	nop
 800172c:	e002      	b.n	8001734 <put_fat+0x1c4>
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <put_fat+0x1c4>
 8001732:	bf00      	nop
 8001734:	7ffb      	ldrb	r3, [r7, #31]
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd90      	pop	{r4, r7, pc}

0800173e <remove_chain>:
 800173e:	b580      	push	{r7, lr}
 8001740:	b088      	sub	sp, #32
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	2300      	movs	r3, #0
 800174c:	77fb      	strb	r3, [r7, #31]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d904      	bls.n	8001764 <remove_chain+0x26>
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	429a      	cmp	r2, r3
 8001762:	d301      	bcc.n	8001768 <remove_chain+0x2a>
 8001764:	2302      	movs	r3, #2
 8001766:	e04b      	b.n	8001800 <remove_chain+0xc2>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00c      	beq.n	8001788 <remove_chain+0x4a>
 800176e:	f04f 32ff 	mov.w	r2, #4294967295
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	69b8      	ldr	r0, [r7, #24]
 8001776:	f7ff fefb 	bl	8001570 <put_fat>
 800177a:	4603      	mov	r3, r0
 800177c:	77fb      	strb	r3, [r7, #31]
 800177e:	7ffb      	ldrb	r3, [r7, #31]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <remove_chain+0x4a>
 8001784:	7ffb      	ldrb	r3, [r7, #31]
 8001786:	e03b      	b.n	8001800 <remove_chain+0xc2>
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f7ff fe4b 	bl	8001426 <get_fat>
 8001790:	6178      	str	r0, [r7, #20]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d031      	beq.n	80017fc <remove_chain+0xbe>
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <remove_chain+0x64>
 800179e:	2302      	movs	r3, #2
 80017a0:	e02e      	b.n	8001800 <remove_chain+0xc2>
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a8:	d101      	bne.n	80017ae <remove_chain+0x70>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e028      	b.n	8001800 <remove_chain+0xc2>
 80017ae:	2200      	movs	r2, #0
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	69b8      	ldr	r0, [r7, #24]
 80017b4:	f7ff fedc 	bl	8001570 <put_fat>
 80017b8:	4603      	mov	r3, r0
 80017ba:	77fb      	strb	r3, [r7, #31]
 80017bc:	7ffb      	ldrb	r3, [r7, #31]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <remove_chain+0x88>
 80017c2:	7ffb      	ldrb	r3, [r7, #31]
 80017c4:	e01c      	b.n	8001800 <remove_chain+0xc2>
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	3b02      	subs	r3, #2
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d20b      	bcs.n	80017ec <remove_chain+0xae>
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	791b      	ldrb	r3, [r3, #4]
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	711a      	strb	r2, [r3, #4]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3c6      	bcc.n	8001788 <remove_chain+0x4a>
 80017fa:	e000      	b.n	80017fe <remove_chain+0xc0>
 80017fc:	bf00      	nop
 80017fe:	2300      	movs	r3, #0
 8001800:	4618      	mov	r0, r3
 8001802:	3720      	adds	r7, #32
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <create_chain>:
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10d      	bne.n	800183a <create_chain+0x32>
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <create_chain+0x2c>
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	429a      	cmp	r2, r3
 8001832:	d31b      	bcc.n	800186c <create_chain+0x64>
 8001834:	2301      	movs	r3, #1
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	e018      	b.n	800186c <create_chain+0x64>
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fdf2 	bl	8001426 <get_fat>
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d801      	bhi.n	800184e <create_chain+0x46>
 800184a:	2301      	movs	r3, #1
 800184c:	e0a9      	b.n	80019a2 <create_chain+0x19a>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001854:	d101      	bne.n	800185a <create_chain+0x52>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	e0a3      	b.n	80019a2 <create_chain+0x19a>
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d201      	bcs.n	8001868 <create_chain+0x60>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	e09c      	b.n	80019a2 <create_chain+0x19a>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <create_chain+0x70>
 8001874:	2300      	movs	r3, #0
 8001876:	e094      	b.n	80019a2 <create_chain+0x19a>
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d129      	bne.n	80018d8 <create_chain+0xd0>
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	3301      	adds	r3, #1
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	429a      	cmp	r2, r3
 8001892:	d301      	bcc.n	8001898 <create_chain+0x90>
 8001894:	2302      	movs	r3, #2
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	69f9      	ldr	r1, [r7, #28]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fdc3 	bl	8001426 <get_fat>
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d003      	beq.n	80018b0 <create_chain+0xa8>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ae:	d101      	bne.n	80018b4 <create_chain+0xac>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	e076      	b.n	80019a2 <create_chain+0x19a>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00e      	beq.n	80018d8 <create_chain+0xd0>
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d906      	bls.n	80018d4 <create_chain+0xcc>
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d201      	bcs.n	80018d4 <create_chain+0xcc>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d129      	bne.n	8001932 <create_chain+0x12a>
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3301      	adds	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d307      	bcc.n	8001902 <create_chain+0xfa>
 80018f2:	2302      	movs	r3, #2
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d901      	bls.n	8001902 <create_chain+0xfa>
 80018fe:	2300      	movs	r3, #0
 8001900:	e04f      	b.n	80019a2 <create_chain+0x19a>
 8001902:	69f9      	ldr	r1, [r7, #28]
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fd8e 	bl	8001426 <get_fat>
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00e      	beq.n	8001930 <create_chain+0x128>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d003      	beq.n	8001920 <create_chain+0x118>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191e:	d101      	bne.n	8001924 <create_chain+0x11c>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	e03e      	b.n	80019a2 <create_chain+0x19a>
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	429a      	cmp	r2, r3
 800192a:	d1da      	bne.n	80018e2 <create_chain+0xda>
 800192c:	2300      	movs	r3, #0
 800192e:	e038      	b.n	80019a2 <create_chain+0x19a>
 8001930:	bf00      	nop
 8001932:	f04f 32ff 	mov.w	r2, #4294967295
 8001936:	69f9      	ldr	r1, [r7, #28]
 8001938:	6938      	ldr	r0, [r7, #16]
 800193a:	f7ff fe19 	bl	8001570 <put_fat>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d109      	bne.n	800195c <create_chain+0x154>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <create_chain+0x154>
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	6938      	ldr	r0, [r7, #16]
 8001954:	f7ff fe0c 	bl	8001570 <put_fat>
 8001958:	4603      	mov	r3, r0
 800195a:	75fb      	strb	r3, [r7, #23]
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d116      	bne.n	8001990 <create_chain+0x188>
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	3b02      	subs	r3, #2
 8001972:	429a      	cmp	r2, r3
 8001974:	d804      	bhi.n	8001980 <create_chain+0x178>
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	1e5a      	subs	r2, r3, #1
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	791b      	ldrb	r3, [r3, #4]
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	b2da      	uxtb	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	711a      	strb	r2, [r3, #4]
 800198e:	e007      	b.n	80019a0 <create_chain+0x198>
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d102      	bne.n	800199c <create_chain+0x194>
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e000      	b.n	800199e <create_chain+0x196>
 800199c:	2301      	movs	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	4618      	mov	r0, r3
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <dir_clear>:
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fc40 	bl	800123a <sync_window>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <dir_clear+0x1a>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e036      	b.n	8001a32 <dir_clear+0x88>
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fd0e 	bl	80013e8 <clst2sect>
 80019cc:	6138      	str	r0, [r7, #16]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3330      	adds	r3, #48	; 0x30
 80019d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fb85 	bl	80010ee <mem_set>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3330      	adds	r3, #48	; 0x30
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	2301      	movs	r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e003      	b.n	80019fc <dir_clear+0x52>
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	4413      	add	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	895b      	ldrh	r3, [r3, #10]
 8001a00:	461a      	mov	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d20b      	bcs.n	8001a20 <dir_clear+0x76>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7858      	ldrb	r0, [r3, #1]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	441a      	add	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	f7ff f87b 	bl	8000b10 <disk_write>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0e9      	beq.n	80019f4 <dir_clear+0x4a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	895b      	ldrh	r3, [r3, #10]
 8001a24:	461a      	mov	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <dir_sdi>:
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a50:	d204      	bcs.n	8001a5c <dir_sdi+0x22>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <dir_sdi+0x26>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e063      	b.n	8001b28 <dir_sdi+0xee>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <dir_sdi+0x46>
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d902      	bls.n	8001a80 <dir_sdi+0x46>
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <dir_sdi+0x66>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	8912      	ldrh	r2, [r2, #8]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d301      	bcc.n	8001a96 <dir_sdi+0x5c>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e048      	b.n	8001b28 <dir_sdi+0xee>
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	619a      	str	r2, [r3, #24]
 8001a9e:	e029      	b.n	8001af4 <dir_sdi+0xba>
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	895b      	ldrh	r3, [r3, #10]
 8001aa4:	025b      	lsls	r3, r3, #9
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e019      	b.n	8001ade <dir_sdi+0xa4>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6979      	ldr	r1, [r7, #20]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fcb9 	bl	8001426 <get_fat>
 8001ab4:	6178      	str	r0, [r7, #20]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d101      	bne.n	8001ac2 <dir_sdi+0x88>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e032      	b.n	8001b28 <dir_sdi+0xee>
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d904      	bls.n	8001ad2 <dir_sdi+0x98>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d301      	bcc.n	8001ad6 <dir_sdi+0x9c>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e028      	b.n	8001b28 <dir_sdi+0xee>
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d2e1      	bcs.n	8001aaa <dir_sdi+0x70>
 8001ae6:	6979      	ldr	r1, [r7, #20]
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	f7ff fc7d 	bl	80013e8 <clst2sect>
 8001aee:	4602      	mov	r2, r0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	615a      	str	r2, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <dir_sdi+0xcc>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e010      	b.n	8001b28 <dir_sdi+0xee>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	0a5b      	lsrs	r3, r3, #9
 8001b0e:	441a      	add	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b20:	441a      	add	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	61da      	str	r2, [r3, #28]
 8001b26:	2300      	movs	r3, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <dir_next>:
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	3320      	adds	r3, #32
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b4e:	d302      	bcc.n	8001b56 <dir_next+0x26>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <dir_next+0x32>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e078      	b.n	8001c54 <dir_next+0x124>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d166      	bne.n	8001c3a <dir_next+0x10a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10a      	bne.n	8001b94 <dir_next+0x64>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	095b      	lsrs	r3, r3, #5
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	8912      	ldrh	r2, [r2, #8]
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d357      	bcc.n	8001c3a <dir_next+0x10a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
 8001b90:	2304      	movs	r3, #4
 8001b92:	e05f      	b.n	8001c54 <dir_next+0x124>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	0a5b      	lsrs	r3, r3, #9
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	8952      	ldrh	r2, [r2, #10]
 8001b9c:	3a01      	subs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d14a      	bne.n	8001c3a <dir_next+0x10a>
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f7ff fc3a 	bl	8001426 <get_fat>
 8001bb2:	6178      	str	r0, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d801      	bhi.n	8001bbe <dir_next+0x8e>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e04a      	b.n	8001c54 <dir_next+0x124>
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d101      	bne.n	8001bca <dir_next+0x9a>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e044      	b.n	8001c54 <dir_next+0x124>
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d328      	bcc.n	8001c26 <dir_next+0xf6>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d104      	bne.n	8001be4 <dir_next+0xb4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
 8001be0:	2304      	movs	r3, #4
 8001be2:	e037      	b.n	8001c54 <dir_next+0x124>
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	4619      	mov	r1, r3
 8001bec:	4610      	mov	r0, r2
 8001bee:	f7ff fe0b 	bl	8001808 <create_chain>
 8001bf2:	6178      	str	r0, [r7, #20]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <dir_next+0xce>
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	e02a      	b.n	8001c54 <dir_next+0x124>
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <dir_next+0xd8>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e025      	b.n	8001c54 <dir_next+0x124>
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0e:	d101      	bne.n	8001c14 <dir_next+0xe4>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e01f      	b.n	8001c54 <dir_next+0x124>
 8001c14:	6979      	ldr	r1, [r7, #20]
 8001c16:	6938      	ldr	r0, [r7, #16]
 8001c18:	f7ff fec7 	bl	80019aa <dir_clear>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <dir_next+0xf6>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e016      	b.n	8001c54 <dir_next+0x124>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	615a      	str	r2, [r3, #20]
 8001c2c:	6979      	ldr	r1, [r7, #20]
 8001c2e:	6938      	ldr	r0, [r7, #16]
 8001c30:	f7ff fbda 	bl	80013e8 <clst2sect>
 8001c34:	4602      	mov	r2, r0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c4c:	441a      	add	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	61da      	str	r2, [r3, #28]
 8001c52:	2300      	movs	r3, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <dir_alloc>:
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fee3 	bl	8001a3a <dir_sdi>
 8001c74:	4603      	mov	r3, r0
 8001c76:	75fb      	strb	r3, [r7, #23]
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d12b      	bne.n	8001cd6 <dir_alloc+0x7a>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	4619      	mov	r1, r3
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fb12 	bl	80012b2 <move_window>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	75fb      	strb	r3, [r7, #23]
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11d      	bne.n	8001cd4 <dir_alloc+0x78>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2be5      	cmp	r3, #229	; 0xe5
 8001ca0:	d004      	beq.n	8001cac <dir_alloc+0x50>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <dir_alloc+0x60>
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d102      	bne.n	8001cc0 <dir_alloc+0x64>
 8001cba:	e00c      	b.n	8001cd6 <dir_alloc+0x7a>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ff34 	bl	8001b30 <dir_next>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	75fb      	strb	r3, [r7, #23]
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0d7      	beq.n	8001c82 <dir_alloc+0x26>
 8001cd2:	e000      	b.n	8001cd6 <dir_alloc+0x7a>
 8001cd4:	bf00      	nop
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d101      	bne.n	8001ce0 <dir_alloc+0x84>
 8001cdc:	2307      	movs	r3, #7
 8001cde:	75fb      	strb	r3, [r7, #23]
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <ld_clust>:
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	331a      	adds	r3, #26
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f955 	bl	8000fa8 <ld_word>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d109      	bne.n	8001d1e <ld_clust+0x34>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	3314      	adds	r3, #20
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f94a 	bl	8000fa8 <ld_word>
 8001d14:	4603      	mov	r3, r0
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <st_clust>:
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	331a      	adds	r3, #26
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	b292      	uxth	r2, r2
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f96d 	bl	800101e <st_word>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d109      	bne.n	8001d60 <st_clust+0x38>
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f103 0214 	add.w	r2, r3, #20
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	0c1b      	lsrs	r3, r3, #16
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f7ff f95f 	bl	800101e <st_word>
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <dir_read>:
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	2304      	movs	r3, #4
 8001d74:	75fb      	strb	r3, [r7, #23]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e03c      	b.n	8001df8 <dir_read+0x90>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	4619      	mov	r1, r3
 8001d84:	6938      	ldr	r0, [r7, #16]
 8001d86:	f7ff fa94 	bl	80012b2 <move_window>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	75fb      	strb	r3, [r7, #23]
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d136      	bne.n	8001e02 <dir_read+0x9a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <dir_read+0x40>
 8001da2:	2304      	movs	r3, #4
 8001da4:	75fb      	strb	r3, [r7, #23]
 8001da6:	e031      	b.n	8001e0c <dir_read+0xa4>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	330b      	adds	r3, #11
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db4:	73bb      	strb	r3, [r7, #14]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7bba      	ldrb	r2, [r7, #14]
 8001dba:	719a      	strb	r2, [r3, #6]
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2be5      	cmp	r3, #229	; 0xe5
 8001dc0:	d011      	beq.n	8001de6 <dir_read+0x7e>
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8001dc6:	d00e      	beq.n	8001de6 <dir_read+0x7e>
 8001dc8:	7bbb      	ldrb	r3, [r7, #14]
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	d00b      	beq.n	8001de6 <dir_read+0x7e>
 8001dce:	7bbb      	ldrb	r3, [r7, #14]
 8001dd0:	f023 0320 	bic.w	r3, r3, #32
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00f      	beq.n	8001e06 <dir_read+0x9e>
 8001de6:	2100      	movs	r1, #0
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fea1 	bl	8001b30 <dir_next>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d108      	bne.n	8001e0a <dir_read+0xa2>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1be      	bne.n	8001d7e <dir_read+0x16>
 8001e00:	e004      	b.n	8001e0c <dir_read+0xa4>
 8001e02:	bf00      	nop
 8001e04:	e002      	b.n	8001e0c <dir_read+0xa4>
 8001e06:	bf00      	nop
 8001e08:	e000      	b.n	8001e0c <dir_read+0xa4>
 8001e0a:	bf00      	nop
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <dir_read+0xb0>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <dir_find>:
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	2100      	movs	r1, #0
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fe01 	bl	8001a3a <dir_sdi>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	75fb      	strb	r3, [r7, #23]
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <dir_find+0x24>
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	e03e      	b.n	8001ec4 <dir_find+0xa2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6938      	ldr	r0, [r7, #16]
 8001e4e:	f7ff fa30 	bl	80012b2 <move_window>
 8001e52:	4603      	mov	r3, r0
 8001e54:	75fb      	strb	r3, [r7, #23]
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d12f      	bne.n	8001ebc <dir_find+0x9a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <dir_find+0x4e>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	75fb      	strb	r3, [r7, #23]
 8001e6e:	e028      	b.n	8001ec2 <dir_find+0xa0>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	330b      	adds	r3, #11
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	719a      	strb	r2, [r3, #6]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	330b      	adds	r3, #11
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <dir_find+0x86>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69d8      	ldr	r0, [r3, #28]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3320      	adds	r3, #32
 8001e9a:	220b      	movs	r2, #11
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f7ff f940 	bl	8001122 <mem_cmp>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00b      	beq.n	8001ec0 <dir_find+0x9e>
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fe40 	bl	8001b30 <dir_next>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	75fb      	strb	r3, [r7, #23]
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0c5      	beq.n	8001e46 <dir_find+0x24>
 8001eba:	e002      	b.n	8001ec2 <dir_find+0xa0>
 8001ebc:	bf00      	nop
 8001ebe:	e000      	b.n	8001ec2 <dir_find+0xa0>
 8001ec0:	bf00      	nop
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <dir_register>:
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	2101      	movs	r1, #1
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff febd 	bl	8001c5c <dir_alloc>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d11c      	bne.n	8001f26 <dir_register+0x5a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	68b8      	ldr	r0, [r7, #8]
 8001ef4:	f7ff f9dd 	bl	80012b2 <move_window>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d111      	bne.n	8001f26 <dir_register+0x5a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	2220      	movs	r2, #32
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f8ef 	bl	80010ee <mem_set>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69d8      	ldr	r0, [r3, #28]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3320      	adds	r3, #32
 8001f18:	220b      	movs	r2, #11
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7ff f8c6 	bl	80010ac <mem_cpy>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2201      	movs	r2, #1
 8001f24:	70da      	strb	r2, [r3, #3]
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <get_fileinfo>:
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	725a      	strb	r2, [r3, #9]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d052      	beq.n	8001fee <get_fileinfo+0xbe>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e021      	b.n	8001f96 <get_fileinfo+0x66>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	1c59      	adds	r1, r3, #1
 8001f5a:	6179      	str	r1, [r7, #20]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	73fb      	strb	r3, [r7, #15]
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d100      	bne.n	8001f6a <get_fileinfo+0x3a>
 8001f68:	e015      	b.n	8001f96 <get_fileinfo+0x66>
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d101      	bne.n	8001f74 <get_fileinfo+0x44>
 8001f70:	23e5      	movs	r3, #229	; 0xe5
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b09      	cmp	r3, #9
 8001f78:	d106      	bne.n	8001f88 <get_fileinfo+0x58>
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	613a      	str	r2, [r7, #16]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	222e      	movs	r2, #46	; 0x2e
 8001f86:	725a      	strb	r2, [r3, #9]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	613a      	str	r2, [r7, #16]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	725a      	strb	r2, [r3, #9]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b0a      	cmp	r3, #10
 8001f9a:	d9da      	bls.n	8001f52 <get_fileinfo+0x22>
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3309      	adds	r3, #9
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	7ada      	ldrb	r2, [r3, #11]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	721a      	strb	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	331c      	adds	r3, #28
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff f80d 	bl	8000fd8 <ld_dword>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	3316      	adds	r3, #22
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe ffec 	bl	8000fa8 <ld_word>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	80da      	strh	r2, [r3, #6]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	3318      	adds	r3, #24
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe ffe2 	bl	8000fa8 <ld_word>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	809a      	strh	r2, [r3, #4]
 8001fec:	e000      	b.n	8001ff0 <get_fileinfo+0xc0>
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <create_name>:
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3320      	adds	r3, #32
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	220b      	movs	r2, #11
 8002010:	2120      	movs	r1, #32
 8002012:	6938      	ldr	r0, [r7, #16]
 8002014:	f7ff f86b 	bl	80010ee <mem_set>
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	2308      	movs	r3, #8
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	61fa      	str	r2, [r7, #28]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002038:	2b20      	cmp	r3, #32
 800203a:	d97c      	bls.n	8002136 <create_name+0x13e>
 800203c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002040:	2b2f      	cmp	r3, #47	; 0x2f
 8002042:	d007      	beq.n	8002054 <create_name+0x5c>
 8002044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002048:	2b5c      	cmp	r3, #92	; 0x5c
 800204a:	d110      	bne.n	800206e <create_name+0x76>
 800204c:	e002      	b.n	8002054 <create_name+0x5c>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3301      	adds	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b2f      	cmp	r3, #47	; 0x2f
 800205e:	d0f6      	beq.n	800204e <create_name+0x56>
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4413      	add	r3, r2
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b5c      	cmp	r3, #92	; 0x5c
 800206a:	d0f0      	beq.n	800204e <create_name+0x56>
 800206c:	e064      	b.n	8002138 <create_name+0x140>
 800206e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002072:	2b2e      	cmp	r3, #46	; 0x2e
 8002074:	d003      	beq.n	800207e <create_name+0x86>
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	429a      	cmp	r2, r3
 800207c:	d30d      	bcc.n	800209a <create_name+0xa2>
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2b0b      	cmp	r3, #11
 8002082:	d003      	beq.n	800208c <create_name+0x94>
 8002084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002088:	2b2e      	cmp	r3, #46	; 0x2e
 800208a:	d001      	beq.n	8002090 <create_name+0x98>
 800208c:	2306      	movs	r3, #6
 800208e:	e06f      	b.n	8002170 <create_name+0x178>
 8002090:	2308      	movs	r3, #8
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	230b      	movs	r3, #11
 8002096:	623b      	str	r3, [r7, #32]
 8002098:	e04c      	b.n	8002134 <create_name+0x13c>
 800209a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f881 	bl	80011a6 <dbc_1st>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d024      	beq.n	80020f4 <create_name+0xfc>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	61fa      	str	r2, [r7, #28]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4413      	add	r3, r2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff f893 	bl	80011e6 <dbc_2nd>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <create_name+0xd8>
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d301      	bcc.n	80020d4 <create_name+0xdc>
 80020d0:	2306      	movs	r3, #6
 80020d2:	e04d      	b.n	8002170 <create_name+0x178>
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	61ba      	str	r2, [r7, #24]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	61ba      	str	r2, [r7, #24]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e797      	b.n	8002024 <create_name+0x2c>
 80020f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020f8:	4619      	mov	r1, r3
 80020fa:	481f      	ldr	r0, [pc, #124]	; (8002178 <create_name+0x180>)
 80020fc:	f7ff f838 	bl	8001170 <chk_chr>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <create_name+0x112>
 8002106:	2306      	movs	r3, #6
 8002108:	e032      	b.n	8002170 <create_name+0x178>
 800210a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800210e:	2b60      	cmp	r3, #96	; 0x60
 8002110:	d908      	bls.n	8002124 <create_name+0x12c>
 8002112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002116:	2b7a      	cmp	r3, #122	; 0x7a
 8002118:	d804      	bhi.n	8002124 <create_name+0x12c>
 800211a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800211e:	3b20      	subs	r3, #32
 8002120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	61ba      	str	r2, [r7, #24]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	e776      	b.n	8002024 <create_name+0x2c>
 8002136:	bf00      	nop
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	441a      	add	r2, r3
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <create_name+0x154>
 8002148:	2306      	movs	r3, #6
 800214a:	e011      	b.n	8002170 <create_name+0x178>
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2be5      	cmp	r3, #229	; 0xe5
 8002152:	d102      	bne.n	800215a <create_name+0x162>
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2205      	movs	r2, #5
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800215e:	2b20      	cmp	r3, #32
 8002160:	d801      	bhi.n	8002166 <create_name+0x16e>
 8002162:	2204      	movs	r2, #4
 8002164:	e000      	b.n	8002168 <create_name+0x170>
 8002166:	2200      	movs	r2, #0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	330b      	adds	r3, #11
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	4618      	mov	r0, r3
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	08007f68 	.word	0x08007f68

0800217c <follow_path>:
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	e002      	b.n	8002194 <follow_path+0x18>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b2f      	cmp	r3, #47	; 0x2f
 800219a:	d0f8      	beq.n	800218e <follow_path+0x12>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b5c      	cmp	r3, #92	; 0x5c
 80021a2:	d0f4      	beq.n	800218e <follow_path+0x12>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b1f      	cmp	r3, #31
 80021b0:	d80a      	bhi.n	80021c8 <follow_path+0x4c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 80021ba:	2100      	movs	r1, #0
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fc3c 	bl	8001a3a <dir_sdi>
 80021c2:	4603      	mov	r3, r0
 80021c4:	75fb      	strb	r3, [r7, #23]
 80021c6:	e043      	b.n	8002250 <follow_path+0xd4>
 80021c8:	463b      	mov	r3, r7
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff13 	bl	8001ff8 <create_name>
 80021d2:	4603      	mov	r3, r0
 80021d4:	75fb      	strb	r3, [r7, #23]
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d134      	bne.n	8002246 <follow_path+0xca>
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fe20 	bl	8001e22 <dir_find>
 80021e2:	4603      	mov	r3, r0
 80021e4:	75fb      	strb	r3, [r7, #23]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <follow_path+0x8e>
 80021f4:	7dfb      	ldrb	r3, [r7, #23]
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d127      	bne.n	800224a <follow_path+0xce>
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d122      	bne.n	800224a <follow_path+0xce>
 8002204:	2305      	movs	r3, #5
 8002206:	75fb      	strb	r3, [r7, #23]
 8002208:	e01f      	b.n	800224a <follow_path+0xce>
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d11c      	bne.n	800224e <follow_path+0xd2>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	799b      	ldrb	r3, [r3, #6]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <follow_path+0xaa>
 8002220:	2305      	movs	r3, #5
 8002222:	75fb      	strb	r3, [r7, #23]
 8002224:	e014      	b.n	8002250 <follow_path+0xd4>
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002234:	4413      	add	r3, r2
 8002236:	4619      	mov	r1, r3
 8002238:	6938      	ldr	r0, [r7, #16]
 800223a:	f7ff fd56 	bl	8001cea <ld_clust>
 800223e:	4602      	mov	r2, r0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	e7c0      	b.n	80021c8 <follow_path+0x4c>
 8002246:	bf00      	nop
 8002248:	e002      	b.n	8002250 <follow_path+0xd4>
 800224a:	bf00      	nop
 800224c:	e000      	b.n	8002250 <follow_path+0xd4>
 800224e:	bf00      	nop
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <get_ldnumber>:
 800225a:	b480      	push	{r7}
 800225c:	b089      	sub	sp, #36	; 0x24
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <get_ldnumber+0x22>
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	e02d      	b.n	80022d8 <get_ldnumber+0x7e>
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	61fa      	str	r2, [r7, #28]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	2b20      	cmp	r3, #32
 800228a:	d902      	bls.n	8002292 <get_ldnumber+0x38>
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	2b3a      	cmp	r3, #58	; 0x3a
 8002290:	d1f4      	bne.n	800227c <get_ldnumber+0x22>
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	2b3a      	cmp	r3, #58	; 0x3a
 8002296:	d11c      	bne.n	80022d2 <get_ldnumber+0x78>
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b2f      	cmp	r3, #47	; 0x2f
 80022a2:	d90c      	bls.n	80022be <get_ldnumber+0x64>
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b39      	cmp	r3, #57	; 0x39
 80022aa:	d808      	bhi.n	80022be <get_ldnumber+0x64>
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	3302      	adds	r3, #2
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d103      	bne.n	80022be <get_ldnumber+0x64>
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	3b30      	subs	r3, #48	; 0x30
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	dc04      	bgt.n	80022ce <get_ldnumber+0x74>
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	e002      	b.n	80022d8 <get_ldnumber+0x7e>
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	4618      	mov	r0, r3
 80022da:	3724      	adds	r7, #36	; 0x24
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <check_fs>:
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	70da      	strb	r2, [r3, #3]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f04f 32ff 	mov.w	r2, #4294967295
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80022fc:	6839      	ldr	r1, [r7, #0]
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe ffd7 	bl	80012b2 <move_window>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <check_fs+0x2a>
 800230a:	2304      	movs	r3, #4
 800230c:	e038      	b.n	8002380 <check_fs+0x9c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3330      	adds	r3, #48	; 0x30
 8002312:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe fe46 	bl	8000fa8 <ld_word>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <check_fs+0x48>
 8002328:	2303      	movs	r3, #3
 800232a:	e029      	b.n	8002380 <check_fs+0x9c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002332:	2be9      	cmp	r3, #233	; 0xe9
 8002334:	d009      	beq.n	800234a <check_fs+0x66>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800233c:	2beb      	cmp	r3, #235	; 0xeb
 800233e:	d004      	beq.n	800234a <check_fs+0x66>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002346:	2be8      	cmp	r3, #232	; 0xe8
 8002348:	d119      	bne.n	800237e <check_fs+0x9a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3330      	adds	r3, #48	; 0x30
 800234e:	3336      	adds	r3, #54	; 0x36
 8002350:	2203      	movs	r2, #3
 8002352:	490d      	ldr	r1, [pc, #52]	; (8002388 <check_fs+0xa4>)
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fee4 	bl	8001122 <mem_cmp>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <check_fs+0x80>
 8002360:	2300      	movs	r3, #0
 8002362:	e00d      	b.n	8002380 <check_fs+0x9c>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3330      	adds	r3, #48	; 0x30
 8002368:	3352      	adds	r3, #82	; 0x52
 800236a:	2205      	movs	r2, #5
 800236c:	4907      	ldr	r1, [pc, #28]	; (800238c <check_fs+0xa8>)
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fed7 	bl	8001122 <mem_cmp>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <check_fs+0x9a>
 800237a:	2300      	movs	r3, #0
 800237c:	e000      	b.n	8002380 <check_fs+0x9c>
 800237e:	2302      	movs	r3, #2
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	08007f78 	.word	0x08007f78
 800238c:	08007f7c 	.word	0x08007f7c

08002390 <find_volume>:
 8002390:	b580      	push	{r7, lr}
 8002392:	b096      	sub	sp, #88	; 0x58
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff ff58 	bl	800225a <get_ldnumber>
 80023aa:	63f8      	str	r0, [r7, #60]	; 0x3c
 80023ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	da01      	bge.n	80023b6 <find_volume+0x26>
 80023b2:	230b      	movs	r3, #11
 80023b4:	e238      	b.n	8002828 <find_volume+0x498>
 80023b6:	4aa8      	ldr	r2, [pc, #672]	; (8002658 <find_volume+0x2c8>)
 80023b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <find_volume+0x3a>
 80023c6:	230c      	movs	r3, #12
 80023c8:	e22e      	b.n	8002828 <find_volume+0x498>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	71fb      	strb	r3, [r7, #7]
 80023d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01a      	beq.n	8002416 <find_volume+0x86>
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fb13 	bl	8000a10 <disk_status>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10c      	bne.n	8002416 <find_volume+0x86>
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <find_volume+0x82>
 8002402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <find_volume+0x82>
 800240e:	230a      	movs	r3, #10
 8002410:	e20a      	b.n	8002828 <find_volume+0x498>
 8002412:	2300      	movs	r3, #0
 8002414:	e208      	b.n	8002828 <find_volume+0x498>
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241e:	b2da      	uxtb	r2, r3
 8002420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002422:	705a      	strb	r2, [r3, #1]
 8002424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fa07 	bl	800083c <disk_initialize>
 800242e:	4603      	mov	r3, r0
 8002430:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <find_volume+0xb4>
 8002440:	2303      	movs	r3, #3
 8002442:	e1f1      	b.n	8002828 <find_volume+0x498>
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <find_volume+0xca>
 800244a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <find_volume+0xca>
 8002456:	230a      	movs	r3, #10
 8002458:	e1e6      	b.n	8002828 <find_volume+0x498>
 800245a:	2300      	movs	r3, #0
 800245c:	653b      	str	r3, [r7, #80]	; 0x50
 800245e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002462:	f7ff ff3f 	bl	80022e4 <check_fs>
 8002466:	4603      	mov	r3, r0
 8002468:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800246c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002470:	2b02      	cmp	r3, #2
 8002472:	d14b      	bne.n	800250c <find_volume+0x17c>
 8002474:	2300      	movs	r3, #0
 8002476:	643b      	str	r3, [r7, #64]	; 0x40
 8002478:	e01f      	b.n	80024ba <find_volume+0x12a>
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002488:	4413      	add	r3, r2
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	3304      	adds	r3, #4
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <find_volume+0x114>
 8002496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002498:	3308      	adds	r3, #8
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fd9c 	bl	8000fd8 <ld_dword>
 80024a0:	4602      	mov	r2, r0
 80024a2:	e000      	b.n	80024a6 <find_volume+0x116>
 80024a4:	2200      	movs	r2, #0
 80024a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80024ae:	440b      	add	r3, r1
 80024b0:	f843 2c44 	str.w	r2, [r3, #-68]
 80024b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b6:	3301      	adds	r3, #1
 80024b8:	643b      	str	r3, [r7, #64]	; 0x40
 80024ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d9dc      	bls.n	800247a <find_volume+0xea>
 80024c0:	2300      	movs	r3, #0
 80024c2:	643b      	str	r3, [r7, #64]	; 0x40
 80024c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <find_volume+0x140>
 80024ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024cc:	3b01      	subs	r3, #1
 80024ce:	643b      	str	r3, [r7, #64]	; 0x40
 80024d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80024d8:	4413      	add	r3, r2
 80024da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80024de:	653b      	str	r3, [r7, #80]	; 0x50
 80024e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <find_volume+0x162>
 80024e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80024e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80024ea:	f7ff fefb 	bl	80022e4 <check_fs>
 80024ee:	4603      	mov	r3, r0
 80024f0:	e000      	b.n	80024f4 <find_volume+0x164>
 80024f2:	2303      	movs	r3, #3
 80024f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80024f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d905      	bls.n	800250c <find_volume+0x17c>
 8002500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002502:	3301      	adds	r3, #1
 8002504:	643b      	str	r3, [r7, #64]	; 0x40
 8002506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002508:	2b03      	cmp	r3, #3
 800250a:	d9e1      	bls.n	80024d0 <find_volume+0x140>
 800250c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002510:	2b04      	cmp	r3, #4
 8002512:	d101      	bne.n	8002518 <find_volume+0x188>
 8002514:	2301      	movs	r3, #1
 8002516:	e187      	b.n	8002828 <find_volume+0x498>
 8002518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800251c:	2b01      	cmp	r3, #1
 800251e:	d901      	bls.n	8002524 <find_volume+0x194>
 8002520:	230d      	movs	r3, #13
 8002522:	e181      	b.n	8002828 <find_volume+0x498>
 8002524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002526:	3330      	adds	r3, #48	; 0x30
 8002528:	330b      	adds	r3, #11
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fd3c 	bl	8000fa8 <ld_word>
 8002530:	4603      	mov	r3, r0
 8002532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002536:	d001      	beq.n	800253c <find_volume+0x1ac>
 8002538:	230d      	movs	r3, #13
 800253a:	e175      	b.n	8002828 <find_volume+0x498>
 800253c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253e:	3330      	adds	r3, #48	; 0x30
 8002540:	3316      	adds	r3, #22
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fd30 	bl	8000fa8 <ld_word>
 8002548:	4603      	mov	r3, r0
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800254c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <find_volume+0x1d0>
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	3330      	adds	r3, #48	; 0x30
 8002556:	3324      	adds	r3, #36	; 0x24
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fd3d 	bl	8000fd8 <ld_dword>
 800255e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002564:	619a      	str	r2, [r3, #24]
 8002566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002568:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256e:	709a      	strb	r2, [r3, #2]
 8002570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002572:	789b      	ldrb	r3, [r3, #2]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d005      	beq.n	8002584 <find_volume+0x1f4>
 8002578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257a:	789b      	ldrb	r3, [r3, #2]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d001      	beq.n	8002584 <find_volume+0x1f4>
 8002580:	230d      	movs	r3, #13
 8002582:	e151      	b.n	8002828 <find_volume+0x498>
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	789b      	ldrb	r3, [r3, #2]
 8002588:	461a      	mov	r2, r3
 800258a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002598:	b29a      	uxth	r2, r3
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	815a      	strh	r2, [r3, #10]
 800259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a0:	895b      	ldrh	r3, [r3, #10]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <find_volume+0x228>
 80025a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a8:	895b      	ldrh	r3, [r3, #10]
 80025aa:	461a      	mov	r2, r3
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	895b      	ldrh	r3, [r3, #10]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <find_volume+0x22c>
 80025b8:	230d      	movs	r3, #13
 80025ba:	e135      	b.n	8002828 <find_volume+0x498>
 80025bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025be:	3330      	adds	r3, #48	; 0x30
 80025c0:	3311      	adds	r3, #17
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fcf0 	bl	8000fa8 <ld_word>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ce:	811a      	strh	r2, [r3, #8]
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	891b      	ldrh	r3, [r3, #8]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <find_volume+0x252>
 80025de:	230d      	movs	r3, #13
 80025e0:	e122      	b.n	8002828 <find_volume+0x498>
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	3330      	adds	r3, #48	; 0x30
 80025e6:	3313      	adds	r3, #19
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fcdd 	bl	8000fa8 <ld_word>
 80025ee:	4603      	mov	r3, r0
 80025f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80025f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <find_volume+0x276>
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	3330      	adds	r3, #48	; 0x30
 80025fc:	3320      	adds	r3, #32
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fcea 	bl	8000fd8 <ld_dword>
 8002604:	64b8      	str	r0, [r7, #72]	; 0x48
 8002606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002608:	3330      	adds	r3, #48	; 0x30
 800260a:	330e      	adds	r3, #14
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fccb 	bl	8000fa8 <ld_word>
 8002612:	4603      	mov	r3, r0
 8002614:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002616:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <find_volume+0x290>
 800261c:	230d      	movs	r3, #13
 800261e:	e103      	b.n	8002828 <find_volume+0x498>
 8002620:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002624:	4413      	add	r3, r2
 8002626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002628:	8912      	ldrh	r2, [r2, #8]
 800262a:	0912      	lsrs	r2, r2, #4
 800262c:	b292      	uxth	r2, r2
 800262e:	4413      	add	r3, r2
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
 8002632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	429a      	cmp	r2, r3
 8002638:	d201      	bcs.n	800263e <find_volume+0x2ae>
 800263a:	230d      	movs	r3, #13
 800263c:	e0f4      	b.n	8002828 <find_volume+0x498>
 800263e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002646:	8952      	ldrh	r2, [r2, #10]
 8002648:	fbb3 f3f2 	udiv	r3, r3, r2
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <find_volume+0x2cc>
 8002654:	230d      	movs	r3, #13
 8002656:	e0e7      	b.n	8002828 <find_volume+0x498>
 8002658:	2000009c 	.word	0x2000009c
 800265c:	2300      	movs	r3, #0
 800265e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	4a72      	ldr	r2, [pc, #456]	; (8002830 <find_volume+0x4a0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d802      	bhi.n	8002670 <find_volume+0x2e0>
 800266a:	2303      	movs	r3, #3
 800266c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002676:	4293      	cmp	r3, r2
 8002678:	d802      	bhi.n	8002680 <find_volume+0x2f0>
 800267a:	2302      	movs	r3, #2
 800267c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002686:	4293      	cmp	r3, r2
 8002688:	d802      	bhi.n	8002690 <find_volume+0x300>
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <find_volume+0x30c>
 8002698:	230d      	movs	r3, #13
 800269a:	e0c5      	b.n	8002828 <find_volume+0x498>
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	1c9a      	adds	r2, r3, #2
 80026a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a2:	615a      	str	r2, [r3, #20]
 80026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026a8:	61da      	str	r2, [r3, #28]
 80026aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80026ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ae:	441a      	add	r2, r3
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	621a      	str	r2, [r3, #32]
 80026b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	441a      	add	r2, r3
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	629a      	str	r2, [r3, #40]	; 0x28
 80026be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d11e      	bne.n	8002704 <find_volume+0x374>
 80026c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c8:	3330      	adds	r3, #48	; 0x30
 80026ca:	332a      	adds	r3, #42	; 0x2a
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fc6b 	bl	8000fa8 <ld_word>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <find_volume+0x34c>
 80026d8:	230d      	movs	r3, #13
 80026da:	e0a5      	b.n	8002828 <find_volume+0x498>
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	891b      	ldrh	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <find_volume+0x358>
 80026e4:	230d      	movs	r3, #13
 80026e6:	e09f      	b.n	8002828 <find_volume+0x498>
 80026e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ea:	3330      	adds	r3, #48	; 0x30
 80026ec:	332c      	adds	r3, #44	; 0x2c
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fc72 	bl	8000fd8 <ld_dword>
 80026f4:	4602      	mov	r2, r0
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
 80026fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	647b      	str	r3, [r7, #68]	; 0x44
 8002702:	e01f      	b.n	8002744 <find_volume+0x3b4>
 8002704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002706:	891b      	ldrh	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <find_volume+0x380>
 800270c:	230d      	movs	r3, #13
 800270e:	e08b      	b.n	8002828 <find_volume+0x498>
 8002710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002712:	6a1a      	ldr	r2, [r3, #32]
 8002714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002716:	441a      	add	r2, r3
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
 800271c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002720:	2b02      	cmp	r3, #2
 8002722:	d103      	bne.n	800272c <find_volume+0x39c>
 8002724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	e00a      	b.n	8002742 <find_volume+0x3b2>
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	085a      	lsrs	r2, r3, #1
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	647b      	str	r3, [r7, #68]	; 0x44
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	699a      	ldr	r2, [r3, #24]
 8002748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800274a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800274e:	0a5b      	lsrs	r3, r3, #9
 8002750:	429a      	cmp	r2, r3
 8002752:	d201      	bcs.n	8002758 <find_volume+0x3c8>
 8002754:	230d      	movs	r3, #13
 8002756:	e067      	b.n	8002828 <find_volume+0x498>
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	f04f 32ff 	mov.w	r2, #4294967295
 800275e:	611a      	str	r2, [r3, #16]
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	60da      	str	r2, [r3, #12]
 8002768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	711a      	strb	r2, [r3, #4]
 800276e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002772:	2b03      	cmp	r3, #3
 8002774:	d149      	bne.n	800280a <find_volume+0x47a>
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	3330      	adds	r3, #48	; 0x30
 800277a:	3330      	adds	r3, #48	; 0x30
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fc13 	bl	8000fa8 <ld_word>
 8002782:	4603      	mov	r3, r0
 8002784:	2b01      	cmp	r3, #1
 8002786:	d140      	bne.n	800280a <find_volume+0x47a>
 8002788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278a:	3301      	adds	r3, #1
 800278c:	4619      	mov	r1, r3
 800278e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002790:	f7fe fd8f 	bl	80012b2 <move_window>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d137      	bne.n	800280a <find_volume+0x47a>
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	2200      	movs	r2, #0
 800279e:	711a      	strb	r2, [r3, #4]
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	3330      	adds	r3, #48	; 0x30
 80027a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fbfd 	bl	8000fa8 <ld_word>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d127      	bne.n	800280a <find_volume+0x47a>
 80027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027bc:	3330      	adds	r3, #48	; 0x30
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fc0a 	bl	8000fd8 <ld_dword>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <find_volume+0x4a4>)
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d11e      	bne.n	800280a <find_volume+0x47a>
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	3330      	adds	r3, #48	; 0x30
 80027d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fbff 	bl	8000fd8 <ld_dword>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b16      	ldr	r3, [pc, #88]	; (8002838 <find_volume+0x4a8>)
 80027de:	429a      	cmp	r2, r3
 80027e0:	d113      	bne.n	800280a <find_volume+0x47a>
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	3330      	adds	r3, #48	; 0x30
 80027e6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fbf4 	bl	8000fd8 <ld_dword>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	611a      	str	r2, [r3, #16]
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f8:	3330      	adds	r3, #48	; 0x30
 80027fa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fbea 	bl	8000fd8 <ld_dword>
 8002804:	4602      	mov	r2, r0
 8002806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <find_volume+0x4ac>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <find_volume+0x4ac>)
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <find_volume+0x4ac>)
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	80da      	strh	r2, [r3, #6]
 8002826:	2300      	movs	r3, #0
 8002828:	4618      	mov	r0, r3
 800282a:	3758      	adds	r7, #88	; 0x58
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	0ffffff5 	.word	0x0ffffff5
 8002834:	41615252 	.word	0x41615252
 8002838:	61417272 	.word	0x61417272
 800283c:	200000a0 	.word	0x200000a0

08002840 <validate>:
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	2309      	movs	r3, #9
 800284c:	73fb      	strb	r3, [r7, #15]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01c      	beq.n	800288e <validate+0x4e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d018      	beq.n	800288e <validate+0x4e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d013      	beq.n	800288e <validate+0x4e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	889a      	ldrh	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	88db      	ldrh	r3, [r3, #6]
 8002870:	429a      	cmp	r2, r3
 8002872:	d10c      	bne.n	800288e <validate+0x4e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	785b      	ldrb	r3, [r3, #1]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe f8c8 	bl	8000a10 <disk_status>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <validate+0x4e>
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <validate+0x5a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	e000      	b.n	800289c <validate+0x5c>
 800289a:	2300      	movs	r3, #0
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <f_mount>:
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	4613      	mov	r3, r2
 80028b8:	71fb      	strb	r3, [r7, #7]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fcc9 	bl	800225a <get_ldnumber>
 80028c8:	61f8      	str	r0, [r7, #28]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da01      	bge.n	80028d4 <f_mount+0x28>
 80028d0:	230b      	movs	r3, #11
 80028d2:	e025      	b.n	8002920 <f_mount+0x74>
 80028d4:	4a14      	ldr	r2, [pc, #80]	; (8002928 <f_mount+0x7c>)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <f_mount+0x3e>
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <f_mount+0x4a>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	490b      	ldr	r1, [pc, #44]	; (8002928 <f_mount+0x7c>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <f_mount+0x5e>
 8002906:	2300      	movs	r3, #0
 8002908:	e00a      	b.n	8002920 <f_mount+0x74>
 800290a:	f107 010c 	add.w	r1, r7, #12
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	2200      	movs	r2, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fd3b 	bl	8002390 <find_volume>
 800291a:	4603      	mov	r3, r0
 800291c:	75fb      	strb	r3, [r7, #23]
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	4618      	mov	r0, r3
 8002922:	3720      	adds	r7, #32
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000009c 	.word	0x2000009c

0800292c <f_open>:
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b099      	sub	sp, #100	; 0x64
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	71fb      	strb	r3, [r7, #7]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <f_open+0x18>
 8002940:	2309      	movs	r3, #9
 8002942:	e172      	b.n	8002c2a <f_open+0x2fe>
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	79fa      	ldrb	r2, [r7, #7]
 800294e:	f107 0114 	add.w	r1, r7, #20
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fd1a 	bl	8002390 <find_volume>
 800295c:	4603      	mov	r3, r0
 800295e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 8156 	bne.w	8002c18 <f_open+0x2ec>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	61bb      	str	r3, [r7, #24]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	f107 0318 	add.w	r3, r7, #24
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fbff 	bl	800217c <follow_path>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002984:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002988:	2b00      	cmp	r3, #0
 800298a:	d107      	bne.n	800299c <f_open+0x70>
 800298c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002990:	b25b      	sxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	da02      	bge.n	800299c <f_open+0x70>
 8002996:	2306      	movs	r3, #6
 8002998:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 031c 	and.w	r3, r3, #28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d073      	beq.n	8002a8e <f_open+0x162>
 80029a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d010      	beq.n	80029d0 <f_open+0xa4>
 80029ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d107      	bne.n	80029c6 <f_open+0x9a>
 80029b6:	f107 0318 	add.w	r3, r7, #24
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fa86 	bl	8001ecc <dir_register>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f043 0308 	orr.w	r3, r3, #8
 80029cc:	71fb      	strb	r3, [r7, #7]
 80029ce:	e010      	b.n	80029f2 <f_open+0xc6>
 80029d0:	7fbb      	ldrb	r3, [r7, #30]
 80029d2:	f003 0311 	and.w	r3, r3, #17
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <f_open+0xb6>
 80029da:	2307      	movs	r3, #7
 80029dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029e0:	e007      	b.n	80029f2 <f_open+0xc6>
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <f_open+0xc6>
 80029ec:	2308      	movs	r3, #8
 80029ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d163      	bne.n	8002ac2 <f_open+0x196>
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d05e      	beq.n	8002ac2 <f_open+0x196>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f96d 	bl	8001cea <ld_clust>
 8002a10:	6538      	str	r0, [r7, #80]	; 0x50
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	f103 040e 	add.w	r4, r3, #14
 8002a18:	f7fe fabc 	bl	8000f94 <get_fattime>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7fe fb17 	bl	8001054 <st_dword>
 8002a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a28:	330b      	adds	r3, #11
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a32:	2200      	movs	r2, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f977 	bl	8001d28 <st_clust>
 8002a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3c:	331c      	adds	r3, #28
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe fb07 	bl	8001054 <st_dword>
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	70da      	strb	r2, [r3, #3]
 8002a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d037      	beq.n	8002ac2 <f_open+0x196>
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a58:	f107 0318 	add.w	r3, r7, #24
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fe6c 	bl	800173e <remove_chain>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d126      	bne.n	8002ac2 <f_open+0x196>
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fc1a 	bl	80012b2 <move_window>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a88:	3a01      	subs	r2, #1
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	e019      	b.n	8002ac2 <f_open+0x196>
 8002a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d115      	bne.n	8002ac2 <f_open+0x196>
 8002a96:	7fbb      	ldrb	r3, [r7, #30]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <f_open+0x17c>
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002aa6:	e00c      	b.n	8002ac2 <f_open+0x196>
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <f_open+0x196>
 8002ab2:	7fbb      	ldrb	r3, [r7, #30]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <f_open+0x196>
 8002abc:	2307      	movs	r3, #7
 8002abe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <f_open+0x1be>
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <f_open+0x1b0>
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ada:	71fb      	strb	r3, [r7, #7]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	621a      	str	r2, [r3, #32]
 8002ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
 8002aea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 8092 	bne.w	8002c18 <f_open+0x2ec>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff f8f5 	bl	8001cea <ld_clust>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b08:	331c      	adds	r3, #28
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fa64 	bl	8000fd8 <ld_dword>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	88da      	ldrh	r2, [r3, #6]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	809a      	strh	r2, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	79fa      	ldrb	r2, [r7, #7]
 8002b28:	741a      	strb	r2, [r3, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	745a      	strb	r2, [r3, #17]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3328      	adds	r3, #40	; 0x28
 8002b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fad1 	bl	80010ee <mem_set>
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d060      	beq.n	8002c18 <f_open+0x2ec>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d05c      	beq.n	8002c18 <f_open+0x2ec>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	615a      	str	r2, [r3, #20]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	895b      	ldrh	r3, [r3, #10]
 8002b6a:	025b      	lsls	r3, r3, #9
 8002b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	657b      	str	r3, [r7, #84]	; 0x54
 8002b7a:	e016      	b.n	8002baa <f_open+0x27e>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fc50 	bl	8001426 <get_fat>
 8002b86:	65b8      	str	r0, [r7, #88]	; 0x58
 8002b88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d802      	bhi.n	8002b94 <f_open+0x268>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9a:	d102      	bne.n	8002ba2 <f_open+0x276>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ba2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	657b      	str	r3, [r7, #84]	; 0x54
 8002baa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <f_open+0x28e>
 8002bb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d8e0      	bhi.n	8002b7c <f_open+0x250>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bbe:	619a      	str	r2, [r3, #24]
 8002bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d127      	bne.n	8002c18 <f_open+0x2ec>
 8002bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d022      	beq.n	8002c18 <f_open+0x2ec>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fc06 	bl	80013e8 <clst2sect>
 8002bdc:	6478      	str	r0, [r7, #68]	; 0x44
 8002bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <f_open+0x2c0>
 8002be4:	2302      	movs	r3, #2
 8002be6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002bea:	e015      	b.n	8002c18 <f_open+0x2ec>
 8002bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bee:	0a5a      	lsrs	r2, r3, #9
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf2:	441a      	add	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	61da      	str	r2, [r3, #28]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	7858      	ldrb	r0, [r3, #1]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	2301      	movs	r3, #1
 8002c08:	f7fd ff18 	bl	8000a3c <disk_read>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <f_open+0x2ec>
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <f_open+0x2fa>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3764      	adds	r7, #100	; 0x64
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd90      	pop	{r4, r7, pc}

08002c32 <f_read>:
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b08e      	sub	sp, #56	; 0x38
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f107 0214 	add.w	r2, r7, #20
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fdf4 	bl	8002840 <validate>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d107      	bne.n	8002c76 <f_read+0x44>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	7c5b      	ldrb	r3, [r3, #17]
 8002c6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <f_read+0x4a>
 8002c76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c7a:	e109      	b.n	8002e90 <f_read+0x25e>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	7c1b      	ldrb	r3, [r3, #16]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <f_read+0x5a>
 8002c88:	2307      	movs	r3, #7
 8002c8a:	e101      	b.n	8002e90 <f_read+0x25e>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f240 80f2 	bls.w	8002e86 <f_read+0x254>
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	e0ee      	b.n	8002e86 <f_read+0x254>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f040 80ba 	bne.w	8002e2a <f_read+0x1f8>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	0a5b      	lsrs	r3, r3, #9
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	8952      	ldrh	r2, [r2, #10]
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d123      	bne.n	8002d14 <f_read+0xe2>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <f_read+0xaa>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cda:	e007      	b.n	8002cec <f_read+0xba>
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f7fe fb9e 	bl	8001426 <get_fat>
 8002cea:	6338      	str	r0, [r7, #48]	; 0x30
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d804      	bhi.n	8002cfc <f_read+0xca>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	745a      	strb	r2, [r3, #17]
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e0c9      	b.n	8002e90 <f_read+0x25e>
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d104      	bne.n	8002d0e <f_read+0xdc>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	745a      	strb	r2, [r3, #17]
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0c0      	b.n	8002e90 <f_read+0x25e>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d12:	619a      	str	r2, [r3, #24]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f7fe fb63 	bl	80013e8 <clst2sect>
 8002d22:	61b8      	str	r0, [r7, #24]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d104      	bne.n	8002d34 <f_read+0x102>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	745a      	strb	r2, [r3, #17]
 8002d30:	2302      	movs	r3, #2
 8002d32:	e0ad      	b.n	8002e90 <f_read+0x25e>
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0a5b      	lsrs	r3, r3, #9
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d039      	beq.n	8002dbc <f_read+0x18a>
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	4413      	add	r3, r2
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	8952      	ldrh	r2, [r2, #10]
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d905      	bls.n	8002d62 <f_read+0x130>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	895b      	ldrh	r3, [r3, #10]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	7858      	ldrb	r0, [r3, #1]
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6c:	f7fd fe66 	bl	8000a3c <disk_read>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <f_read+0x14e>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	745a      	strb	r2, [r3, #17]
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e087      	b.n	8002e90 <f_read+0x25e>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	7c1b      	ldrb	r3, [r3, #16]
 8002d84:	b25b      	sxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	da14      	bge.n	8002db4 <f_read+0x182>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d90d      	bls.n	8002db4 <f_read+0x182>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	025b      	lsls	r3, r3, #9
 8002da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da4:	18d0      	adds	r0, r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3328      	adds	r3, #40	; 0x28
 8002daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dae:	4619      	mov	r1, r3
 8002db0:	f7fe f97c 	bl	80010ac <mem_cpy>
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dba:	e050      	b.n	8002e5e <f_read+0x22c>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d02e      	beq.n	8002e24 <f_read+0x1f2>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	7c1b      	ldrb	r3, [r3, #16]
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	da18      	bge.n	8002e02 <f_read+0x1d0>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	7858      	ldrb	r0, [r3, #1]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	2301      	movs	r3, #1
 8002de0:	f7fd fe96 	bl	8000b10 <disk_write>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d004      	beq.n	8002df4 <f_read+0x1c2>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	745a      	strb	r2, [r3, #17]
 8002df0:	2301      	movs	r3, #1
 8002df2:	e04d      	b.n	8002e90 <f_read+0x25e>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	7c1b      	ldrb	r3, [r3, #16]
 8002df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	741a      	strb	r2, [r3, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	7858      	ldrb	r0, [r3, #1]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	f7fd fe14 	bl	8000a3c <disk_read>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d004      	beq.n	8002e24 <f_read+0x1f2>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	745a      	strb	r2, [r3, #17]
 8002e20:	2301      	movs	r3, #1
 8002e22:	e035      	b.n	8002e90 <f_read+0x25e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	61da      	str	r2, [r3, #28]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e32:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d901      	bls.n	8002e44 <f_read+0x212>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e52:	4413      	add	r3, r2
 8002e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e56:	4619      	mov	r1, r3
 8002e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e5a:	f7fe f927 	bl	80010ac <mem_cpy>
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	441a      	add	r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	4413      	add	r3, r2
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	441a      	add	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	615a      	str	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f47f af0d 	bne.w	8002ca8 <f_read+0x76>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	3738      	adds	r7, #56	; 0x38
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <f_sync>:
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f107 0208 	add.w	r2, r7, #8
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fcc9 	bl	8002840 <validate>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	75fb      	strb	r3, [r7, #23]
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d168      	bne.n	8002f8a <f_sync+0xf2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7c1b      	ldrb	r3, [r3, #16]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d062      	beq.n	8002f8a <f_sync+0xf2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7c1b      	ldrb	r3, [r3, #16]
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da15      	bge.n	8002efa <f_sync+0x62>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	7858      	ldrb	r0, [r3, #1]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	2301      	movs	r3, #1
 8002ede:	f7fd fe17 	bl	8000b10 <disk_write>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <f_sync+0x54>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e04f      	b.n	8002f8c <f_sync+0xf4>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	7c1b      	ldrb	r3, [r3, #16]
 8002ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	741a      	strb	r2, [r3, #16]
 8002efa:	f7fe f84b 	bl	8000f94 <get_fattime>
 8002efe:	6138      	str	r0, [r7, #16]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f7fe f9d2 	bl	80012b2 <move_window>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	75fb      	strb	r3, [r7, #23]
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d138      	bne.n	8002f8a <f_sync+0xf2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	330b      	adds	r3, #11
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	330b      	adds	r3, #11
 8002f28:	f042 0220 	orr.w	r2, r2, #32
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	f7fe fef4 	bl	8001d28 <st_clust>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f103 021c 	add.w	r2, r3, #28
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	f7fe f881 	bl	8001054 <st_dword>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3316      	adds	r3, #22
 8002f56:	6939      	ldr	r1, [r7, #16]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe f87b 	bl	8001054 <st_dword>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3312      	adds	r3, #18
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe f85a 	bl	800101e <st_word>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	70da      	strb	r2, [r3, #3]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe f9ca 	bl	800130c <sync_fs>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	75fb      	strb	r3, [r7, #23]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7c1b      	ldrb	r3, [r3, #16]
 8002f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	741a      	strb	r2, [r3, #16]
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <f_close>:
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff7b 	bl	8002e98 <f_sync>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10e      	bne.n	8002fca <f_close+0x36>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f107 0208 	add.w	r2, r7, #8
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fc43 	bl	8002840 <validate>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	73fb      	strb	r3, [r7, #15]
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <f_close+0x36>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <f_opendir>:
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <f_opendir+0x14>
 8002fe4:	2309      	movs	r3, #9
 8002fe6:	e04a      	b.n	800307e <f_opendir+0xaa>
 8002fe8:	f107 0108 	add.w	r1, r7, #8
 8002fec:	463b      	mov	r3, r7
 8002fee:	2200      	movs	r2, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff f9cd 	bl	8002390 <find_volume>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	73fb      	strb	r3, [r7, #15]
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d137      	bne.n	8003070 <f_opendir+0x9c>
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff f8b6 	bl	800217c <follow_path>
 8003010:	4603      	mov	r3, r0
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d125      	bne.n	8003066 <f_opendir+0x92>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003020:	b25b      	sxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	db12      	blt.n	800304c <f_opendir+0x78>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	799b      	ldrb	r3, [r3, #6]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <f_opendir+0x74>
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f7fe fe55 	bl	8001cea <ld_clust>
 8003040:	4602      	mov	r2, r0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	e001      	b.n	800304c <f_opendir+0x78>
 8003048:	2305      	movs	r3, #5
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <f_opendir+0x92>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	88da      	ldrh	r2, [r3, #6]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	809a      	strh	r2, [r3, #4]
 800305a:	2100      	movs	r1, #0
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7fe fcec 	bl	8001a3a <dir_sdi>
 8003062:	4603      	mov	r3, r0
 8003064:	73fb      	strb	r3, [r7, #15]
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b04      	cmp	r3, #4
 800306a:	d101      	bne.n	8003070 <f_opendir+0x9c>
 800306c:	2305      	movs	r3, #5
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <f_opendir+0xa8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <f_readdir>:
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f107 0208 	add.w	r2, r7, #8
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fbd1 	bl	8002840 <validate>
 800309e:	4603      	mov	r3, r0
 80030a0:	73fb      	strb	r3, [r7, #15]
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d126      	bne.n	80030f6 <f_readdir+0x70>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <f_readdir+0x36>
 80030ae:	2100      	movs	r1, #0
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fe fcc2 	bl	8001a3a <dir_sdi>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]
 80030ba:	e01c      	b.n	80030f6 <f_readdir+0x70>
 80030bc:	2100      	movs	r1, #0
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fe52 	bl	8001d68 <dir_read>
 80030c4:	4603      	mov	r3, r0
 80030c6:	73fb      	strb	r3, [r7, #15]
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d101      	bne.n	80030d2 <f_readdir+0x4c>
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10e      	bne.n	80030f6 <f_readdir+0x70>
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe ff28 	bl	8001f30 <get_fileinfo>
 80030e0:	2100      	movs	r1, #0
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe fd24 	bl	8001b30 <dir_next>
 80030e8:	4603      	mov	r3, r0
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d101      	bne.n	80030f6 <f_readdir+0x70>
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <read_song>:
static void MX_TIM6_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

void read_song(){
 8003100:	b580      	push	{r7, lr}
 8003102:	b08e      	sub	sp, #56	; 0x38
 8003104:	af00      	add	r7, sp, #0
    DIR dir;
    UINT i;
    UINT z;
    static FILINFO fno;

    if(otw==0){
 8003106:	4b46      	ldr	r3, [pc, #280]	; (8003220 <read_song+0x120>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d145      	bne.n	800319a <read_song+0x9a>
		res = f_opendir(&dir, "/");
 800310e:	463b      	mov	r3, r7
 8003110:	4944      	ldr	r1, [pc, #272]	; (8003224 <read_song+0x124>)
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff5e 	bl	8002fd4 <f_opendir>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    	if (res == FR_OK) {
 800311e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003122:	2b00      	cmp	r3, #0
 8003124:	d179      	bne.n	800321a <read_song+0x11a>
  	  	  	do{
            		res = f_readdir(&dir, &fno);
 8003126:	463b      	mov	r3, r7
 8003128:	493f      	ldr	r1, [pc, #252]	; (8003228 <read_song+0x128>)
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ffab 	bl	8003086 <f_readdir>
 8003130:	4603      	mov	r3, r0
 8003132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            		if (res != FR_OK || fno.fname[0] == 0) break;
 8003136:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800313a:	2b00      	cmp	r3, #0
 800313c:	d125      	bne.n	800318a <read_song+0x8a>
 800313e:	4b3a      	ldr	r3, [pc, #232]	; (8003228 <read_song+0x128>)
 8003140:	7a5b      	ldrb	r3, [r3, #9]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d021      	beq.n	800318a <read_song+0x8a>
            		printf("%s\n", fno.fname);
 8003146:	4839      	ldr	r0, [pc, #228]	; (800322c <read_song+0x12c>)
 8003148:	f004 faee 	bl	8007728 <puts>
                	z = strlen(fno.fname);
 800314c:	4837      	ldr	r0, [pc, #220]	; (800322c <read_song+0x12c>)
 800314e:	f7fd f83b 	bl	80001c8 <strlen>
 8003152:	62f8      	str	r0, [r7, #44]	; 0x2c
                	nr_utworu++;
 8003154:	4b36      	ldr	r3, [pc, #216]	; (8003230 <read_song+0x130>)
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	4b34      	ldr	r3, [pc, #208]	; (8003230 <read_song+0x130>)
 800315e:	801a      	strh	r2, [r3, #0]
            	}
            	while((fno.fname[z-1]!='V') || (fno.fname[z-2]!='A')|| (fno.fname[z-3]!='W')) ;
 8003160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003162:	3b01      	subs	r3, #1
 8003164:	4a30      	ldr	r2, [pc, #192]	; (8003228 <read_song+0x128>)
 8003166:	4413      	add	r3, r2
 8003168:	7a5b      	ldrb	r3, [r3, #9]
 800316a:	2b56      	cmp	r3, #86	; 0x56
 800316c:	d1db      	bne.n	8003126 <read_song+0x26>
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	3b02      	subs	r3, #2
 8003172:	4a2d      	ldr	r2, [pc, #180]	; (8003228 <read_song+0x128>)
 8003174:	4413      	add	r3, r2
 8003176:	7a5b      	ldrb	r3, [r3, #9]
 8003178:	2b41      	cmp	r3, #65	; 0x41
 800317a:	d1d4      	bne.n	8003126 <read_song+0x26>
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	3b03      	subs	r3, #3
 8003180:	4a29      	ldr	r2, [pc, #164]	; (8003228 <read_song+0x128>)
 8003182:	4413      	add	r3, r2
 8003184:	7a5b      	ldrb	r3, [r3, #9]
 8003186:	2b57      	cmp	r3, #87	; 0x57
 8003188:	d1cd      	bne.n	8003126 <read_song+0x26>
  	  	  		otw=1;
 800318a:	4b25      	ldr	r3, [pc, #148]	; (8003220 <read_song+0x120>)
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
  	  	  		sprintf(utwor_poprzedni,"%s",fno.fname);
 8003190:	4926      	ldr	r1, [pc, #152]	; (800322c <read_song+0x12c>)
 8003192:	4828      	ldr	r0, [pc, #160]	; (8003234 <read_song+0x134>)
 8003194:	f004 fad0 	bl	8007738 <strcpy>
 8003198:	e03f      	b.n	800321a <read_song+0x11a>
            	}
            }

      else{
    	  sprintf(utwor_poprzedni, "%s", utwor);
 800319a:	4927      	ldr	r1, [pc, #156]	; (8003238 <read_song+0x138>)
 800319c:	4825      	ldr	r0, [pc, #148]	; (8003234 <read_song+0x134>)
 800319e:	f004 facb 	bl	8007738 <strcpy>
    	  res = f_opendir(&dir, "/");
 80031a2:	463b      	mov	r3, r7
 80031a4:	491f      	ldr	r1, [pc, #124]	; (8003224 <read_song+0x124>)
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff14 	bl	8002fd4 <f_opendir>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
           for(int i=0;i<=nr_utworu;i++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
 80031b6:	e024      	b.n	8003202 <read_song+0x102>
           {
            		res = f_readdir(&dir, &fno);
 80031b8:	463b      	mov	r3, r7
 80031ba:	491b      	ldr	r1, [pc, #108]	; (8003228 <read_song+0x128>)
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff62 	bl	8003086 <f_readdir>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            		if (res != FR_OK || fno.fname[0] == 0){
 80031c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <read_song+0xd8>
 80031d0:	4b15      	ldr	r3, [pc, #84]	; (8003228 <read_song+0x128>)
 80031d2:	7a5b      	ldrb	r3, [r3, #9]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d106      	bne.n	80031e6 <read_song+0xe6>
            			otw=0;
 80031d8:	4b11      	ldr	r3, [pc, #68]	; (8003220 <read_song+0x120>)
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
            			nr_utworu=0;
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <read_song+0x130>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	801a      	strh	r2, [r3, #0]
            			break;
 80031e4:	e013      	b.n	800320e <read_song+0x10e>
            		}
            		printf("%s\n", fno.fname);
 80031e6:	4811      	ldr	r0, [pc, #68]	; (800322c <read_song+0x12c>)
 80031e8:	f004 fa9e 	bl	8007728 <puts>
                	z = strlen(fno.fname);
 80031ec:	480f      	ldr	r0, [pc, #60]	; (800322c <read_song+0x12c>)
 80031ee:	f7fc ffeb 	bl	80001c8 <strlen>
 80031f2:	62f8      	str	r0, [r7, #44]	; 0x2c
                	sprintf(utwor,"%s",fno.fname);
 80031f4:	490d      	ldr	r1, [pc, #52]	; (800322c <read_song+0x12c>)
 80031f6:	4810      	ldr	r0, [pc, #64]	; (8003238 <read_song+0x138>)
 80031f8:	f004 fa9e 	bl	8007738 <strcpy>
           for(int i=0;i<=nr_utworu;i++)
 80031fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fe:	3301      	adds	r3, #1
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <read_song+0x130>)
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320a:	4293      	cmp	r3, r2
 800320c:	ddd4      	ble.n	80031b8 <read_song+0xb8>
            	}

            	nr_utworu++;
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <read_song+0x130>)
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <read_song+0x130>)
 8003218:	801a      	strh	r2, [r3, #0]
               	return;
            	}
	}
 800321a:	3738      	adds	r7, #56	; 0x38
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	200002dc 	.word	0x200002dc
 8003224:	08007f84 	.word	0x08007f84
 8003228:	200002e8 	.word	0x200002e8
 800322c:	200002f1 	.word	0x200002f1
 8003230:	200002e4 	.word	0x200002e4
 8003234:	200045f0 	.word	0x200045f0
 8003238:	20000490 	.word	0x20000490

0800323c <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]


		  		  value = HAL_ADC_GetValue(&hadc1);
 8003244:	4851      	ldr	r0, [pc, #324]	; (800338c <HAL_ADC_ConvCpltCallback+0x150>)
 8003246:	f001 fae4 	bl	8004812 <HAL_ADC_GetValue>
 800324a:	4603      	mov	r3, r0
 800324c:	b29a      	uxth	r2, r3
 800324e:	4b50      	ldr	r3, [pc, #320]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003250:	801a      	strh	r2, [r3, #0]

//za pierwszym ustawieniem potencjometru działa ale potem się nie zmienia
		  	  if(value>0 && value <= 410) indeks_glosnosci = 0;
 8003252:	4b4f      	ldr	r3, [pc, #316]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_ADC_ConvCpltCallback+0x30>
 800325a:	4b4d      	ldr	r3, [pc, #308]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8003262:	d803      	bhi.n	800326c <HAL_ADC_ConvCpltCallback+0x30>
 8003264:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e088      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	  else if(value>410 && value <= 819) indeks_glosnosci = 1;
 800326c:	4b48      	ldr	r3, [pc, #288]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8003274:	d908      	bls.n	8003288 <HAL_ADC_ConvCpltCallback+0x4c>
 8003276:	4b46      	ldr	r3, [pc, #280]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 800327e:	d203      	bcs.n	8003288 <HAL_ADC_ConvCpltCallback+0x4c>
 8003280:	4b44      	ldr	r3, [pc, #272]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e07a      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	  else if(value>819 && value <= 1228) indeks_glosnosci = 2;
 8003288:	4b41      	ldr	r3, [pc, #260]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003290:	d309      	bcc.n	80032a6 <HAL_ADC_ConvCpltCallback+0x6a>
 8003292:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800329a:	4293      	cmp	r3, r2
 800329c:	d803      	bhi.n	80032a6 <HAL_ADC_ConvCpltCallback+0x6a>
 800329e:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 80032a0:	2202      	movs	r2, #2
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e06b      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>1228 && value <= 1647) indeks_glosnosci = 3;
 80032a6:	4b3a      	ldr	r3, [pc, #232]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	f240 42cc 	movw	r2, #1228	; 0x4cc
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d908      	bls.n	80032c4 <HAL_ADC_ConvCpltCallback+0x88>
 80032b2:	4b37      	ldr	r3, [pc, #220]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80032ba:	d203      	bcs.n	80032c4 <HAL_ADC_ConvCpltCallback+0x88>
 80032bc:	4b35      	ldr	r3, [pc, #212]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 80032be:	2203      	movs	r2, #3
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e05c      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>1647 && value <= 2058) indeks_glosnosci = 4;
 80032c4:	4b32      	ldr	r3, [pc, #200]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80032cc:	d309      	bcc.n	80032e2 <HAL_ADC_ConvCpltCallback+0xa6>
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	f640 020a 	movw	r2, #2058	; 0x80a
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d803      	bhi.n	80032e2 <HAL_ADC_ConvCpltCallback+0xa6>
 80032da:	4b2e      	ldr	r3, [pc, #184]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 80032dc:	2204      	movs	r2, #4
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	e04d      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2058 && value <= 2467) indeks_glosnosci = 5;
 80032e2:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	f640 020a 	movw	r2, #2058	; 0x80a
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d909      	bls.n	8003302 <HAL_ADC_ConvCpltCallback+0xc6>
 80032ee:	4b28      	ldr	r3, [pc, #160]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	f640 12a3 	movw	r2, #2467	; 0x9a3
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d803      	bhi.n	8003302 <HAL_ADC_ConvCpltCallback+0xc6>
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 80032fc:	2205      	movs	r2, #5
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e03d      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2467 && value <= 2876) indeks_glosnosci = 6;
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	f640 12a3 	movw	r2, #2467	; 0x9a3
 800330a:	4293      	cmp	r3, r2
 800330c:	d909      	bls.n	8003322 <HAL_ADC_ConvCpltCallback+0xe6>
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	f640 323c 	movw	r2, #2876	; 0xb3c
 8003316:	4293      	cmp	r3, r2
 8003318:	d803      	bhi.n	8003322 <HAL_ADC_ConvCpltCallback+0xe6>
 800331a:	4b1e      	ldr	r3, [pc, #120]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 800331c:	2206      	movs	r2, #6
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e02d      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2876 && value <= 3285) indeks_glosnosci = 7;
 8003322:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	f640 323c 	movw	r2, #2876	; 0xb3c
 800332a:	4293      	cmp	r3, r2
 800332c:	d909      	bls.n	8003342 <HAL_ADC_ConvCpltCallback+0x106>
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8003336:	4293      	cmp	r3, r2
 8003338:	d803      	bhi.n	8003342 <HAL_ADC_ConvCpltCallback+0x106>
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 800333c:	2207      	movs	r2, #7
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	e01d      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>3285 && value <= 3692) indeks_glosnosci = 8;
 8003342:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	f640 42d5 	movw	r2, #3285	; 0xcd5
 800334a:	4293      	cmp	r3, r2
 800334c:	d909      	bls.n	8003362 <HAL_ADC_ConvCpltCallback+0x126>
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	f640 626c 	movw	r2, #3692	; 0xe6c
 8003356:	4293      	cmp	r3, r2
 8003358:	d803      	bhi.n	8003362 <HAL_ADC_ConvCpltCallback+0x126>
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 800335c:	2208      	movs	r2, #8
 800335e:	701a      	strb	r2, [r3, #0]
 8003360:	e00d      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>3692 && value <= 4095) indeks_glosnosci = 9;
 8003362:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	f640 626c 	movw	r2, #3692	; 0xe6c
 800336a:	4293      	cmp	r3, r2
 800336c:	d907      	bls.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003376:	d202      	bcs.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 800337a:	2209      	movs	r2, #9
 800337c:	701a      	strb	r2, [r3, #0]
		  	HAL_ADC_Start_IT(&hadc1);
 800337e:	4803      	ldr	r0, [pc, #12]	; (800338c <HAL_ADC_ConvCpltCallback+0x150>)
 8003380:	f001 f836 	bl	80043f0 <HAL_ADC_Start_IT>
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000724 	.word	0x20000724
 8003390:	200002da 	.word	0x200002da
 8003394:	200002d8 	.word	0x200002d8

08003398 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET){
 80033a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033a6:	4853      	ldr	r0, [pc, #332]	; (80034f4 <HAL_GPIO_EXTI_Callback+0x15c>)
 80033a8:	f002 f844 	bl	8005434 <HAL_GPIO_ReadPin>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_GPIO_EXTI_Callback+0x36>

		 //ciszej

		 if(indeks_glosnosci>0 && indeks_glosnosci<=9) indeks_glosnosci--;
 80033b2:	4b51      	ldr	r3, [pc, #324]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_GPIO_EXTI_Callback+0x36>
 80033ba:	4b4f      	ldr	r3, [pc, #316]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b09      	cmp	r3, #9
 80033c0:	d805      	bhi.n	80033ce <HAL_GPIO_EXTI_Callback+0x36>
 80033c2:	4b4d      	ldr	r3, [pc, #308]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4b4b      	ldr	r3, [pc, #300]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80033cc:	701a      	strb	r2, [r3, #0]

		  	}

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 80033ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033d2:	4848      	ldr	r0, [pc, #288]	; (80034f4 <HAL_GPIO_EXTI_Callback+0x15c>)
 80033d4:	f002 f82e 	bl	8005434 <HAL_GPIO_ReadPin>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d126      	bne.n	800342c <HAL_GPIO_EXTI_Callback+0x94>
			  		//prev song
			  		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
			  		HAL_TIM_Base_Stop_IT(&htim4);
 80033de:	4847      	ldr	r0, [pc, #284]	; (80034fc <HAL_GPIO_EXTI_Callback+0x164>)
 80033e0:	f003 f8e5 	bl	80065ae <HAL_TIM_Base_Stop_IT>
			  		f_close(&file);
 80033e4:	4846      	ldr	r0, [pc, #280]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 80033e6:	f7ff fdd5 	bl	8002f94 <f_close>
			  		fresult = f_open(&file, &utwor_poprzedni , FA_READ|FA_OPEN_EXISTING);
 80033ea:	2201      	movs	r2, #1
 80033ec:	4945      	ldr	r1, [pc, #276]	; (8003504 <HAL_GPIO_EXTI_Callback+0x16c>)
 80033ee:	4844      	ldr	r0, [pc, #272]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 80033f0:	f7ff fa9c 	bl	800292c <f_open>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b43      	ldr	r3, [pc, #268]	; (8003508 <HAL_GPIO_EXTI_Callback+0x170>)
 80033fa:	701a      	strb	r2, [r3, #0]
			  		f_read(&file, &buf2,16000, &bytes_read);
 80033fc:	4b43      	ldr	r3, [pc, #268]	; (800350c <HAL_GPIO_EXTI_Callback+0x174>)
 80033fe:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003402:	4943      	ldr	r1, [pc, #268]	; (8003510 <HAL_GPIO_EXTI_Callback+0x178>)
 8003404:	483e      	ldr	r0, [pc, #248]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 8003406:	f7ff fc14 	bl	8002c32 <f_read>
			  	    f_read(&file, &buf, 16000, &bytes_read);
 800340a:	4b40      	ldr	r3, [pc, #256]	; (800350c <HAL_GPIO_EXTI_Callback+0x174>)
 800340c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003410:	4940      	ldr	r1, [pc, #256]	; (8003514 <HAL_GPIO_EXTI_Callback+0x17c>)
 8003412:	483b      	ldr	r0, [pc, #236]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 8003414:	f7ff fc0d 	bl	8002c32 <f_read>
			  		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
			  		i=352;
 8003418:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <HAL_GPIO_EXTI_Callback+0x180>)
 800341a:	f44f 72b0 	mov.w	r2, #352	; 0x160
 800341e:	601a      	str	r2, [r3, #0]
			  		j=0;
 8003420:	4b3e      	ldr	r3, [pc, #248]	; (800351c <HAL_GPIO_EXTI_Callback+0x184>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
			  		HAL_TIM_Base_Start_IT(&htim4);
 8003426:	4835      	ldr	r0, [pc, #212]	; (80034fc <HAL_GPIO_EXTI_Callback+0x164>)
 8003428:	f003 f89d 	bl	8006566 <HAL_TIM_Base_Start_IT>

			}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 800342c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003430:	4830      	ldr	r0, [pc, #192]	; (80034f4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003432:	f001 ffff 	bl	8005434 <HAL_GPIO_ReadPin>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d110      	bne.n	800345e <HAL_GPIO_EXTI_Callback+0xc6>


		 //pause/start

		 if(stan==1){
 800343c:	4b38      	ldr	r3, [pc, #224]	; (8003520 <HAL_GPIO_EXTI_Callback+0x188>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d106      	bne.n	8003452 <HAL_GPIO_EXTI_Callback+0xba>

		 HAL_TIM_Base_Start_IT(&htim4);
 8003444:	482d      	ldr	r0, [pc, #180]	; (80034fc <HAL_GPIO_EXTI_Callback+0x164>)
 8003446:	f003 f88e 	bl	8006566 <HAL_TIM_Base_Start_IT>

		 stan = 0;
 800344a:	4b35      	ldr	r3, [pc, #212]	; (8003520 <HAL_GPIO_EXTI_Callback+0x188>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e005      	b.n	800345e <HAL_GPIO_EXTI_Callback+0xc6>
		 }
		 else
		 {
			 HAL_TIM_Base_Stop_IT(&htim4);
 8003452:	482a      	ldr	r0, [pc, #168]	; (80034fc <HAL_GPIO_EXTI_Callback+0x164>)
 8003454:	f003 f8ab 	bl	80065ae <HAL_TIM_Base_Stop_IT>
			 stan=1;
 8003458:	4b31      	ldr	r3, [pc, #196]	; (8003520 <HAL_GPIO_EXTI_Callback+0x188>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]
		 }

	 		}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET){
 800345e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003462:	4824      	ldr	r0, [pc, #144]	; (80034f4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003464:	f001 ffe6 	bl	8005434 <HAL_GPIO_ReadPin>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d128      	bne.n	80034c0 <HAL_GPIO_EXTI_Callback+0x128>
		 	 HAL_TIM_Base_Stop_IT(&htim4);
 800346e:	4823      	ldr	r0, [pc, #140]	; (80034fc <HAL_GPIO_EXTI_Callback+0x164>)
 8003470:	f003 f89d 	bl	80065ae <HAL_TIM_Base_Stop_IT>
		 	 	 f_close(&file);
 8003474:	4822      	ldr	r0, [pc, #136]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 8003476:	f7ff fd8d 	bl	8002f94 <f_close>
		 	 	read_song();
 800347a:	f7ff fe41 	bl	8003100 <read_song>

		 	       fresult = f_open(&file, &utwor , FA_READ|FA_OPEN_EXISTING);
 800347e:	2201      	movs	r2, #1
 8003480:	4928      	ldr	r1, [pc, #160]	; (8003524 <HAL_GPIO_EXTI_Callback+0x18c>)
 8003482:	481f      	ldr	r0, [pc, #124]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 8003484:	f7ff fa52 	bl	800292c <f_open>
 8003488:	4603      	mov	r3, r0
 800348a:	461a      	mov	r2, r3
 800348c:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <HAL_GPIO_EXTI_Callback+0x170>)
 800348e:	701a      	strb	r2, [r3, #0]
		 	       f_read(&file, &buf2,16000, &bytes_read);
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <HAL_GPIO_EXTI_Callback+0x174>)
 8003492:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003496:	491e      	ldr	r1, [pc, #120]	; (8003510 <HAL_GPIO_EXTI_Callback+0x178>)
 8003498:	4819      	ldr	r0, [pc, #100]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 800349a:	f7ff fbca 	bl	8002c32 <f_read>
		 	       f_read(&file, &buf, 16000, &bytes_read);
 800349e:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_GPIO_EXTI_Callback+0x174>)
 80034a0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80034a4:	491b      	ldr	r1, [pc, #108]	; (8003514 <HAL_GPIO_EXTI_Callback+0x17c>)
 80034a6:	4816      	ldr	r0, [pc, #88]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 80034a8:	f7ff fbc3 	bl	8002c32 <f_read>
		 		 //	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
		 		 	i=352;
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <HAL_GPIO_EXTI_Callback+0x180>)
 80034ae:	f44f 72b0 	mov.w	r2, #352	; 0x160
 80034b2:	601a      	str	r2, [r3, #0]
		 		 	j=0;
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_GPIO_EXTI_Callback+0x184>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
		 		 	 HAL_TIM_Base_Start_IT(&htim4);
 80034ba:	4810      	ldr	r0, [pc, #64]	; (80034fc <HAL_GPIO_EXTI_Callback+0x164>)
 80034bc:	f003 f853 	bl	8006566 <HAL_TIM_Base_Start_IT>

		 	}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 80034c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034c4:	480b      	ldr	r0, [pc, #44]	; (80034f4 <HAL_GPIO_EXTI_Callback+0x15c>)
 80034c6:	f001 ffb5 	bl	8005434 <HAL_GPIO_ReadPin>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_GPIO_EXTI_Callback+0x14c>

		 //glosniej

		 if(indeks_glosnosci>=0 && indeks_glosnosci<9)
 80034d0:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d805      	bhi.n	80034e4 <HAL_GPIO_EXTI_Callback+0x14c>
			 indeks_glosnosci++;
 80034d8:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80034e2:	701a      	strb	r2, [r3, #0]
			 	}
	 HAL_Delay(200);
 80034e4:	20c8      	movs	r0, #200	; 0xc8
 80034e6:	f000 ff1d 	bl	8004324 <HAL_Delay>

}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40020400 	.word	0x40020400
 80034f8:	200002d8 	.word	0x200002d8
 80034fc:	20000310 	.word	0x20000310
 8003500:	200004fc 	.word	0x200004fc
 8003504:	200045f0 	.word	0x200045f0
 8003508:	20004688 	.word	0x20004688
 800350c:	2000076c 	.word	0x2000076c
 8003510:	20000770 	.word	0x20000770
 8003514:	200000a4 	.word	0x200000a4
 8003518:	20000004 	.word	0x20000004
 800351c:	20000008 	.word	0x20000008
 8003520:	200002e0 	.word	0x200002e0
 8003524:	20000490 	.word	0x20000490

08003528 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
if(htim->Instance == TIM4)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a2c      	ldr	r2, [pc, #176]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d151      	bne.n	80035de <HAL_TIM_PeriodElapsedCallback+0xb6>
{
	if(aktualny_bufor==0){
 800353a:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d126      	bne.n	8003590 <HAL_TIM_PeriodElapsedCallback+0x68>
			HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,buf[i]);
 8003542:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003548:	5cd3      	ldrb	r3, [r2, r3]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2200      	movs	r2, #0
 800354e:	2100      	movs	r1, #0
 8003550:	4829      	ldr	r0, [pc, #164]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003552:	f001 fd8d 	bl	8005070 <HAL_DAC_SetValue>
			fresult=f_read(&file, &buf2[i],1, &bytes_read);
 8003556:	4b26      	ldr	r3, [pc, #152]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a28      	ldr	r2, [pc, #160]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800355c:	1899      	adds	r1, r3, r2
 800355e:	4b28      	ldr	r3, [pc, #160]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003560:	2201      	movs	r2, #1
 8003562:	4828      	ldr	r0, [pc, #160]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003564:	f7ff fb65 	bl	8002c32 <f_read>
 8003568:	4603      	mov	r3, r0
 800356a:	461a      	mov	r2, r3
 800356c:	4b26      	ldr	r3, [pc, #152]	; (8003608 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800356e:	701a      	strb	r2, [r3, #0]
			i++;
 8003570:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003578:	6013      	str	r3, [r2, #0]
			if(i==16000){
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003582:	d105      	bne.n	8003590 <HAL_TIM_PeriodElapsedCallback+0x68>
				aktualny_bufor = 1;
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]
				j=0;
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
				//HAL_TIM_Base_Start_IT(&htim7);*glosnosc_guziczki[indeks_glosnosci]
			}
		}

	if(aktualny_bufor==1){
 8003590:	4b16      	ldr	r3, [pc, #88]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d122      	bne.n	80035de <HAL_TIM_PeriodElapsedCallback+0xb6>
		HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,buf2[j]);
 8003598:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a17      	ldr	r2, [pc, #92]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800359e:	5cd3      	ldrb	r3, [r2, r3]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	4814      	ldr	r0, [pc, #80]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80035a8:	f001 fd62 	bl	8005070 <HAL_DAC_SetValue>

		f_read(&file, &buf[j],1, &bytes_read);
 80035ac:	4b17      	ldr	r3, [pc, #92]	; (800360c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a10      	ldr	r2, [pc, #64]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80035b2:	1899      	adds	r1, r3, r2
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	4812      	ldr	r0, [pc, #72]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80035ba:	f7ff fb3a 	bl	8002c32 <f_read>
		j++;
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3301      	adds	r3, #1
 80035c4:	4a11      	ldr	r2, [pc, #68]	; (800360c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80035c6:	6013      	str	r3, [r2, #0]
		if(j==16000){
 80035c8:	4b10      	ldr	r3, [pc, #64]	; (800360c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80035d0:	d105      	bne.n	80035de <HAL_TIM_PeriodElapsedCallback+0xb6>
			aktualny_bufor = 0;
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
			i=0;
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
			f_read(&file, &buf2, 16000, &bytes_read);
			}
	HAL_TIM_Base_Stop_IT(&htim7);
}*/

}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40000800 	.word	0x40000800
 80035ec:	200002e6 	.word	0x200002e6
 80035f0:	20000004 	.word	0x20000004
 80035f4:	200000a4 	.word	0x200000a4
 80035f8:	20004604 	.word	0x20004604
 80035fc:	20000770 	.word	0x20000770
 8003600:	2000076c 	.word	0x2000076c
 8003604:	200004fc 	.word	0x200004fc
 8003608:	20004688 	.word	0x20004688
 800360c:	20000008 	.word	0x20000008

08003610 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
	{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
			{

			// tutaj umieszczamy kod wykonywany w zależności od odebranej inf

			}
	}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003628:	f000 fe0a 	bl	8004240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800362c:	f000 f84e 	bl	80036cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003630:	f000 fa48 	bl	8003ac4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003634:	f000 f8b4 	bl	80037a0 <MX_ADC1_Init>
  MX_DAC_Init();
 8003638:	f000 f904 	bl	8003844 <MX_DAC_Init>
  MX_SPI3_Init();
 800363c:	f000 f92c 	bl	8003898 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8003640:	f000 fa16 	bl	8003a70 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8003644:	f000 f9aa 	bl	800399c <MX_TIM6_Init>
  MX_TIM4_Init();
 8003648:	f000 f95c 	bl	8003904 <MX_TIM4_Init>
  MX_TIM7_Init();
 800364c:	f000 f9da 	bl	8003a04 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8003650:	2100      	movs	r1, #0
 8003652:	4814      	ldr	r0, [pc, #80]	; (80036a4 <main+0x80>)
 8003654:	f001 fc59 	bl	8004f0a <HAL_DAC_Start>
  HAL_ADC_Start_IT(&hadc1);
 8003658:	4813      	ldr	r0, [pc, #76]	; (80036a8 <main+0x84>)
 800365a:	f000 fec9 	bl	80043f0 <HAL_ADC_Start_IT>



  	  fresult = f_mount(&FatFs, "", 1);
 800365e:	2201      	movs	r2, #1
 8003660:	4912      	ldr	r1, [pc, #72]	; (80036ac <main+0x88>)
 8003662:	4813      	ldr	r0, [pc, #76]	; (80036b0 <main+0x8c>)
 8003664:	f7ff f922 	bl	80028ac <f_mount>
 8003668:	4603      	mov	r3, r0
 800366a:	461a      	mov	r2, r3
 800366c:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <main+0x90>)
 800366e:	701a      	strb	r2, [r3, #0]
      read_song();
 8003670:	f7ff fd46 	bl	8003100 <read_song>
      fresult = f_open(&file, &utwor_poprzedni , FA_READ|FA_OPEN_EXISTING|FA_OPEN_ALWAYS);
 8003674:	2211      	movs	r2, #17
 8003676:	4910      	ldr	r1, [pc, #64]	; (80036b8 <main+0x94>)
 8003678:	4810      	ldr	r0, [pc, #64]	; (80036bc <main+0x98>)
 800367a:	f7ff f957 	bl	800292c <f_open>
 800367e:	4603      	mov	r3, r0
 8003680:	461a      	mov	r2, r3
 8003682:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <main+0x90>)
 8003684:	701a      	strb	r2, [r3, #0]
      f_read(&file, &buf2,16000, &bytes_read);
 8003686:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <main+0x9c>)
 8003688:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800368c:	490d      	ldr	r1, [pc, #52]	; (80036c4 <main+0xa0>)
 800368e:	480b      	ldr	r0, [pc, #44]	; (80036bc <main+0x98>)
 8003690:	f7ff facf 	bl	8002c32 <f_read>
      f_read(&file, &buf, 16000, &bytes_read);
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <main+0x9c>)
 8003696:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800369a:	490b      	ldr	r1, [pc, #44]	; (80036c8 <main+0xa4>)
 800369c:	4807      	ldr	r0, [pc, #28]	; (80036bc <main+0x98>)
 800369e:	f7ff fac8 	bl	8002c32 <f_read>
*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      while (1)
 80036a2:	e7fe      	b.n	80036a2 <main+0x7e>
 80036a4:	20004604 	.word	0x20004604
 80036a8:	20000724 	.word	0x20000724
 80036ac:	08007f88 	.word	0x08007f88
 80036b0:	200000a8 	.word	0x200000a8
 80036b4:	20004688 	.word	0x20004688
 80036b8:	200045f0 	.word	0x200045f0
 80036bc:	200004fc 	.word	0x200004fc
 80036c0:	2000076c 	.word	0x2000076c
 80036c4:	20000770 	.word	0x20000770
 80036c8:	200000a4 	.word	0x200000a4

080036cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b094      	sub	sp, #80	; 0x50
 80036d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036d2:	f107 0320 	add.w	r3, r7, #32
 80036d6:	2230      	movs	r2, #48	; 0x30
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f003 ffc0 	bl	8007660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036e0:	f107 030c 	add.w	r3, r7, #12
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036f0:	2300      	movs	r3, #0
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	4b28      	ldr	r3, [pc, #160]	; (8003798 <SystemClock_Config+0xcc>)
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	4a27      	ldr	r2, [pc, #156]	; (8003798 <SystemClock_Config+0xcc>)
 80036fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003700:	4b25      	ldr	r3, [pc, #148]	; (8003798 <SystemClock_Config+0xcc>)
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800370c:	2300      	movs	r3, #0
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	4b22      	ldr	r3, [pc, #136]	; (800379c <SystemClock_Config+0xd0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a21      	ldr	r2, [pc, #132]	; (800379c <SystemClock_Config+0xd0>)
 8003716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b1f      	ldr	r3, [pc, #124]	; (800379c <SystemClock_Config+0xd0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003728:	2301      	movs	r3, #1
 800372a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800372c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003732:	2302      	movs	r3, #2
 8003734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800373a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800373c:	2304      	movs	r3, #4
 800373e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003740:	23a8      	movs	r3, #168	; 0xa8
 8003742:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003744:	2302      	movs	r3, #2
 8003746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003748:	2304      	movs	r3, #4
 800374a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800374c:	f107 0320 	add.w	r3, r7, #32
 8003750:	4618      	mov	r0, r3
 8003752:	f001 feb9 	bl	80054c8 <HAL_RCC_OscConfig>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800375c:	f000 fa3e 	bl	8003bdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003760:	230f      	movs	r3, #15
 8003762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003764:	2302      	movs	r3, #2
 8003766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800376c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	2105      	movs	r1, #5
 800377e:	4618      	mov	r0, r3
 8003780:	f002 f8e4 	bl	800594c <HAL_RCC_ClockConfig>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800378a:	f000 fa27 	bl	8003bdc <Error_Handler>
  }
}
 800378e:	bf00      	nop
 8003790:	3750      	adds	r7, #80	; 0x50
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	40007000 	.word	0x40007000

080037a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037a6:	463b      	mov	r3, r7
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80037b2:	4b21      	ldr	r3, [pc, #132]	; (8003838 <MX_ADC1_Init+0x98>)
 80037b4:	4a21      	ldr	r2, [pc, #132]	; (800383c <MX_ADC1_Init+0x9c>)
 80037b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80037b8:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <MX_ADC1_Init+0x98>)
 80037ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80037c0:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <MX_ADC1_Init+0x98>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80037c6:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <MX_ADC1_Init+0x98>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80037cc:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <MX_ADC1_Init+0x98>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80037d2:	4b19      	ldr	r3, [pc, #100]	; (8003838 <MX_ADC1_Init+0x98>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <MX_ADC1_Init+0x98>)
 80037dc:	2200      	movs	r2, #0
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037e0:	4b15      	ldr	r3, [pc, #84]	; (8003838 <MX_ADC1_Init+0x98>)
 80037e2:	4a17      	ldr	r2, [pc, #92]	; (8003840 <MX_ADC1_Init+0xa0>)
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <MX_ADC1_Init+0x98>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <MX_ADC1_Init+0x98>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <MX_ADC1_Init+0x98>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037fa:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <MX_ADC1_Init+0x98>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003800:	480d      	ldr	r0, [pc, #52]	; (8003838 <MX_ADC1_Init+0x98>)
 8003802:	f000 fdb1 	bl	8004368 <HAL_ADC_Init>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800380c:	f000 f9e6 	bl	8003bdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003810:	2303      	movs	r3, #3
 8003812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003814:	2301      	movs	r3, #1
 8003816:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003818:	2300      	movs	r3, #0
 800381a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800381c:	463b      	mov	r3, r7
 800381e:	4619      	mov	r1, r3
 8003820:	4805      	ldr	r0, [pc, #20]	; (8003838 <MX_ADC1_Init+0x98>)
 8003822:	f001 f817 	bl	8004854 <HAL_ADC_ConfigChannel>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800382c:	f000 f9d6 	bl	8003bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003830:	bf00      	nop
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000724 	.word	0x20000724
 800383c:	40012000 	.word	0x40012000
 8003840:	0f000001 	.word	0x0f000001

08003844 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800384a:	463b      	mov	r3, r7
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8003852:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <MX_DAC_Init+0x4c>)
 8003854:	4a0f      	ldr	r2, [pc, #60]	; (8003894 <MX_DAC_Init+0x50>)
 8003856:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003858:	480d      	ldr	r0, [pc, #52]	; (8003890 <MX_DAC_Init+0x4c>)
 800385a:	f001 fb34 	bl	8004ec6 <HAL_DAC_Init>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003864:	f000 f9ba 	bl	8003bdc <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003868:	2300      	movs	r3, #0
 800386a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800386c:	2300      	movs	r3, #0
 800386e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003870:	463b      	mov	r3, r7
 8003872:	2200      	movs	r2, #0
 8003874:	4619      	mov	r1, r3
 8003876:	4806      	ldr	r0, [pc, #24]	; (8003890 <MX_DAC_Init+0x4c>)
 8003878:	f001 fbad 	bl	8004fd6 <HAL_DAC_ConfigChannel>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003882:	f000 f9ab 	bl	8003bdc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20004604 	.word	0x20004604
 8003894:	40007400 	.word	0x40007400

08003898 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <MX_SPI3_Init+0x64>)
 800389e:	4a18      	ldr	r2, [pc, #96]	; (8003900 <MX_SPI3_Init+0x68>)
 80038a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80038a2:	4b16      	ldr	r3, [pc, #88]	; (80038fc <MX_SPI3_Init+0x64>)
 80038a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <MX_SPI3_Init+0x64>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <MX_SPI3_Init+0x64>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038b6:	4b11      	ldr	r3, [pc, #68]	; (80038fc <MX_SPI3_Init+0x64>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <MX_SPI3_Init+0x64>)
 80038be:	2200      	movs	r2, #0
 80038c0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <MX_SPI3_Init+0x64>)
 80038c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <MX_SPI3_Init+0x64>)
 80038cc:	2218      	movs	r2, #24
 80038ce:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <MX_SPI3_Init+0x64>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <MX_SPI3_Init+0x64>)
 80038d8:	2200      	movs	r2, #0
 80038da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <MX_SPI3_Init+0x64>)
 80038de:	2200      	movs	r2, #0
 80038e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <MX_SPI3_Init+0x64>)
 80038e4:	220a      	movs	r2, #10
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80038e8:	4804      	ldr	r0, [pc, #16]	; (80038fc <MX_SPI3_Init+0x64>)
 80038ea:	f002 fa1d 	bl	8005d28 <HAL_SPI_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80038f4:	f000 f972 	bl	8003bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	200004a4 	.word	0x200004a4
 8003900:	40003c00 	.word	0x40003c00

08003904 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800390a:	f107 0308 	add.w	r3, r7, #8
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003918:	463b      	mov	r3, r7
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003920:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <MX_TIM4_Init+0x90>)
 8003922:	4a1d      	ldr	r2, [pc, #116]	; (8003998 <MX_TIM4_Init+0x94>)
 8003924:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 104;
 8003926:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <MX_TIM4_Init+0x90>)
 8003928:	2268      	movs	r2, #104	; 0x68
 800392a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800392c:	4b19      	ldr	r3, [pc, #100]	; (8003994 <MX_TIM4_Init+0x90>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49;
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <MX_TIM4_Init+0x90>)
 8003934:	2231      	movs	r2, #49	; 0x31
 8003936:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003938:	4b16      	ldr	r3, [pc, #88]	; (8003994 <MX_TIM4_Init+0x90>)
 800393a:	2200      	movs	r2, #0
 800393c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <MX_TIM4_Init+0x90>)
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003944:	4813      	ldr	r0, [pc, #76]	; (8003994 <MX_TIM4_Init+0x90>)
 8003946:	f002 fde3 	bl	8006510 <HAL_TIM_Base_Init>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8003950:	f000 f944 	bl	8003bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800395a:	f107 0308 	add.w	r3, r7, #8
 800395e:	4619      	mov	r1, r3
 8003960:	480c      	ldr	r0, [pc, #48]	; (8003994 <MX_TIM4_Init+0x90>)
 8003962:	f002 ff57 	bl	8006814 <HAL_TIM_ConfigClockSource>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800396c:	f000 f936 	bl	8003bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003970:	2300      	movs	r3, #0
 8003972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003974:	2300      	movs	r3, #0
 8003976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003978:	463b      	mov	r3, r7
 800397a:	4619      	mov	r1, r3
 800397c:	4805      	ldr	r0, [pc, #20]	; (8003994 <MX_TIM4_Init+0x90>)
 800397e:	f003 f963 	bl	8006c48 <HAL_TIMEx_MasterConfigSynchronization>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003988:	f000 f928 	bl	8003bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800398c:	bf00      	nop
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000310 	.word	0x20000310
 8003998:	40000800 	.word	0x40000800

0800399c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a2:	463b      	mov	r3, r7
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80039aa:	4b14      	ldr	r3, [pc, #80]	; (80039fc <MX_TIM6_Init+0x60>)
 80039ac:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <MX_TIM6_Init+0x64>)
 80039ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 249;
 80039b0:	4b12      	ldr	r3, [pc, #72]	; (80039fc <MX_TIM6_Init+0x60>)
 80039b2:	22f9      	movs	r2, #249	; 0xf9
 80039b4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b6:	4b11      	ldr	r3, [pc, #68]	; (80039fc <MX_TIM6_Init+0x60>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20;
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <MX_TIM6_Init+0x60>)
 80039be:	2214      	movs	r2, #20
 80039c0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c2:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <MX_TIM6_Init+0x60>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80039c8:	480c      	ldr	r0, [pc, #48]	; (80039fc <MX_TIM6_Init+0x60>)
 80039ca:	f002 fda1 	bl	8006510 <HAL_TIM_Base_Init>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80039d4:	f000 f902 	bl	8003bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039d8:	2300      	movs	r3, #0
 80039da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039dc:	2300      	movs	r3, #0
 80039de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80039e0:	463b      	mov	r3, r7
 80039e2:	4619      	mov	r1, r3
 80039e4:	4805      	ldr	r0, [pc, #20]	; (80039fc <MX_TIM6_Init+0x60>)
 80039e6:	f003 f92f 	bl	8006c48 <HAL_TIMEx_MasterConfigSynchronization>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80039f0:	f000 f8f4 	bl	8003bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20004618 	.word	0x20004618
 8003a00:	40001000 	.word	0x40001000

08003a04 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <MX_TIM7_Init+0x64>)
 8003a14:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <MX_TIM7_Init+0x68>)
 8003a16:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8003a18:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <MX_TIM7_Init+0x64>)
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <MX_TIM7_Init+0x64>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 380;
 8003a24:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <MX_TIM7_Init+0x64>)
 8003a26:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8003a2a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <MX_TIM7_Init+0x64>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003a32:	480d      	ldr	r0, [pc, #52]	; (8003a68 <MX_TIM7_Init+0x64>)
 8003a34:	f002 fd6c 	bl	8006510 <HAL_TIM_Base_Init>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003a3e:	f000 f8cd 	bl	8003bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a42:	2300      	movs	r3, #0
 8003a44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003a4a:	463b      	mov	r3, r7
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4806      	ldr	r0, [pc, #24]	; (8003a68 <MX_TIM7_Init+0x64>)
 8003a50:	f003 f8fa 	bl	8006c48 <HAL_TIMEx_MasterConfigSynchronization>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003a5a:	f000 f8bf 	bl	8003bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	2000468c 	.word	0x2000468c
 8003a6c:	40001400 	.word	0x40001400

08003a70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a74:	4b11      	ldr	r3, [pc, #68]	; (8003abc <MX_USART3_UART_Init+0x4c>)
 8003a76:	4a12      	ldr	r2, [pc, #72]	; (8003ac0 <MX_USART3_UART_Init+0x50>)
 8003a78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <MX_USART3_UART_Init+0x4c>)
 8003a7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a82:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <MX_USART3_UART_Init+0x4c>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a88:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <MX_USART3_UART_Init+0x4c>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <MX_USART3_UART_Init+0x4c>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a94:	4b09      	ldr	r3, [pc, #36]	; (8003abc <MX_USART3_UART_Init+0x4c>)
 8003a96:	220c      	movs	r2, #12
 8003a98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a9a:	4b08      	ldr	r3, [pc, #32]	; (8003abc <MX_USART3_UART_Init+0x4c>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <MX_USART3_UART_Init+0x4c>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003aa6:	4805      	ldr	r0, [pc, #20]	; (8003abc <MX_USART3_UART_Init+0x4c>)
 8003aa8:	f003 f927 	bl	8006cfa <HAL_UART_Init>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003ab2:	f000 f893 	bl	8003bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000350 	.word	0x20000350
 8003ac0:	40004800 	.word	0x40004800

08003ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	; 0x28
 8003ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aca:	f107 0314 	add.w	r3, r7, #20
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	605a      	str	r2, [r3, #4]
 8003ad4:	609a      	str	r2, [r3, #8]
 8003ad6:	60da      	str	r2, [r3, #12]
 8003ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	4b3a      	ldr	r3, [pc, #232]	; (8003bc8 <MX_GPIO_Init+0x104>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	4a39      	ldr	r2, [pc, #228]	; (8003bc8 <MX_GPIO_Init+0x104>)
 8003ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aea:	4b37      	ldr	r3, [pc, #220]	; (8003bc8 <MX_GPIO_Init+0x104>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	4b33      	ldr	r3, [pc, #204]	; (8003bc8 <MX_GPIO_Init+0x104>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4a32      	ldr	r2, [pc, #200]	; (8003bc8 <MX_GPIO_Init+0x104>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	6313      	str	r3, [r2, #48]	; 0x30
 8003b06:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <MX_GPIO_Init+0x104>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <MX_GPIO_Init+0x104>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	4a2b      	ldr	r2, [pc, #172]	; (8003bc8 <MX_GPIO_Init+0x104>)
 8003b1c:	f043 0302 	orr.w	r3, r3, #2
 8003b20:	6313      	str	r3, [r2, #48]	; 0x30
 8003b22:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <MX_GPIO_Init+0x104>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	607b      	str	r3, [r7, #4]
 8003b32:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <MX_GPIO_Init+0x104>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	4a24      	ldr	r2, [pc, #144]	; (8003bc8 <MX_GPIO_Init+0x104>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3e:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <MX_GPIO_Init+0x104>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b4e:	4b1f      	ldr	r3, [pc, #124]	; (8003bcc <MX_GPIO_Init+0x108>)
 8003b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b52:	2302      	movs	r3, #2
 8003b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b56:	f107 0314 	add.w	r3, r7, #20
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	481c      	ldr	r0, [pc, #112]	; (8003bd0 <MX_GPIO_Init+0x10c>)
 8003b5e:	f001 facf 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8003b62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b66:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <MX_GPIO_Init+0x110>)
 8003b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b70:	f107 0314 	add.w	r3, r7, #20
 8003b74:	4619      	mov	r1, r3
 8003b76:	4818      	ldr	r0, [pc, #96]	; (8003bd8 <MX_GPIO_Init+0x114>)
 8003b78:	f001 fac2 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b82:	2312      	movs	r3, #18
 8003b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b8e:	2304      	movs	r3, #4
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b92:	f107 0314 	add.w	r3, r7, #20
 8003b96:	4619      	mov	r1, r3
 8003b98:	480f      	ldr	r0, [pc, #60]	; (8003bd8 <MX_GPIO_Init+0x114>)
 8003b9a:	f001 fab1 	bl	8005100 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	2006      	movs	r0, #6
 8003ba4:	f001 f959 	bl	8004e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003ba8:	2006      	movs	r0, #6
 8003baa:	f001 f972 	bl	8004e92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	2028      	movs	r0, #40	; 0x28
 8003bb4:	f001 f951 	bl	8004e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003bb8:	2028      	movs	r0, #40	; 0x28
 8003bba:	f001 f96a 	bl	8004e92 <HAL_NVIC_EnableIRQ>

}
 8003bbe:	bf00      	nop
 8003bc0:	3728      	adds	r7, #40	; 0x28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	10110000 	.word	0x10110000
 8003bd0:	40020000 	.word	0x40020000
 8003bd4:	10310000 	.word	0x10310000
 8003bd8:	40020400 	.word	0x40020400

08003bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <HAL_MspInit+0x58>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	4a12      	ldr	r2, [pc, #72]	; (8003c44 <HAL_MspInit+0x58>)
 8003bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c00:	6453      	str	r3, [r2, #68]	; 0x44
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <HAL_MspInit+0x58>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0a:	607b      	str	r3, [r7, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <HAL_MspInit+0x58>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	4a0b      	ldr	r2, [pc, #44]	; (8003c44 <HAL_MspInit+0x58>)
 8003c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1e:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <HAL_MspInit+0x58>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f001 f913 	bl	8004e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003c34:	2001      	movs	r0, #1
 8003c36:	f001 f92c 	bl	8004e92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800

08003c48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	; 0x28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c50:	f107 0314 	add.w	r3, r7, #20
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <HAL_ADC_MspInit+0x8c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d12f      	bne.n	8003cca <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <HAL_ADC_MspInit+0x90>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	4a19      	ldr	r2, [pc, #100]	; (8003cd8 <HAL_ADC_MspInit+0x90>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c78:	6453      	str	r3, [r2, #68]	; 0x44
 8003c7a:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <HAL_ADC_MspInit+0x90>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <HAL_ADC_MspInit+0x90>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <HAL_ADC_MspInit+0x90>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6313      	str	r3, [r2, #48]	; 0x30
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <HAL_ADC_MspInit+0x90>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cae:	f107 0314 	add.w	r3, r7, #20
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4809      	ldr	r0, [pc, #36]	; (8003cdc <HAL_ADC_MspInit+0x94>)
 8003cb6:	f001 fa23 	bl	8005100 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	2012      	movs	r0, #18
 8003cc0:	f001 f8cb 	bl	8004e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f001 f8e4 	bl	8004e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003cca:	bf00      	nop
 8003ccc:	3728      	adds	r7, #40	; 0x28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40012000 	.word	0x40012000
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40020000 	.word	0x40020000

08003ce0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce8:	f107 0314 	add.w	r3, r7, #20
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	60da      	str	r2, [r3, #12]
 8003cf6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <HAL_DAC_MspInit+0x7c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d127      	bne.n	8003d52 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <HAL_DAC_MspInit+0x80>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	4a15      	ldr	r2, [pc, #84]	; (8003d60 <HAL_DAC_MspInit+0x80>)
 8003d0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d10:	6413      	str	r3, [r2, #64]	; 0x40
 8003d12:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <HAL_DAC_MspInit+0x80>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <HAL_DAC_MspInit+0x80>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <HAL_DAC_MspInit+0x80>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <HAL_DAC_MspInit+0x80>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003d3a:	2310      	movs	r3, #16
 8003d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d46:	f107 0314 	add.w	r3, r7, #20
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4805      	ldr	r0, [pc, #20]	; (8003d64 <HAL_DAC_MspInit+0x84>)
 8003d4e:	f001 f9d7 	bl	8005100 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003d52:	bf00      	nop
 8003d54:	3728      	adds	r7, #40	; 0x28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40007400 	.word	0x40007400
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40020000 	.word	0x40020000

08003d68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	; 0x28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d70:	f107 0314 	add.w	r3, r7, #20
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	605a      	str	r2, [r3, #4]
 8003d7a:	609a      	str	r2, [r3, #8]
 8003d7c:	60da      	str	r2, [r3, #12]
 8003d7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a19      	ldr	r2, [pc, #100]	; (8003dec <HAL_SPI_MspInit+0x84>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d12b      	bne.n	8003de2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <HAL_SPI_MspInit+0x88>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	4a17      	ldr	r2, [pc, #92]	; (8003df0 <HAL_SPI_MspInit+0x88>)
 8003d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d98:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <HAL_SPI_MspInit+0x88>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <HAL_SPI_MspInit+0x88>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	4a10      	ldr	r2, [pc, #64]	; (8003df0 <HAL_SPI_MspInit+0x88>)
 8003db0:	f043 0302 	orr.w	r3, r3, #2
 8003db4:	6313      	str	r3, [r2, #48]	; 0x30
 8003db6:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <HAL_SPI_MspInit+0x88>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003dc2:	2338      	movs	r3, #56	; 0x38
 8003dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003dd2:	2306      	movs	r3, #6
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dd6:	f107 0314 	add.w	r3, r7, #20
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4805      	ldr	r0, [pc, #20]	; (8003df4 <HAL_SPI_MspInit+0x8c>)
 8003dde:	f001 f98f 	bl	8005100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003de2:	bf00      	nop
 8003de4:	3728      	adds	r7, #40	; 0x28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40003c00 	.word	0x40003c00
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40020400 	.word	0x40020400

08003df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a26      	ldr	r2, [pc, #152]	; (8003ea0 <HAL_TIM_Base_MspInit+0xa8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d116      	bne.n	8003e38 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <HAL_TIM_Base_MspInit+0xac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a24      	ldr	r2, [pc, #144]	; (8003ea4 <HAL_TIM_Base_MspInit+0xac>)
 8003e14:	f043 0304 	orr.w	r3, r3, #4
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1a:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <HAL_TIM_Base_MspInit+0xac>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003e26:	2200      	movs	r2, #0
 8003e28:	2100      	movs	r1, #0
 8003e2a:	201e      	movs	r0, #30
 8003e2c:	f001 f815 	bl	8004e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e30:	201e      	movs	r0, #30
 8003e32:	f001 f82e 	bl	8004e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003e36:	e02e      	b.n	8003e96 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ea8 <HAL_TIM_Base_MspInit+0xb0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d10e      	bne.n	8003e60 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <HAL_TIM_Base_MspInit+0xac>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	4a16      	ldr	r2, [pc, #88]	; (8003ea4 <HAL_TIM_Base_MspInit+0xac>)
 8003e4c:	f043 0310 	orr.w	r3, r3, #16
 8003e50:	6413      	str	r3, [r2, #64]	; 0x40
 8003e52:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <HAL_TIM_Base_MspInit+0xac>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	693b      	ldr	r3, [r7, #16]
}
 8003e5e:	e01a      	b.n	8003e96 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a11      	ldr	r2, [pc, #68]	; (8003eac <HAL_TIM_Base_MspInit+0xb4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d115      	bne.n	8003e96 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <HAL_TIM_Base_MspInit+0xac>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	4a0c      	ldr	r2, [pc, #48]	; (8003ea4 <HAL_TIM_Base_MspInit+0xac>)
 8003e74:	f043 0320 	orr.w	r3, r3, #32
 8003e78:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_TIM_Base_MspInit+0xac>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003e86:	2200      	movs	r2, #0
 8003e88:	2100      	movs	r1, #0
 8003e8a:	2037      	movs	r0, #55	; 0x37
 8003e8c:	f000 ffe5 	bl	8004e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e90:	2037      	movs	r0, #55	; 0x37
 8003e92:	f000 fffe 	bl	8004e92 <HAL_NVIC_EnableIRQ>
}
 8003e96:	bf00      	nop
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40000800 	.word	0x40000800
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40001000 	.word	0x40001000
 8003eac:	40001400 	.word	0x40001400

08003eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	; 0x28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb8:	f107 0314 	add.w	r3, r7, #20
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	60da      	str	r2, [r3, #12]
 8003ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <HAL_UART_MspInit+0x94>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d134      	bne.n	8003f3c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <HAL_UART_MspInit+0x98>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <HAL_UART_MspInit+0x98>)
 8003edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee2:	4b19      	ldr	r3, [pc, #100]	; (8003f48 <HAL_UART_MspInit+0x98>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <HAL_UART_MspInit+0x98>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <HAL_UART_MspInit+0x98>)
 8003ef8:	f043 0304 	orr.w	r3, r3, #4
 8003efc:	6313      	str	r3, [r2, #48]	; 0x30
 8003efe:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <HAL_UART_MspInit+0x98>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f10:	2302      	movs	r3, #2
 8003f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f14:	2301      	movs	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f1c:	2307      	movs	r3, #7
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f20:	f107 0314 	add.w	r3, r7, #20
 8003f24:	4619      	mov	r1, r3
 8003f26:	4809      	ldr	r0, [pc, #36]	; (8003f4c <HAL_UART_MspInit+0x9c>)
 8003f28:	f001 f8ea 	bl	8005100 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2100      	movs	r1, #0
 8003f30:	2027      	movs	r0, #39	; 0x27
 8003f32:	f000 ff92 	bl	8004e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003f36:	2027      	movs	r0, #39	; 0x27
 8003f38:	f000 ffab 	bl	8004e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f3c:	bf00      	nop
 8003f3e:	3728      	adds	r7, #40	; 0x28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40004800 	.word	0x40004800
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40020800 	.word	0x40020800

08003f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f62:	e7fe      	b.n	8003f62 <HardFault_Handler+0x4>

08003f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f68:	e7fe      	b.n	8003f68 <MemManage_Handler+0x4>

08003f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f6e:	e7fe      	b.n	8003f6e <BusFault_Handler+0x4>

08003f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f74:	e7fe      	b.n	8003f74 <UsageFault_Handler+0x4>

08003f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f76:	b480      	push	{r7}
 8003f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f7a:	bf00      	nop
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f88:	bf00      	nop
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f92:	b480      	push	{r7}
 8003f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f96:	bf00      	nop
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8003fa4:	f7fc ffde 	bl	8000f64 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fa8:	f000 f99c 	bl	80042e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fac:	bf00      	nop
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003fb4:	f001 fa6e 	bl	8005494 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	f001 fa4f 	bl	8005464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003fd0:	4802      	ldr	r0, [pc, #8]	; (8003fdc <ADC_IRQHandler+0x10>)
 8003fd2:	f000 fadd 	bl	8004590 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000724 	.word	0x20000724

08003fe0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003fe4:	4802      	ldr	r0, [pc, #8]	; (8003ff0 <TIM4_IRQHandler+0x10>)
 8003fe6:	f002 fb0d 	bl	8006604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003fea:	bf00      	nop
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000310 	.word	0x20000310

08003ff4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ff8:	4802      	ldr	r0, [pc, #8]	; (8004004 <USART3_IRQHandler+0x10>)
 8003ffa:	f002 fecb 	bl	8006d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000350 	.word	0x20000350

08004008 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800400c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004010:	f001 fa28 	bl	8005464 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004014:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004018:	f001 fa24 	bl	8005464 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800401c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004020:	f001 fa20 	bl	8005464 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004024:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004028:	f001 fa1c 	bl	8005464 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800402c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004030:	f001 fa18 	bl	8005464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004034:	bf00      	nop
 8004036:	bd80      	pop	{r7, pc}

08004038 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800403c:	4802      	ldr	r0, [pc, #8]	; (8004048 <TIM7_IRQHandler+0x10>)
 800403e:	f002 fae1 	bl	8006604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	2000468c 	.word	0x2000468c

0800404c <_read>:
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	e00a      	b.n	8004074 <_read+0x28>
 800405e:	f3af 8000 	nop.w
 8004062:	4601      	mov	r1, r0
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	60ba      	str	r2, [r7, #8]
 800406a:	b2ca      	uxtb	r2, r1
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	3301      	adds	r3, #1
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	429a      	cmp	r2, r3
 800407a:	dbf0      	blt.n	800405e <_read+0x12>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <_write>:
 8004086:	b580      	push	{r7, lr}
 8004088:	b086      	sub	sp, #24
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	e009      	b.n	80040ac <_write+0x26>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	60ba      	str	r2, [r7, #8]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f3af 8000 	nop.w
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	3301      	adds	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	dbf1      	blt.n	8004098 <_write+0x12>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <_close>:
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ca:	4618      	mov	r0, r3
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <_fstat>:
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	2300      	movs	r3, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <_isatty>:
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	2301      	movs	r3, #1
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <_lseek>:
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	2300      	movs	r3, #0
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <_sbrk>:
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <_sbrk+0x50>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d102      	bne.n	800413e <_sbrk+0x16>
 8004138:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <_sbrk+0x50>)
 800413a:	4a10      	ldr	r2, [pc, #64]	; (800417c <_sbrk+0x54>)
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <_sbrk+0x50>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <_sbrk+0x50>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4413      	add	r3, r2
 800414c:	466a      	mov	r2, sp
 800414e:	4293      	cmp	r3, r2
 8004150:	d907      	bls.n	8004162 <_sbrk+0x3a>
 8004152:	f003 fa5b 	bl	800760c <__errno>
 8004156:	4602      	mov	r2, r0
 8004158:	230c      	movs	r3, #12
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	f04f 33ff 	mov.w	r3, #4294967295
 8004160:	e006      	b.n	8004170 <_sbrk+0x48>
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <_sbrk+0x50>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4413      	add	r3, r2
 800416a:	4a03      	ldr	r2, [pc, #12]	; (8004178 <_sbrk+0x50>)
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20000300 	.word	0x20000300
 800417c:	200046d8 	.word	0x200046d8

08004180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004184:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <SystemInit+0x60>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	4a15      	ldr	r2, [pc, #84]	; (80041e0 <SystemInit+0x60>)
 800418c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <SystemInit+0x64>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <SystemInit+0x64>)
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80041a0:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <SystemInit+0x64>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80041a6:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <SystemInit+0x64>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a0e      	ldr	r2, [pc, #56]	; (80041e4 <SystemInit+0x64>)
 80041ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80041b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <SystemInit+0x64>)
 80041b8:	4a0b      	ldr	r2, [pc, #44]	; (80041e8 <SystemInit+0x68>)
 80041ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80041bc:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <SystemInit+0x64>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a08      	ldr	r2, [pc, #32]	; (80041e4 <SystemInit+0x64>)
 80041c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <SystemInit+0x64>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041ce:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <SystemInit+0x60>)
 80041d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041d4:	609a      	str	r2, [r3, #8]
#endif
}
 80041d6:	bf00      	nop
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	e000ed00 	.word	0xe000ed00
 80041e4:	40023800 	.word	0x40023800
 80041e8:	24003010 	.word	0x24003010

080041ec <Reset_Handler>:
 80041ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004224 <LoopFillZerobss+0x14>
 80041f0:	2100      	movs	r1, #0
 80041f2:	e003      	b.n	80041fc <LoopCopyDataInit>

080041f4 <CopyDataInit>:
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <LoopFillZerobss+0x18>)
 80041f6:	585b      	ldr	r3, [r3, r1]
 80041f8:	5043      	str	r3, [r0, r1]
 80041fa:	3104      	adds	r1, #4

080041fc <LoopCopyDataInit>:
 80041fc:	480b      	ldr	r0, [pc, #44]	; (800422c <LoopFillZerobss+0x1c>)
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <LoopFillZerobss+0x20>)
 8004200:	1842      	adds	r2, r0, r1
 8004202:	429a      	cmp	r2, r3
 8004204:	d3f6      	bcc.n	80041f4 <CopyDataInit>
 8004206:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <LoopFillZerobss+0x24>)
 8004208:	e002      	b.n	8004210 <LoopFillZerobss>

0800420a <FillZerobss>:
 800420a:	2300      	movs	r3, #0
 800420c:	f842 3b04 	str.w	r3, [r2], #4

08004210 <LoopFillZerobss>:
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <LoopFillZerobss+0x28>)
 8004212:	429a      	cmp	r2, r3
 8004214:	d3f9      	bcc.n	800420a <FillZerobss>
 8004216:	f7ff ffb3 	bl	8004180 <SystemInit>
 800421a:	f003 f9fd 	bl	8007618 <__libc_init_array>
 800421e:	f7ff fa01 	bl	8003624 <main>
 8004222:	4770      	bx	lr
 8004224:	20020000 	.word	0x20020000
 8004228:	08008018 	.word	0x08008018
 800422c:	20000000 	.word	0x20000000
 8004230:	2000007c 	.word	0x2000007c
 8004234:	2000007c 	.word	0x2000007c
 8004238:	200046d4 	.word	0x200046d4

0800423c <CAN1_RX0_IRQHandler>:
 800423c:	e7fe      	b.n	800423c <CAN1_RX0_IRQHandler>
	...

08004240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004244:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <HAL_Init+0x40>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a0d      	ldr	r2, [pc, #52]	; (8004280 <HAL_Init+0x40>)
 800424a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800424e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_Init+0x40>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <HAL_Init+0x40>)
 8004256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800425a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800425c:	4b08      	ldr	r3, [pc, #32]	; (8004280 <HAL_Init+0x40>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a07      	ldr	r2, [pc, #28]	; (8004280 <HAL_Init+0x40>)
 8004262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004268:	2003      	movs	r0, #3
 800426a:	f000 fdeb 	bl	8004e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800426e:	2000      	movs	r0, #0
 8004270:	f000 f808 	bl	8004284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004274:	f7ff fcba 	bl	8003bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40023c00 	.word	0x40023c00

08004284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800428c:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <HAL_InitTick+0x54>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_InitTick+0x58>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	4619      	mov	r1, r3
 8004296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800429a:	fbb3 f3f1 	udiv	r3, r3, r1
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fe03 	bl	8004eae <HAL_SYSTICK_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e00e      	b.n	80042d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b0f      	cmp	r3, #15
 80042b6:	d80a      	bhi.n	80042ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042b8:	2200      	movs	r2, #0
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	f04f 30ff 	mov.w	r0, #4294967295
 80042c0:	f000 fdcb 	bl	8004e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042c4:	4a06      	ldr	r2, [pc, #24]	; (80042e0 <HAL_InitTick+0x5c>)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e000      	b.n	80042d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	2000000c 	.word	0x2000000c
 80042dc:	20000014 	.word	0x20000014
 80042e0:	20000010 	.word	0x20000010

080042e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_IncTick+0x20>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_IncTick+0x24>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4413      	add	r3, r2
 80042f4:	4a04      	ldr	r2, [pc, #16]	; (8004308 <HAL_IncTick+0x24>)
 80042f6:	6013      	str	r3, [r2, #0]
}
 80042f8:	bf00      	nop
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000014 	.word	0x20000014
 8004308:	200046cc 	.word	0x200046cc

0800430c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return uwTick;
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <HAL_GetTick+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	200046cc 	.word	0x200046cc

08004324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800432c:	f7ff ffee 	bl	800430c <HAL_GetTick>
 8004330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433c:	d005      	beq.n	800434a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <HAL_Delay+0x40>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800434a:	bf00      	nop
 800434c:	f7ff ffde 	bl	800430c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	429a      	cmp	r2, r3
 800435a:	d8f7      	bhi.n	800434c <HAL_Delay+0x28>
  {
  }
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000014 	.word	0x20000014

08004368 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e033      	b.n	80043e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	2b00      	cmp	r3, #0
 8004384:	d109      	bne.n	800439a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fc5e 	bl	8003c48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f003 0310 	and.w	r3, r3, #16
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d118      	bne.n	80043d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80043ae:	f023 0302 	bic.w	r3, r3, #2
 80043b2:	f043 0202 	orr.w	r2, r3, #2
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fb6c 	bl	8004a98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f023 0303 	bic.w	r3, r3, #3
 80043ce:	f043 0201 	orr.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
 80043d6:	e001      	b.n	80043dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_ADC_Start_IT+0x1a>
 8004406:	2302      	movs	r3, #2
 8004408:	e0b0      	b.n	800456c <HAL_ADC_Start_IT+0x17c>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b01      	cmp	r3, #1
 800441e:	d018      	beq.n	8004452 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004430:	4b51      	ldr	r3, [pc, #324]	; (8004578 <HAL_ADC_Start_IT+0x188>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a51      	ldr	r2, [pc, #324]	; (800457c <HAL_ADC_Start_IT+0x18c>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	0c9a      	lsrs	r2, r3, #18
 800443c:	4613      	mov	r3, r2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	4413      	add	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004444:	e002      	b.n	800444c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	3b01      	subs	r3, #1
 800444a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f9      	bne.n	8004446 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	f040 8084 	bne.w	800456a <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004480:	2b00      	cmp	r3, #0
 8004482:	d007      	beq.n	8004494 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800448c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800449c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a0:	d106      	bne.n	80044b0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	f023 0206 	bic.w	r2, r3, #6
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	645a      	str	r2, [r3, #68]	; 0x44
 80044ae:	e002      	b.n	80044b6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044be:	4b30      	ldr	r3, [pc, #192]	; (8004580 <HAL_ADC_Start_IT+0x190>)
 80044c0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80044ca:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044da:	f043 0320 	orr.w	r3, r3, #32
 80044de:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d12a      	bne.n	8004542 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a24      	ldr	r2, [pc, #144]	; (8004584 <HAL_ADC_Start_IT+0x194>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d015      	beq.n	8004522 <HAL_ADC_Start_IT+0x132>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a23      	ldr	r2, [pc, #140]	; (8004588 <HAL_ADC_Start_IT+0x198>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d105      	bne.n	800450c <HAL_ADC_Start_IT+0x11c>
 8004500:	4b1f      	ldr	r3, [pc, #124]	; (8004580 <HAL_ADC_Start_IT+0x190>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1e      	ldr	r2, [pc, #120]	; (800458c <HAL_ADC_Start_IT+0x19c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d129      	bne.n	800456a <HAL_ADC_Start_IT+0x17a>
 8004516:	4b1a      	ldr	r3, [pc, #104]	; (8004580 <HAL_ADC_Start_IT+0x190>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	2b0f      	cmp	r3, #15
 8004520:	d823      	bhi.n	800456a <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d11c      	bne.n	800456a <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	e013      	b.n	800456a <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a0f      	ldr	r2, [pc, #60]	; (8004584 <HAL_ADC_Start_IT+0x194>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d10e      	bne.n	800456a <HAL_ADC_Start_IT+0x17a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d107      	bne.n	800456a <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004568:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	2000000c 	.word	0x2000000c
 800457c:	431bde83 	.word	0x431bde83
 8004580:	40012300 	.word	0x40012300
 8004584:	40012000 	.word	0x40012000
 8004588:	40012100 	.word	0x40012100
 800458c:	40012200 	.word	0x40012200

08004590 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	2300      	movs	r3, #0
 800459e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	bf0c      	ite	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	2300      	movne	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d049      	beq.n	8004666 <HAL_ADC_IRQHandler+0xd6>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d046      	beq.n	8004666 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d105      	bne.n	80045f0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d12b      	bne.n	8004656 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004602:	2b00      	cmp	r3, #0
 8004604:	d127      	bne.n	8004656 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004610:	2b00      	cmp	r3, #0
 8004612:	d006      	beq.n	8004622 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800461e:	2b00      	cmp	r3, #0
 8004620:	d119      	bne.n	8004656 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0220 	bic.w	r2, r2, #32
 8004630:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d105      	bne.n	8004656 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fe fdf0 	bl	800323c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0212 	mvn.w	r2, #18
 8004664:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b04      	cmp	r3, #4
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004686:	2b80      	cmp	r3, #128	; 0x80
 8004688:	bf0c      	ite	eq
 800468a:	2301      	moveq	r3, #1
 800468c:	2300      	movne	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d057      	beq.n	8004748 <HAL_ADC_IRQHandler+0x1b8>
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d054      	beq.n	8004748 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d105      	bne.n	80046b6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d139      	bne.n	8004738 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d006      	beq.n	80046e0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d12b      	bne.n	8004738 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d124      	bne.n	8004738 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d11d      	bne.n	8004738 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004700:	2b00      	cmp	r3, #0
 8004702:	d119      	bne.n	8004738 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004712:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d105      	bne.n	8004738 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	f043 0201 	orr.w	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 faa9 	bl	8004c90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f06f 020c 	mvn.w	r2, #12
 8004746:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	bf0c      	ite	eq
 800476c:	2301      	moveq	r3, #1
 800476e:	2300      	movne	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d017      	beq.n	80047aa <HAL_ADC_IRQHandler+0x21a>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d014      	beq.n	80047aa <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b01      	cmp	r3, #1
 800478c:	d10d      	bne.n	80047aa <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f846 	bl	800482c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0201 	mvn.w	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ce:	bf0c      	ite	eq
 80047d0:	2301      	moveq	r3, #1
 80047d2:	2300      	movne	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d015      	beq.n	800480a <HAL_ADC_IRQHandler+0x27a>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d012      	beq.n	800480a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e8:	f043 0202 	orr.w	r2, r3, #2
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0220 	mvn.w	r2, #32
 80047f8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f820 	bl	8004840 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0220 	mvn.w	r2, #32
 8004808:	601a      	str	r2, [r3, #0]
  }
}
 800480a:	bf00      	nop
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x1c>
 800486c:	2302      	movs	r3, #2
 800486e:	e105      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x228>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b09      	cmp	r3, #9
 800487e:	d925      	bls.n	80048cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68d9      	ldr	r1, [r3, #12]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	4613      	mov	r3, r2
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	4413      	add	r3, r2
 8004894:	3b1e      	subs	r3, #30
 8004896:	2207      	movs	r2, #7
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43da      	mvns	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	400a      	ands	r2, r1
 80048a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68d9      	ldr	r1, [r3, #12]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	4618      	mov	r0, r3
 80048b8:	4603      	mov	r3, r0
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4403      	add	r3, r0
 80048be:	3b1e      	subs	r3, #30
 80048c0:	409a      	lsls	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	e022      	b.n	8004912 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6919      	ldr	r1, [r3, #16]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	2207      	movs	r2, #7
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43da      	mvns	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	400a      	ands	r2, r1
 80048ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6919      	ldr	r1, [r3, #16]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	4618      	mov	r0, r3
 8004902:	4603      	mov	r3, r0
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	4403      	add	r3, r0
 8004908:	409a      	lsls	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b06      	cmp	r3, #6
 8004918:	d824      	bhi.n	8004964 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	3b05      	subs	r3, #5
 800492c:	221f      	movs	r2, #31
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43da      	mvns	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	400a      	ands	r2, r1
 800493a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	4618      	mov	r0, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	3b05      	subs	r3, #5
 8004956:	fa00 f203 	lsl.w	r2, r0, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	635a      	str	r2, [r3, #52]	; 0x34
 8004962:	e04c      	b.n	80049fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b0c      	cmp	r3, #12
 800496a:	d824      	bhi.n	80049b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	3b23      	subs	r3, #35	; 0x23
 800497e:	221f      	movs	r2, #31
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	43da      	mvns	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	400a      	ands	r2, r1
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	b29b      	uxth	r3, r3
 800499a:	4618      	mov	r0, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	3b23      	subs	r3, #35	; 0x23
 80049a8:	fa00 f203 	lsl.w	r2, r0, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
 80049b4:	e023      	b.n	80049fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	3b41      	subs	r3, #65	; 0x41
 80049c8:	221f      	movs	r2, #31
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43da      	mvns	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	400a      	ands	r2, r1
 80049d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	4618      	mov	r0, r3
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	3b41      	subs	r3, #65	; 0x41
 80049f2:	fa00 f203 	lsl.w	r2, r0, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049fe:	4b22      	ldr	r3, [pc, #136]	; (8004a88 <HAL_ADC_ConfigChannel+0x234>)
 8004a00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a21      	ldr	r2, [pc, #132]	; (8004a8c <HAL_ADC_ConfigChannel+0x238>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d109      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x1cc>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b12      	cmp	r3, #18
 8004a12:	d105      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a19      	ldr	r2, [pc, #100]	; (8004a8c <HAL_ADC_ConfigChannel+0x238>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d123      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x21e>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d003      	beq.n	8004a3a <HAL_ADC_ConfigChannel+0x1e6>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b11      	cmp	r3, #17
 8004a38:	d11b      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b10      	cmp	r3, #16
 8004a4c:	d111      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a4e:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <HAL_ADC_ConfigChannel+0x23c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a10      	ldr	r2, [pc, #64]	; (8004a94 <HAL_ADC_ConfigChannel+0x240>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	0c9a      	lsrs	r2, r3, #18
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a64:	e002      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f9      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	40012300 	.word	0x40012300
 8004a8c:	40012000 	.word	0x40012000
 8004a90:	2000000c 	.word	0x2000000c
 8004a94:	431bde83 	.word	0x431bde83

08004a98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004aa0:	4b79      	ldr	r3, [pc, #484]	; (8004c88 <ADC_Init+0x1f0>)
 8004aa2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6859      	ldr	r1, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	021a      	lsls	r2, r3, #8
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6859      	ldr	r1, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6899      	ldr	r1, [r3, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	4a58      	ldr	r2, [pc, #352]	; (8004c8c <ADC_Init+0x1f4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d022      	beq.n	8004b76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6899      	ldr	r1, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6899      	ldr	r1, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	609a      	str	r2, [r3, #8]
 8004b74:	e00f      	b.n	8004b96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0202 	bic.w	r2, r2, #2
 8004ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6899      	ldr	r1, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	7e1b      	ldrb	r3, [r3, #24]
 8004bb0:	005a      	lsls	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01b      	beq.n	8004bfc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004be2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6859      	ldr	r1, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	035a      	lsls	r2, r3, #13
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
 8004bfa:	e007      	b.n	8004c0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	051a      	lsls	r2, r3, #20
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6899      	ldr	r1, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c4e:	025a      	lsls	r2, r3, #9
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6899      	ldr	r1, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	029a      	lsls	r2, r3, #10
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	609a      	str	r2, [r3, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40012300 	.word	0x40012300
 8004c8c:	0f000001 	.word	0x0f000001

08004c90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cd6:	4a04      	ldr	r2, [pc, #16]	; (8004ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	60d3      	str	r3, [r2, #12]
}
 8004cdc:	bf00      	nop
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	e000ed00 	.word	0xe000ed00

08004cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <__NVIC_GetPriorityGrouping+0x18>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	0a1b      	lsrs	r3, r3, #8
 8004cf6:	f003 0307 	and.w	r3, r3, #7
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	e000ed00 	.word	0xe000ed00

08004d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	db0b      	blt.n	8004d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	f003 021f 	and.w	r2, r3, #31
 8004d20:	4907      	ldr	r1, [pc, #28]	; (8004d40 <__NVIC_EnableIRQ+0x38>)
 8004d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	2001      	movs	r0, #1
 8004d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	e000e100 	.word	0xe000e100

08004d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	6039      	str	r1, [r7, #0]
 8004d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	db0a      	blt.n	8004d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	490c      	ldr	r1, [pc, #48]	; (8004d90 <__NVIC_SetPriority+0x4c>)
 8004d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d62:	0112      	lsls	r2, r2, #4
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	440b      	add	r3, r1
 8004d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d6c:	e00a      	b.n	8004d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	4908      	ldr	r1, [pc, #32]	; (8004d94 <__NVIC_SetPriority+0x50>)
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	3b04      	subs	r3, #4
 8004d7c:	0112      	lsls	r2, r2, #4
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	440b      	add	r3, r1
 8004d82:	761a      	strb	r2, [r3, #24]
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	e000e100 	.word	0xe000e100
 8004d94:	e000ed00 	.word	0xe000ed00

08004d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b089      	sub	sp, #36	; 0x24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f1c3 0307 	rsb	r3, r3, #7
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	bf28      	it	cs
 8004db6:	2304      	movcs	r3, #4
 8004db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	2b06      	cmp	r3, #6
 8004dc0:	d902      	bls.n	8004dc8 <NVIC_EncodePriority+0x30>
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	3b03      	subs	r3, #3
 8004dc6:	e000      	b.n	8004dca <NVIC_EncodePriority+0x32>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	401a      	ands	r2, r3
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004de0:	f04f 31ff 	mov.w	r1, #4294967295
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dea:	43d9      	mvns	r1, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004df0:	4313      	orrs	r3, r2
         );
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3724      	adds	r7, #36	; 0x24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e10:	d301      	bcc.n	8004e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e12:	2301      	movs	r3, #1
 8004e14:	e00f      	b.n	8004e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e16:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <SysTick_Config+0x40>)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e1e:	210f      	movs	r1, #15
 8004e20:	f04f 30ff 	mov.w	r0, #4294967295
 8004e24:	f7ff ff8e 	bl	8004d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <SysTick_Config+0x40>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e2e:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <SysTick_Config+0x40>)
 8004e30:	2207      	movs	r2, #7
 8004e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	e000e010 	.word	0xe000e010

08004e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff ff29 	bl	8004ca4 <__NVIC_SetPriorityGrouping>
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b086      	sub	sp, #24
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	4603      	mov	r3, r0
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e6c:	f7ff ff3e 	bl	8004cec <__NVIC_GetPriorityGrouping>
 8004e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	6978      	ldr	r0, [r7, #20]
 8004e78:	f7ff ff8e 	bl	8004d98 <NVIC_EncodePriority>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e82:	4611      	mov	r1, r2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff ff5d 	bl	8004d44 <__NVIC_SetPriority>
}
 8004e8a:	bf00      	nop
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	4603      	mov	r3, r0
 8004e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff ff31 	bl	8004d08 <__NVIC_EnableIRQ>
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff ffa2 	bl	8004e00 <SysTick_Config>
 8004ebc:	4603      	mov	r3, r0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e014      	b.n	8004f02 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	791b      	ldrb	r3, [r3, #4]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d105      	bne.n	8004eee <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fe fef9 	bl	8003ce0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	795b      	ldrb	r3, [r3, #5]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_DAC_Start+0x1e>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e050      	b.n	8004fca <HAL_DAC_Start+0xc0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6819      	ldr	r1, [r3, #0]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	409a      	lsls	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d11a      	bne.n	8004f84 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f64:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d127      	bne.n	8004fbc <HAL_DAC_Start+0xb2>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b38      	cmp	r3, #56	; 0x38
 8004f70:	d124      	bne.n	8004fbc <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0201 	orr.w	r2, r2, #1
 8004f80:	605a      	str	r2, [r3, #4]
 8004f82:	e01b      	b.n	8004fbc <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f8e:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8004f9a:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fa2:	d10b      	bne.n	8004fbc <HAL_DAC_Start+0xb2>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004faa:	d107      	bne.n	8004fbc <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0202 	orr.w	r2, r2, #2
 8004fba:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b087      	sub	sp, #28
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	795b      	ldrb	r3, [r3, #5]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_DAC_ConfigChannel+0x20>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e036      	b.n	8005064 <HAL_DAC_ConfigChannel+0x8e>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2202      	movs	r2, #2
 8005000:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800500a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4013      	ands	r3, r2
 800501a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6819      	ldr	r1, [r3, #0]
 8005044:	22c0      	movs	r2, #192	; 0xc0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43da      	mvns	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	400a      	ands	r2, r1
 8005054:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2201      	movs	r2, #1
 800505a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d105      	bne.n	800509a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4413      	add	r3, r2
 8005094:	3308      	adds	r3, #8
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e004      	b.n	80050a4 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4413      	add	r3, r2
 80050a0:	3314      	adds	r3, #20
 80050a2:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	461a      	mov	r2, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d004      	beq.n	80050d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2280      	movs	r2, #128	; 0x80
 80050d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e00c      	b.n	80050f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2205      	movs	r2, #5
 80050dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0201 	bic.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005100:	b480      	push	{r7}
 8005102:	b089      	sub	sp, #36	; 0x24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800510e:	2300      	movs	r3, #0
 8005110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005112:	2300      	movs	r3, #0
 8005114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	e16b      	b.n	80053f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800511c:	2201      	movs	r2, #1
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4013      	ands	r3, r2
 800512e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	429a      	cmp	r2, r3
 8005136:	f040 815a 	bne.w	80053ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d003      	beq.n	800514a <HAL_GPIO_Init+0x4a>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b12      	cmp	r3, #18
 8005148:	d123      	bne.n	8005192 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	08da      	lsrs	r2, r3, #3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3208      	adds	r2, #8
 8005152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	220f      	movs	r2, #15
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4013      	ands	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	08da      	lsrs	r2, r3, #3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3208      	adds	r2, #8
 800518c:	69b9      	ldr	r1, [r7, #24]
 800518e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	2203      	movs	r2, #3
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4013      	ands	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f003 0203 	and.w	r2, r3, #3
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	4313      	orrs	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d00b      	beq.n	80051e6 <HAL_GPIO_Init+0xe6>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d007      	beq.n	80051e6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051da:	2b11      	cmp	r3, #17
 80051dc:	d003      	beq.n	80051e6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b12      	cmp	r3, #18
 80051e4:	d130      	bne.n	8005248 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	2203      	movs	r2, #3
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	43db      	mvns	r3, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4013      	ands	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4313      	orrs	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800521c:	2201      	movs	r2, #1
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	43db      	mvns	r3, r3
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	4013      	ands	r3, r2
 800522a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	091b      	lsrs	r3, r3, #4
 8005232:	f003 0201 	and.w	r2, r3, #1
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	4313      	orrs	r3, r2
 8005240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	2203      	movs	r2, #3
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	43db      	mvns	r3, r3
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	4013      	ands	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4313      	orrs	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80b4 	beq.w	80053ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	4b5f      	ldr	r3, [pc, #380]	; (8005408 <HAL_GPIO_Init+0x308>)
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	4a5e      	ldr	r2, [pc, #376]	; (8005408 <HAL_GPIO_Init+0x308>)
 8005290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005294:	6453      	str	r3, [r2, #68]	; 0x44
 8005296:	4b5c      	ldr	r3, [pc, #368]	; (8005408 <HAL_GPIO_Init+0x308>)
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052a2:	4a5a      	ldr	r2, [pc, #360]	; (800540c <HAL_GPIO_Init+0x30c>)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	089b      	lsrs	r3, r3, #2
 80052a8:	3302      	adds	r3, #2
 80052aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	220f      	movs	r2, #15
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	43db      	mvns	r3, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4013      	ands	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a51      	ldr	r2, [pc, #324]	; (8005410 <HAL_GPIO_Init+0x310>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d02b      	beq.n	8005326 <HAL_GPIO_Init+0x226>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a50      	ldr	r2, [pc, #320]	; (8005414 <HAL_GPIO_Init+0x314>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d025      	beq.n	8005322 <HAL_GPIO_Init+0x222>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a4f      	ldr	r2, [pc, #316]	; (8005418 <HAL_GPIO_Init+0x318>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d01f      	beq.n	800531e <HAL_GPIO_Init+0x21e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a4e      	ldr	r2, [pc, #312]	; (800541c <HAL_GPIO_Init+0x31c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d019      	beq.n	800531a <HAL_GPIO_Init+0x21a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a4d      	ldr	r2, [pc, #308]	; (8005420 <HAL_GPIO_Init+0x320>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d013      	beq.n	8005316 <HAL_GPIO_Init+0x216>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a4c      	ldr	r2, [pc, #304]	; (8005424 <HAL_GPIO_Init+0x324>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00d      	beq.n	8005312 <HAL_GPIO_Init+0x212>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a4b      	ldr	r2, [pc, #300]	; (8005428 <HAL_GPIO_Init+0x328>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d007      	beq.n	800530e <HAL_GPIO_Init+0x20e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a4a      	ldr	r2, [pc, #296]	; (800542c <HAL_GPIO_Init+0x32c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d101      	bne.n	800530a <HAL_GPIO_Init+0x20a>
 8005306:	2307      	movs	r3, #7
 8005308:	e00e      	b.n	8005328 <HAL_GPIO_Init+0x228>
 800530a:	2308      	movs	r3, #8
 800530c:	e00c      	b.n	8005328 <HAL_GPIO_Init+0x228>
 800530e:	2306      	movs	r3, #6
 8005310:	e00a      	b.n	8005328 <HAL_GPIO_Init+0x228>
 8005312:	2305      	movs	r3, #5
 8005314:	e008      	b.n	8005328 <HAL_GPIO_Init+0x228>
 8005316:	2304      	movs	r3, #4
 8005318:	e006      	b.n	8005328 <HAL_GPIO_Init+0x228>
 800531a:	2303      	movs	r3, #3
 800531c:	e004      	b.n	8005328 <HAL_GPIO_Init+0x228>
 800531e:	2302      	movs	r3, #2
 8005320:	e002      	b.n	8005328 <HAL_GPIO_Init+0x228>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <HAL_GPIO_Init+0x228>
 8005326:	2300      	movs	r3, #0
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	f002 0203 	and.w	r2, r2, #3
 800532e:	0092      	lsls	r2, r2, #2
 8005330:	4093      	lsls	r3, r2
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4313      	orrs	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005338:	4934      	ldr	r1, [pc, #208]	; (800540c <HAL_GPIO_Init+0x30c>)
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	089b      	lsrs	r3, r3, #2
 800533e:	3302      	adds	r3, #2
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005346:	4b3a      	ldr	r3, [pc, #232]	; (8005430 <HAL_GPIO_Init+0x330>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	43db      	mvns	r3, r3
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4013      	ands	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800536a:	4a31      	ldr	r2, [pc, #196]	; (8005430 <HAL_GPIO_Init+0x330>)
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005370:	4b2f      	ldr	r3, [pc, #188]	; (8005430 <HAL_GPIO_Init+0x330>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	43db      	mvns	r3, r3
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	4013      	ands	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005394:	4a26      	ldr	r2, [pc, #152]	; (8005430 <HAL_GPIO_Init+0x330>)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800539a:	4b25      	ldr	r3, [pc, #148]	; (8005430 <HAL_GPIO_Init+0x330>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	43db      	mvns	r3, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	4013      	ands	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053be:	4a1c      	ldr	r2, [pc, #112]	; (8005430 <HAL_GPIO_Init+0x330>)
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053c4:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <HAL_GPIO_Init+0x330>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	43db      	mvns	r3, r3
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	4013      	ands	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053e8:	4a11      	ldr	r2, [pc, #68]	; (8005430 <HAL_GPIO_Init+0x330>)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	3301      	adds	r3, #1
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	2b0f      	cmp	r3, #15
 80053f8:	f67f ae90 	bls.w	800511c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053fc:	bf00      	nop
 80053fe:	3724      	adds	r7, #36	; 0x24
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	40023800 	.word	0x40023800
 800540c:	40013800 	.word	0x40013800
 8005410:	40020000 	.word	0x40020000
 8005414:	40020400 	.word	0x40020400
 8005418:	40020800 	.word	0x40020800
 800541c:	40020c00 	.word	0x40020c00
 8005420:	40021000 	.word	0x40021000
 8005424:	40021400 	.word	0x40021400
 8005428:	40021800 	.word	0x40021800
 800542c:	40021c00 	.word	0x40021c00
 8005430:	40013c00 	.word	0x40013c00

08005434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	887b      	ldrh	r3, [r7, #2]
 8005446:	4013      	ands	r3, r2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
 8005450:	e001      	b.n	8005456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005452:	2300      	movs	r3, #0
 8005454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005456:	7bfb      	ldrb	r3, [r7, #15]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	4603      	mov	r3, r0
 800546c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800546e:	4b08      	ldr	r3, [pc, #32]	; (8005490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	4013      	ands	r3, r2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d006      	beq.n	8005488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800547a:	4a05      	ldr	r2, [pc, #20]	; (8005490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800547c:	88fb      	ldrh	r3, [r7, #6]
 800547e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fd ff88 	bl	8003398 <HAL_GPIO_EXTI_Callback>
  }
}
 8005488:	bf00      	nop
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40013c00 	.word	0x40013c00

08005494 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <HAL_PWR_PVD_IRQHandler+0x20>)
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80054a4:	f000 f808 	bl	80054b8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80054a8:	4b02      	ldr	r3, [pc, #8]	; (80054b4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80054aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054ae:	615a      	str	r2, [r3, #20]
  }
}
 80054b0:	bf00      	nop
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40013c00 	.word	0x40013c00

080054b8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80054bc:	bf00      	nop
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
	...

080054c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e22d      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d075      	beq.n	80055d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054e6:	4ba3      	ldr	r3, [pc, #652]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 030c 	and.w	r3, r3, #12
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d00c      	beq.n	800550c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054f2:	4ba0      	ldr	r3, [pc, #640]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d112      	bne.n	8005524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054fe:	4b9d      	ldr	r3, [pc, #628]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800550a:	d10b      	bne.n	8005524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800550c:	4b99      	ldr	r3, [pc, #612]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d05b      	beq.n	80055d0 <HAL_RCC_OscConfig+0x108>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d157      	bne.n	80055d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e208      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552c:	d106      	bne.n	800553c <HAL_RCC_OscConfig+0x74>
 800552e:	4b91      	ldr	r3, [pc, #580]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a90      	ldr	r2, [pc, #576]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e01d      	b.n	8005578 <HAL_RCC_OscConfig+0xb0>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005544:	d10c      	bne.n	8005560 <HAL_RCC_OscConfig+0x98>
 8005546:	4b8b      	ldr	r3, [pc, #556]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a8a      	ldr	r2, [pc, #552]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 800554c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	4b88      	ldr	r3, [pc, #544]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a87      	ldr	r2, [pc, #540]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	e00b      	b.n	8005578 <HAL_RCC_OscConfig+0xb0>
 8005560:	4b84      	ldr	r3, [pc, #528]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a83      	ldr	r2, [pc, #524]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	4b81      	ldr	r3, [pc, #516]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a80      	ldr	r2, [pc, #512]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d013      	beq.n	80055a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005580:	f7fe fec4 	bl	800430c <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005588:	f7fe fec0 	bl	800430c <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b64      	cmp	r3, #100	; 0x64
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e1cd      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559a:	4b76      	ldr	r3, [pc, #472]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0f0      	beq.n	8005588 <HAL_RCC_OscConfig+0xc0>
 80055a6:	e014      	b.n	80055d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a8:	f7fe feb0 	bl	800430c <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b0:	f7fe feac 	bl	800430c <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b64      	cmp	r3, #100	; 0x64
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e1b9      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055c2:	4b6c      	ldr	r3, [pc, #432]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0xe8>
 80055ce:	e000      	b.n	80055d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d063      	beq.n	80056a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055de:	4b65      	ldr	r3, [pc, #404]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 030c 	and.w	r3, r3, #12
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ea:	4b62      	ldr	r3, [pc, #392]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d11c      	bne.n	8005630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055f6:	4b5f      	ldr	r3, [pc, #380]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d116      	bne.n	8005630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005602:	4b5c      	ldr	r3, [pc, #368]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <HAL_RCC_OscConfig+0x152>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d001      	beq.n	800561a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e18d      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800561a:	4b56      	ldr	r3, [pc, #344]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	4952      	ldr	r1, [pc, #328]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 800562a:	4313      	orrs	r3, r2
 800562c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800562e:	e03a      	b.n	80056a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d020      	beq.n	800567a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005638:	4b4f      	ldr	r3, [pc, #316]	; (8005778 <HAL_RCC_OscConfig+0x2b0>)
 800563a:	2201      	movs	r2, #1
 800563c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563e:	f7fe fe65 	bl	800430c <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005644:	e008      	b.n	8005658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005646:	f7fe fe61 	bl	800430c <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e16e      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005658:	4b46      	ldr	r3, [pc, #280]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0f0      	beq.n	8005646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005664:	4b43      	ldr	r3, [pc, #268]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4940      	ldr	r1, [pc, #256]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005674:	4313      	orrs	r3, r2
 8005676:	600b      	str	r3, [r1, #0]
 8005678:	e015      	b.n	80056a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800567a:	4b3f      	ldr	r3, [pc, #252]	; (8005778 <HAL_RCC_OscConfig+0x2b0>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fe fe44 	bl	800430c <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005688:	f7fe fe40 	bl	800430c <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e14d      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800569a:	4b36      	ldr	r3, [pc, #216]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d030      	beq.n	8005714 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d016      	beq.n	80056e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ba:	4b30      	ldr	r3, [pc, #192]	; (800577c <HAL_RCC_OscConfig+0x2b4>)
 80056bc:	2201      	movs	r2, #1
 80056be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c0:	f7fe fe24 	bl	800430c <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056c8:	f7fe fe20 	bl	800430c <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e12d      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056da:	4b26      	ldr	r3, [pc, #152]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 80056dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x200>
 80056e6:	e015      	b.n	8005714 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056e8:	4b24      	ldr	r3, [pc, #144]	; (800577c <HAL_RCC_OscConfig+0x2b4>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ee:	f7fe fe0d 	bl	800430c <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056f6:	f7fe fe09 	bl	800430c <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e116      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005708:	4b1a      	ldr	r3, [pc, #104]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 800570a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f0      	bne.n	80056f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 80a0 	beq.w	8005862 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005722:	2300      	movs	r3, #0
 8005724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005726:	4b13      	ldr	r3, [pc, #76]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10f      	bne.n	8005752 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	4a0e      	ldr	r2, [pc, #56]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 800573c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005740:	6413      	str	r3, [r2, #64]	; 0x40
 8005742:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <HAL_RCC_OscConfig+0x2ac>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800574e:	2301      	movs	r3, #1
 8005750:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <HAL_RCC_OscConfig+0x2b8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575a:	2b00      	cmp	r3, #0
 800575c:	d121      	bne.n	80057a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800575e:	4b08      	ldr	r3, [pc, #32]	; (8005780 <HAL_RCC_OscConfig+0x2b8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a07      	ldr	r2, [pc, #28]	; (8005780 <HAL_RCC_OscConfig+0x2b8>)
 8005764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800576a:	f7fe fdcf 	bl	800430c <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005770:	e011      	b.n	8005796 <HAL_RCC_OscConfig+0x2ce>
 8005772:	bf00      	nop
 8005774:	40023800 	.word	0x40023800
 8005778:	42470000 	.word	0x42470000
 800577c:	42470e80 	.word	0x42470e80
 8005780:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005784:	f7fe fdc2 	bl	800430c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e0cf      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005796:	4b6a      	ldr	r3, [pc, #424]	; (8005940 <HAL_RCC_OscConfig+0x478>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d106      	bne.n	80057b8 <HAL_RCC_OscConfig+0x2f0>
 80057aa:	4b66      	ldr	r3, [pc, #408]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ae:	4a65      	ldr	r2, [pc, #404]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	6713      	str	r3, [r2, #112]	; 0x70
 80057b6:	e01c      	b.n	80057f2 <HAL_RCC_OscConfig+0x32a>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b05      	cmp	r3, #5
 80057be:	d10c      	bne.n	80057da <HAL_RCC_OscConfig+0x312>
 80057c0:	4b60      	ldr	r3, [pc, #384]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 80057c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c4:	4a5f      	ldr	r2, [pc, #380]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 80057c6:	f043 0304 	orr.w	r3, r3, #4
 80057ca:	6713      	str	r3, [r2, #112]	; 0x70
 80057cc:	4b5d      	ldr	r3, [pc, #372]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 80057ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d0:	4a5c      	ldr	r2, [pc, #368]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 80057d2:	f043 0301 	orr.w	r3, r3, #1
 80057d6:	6713      	str	r3, [r2, #112]	; 0x70
 80057d8:	e00b      	b.n	80057f2 <HAL_RCC_OscConfig+0x32a>
 80057da:	4b5a      	ldr	r3, [pc, #360]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 80057dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057de:	4a59      	ldr	r2, [pc, #356]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	6713      	str	r3, [r2, #112]	; 0x70
 80057e6:	4b57      	ldr	r3, [pc, #348]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	4a56      	ldr	r2, [pc, #344]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 80057ec:	f023 0304 	bic.w	r3, r3, #4
 80057f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d015      	beq.n	8005826 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fa:	f7fe fd87 	bl	800430c <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005800:	e00a      	b.n	8005818 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005802:	f7fe fd83 	bl	800430c <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005810:	4293      	cmp	r3, r2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e08e      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005818:	4b4a      	ldr	r3, [pc, #296]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0ee      	beq.n	8005802 <HAL_RCC_OscConfig+0x33a>
 8005824:	e014      	b.n	8005850 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005826:	f7fe fd71 	bl	800430c <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800582c:	e00a      	b.n	8005844 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800582e:	f7fe fd6d 	bl	800430c <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f241 3288 	movw	r2, #5000	; 0x1388
 800583c:	4293      	cmp	r3, r2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e078      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005844:	4b3f      	ldr	r3, [pc, #252]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 8005846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1ee      	bne.n	800582e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005850:	7dfb      	ldrb	r3, [r7, #23]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d105      	bne.n	8005862 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005856:	4b3b      	ldr	r3, [pc, #236]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	4a3a      	ldr	r2, [pc, #232]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 800585c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005860:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d064      	beq.n	8005934 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800586a:	4b36      	ldr	r3, [pc, #216]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 030c 	and.w	r3, r3, #12
 8005872:	2b08      	cmp	r3, #8
 8005874:	d05c      	beq.n	8005930 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d141      	bne.n	8005902 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587e:	4b32      	ldr	r3, [pc, #200]	; (8005948 <HAL_RCC_OscConfig+0x480>)
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005884:	f7fe fd42 	bl	800430c <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800588c:	f7fe fd3e 	bl	800430c <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e04b      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589e:	4b29      	ldr	r3, [pc, #164]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f0      	bne.n	800588c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69da      	ldr	r2, [r3, #28]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	019b      	lsls	r3, r3, #6
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	085b      	lsrs	r3, r3, #1
 80058c2:	3b01      	subs	r3, #1
 80058c4:	041b      	lsls	r3, r3, #16
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	061b      	lsls	r3, r3, #24
 80058ce:	491d      	ldr	r1, [pc, #116]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058d4:	4b1c      	ldr	r3, [pc, #112]	; (8005948 <HAL_RCC_OscConfig+0x480>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058da:	f7fe fd17 	bl	800430c <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e2:	f7fe fd13 	bl	800430c <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e020      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f4:	4b13      	ldr	r3, [pc, #76]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0x41a>
 8005900:	e018      	b.n	8005934 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005902:	4b11      	ldr	r3, [pc, #68]	; (8005948 <HAL_RCC_OscConfig+0x480>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005908:	f7fe fd00 	bl	800430c <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005910:	f7fe fcfc 	bl	800430c <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e009      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005922:	4b08      	ldr	r3, [pc, #32]	; (8005944 <HAL_RCC_OscConfig+0x47c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f0      	bne.n	8005910 <HAL_RCC_OscConfig+0x448>
 800592e:	e001      	b.n	8005934 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40007000 	.word	0x40007000
 8005944:	40023800 	.word	0x40023800
 8005948:	42470060 	.word	0x42470060

0800594c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e0ca      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005960:	4b67      	ldr	r3, [pc, #412]	; (8005b00 <HAL_RCC_ClockConfig+0x1b4>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d90c      	bls.n	8005988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596e:	4b64      	ldr	r3, [pc, #400]	; (8005b00 <HAL_RCC_ClockConfig+0x1b4>)
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005976:	4b62      	ldr	r3, [pc, #392]	; (8005b00 <HAL_RCC_ClockConfig+0x1b4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d001      	beq.n	8005988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0b6      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d020      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059a0:	4b58      	ldr	r3, [pc, #352]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4a57      	ldr	r2, [pc, #348]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 80059a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059b8:	4b52      	ldr	r3, [pc, #328]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	4a51      	ldr	r2, [pc, #324]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 80059be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c4:	4b4f      	ldr	r3, [pc, #316]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	494c      	ldr	r1, [pc, #304]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d044      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d107      	bne.n	80059fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	4b46      	ldr	r3, [pc, #280]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d119      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e07d      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d003      	beq.n	8005a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d107      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a0a:	4b3e      	ldr	r3, [pc, #248]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e06d      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a1a:	4b3a      	ldr	r3, [pc, #232]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e065      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a2a:	4b36      	ldr	r3, [pc, #216]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f023 0203 	bic.w	r2, r3, #3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4933      	ldr	r1, [pc, #204]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a3c:	f7fe fc66 	bl	800430c <HAL_GetTick>
 8005a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a42:	e00a      	b.n	8005a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a44:	f7fe fc62 	bl	800430c <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e04d      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5a:	4b2a      	ldr	r3, [pc, #168]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 020c 	and.w	r2, r3, #12
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d1eb      	bne.n	8005a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a6c:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <HAL_RCC_ClockConfig+0x1b4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d20c      	bcs.n	8005a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7a:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <HAL_RCC_ClockConfig+0x1b4>)
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a82:	4b1f      	ldr	r3, [pc, #124]	; (8005b00 <HAL_RCC_ClockConfig+0x1b4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e030      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aa0:	4b18      	ldr	r3, [pc, #96]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4915      	ldr	r1, [pc, #84]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d009      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005abe:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	490d      	ldr	r1, [pc, #52]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ad2:	f000 f81d 	bl	8005b10 <HAL_RCC_GetSysClockFreq>
 8005ad6:	4601      	mov	r1, r0
 8005ad8:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	091b      	lsrs	r3, r3, #4
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	4a09      	ldr	r2, [pc, #36]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae4:	5cd3      	ldrb	r3, [r2, r3]
 8005ae6:	fa21 f303 	lsr.w	r3, r1, r3
 8005aea:	4a08      	ldr	r2, [pc, #32]	; (8005b0c <HAL_RCC_ClockConfig+0x1c0>)
 8005aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8005aee:	2000      	movs	r0, #0
 8005af0:	f7fe fbc8 	bl	8004284 <HAL_InitTick>

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40023c00 	.word	0x40023c00
 8005b04:	40023800 	.word	0x40023800
 8005b08:	08007f8c 	.word	0x08007f8c
 8005b0c:	2000000c 	.word	0x2000000c

08005b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b26:	4b63      	ldr	r3, [pc, #396]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d007      	beq.n	8005b42 <HAL_RCC_GetSysClockFreq+0x32>
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d008      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0x38>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f040 80b4 	bne.w	8005ca4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b3c:	4b5e      	ldr	r3, [pc, #376]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005b3e:	60bb      	str	r3, [r7, #8]
       break;
 8005b40:	e0b3      	b.n	8005caa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b42:	4b5e      	ldr	r3, [pc, #376]	; (8005cbc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005b44:	60bb      	str	r3, [r7, #8]
      break;
 8005b46:	e0b0      	b.n	8005caa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b48:	4b5a      	ldr	r3, [pc, #360]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b52:	4b58      	ldr	r3, [pc, #352]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d04a      	beq.n	8005bf4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b5e:	4b55      	ldr	r3, [pc, #340]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	099b      	lsrs	r3, r3, #6
 8005b64:	f04f 0400 	mov.w	r4, #0
 8005b68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	ea03 0501 	and.w	r5, r3, r1
 8005b74:	ea04 0602 	and.w	r6, r4, r2
 8005b78:	4629      	mov	r1, r5
 8005b7a:	4632      	mov	r2, r6
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	f04f 0400 	mov.w	r4, #0
 8005b84:	0154      	lsls	r4, r2, #5
 8005b86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b8a:	014b      	lsls	r3, r1, #5
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4622      	mov	r2, r4
 8005b90:	1b49      	subs	r1, r1, r5
 8005b92:	eb62 0206 	sbc.w	r2, r2, r6
 8005b96:	f04f 0300 	mov.w	r3, #0
 8005b9a:	f04f 0400 	mov.w	r4, #0
 8005b9e:	0194      	lsls	r4, r2, #6
 8005ba0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ba4:	018b      	lsls	r3, r1, #6
 8005ba6:	1a5b      	subs	r3, r3, r1
 8005ba8:	eb64 0402 	sbc.w	r4, r4, r2
 8005bac:	f04f 0100 	mov.w	r1, #0
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	00e2      	lsls	r2, r4, #3
 8005bb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005bba:	00d9      	lsls	r1, r3, #3
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4614      	mov	r4, r2
 8005bc0:	195b      	adds	r3, r3, r5
 8005bc2:	eb44 0406 	adc.w	r4, r4, r6
 8005bc6:	f04f 0100 	mov.w	r1, #0
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	0262      	lsls	r2, r4, #9
 8005bd0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005bd4:	0259      	lsls	r1, r3, #9
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4614      	mov	r4, r2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	4621      	mov	r1, r4
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f04f 0400 	mov.w	r4, #0
 8005be4:	461a      	mov	r2, r3
 8005be6:	4623      	mov	r3, r4
 8005be8:	f7fa faf6 	bl	80001d8 <__aeabi_uldivmod>
 8005bec:	4603      	mov	r3, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	e049      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bf4:	4b2f      	ldr	r3, [pc, #188]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	099b      	lsrs	r3, r3, #6
 8005bfa:	f04f 0400 	mov.w	r4, #0
 8005bfe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	ea03 0501 	and.w	r5, r3, r1
 8005c0a:	ea04 0602 	and.w	r6, r4, r2
 8005c0e:	4629      	mov	r1, r5
 8005c10:	4632      	mov	r2, r6
 8005c12:	f04f 0300 	mov.w	r3, #0
 8005c16:	f04f 0400 	mov.w	r4, #0
 8005c1a:	0154      	lsls	r4, r2, #5
 8005c1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c20:	014b      	lsls	r3, r1, #5
 8005c22:	4619      	mov	r1, r3
 8005c24:	4622      	mov	r2, r4
 8005c26:	1b49      	subs	r1, r1, r5
 8005c28:	eb62 0206 	sbc.w	r2, r2, r6
 8005c2c:	f04f 0300 	mov.w	r3, #0
 8005c30:	f04f 0400 	mov.w	r4, #0
 8005c34:	0194      	lsls	r4, r2, #6
 8005c36:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c3a:	018b      	lsls	r3, r1, #6
 8005c3c:	1a5b      	subs	r3, r3, r1
 8005c3e:	eb64 0402 	sbc.w	r4, r4, r2
 8005c42:	f04f 0100 	mov.w	r1, #0
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	00e2      	lsls	r2, r4, #3
 8005c4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c50:	00d9      	lsls	r1, r3, #3
 8005c52:	460b      	mov	r3, r1
 8005c54:	4614      	mov	r4, r2
 8005c56:	195b      	adds	r3, r3, r5
 8005c58:	eb44 0406 	adc.w	r4, r4, r6
 8005c5c:	f04f 0100 	mov.w	r1, #0
 8005c60:	f04f 0200 	mov.w	r2, #0
 8005c64:	02a2      	lsls	r2, r4, #10
 8005c66:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005c6a:	0299      	lsls	r1, r3, #10
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4614      	mov	r4, r2
 8005c70:	4618      	mov	r0, r3
 8005c72:	4621      	mov	r1, r4
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f04f 0400 	mov.w	r4, #0
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	4623      	mov	r3, r4
 8005c7e:	f7fa faab 	bl	80001d8 <__aeabi_uldivmod>
 8005c82:	4603      	mov	r3, r0
 8005c84:	460c      	mov	r4, r1
 8005c86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c88:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	0c1b      	lsrs	r3, r3, #16
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	3301      	adds	r3, #1
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca0:	60bb      	str	r3, [r7, #8]
      break;
 8005ca2:	e002      	b.n	8005caa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ca4:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005ca6:	60bb      	str	r3, [r7, #8]
      break;
 8005ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005caa:	68bb      	ldr	r3, [r7, #8]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cb4:	40023800 	.word	0x40023800
 8005cb8:	00f42400 	.word	0x00f42400
 8005cbc:	007a1200 	.word	0x007a1200

08005cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cc4:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	2000000c 	.word	0x2000000c

08005cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cdc:	f7ff fff0 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8005ce0:	4601      	mov	r1, r0
 8005ce2:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	0a9b      	lsrs	r3, r3, #10
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	4a03      	ldr	r2, [pc, #12]	; (8005cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cee:	5cd3      	ldrb	r3, [r2, r3]
 8005cf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	08007f9c 	.word	0x08007f9c

08005d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d04:	f7ff ffdc 	bl	8005cc0 <HAL_RCC_GetHCLKFreq>
 8005d08:	4601      	mov	r1, r0
 8005d0a:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	0b5b      	lsrs	r3, r3, #13
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	4a03      	ldr	r2, [pc, #12]	; (8005d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d16:	5cd3      	ldrb	r3, [r2, r3]
 8005d18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40023800 	.word	0x40023800
 8005d24:	08007f9c 	.word	0x08007f9c

08005d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e056      	b.n	8005de8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d106      	bne.n	8005d5a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7fe f807 	bl	8003d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d70:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	ea42 0103 	orr.w	r1, r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	0c1b      	lsrs	r3, r3, #16
 8005db8:	f003 0104 	and.w	r1, r3, #4
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69da      	ldr	r2, [r3, #28]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dd6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_SPI_Transmit+0x22>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e11e      	b.n	8006050 <HAL_SPI_Transmit+0x260>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e1a:	f7fe fa77 	bl	800430c <HAL_GetTick>
 8005e1e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e20:	88fb      	ldrh	r3, [r7, #6]
 8005e22:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d002      	beq.n	8005e36 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
 8005e32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e34:	e103      	b.n	800603e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <HAL_SPI_Transmit+0x52>
 8005e3c:	88fb      	ldrh	r3, [r7, #6]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d102      	bne.n	8005e48 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e46:	e0fa      	b.n	800603e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	88fa      	ldrh	r2, [r7, #6]
 8005e60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	88fa      	ldrh	r2, [r7, #6]
 8005e66:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e8e:	d107      	bne.n	8005ea0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b40      	cmp	r3, #64	; 0x40
 8005eac:	d007      	beq.n	8005ebe <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ebc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec6:	d14b      	bne.n	8005f60 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_SPI_Transmit+0xe6>
 8005ed0:	8afb      	ldrh	r3, [r7, #22]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d13e      	bne.n	8005f54 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	881a      	ldrh	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee6:	1c9a      	adds	r2, r3, #2
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005efa:	e02b      	b.n	8005f54 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d112      	bne.n	8005f30 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	881a      	ldrh	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	1c9a      	adds	r2, r3, #2
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f2e:	e011      	b.n	8005f54 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f30:	f7fe f9ec 	bl	800430c <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d803      	bhi.n	8005f48 <HAL_SPI_Transmit+0x158>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d102      	bne.n	8005f4e <HAL_SPI_Transmit+0x15e>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d102      	bne.n	8005f54 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f52:	e074      	b.n	800603e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1ce      	bne.n	8005efc <HAL_SPI_Transmit+0x10c>
 8005f5e:	e04c      	b.n	8005ffa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <HAL_SPI_Transmit+0x17e>
 8005f68:	8afb      	ldrh	r3, [r7, #22]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d140      	bne.n	8005ff0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	330c      	adds	r3, #12
 8005f78:	7812      	ldrb	r2, [r2, #0]
 8005f7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f94:	e02c      	b.n	8005ff0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d113      	bne.n	8005fcc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	330c      	adds	r3, #12
 8005fae:	7812      	ldrb	r2, [r2, #0]
 8005fb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fca:	e011      	b.n	8005ff0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fcc:	f7fe f99e 	bl	800430c <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d803      	bhi.n	8005fe4 <HAL_SPI_Transmit+0x1f4>
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe2:	d102      	bne.n	8005fea <HAL_SPI_Transmit+0x1fa>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fee:	e026      	b.n	800603e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1cd      	bne.n	8005f96 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fa44 	bl	800648c <SPI_EndRxTxTransaction>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006018:	2300      	movs	r3, #0
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	77fb      	strb	r3, [r7, #31]
 800603a:	e000      	b.n	800603e <HAL_SPI_Transmit+0x24e>
  }

error:
 800603c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800604e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3720      	adds	r7, #32
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08c      	sub	sp, #48	; 0x30
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006066:	2301      	movs	r3, #1
 8006068:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006076:	2b01      	cmp	r3, #1
 8006078:	d101      	bne.n	800607e <HAL_SPI_TransmitReceive+0x26>
 800607a:	2302      	movs	r3, #2
 800607c:	e18a      	b.n	8006394 <HAL_SPI_TransmitReceive+0x33c>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006086:	f7fe f941 	bl	800430c <HAL_GetTick>
 800608a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800609c:	887b      	ldrh	r3, [r7, #2]
 800609e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d00f      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x70>
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ae:	d107      	bne.n	80060c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d103      	bne.n	80060c0 <HAL_SPI_TransmitReceive+0x68>
 80060b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060bc:	2b04      	cmp	r3, #4
 80060be:	d003      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80060c0:	2302      	movs	r3, #2
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060c6:	e15b      	b.n	8006380 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <HAL_SPI_TransmitReceive+0x82>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <HAL_SPI_TransmitReceive+0x82>
 80060d4:	887b      	ldrh	r3, [r7, #2]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d103      	bne.n	80060e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060e0:	e14e      	b.n	8006380 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d003      	beq.n	80060f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2205      	movs	r2, #5
 80060f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	887a      	ldrh	r2, [r7, #2]
 8006106:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	887a      	ldrh	r2, [r7, #2]
 800610c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	887a      	ldrh	r2, [r7, #2]
 8006118:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	887a      	ldrh	r2, [r7, #2]
 800611e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006136:	2b40      	cmp	r3, #64	; 0x40
 8006138:	d007      	beq.n	800614a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006148:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006152:	d178      	bne.n	8006246 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <HAL_SPI_TransmitReceive+0x10a>
 800615c:	8b7b      	ldrh	r3, [r7, #26]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d166      	bne.n	8006230 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	881a      	ldrh	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	1c9a      	adds	r2, r3, #2
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006186:	e053      	b.n	8006230 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b02      	cmp	r3, #2
 8006194:	d11b      	bne.n	80061ce <HAL_SPI_TransmitReceive+0x176>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d016      	beq.n	80061ce <HAL_SPI_TransmitReceive+0x176>
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d113      	bne.n	80061ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061aa:	881a      	ldrh	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	1c9a      	adds	r2, r3, #2
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d119      	bne.n	8006210 <HAL_SPI_TransmitReceive+0x1b8>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d014      	beq.n	8006210 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	b292      	uxth	r2, r2
 80061f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	1c9a      	adds	r2, r3, #2
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800620c:	2301      	movs	r3, #1
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006210:	f7fe f87c 	bl	800430c <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800621c:	429a      	cmp	r2, r3
 800621e:	d807      	bhi.n	8006230 <HAL_SPI_TransmitReceive+0x1d8>
 8006220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006226:	d003      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800622e:	e0a7      	b.n	8006380 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006234:	b29b      	uxth	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1a6      	bne.n	8006188 <HAL_SPI_TransmitReceive+0x130>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800623e:	b29b      	uxth	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1a1      	bne.n	8006188 <HAL_SPI_TransmitReceive+0x130>
 8006244:	e07c      	b.n	8006340 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_SPI_TransmitReceive+0x1fc>
 800624e:	8b7b      	ldrh	r3, [r7, #26]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d16b      	bne.n	800632c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	330c      	adds	r3, #12
 800625e:	7812      	ldrb	r2, [r2, #0]
 8006260:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800627a:	e057      	b.n	800632c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b02      	cmp	r3, #2
 8006288:	d11c      	bne.n	80062c4 <HAL_SPI_TransmitReceive+0x26c>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800628e:	b29b      	uxth	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d017      	beq.n	80062c4 <HAL_SPI_TransmitReceive+0x26c>
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	2b01      	cmp	r3, #1
 8006298:	d114      	bne.n	80062c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	7812      	ldrb	r2, [r2, #0]
 80062a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d119      	bne.n	8006306 <HAL_SPI_TransmitReceive+0x2ae>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d014      	beq.n	8006306 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006302:	2301      	movs	r3, #1
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006306:	f7fe f801 	bl	800430c <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006312:	429a      	cmp	r2, r3
 8006314:	d803      	bhi.n	800631e <HAL_SPI_TransmitReceive+0x2c6>
 8006316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631c:	d102      	bne.n	8006324 <HAL_SPI_TransmitReceive+0x2cc>
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	2b00      	cmp	r3, #0
 8006322:	d103      	bne.n	800632c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800632a:	e029      	b.n	8006380 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006330:	b29b      	uxth	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1a2      	bne.n	800627c <HAL_SPI_TransmitReceive+0x224>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800633a:	b29b      	uxth	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	d19d      	bne.n	800627c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006342:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f8a1 	bl	800648c <SPI_EndRxTxTransaction>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d006      	beq.n	800635e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2220      	movs	r2, #32
 800635a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800635c:	e010      	b.n	8006380 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10b      	bne.n	800637e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006366:	2300      	movs	r3, #0
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	e000      	b.n	8006380 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800637e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006390:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006394:	4618      	mov	r0, r3
 8006396:	3730      	adds	r7, #48	; 0x30
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063aa:	b2db      	uxtb	r3, r3
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	603b      	str	r3, [r7, #0]
 80063c4:	4613      	mov	r3, r2
 80063c6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063c8:	e04c      	b.n	8006464 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d048      	beq.n	8006464 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80063d2:	f7fd ff9b 	bl	800430c <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d902      	bls.n	80063e8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d13d      	bne.n	8006464 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006400:	d111      	bne.n	8006426 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800640a:	d004      	beq.n	8006416 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006414:	d107      	bne.n	8006426 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006424:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800642e:	d10f      	bne.n	8006450 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800644e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e00f      	b.n	8006484 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	4013      	ands	r3, r2
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	429a      	cmp	r2, r3
 8006472:	bf0c      	ite	eq
 8006474:	2301      	moveq	r3, #1
 8006476:	2300      	movne	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	461a      	mov	r2, r3
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	429a      	cmp	r2, r3
 8006480:	d1a3      	bne.n	80063ca <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006498:	4b1b      	ldr	r3, [pc, #108]	; (8006508 <SPI_EndRxTxTransaction+0x7c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a1b      	ldr	r2, [pc, #108]	; (800650c <SPI_EndRxTxTransaction+0x80>)
 800649e:	fba2 2303 	umull	r2, r3, r2, r3
 80064a2:	0d5b      	lsrs	r3, r3, #21
 80064a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064a8:	fb02 f303 	mul.w	r3, r2, r3
 80064ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064b6:	d112      	bne.n	80064de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2200      	movs	r2, #0
 80064c0:	2180      	movs	r1, #128	; 0x80
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7ff ff78 	bl	80063b8 <SPI_WaitFlagStateUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d016      	beq.n	80064fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d2:	f043 0220 	orr.w	r2, r3, #32
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e00f      	b.n	80064fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f4:	2b80      	cmp	r3, #128	; 0x80
 80064f6:	d0f2      	beq.n	80064de <SPI_EndRxTxTransaction+0x52>
 80064f8:	e000      	b.n	80064fc <SPI_EndRxTxTransaction+0x70>
        break;
 80064fa:	bf00      	nop
  }

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	2000000c 	.word	0x2000000c
 800650c:	165e9f81 	.word	0x165e9f81

08006510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e01d      	b.n	800655e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7fd fc5e 	bl	8003df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3304      	adds	r3, #4
 800654c:	4619      	mov	r1, r3
 800654e:	4610      	mov	r0, r2
 8006550:	f000 fa40 	bl	80069d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0201 	orr.w	r2, r2, #1
 800657c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b06      	cmp	r3, #6
 800658e:	d007      	beq.n	80065a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0201 	bic.w	r2, r2, #1
 80065c4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6a1a      	ldr	r2, [r3, #32]
 80065cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10f      	bne.n	80065f6 <HAL_TIM_Base_Stop_IT+0x48>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6a1a      	ldr	r2, [r3, #32]
 80065dc:	f240 4344 	movw	r3, #1092	; 0x444
 80065e0:	4013      	ands	r3, r2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d107      	bne.n	80065f6 <HAL_TIM_Base_Stop_IT+0x48>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 0201 	bic.w	r2, r2, #1
 80065f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b02      	cmp	r3, #2
 8006618:	d122      	bne.n	8006660 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b02      	cmp	r3, #2
 8006626:	d11b      	bne.n	8006660 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0202 	mvn.w	r2, #2
 8006630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9a5 	bl	8006996 <HAL_TIM_IC_CaptureCallback>
 800664c:	e005      	b.n	800665a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f997 	bl	8006982 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f9a8 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f003 0304 	and.w	r3, r3, #4
 800666a:	2b04      	cmp	r3, #4
 800666c:	d122      	bne.n	80066b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b04      	cmp	r3, #4
 800667a:	d11b      	bne.n	80066b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f06f 0204 	mvn.w	r2, #4
 8006684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f97b 	bl	8006996 <HAL_TIM_IC_CaptureCallback>
 80066a0:	e005      	b.n	80066ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f96d 	bl	8006982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f97e 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f003 0308 	and.w	r3, r3, #8
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d122      	bne.n	8006708 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d11b      	bne.n	8006708 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0208 	mvn.w	r2, #8
 80066d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2204      	movs	r2, #4
 80066de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f951 	bl	8006996 <HAL_TIM_IC_CaptureCallback>
 80066f4:	e005      	b.n	8006702 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f943 	bl	8006982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f954 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b10      	cmp	r3, #16
 8006714:	d122      	bne.n	800675c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f003 0310 	and.w	r3, r3, #16
 8006720:	2b10      	cmp	r3, #16
 8006722:	d11b      	bne.n	800675c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f06f 0210 	mvn.w	r2, #16
 800672c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2208      	movs	r2, #8
 8006732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f927 	bl	8006996 <HAL_TIM_IC_CaptureCallback>
 8006748:	e005      	b.n	8006756 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f919 	bl	8006982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f92a 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b01      	cmp	r3, #1
 8006768:	d10e      	bne.n	8006788 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b01      	cmp	r3, #1
 8006776:	d107      	bne.n	8006788 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f06f 0201 	mvn.w	r2, #1
 8006780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7fc fed0 	bl	8003528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	d10e      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a0:	2b80      	cmp	r3, #128	; 0x80
 80067a2:	d107      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa99 	bl	8006ce6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067be:	2b40      	cmp	r3, #64	; 0x40
 80067c0:	d10e      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067cc:	2b40      	cmp	r3, #64	; 0x40
 80067ce:	d107      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f8ef 	bl	80069be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b20      	cmp	r3, #32
 80067ec:	d10e      	bne.n	800680c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f003 0320 	and.w	r3, r3, #32
 80067f8:	2b20      	cmp	r3, #32
 80067fa:	d107      	bne.n	800680c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f06f 0220 	mvn.w	r2, #32
 8006804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fa63 	bl	8006cd2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_TIM_ConfigClockSource+0x18>
 8006828:	2302      	movs	r3, #2
 800682a:	e0a6      	b.n	800697a <HAL_TIM_ConfigClockSource+0x166>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800684a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006852:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b40      	cmp	r3, #64	; 0x40
 8006862:	d067      	beq.n	8006934 <HAL_TIM_ConfigClockSource+0x120>
 8006864:	2b40      	cmp	r3, #64	; 0x40
 8006866:	d80b      	bhi.n	8006880 <HAL_TIM_ConfigClockSource+0x6c>
 8006868:	2b10      	cmp	r3, #16
 800686a:	d073      	beq.n	8006954 <HAL_TIM_ConfigClockSource+0x140>
 800686c:	2b10      	cmp	r3, #16
 800686e:	d802      	bhi.n	8006876 <HAL_TIM_ConfigClockSource+0x62>
 8006870:	2b00      	cmp	r3, #0
 8006872:	d06f      	beq.n	8006954 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006874:	e078      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006876:	2b20      	cmp	r3, #32
 8006878:	d06c      	beq.n	8006954 <HAL_TIM_ConfigClockSource+0x140>
 800687a:	2b30      	cmp	r3, #48	; 0x30
 800687c:	d06a      	beq.n	8006954 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800687e:	e073      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006880:	2b70      	cmp	r3, #112	; 0x70
 8006882:	d00d      	beq.n	80068a0 <HAL_TIM_ConfigClockSource+0x8c>
 8006884:	2b70      	cmp	r3, #112	; 0x70
 8006886:	d804      	bhi.n	8006892 <HAL_TIM_ConfigClockSource+0x7e>
 8006888:	2b50      	cmp	r3, #80	; 0x50
 800688a:	d033      	beq.n	80068f4 <HAL_TIM_ConfigClockSource+0xe0>
 800688c:	2b60      	cmp	r3, #96	; 0x60
 800688e:	d041      	beq.n	8006914 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006890:	e06a      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006896:	d066      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0x152>
 8006898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689c:	d017      	beq.n	80068ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800689e:	e063      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	6899      	ldr	r1, [r3, #8]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f000 f9aa 	bl	8006c08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	609a      	str	r2, [r3, #8]
      break;
 80068cc:	e04c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	6899      	ldr	r1, [r3, #8]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f000 f993 	bl	8006c08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068f0:	609a      	str	r2, [r3, #8]
      break;
 80068f2:	e039      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	6859      	ldr	r1, [r3, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	461a      	mov	r2, r3
 8006902:	f000 f907 	bl	8006b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2150      	movs	r1, #80	; 0x50
 800690c:	4618      	mov	r0, r3
 800690e:	f000 f960 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 8006912:	e029      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	6859      	ldr	r1, [r3, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	461a      	mov	r2, r3
 8006922:	f000 f926 	bl	8006b72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2160      	movs	r1, #96	; 0x60
 800692c:	4618      	mov	r0, r3
 800692e:	f000 f950 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 8006932:	e019      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	6859      	ldr	r1, [r3, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	461a      	mov	r2, r3
 8006942:	f000 f8e7 	bl	8006b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2140      	movs	r1, #64	; 0x40
 800694c:	4618      	mov	r0, r3
 800694e:	f000 f940 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 8006952:	e009      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4619      	mov	r1, r3
 800695e:	4610      	mov	r0, r2
 8006960:	f000 f937 	bl	8006bd2 <TIM_ITRx_SetConfig>
      break;
 8006964:	e000      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a40      	ldr	r2, [pc, #256]	; (8006ae8 <TIM_Base_SetConfig+0x114>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d013      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f2:	d00f      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a3d      	ldr	r2, [pc, #244]	; (8006aec <TIM_Base_SetConfig+0x118>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00b      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a3c      	ldr	r2, [pc, #240]	; (8006af0 <TIM_Base_SetConfig+0x11c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d007      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a3b      	ldr	r2, [pc, #236]	; (8006af4 <TIM_Base_SetConfig+0x120>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_Base_SetConfig+0x40>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a3a      	ldr	r2, [pc, #232]	; (8006af8 <TIM_Base_SetConfig+0x124>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d108      	bne.n	8006a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2f      	ldr	r2, [pc, #188]	; (8006ae8 <TIM_Base_SetConfig+0x114>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d02b      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a34:	d027      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2c      	ldr	r2, [pc, #176]	; (8006aec <TIM_Base_SetConfig+0x118>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d023      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2b      	ldr	r2, [pc, #172]	; (8006af0 <TIM_Base_SetConfig+0x11c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d01f      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2a      	ldr	r2, [pc, #168]	; (8006af4 <TIM_Base_SetConfig+0x120>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d01b      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a29      	ldr	r2, [pc, #164]	; (8006af8 <TIM_Base_SetConfig+0x124>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d017      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a28      	ldr	r2, [pc, #160]	; (8006afc <TIM_Base_SetConfig+0x128>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d013      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a27      	ldr	r2, [pc, #156]	; (8006b00 <TIM_Base_SetConfig+0x12c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00f      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a26      	ldr	r2, [pc, #152]	; (8006b04 <TIM_Base_SetConfig+0x130>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00b      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a25      	ldr	r2, [pc, #148]	; (8006b08 <TIM_Base_SetConfig+0x134>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d007      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a24      	ldr	r2, [pc, #144]	; (8006b0c <TIM_Base_SetConfig+0x138>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d003      	beq.n	8006a86 <TIM_Base_SetConfig+0xb2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a23      	ldr	r2, [pc, #140]	; (8006b10 <TIM_Base_SetConfig+0x13c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d108      	bne.n	8006a98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	689a      	ldr	r2, [r3, #8]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a0a      	ldr	r2, [pc, #40]	; (8006ae8 <TIM_Base_SetConfig+0x114>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_Base_SetConfig+0xf8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a0c      	ldr	r2, [pc, #48]	; (8006af8 <TIM_Base_SetConfig+0x124>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d103      	bne.n	8006ad4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	615a      	str	r2, [r3, #20]
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40010400 	.word	0x40010400
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40014400 	.word	0x40014400
 8006b04:	40014800 	.word	0x40014800
 8006b08:	40001800 	.word	0x40001800
 8006b0c:	40001c00 	.word	0x40001c00
 8006b10:	40002000 	.word	0x40002000

08006b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f023 0201 	bic.w	r2, r3, #1
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f023 030a 	bic.w	r3, r3, #10
 8006b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	621a      	str	r2, [r3, #32]
}
 8006b66:	bf00      	nop
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b087      	sub	sp, #28
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	f023 0210 	bic.w	r2, r3, #16
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	031b      	lsls	r3, r3, #12
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	621a      	str	r2, [r3, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b085      	sub	sp, #20
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	f043 0307 	orr.w	r3, r3, #7
 8006bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	609a      	str	r2, [r3, #8]
}
 8006bfc:	bf00      	nop
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	021a      	lsls	r2, r3, #8
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	609a      	str	r2, [r3, #8]
}
 8006c3c:	bf00      	nop
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d101      	bne.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	e032      	b.n	8006cc6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c98:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e03f      	b.n	8006d8c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d106      	bne.n	8006d26 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7fd f8c5 	bl	8003eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2224      	movs	r2, #36	; 0x24
 8006d2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d3c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fa5a 	bl	80071f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695a      	ldr	r2, [r3, #20]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d62:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d72:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10d      	bne.n	8006de6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	f003 0320 	and.w	r3, r3, #32
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d008      	beq.n	8006de6 <HAL_UART_IRQHandler+0x52>
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f988 	bl	80070f4 <UART_Receive_IT>
      return;
 8006de4:	e0cc      	b.n	8006f80 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80ab 	beq.w	8006f44 <HAL_UART_IRQHandler+0x1b0>
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d105      	bne.n	8006e04 <HAL_UART_IRQHandler+0x70>
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 80a0 	beq.w	8006f44 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <HAL_UART_IRQHandler+0x90>
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1c:	f043 0201 	orr.w	r2, r3, #1
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	f003 0304 	and.w	r3, r3, #4
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <HAL_UART_IRQHandler+0xb0>
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3c:	f043 0202 	orr.w	r2, r3, #2
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00a      	beq.n	8006e64 <HAL_UART_IRQHandler+0xd0>
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5c:	f043 0204 	orr.w	r2, r3, #4
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <HAL_UART_IRQHandler+0xf0>
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7c:	f043 0208 	orr.w	r2, r3, #8
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d078      	beq.n	8006f7e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x112>
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f927 	bl	80070f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb0:	2b40      	cmp	r3, #64	; 0x40
 8006eb2:	bf0c      	ite	eq
 8006eb4:	2301      	moveq	r3, #1
 8006eb6:	2300      	movne	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d102      	bne.n	8006ece <HAL_UART_IRQHandler+0x13a>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d031      	beq.n	8006f32 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f870 	bl	8006fb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ede:	2b40      	cmp	r3, #64	; 0x40
 8006ee0:	d123      	bne.n	8006f2a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695a      	ldr	r2, [r3, #20]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ef0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d013      	beq.n	8006f22 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efe:	4a22      	ldr	r2, [pc, #136]	; (8006f88 <HAL_UART_IRQHandler+0x1f4>)
 8006f00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe f8d7 	bl	80050ba <HAL_DMA_Abort_IT>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d016      	beq.n	8006f40 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f20:	e00e      	b.n	8006f40 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f83c 	bl	8006fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f28:	e00a      	b.n	8006f40 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f838 	bl	8006fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f30:	e006      	b.n	8006f40 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f834 	bl	8006fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006f3e:	e01e      	b.n	8006f7e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f40:	bf00      	nop
    return;
 8006f42:	e01c      	b.n	8006f7e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d008      	beq.n	8006f60 <HAL_UART_IRQHandler+0x1cc>
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f85d 	bl	8007018 <UART_Transmit_IT>
    return;
 8006f5e:	e00f      	b.n	8006f80 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <HAL_UART_IRQHandler+0x1ec>
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f8a5 	bl	80070c4 <UART_EndTransmit_IT>
    return;
 8006f7a:	bf00      	nop
 8006f7c:	e000      	b.n	8006f80 <HAL_UART_IRQHandler+0x1ec>
    return;
 8006f7e:	bf00      	nop
  }
}
 8006f80:	3720      	adds	r7, #32
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	08006ff1 	.word	0x08006ff1

08006f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0201 	bic.w	r2, r2, #1
 8006fda:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f7ff ffc8 	bl	8006fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b21      	cmp	r3, #33	; 0x21
 800702a:	d144      	bne.n	80070b6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007034:	d11a      	bne.n	800706c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800704a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d105      	bne.n	8007060 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	1c9a      	adds	r2, r3, #2
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	621a      	str	r2, [r3, #32]
 800705e:	e00e      	b.n	800707e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	621a      	str	r2, [r3, #32]
 800706a:	e008      	b.n	800707e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	1c59      	adds	r1, r3, #1
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	6211      	str	r1, [r2, #32]
 8007076:	781a      	ldrb	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007082:	b29b      	uxth	r3, r3
 8007084:	3b01      	subs	r3, #1
 8007086:	b29b      	uxth	r3, r3
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	4619      	mov	r1, r3
 800708c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10f      	bne.n	80070b2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68da      	ldr	r2, [r3, #12]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e000      	b.n	80070b8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80070b6:	2302      	movs	r3, #2
  }
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff ff51 	bl	8006f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b22      	cmp	r3, #34	; 0x22
 8007106:	d171      	bne.n	80071ec <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007110:	d123      	bne.n	800715a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10e      	bne.n	800713e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	b29b      	uxth	r3, r3
 8007128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007136:	1c9a      	adds	r2, r3, #2
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	629a      	str	r2, [r3, #40]	; 0x28
 800713c:	e029      	b.n	8007192 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	b29b      	uxth	r3, r3
 8007146:	b2db      	uxtb	r3, r3
 8007148:	b29a      	uxth	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	629a      	str	r2, [r3, #40]	; 0x28
 8007158:	e01b      	b.n	8007192 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6858      	ldr	r0, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716c:	1c59      	adds	r1, r3, #1
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6291      	str	r1, [r2, #40]	; 0x28
 8007172:	b2c2      	uxtb	r2, r0
 8007174:	701a      	strb	r2, [r3, #0]
 8007176:	e00c      	b.n	8007192 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	1c58      	adds	r0, r3, #1
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	6288      	str	r0, [r1, #40]	; 0x28
 800718a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007196:	b29b      	uxth	r3, r3
 8007198:	3b01      	subs	r3, #1
 800719a:	b29b      	uxth	r3, r3
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	4619      	mov	r1, r3
 80071a0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d120      	bne.n	80071e8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0220 	bic.w	r2, r2, #32
 80071b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	695a      	ldr	r2, [r3, #20]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0201 	bic.w	r2, r2, #1
 80071d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2220      	movs	r2, #32
 80071da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fc fa16 	bl	8003610 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e002      	b.n	80071ee <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e000      	b.n	80071ee <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80071ec:	2302      	movs	r3, #2
  }
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071f8:	b5b0      	push	{r4, r5, r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	431a      	orrs	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007238:	f023 030c 	bic.w	r3, r3, #12
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6812      	ldr	r2, [r2, #0]
 8007240:	68f9      	ldr	r1, [r7, #12]
 8007242:	430b      	orrs	r3, r1
 8007244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699a      	ldr	r2, [r3, #24]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007264:	f040 80e4 	bne.w	8007430 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4aab      	ldr	r2, [pc, #684]	; (800751c <UART_SetConfig+0x324>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d004      	beq.n	800727c <UART_SetConfig+0x84>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4aaa      	ldr	r2, [pc, #680]	; (8007520 <UART_SetConfig+0x328>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d16c      	bne.n	8007356 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800727c:	f7fe fd40 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 8007280:	4602      	mov	r2, r0
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009a      	lsls	r2, r3, #2
 800728a:	441a      	add	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	fbb2 f3f3 	udiv	r3, r2, r3
 8007296:	4aa3      	ldr	r2, [pc, #652]	; (8007524 <UART_SetConfig+0x32c>)
 8007298:	fba2 2303 	umull	r2, r3, r2, r3
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	011c      	lsls	r4, r3, #4
 80072a0:	f7fe fd2e 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 80072a4:	4602      	mov	r2, r0
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009a      	lsls	r2, r3, #2
 80072ae:	441a      	add	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80072ba:	f7fe fd21 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 80072be:	4602      	mov	r2, r0
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009a      	lsls	r2, r3, #2
 80072c8:	441a      	add	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	4a93      	ldr	r2, [pc, #588]	; (8007524 <UART_SetConfig+0x32c>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	2264      	movs	r2, #100	; 0x64
 80072de:	fb02 f303 	mul.w	r3, r2, r3
 80072e2:	1aeb      	subs	r3, r5, r3
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	3332      	adds	r3, #50	; 0x32
 80072e8:	4a8e      	ldr	r2, [pc, #568]	; (8007524 <UART_SetConfig+0x32c>)
 80072ea:	fba2 2303 	umull	r2, r3, r2, r3
 80072ee:	095b      	lsrs	r3, r3, #5
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072f6:	441c      	add	r4, r3
 80072f8:	f7fe fd02 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 80072fc:	4602      	mov	r2, r0
 80072fe:	4613      	mov	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4413      	add	r3, r2
 8007304:	009a      	lsls	r2, r3, #2
 8007306:	441a      	add	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	fbb2 f5f3 	udiv	r5, r2, r3
 8007312:	f7fe fcf5 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 8007316:	4602      	mov	r2, r0
 8007318:	4613      	mov	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	009a      	lsls	r2, r3, #2
 8007320:	441a      	add	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	fbb2 f3f3 	udiv	r3, r2, r3
 800732c:	4a7d      	ldr	r2, [pc, #500]	; (8007524 <UART_SetConfig+0x32c>)
 800732e:	fba2 2303 	umull	r2, r3, r2, r3
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	2264      	movs	r2, #100	; 0x64
 8007336:	fb02 f303 	mul.w	r3, r2, r3
 800733a:	1aeb      	subs	r3, r5, r3
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	3332      	adds	r3, #50	; 0x32
 8007340:	4a78      	ldr	r2, [pc, #480]	; (8007524 <UART_SetConfig+0x32c>)
 8007342:	fba2 2303 	umull	r2, r3, r2, r3
 8007346:	095b      	lsrs	r3, r3, #5
 8007348:	f003 0207 	and.w	r2, r3, #7
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4422      	add	r2, r4
 8007352:	609a      	str	r2, [r3, #8]
 8007354:	e154      	b.n	8007600 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007356:	f7fe fcbf 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 800735a:	4602      	mov	r2, r0
 800735c:	4613      	mov	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	009a      	lsls	r2, r3, #2
 8007364:	441a      	add	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007370:	4a6c      	ldr	r2, [pc, #432]	; (8007524 <UART_SetConfig+0x32c>)
 8007372:	fba2 2303 	umull	r2, r3, r2, r3
 8007376:	095b      	lsrs	r3, r3, #5
 8007378:	011c      	lsls	r4, r3, #4
 800737a:	f7fe fcad 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 800737e:	4602      	mov	r2, r0
 8007380:	4613      	mov	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	009a      	lsls	r2, r3, #2
 8007388:	441a      	add	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	fbb2 f5f3 	udiv	r5, r2, r3
 8007394:	f7fe fca0 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 8007398:	4602      	mov	r2, r0
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009a      	lsls	r2, r3, #2
 80073a2:	441a      	add	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ae:	4a5d      	ldr	r2, [pc, #372]	; (8007524 <UART_SetConfig+0x32c>)
 80073b0:	fba2 2303 	umull	r2, r3, r2, r3
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	2264      	movs	r2, #100	; 0x64
 80073b8:	fb02 f303 	mul.w	r3, r2, r3
 80073bc:	1aeb      	subs	r3, r5, r3
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	3332      	adds	r3, #50	; 0x32
 80073c2:	4a58      	ldr	r2, [pc, #352]	; (8007524 <UART_SetConfig+0x32c>)
 80073c4:	fba2 2303 	umull	r2, r3, r2, r3
 80073c8:	095b      	lsrs	r3, r3, #5
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073d0:	441c      	add	r4, r3
 80073d2:	f7fe fc81 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 80073d6:	4602      	mov	r2, r0
 80073d8:	4613      	mov	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	009a      	lsls	r2, r3, #2
 80073e0:	441a      	add	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80073ec:	f7fe fc74 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 80073f0:	4602      	mov	r2, r0
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009a      	lsls	r2, r3, #2
 80073fa:	441a      	add	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	fbb2 f3f3 	udiv	r3, r2, r3
 8007406:	4a47      	ldr	r2, [pc, #284]	; (8007524 <UART_SetConfig+0x32c>)
 8007408:	fba2 2303 	umull	r2, r3, r2, r3
 800740c:	095b      	lsrs	r3, r3, #5
 800740e:	2264      	movs	r2, #100	; 0x64
 8007410:	fb02 f303 	mul.w	r3, r2, r3
 8007414:	1aeb      	subs	r3, r5, r3
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	3332      	adds	r3, #50	; 0x32
 800741a:	4a42      	ldr	r2, [pc, #264]	; (8007524 <UART_SetConfig+0x32c>)
 800741c:	fba2 2303 	umull	r2, r3, r2, r3
 8007420:	095b      	lsrs	r3, r3, #5
 8007422:	f003 0207 	and.w	r2, r3, #7
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4422      	add	r2, r4
 800742c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800742e:	e0e7      	b.n	8007600 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a39      	ldr	r2, [pc, #228]	; (800751c <UART_SetConfig+0x324>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <UART_SetConfig+0x24c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a38      	ldr	r2, [pc, #224]	; (8007520 <UART_SetConfig+0x328>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d171      	bne.n	8007528 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007444:	f7fe fc5c 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 8007448:	4602      	mov	r2, r0
 800744a:	4613      	mov	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	009a      	lsls	r2, r3, #2
 8007452:	441a      	add	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	fbb2 f3f3 	udiv	r3, r2, r3
 800745e:	4a31      	ldr	r2, [pc, #196]	; (8007524 <UART_SetConfig+0x32c>)
 8007460:	fba2 2303 	umull	r2, r3, r2, r3
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	011c      	lsls	r4, r3, #4
 8007468:	f7fe fc4a 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 800746c:	4602      	mov	r2, r0
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009a      	lsls	r2, r3, #2
 8007476:	441a      	add	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	fbb2 f5f3 	udiv	r5, r2, r3
 8007482:	f7fe fc3d 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 8007486:	4602      	mov	r2, r0
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	009a      	lsls	r2, r3, #2
 8007490:	441a      	add	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	fbb2 f3f3 	udiv	r3, r2, r3
 800749c:	4a21      	ldr	r2, [pc, #132]	; (8007524 <UART_SetConfig+0x32c>)
 800749e:	fba2 2303 	umull	r2, r3, r2, r3
 80074a2:	095b      	lsrs	r3, r3, #5
 80074a4:	2264      	movs	r2, #100	; 0x64
 80074a6:	fb02 f303 	mul.w	r3, r2, r3
 80074aa:	1aeb      	subs	r3, r5, r3
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	3332      	adds	r3, #50	; 0x32
 80074b0:	4a1c      	ldr	r2, [pc, #112]	; (8007524 <UART_SetConfig+0x32c>)
 80074b2:	fba2 2303 	umull	r2, r3, r2, r3
 80074b6:	095b      	lsrs	r3, r3, #5
 80074b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074bc:	441c      	add	r4, r3
 80074be:	f7fe fc1f 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 80074c2:	4602      	mov	r2, r0
 80074c4:	4613      	mov	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	009a      	lsls	r2, r3, #2
 80074cc:	441a      	add	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	fbb2 f5f3 	udiv	r5, r2, r3
 80074d8:	f7fe fc12 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 80074dc:	4602      	mov	r2, r0
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	009a      	lsls	r2, r3, #2
 80074e6:	441a      	add	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f2:	4a0c      	ldr	r2, [pc, #48]	; (8007524 <UART_SetConfig+0x32c>)
 80074f4:	fba2 2303 	umull	r2, r3, r2, r3
 80074f8:	095b      	lsrs	r3, r3, #5
 80074fa:	2264      	movs	r2, #100	; 0x64
 80074fc:	fb02 f303 	mul.w	r3, r2, r3
 8007500:	1aeb      	subs	r3, r5, r3
 8007502:	011b      	lsls	r3, r3, #4
 8007504:	3332      	adds	r3, #50	; 0x32
 8007506:	4a07      	ldr	r2, [pc, #28]	; (8007524 <UART_SetConfig+0x32c>)
 8007508:	fba2 2303 	umull	r2, r3, r2, r3
 800750c:	095b      	lsrs	r3, r3, #5
 800750e:	f003 020f 	and.w	r2, r3, #15
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4422      	add	r2, r4
 8007518:	609a      	str	r2, [r3, #8]
 800751a:	e071      	b.n	8007600 <UART_SetConfig+0x408>
 800751c:	40011000 	.word	0x40011000
 8007520:	40011400 	.word	0x40011400
 8007524:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007528:	f7fe fbd6 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 800752c:	4602      	mov	r2, r0
 800752e:	4613      	mov	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	009a      	lsls	r2, r3, #2
 8007536:	441a      	add	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007542:	4a31      	ldr	r2, [pc, #196]	; (8007608 <UART_SetConfig+0x410>)
 8007544:	fba2 2303 	umull	r2, r3, r2, r3
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	011c      	lsls	r4, r3, #4
 800754c:	f7fe fbc4 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 8007550:	4602      	mov	r2, r0
 8007552:	4613      	mov	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	009a      	lsls	r2, r3, #2
 800755a:	441a      	add	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	fbb2 f5f3 	udiv	r5, r2, r3
 8007566:	f7fe fbb7 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 800756a:	4602      	mov	r2, r0
 800756c:	4613      	mov	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	009a      	lsls	r2, r3, #2
 8007574:	441a      	add	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007580:	4a21      	ldr	r2, [pc, #132]	; (8007608 <UART_SetConfig+0x410>)
 8007582:	fba2 2303 	umull	r2, r3, r2, r3
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	2264      	movs	r2, #100	; 0x64
 800758a:	fb02 f303 	mul.w	r3, r2, r3
 800758e:	1aeb      	subs	r3, r5, r3
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	3332      	adds	r3, #50	; 0x32
 8007594:	4a1c      	ldr	r2, [pc, #112]	; (8007608 <UART_SetConfig+0x410>)
 8007596:	fba2 2303 	umull	r2, r3, r2, r3
 800759a:	095b      	lsrs	r3, r3, #5
 800759c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075a0:	441c      	add	r4, r3
 80075a2:	f7fe fb99 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 80075a6:	4602      	mov	r2, r0
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009a      	lsls	r2, r3, #2
 80075b0:	441a      	add	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80075bc:	f7fe fb8c 	bl	8005cd8 <HAL_RCC_GetPCLK1Freq>
 80075c0:	4602      	mov	r2, r0
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	009a      	lsls	r2, r3, #2
 80075ca:	441a      	add	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d6:	4a0c      	ldr	r2, [pc, #48]	; (8007608 <UART_SetConfig+0x410>)
 80075d8:	fba2 2303 	umull	r2, r3, r2, r3
 80075dc:	095b      	lsrs	r3, r3, #5
 80075de:	2264      	movs	r2, #100	; 0x64
 80075e0:	fb02 f303 	mul.w	r3, r2, r3
 80075e4:	1aeb      	subs	r3, r5, r3
 80075e6:	011b      	lsls	r3, r3, #4
 80075e8:	3332      	adds	r3, #50	; 0x32
 80075ea:	4a07      	ldr	r2, [pc, #28]	; (8007608 <UART_SetConfig+0x410>)
 80075ec:	fba2 2303 	umull	r2, r3, r2, r3
 80075f0:	095b      	lsrs	r3, r3, #5
 80075f2:	f003 020f 	and.w	r2, r3, #15
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4422      	add	r2, r4
 80075fc:	609a      	str	r2, [r3, #8]
}
 80075fe:	e7ff      	b.n	8007600 <UART_SetConfig+0x408>
 8007600:	bf00      	nop
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bdb0      	pop	{r4, r5, r7, pc}
 8007608:	51eb851f 	.word	0x51eb851f

0800760c <__errno>:
 800760c:	4b01      	ldr	r3, [pc, #4]	; (8007614 <__errno+0x8>)
 800760e:	6818      	ldr	r0, [r3, #0]
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	20000018 	.word	0x20000018

08007618 <__libc_init_array>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	4e0d      	ldr	r6, [pc, #52]	; (8007650 <__libc_init_array+0x38>)
 800761c:	4c0d      	ldr	r4, [pc, #52]	; (8007654 <__libc_init_array+0x3c>)
 800761e:	1ba4      	subs	r4, r4, r6
 8007620:	10a4      	asrs	r4, r4, #2
 8007622:	2500      	movs	r5, #0
 8007624:	42a5      	cmp	r5, r4
 8007626:	d109      	bne.n	800763c <__libc_init_array+0x24>
 8007628:	4e0b      	ldr	r6, [pc, #44]	; (8007658 <__libc_init_array+0x40>)
 800762a:	4c0c      	ldr	r4, [pc, #48]	; (800765c <__libc_init_array+0x44>)
 800762c:	f000 fc90 	bl	8007f50 <_init>
 8007630:	1ba4      	subs	r4, r4, r6
 8007632:	10a4      	asrs	r4, r4, #2
 8007634:	2500      	movs	r5, #0
 8007636:	42a5      	cmp	r5, r4
 8007638:	d105      	bne.n	8007646 <__libc_init_array+0x2e>
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007640:	4798      	blx	r3
 8007642:	3501      	adds	r5, #1
 8007644:	e7ee      	b.n	8007624 <__libc_init_array+0xc>
 8007646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800764a:	4798      	blx	r3
 800764c:	3501      	adds	r5, #1
 800764e:	e7f2      	b.n	8007636 <__libc_init_array+0x1e>
 8007650:	08008010 	.word	0x08008010
 8007654:	08008010 	.word	0x08008010
 8007658:	08008010 	.word	0x08008010
 800765c:	08008014 	.word	0x08008014

08007660 <memset>:
 8007660:	4402      	add	r2, r0
 8007662:	4603      	mov	r3, r0
 8007664:	4293      	cmp	r3, r2
 8007666:	d100      	bne.n	800766a <memset+0xa>
 8007668:	4770      	bx	lr
 800766a:	f803 1b01 	strb.w	r1, [r3], #1
 800766e:	e7f9      	b.n	8007664 <memset+0x4>

08007670 <_puts_r>:
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	460e      	mov	r6, r1
 8007674:	4605      	mov	r5, r0
 8007676:	b118      	cbz	r0, 8007680 <_puts_r+0x10>
 8007678:	6983      	ldr	r3, [r0, #24]
 800767a:	b90b      	cbnz	r3, 8007680 <_puts_r+0x10>
 800767c:	f000 fa14 	bl	8007aa8 <__sinit>
 8007680:	69ab      	ldr	r3, [r5, #24]
 8007682:	68ac      	ldr	r4, [r5, #8]
 8007684:	b913      	cbnz	r3, 800768c <_puts_r+0x1c>
 8007686:	4628      	mov	r0, r5
 8007688:	f000 fa0e 	bl	8007aa8 <__sinit>
 800768c:	4b23      	ldr	r3, [pc, #140]	; (800771c <_puts_r+0xac>)
 800768e:	429c      	cmp	r4, r3
 8007690:	d117      	bne.n	80076c2 <_puts_r+0x52>
 8007692:	686c      	ldr	r4, [r5, #4]
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	071b      	lsls	r3, r3, #28
 8007698:	d51d      	bpl.n	80076d6 <_puts_r+0x66>
 800769a:	6923      	ldr	r3, [r4, #16]
 800769c:	b1db      	cbz	r3, 80076d6 <_puts_r+0x66>
 800769e:	3e01      	subs	r6, #1
 80076a0:	68a3      	ldr	r3, [r4, #8]
 80076a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076a6:	3b01      	subs	r3, #1
 80076a8:	60a3      	str	r3, [r4, #8]
 80076aa:	b9e9      	cbnz	r1, 80076e8 <_puts_r+0x78>
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	da2e      	bge.n	800770e <_puts_r+0x9e>
 80076b0:	4622      	mov	r2, r4
 80076b2:	210a      	movs	r1, #10
 80076b4:	4628      	mov	r0, r5
 80076b6:	f000 f847 	bl	8007748 <__swbuf_r>
 80076ba:	3001      	adds	r0, #1
 80076bc:	d011      	beq.n	80076e2 <_puts_r+0x72>
 80076be:	200a      	movs	r0, #10
 80076c0:	e011      	b.n	80076e6 <_puts_r+0x76>
 80076c2:	4b17      	ldr	r3, [pc, #92]	; (8007720 <_puts_r+0xb0>)
 80076c4:	429c      	cmp	r4, r3
 80076c6:	d101      	bne.n	80076cc <_puts_r+0x5c>
 80076c8:	68ac      	ldr	r4, [r5, #8]
 80076ca:	e7e3      	b.n	8007694 <_puts_r+0x24>
 80076cc:	4b15      	ldr	r3, [pc, #84]	; (8007724 <_puts_r+0xb4>)
 80076ce:	429c      	cmp	r4, r3
 80076d0:	bf08      	it	eq
 80076d2:	68ec      	ldreq	r4, [r5, #12]
 80076d4:	e7de      	b.n	8007694 <_puts_r+0x24>
 80076d6:	4621      	mov	r1, r4
 80076d8:	4628      	mov	r0, r5
 80076da:	f000 f887 	bl	80077ec <__swsetup_r>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d0dd      	beq.n	800769e <_puts_r+0x2e>
 80076e2:	f04f 30ff 	mov.w	r0, #4294967295
 80076e6:	bd70      	pop	{r4, r5, r6, pc}
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	da04      	bge.n	80076f6 <_puts_r+0x86>
 80076ec:	69a2      	ldr	r2, [r4, #24]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	dc06      	bgt.n	8007700 <_puts_r+0x90>
 80076f2:	290a      	cmp	r1, #10
 80076f4:	d004      	beq.n	8007700 <_puts_r+0x90>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	6022      	str	r2, [r4, #0]
 80076fc:	7019      	strb	r1, [r3, #0]
 80076fe:	e7cf      	b.n	80076a0 <_puts_r+0x30>
 8007700:	4622      	mov	r2, r4
 8007702:	4628      	mov	r0, r5
 8007704:	f000 f820 	bl	8007748 <__swbuf_r>
 8007708:	3001      	adds	r0, #1
 800770a:	d1c9      	bne.n	80076a0 <_puts_r+0x30>
 800770c:	e7e9      	b.n	80076e2 <_puts_r+0x72>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	200a      	movs	r0, #10
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	6022      	str	r2, [r4, #0]
 8007716:	7018      	strb	r0, [r3, #0]
 8007718:	e7e5      	b.n	80076e6 <_puts_r+0x76>
 800771a:	bf00      	nop
 800771c:	08007fc8 	.word	0x08007fc8
 8007720:	08007fe8 	.word	0x08007fe8
 8007724:	08007fa8 	.word	0x08007fa8

08007728 <puts>:
 8007728:	4b02      	ldr	r3, [pc, #8]	; (8007734 <puts+0xc>)
 800772a:	4601      	mov	r1, r0
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	f7ff bf9f 	b.w	8007670 <_puts_r>
 8007732:	bf00      	nop
 8007734:	20000018 	.word	0x20000018

08007738 <strcpy>:
 8007738:	4603      	mov	r3, r0
 800773a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800773e:	f803 2b01 	strb.w	r2, [r3], #1
 8007742:	2a00      	cmp	r2, #0
 8007744:	d1f9      	bne.n	800773a <strcpy+0x2>
 8007746:	4770      	bx	lr

08007748 <__swbuf_r>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	460e      	mov	r6, r1
 800774c:	4614      	mov	r4, r2
 800774e:	4605      	mov	r5, r0
 8007750:	b118      	cbz	r0, 800775a <__swbuf_r+0x12>
 8007752:	6983      	ldr	r3, [r0, #24]
 8007754:	b90b      	cbnz	r3, 800775a <__swbuf_r+0x12>
 8007756:	f000 f9a7 	bl	8007aa8 <__sinit>
 800775a:	4b21      	ldr	r3, [pc, #132]	; (80077e0 <__swbuf_r+0x98>)
 800775c:	429c      	cmp	r4, r3
 800775e:	d12a      	bne.n	80077b6 <__swbuf_r+0x6e>
 8007760:	686c      	ldr	r4, [r5, #4]
 8007762:	69a3      	ldr	r3, [r4, #24]
 8007764:	60a3      	str	r3, [r4, #8]
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	071a      	lsls	r2, r3, #28
 800776a:	d52e      	bpl.n	80077ca <__swbuf_r+0x82>
 800776c:	6923      	ldr	r3, [r4, #16]
 800776e:	b363      	cbz	r3, 80077ca <__swbuf_r+0x82>
 8007770:	6923      	ldr	r3, [r4, #16]
 8007772:	6820      	ldr	r0, [r4, #0]
 8007774:	1ac0      	subs	r0, r0, r3
 8007776:	6963      	ldr	r3, [r4, #20]
 8007778:	b2f6      	uxtb	r6, r6
 800777a:	4283      	cmp	r3, r0
 800777c:	4637      	mov	r7, r6
 800777e:	dc04      	bgt.n	800778a <__swbuf_r+0x42>
 8007780:	4621      	mov	r1, r4
 8007782:	4628      	mov	r0, r5
 8007784:	f000 f926 	bl	80079d4 <_fflush_r>
 8007788:	bb28      	cbnz	r0, 80077d6 <__swbuf_r+0x8e>
 800778a:	68a3      	ldr	r3, [r4, #8]
 800778c:	3b01      	subs	r3, #1
 800778e:	60a3      	str	r3, [r4, #8]
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	6022      	str	r2, [r4, #0]
 8007796:	701e      	strb	r6, [r3, #0]
 8007798:	6963      	ldr	r3, [r4, #20]
 800779a:	3001      	adds	r0, #1
 800779c:	4283      	cmp	r3, r0
 800779e:	d004      	beq.n	80077aa <__swbuf_r+0x62>
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	07db      	lsls	r3, r3, #31
 80077a4:	d519      	bpl.n	80077da <__swbuf_r+0x92>
 80077a6:	2e0a      	cmp	r6, #10
 80077a8:	d117      	bne.n	80077da <__swbuf_r+0x92>
 80077aa:	4621      	mov	r1, r4
 80077ac:	4628      	mov	r0, r5
 80077ae:	f000 f911 	bl	80079d4 <_fflush_r>
 80077b2:	b190      	cbz	r0, 80077da <__swbuf_r+0x92>
 80077b4:	e00f      	b.n	80077d6 <__swbuf_r+0x8e>
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <__swbuf_r+0x9c>)
 80077b8:	429c      	cmp	r4, r3
 80077ba:	d101      	bne.n	80077c0 <__swbuf_r+0x78>
 80077bc:	68ac      	ldr	r4, [r5, #8]
 80077be:	e7d0      	b.n	8007762 <__swbuf_r+0x1a>
 80077c0:	4b09      	ldr	r3, [pc, #36]	; (80077e8 <__swbuf_r+0xa0>)
 80077c2:	429c      	cmp	r4, r3
 80077c4:	bf08      	it	eq
 80077c6:	68ec      	ldreq	r4, [r5, #12]
 80077c8:	e7cb      	b.n	8007762 <__swbuf_r+0x1a>
 80077ca:	4621      	mov	r1, r4
 80077cc:	4628      	mov	r0, r5
 80077ce:	f000 f80d 	bl	80077ec <__swsetup_r>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d0cc      	beq.n	8007770 <__swbuf_r+0x28>
 80077d6:	f04f 37ff 	mov.w	r7, #4294967295
 80077da:	4638      	mov	r0, r7
 80077dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077de:	bf00      	nop
 80077e0:	08007fc8 	.word	0x08007fc8
 80077e4:	08007fe8 	.word	0x08007fe8
 80077e8:	08007fa8 	.word	0x08007fa8

080077ec <__swsetup_r>:
 80077ec:	4b32      	ldr	r3, [pc, #200]	; (80078b8 <__swsetup_r+0xcc>)
 80077ee:	b570      	push	{r4, r5, r6, lr}
 80077f0:	681d      	ldr	r5, [r3, #0]
 80077f2:	4606      	mov	r6, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	b125      	cbz	r5, 8007802 <__swsetup_r+0x16>
 80077f8:	69ab      	ldr	r3, [r5, #24]
 80077fa:	b913      	cbnz	r3, 8007802 <__swsetup_r+0x16>
 80077fc:	4628      	mov	r0, r5
 80077fe:	f000 f953 	bl	8007aa8 <__sinit>
 8007802:	4b2e      	ldr	r3, [pc, #184]	; (80078bc <__swsetup_r+0xd0>)
 8007804:	429c      	cmp	r4, r3
 8007806:	d10f      	bne.n	8007828 <__swsetup_r+0x3c>
 8007808:	686c      	ldr	r4, [r5, #4]
 800780a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800780e:	b29a      	uxth	r2, r3
 8007810:	0715      	lsls	r5, r2, #28
 8007812:	d42c      	bmi.n	800786e <__swsetup_r+0x82>
 8007814:	06d0      	lsls	r0, r2, #27
 8007816:	d411      	bmi.n	800783c <__swsetup_r+0x50>
 8007818:	2209      	movs	r2, #9
 800781a:	6032      	str	r2, [r6, #0]
 800781c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007820:	81a3      	strh	r3, [r4, #12]
 8007822:	f04f 30ff 	mov.w	r0, #4294967295
 8007826:	e03e      	b.n	80078a6 <__swsetup_r+0xba>
 8007828:	4b25      	ldr	r3, [pc, #148]	; (80078c0 <__swsetup_r+0xd4>)
 800782a:	429c      	cmp	r4, r3
 800782c:	d101      	bne.n	8007832 <__swsetup_r+0x46>
 800782e:	68ac      	ldr	r4, [r5, #8]
 8007830:	e7eb      	b.n	800780a <__swsetup_r+0x1e>
 8007832:	4b24      	ldr	r3, [pc, #144]	; (80078c4 <__swsetup_r+0xd8>)
 8007834:	429c      	cmp	r4, r3
 8007836:	bf08      	it	eq
 8007838:	68ec      	ldreq	r4, [r5, #12]
 800783a:	e7e6      	b.n	800780a <__swsetup_r+0x1e>
 800783c:	0751      	lsls	r1, r2, #29
 800783e:	d512      	bpl.n	8007866 <__swsetup_r+0x7a>
 8007840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007842:	b141      	cbz	r1, 8007856 <__swsetup_r+0x6a>
 8007844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007848:	4299      	cmp	r1, r3
 800784a:	d002      	beq.n	8007852 <__swsetup_r+0x66>
 800784c:	4630      	mov	r0, r6
 800784e:	f000 fa19 	bl	8007c84 <_free_r>
 8007852:	2300      	movs	r3, #0
 8007854:	6363      	str	r3, [r4, #52]	; 0x34
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800785c:	81a3      	strh	r3, [r4, #12]
 800785e:	2300      	movs	r3, #0
 8007860:	6063      	str	r3, [r4, #4]
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	89a3      	ldrh	r3, [r4, #12]
 8007868:	f043 0308 	orr.w	r3, r3, #8
 800786c:	81a3      	strh	r3, [r4, #12]
 800786e:	6923      	ldr	r3, [r4, #16]
 8007870:	b94b      	cbnz	r3, 8007886 <__swsetup_r+0x9a>
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800787c:	d003      	beq.n	8007886 <__swsetup_r+0x9a>
 800787e:	4621      	mov	r1, r4
 8007880:	4630      	mov	r0, r6
 8007882:	f000 f9bf 	bl	8007c04 <__smakebuf_r>
 8007886:	89a2      	ldrh	r2, [r4, #12]
 8007888:	f012 0301 	ands.w	r3, r2, #1
 800788c:	d00c      	beq.n	80078a8 <__swsetup_r+0xbc>
 800788e:	2300      	movs	r3, #0
 8007890:	60a3      	str	r3, [r4, #8]
 8007892:	6963      	ldr	r3, [r4, #20]
 8007894:	425b      	negs	r3, r3
 8007896:	61a3      	str	r3, [r4, #24]
 8007898:	6923      	ldr	r3, [r4, #16]
 800789a:	b953      	cbnz	r3, 80078b2 <__swsetup_r+0xc6>
 800789c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80078a4:	d1ba      	bne.n	800781c <__swsetup_r+0x30>
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	0792      	lsls	r2, r2, #30
 80078aa:	bf58      	it	pl
 80078ac:	6963      	ldrpl	r3, [r4, #20]
 80078ae:	60a3      	str	r3, [r4, #8]
 80078b0:	e7f2      	b.n	8007898 <__swsetup_r+0xac>
 80078b2:	2000      	movs	r0, #0
 80078b4:	e7f7      	b.n	80078a6 <__swsetup_r+0xba>
 80078b6:	bf00      	nop
 80078b8:	20000018 	.word	0x20000018
 80078bc:	08007fc8 	.word	0x08007fc8
 80078c0:	08007fe8 	.word	0x08007fe8
 80078c4:	08007fa8 	.word	0x08007fa8

080078c8 <__sflush_r>:
 80078c8:	898a      	ldrh	r2, [r1, #12]
 80078ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ce:	4605      	mov	r5, r0
 80078d0:	0710      	lsls	r0, r2, #28
 80078d2:	460c      	mov	r4, r1
 80078d4:	d458      	bmi.n	8007988 <__sflush_r+0xc0>
 80078d6:	684b      	ldr	r3, [r1, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	dc05      	bgt.n	80078e8 <__sflush_r+0x20>
 80078dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078de:	2b00      	cmp	r3, #0
 80078e0:	dc02      	bgt.n	80078e8 <__sflush_r+0x20>
 80078e2:	2000      	movs	r0, #0
 80078e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078ea:	2e00      	cmp	r6, #0
 80078ec:	d0f9      	beq.n	80078e2 <__sflush_r+0x1a>
 80078ee:	2300      	movs	r3, #0
 80078f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078f4:	682f      	ldr	r7, [r5, #0]
 80078f6:	6a21      	ldr	r1, [r4, #32]
 80078f8:	602b      	str	r3, [r5, #0]
 80078fa:	d032      	beq.n	8007962 <__sflush_r+0x9a>
 80078fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	075a      	lsls	r2, r3, #29
 8007902:	d505      	bpl.n	8007910 <__sflush_r+0x48>
 8007904:	6863      	ldr	r3, [r4, #4]
 8007906:	1ac0      	subs	r0, r0, r3
 8007908:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800790a:	b10b      	cbz	r3, 8007910 <__sflush_r+0x48>
 800790c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800790e:	1ac0      	subs	r0, r0, r3
 8007910:	2300      	movs	r3, #0
 8007912:	4602      	mov	r2, r0
 8007914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007916:	6a21      	ldr	r1, [r4, #32]
 8007918:	4628      	mov	r0, r5
 800791a:	47b0      	blx	r6
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	d106      	bne.n	8007930 <__sflush_r+0x68>
 8007922:	6829      	ldr	r1, [r5, #0]
 8007924:	291d      	cmp	r1, #29
 8007926:	d848      	bhi.n	80079ba <__sflush_r+0xf2>
 8007928:	4a29      	ldr	r2, [pc, #164]	; (80079d0 <__sflush_r+0x108>)
 800792a:	40ca      	lsrs	r2, r1
 800792c:	07d6      	lsls	r6, r2, #31
 800792e:	d544      	bpl.n	80079ba <__sflush_r+0xf2>
 8007930:	2200      	movs	r2, #0
 8007932:	6062      	str	r2, [r4, #4]
 8007934:	04d9      	lsls	r1, r3, #19
 8007936:	6922      	ldr	r2, [r4, #16]
 8007938:	6022      	str	r2, [r4, #0]
 800793a:	d504      	bpl.n	8007946 <__sflush_r+0x7e>
 800793c:	1c42      	adds	r2, r0, #1
 800793e:	d101      	bne.n	8007944 <__sflush_r+0x7c>
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	b903      	cbnz	r3, 8007946 <__sflush_r+0x7e>
 8007944:	6560      	str	r0, [r4, #84]	; 0x54
 8007946:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007948:	602f      	str	r7, [r5, #0]
 800794a:	2900      	cmp	r1, #0
 800794c:	d0c9      	beq.n	80078e2 <__sflush_r+0x1a>
 800794e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007952:	4299      	cmp	r1, r3
 8007954:	d002      	beq.n	800795c <__sflush_r+0x94>
 8007956:	4628      	mov	r0, r5
 8007958:	f000 f994 	bl	8007c84 <_free_r>
 800795c:	2000      	movs	r0, #0
 800795e:	6360      	str	r0, [r4, #52]	; 0x34
 8007960:	e7c0      	b.n	80078e4 <__sflush_r+0x1c>
 8007962:	2301      	movs	r3, #1
 8007964:	4628      	mov	r0, r5
 8007966:	47b0      	blx	r6
 8007968:	1c41      	adds	r1, r0, #1
 800796a:	d1c8      	bne.n	80078fe <__sflush_r+0x36>
 800796c:	682b      	ldr	r3, [r5, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0c5      	beq.n	80078fe <__sflush_r+0x36>
 8007972:	2b1d      	cmp	r3, #29
 8007974:	d001      	beq.n	800797a <__sflush_r+0xb2>
 8007976:	2b16      	cmp	r3, #22
 8007978:	d101      	bne.n	800797e <__sflush_r+0xb6>
 800797a:	602f      	str	r7, [r5, #0]
 800797c:	e7b1      	b.n	80078e2 <__sflush_r+0x1a>
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007984:	81a3      	strh	r3, [r4, #12]
 8007986:	e7ad      	b.n	80078e4 <__sflush_r+0x1c>
 8007988:	690f      	ldr	r7, [r1, #16]
 800798a:	2f00      	cmp	r7, #0
 800798c:	d0a9      	beq.n	80078e2 <__sflush_r+0x1a>
 800798e:	0793      	lsls	r3, r2, #30
 8007990:	680e      	ldr	r6, [r1, #0]
 8007992:	bf08      	it	eq
 8007994:	694b      	ldreq	r3, [r1, #20]
 8007996:	600f      	str	r7, [r1, #0]
 8007998:	bf18      	it	ne
 800799a:	2300      	movne	r3, #0
 800799c:	eba6 0807 	sub.w	r8, r6, r7
 80079a0:	608b      	str	r3, [r1, #8]
 80079a2:	f1b8 0f00 	cmp.w	r8, #0
 80079a6:	dd9c      	ble.n	80078e2 <__sflush_r+0x1a>
 80079a8:	4643      	mov	r3, r8
 80079aa:	463a      	mov	r2, r7
 80079ac:	6a21      	ldr	r1, [r4, #32]
 80079ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079b0:	4628      	mov	r0, r5
 80079b2:	47b0      	blx	r6
 80079b4:	2800      	cmp	r0, #0
 80079b6:	dc06      	bgt.n	80079c6 <__sflush_r+0xfe>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079be:	81a3      	strh	r3, [r4, #12]
 80079c0:	f04f 30ff 	mov.w	r0, #4294967295
 80079c4:	e78e      	b.n	80078e4 <__sflush_r+0x1c>
 80079c6:	4407      	add	r7, r0
 80079c8:	eba8 0800 	sub.w	r8, r8, r0
 80079cc:	e7e9      	b.n	80079a2 <__sflush_r+0xda>
 80079ce:	bf00      	nop
 80079d0:	20400001 	.word	0x20400001

080079d4 <_fflush_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	690b      	ldr	r3, [r1, #16]
 80079d8:	4605      	mov	r5, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	b1db      	cbz	r3, 8007a16 <_fflush_r+0x42>
 80079de:	b118      	cbz	r0, 80079e8 <_fflush_r+0x14>
 80079e0:	6983      	ldr	r3, [r0, #24]
 80079e2:	b90b      	cbnz	r3, 80079e8 <_fflush_r+0x14>
 80079e4:	f000 f860 	bl	8007aa8 <__sinit>
 80079e8:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <_fflush_r+0x48>)
 80079ea:	429c      	cmp	r4, r3
 80079ec:	d109      	bne.n	8007a02 <_fflush_r+0x2e>
 80079ee:	686c      	ldr	r4, [r5, #4]
 80079f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f4:	b17b      	cbz	r3, 8007a16 <_fflush_r+0x42>
 80079f6:	4621      	mov	r1, r4
 80079f8:	4628      	mov	r0, r5
 80079fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079fe:	f7ff bf63 	b.w	80078c8 <__sflush_r>
 8007a02:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <_fflush_r+0x4c>)
 8007a04:	429c      	cmp	r4, r3
 8007a06:	d101      	bne.n	8007a0c <_fflush_r+0x38>
 8007a08:	68ac      	ldr	r4, [r5, #8]
 8007a0a:	e7f1      	b.n	80079f0 <_fflush_r+0x1c>
 8007a0c:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <_fflush_r+0x50>)
 8007a0e:	429c      	cmp	r4, r3
 8007a10:	bf08      	it	eq
 8007a12:	68ec      	ldreq	r4, [r5, #12]
 8007a14:	e7ec      	b.n	80079f0 <_fflush_r+0x1c>
 8007a16:	2000      	movs	r0, #0
 8007a18:	bd38      	pop	{r3, r4, r5, pc}
 8007a1a:	bf00      	nop
 8007a1c:	08007fc8 	.word	0x08007fc8
 8007a20:	08007fe8 	.word	0x08007fe8
 8007a24:	08007fa8 	.word	0x08007fa8

08007a28 <std>:
 8007a28:	2300      	movs	r3, #0
 8007a2a:	b510      	push	{r4, lr}
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a32:	6083      	str	r3, [r0, #8]
 8007a34:	8181      	strh	r1, [r0, #12]
 8007a36:	6643      	str	r3, [r0, #100]	; 0x64
 8007a38:	81c2      	strh	r2, [r0, #14]
 8007a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a3e:	6183      	str	r3, [r0, #24]
 8007a40:	4619      	mov	r1, r3
 8007a42:	2208      	movs	r2, #8
 8007a44:	305c      	adds	r0, #92	; 0x5c
 8007a46:	f7ff fe0b 	bl	8007660 <memset>
 8007a4a:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <std+0x38>)
 8007a4c:	6263      	str	r3, [r4, #36]	; 0x24
 8007a4e:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <std+0x3c>)
 8007a50:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a52:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <std+0x40>)
 8007a54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a56:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <std+0x44>)
 8007a58:	6224      	str	r4, [r4, #32]
 8007a5a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a5c:	bd10      	pop	{r4, pc}
 8007a5e:	bf00      	nop
 8007a60:	08007df5 	.word	0x08007df5
 8007a64:	08007e17 	.word	0x08007e17
 8007a68:	08007e4f 	.word	0x08007e4f
 8007a6c:	08007e73 	.word	0x08007e73

08007a70 <_cleanup_r>:
 8007a70:	4901      	ldr	r1, [pc, #4]	; (8007a78 <_cleanup_r+0x8>)
 8007a72:	f000 b885 	b.w	8007b80 <_fwalk_reent>
 8007a76:	bf00      	nop
 8007a78:	080079d5 	.word	0x080079d5

08007a7c <__sfmoreglue>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	1e4a      	subs	r2, r1, #1
 8007a80:	2568      	movs	r5, #104	; 0x68
 8007a82:	4355      	muls	r5, r2
 8007a84:	460e      	mov	r6, r1
 8007a86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a8a:	f000 f949 	bl	8007d20 <_malloc_r>
 8007a8e:	4604      	mov	r4, r0
 8007a90:	b140      	cbz	r0, 8007aa4 <__sfmoreglue+0x28>
 8007a92:	2100      	movs	r1, #0
 8007a94:	e9c0 1600 	strd	r1, r6, [r0]
 8007a98:	300c      	adds	r0, #12
 8007a9a:	60a0      	str	r0, [r4, #8]
 8007a9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007aa0:	f7ff fdde 	bl	8007660 <memset>
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}

08007aa8 <__sinit>:
 8007aa8:	6983      	ldr	r3, [r0, #24]
 8007aaa:	b510      	push	{r4, lr}
 8007aac:	4604      	mov	r4, r0
 8007aae:	bb33      	cbnz	r3, 8007afe <__sinit+0x56>
 8007ab0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007ab4:	6503      	str	r3, [r0, #80]	; 0x50
 8007ab6:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <__sinit+0x58>)
 8007ab8:	4a12      	ldr	r2, [pc, #72]	; (8007b04 <__sinit+0x5c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6282      	str	r2, [r0, #40]	; 0x28
 8007abe:	4298      	cmp	r0, r3
 8007ac0:	bf04      	itt	eq
 8007ac2:	2301      	moveq	r3, #1
 8007ac4:	6183      	streq	r3, [r0, #24]
 8007ac6:	f000 f81f 	bl	8007b08 <__sfp>
 8007aca:	6060      	str	r0, [r4, #4]
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 f81b 	bl	8007b08 <__sfp>
 8007ad2:	60a0      	str	r0, [r4, #8]
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f000 f817 	bl	8007b08 <__sfp>
 8007ada:	2200      	movs	r2, #0
 8007adc:	60e0      	str	r0, [r4, #12]
 8007ade:	2104      	movs	r1, #4
 8007ae0:	6860      	ldr	r0, [r4, #4]
 8007ae2:	f7ff ffa1 	bl	8007a28 <std>
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	2109      	movs	r1, #9
 8007aea:	68a0      	ldr	r0, [r4, #8]
 8007aec:	f7ff ff9c 	bl	8007a28 <std>
 8007af0:	2202      	movs	r2, #2
 8007af2:	2112      	movs	r1, #18
 8007af4:	68e0      	ldr	r0, [r4, #12]
 8007af6:	f7ff ff97 	bl	8007a28 <std>
 8007afa:	2301      	movs	r3, #1
 8007afc:	61a3      	str	r3, [r4, #24]
 8007afe:	bd10      	pop	{r4, pc}
 8007b00:	08007fa4 	.word	0x08007fa4
 8007b04:	08007a71 	.word	0x08007a71

08007b08 <__sfp>:
 8007b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0a:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <__sfp+0x70>)
 8007b0c:	681e      	ldr	r6, [r3, #0]
 8007b0e:	69b3      	ldr	r3, [r6, #24]
 8007b10:	4607      	mov	r7, r0
 8007b12:	b913      	cbnz	r3, 8007b1a <__sfp+0x12>
 8007b14:	4630      	mov	r0, r6
 8007b16:	f7ff ffc7 	bl	8007aa8 <__sinit>
 8007b1a:	3648      	adds	r6, #72	; 0x48
 8007b1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	d503      	bpl.n	8007b2c <__sfp+0x24>
 8007b24:	6833      	ldr	r3, [r6, #0]
 8007b26:	b133      	cbz	r3, 8007b36 <__sfp+0x2e>
 8007b28:	6836      	ldr	r6, [r6, #0]
 8007b2a:	e7f7      	b.n	8007b1c <__sfp+0x14>
 8007b2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b30:	b16d      	cbz	r5, 8007b4e <__sfp+0x46>
 8007b32:	3468      	adds	r4, #104	; 0x68
 8007b34:	e7f4      	b.n	8007b20 <__sfp+0x18>
 8007b36:	2104      	movs	r1, #4
 8007b38:	4638      	mov	r0, r7
 8007b3a:	f7ff ff9f 	bl	8007a7c <__sfmoreglue>
 8007b3e:	6030      	str	r0, [r6, #0]
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d1f1      	bne.n	8007b28 <__sfp+0x20>
 8007b44:	230c      	movs	r3, #12
 8007b46:	603b      	str	r3, [r7, #0]
 8007b48:	4604      	mov	r4, r0
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b4e:	4b0b      	ldr	r3, [pc, #44]	; (8007b7c <__sfp+0x74>)
 8007b50:	6665      	str	r5, [r4, #100]	; 0x64
 8007b52:	e9c4 5500 	strd	r5, r5, [r4]
 8007b56:	60a5      	str	r5, [r4, #8]
 8007b58:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007b5c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007b60:	2208      	movs	r2, #8
 8007b62:	4629      	mov	r1, r5
 8007b64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b68:	f7ff fd7a 	bl	8007660 <memset>
 8007b6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b74:	e7e9      	b.n	8007b4a <__sfp+0x42>
 8007b76:	bf00      	nop
 8007b78:	08007fa4 	.word	0x08007fa4
 8007b7c:	ffff0001 	.word	0xffff0001

08007b80 <_fwalk_reent>:
 8007b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b84:	4680      	mov	r8, r0
 8007b86:	4689      	mov	r9, r1
 8007b88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b8c:	2600      	movs	r6, #0
 8007b8e:	b914      	cbnz	r4, 8007b96 <_fwalk_reent+0x16>
 8007b90:	4630      	mov	r0, r6
 8007b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b96:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007b9a:	3f01      	subs	r7, #1
 8007b9c:	d501      	bpl.n	8007ba2 <_fwalk_reent+0x22>
 8007b9e:	6824      	ldr	r4, [r4, #0]
 8007ba0:	e7f5      	b.n	8007b8e <_fwalk_reent+0xe>
 8007ba2:	89ab      	ldrh	r3, [r5, #12]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d907      	bls.n	8007bb8 <_fwalk_reent+0x38>
 8007ba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bac:	3301      	adds	r3, #1
 8007bae:	d003      	beq.n	8007bb8 <_fwalk_reent+0x38>
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	4640      	mov	r0, r8
 8007bb4:	47c8      	blx	r9
 8007bb6:	4306      	orrs	r6, r0
 8007bb8:	3568      	adds	r5, #104	; 0x68
 8007bba:	e7ee      	b.n	8007b9a <_fwalk_reent+0x1a>

08007bbc <__swhatbuf_r>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	460e      	mov	r6, r1
 8007bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc4:	2900      	cmp	r1, #0
 8007bc6:	b096      	sub	sp, #88	; 0x58
 8007bc8:	4614      	mov	r4, r2
 8007bca:	461d      	mov	r5, r3
 8007bcc:	da07      	bge.n	8007bde <__swhatbuf_r+0x22>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	602b      	str	r3, [r5, #0]
 8007bd2:	89b3      	ldrh	r3, [r6, #12]
 8007bd4:	061a      	lsls	r2, r3, #24
 8007bd6:	d410      	bmi.n	8007bfa <__swhatbuf_r+0x3e>
 8007bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bdc:	e00e      	b.n	8007bfc <__swhatbuf_r+0x40>
 8007bde:	466a      	mov	r2, sp
 8007be0:	f000 f96e 	bl	8007ec0 <_fstat_r>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	dbf2      	blt.n	8007bce <__swhatbuf_r+0x12>
 8007be8:	9a01      	ldr	r2, [sp, #4]
 8007bea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bf2:	425a      	negs	r2, r3
 8007bf4:	415a      	adcs	r2, r3
 8007bf6:	602a      	str	r2, [r5, #0]
 8007bf8:	e7ee      	b.n	8007bd8 <__swhatbuf_r+0x1c>
 8007bfa:	2340      	movs	r3, #64	; 0x40
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	6023      	str	r3, [r4, #0]
 8007c00:	b016      	add	sp, #88	; 0x58
 8007c02:	bd70      	pop	{r4, r5, r6, pc}

08007c04 <__smakebuf_r>:
 8007c04:	898b      	ldrh	r3, [r1, #12]
 8007c06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c08:	079d      	lsls	r5, r3, #30
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	d507      	bpl.n	8007c20 <__smakebuf_r+0x1c>
 8007c10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	6123      	str	r3, [r4, #16]
 8007c18:	2301      	movs	r3, #1
 8007c1a:	6163      	str	r3, [r4, #20]
 8007c1c:	b002      	add	sp, #8
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	ab01      	add	r3, sp, #4
 8007c22:	466a      	mov	r2, sp
 8007c24:	f7ff ffca 	bl	8007bbc <__swhatbuf_r>
 8007c28:	9900      	ldr	r1, [sp, #0]
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f000 f877 	bl	8007d20 <_malloc_r>
 8007c32:	b948      	cbnz	r0, 8007c48 <__smakebuf_r+0x44>
 8007c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c38:	059a      	lsls	r2, r3, #22
 8007c3a:	d4ef      	bmi.n	8007c1c <__smakebuf_r+0x18>
 8007c3c:	f023 0303 	bic.w	r3, r3, #3
 8007c40:	f043 0302 	orr.w	r3, r3, #2
 8007c44:	81a3      	strh	r3, [r4, #12]
 8007c46:	e7e3      	b.n	8007c10 <__smakebuf_r+0xc>
 8007c48:	4b0d      	ldr	r3, [pc, #52]	; (8007c80 <__smakebuf_r+0x7c>)
 8007c4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	6020      	str	r0, [r4, #0]
 8007c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c54:	81a3      	strh	r3, [r4, #12]
 8007c56:	9b00      	ldr	r3, [sp, #0]
 8007c58:	6163      	str	r3, [r4, #20]
 8007c5a:	9b01      	ldr	r3, [sp, #4]
 8007c5c:	6120      	str	r0, [r4, #16]
 8007c5e:	b15b      	cbz	r3, 8007c78 <__smakebuf_r+0x74>
 8007c60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c64:	4630      	mov	r0, r6
 8007c66:	f000 f93d 	bl	8007ee4 <_isatty_r>
 8007c6a:	b128      	cbz	r0, 8007c78 <__smakebuf_r+0x74>
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	81a3      	strh	r3, [r4, #12]
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	431d      	orrs	r5, r3
 8007c7c:	81a5      	strh	r5, [r4, #12]
 8007c7e:	e7cd      	b.n	8007c1c <__smakebuf_r+0x18>
 8007c80:	08007a71 	.word	0x08007a71

08007c84 <_free_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4605      	mov	r5, r0
 8007c88:	2900      	cmp	r1, #0
 8007c8a:	d045      	beq.n	8007d18 <_free_r+0x94>
 8007c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c90:	1f0c      	subs	r4, r1, #4
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bfb8      	it	lt
 8007c96:	18e4      	addlt	r4, r4, r3
 8007c98:	f000 f946 	bl	8007f28 <__malloc_lock>
 8007c9c:	4a1f      	ldr	r2, [pc, #124]	; (8007d1c <_free_r+0x98>)
 8007c9e:	6813      	ldr	r3, [r2, #0]
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	b933      	cbnz	r3, 8007cb2 <_free_r+0x2e>
 8007ca4:	6063      	str	r3, [r4, #4]
 8007ca6:	6014      	str	r4, [r2, #0]
 8007ca8:	4628      	mov	r0, r5
 8007caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cae:	f000 b93c 	b.w	8007f2a <__malloc_unlock>
 8007cb2:	42a3      	cmp	r3, r4
 8007cb4:	d90c      	bls.n	8007cd0 <_free_r+0x4c>
 8007cb6:	6821      	ldr	r1, [r4, #0]
 8007cb8:	1862      	adds	r2, r4, r1
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	bf04      	itt	eq
 8007cbe:	681a      	ldreq	r2, [r3, #0]
 8007cc0:	685b      	ldreq	r3, [r3, #4]
 8007cc2:	6063      	str	r3, [r4, #4]
 8007cc4:	bf04      	itt	eq
 8007cc6:	1852      	addeq	r2, r2, r1
 8007cc8:	6022      	streq	r2, [r4, #0]
 8007cca:	6004      	str	r4, [r0, #0]
 8007ccc:	e7ec      	b.n	8007ca8 <_free_r+0x24>
 8007cce:	4613      	mov	r3, r2
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	b10a      	cbz	r2, 8007cd8 <_free_r+0x54>
 8007cd4:	42a2      	cmp	r2, r4
 8007cd6:	d9fa      	bls.n	8007cce <_free_r+0x4a>
 8007cd8:	6819      	ldr	r1, [r3, #0]
 8007cda:	1858      	adds	r0, r3, r1
 8007cdc:	42a0      	cmp	r0, r4
 8007cde:	d10b      	bne.n	8007cf8 <_free_r+0x74>
 8007ce0:	6820      	ldr	r0, [r4, #0]
 8007ce2:	4401      	add	r1, r0
 8007ce4:	1858      	adds	r0, r3, r1
 8007ce6:	4282      	cmp	r2, r0
 8007ce8:	6019      	str	r1, [r3, #0]
 8007cea:	d1dd      	bne.n	8007ca8 <_free_r+0x24>
 8007cec:	6810      	ldr	r0, [r2, #0]
 8007cee:	6852      	ldr	r2, [r2, #4]
 8007cf0:	605a      	str	r2, [r3, #4]
 8007cf2:	4401      	add	r1, r0
 8007cf4:	6019      	str	r1, [r3, #0]
 8007cf6:	e7d7      	b.n	8007ca8 <_free_r+0x24>
 8007cf8:	d902      	bls.n	8007d00 <_free_r+0x7c>
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	602b      	str	r3, [r5, #0]
 8007cfe:	e7d3      	b.n	8007ca8 <_free_r+0x24>
 8007d00:	6820      	ldr	r0, [r4, #0]
 8007d02:	1821      	adds	r1, r4, r0
 8007d04:	428a      	cmp	r2, r1
 8007d06:	bf04      	itt	eq
 8007d08:	6811      	ldreq	r1, [r2, #0]
 8007d0a:	6852      	ldreq	r2, [r2, #4]
 8007d0c:	6062      	str	r2, [r4, #4]
 8007d0e:	bf04      	itt	eq
 8007d10:	1809      	addeq	r1, r1, r0
 8007d12:	6021      	streq	r1, [r4, #0]
 8007d14:	605c      	str	r4, [r3, #4]
 8007d16:	e7c7      	b.n	8007ca8 <_free_r+0x24>
 8007d18:	bd38      	pop	{r3, r4, r5, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20000304 	.word	0x20000304

08007d20 <_malloc_r>:
 8007d20:	b570      	push	{r4, r5, r6, lr}
 8007d22:	1ccd      	adds	r5, r1, #3
 8007d24:	f025 0503 	bic.w	r5, r5, #3
 8007d28:	3508      	adds	r5, #8
 8007d2a:	2d0c      	cmp	r5, #12
 8007d2c:	bf38      	it	cc
 8007d2e:	250c      	movcc	r5, #12
 8007d30:	2d00      	cmp	r5, #0
 8007d32:	4606      	mov	r6, r0
 8007d34:	db01      	blt.n	8007d3a <_malloc_r+0x1a>
 8007d36:	42a9      	cmp	r1, r5
 8007d38:	d903      	bls.n	8007d42 <_malloc_r+0x22>
 8007d3a:	230c      	movs	r3, #12
 8007d3c:	6033      	str	r3, [r6, #0]
 8007d3e:	2000      	movs	r0, #0
 8007d40:	bd70      	pop	{r4, r5, r6, pc}
 8007d42:	f000 f8f1 	bl	8007f28 <__malloc_lock>
 8007d46:	4a21      	ldr	r2, [pc, #132]	; (8007dcc <_malloc_r+0xac>)
 8007d48:	6814      	ldr	r4, [r2, #0]
 8007d4a:	4621      	mov	r1, r4
 8007d4c:	b991      	cbnz	r1, 8007d74 <_malloc_r+0x54>
 8007d4e:	4c20      	ldr	r4, [pc, #128]	; (8007dd0 <_malloc_r+0xb0>)
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	b91b      	cbnz	r3, 8007d5c <_malloc_r+0x3c>
 8007d54:	4630      	mov	r0, r6
 8007d56:	f000 f83d 	bl	8007dd4 <_sbrk_r>
 8007d5a:	6020      	str	r0, [r4, #0]
 8007d5c:	4629      	mov	r1, r5
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f000 f838 	bl	8007dd4 <_sbrk_r>
 8007d64:	1c43      	adds	r3, r0, #1
 8007d66:	d124      	bne.n	8007db2 <_malloc_r+0x92>
 8007d68:	230c      	movs	r3, #12
 8007d6a:	6033      	str	r3, [r6, #0]
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f000 f8dc 	bl	8007f2a <__malloc_unlock>
 8007d72:	e7e4      	b.n	8007d3e <_malloc_r+0x1e>
 8007d74:	680b      	ldr	r3, [r1, #0]
 8007d76:	1b5b      	subs	r3, r3, r5
 8007d78:	d418      	bmi.n	8007dac <_malloc_r+0x8c>
 8007d7a:	2b0b      	cmp	r3, #11
 8007d7c:	d90f      	bls.n	8007d9e <_malloc_r+0x7e>
 8007d7e:	600b      	str	r3, [r1, #0]
 8007d80:	50cd      	str	r5, [r1, r3]
 8007d82:	18cc      	adds	r4, r1, r3
 8007d84:	4630      	mov	r0, r6
 8007d86:	f000 f8d0 	bl	8007f2a <__malloc_unlock>
 8007d8a:	f104 000b 	add.w	r0, r4, #11
 8007d8e:	1d23      	adds	r3, r4, #4
 8007d90:	f020 0007 	bic.w	r0, r0, #7
 8007d94:	1ac3      	subs	r3, r0, r3
 8007d96:	d0d3      	beq.n	8007d40 <_malloc_r+0x20>
 8007d98:	425a      	negs	r2, r3
 8007d9a:	50e2      	str	r2, [r4, r3]
 8007d9c:	e7d0      	b.n	8007d40 <_malloc_r+0x20>
 8007d9e:	428c      	cmp	r4, r1
 8007da0:	684b      	ldr	r3, [r1, #4]
 8007da2:	bf16      	itet	ne
 8007da4:	6063      	strne	r3, [r4, #4]
 8007da6:	6013      	streq	r3, [r2, #0]
 8007da8:	460c      	movne	r4, r1
 8007daa:	e7eb      	b.n	8007d84 <_malloc_r+0x64>
 8007dac:	460c      	mov	r4, r1
 8007dae:	6849      	ldr	r1, [r1, #4]
 8007db0:	e7cc      	b.n	8007d4c <_malloc_r+0x2c>
 8007db2:	1cc4      	adds	r4, r0, #3
 8007db4:	f024 0403 	bic.w	r4, r4, #3
 8007db8:	42a0      	cmp	r0, r4
 8007dba:	d005      	beq.n	8007dc8 <_malloc_r+0xa8>
 8007dbc:	1a21      	subs	r1, r4, r0
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f000 f808 	bl	8007dd4 <_sbrk_r>
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	d0cf      	beq.n	8007d68 <_malloc_r+0x48>
 8007dc8:	6025      	str	r5, [r4, #0]
 8007dca:	e7db      	b.n	8007d84 <_malloc_r+0x64>
 8007dcc:	20000304 	.word	0x20000304
 8007dd0:	20000308 	.word	0x20000308

08007dd4 <_sbrk_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4c06      	ldr	r4, [pc, #24]	; (8007df0 <_sbrk_r+0x1c>)
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4605      	mov	r5, r0
 8007ddc:	4608      	mov	r0, r1
 8007dde:	6023      	str	r3, [r4, #0]
 8007de0:	f7fc f9a2 	bl	8004128 <_sbrk>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d102      	bne.n	8007dee <_sbrk_r+0x1a>
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	b103      	cbz	r3, 8007dee <_sbrk_r+0x1a>
 8007dec:	602b      	str	r3, [r5, #0]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	200046d0 	.word	0x200046d0

08007df4 <__sread>:
 8007df4:	b510      	push	{r4, lr}
 8007df6:	460c      	mov	r4, r1
 8007df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dfc:	f000 f896 	bl	8007f2c <_read_r>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	bfab      	itete	ge
 8007e04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e06:	89a3      	ldrhlt	r3, [r4, #12]
 8007e08:	181b      	addge	r3, r3, r0
 8007e0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e0e:	bfac      	ite	ge
 8007e10:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e12:	81a3      	strhlt	r3, [r4, #12]
 8007e14:	bd10      	pop	{r4, pc}

08007e16 <__swrite>:
 8007e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1a:	461f      	mov	r7, r3
 8007e1c:	898b      	ldrh	r3, [r1, #12]
 8007e1e:	05db      	lsls	r3, r3, #23
 8007e20:	4605      	mov	r5, r0
 8007e22:	460c      	mov	r4, r1
 8007e24:	4616      	mov	r6, r2
 8007e26:	d505      	bpl.n	8007e34 <__swrite+0x1e>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e30:	f000 f868 	bl	8007f04 <_lseek_r>
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e3e:	81a3      	strh	r3, [r4, #12]
 8007e40:	4632      	mov	r2, r6
 8007e42:	463b      	mov	r3, r7
 8007e44:	4628      	mov	r0, r5
 8007e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4a:	f000 b817 	b.w	8007e7c <_write_r>

08007e4e <__sseek>:
 8007e4e:	b510      	push	{r4, lr}
 8007e50:	460c      	mov	r4, r1
 8007e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e56:	f000 f855 	bl	8007f04 <_lseek_r>
 8007e5a:	1c43      	adds	r3, r0, #1
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	bf15      	itete	ne
 8007e60:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e6a:	81a3      	strheq	r3, [r4, #12]
 8007e6c:	bf18      	it	ne
 8007e6e:	81a3      	strhne	r3, [r4, #12]
 8007e70:	bd10      	pop	{r4, pc}

08007e72 <__sclose>:
 8007e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e76:	f000 b813 	b.w	8007ea0 <_close_r>
	...

08007e7c <_write_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4c07      	ldr	r4, [pc, #28]	; (8007e9c <_write_r+0x20>)
 8007e80:	4605      	mov	r5, r0
 8007e82:	4608      	mov	r0, r1
 8007e84:	4611      	mov	r1, r2
 8007e86:	2200      	movs	r2, #0
 8007e88:	6022      	str	r2, [r4, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f7fc f8fb 	bl	8004086 <_write>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d102      	bne.n	8007e9a <_write_r+0x1e>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	b103      	cbz	r3, 8007e9a <_write_r+0x1e>
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	200046d0 	.word	0x200046d0

08007ea0 <_close_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4c06      	ldr	r4, [pc, #24]	; (8007ebc <_close_r+0x1c>)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	4608      	mov	r0, r1
 8007eaa:	6023      	str	r3, [r4, #0]
 8007eac:	f7fc f907 	bl	80040be <_close>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_close_r+0x1a>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_close_r+0x1a>
 8007eb8:	602b      	str	r3, [r5, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	200046d0 	.word	0x200046d0

08007ec0 <_fstat_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4c07      	ldr	r4, [pc, #28]	; (8007ee0 <_fstat_r+0x20>)
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	4611      	mov	r1, r2
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	f7fc f902 	bl	80040d6 <_fstat>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	d102      	bne.n	8007edc <_fstat_r+0x1c>
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	b103      	cbz	r3, 8007edc <_fstat_r+0x1c>
 8007eda:	602b      	str	r3, [r5, #0]
 8007edc:	bd38      	pop	{r3, r4, r5, pc}
 8007ede:	bf00      	nop
 8007ee0:	200046d0 	.word	0x200046d0

08007ee4 <_isatty_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4c06      	ldr	r4, [pc, #24]	; (8007f00 <_isatty_r+0x1c>)
 8007ee8:	2300      	movs	r3, #0
 8007eea:	4605      	mov	r5, r0
 8007eec:	4608      	mov	r0, r1
 8007eee:	6023      	str	r3, [r4, #0]
 8007ef0:	f7fc f901 	bl	80040f6 <_isatty>
 8007ef4:	1c43      	adds	r3, r0, #1
 8007ef6:	d102      	bne.n	8007efe <_isatty_r+0x1a>
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	b103      	cbz	r3, 8007efe <_isatty_r+0x1a>
 8007efc:	602b      	str	r3, [r5, #0]
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	200046d0 	.word	0x200046d0

08007f04 <_lseek_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	4c07      	ldr	r4, [pc, #28]	; (8007f24 <_lseek_r+0x20>)
 8007f08:	4605      	mov	r5, r0
 8007f0a:	4608      	mov	r0, r1
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	6022      	str	r2, [r4, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	f7fc f8fa 	bl	800410c <_lseek>
 8007f18:	1c43      	adds	r3, r0, #1
 8007f1a:	d102      	bne.n	8007f22 <_lseek_r+0x1e>
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	b103      	cbz	r3, 8007f22 <_lseek_r+0x1e>
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	bd38      	pop	{r3, r4, r5, pc}
 8007f24:	200046d0 	.word	0x200046d0

08007f28 <__malloc_lock>:
 8007f28:	4770      	bx	lr

08007f2a <__malloc_unlock>:
 8007f2a:	4770      	bx	lr

08007f2c <_read_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4c07      	ldr	r4, [pc, #28]	; (8007f4c <_read_r+0x20>)
 8007f30:	4605      	mov	r5, r0
 8007f32:	4608      	mov	r0, r1
 8007f34:	4611      	mov	r1, r2
 8007f36:	2200      	movs	r2, #0
 8007f38:	6022      	str	r2, [r4, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f7fc f886 	bl	800404c <_read>
 8007f40:	1c43      	adds	r3, r0, #1
 8007f42:	d102      	bne.n	8007f4a <_read_r+0x1e>
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	b103      	cbz	r3, 8007f4a <_read_r+0x1e>
 8007f48:	602b      	str	r3, [r5, #0]
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	200046d0 	.word	0x200046d0

08007f50 <_init>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	bf00      	nop
 8007f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f56:	bc08      	pop	{r3}
 8007f58:	469e      	mov	lr, r3
 8007f5a:	4770      	bx	lr

08007f5c <_fini>:
 8007f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5e:	bf00      	nop
 8007f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f62:	bc08      	pop	{r3}
 8007f64:	469e      	mov	lr, r3
 8007f66:	4770      	bx	lr
