
MP3_PLAYER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08007fb0  08007fb0  00017fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800805c  0800805c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800805c  0800805c  0001805c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008064  08008064  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008064  08008064  00018064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008068  08008068  00018068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800806c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000083c4  2000007c  080080e8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008440  080080e8  00028440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014035  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b91  00000000  00000000  000340e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001410  00000000  00000000  00036c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b8  00000000  00000000  00038088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e74  00000000  00000000  00039340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eecb  00000000  00000000  0005d1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d666f  00000000  00000000  0006c07f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001426ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a50  00000000  00000000  0014276c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f98 	.word	0x08007f98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08007f98 	.word	0x08007f98

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <DESELECT>:

static
inline void DESELECT(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0

}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <xmit_spi>:

extern SPI_HandleTypeDef hspi3;

static
void xmit_spi(BYTE Data)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 80004fe:	bf00      	nop
 8000500:	4808      	ldr	r0, [pc, #32]	; (8000524 <xmit_spi+0x30>)
 8000502:	f005 ff6f 	bl	80063e4 <HAL_SPI_GetState>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d1f9      	bne.n	8000500 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi3, &Data, 1, 5000);
 800050c:	1df9      	adds	r1, r7, #7
 800050e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000512:	2201      	movs	r2, #1
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <xmit_spi+0x30>)
 8000516:	f005 fc8f 	bl	8005e38 <HAL_SPI_Transmit>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	2000028c 	.word	0x2000028c

08000528 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 800052e:	23ff      	movs	r3, #255	; 0xff
 8000530:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8000536:	bf00      	nop
 8000538:	4809      	ldr	r0, [pc, #36]	; (8000560 <rcvr_spi+0x38>)
 800053a:	f005 ff53 	bl	80063e4 <HAL_SPI_GetState>
 800053e:	4603      	mov	r3, r0
 8000540:	2b01      	cmp	r3, #1
 8000542:	d1f9      	bne.n	8000538 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi3, &Dummy, &Data, 1, 5000);
 8000544:	1dba      	adds	r2, r7, #6
 8000546:	1df9      	adds	r1, r7, #7
 8000548:	f241 3388 	movw	r3, #5000	; 0x1388
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2301      	movs	r3, #1
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <rcvr_spi+0x38>)
 8000552:	f005 fda5 	bl	80060a0 <HAL_SPI_TransmitReceive>

	return Data;
 8000556:	79bb      	ldrb	r3, [r7, #6]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000028c 	.word	0x2000028c

08000564 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 800056c:	f7ff ffdc 	bl	8000528 <rcvr_spi>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	701a      	strb	r2, [r3, #0]
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <wait_ready+0x34>)
 8000588:	2232      	movs	r2, #50	; 0x32
 800058a:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 800058c:	f7ff ffcc 	bl	8000528 <rcvr_spi>
	do
		res = rcvr_spi();
 8000590:	f7ff ffca 	bl	8000528 <rcvr_spi>
 8000594:	4603      	mov	r3, r0
 8000596:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2bff      	cmp	r3, #255	; 0xff
 800059c:	d004      	beq.n	80005a8 <wait_ready+0x28>
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <wait_ready+0x34>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1f3      	bne.n	8000590 <wait_ready+0x10>

	return res;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000099 	.word	0x20000099

080005b8 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 80005be:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005c2:	60bb      	str	r3, [r7, #8]

	DESELECT();
 80005c4:	f7ff ff8f 	bl	80004e6 <DESELECT>

	for (i = 0; i < 10; i++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	e005      	b.n	80005da <power_on+0x22>
		xmit_spi(0xFF);
 80005ce:	20ff      	movs	r0, #255	; 0xff
 80005d0:	f7ff ff90 	bl	80004f4 <xmit_spi>
	for (i = 0; i < 10; i++)
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	3301      	adds	r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	2b09      	cmp	r3, #9
 80005de:	d9f6      	bls.n	80005ce <power_on+0x16>

	SELECT();
 80005e0:	f7ff ff7a 	bl	80004d8 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 80005e4:	2340      	movs	r3, #64	; 0x40
 80005e6:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 80005f8:	2395      	movs	r3, #149	; 0x95
 80005fa:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e00b      	b.n	800061a <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	f107 0210 	add.w	r2, r7, #16
 8000608:	4413      	add	r3, r2
 800060a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff70 	bl	80004f4 <xmit_spi>
	for (i = 0; i < 6; i++)
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	3301      	adds	r3, #1
 8000618:	73fb      	strb	r3, [r7, #15]
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	2b05      	cmp	r3, #5
 800061e:	d9f0      	bls.n	8000602 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000620:	e002      	b.n	8000628 <power_on+0x70>
		Count--;
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	3b01      	subs	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000628:	f7ff ff7e 	bl	8000528 <rcvr_spi>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d002      	beq.n	8000638 <power_on+0x80>
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f4      	bne.n	8000622 <power_on+0x6a>

	DESELECT();
 8000638:	f7ff ff55 	bl	80004e6 <DESELECT>
	xmit_spi(0XFF);
 800063c:	20ff      	movs	r0, #255	; 0xff
 800063e:	f7ff ff59 	bl	80004f4 <xmit_spi>

	PowerFlag = 1;
 8000642:	4b03      	ldr	r3, [pc, #12]	; (8000650 <power_on+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	2000009b 	.word	0x2000009b

08000654 <power_off>:

static
void power_off(void) {
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <power_off+0x14>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	2000009b 	.word	0x2000009b

0800066c <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <chk_power+0x14>)
 8000672:	781b      	ldrb	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	2000009b 	.word	0x2000009b

08000684 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <rcvr_datablock+0x68>)
 8000690:	220a      	movs	r2, #10
 8000692:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000694:	f7ff ff48 	bl	8000528 <rcvr_spi>
 8000698:	4603      	mov	r3, r0
 800069a:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	2bff      	cmp	r3, #255	; 0xff
 80006a0:	d104      	bne.n	80006ac <rcvr_datablock+0x28>
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <rcvr_datablock+0x68>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1f3      	bne.n	8000694 <rcvr_datablock+0x10>
	if (token != 0xFE)
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	2bfe      	cmp	r3, #254	; 0xfe
 80006b0:	d001      	beq.n	80006b6 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 80006b2:	2300      	movs	r3, #0
 80006b4:	e016      	b.n	80006e4 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff51 	bl	8000564 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff4b 	bl	8000564 <rcvr_spi_m>
	} while (btr -= 2);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	3b02      	subs	r3, #2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1ed      	bne.n	80006b6 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 80006da:	f7ff ff25 	bl	8000528 <rcvr_spi>
	rcvr_spi();
 80006de:	f7ff ff23 	bl	8000528 <rcvr_spi>

	return TRUE; /* Return with success */
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000098 	.word	0x20000098

080006f0 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000700:	f7ff ff3e 	bl	8000580 <wait_ready>
 8000704:	4603      	mov	r3, r0
 8000706:	2bff      	cmp	r3, #255	; 0xff
 8000708:	d001      	beq.n	800070e <xmit_datablock+0x1e>
		return FALSE;
 800070a:	2300      	movs	r3, #0
 800070c:	e040      	b.n	8000790 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 800070e:	78fb      	ldrb	r3, [r7, #3]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff feef 	bl	80004f4 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	2bfd      	cmp	r3, #253	; 0xfd
 800071a:	d031      	beq.n	8000780 <xmit_datablock+0x90>
		wc = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fee3 	bl	80004f4 <xmit_spi>
			xmit_spi(*buff++);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fedc 	bl	80004f4 <xmit_spi>
		} while (--wc);
 800073c:	7bbb      	ldrb	r3, [r7, #14]
 800073e:	3b01      	subs	r3, #1
 8000740:	73bb      	strb	r3, [r7, #14]
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1eb      	bne.n	8000720 <xmit_datablock+0x30>

		rcvr_spi();
 8000748:	f7ff feee 	bl	8000528 <rcvr_spi>
		rcvr_spi();
 800074c:	f7ff feec 	bl	8000528 <rcvr_spi>

		while (i <= 64) {
 8000750:	e00b      	b.n	800076a <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000752:	f7ff fee9 	bl	8000528 <rcvr_spi>
 8000756:	4603      	mov	r3, r0
 8000758:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	f003 031f 	and.w	r3, r3, #31
 8000760:	2b05      	cmp	r3, #5
 8000762:	d006      	beq.n	8000772 <xmit_datablock+0x82>
				break;
			i++;
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	3301      	adds	r3, #1
 8000768:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	2b40      	cmp	r3, #64	; 0x40
 800076e:	d9f0      	bls.n	8000752 <xmit_datablock+0x62>
 8000770:	e000      	b.n	8000774 <xmit_datablock+0x84>
				break;
 8000772:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000774:	bf00      	nop
 8000776:	f7ff fed7 	bl	8000528 <rcvr_spi>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0fa      	beq.n	8000776 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f003 031f 	and.w	r3, r3, #31
 8000786:	2b05      	cmp	r3, #5
 8000788:	d101      	bne.n	800078e <xmit_datablock+0x9e>
		return TRUE;
 800078a:	2301      	movs	r3, #1
 800078c:	e000      	b.n	8000790 <xmit_datablock+0xa0>
	else
		return FALSE;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 80007a4:	f7ff feec 	bl	8000580 <wait_ready>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2bff      	cmp	r3, #255	; 0xff
 80007ac:	d001      	beq.n	80007b2 <send_cmd+0x1a>
		return 0xFF;
 80007ae:	23ff      	movs	r3, #255	; 0xff
 80007b0:	e040      	b.n	8000834 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fe9d 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	0e1b      	lsrs	r3, r3, #24
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe97 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	0c1b      	lsrs	r3, r3, #16
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fe91 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fe8b 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fe86 	bl	80004f4 <xmit_spi>
	n = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b40      	cmp	r3, #64	; 0x40
 80007f0:	d101      	bne.n	80007f6 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 80007f2:	2395      	movs	r3, #149	; 0x95
 80007f4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b48      	cmp	r3, #72	; 0x48
 80007fa:	d101      	bne.n	8000800 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 80007fc:	2387      	movs	r3, #135	; 0x87
 80007fe:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe76 	bl	80004f4 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b4c      	cmp	r3, #76	; 0x4c
 800080c:	d101      	bne.n	8000812 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 800080e:	f7ff fe8b 	bl	8000528 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8000812:	230a      	movs	r3, #10
 8000814:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8000816:	f7ff fe87 	bl	8000528 <rcvr_spi>
 800081a:	4603      	mov	r3, r0
 800081c:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 800081e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000822:	2b00      	cmp	r3, #0
 8000824:	da05      	bge.n	8000832 <send_cmd+0x9a>
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	3b01      	subs	r3, #1
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f1      	bne.n	8000816 <send_cmd+0x7e>

	return res; /* Return with the response value */
 8000832:	7bbb      	ldrb	r3, [r7, #14]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 800084c:	2301      	movs	r3, #1
 800084e:	e0d5      	b.n	80009fc <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8000850:	4b6c      	ldr	r3, [pc, #432]	; (8000a04 <disk_initialize+0x1c8>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <disk_initialize+0x1c8>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	e0ca      	b.n	80009fc <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8000866:	f7ff fea7 	bl	80005b8 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 800086a:	f7ff fe35 	bl	80004d8 <SELECT>
	ty = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8000872:	2100      	movs	r1, #0
 8000874:	2040      	movs	r0, #64	; 0x40
 8000876:	f7ff ff8f 	bl	8000798 <send_cmd>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 80a5 	bne.w	80009cc <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8000882:	4b61      	ldr	r3, [pc, #388]	; (8000a08 <disk_initialize+0x1cc>)
 8000884:	2264      	movs	r2, #100	; 0x64
 8000886:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8000888:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800088c:	2048      	movs	r0, #72	; 0x48
 800088e:	f7ff ff83 	bl	8000798 <send_cmd>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d158      	bne.n	800094a <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e00c      	b.n	80008b8 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800089e:	7bfc      	ldrb	r4, [r7, #15]
 80008a0:	f7ff fe42 	bl	8000528 <rcvr_spi>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4423      	add	r3, r4
 80008ae:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	3301      	adds	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d9ef      	bls.n	800089e <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 80008be:	7abb      	ldrb	r3, [r7, #10]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	f040 8083 	bne.w	80009cc <disk_initialize+0x190>
 80008c6:	7afb      	ldrb	r3, [r7, #11]
 80008c8:	2baa      	cmp	r3, #170	; 0xaa
 80008ca:	d17f      	bne.n	80009cc <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 80008cc:	2100      	movs	r1, #0
 80008ce:	2077      	movs	r0, #119	; 0x77
 80008d0:	f7ff ff62 	bl	8000798 <send_cmd>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d807      	bhi.n	80008ea <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80008da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008de:	2069      	movs	r0, #105	; 0x69
 80008e0:	f7ff ff5a 	bl	8000798 <send_cmd>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d005      	beq.n	80008f6 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80008ea:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <disk_initialize+0x1cc>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1eb      	bne.n	80008cc <disk_initialize+0x90>
 80008f4:	e000      	b.n	80008f8 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80008f6:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80008f8:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <disk_initialize+0x1cc>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d064      	beq.n	80009cc <disk_initialize+0x190>
 8000902:	2100      	movs	r1, #0
 8000904:	207a      	movs	r0, #122	; 0x7a
 8000906:	f7ff ff47 	bl	8000798 <send_cmd>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d15d      	bne.n	80009cc <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8000910:	2300      	movs	r3, #0
 8000912:	73fb      	strb	r3, [r7, #15]
 8000914:	e00c      	b.n	8000930 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8000916:	7bfc      	ldrb	r4, [r7, #15]
 8000918:	f7ff fe06 	bl	8000528 <rcvr_spi>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4423      	add	r3, r4
 8000926:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	3301      	adds	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	2b03      	cmp	r3, #3
 8000934:	d9ef      	bls.n	8000916 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8000936:	7a3b      	ldrb	r3, [r7, #8]
 8000938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <disk_initialize+0x108>
 8000940:	2306      	movs	r3, #6
 8000942:	e000      	b.n	8000946 <disk_initialize+0x10a>
 8000944:	2302      	movs	r3, #2
 8000946:	73bb      	strb	r3, [r7, #14]
 8000948:	e040      	b.n	80009cc <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800094a:	2100      	movs	r1, #0
 800094c:	2077      	movs	r0, #119	; 0x77
 800094e:	f7ff ff23 	bl	8000798 <send_cmd>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	d808      	bhi.n	800096a <disk_initialize+0x12e>
 8000958:	2100      	movs	r1, #0
 800095a:	2069      	movs	r0, #105	; 0x69
 800095c:	f7ff ff1c 	bl	8000798 <send_cmd>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d801      	bhi.n	800096a <disk_initialize+0x12e>
 8000966:	2302      	movs	r3, #2
 8000968:	e000      	b.n	800096c <disk_initialize+0x130>
 800096a:	2301      	movs	r3, #1
 800096c:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 800096e:	7bbb      	ldrb	r3, [r7, #14]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d10e      	bne.n	8000992 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8000974:	2100      	movs	r1, #0
 8000976:	2077      	movs	r0, #119	; 0x77
 8000978:	f7ff ff0e 	bl	8000798 <send_cmd>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d80e      	bhi.n	80009a0 <disk_initialize+0x164>
 8000982:	2100      	movs	r1, #0
 8000984:	2069      	movs	r0, #105	; 0x69
 8000986:	f7ff ff07 	bl	8000798 <send_cmd>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d107      	bne.n	80009a0 <disk_initialize+0x164>
						break; /* ACMD41 */
 8000990:	e00d      	b.n	80009ae <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8000992:	2100      	movs	r1, #0
 8000994:	2041      	movs	r0, #65	; 0x41
 8000996:	f7ff feff 	bl	8000798 <send_cmd>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d005      	beq.n	80009ac <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <disk_initialize+0x1cc>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1e1      	bne.n	800096e <disk_initialize+0x132>
 80009aa:	e000      	b.n	80009ae <disk_initialize+0x172>
						break; /* CMD1 */
 80009ac:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <disk_initialize+0x1cc>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d007      	beq.n	80009c8 <disk_initialize+0x18c>
 80009b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009bc:	2050      	movs	r0, #80	; 0x50
 80009be:	f7ff feeb 	bl	8000798 <send_cmd>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <disk_initialize+0x190>
				ty = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 80009cc:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <disk_initialize+0x1d0>)
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80009d2:	f7ff fd88 	bl	80004e6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80009d6:	f7ff fda7 	bl	8000528 <rcvr_spi>

	if (ty) /* Initialization succeded */
 80009da:	7bbb      	ldrb	r3, [r7, #14]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d008      	beq.n	80009f2 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <disk_initialize+0x1c8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f023 0301 	bic.w	r3, r3, #1
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <disk_initialize+0x1c8>)
 80009ee:	701a      	strb	r2, [r3, #0]
 80009f0:	e001      	b.n	80009f6 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80009f2:	f7ff fe2f 	bl	8000654 <power_off>

	return Stat;
 80009f6:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <disk_initialize+0x1c8>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000098 	.word	0x20000098
 8000a0c:	2000009a 	.word	0x2000009a

08000a10 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000a20:	2301      	movs	r3, #1
 8000a22:	e002      	b.n	8000a2a <disk_status+0x1a>
	return Stat;
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <disk_status+0x28>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000000 	.word	0x20000000

08000a3c <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	4603      	mov	r3, r0
 8000a4a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d102      	bne.n	8000a58 <disk_read+0x1c>
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <disk_read+0x20>
		return RES_PARERR;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	e051      	b.n	8000b00 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <disk_read+0xcc>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <disk_read+0x32>
		return RES_NOTRDY;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e048      	b.n	8000b00 <disk_read+0xc4>

	if (!(CardType & 4))
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <disk_read+0xd0>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	025b      	lsls	r3, r3, #9
 8000a7e:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000a80:	f7ff fd2a 	bl	80004d8 <SELECT>

	if (count == 1) { /* Single block read */
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d111      	bne.n	8000aae <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2051      	movs	r0, #81	; 0x51
 8000a8e:	f7ff fe83 	bl	8000798 <send_cmd>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d129      	bne.n	8000aec <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8000a98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9c:	68b8      	ldr	r0, [r7, #8]
 8000a9e:	f7ff fdf1 	bl	8000684 <rcvr_datablock>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d021      	beq.n	8000aec <disk_read+0xb0>
			count = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	e01e      	b.n	8000aec <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2052      	movs	r0, #82	; 0x52
 8000ab2:	f7ff fe71 	bl	8000798 <send_cmd>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d117      	bne.n	8000aec <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8000abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac0:	68b8      	ldr	r0, [r7, #8]
 8000ac2:	f7ff fddf 	bl	8000684 <rcvr_datablock>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00a      	beq.n	8000ae2 <disk_read+0xa6>
					break;
				buff += 512;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ad2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1ed      	bne.n	8000abc <disk_read+0x80>
 8000ae0:	e000      	b.n	8000ae4 <disk_read+0xa8>
					break;
 8000ae2:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	204c      	movs	r0, #76	; 0x4c
 8000ae8:	f7ff fe56 	bl	8000798 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8000aec:	f7ff fcfb 	bl	80004e6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000af0:	f7ff fd1a 	bl	8000528 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bf14      	ite	ne
 8000afa:	2301      	movne	r3, #1
 8000afc:	2300      	moveq	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	2000009a 	.word	0x2000009a

08000b10 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <disk_write+0x1c>
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <disk_write+0x20>
		return RES_PARERR;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	e06b      	b.n	8000c08 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8000b30:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <disk_write+0x100>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <disk_write+0x32>
		return RES_NOTRDY;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e062      	b.n	8000c08 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8000b42:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <disk_write+0x100>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <disk_write+0x44>
		return RES_WRPRT;
 8000b50:	2302      	movs	r3, #2
 8000b52:	e059      	b.n	8000c08 <disk_write+0xf8>

	if (!(CardType & 4))
 8000b54:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <disk_write+0x104>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	025b      	lsls	r3, r3, #9
 8000b64:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000b66:	f7ff fcb7 	bl	80004d8 <SELECT>

	if (count == 1) { /* Single block write */
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d110      	bne.n	8000b92 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	2058      	movs	r0, #88	; 0x58
 8000b74:	f7ff fe10 	bl	8000798 <send_cmd>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d13a      	bne.n	8000bf4 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8000b7e:	21fe      	movs	r1, #254	; 0xfe
 8000b80:	68b8      	ldr	r0, [r7, #8]
 8000b82:	f7ff fdb5 	bl	80006f0 <xmit_datablock>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d033      	beq.n	8000bf4 <disk_write+0xe4>
			count = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	e030      	b.n	8000bf4 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <disk_write+0x104>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d007      	beq.n	8000bae <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2077      	movs	r0, #119	; 0x77
 8000ba2:	f7ff fdf9 	bl	8000798 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8000ba6:	6839      	ldr	r1, [r7, #0]
 8000ba8:	2057      	movs	r0, #87	; 0x57
 8000baa:	f7ff fdf5 	bl	8000798 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2059      	movs	r0, #89	; 0x59
 8000bb2:	f7ff fdf1 	bl	8000798 <send_cmd>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d11b      	bne.n	8000bf4 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8000bbc:	21fc      	movs	r1, #252	; 0xfc
 8000bbe:	68b8      	ldr	r0, [r7, #8]
 8000bc0:	f7ff fd96 	bl	80006f0 <xmit_datablock>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00a      	beq.n	8000be0 <disk_write+0xd0>
					break;
				buff += 512;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bd0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1ee      	bne.n	8000bbc <disk_write+0xac>
 8000bde:	e000      	b.n	8000be2 <disk_write+0xd2>
					break;
 8000be0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8000be2:	21fd      	movs	r1, #253	; 0xfd
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff fd83 	bl	80006f0 <xmit_datablock>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <disk_write+0xe4>
				count = 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8000bf4:	f7ff fc77 	bl	80004e6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000bf8:	f7ff fc96 	bl	8000528 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf14      	ite	ne
 8000c02:	2301      	movne	r3, #1
 8000c04:	2300      	moveq	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000000 	.word	0x20000000
 8000c14:	2000009a 	.word	0x2000009a

08000c18 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b08b      	sub	sp, #44	; 0x2c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	603a      	str	r2, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	460b      	mov	r3, r1
 8000c26:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <disk_ioctl+0x1e>
		return RES_PARERR;
 8000c32:	2304      	movs	r3, #4
 8000c34:	e16a      	b.n	8000f0c <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	d127      	bne.n	8000c92 <disk_ioctl+0x7a>
		switch (*ptr) {
 8000c42:	6a3b      	ldr	r3, [r7, #32]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d00e      	beq.n	8000c68 <disk_ioctl+0x50>
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d012      	beq.n	8000c74 <disk_ioctl+0x5c>
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d11b      	bne.n	8000c8a <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 8000c52:	f7ff fd0b 	bl	800066c <chk_power>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <disk_ioctl+0x48>
				power_off(); /* Power off */
 8000c5c:	f7ff fcfa 	bl	8000654 <power_off>
			res = RES_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c66:	e14f      	b.n	8000f08 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8000c68:	f7ff fca6 	bl	80005b8 <power_on>
			res = RES_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c72:	e149      	b.n	8000f08 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8000c74:	f7ff fcfa 	bl	800066c <chk_power>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	6a3b      	ldr	r3, [r7, #32]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c88:	e13e      	b.n	8000f08 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c90:	e13a      	b.n	8000f08 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8000c92:	4ba0      	ldr	r3, [pc, #640]	; (8000f14 <disk_ioctl+0x2fc>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e133      	b.n	8000f0c <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8000ca4:	f7ff fc18 	bl	80004d8 <SELECT>

		switch (ctrl) {
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	2b35      	cmp	r3, #53	; 0x35
 8000cac:	f200 811d 	bhi.w	8000eea <disk_ioctl+0x2d2>
 8000cb0:	a201      	add	r2, pc, #4	; (adr r2, 8000cb8 <disk_ioctl+0xa0>)
 8000cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb6:	bf00      	nop
 8000cb8:	08000e53 	.word	0x08000e53
 8000cbc:	08000d91 	.word	0x08000d91
 8000cc0:	08000e43 	.word	0x08000e43
 8000cc4:	08000eeb 	.word	0x08000eeb
 8000cc8:	08000eeb 	.word	0x08000eeb
 8000ccc:	08000eeb 	.word	0x08000eeb
 8000cd0:	08000eeb 	.word	0x08000eeb
 8000cd4:	08000eeb 	.word	0x08000eeb
 8000cd8:	08000eeb 	.word	0x08000eeb
 8000cdc:	08000eeb 	.word	0x08000eeb
 8000ce0:	08000eeb 	.word	0x08000eeb
 8000ce4:	08000eeb 	.word	0x08000eeb
 8000ce8:	08000eeb 	.word	0x08000eeb
 8000cec:	08000eeb 	.word	0x08000eeb
 8000cf0:	08000eeb 	.word	0x08000eeb
 8000cf4:	08000eeb 	.word	0x08000eeb
 8000cf8:	08000eeb 	.word	0x08000eeb
 8000cfc:	08000eeb 	.word	0x08000eeb
 8000d00:	08000eeb 	.word	0x08000eeb
 8000d04:	08000eeb 	.word	0x08000eeb
 8000d08:	08000eeb 	.word	0x08000eeb
 8000d0c:	08000eeb 	.word	0x08000eeb
 8000d10:	08000eeb 	.word	0x08000eeb
 8000d14:	08000eeb 	.word	0x08000eeb
 8000d18:	08000eeb 	.word	0x08000eeb
 8000d1c:	08000eeb 	.word	0x08000eeb
 8000d20:	08000eeb 	.word	0x08000eeb
 8000d24:	08000eeb 	.word	0x08000eeb
 8000d28:	08000eeb 	.word	0x08000eeb
 8000d2c:	08000eeb 	.word	0x08000eeb
 8000d30:	08000eeb 	.word	0x08000eeb
 8000d34:	08000eeb 	.word	0x08000eeb
 8000d38:	08000eeb 	.word	0x08000eeb
 8000d3c:	08000eeb 	.word	0x08000eeb
 8000d40:	08000eeb 	.word	0x08000eeb
 8000d44:	08000eeb 	.word	0x08000eeb
 8000d48:	08000eeb 	.word	0x08000eeb
 8000d4c:	08000eeb 	.word	0x08000eeb
 8000d50:	08000eeb 	.word	0x08000eeb
 8000d54:	08000eeb 	.word	0x08000eeb
 8000d58:	08000eeb 	.word	0x08000eeb
 8000d5c:	08000eeb 	.word	0x08000eeb
 8000d60:	08000eeb 	.word	0x08000eeb
 8000d64:	08000eeb 	.word	0x08000eeb
 8000d68:	08000eeb 	.word	0x08000eeb
 8000d6c:	08000eeb 	.word	0x08000eeb
 8000d70:	08000eeb 	.word	0x08000eeb
 8000d74:	08000eeb 	.word	0x08000eeb
 8000d78:	08000eeb 	.word	0x08000eeb
 8000d7c:	08000eeb 	.word	0x08000eeb
 8000d80:	08000eeb 	.word	0x08000eeb
 8000d84:	08000e65 	.word	0x08000e65
 8000d88:	08000e89 	.word	0x08000e89
 8000d8c:	08000ead 	.word	0x08000ead
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8000d90:	2100      	movs	r1, #0
 8000d92:	2049      	movs	r0, #73	; 0x49
 8000d94:	f7ff fd00 	bl	8000798 <send_cmd>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 80a9 	bne.w	8000ef2 <disk_ioctl+0x2da>
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2110      	movs	r1, #16
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc6c 	bl	8000684 <rcvr_datablock>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 809f 	beq.w	8000ef2 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8000db4:	7b3b      	ldrb	r3, [r7, #12]
 8000db6:	099b      	lsrs	r3, r3, #6
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d10e      	bne.n	8000ddc <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dbe:	7d7b      	ldrb	r3, [r7, #21]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	7d3b      	ldrb	r3, [r7, #20]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4413      	add	r3, r2
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3301      	adds	r3, #1
 8000dd0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dd2:	8bfb      	ldrh	r3, [r7, #30]
 8000dd4:	029a      	lsls	r2, r3, #10
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e02e      	b.n	8000e3a <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000ddc:	7c7b      	ldrb	r3, [r7, #17]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	7dbb      	ldrb	r3, [r7, #22]
 8000de6:	09db      	lsrs	r3, r3, #7
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8000dee:	7d7b      	ldrb	r3, [r7, #21]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 0306 	and.w	r3, r3, #6
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000dfe:	3302      	adds	r3, #2
 8000e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000e04:	7d3b      	ldrb	r3, [r7, #20]
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	7cfb      	ldrb	r3, [r7, #19]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8000e18:	7cbb      	ldrb	r3, [r7, #18]
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000e28:	3301      	adds	r3, #1
 8000e2a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e2c:	8bfa      	ldrh	r2, [r7, #30]
 8000e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e32:	3b09      	subs	r3, #9
 8000e34:	409a      	lsls	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e40:	e057      	b.n	8000ef2 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e48:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e50:	e056      	b.n	8000f00 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8000e52:	f7ff fb95 	bl	8000580 <wait_ready>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2bff      	cmp	r3, #255	; 0xff
 8000e5a:	d14c      	bne.n	8000ef6 <disk_ioctl+0x2de>
				res = RES_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e62:	e048      	b.n	8000ef6 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8000e64:	2100      	movs	r1, #0
 8000e66:	2049      	movs	r0, #73	; 0x49
 8000e68:	f7ff fc96 	bl	8000798 <send_cmd>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d143      	bne.n	8000efa <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8000e72:	2110      	movs	r1, #16
 8000e74:	6a38      	ldr	r0, [r7, #32]
 8000e76:	f7ff fc05 	bl	8000684 <rcvr_datablock>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d03c      	beq.n	8000efa <disk_ioctl+0x2e2>
				res = RES_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e86:	e038      	b.n	8000efa <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8000e88:	2100      	movs	r1, #0
 8000e8a:	204a      	movs	r0, #74	; 0x4a
 8000e8c:	f7ff fc84 	bl	8000798 <send_cmd>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d133      	bne.n	8000efe <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8000e96:	2110      	movs	r1, #16
 8000e98:	6a38      	ldr	r0, [r7, #32]
 8000e9a:	f7ff fbf3 	bl	8000684 <rcvr_datablock>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d02c      	beq.n	8000efe <disk_ioctl+0x2e6>
				res = RES_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000eaa:	e028      	b.n	8000efe <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8000eac:	2100      	movs	r1, #0
 8000eae:	207a      	movs	r0, #122	; 0x7a
 8000eb0:	f7ff fc72 	bl	8000798 <send_cmd>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d117      	bne.n	8000eea <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ec0:	e00b      	b.n	8000eda <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8000ec2:	6a3c      	ldr	r4, [r7, #32]
 8000ec4:	1c63      	adds	r3, r4, #1
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	f7ff fb2e 	bl	8000528 <rcvr_spi>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d9ef      	bls.n	8000ec2 <disk_ioctl+0x2aa>
				res = RES_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000ee8:	e00a      	b.n	8000f00 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8000eea:	2304      	movs	r3, #4
 8000eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ef0:	e006      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000ef2:	bf00      	nop
 8000ef4:	e004      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000ef6:	bf00      	nop
 8000ef8:	e002      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000efa:	bf00      	nop
 8000efc:	e000      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000efe:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8000f00:	f7ff faf1 	bl	80004e6 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8000f04:	f7ff fb10 	bl	8000528 <rcvr_spi>
	}

	return res;
 8000f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	372c      	adds	r7, #44	; 0x2c
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	20000000 	.word	0x20000000

08000f18 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <disk_timerproc+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d005      	beq.n	8000f36 <disk_timerproc+0x1e>
		Timer1 = --n;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <disk_timerproc+0x44>)
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <disk_timerproc+0x48>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <disk_timerproc+0x36>
		Timer2 = --n;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <disk_timerproc+0x48>)
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	7013      	strb	r3, [r2, #0]

}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000098 	.word	0x20000098
 8000f60:	20000099 	.word	0x20000099

08000f64 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f74:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	2b09      	cmp	r3, #9
 8000f7e:	d904      	bls.n	8000f8a <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8000f86:	f7ff ffc7 	bl	8000f18 <disk_timerproc>
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200000e0 	.word	0x200000e0

08000f94 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	36c55cc0 	.word	0x36c55cc0

08000fa8 <ld_word>:
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	81fb      	strh	r3, [r7, #14]
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	81fb      	strh	r3, [r7, #14]
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <ld_dword>:
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3303      	adds	r3, #3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	3202      	adds	r2, #2
 8000ff0:	7812      	ldrb	r2, [r2, #0]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	3201      	adds	r2, #1
 8000ffe:	7812      	ldrb	r2, [r2, #0]
 8001000:	4313      	orrs	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	7812      	ldrb	r2, [r2, #0]
 800100c:	4313      	orrs	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <st_word>:
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	887a      	ldrh	r2, [r7, #2]
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	807b      	strh	r3, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <st_dword>:
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	0a1b      	lsrs	r3, r3, #8
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <mem_cpy>:
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00d      	beq.n	80010e2 <mem_cpy+0x36>
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	1c53      	adds	r3, r2, #1
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	1c59      	adds	r1, r3, #1
 80010d0:	6179      	str	r1, [r7, #20]
 80010d2:	7812      	ldrb	r2, [r2, #0]
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3b01      	subs	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f1      	bne.n	80010c6 <mem_cpy+0x1a>
 80010e2:	bf00      	nop
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <mem_set>:
 80010ee:	b480      	push	{r7}
 80010f0:	b087      	sub	sp, #28
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	617a      	str	r2, [r7, #20]
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3b01      	subs	r3, #1
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f3      	bne.n	80010fe <mem_set+0x10>
 8001116:	bf00      	nop
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <mem_cmp>:
 8001122:	b480      	push	{r7}
 8001124:	b089      	sub	sp, #36	; 0x24
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	61fa      	str	r2, [r7, #28]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	61ba      	str	r2, [r7, #24]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	1acb      	subs	r3, r1, r3
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <mem_cmp+0x40>
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0eb      	beq.n	800113a <mem_cmp+0x18>
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	4618      	mov	r0, r3
 8001166:	3724      	adds	r7, #36	; 0x24
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <chk_chr>:
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	e002      	b.n	8001182 <chk_chr+0x12>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3301      	adds	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <chk_chr+0x26>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4293      	cmp	r3, r2
 8001194:	d1f2      	bne.n	800117c <chk_chr+0xc>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <dbc_1st>:
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	2281      	movs	r2, #129	; 0x81
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d30f      	bcc.n	80011d8 <dbc_1st+0x32>
 80011b8:	229f      	movs	r2, #159	; 0x9f
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4293      	cmp	r3, r2
 80011be:	d801      	bhi.n	80011c4 <dbc_1st+0x1e>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e00a      	b.n	80011da <dbc_1st+0x34>
 80011c4:	22e0      	movs	r2, #224	; 0xe0
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d305      	bcc.n	80011d8 <dbc_1st+0x32>
 80011cc:	22fc      	movs	r2, #252	; 0xfc
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d801      	bhi.n	80011d8 <dbc_1st+0x32>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <dbc_1st+0x34>
 80011d8:	2300      	movs	r3, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <dbc_2nd>:
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	2240      	movs	r2, #64	; 0x40
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d319      	bcc.n	800122c <dbc_2nd+0x46>
 80011f8:	227e      	movs	r2, #126	; 0x7e
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d801      	bhi.n	8001204 <dbc_2nd+0x1e>
 8001200:	2301      	movs	r3, #1
 8001202:	e014      	b.n	800122e <dbc_2nd+0x48>
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	4293      	cmp	r3, r2
 800120a:	d305      	bcc.n	8001218 <dbc_2nd+0x32>
 800120c:	22fc      	movs	r2, #252	; 0xfc
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4293      	cmp	r3, r2
 8001212:	d801      	bhi.n	8001218 <dbc_2nd+0x32>
 8001214:	2301      	movs	r3, #1
 8001216:	e00a      	b.n	800122e <dbc_2nd+0x48>
 8001218:	2200      	movs	r2, #0
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4293      	cmp	r3, r2
 800121e:	d305      	bcc.n	800122c <dbc_2nd+0x46>
 8001220:	2200      	movs	r2, #0
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4293      	cmp	r3, r2
 8001226:	d801      	bhi.n	800122c <dbc_2nd+0x46>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <dbc_2nd+0x48>
 800122c:	2300      	movs	r3, #0
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <sync_window>:
 800123a:	b580      	push	{r7, lr}
 800123c:	b084      	sub	sp, #16
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	78db      	ldrb	r3, [r3, #3]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d02c      	beq.n	80012a8 <sync_window+0x6e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7858      	ldrb	r0, [r3, #1]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800125c:	2301      	movs	r3, #1
 800125e:	f7ff fc57 	bl	8000b10 <disk_write>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d11d      	bne.n	80012a4 <sync_window+0x6a>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	70da      	strb	r2, [r3, #3]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	1ad2      	subs	r2, r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	429a      	cmp	r2, r3
 800127e:	d213      	bcs.n	80012a8 <sync_window+0x6e>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	789b      	ldrb	r3, [r3, #2]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d10f      	bne.n	80012a8 <sync_window+0x6e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7858      	ldrb	r0, [r3, #1]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	441a      	add	r2, r3
 800129c:	2301      	movs	r3, #1
 800129e:	f7ff fc37 	bl	8000b10 <disk_write>
 80012a2:	e001      	b.n	80012a8 <sync_window+0x6e>
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <move_window>:
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d01b      	beq.n	8001302 <move_window+0x50>
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffb5 	bl	800123a <sync_window>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d113      	bne.n	8001302 <move_window+0x50>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7858      	ldrb	r0, [r3, #1]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80012e4:	2301      	movs	r3, #1
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	f7ff fba8 	bl	8000a3c <disk_read>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <move_window+0x4a>
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <sync_fs>:
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff90 	bl	800123a <sync_window>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d158      	bne.n	80013d6 <sync_fs+0xca>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d148      	bne.n	80013be <sync_fs+0xb2>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	791b      	ldrb	r3, [r3, #4]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d144      	bne.n	80013be <sync_fs+0xb2>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3330      	adds	r3, #48	; 0x30
 8001338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fed5 	bl	80010ee <mem_set>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3330      	adds	r3, #48	; 0x30
 8001348:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800134c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe64 	bl	800101e <st_word>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3330      	adds	r3, #48	; 0x30
 800135a:	4921      	ldr	r1, [pc, #132]	; (80013e0 <sync_fs+0xd4>)
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe79 	bl	8001054 <st_dword>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3330      	adds	r3, #48	; 0x30
 8001366:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800136a:	491e      	ldr	r1, [pc, #120]	; (80013e4 <sync_fs+0xd8>)
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe71 	bl	8001054 <st_dword>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3330      	adds	r3, #48	; 0x30
 8001376:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	4619      	mov	r1, r3
 8001380:	4610      	mov	r0, r2
 8001382:	f7ff fe67 	bl	8001054 <st_dword>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3330      	adds	r3, #48	; 0x30
 800138a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	4619      	mov	r1, r3
 8001394:	4610      	mov	r0, r2
 8001396:	f7ff fe5d 	bl	8001054 <st_dword>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7858      	ldrb	r0, [r3, #1]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b2:	2301      	movs	r3, #1
 80013b4:	f7ff fbac 	bl	8000b10 <disk_write>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	711a      	strb	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	785b      	ldrb	r3, [r3, #1]
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fc26 	bl	8000c18 <disk_ioctl>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <sync_fs+0xca>
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	41615252 	.word	0x41615252
 80013e4:	61417272 	.word	0x61417272

080013e8 <clst2sect>:
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	3b02      	subs	r3, #2
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	3b02      	subs	r3, #2
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d301      	bcc.n	8001408 <clst2sect+0x20>
 8001404:	2300      	movs	r3, #0
 8001406:	e008      	b.n	800141a <clst2sect+0x32>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	895b      	ldrh	r3, [r3, #10]
 8001410:	4619      	mov	r1, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	fb03 f301 	mul.w	r3, r3, r1
 8001418:	4413      	add	r3, r2
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <get_fat>:
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d904      	bls.n	8001446 <get_fat+0x20>
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d302      	bcc.n	800144c <get_fat+0x26>
 8001446:	2301      	movs	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	e08c      	b.n	8001566 <get_fat+0x140>
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d045      	beq.n	80014e6 <get_fat+0xc0>
 800145a:	2b03      	cmp	r3, #3
 800145c:	d05d      	beq.n	800151a <get_fat+0xf4>
 800145e:	2b01      	cmp	r3, #1
 8001460:	d177      	bne.n	8001552 <get_fat+0x12c>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4413      	add	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	6a1a      	ldr	r2, [r3, #32]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	0a5b      	lsrs	r3, r3, #9
 8001478:	4413      	add	r3, r2
 800147a:	4619      	mov	r1, r3
 800147c:	6938      	ldr	r0, [r7, #16]
 800147e:	f7ff ff18 	bl	80012b2 <move_window>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d167      	bne.n	8001558 <get_fat+0x132>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60fa      	str	r2, [r7, #12]
 800148e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4413      	add	r3, r2
 8001496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6a1a      	ldr	r2, [r3, #32]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	0a5b      	lsrs	r3, r3, #9
 80014a4:	4413      	add	r3, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	6938      	ldr	r0, [r7, #16]
 80014aa:	f7ff ff02 	bl	80012b2 <move_window>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d153      	bne.n	800155c <get_fat+0x136>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	461a      	mov	r2, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <get_fat+0xb6>
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	e002      	b.n	80014e2 <get_fat+0xbc>
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e03f      	b.n	8001566 <get_fat+0x140>
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	6a1a      	ldr	r2, [r3, #32]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	4413      	add	r3, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	6938      	ldr	r0, [r7, #16]
 80014f4:	f7ff fedd 	bl	80012b2 <move_window>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d130      	bne.n	8001560 <get_fat+0x13a>
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800150c:	4413      	add	r3, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fd4a 	bl	8000fa8 <ld_word>
 8001514:	4603      	mov	r3, r0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e025      	b.n	8001566 <get_fat+0x140>
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	6a1a      	ldr	r2, [r3, #32]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	09db      	lsrs	r3, r3, #7
 8001522:	4413      	add	r3, r2
 8001524:	4619      	mov	r1, r3
 8001526:	6938      	ldr	r0, [r7, #16]
 8001528:	f7ff fec3 	bl	80012b2 <move_window>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d118      	bne.n	8001564 <get_fat+0x13e>
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001540:	4413      	add	r3, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fd48 	bl	8000fd8 <ld_dword>
 8001548:	4603      	mov	r3, r0
 800154a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e009      	b.n	8001566 <get_fat+0x140>
 8001552:	2301      	movs	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	e006      	b.n	8001566 <get_fat+0x140>
 8001558:	bf00      	nop
 800155a:	e004      	b.n	8001566 <get_fat+0x140>
 800155c:	bf00      	nop
 800155e:	e002      	b.n	8001566 <get_fat+0x140>
 8001560:	bf00      	nop
 8001562:	e000      	b.n	8001566 <get_fat+0x140>
 8001564:	bf00      	nop
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <put_fat>:
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	2302      	movs	r3, #2
 800157e:	77fb      	strb	r3, [r7, #31]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b01      	cmp	r3, #1
 8001584:	f240 80d6 	bls.w	8001734 <put_fat+0x1c4>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	429a      	cmp	r2, r3
 8001590:	f080 80d0 	bcs.w	8001734 <put_fat+0x1c4>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d073      	beq.n	8001684 <put_fat+0x114>
 800159c:	2b03      	cmp	r3, #3
 800159e:	f000 8091 	beq.w	80016c4 <put_fat+0x154>
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	f040 80c6 	bne.w	8001734 <put_fat+0x1c4>
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4413      	add	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	0a5b      	lsrs	r3, r3, #9
 80015be:	4413      	add	r3, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f7ff fe75 	bl	80012b2 <move_window>
 80015c8:	4603      	mov	r3, r0
 80015ca:	77fb      	strb	r3, [r7, #31]
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f040 80a9 	bne.w	8001726 <put_fat+0x1b6>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	61b9      	str	r1, [r7, #24]
 80015e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e4:	4413      	add	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00d      	beq.n	800160e <put_fat+0x9e>
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	b25a      	sxtb	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	b25b      	sxtb	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b25b      	sxtb	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	e001      	b.n	8001612 <put_fat+0xa2>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	7013      	strb	r3, [r2, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2201      	movs	r2, #1
 800161a:	70da      	strb	r2, [r3, #3]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a1a      	ldr	r2, [r3, #32]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	0a5b      	lsrs	r3, r3, #9
 8001624:	4413      	add	r3, r2
 8001626:	4619      	mov	r1, r3
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fe42 	bl	80012b2 <move_window>
 800162e:	4603      	mov	r3, r0
 8001630:	77fb      	strb	r3, [r7, #31]
 8001632:	7ffb      	ldrb	r3, [r7, #31]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d178      	bne.n	800172a <put_fat+0x1ba>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001644:	4413      	add	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <put_fat+0xea>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	b2db      	uxtb	r3, r3
 8001658:	e00e      	b.n	8001678 <put_fat+0x108>
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b25b      	sxtb	r3, r3
 8001660:	f023 030f 	bic.w	r3, r3, #15
 8001664:	b25a      	sxtb	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	b25b      	sxtb	r3, r3
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	b25b      	sxtb	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	7013      	strb	r3, [r2, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2201      	movs	r2, #1
 8001680:	70da      	strb	r2, [r3, #3]
 8001682:	e057      	b.n	8001734 <put_fat+0x1c4>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6a1a      	ldr	r2, [r3, #32]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	4413      	add	r3, r2
 800168e:	4619      	mov	r1, r3
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff fe0e 	bl	80012b2 <move_window>
 8001696:	4603      	mov	r3, r0
 8001698:	77fb      	strb	r3, [r7, #31]
 800169a:	7ffb      	ldrb	r3, [r7, #31]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d146      	bne.n	800172e <put_fat+0x1be>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80016ae:	4413      	add	r3, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	b292      	uxth	r2, r2
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fcb1 	bl	800101e <st_word>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2201      	movs	r2, #1
 80016c0:	70da      	strb	r2, [r3, #3]
 80016c2:	e037      	b.n	8001734 <put_fat+0x1c4>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	09db      	lsrs	r3, r3, #7
 80016cc:	4413      	add	r3, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff fdee 	bl	80012b2 <move_window>
 80016d6:	4603      	mov	r3, r0
 80016d8:	77fb      	strb	r3, [r7, #31]
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d128      	bne.n	8001732 <put_fat+0x1c2>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80016f4:	4413      	add	r3, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fc6e 	bl	8000fd8 <ld_dword>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001702:	4323      	orrs	r3, r4
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001714:	4413      	add	r3, r2
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fc9b 	bl	8001054 <st_dword>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2201      	movs	r2, #1
 8001722:	70da      	strb	r2, [r3, #3]
 8001724:	e006      	b.n	8001734 <put_fat+0x1c4>
 8001726:	bf00      	nop
 8001728:	e004      	b.n	8001734 <put_fat+0x1c4>
 800172a:	bf00      	nop
 800172c:	e002      	b.n	8001734 <put_fat+0x1c4>
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <put_fat+0x1c4>
 8001732:	bf00      	nop
 8001734:	7ffb      	ldrb	r3, [r7, #31]
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd90      	pop	{r4, r7, pc}

0800173e <remove_chain>:
 800173e:	b580      	push	{r7, lr}
 8001740:	b088      	sub	sp, #32
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	2300      	movs	r3, #0
 800174c:	77fb      	strb	r3, [r7, #31]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d904      	bls.n	8001764 <remove_chain+0x26>
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	429a      	cmp	r2, r3
 8001762:	d301      	bcc.n	8001768 <remove_chain+0x2a>
 8001764:	2302      	movs	r3, #2
 8001766:	e04b      	b.n	8001800 <remove_chain+0xc2>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00c      	beq.n	8001788 <remove_chain+0x4a>
 800176e:	f04f 32ff 	mov.w	r2, #4294967295
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	69b8      	ldr	r0, [r7, #24]
 8001776:	f7ff fefb 	bl	8001570 <put_fat>
 800177a:	4603      	mov	r3, r0
 800177c:	77fb      	strb	r3, [r7, #31]
 800177e:	7ffb      	ldrb	r3, [r7, #31]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <remove_chain+0x4a>
 8001784:	7ffb      	ldrb	r3, [r7, #31]
 8001786:	e03b      	b.n	8001800 <remove_chain+0xc2>
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f7ff fe4b 	bl	8001426 <get_fat>
 8001790:	6178      	str	r0, [r7, #20]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d031      	beq.n	80017fc <remove_chain+0xbe>
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <remove_chain+0x64>
 800179e:	2302      	movs	r3, #2
 80017a0:	e02e      	b.n	8001800 <remove_chain+0xc2>
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a8:	d101      	bne.n	80017ae <remove_chain+0x70>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e028      	b.n	8001800 <remove_chain+0xc2>
 80017ae:	2200      	movs	r2, #0
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	69b8      	ldr	r0, [r7, #24]
 80017b4:	f7ff fedc 	bl	8001570 <put_fat>
 80017b8:	4603      	mov	r3, r0
 80017ba:	77fb      	strb	r3, [r7, #31]
 80017bc:	7ffb      	ldrb	r3, [r7, #31]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <remove_chain+0x88>
 80017c2:	7ffb      	ldrb	r3, [r7, #31]
 80017c4:	e01c      	b.n	8001800 <remove_chain+0xc2>
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	3b02      	subs	r3, #2
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d20b      	bcs.n	80017ec <remove_chain+0xae>
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	791b      	ldrb	r3, [r3, #4]
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	711a      	strb	r2, [r3, #4]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3c6      	bcc.n	8001788 <remove_chain+0x4a>
 80017fa:	e000      	b.n	80017fe <remove_chain+0xc0>
 80017fc:	bf00      	nop
 80017fe:	2300      	movs	r3, #0
 8001800:	4618      	mov	r0, r3
 8001802:	3720      	adds	r7, #32
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <create_chain>:
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10d      	bne.n	800183a <create_chain+0x32>
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <create_chain+0x2c>
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	429a      	cmp	r2, r3
 8001832:	d31b      	bcc.n	800186c <create_chain+0x64>
 8001834:	2301      	movs	r3, #1
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	e018      	b.n	800186c <create_chain+0x64>
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fdf2 	bl	8001426 <get_fat>
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d801      	bhi.n	800184e <create_chain+0x46>
 800184a:	2301      	movs	r3, #1
 800184c:	e0a9      	b.n	80019a2 <create_chain+0x19a>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001854:	d101      	bne.n	800185a <create_chain+0x52>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	e0a3      	b.n	80019a2 <create_chain+0x19a>
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d201      	bcs.n	8001868 <create_chain+0x60>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	e09c      	b.n	80019a2 <create_chain+0x19a>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <create_chain+0x70>
 8001874:	2300      	movs	r3, #0
 8001876:	e094      	b.n	80019a2 <create_chain+0x19a>
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d129      	bne.n	80018d8 <create_chain+0xd0>
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	3301      	adds	r3, #1
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	429a      	cmp	r2, r3
 8001892:	d301      	bcc.n	8001898 <create_chain+0x90>
 8001894:	2302      	movs	r3, #2
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	69f9      	ldr	r1, [r7, #28]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fdc3 	bl	8001426 <get_fat>
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d003      	beq.n	80018b0 <create_chain+0xa8>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ae:	d101      	bne.n	80018b4 <create_chain+0xac>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	e076      	b.n	80019a2 <create_chain+0x19a>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00e      	beq.n	80018d8 <create_chain+0xd0>
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d906      	bls.n	80018d4 <create_chain+0xcc>
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d201      	bcs.n	80018d4 <create_chain+0xcc>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d129      	bne.n	8001932 <create_chain+0x12a>
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3301      	adds	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d307      	bcc.n	8001902 <create_chain+0xfa>
 80018f2:	2302      	movs	r3, #2
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d901      	bls.n	8001902 <create_chain+0xfa>
 80018fe:	2300      	movs	r3, #0
 8001900:	e04f      	b.n	80019a2 <create_chain+0x19a>
 8001902:	69f9      	ldr	r1, [r7, #28]
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fd8e 	bl	8001426 <get_fat>
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00e      	beq.n	8001930 <create_chain+0x128>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d003      	beq.n	8001920 <create_chain+0x118>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191e:	d101      	bne.n	8001924 <create_chain+0x11c>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	e03e      	b.n	80019a2 <create_chain+0x19a>
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	429a      	cmp	r2, r3
 800192a:	d1da      	bne.n	80018e2 <create_chain+0xda>
 800192c:	2300      	movs	r3, #0
 800192e:	e038      	b.n	80019a2 <create_chain+0x19a>
 8001930:	bf00      	nop
 8001932:	f04f 32ff 	mov.w	r2, #4294967295
 8001936:	69f9      	ldr	r1, [r7, #28]
 8001938:	6938      	ldr	r0, [r7, #16]
 800193a:	f7ff fe19 	bl	8001570 <put_fat>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d109      	bne.n	800195c <create_chain+0x154>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <create_chain+0x154>
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	6938      	ldr	r0, [r7, #16]
 8001954:	f7ff fe0c 	bl	8001570 <put_fat>
 8001958:	4603      	mov	r3, r0
 800195a:	75fb      	strb	r3, [r7, #23]
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d116      	bne.n	8001990 <create_chain+0x188>
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	3b02      	subs	r3, #2
 8001972:	429a      	cmp	r2, r3
 8001974:	d804      	bhi.n	8001980 <create_chain+0x178>
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	1e5a      	subs	r2, r3, #1
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	791b      	ldrb	r3, [r3, #4]
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	b2da      	uxtb	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	711a      	strb	r2, [r3, #4]
 800198e:	e007      	b.n	80019a0 <create_chain+0x198>
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d102      	bne.n	800199c <create_chain+0x194>
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e000      	b.n	800199e <create_chain+0x196>
 800199c:	2301      	movs	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	4618      	mov	r0, r3
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <dir_clear>:
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fc40 	bl	800123a <sync_window>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <dir_clear+0x1a>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e036      	b.n	8001a32 <dir_clear+0x88>
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fd0e 	bl	80013e8 <clst2sect>
 80019cc:	6138      	str	r0, [r7, #16]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3330      	adds	r3, #48	; 0x30
 80019d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fb85 	bl	80010ee <mem_set>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3330      	adds	r3, #48	; 0x30
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	2301      	movs	r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e003      	b.n	80019fc <dir_clear+0x52>
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	4413      	add	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	895b      	ldrh	r3, [r3, #10]
 8001a00:	461a      	mov	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d20b      	bcs.n	8001a20 <dir_clear+0x76>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7858      	ldrb	r0, [r3, #1]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	441a      	add	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	f7ff f87b 	bl	8000b10 <disk_write>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0e9      	beq.n	80019f4 <dir_clear+0x4a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	895b      	ldrh	r3, [r3, #10]
 8001a24:	461a      	mov	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <dir_sdi>:
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a50:	d204      	bcs.n	8001a5c <dir_sdi+0x22>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <dir_sdi+0x26>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e063      	b.n	8001b28 <dir_sdi+0xee>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <dir_sdi+0x46>
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d902      	bls.n	8001a80 <dir_sdi+0x46>
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <dir_sdi+0x66>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	8912      	ldrh	r2, [r2, #8]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d301      	bcc.n	8001a96 <dir_sdi+0x5c>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e048      	b.n	8001b28 <dir_sdi+0xee>
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	619a      	str	r2, [r3, #24]
 8001a9e:	e029      	b.n	8001af4 <dir_sdi+0xba>
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	895b      	ldrh	r3, [r3, #10]
 8001aa4:	025b      	lsls	r3, r3, #9
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e019      	b.n	8001ade <dir_sdi+0xa4>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6979      	ldr	r1, [r7, #20]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fcb9 	bl	8001426 <get_fat>
 8001ab4:	6178      	str	r0, [r7, #20]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d101      	bne.n	8001ac2 <dir_sdi+0x88>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e032      	b.n	8001b28 <dir_sdi+0xee>
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d904      	bls.n	8001ad2 <dir_sdi+0x98>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d301      	bcc.n	8001ad6 <dir_sdi+0x9c>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e028      	b.n	8001b28 <dir_sdi+0xee>
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d2e1      	bcs.n	8001aaa <dir_sdi+0x70>
 8001ae6:	6979      	ldr	r1, [r7, #20]
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	f7ff fc7d 	bl	80013e8 <clst2sect>
 8001aee:	4602      	mov	r2, r0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	615a      	str	r2, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <dir_sdi+0xcc>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e010      	b.n	8001b28 <dir_sdi+0xee>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	0a5b      	lsrs	r3, r3, #9
 8001b0e:	441a      	add	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b20:	441a      	add	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	61da      	str	r2, [r3, #28]
 8001b26:	2300      	movs	r3, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <dir_next>:
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	3320      	adds	r3, #32
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b4e:	d302      	bcc.n	8001b56 <dir_next+0x26>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <dir_next+0x32>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e078      	b.n	8001c54 <dir_next+0x124>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d166      	bne.n	8001c3a <dir_next+0x10a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10a      	bne.n	8001b94 <dir_next+0x64>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	095b      	lsrs	r3, r3, #5
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	8912      	ldrh	r2, [r2, #8]
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d357      	bcc.n	8001c3a <dir_next+0x10a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
 8001b90:	2304      	movs	r3, #4
 8001b92:	e05f      	b.n	8001c54 <dir_next+0x124>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	0a5b      	lsrs	r3, r3, #9
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	8952      	ldrh	r2, [r2, #10]
 8001b9c:	3a01      	subs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d14a      	bne.n	8001c3a <dir_next+0x10a>
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f7ff fc3a 	bl	8001426 <get_fat>
 8001bb2:	6178      	str	r0, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d801      	bhi.n	8001bbe <dir_next+0x8e>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e04a      	b.n	8001c54 <dir_next+0x124>
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d101      	bne.n	8001bca <dir_next+0x9a>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e044      	b.n	8001c54 <dir_next+0x124>
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d328      	bcc.n	8001c26 <dir_next+0xf6>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d104      	bne.n	8001be4 <dir_next+0xb4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
 8001be0:	2304      	movs	r3, #4
 8001be2:	e037      	b.n	8001c54 <dir_next+0x124>
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	4619      	mov	r1, r3
 8001bec:	4610      	mov	r0, r2
 8001bee:	f7ff fe0b 	bl	8001808 <create_chain>
 8001bf2:	6178      	str	r0, [r7, #20]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <dir_next+0xce>
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	e02a      	b.n	8001c54 <dir_next+0x124>
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <dir_next+0xd8>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e025      	b.n	8001c54 <dir_next+0x124>
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0e:	d101      	bne.n	8001c14 <dir_next+0xe4>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e01f      	b.n	8001c54 <dir_next+0x124>
 8001c14:	6979      	ldr	r1, [r7, #20]
 8001c16:	6938      	ldr	r0, [r7, #16]
 8001c18:	f7ff fec7 	bl	80019aa <dir_clear>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <dir_next+0xf6>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e016      	b.n	8001c54 <dir_next+0x124>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	615a      	str	r2, [r3, #20]
 8001c2c:	6979      	ldr	r1, [r7, #20]
 8001c2e:	6938      	ldr	r0, [r7, #16]
 8001c30:	f7ff fbda 	bl	80013e8 <clst2sect>
 8001c34:	4602      	mov	r2, r0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c4c:	441a      	add	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	61da      	str	r2, [r3, #28]
 8001c52:	2300      	movs	r3, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <dir_alloc>:
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fee3 	bl	8001a3a <dir_sdi>
 8001c74:	4603      	mov	r3, r0
 8001c76:	75fb      	strb	r3, [r7, #23]
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d12b      	bne.n	8001cd6 <dir_alloc+0x7a>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	4619      	mov	r1, r3
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fb12 	bl	80012b2 <move_window>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	75fb      	strb	r3, [r7, #23]
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11d      	bne.n	8001cd4 <dir_alloc+0x78>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2be5      	cmp	r3, #229	; 0xe5
 8001ca0:	d004      	beq.n	8001cac <dir_alloc+0x50>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <dir_alloc+0x60>
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d102      	bne.n	8001cc0 <dir_alloc+0x64>
 8001cba:	e00c      	b.n	8001cd6 <dir_alloc+0x7a>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ff34 	bl	8001b30 <dir_next>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	75fb      	strb	r3, [r7, #23]
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0d7      	beq.n	8001c82 <dir_alloc+0x26>
 8001cd2:	e000      	b.n	8001cd6 <dir_alloc+0x7a>
 8001cd4:	bf00      	nop
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d101      	bne.n	8001ce0 <dir_alloc+0x84>
 8001cdc:	2307      	movs	r3, #7
 8001cde:	75fb      	strb	r3, [r7, #23]
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <ld_clust>:
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	331a      	adds	r3, #26
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f955 	bl	8000fa8 <ld_word>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d109      	bne.n	8001d1e <ld_clust+0x34>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	3314      	adds	r3, #20
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f94a 	bl	8000fa8 <ld_word>
 8001d14:	4603      	mov	r3, r0
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <st_clust>:
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	331a      	adds	r3, #26
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	b292      	uxth	r2, r2
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f96d 	bl	800101e <st_word>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d109      	bne.n	8001d60 <st_clust+0x38>
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f103 0214 	add.w	r2, r3, #20
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	0c1b      	lsrs	r3, r3, #16
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f7ff f95f 	bl	800101e <st_word>
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <dir_read>:
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	2304      	movs	r3, #4
 8001d74:	75fb      	strb	r3, [r7, #23]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e03c      	b.n	8001df8 <dir_read+0x90>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	4619      	mov	r1, r3
 8001d84:	6938      	ldr	r0, [r7, #16]
 8001d86:	f7ff fa94 	bl	80012b2 <move_window>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	75fb      	strb	r3, [r7, #23]
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d136      	bne.n	8001e02 <dir_read+0x9a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <dir_read+0x40>
 8001da2:	2304      	movs	r3, #4
 8001da4:	75fb      	strb	r3, [r7, #23]
 8001da6:	e031      	b.n	8001e0c <dir_read+0xa4>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	330b      	adds	r3, #11
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db4:	73bb      	strb	r3, [r7, #14]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7bba      	ldrb	r2, [r7, #14]
 8001dba:	719a      	strb	r2, [r3, #6]
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2be5      	cmp	r3, #229	; 0xe5
 8001dc0:	d011      	beq.n	8001de6 <dir_read+0x7e>
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8001dc6:	d00e      	beq.n	8001de6 <dir_read+0x7e>
 8001dc8:	7bbb      	ldrb	r3, [r7, #14]
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	d00b      	beq.n	8001de6 <dir_read+0x7e>
 8001dce:	7bbb      	ldrb	r3, [r7, #14]
 8001dd0:	f023 0320 	bic.w	r3, r3, #32
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00f      	beq.n	8001e06 <dir_read+0x9e>
 8001de6:	2100      	movs	r1, #0
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fea1 	bl	8001b30 <dir_next>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d108      	bne.n	8001e0a <dir_read+0xa2>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1be      	bne.n	8001d7e <dir_read+0x16>
 8001e00:	e004      	b.n	8001e0c <dir_read+0xa4>
 8001e02:	bf00      	nop
 8001e04:	e002      	b.n	8001e0c <dir_read+0xa4>
 8001e06:	bf00      	nop
 8001e08:	e000      	b.n	8001e0c <dir_read+0xa4>
 8001e0a:	bf00      	nop
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <dir_read+0xb0>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <dir_find>:
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	2100      	movs	r1, #0
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fe01 	bl	8001a3a <dir_sdi>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	75fb      	strb	r3, [r7, #23]
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <dir_find+0x24>
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	e03e      	b.n	8001ec4 <dir_find+0xa2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6938      	ldr	r0, [r7, #16]
 8001e4e:	f7ff fa30 	bl	80012b2 <move_window>
 8001e52:	4603      	mov	r3, r0
 8001e54:	75fb      	strb	r3, [r7, #23]
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d12f      	bne.n	8001ebc <dir_find+0x9a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <dir_find+0x4e>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	75fb      	strb	r3, [r7, #23]
 8001e6e:	e028      	b.n	8001ec2 <dir_find+0xa0>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	330b      	adds	r3, #11
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	719a      	strb	r2, [r3, #6]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	330b      	adds	r3, #11
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <dir_find+0x86>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69d8      	ldr	r0, [r3, #28]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3320      	adds	r3, #32
 8001e9a:	220b      	movs	r2, #11
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f7ff f940 	bl	8001122 <mem_cmp>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00b      	beq.n	8001ec0 <dir_find+0x9e>
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fe40 	bl	8001b30 <dir_next>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	75fb      	strb	r3, [r7, #23]
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0c5      	beq.n	8001e46 <dir_find+0x24>
 8001eba:	e002      	b.n	8001ec2 <dir_find+0xa0>
 8001ebc:	bf00      	nop
 8001ebe:	e000      	b.n	8001ec2 <dir_find+0xa0>
 8001ec0:	bf00      	nop
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <dir_register>:
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	2101      	movs	r1, #1
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff febd 	bl	8001c5c <dir_alloc>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d11c      	bne.n	8001f26 <dir_register+0x5a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	68b8      	ldr	r0, [r7, #8]
 8001ef4:	f7ff f9dd 	bl	80012b2 <move_window>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d111      	bne.n	8001f26 <dir_register+0x5a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	2220      	movs	r2, #32
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f8ef 	bl	80010ee <mem_set>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69d8      	ldr	r0, [r3, #28]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3320      	adds	r3, #32
 8001f18:	220b      	movs	r2, #11
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7ff f8c6 	bl	80010ac <mem_cpy>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2201      	movs	r2, #1
 8001f24:	70da      	strb	r2, [r3, #3]
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <get_fileinfo>:
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	725a      	strb	r2, [r3, #9]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d052      	beq.n	8001fee <get_fileinfo+0xbe>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e021      	b.n	8001f96 <get_fileinfo+0x66>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	1c59      	adds	r1, r3, #1
 8001f5a:	6179      	str	r1, [r7, #20]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	73fb      	strb	r3, [r7, #15]
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d100      	bne.n	8001f6a <get_fileinfo+0x3a>
 8001f68:	e015      	b.n	8001f96 <get_fileinfo+0x66>
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d101      	bne.n	8001f74 <get_fileinfo+0x44>
 8001f70:	23e5      	movs	r3, #229	; 0xe5
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b09      	cmp	r3, #9
 8001f78:	d106      	bne.n	8001f88 <get_fileinfo+0x58>
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	613a      	str	r2, [r7, #16]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	222e      	movs	r2, #46	; 0x2e
 8001f86:	725a      	strb	r2, [r3, #9]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	613a      	str	r2, [r7, #16]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	725a      	strb	r2, [r3, #9]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b0a      	cmp	r3, #10
 8001f9a:	d9da      	bls.n	8001f52 <get_fileinfo+0x22>
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3309      	adds	r3, #9
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	7ada      	ldrb	r2, [r3, #11]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	721a      	strb	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	331c      	adds	r3, #28
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff f80d 	bl	8000fd8 <ld_dword>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	3316      	adds	r3, #22
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe ffec 	bl	8000fa8 <ld_word>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	80da      	strh	r2, [r3, #6]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	3318      	adds	r3, #24
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe ffe2 	bl	8000fa8 <ld_word>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	809a      	strh	r2, [r3, #4]
 8001fec:	e000      	b.n	8001ff0 <get_fileinfo+0xc0>
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <create_name>:
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3320      	adds	r3, #32
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	220b      	movs	r2, #11
 8002010:	2120      	movs	r1, #32
 8002012:	6938      	ldr	r0, [r7, #16]
 8002014:	f7ff f86b 	bl	80010ee <mem_set>
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	2308      	movs	r3, #8
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	61fa      	str	r2, [r7, #28]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002038:	2b20      	cmp	r3, #32
 800203a:	d97c      	bls.n	8002136 <create_name+0x13e>
 800203c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002040:	2b2f      	cmp	r3, #47	; 0x2f
 8002042:	d007      	beq.n	8002054 <create_name+0x5c>
 8002044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002048:	2b5c      	cmp	r3, #92	; 0x5c
 800204a:	d110      	bne.n	800206e <create_name+0x76>
 800204c:	e002      	b.n	8002054 <create_name+0x5c>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3301      	adds	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b2f      	cmp	r3, #47	; 0x2f
 800205e:	d0f6      	beq.n	800204e <create_name+0x56>
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4413      	add	r3, r2
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b5c      	cmp	r3, #92	; 0x5c
 800206a:	d0f0      	beq.n	800204e <create_name+0x56>
 800206c:	e064      	b.n	8002138 <create_name+0x140>
 800206e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002072:	2b2e      	cmp	r3, #46	; 0x2e
 8002074:	d003      	beq.n	800207e <create_name+0x86>
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	429a      	cmp	r2, r3
 800207c:	d30d      	bcc.n	800209a <create_name+0xa2>
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2b0b      	cmp	r3, #11
 8002082:	d003      	beq.n	800208c <create_name+0x94>
 8002084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002088:	2b2e      	cmp	r3, #46	; 0x2e
 800208a:	d001      	beq.n	8002090 <create_name+0x98>
 800208c:	2306      	movs	r3, #6
 800208e:	e06f      	b.n	8002170 <create_name+0x178>
 8002090:	2308      	movs	r3, #8
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	230b      	movs	r3, #11
 8002096:	623b      	str	r3, [r7, #32]
 8002098:	e04c      	b.n	8002134 <create_name+0x13c>
 800209a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f881 	bl	80011a6 <dbc_1st>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d024      	beq.n	80020f4 <create_name+0xfc>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	61fa      	str	r2, [r7, #28]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4413      	add	r3, r2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff f893 	bl	80011e6 <dbc_2nd>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <create_name+0xd8>
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d301      	bcc.n	80020d4 <create_name+0xdc>
 80020d0:	2306      	movs	r3, #6
 80020d2:	e04d      	b.n	8002170 <create_name+0x178>
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	61ba      	str	r2, [r7, #24]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	61ba      	str	r2, [r7, #24]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e797      	b.n	8002024 <create_name+0x2c>
 80020f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020f8:	4619      	mov	r1, r3
 80020fa:	481f      	ldr	r0, [pc, #124]	; (8002178 <create_name+0x180>)
 80020fc:	f7ff f838 	bl	8001170 <chk_chr>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <create_name+0x112>
 8002106:	2306      	movs	r3, #6
 8002108:	e032      	b.n	8002170 <create_name+0x178>
 800210a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800210e:	2b60      	cmp	r3, #96	; 0x60
 8002110:	d908      	bls.n	8002124 <create_name+0x12c>
 8002112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002116:	2b7a      	cmp	r3, #122	; 0x7a
 8002118:	d804      	bhi.n	8002124 <create_name+0x12c>
 800211a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800211e:	3b20      	subs	r3, #32
 8002120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	61ba      	str	r2, [r7, #24]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	e776      	b.n	8002024 <create_name+0x2c>
 8002136:	bf00      	nop
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	441a      	add	r2, r3
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <create_name+0x154>
 8002148:	2306      	movs	r3, #6
 800214a:	e011      	b.n	8002170 <create_name+0x178>
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2be5      	cmp	r3, #229	; 0xe5
 8002152:	d102      	bne.n	800215a <create_name+0x162>
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2205      	movs	r2, #5
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800215e:	2b20      	cmp	r3, #32
 8002160:	d801      	bhi.n	8002166 <create_name+0x16e>
 8002162:	2204      	movs	r2, #4
 8002164:	e000      	b.n	8002168 <create_name+0x170>
 8002166:	2200      	movs	r2, #0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	330b      	adds	r3, #11
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	4618      	mov	r0, r3
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	08007fb0 	.word	0x08007fb0

0800217c <follow_path>:
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	e002      	b.n	8002194 <follow_path+0x18>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b2f      	cmp	r3, #47	; 0x2f
 800219a:	d0f8      	beq.n	800218e <follow_path+0x12>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b5c      	cmp	r3, #92	; 0x5c
 80021a2:	d0f4      	beq.n	800218e <follow_path+0x12>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b1f      	cmp	r3, #31
 80021b0:	d80a      	bhi.n	80021c8 <follow_path+0x4c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 80021ba:	2100      	movs	r1, #0
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fc3c 	bl	8001a3a <dir_sdi>
 80021c2:	4603      	mov	r3, r0
 80021c4:	75fb      	strb	r3, [r7, #23]
 80021c6:	e043      	b.n	8002250 <follow_path+0xd4>
 80021c8:	463b      	mov	r3, r7
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff13 	bl	8001ff8 <create_name>
 80021d2:	4603      	mov	r3, r0
 80021d4:	75fb      	strb	r3, [r7, #23]
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d134      	bne.n	8002246 <follow_path+0xca>
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fe20 	bl	8001e22 <dir_find>
 80021e2:	4603      	mov	r3, r0
 80021e4:	75fb      	strb	r3, [r7, #23]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <follow_path+0x8e>
 80021f4:	7dfb      	ldrb	r3, [r7, #23]
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d127      	bne.n	800224a <follow_path+0xce>
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d122      	bne.n	800224a <follow_path+0xce>
 8002204:	2305      	movs	r3, #5
 8002206:	75fb      	strb	r3, [r7, #23]
 8002208:	e01f      	b.n	800224a <follow_path+0xce>
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d11c      	bne.n	800224e <follow_path+0xd2>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	799b      	ldrb	r3, [r3, #6]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <follow_path+0xaa>
 8002220:	2305      	movs	r3, #5
 8002222:	75fb      	strb	r3, [r7, #23]
 8002224:	e014      	b.n	8002250 <follow_path+0xd4>
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002234:	4413      	add	r3, r2
 8002236:	4619      	mov	r1, r3
 8002238:	6938      	ldr	r0, [r7, #16]
 800223a:	f7ff fd56 	bl	8001cea <ld_clust>
 800223e:	4602      	mov	r2, r0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	e7c0      	b.n	80021c8 <follow_path+0x4c>
 8002246:	bf00      	nop
 8002248:	e002      	b.n	8002250 <follow_path+0xd4>
 800224a:	bf00      	nop
 800224c:	e000      	b.n	8002250 <follow_path+0xd4>
 800224e:	bf00      	nop
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <get_ldnumber>:
 800225a:	b480      	push	{r7}
 800225c:	b089      	sub	sp, #36	; 0x24
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <get_ldnumber+0x22>
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	e02d      	b.n	80022d8 <get_ldnumber+0x7e>
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	61fa      	str	r2, [r7, #28]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	2b20      	cmp	r3, #32
 800228a:	d902      	bls.n	8002292 <get_ldnumber+0x38>
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	2b3a      	cmp	r3, #58	; 0x3a
 8002290:	d1f4      	bne.n	800227c <get_ldnumber+0x22>
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	2b3a      	cmp	r3, #58	; 0x3a
 8002296:	d11c      	bne.n	80022d2 <get_ldnumber+0x78>
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b2f      	cmp	r3, #47	; 0x2f
 80022a2:	d90c      	bls.n	80022be <get_ldnumber+0x64>
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b39      	cmp	r3, #57	; 0x39
 80022aa:	d808      	bhi.n	80022be <get_ldnumber+0x64>
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	3302      	adds	r3, #2
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d103      	bne.n	80022be <get_ldnumber+0x64>
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	3b30      	subs	r3, #48	; 0x30
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	dc04      	bgt.n	80022ce <get_ldnumber+0x74>
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	e002      	b.n	80022d8 <get_ldnumber+0x7e>
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	4618      	mov	r0, r3
 80022da:	3724      	adds	r7, #36	; 0x24
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <check_fs>:
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	70da      	strb	r2, [r3, #3]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f04f 32ff 	mov.w	r2, #4294967295
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80022fc:	6839      	ldr	r1, [r7, #0]
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe ffd7 	bl	80012b2 <move_window>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <check_fs+0x2a>
 800230a:	2304      	movs	r3, #4
 800230c:	e038      	b.n	8002380 <check_fs+0x9c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3330      	adds	r3, #48	; 0x30
 8002312:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe fe46 	bl	8000fa8 <ld_word>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <check_fs+0x48>
 8002328:	2303      	movs	r3, #3
 800232a:	e029      	b.n	8002380 <check_fs+0x9c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002332:	2be9      	cmp	r3, #233	; 0xe9
 8002334:	d009      	beq.n	800234a <check_fs+0x66>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800233c:	2beb      	cmp	r3, #235	; 0xeb
 800233e:	d004      	beq.n	800234a <check_fs+0x66>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002346:	2be8      	cmp	r3, #232	; 0xe8
 8002348:	d119      	bne.n	800237e <check_fs+0x9a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3330      	adds	r3, #48	; 0x30
 800234e:	3336      	adds	r3, #54	; 0x36
 8002350:	2203      	movs	r2, #3
 8002352:	490d      	ldr	r1, [pc, #52]	; (8002388 <check_fs+0xa4>)
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fee4 	bl	8001122 <mem_cmp>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <check_fs+0x80>
 8002360:	2300      	movs	r3, #0
 8002362:	e00d      	b.n	8002380 <check_fs+0x9c>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3330      	adds	r3, #48	; 0x30
 8002368:	3352      	adds	r3, #82	; 0x52
 800236a:	2205      	movs	r2, #5
 800236c:	4907      	ldr	r1, [pc, #28]	; (800238c <check_fs+0xa8>)
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fed7 	bl	8001122 <mem_cmp>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <check_fs+0x9a>
 800237a:	2300      	movs	r3, #0
 800237c:	e000      	b.n	8002380 <check_fs+0x9c>
 800237e:	2302      	movs	r3, #2
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	08007fc0 	.word	0x08007fc0
 800238c:	08007fc4 	.word	0x08007fc4

08002390 <find_volume>:
 8002390:	b580      	push	{r7, lr}
 8002392:	b096      	sub	sp, #88	; 0x58
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff ff58 	bl	800225a <get_ldnumber>
 80023aa:	63f8      	str	r0, [r7, #60]	; 0x3c
 80023ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	da01      	bge.n	80023b6 <find_volume+0x26>
 80023b2:	230b      	movs	r3, #11
 80023b4:	e238      	b.n	8002828 <find_volume+0x498>
 80023b6:	4aa8      	ldr	r2, [pc, #672]	; (8002658 <find_volume+0x2c8>)
 80023b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <find_volume+0x3a>
 80023c6:	230c      	movs	r3, #12
 80023c8:	e22e      	b.n	8002828 <find_volume+0x498>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	71fb      	strb	r3, [r7, #7]
 80023d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01a      	beq.n	8002416 <find_volume+0x86>
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fb13 	bl	8000a10 <disk_status>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10c      	bne.n	8002416 <find_volume+0x86>
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <find_volume+0x82>
 8002402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <find_volume+0x82>
 800240e:	230a      	movs	r3, #10
 8002410:	e20a      	b.n	8002828 <find_volume+0x498>
 8002412:	2300      	movs	r3, #0
 8002414:	e208      	b.n	8002828 <find_volume+0x498>
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241e:	b2da      	uxtb	r2, r3
 8002420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002422:	705a      	strb	r2, [r3, #1]
 8002424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fa07 	bl	800083c <disk_initialize>
 800242e:	4603      	mov	r3, r0
 8002430:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <find_volume+0xb4>
 8002440:	2303      	movs	r3, #3
 8002442:	e1f1      	b.n	8002828 <find_volume+0x498>
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <find_volume+0xca>
 800244a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <find_volume+0xca>
 8002456:	230a      	movs	r3, #10
 8002458:	e1e6      	b.n	8002828 <find_volume+0x498>
 800245a:	2300      	movs	r3, #0
 800245c:	653b      	str	r3, [r7, #80]	; 0x50
 800245e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002462:	f7ff ff3f 	bl	80022e4 <check_fs>
 8002466:	4603      	mov	r3, r0
 8002468:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800246c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002470:	2b02      	cmp	r3, #2
 8002472:	d14b      	bne.n	800250c <find_volume+0x17c>
 8002474:	2300      	movs	r3, #0
 8002476:	643b      	str	r3, [r7, #64]	; 0x40
 8002478:	e01f      	b.n	80024ba <find_volume+0x12a>
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002488:	4413      	add	r3, r2
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	3304      	adds	r3, #4
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <find_volume+0x114>
 8002496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002498:	3308      	adds	r3, #8
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fd9c 	bl	8000fd8 <ld_dword>
 80024a0:	4602      	mov	r2, r0
 80024a2:	e000      	b.n	80024a6 <find_volume+0x116>
 80024a4:	2200      	movs	r2, #0
 80024a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80024ae:	440b      	add	r3, r1
 80024b0:	f843 2c44 	str.w	r2, [r3, #-68]
 80024b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b6:	3301      	adds	r3, #1
 80024b8:	643b      	str	r3, [r7, #64]	; 0x40
 80024ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d9dc      	bls.n	800247a <find_volume+0xea>
 80024c0:	2300      	movs	r3, #0
 80024c2:	643b      	str	r3, [r7, #64]	; 0x40
 80024c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <find_volume+0x140>
 80024ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024cc:	3b01      	subs	r3, #1
 80024ce:	643b      	str	r3, [r7, #64]	; 0x40
 80024d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80024d8:	4413      	add	r3, r2
 80024da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80024de:	653b      	str	r3, [r7, #80]	; 0x50
 80024e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <find_volume+0x162>
 80024e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80024e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80024ea:	f7ff fefb 	bl	80022e4 <check_fs>
 80024ee:	4603      	mov	r3, r0
 80024f0:	e000      	b.n	80024f4 <find_volume+0x164>
 80024f2:	2303      	movs	r3, #3
 80024f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80024f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d905      	bls.n	800250c <find_volume+0x17c>
 8002500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002502:	3301      	adds	r3, #1
 8002504:	643b      	str	r3, [r7, #64]	; 0x40
 8002506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002508:	2b03      	cmp	r3, #3
 800250a:	d9e1      	bls.n	80024d0 <find_volume+0x140>
 800250c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002510:	2b04      	cmp	r3, #4
 8002512:	d101      	bne.n	8002518 <find_volume+0x188>
 8002514:	2301      	movs	r3, #1
 8002516:	e187      	b.n	8002828 <find_volume+0x498>
 8002518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800251c:	2b01      	cmp	r3, #1
 800251e:	d901      	bls.n	8002524 <find_volume+0x194>
 8002520:	230d      	movs	r3, #13
 8002522:	e181      	b.n	8002828 <find_volume+0x498>
 8002524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002526:	3330      	adds	r3, #48	; 0x30
 8002528:	330b      	adds	r3, #11
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fd3c 	bl	8000fa8 <ld_word>
 8002530:	4603      	mov	r3, r0
 8002532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002536:	d001      	beq.n	800253c <find_volume+0x1ac>
 8002538:	230d      	movs	r3, #13
 800253a:	e175      	b.n	8002828 <find_volume+0x498>
 800253c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253e:	3330      	adds	r3, #48	; 0x30
 8002540:	3316      	adds	r3, #22
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fd30 	bl	8000fa8 <ld_word>
 8002548:	4603      	mov	r3, r0
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800254c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <find_volume+0x1d0>
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	3330      	adds	r3, #48	; 0x30
 8002556:	3324      	adds	r3, #36	; 0x24
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fd3d 	bl	8000fd8 <ld_dword>
 800255e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002564:	619a      	str	r2, [r3, #24]
 8002566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002568:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256e:	709a      	strb	r2, [r3, #2]
 8002570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002572:	789b      	ldrb	r3, [r3, #2]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d005      	beq.n	8002584 <find_volume+0x1f4>
 8002578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257a:	789b      	ldrb	r3, [r3, #2]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d001      	beq.n	8002584 <find_volume+0x1f4>
 8002580:	230d      	movs	r3, #13
 8002582:	e151      	b.n	8002828 <find_volume+0x498>
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	789b      	ldrb	r3, [r3, #2]
 8002588:	461a      	mov	r2, r3
 800258a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002598:	b29a      	uxth	r2, r3
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	815a      	strh	r2, [r3, #10]
 800259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a0:	895b      	ldrh	r3, [r3, #10]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <find_volume+0x228>
 80025a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a8:	895b      	ldrh	r3, [r3, #10]
 80025aa:	461a      	mov	r2, r3
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	895b      	ldrh	r3, [r3, #10]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <find_volume+0x22c>
 80025b8:	230d      	movs	r3, #13
 80025ba:	e135      	b.n	8002828 <find_volume+0x498>
 80025bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025be:	3330      	adds	r3, #48	; 0x30
 80025c0:	3311      	adds	r3, #17
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fcf0 	bl	8000fa8 <ld_word>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ce:	811a      	strh	r2, [r3, #8]
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	891b      	ldrh	r3, [r3, #8]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <find_volume+0x252>
 80025de:	230d      	movs	r3, #13
 80025e0:	e122      	b.n	8002828 <find_volume+0x498>
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	3330      	adds	r3, #48	; 0x30
 80025e6:	3313      	adds	r3, #19
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fcdd 	bl	8000fa8 <ld_word>
 80025ee:	4603      	mov	r3, r0
 80025f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80025f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <find_volume+0x276>
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	3330      	adds	r3, #48	; 0x30
 80025fc:	3320      	adds	r3, #32
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fcea 	bl	8000fd8 <ld_dword>
 8002604:	64b8      	str	r0, [r7, #72]	; 0x48
 8002606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002608:	3330      	adds	r3, #48	; 0x30
 800260a:	330e      	adds	r3, #14
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fccb 	bl	8000fa8 <ld_word>
 8002612:	4603      	mov	r3, r0
 8002614:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002616:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <find_volume+0x290>
 800261c:	230d      	movs	r3, #13
 800261e:	e103      	b.n	8002828 <find_volume+0x498>
 8002620:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002624:	4413      	add	r3, r2
 8002626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002628:	8912      	ldrh	r2, [r2, #8]
 800262a:	0912      	lsrs	r2, r2, #4
 800262c:	b292      	uxth	r2, r2
 800262e:	4413      	add	r3, r2
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
 8002632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	429a      	cmp	r2, r3
 8002638:	d201      	bcs.n	800263e <find_volume+0x2ae>
 800263a:	230d      	movs	r3, #13
 800263c:	e0f4      	b.n	8002828 <find_volume+0x498>
 800263e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002646:	8952      	ldrh	r2, [r2, #10]
 8002648:	fbb3 f3f2 	udiv	r3, r3, r2
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <find_volume+0x2cc>
 8002654:	230d      	movs	r3, #13
 8002656:	e0e7      	b.n	8002828 <find_volume+0x498>
 8002658:	2000009c 	.word	0x2000009c
 800265c:	2300      	movs	r3, #0
 800265e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	4a72      	ldr	r2, [pc, #456]	; (8002830 <find_volume+0x4a0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d802      	bhi.n	8002670 <find_volume+0x2e0>
 800266a:	2303      	movs	r3, #3
 800266c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002676:	4293      	cmp	r3, r2
 8002678:	d802      	bhi.n	8002680 <find_volume+0x2f0>
 800267a:	2302      	movs	r3, #2
 800267c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002686:	4293      	cmp	r3, r2
 8002688:	d802      	bhi.n	8002690 <find_volume+0x300>
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <find_volume+0x30c>
 8002698:	230d      	movs	r3, #13
 800269a:	e0c5      	b.n	8002828 <find_volume+0x498>
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	1c9a      	adds	r2, r3, #2
 80026a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a2:	615a      	str	r2, [r3, #20]
 80026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026a8:	61da      	str	r2, [r3, #28]
 80026aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80026ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ae:	441a      	add	r2, r3
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	621a      	str	r2, [r3, #32]
 80026b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	441a      	add	r2, r3
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	629a      	str	r2, [r3, #40]	; 0x28
 80026be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d11e      	bne.n	8002704 <find_volume+0x374>
 80026c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c8:	3330      	adds	r3, #48	; 0x30
 80026ca:	332a      	adds	r3, #42	; 0x2a
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fc6b 	bl	8000fa8 <ld_word>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <find_volume+0x34c>
 80026d8:	230d      	movs	r3, #13
 80026da:	e0a5      	b.n	8002828 <find_volume+0x498>
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	891b      	ldrh	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <find_volume+0x358>
 80026e4:	230d      	movs	r3, #13
 80026e6:	e09f      	b.n	8002828 <find_volume+0x498>
 80026e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ea:	3330      	adds	r3, #48	; 0x30
 80026ec:	332c      	adds	r3, #44	; 0x2c
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fc72 	bl	8000fd8 <ld_dword>
 80026f4:	4602      	mov	r2, r0
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
 80026fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	647b      	str	r3, [r7, #68]	; 0x44
 8002702:	e01f      	b.n	8002744 <find_volume+0x3b4>
 8002704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002706:	891b      	ldrh	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <find_volume+0x380>
 800270c:	230d      	movs	r3, #13
 800270e:	e08b      	b.n	8002828 <find_volume+0x498>
 8002710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002712:	6a1a      	ldr	r2, [r3, #32]
 8002714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002716:	441a      	add	r2, r3
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
 800271c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002720:	2b02      	cmp	r3, #2
 8002722:	d103      	bne.n	800272c <find_volume+0x39c>
 8002724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	e00a      	b.n	8002742 <find_volume+0x3b2>
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	085a      	lsrs	r2, r3, #1
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	647b      	str	r3, [r7, #68]	; 0x44
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	699a      	ldr	r2, [r3, #24]
 8002748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800274a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800274e:	0a5b      	lsrs	r3, r3, #9
 8002750:	429a      	cmp	r2, r3
 8002752:	d201      	bcs.n	8002758 <find_volume+0x3c8>
 8002754:	230d      	movs	r3, #13
 8002756:	e067      	b.n	8002828 <find_volume+0x498>
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	f04f 32ff 	mov.w	r2, #4294967295
 800275e:	611a      	str	r2, [r3, #16]
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	60da      	str	r2, [r3, #12]
 8002768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	711a      	strb	r2, [r3, #4]
 800276e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002772:	2b03      	cmp	r3, #3
 8002774:	d149      	bne.n	800280a <find_volume+0x47a>
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	3330      	adds	r3, #48	; 0x30
 800277a:	3330      	adds	r3, #48	; 0x30
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fc13 	bl	8000fa8 <ld_word>
 8002782:	4603      	mov	r3, r0
 8002784:	2b01      	cmp	r3, #1
 8002786:	d140      	bne.n	800280a <find_volume+0x47a>
 8002788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278a:	3301      	adds	r3, #1
 800278c:	4619      	mov	r1, r3
 800278e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002790:	f7fe fd8f 	bl	80012b2 <move_window>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d137      	bne.n	800280a <find_volume+0x47a>
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	2200      	movs	r2, #0
 800279e:	711a      	strb	r2, [r3, #4]
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	3330      	adds	r3, #48	; 0x30
 80027a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fbfd 	bl	8000fa8 <ld_word>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d127      	bne.n	800280a <find_volume+0x47a>
 80027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027bc:	3330      	adds	r3, #48	; 0x30
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fc0a 	bl	8000fd8 <ld_dword>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <find_volume+0x4a4>)
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d11e      	bne.n	800280a <find_volume+0x47a>
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	3330      	adds	r3, #48	; 0x30
 80027d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fbff 	bl	8000fd8 <ld_dword>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b16      	ldr	r3, [pc, #88]	; (8002838 <find_volume+0x4a8>)
 80027de:	429a      	cmp	r2, r3
 80027e0:	d113      	bne.n	800280a <find_volume+0x47a>
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	3330      	adds	r3, #48	; 0x30
 80027e6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fbf4 	bl	8000fd8 <ld_dword>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	611a      	str	r2, [r3, #16]
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f8:	3330      	adds	r3, #48	; 0x30
 80027fa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fbea 	bl	8000fd8 <ld_dword>
 8002804:	4602      	mov	r2, r0
 8002806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <find_volume+0x4ac>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <find_volume+0x4ac>)
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <find_volume+0x4ac>)
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	80da      	strh	r2, [r3, #6]
 8002826:	2300      	movs	r3, #0
 8002828:	4618      	mov	r0, r3
 800282a:	3758      	adds	r7, #88	; 0x58
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	0ffffff5 	.word	0x0ffffff5
 8002834:	41615252 	.word	0x41615252
 8002838:	61417272 	.word	0x61417272
 800283c:	200000a0 	.word	0x200000a0

08002840 <validate>:
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	2309      	movs	r3, #9
 800284c:	73fb      	strb	r3, [r7, #15]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01c      	beq.n	800288e <validate+0x4e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d018      	beq.n	800288e <validate+0x4e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d013      	beq.n	800288e <validate+0x4e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	889a      	ldrh	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	88db      	ldrh	r3, [r3, #6]
 8002870:	429a      	cmp	r2, r3
 8002872:	d10c      	bne.n	800288e <validate+0x4e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	785b      	ldrb	r3, [r3, #1]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe f8c8 	bl	8000a10 <disk_status>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <validate+0x4e>
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <validate+0x5a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	e000      	b.n	800289c <validate+0x5c>
 800289a:	2300      	movs	r3, #0
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <f_mount>:
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	4613      	mov	r3, r2
 80028b8:	71fb      	strb	r3, [r7, #7]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fcc9 	bl	800225a <get_ldnumber>
 80028c8:	61f8      	str	r0, [r7, #28]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da01      	bge.n	80028d4 <f_mount+0x28>
 80028d0:	230b      	movs	r3, #11
 80028d2:	e025      	b.n	8002920 <f_mount+0x74>
 80028d4:	4a14      	ldr	r2, [pc, #80]	; (8002928 <f_mount+0x7c>)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <f_mount+0x3e>
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <f_mount+0x4a>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	490b      	ldr	r1, [pc, #44]	; (8002928 <f_mount+0x7c>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <f_mount+0x5e>
 8002906:	2300      	movs	r3, #0
 8002908:	e00a      	b.n	8002920 <f_mount+0x74>
 800290a:	f107 010c 	add.w	r1, r7, #12
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	2200      	movs	r2, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fd3b 	bl	8002390 <find_volume>
 800291a:	4603      	mov	r3, r0
 800291c:	75fb      	strb	r3, [r7, #23]
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	4618      	mov	r0, r3
 8002922:	3720      	adds	r7, #32
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000009c 	.word	0x2000009c

0800292c <f_open>:
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b099      	sub	sp, #100	; 0x64
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	71fb      	strb	r3, [r7, #7]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <f_open+0x18>
 8002940:	2309      	movs	r3, #9
 8002942:	e172      	b.n	8002c2a <f_open+0x2fe>
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	79fa      	ldrb	r2, [r7, #7]
 800294e:	f107 0114 	add.w	r1, r7, #20
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fd1a 	bl	8002390 <find_volume>
 800295c:	4603      	mov	r3, r0
 800295e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 8156 	bne.w	8002c18 <f_open+0x2ec>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	61bb      	str	r3, [r7, #24]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	f107 0318 	add.w	r3, r7, #24
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fbff 	bl	800217c <follow_path>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002984:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002988:	2b00      	cmp	r3, #0
 800298a:	d107      	bne.n	800299c <f_open+0x70>
 800298c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002990:	b25b      	sxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	da02      	bge.n	800299c <f_open+0x70>
 8002996:	2306      	movs	r3, #6
 8002998:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 031c 	and.w	r3, r3, #28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d073      	beq.n	8002a8e <f_open+0x162>
 80029a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d010      	beq.n	80029d0 <f_open+0xa4>
 80029ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d107      	bne.n	80029c6 <f_open+0x9a>
 80029b6:	f107 0318 	add.w	r3, r7, #24
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fa86 	bl	8001ecc <dir_register>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f043 0308 	orr.w	r3, r3, #8
 80029cc:	71fb      	strb	r3, [r7, #7]
 80029ce:	e010      	b.n	80029f2 <f_open+0xc6>
 80029d0:	7fbb      	ldrb	r3, [r7, #30]
 80029d2:	f003 0311 	and.w	r3, r3, #17
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <f_open+0xb6>
 80029da:	2307      	movs	r3, #7
 80029dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029e0:	e007      	b.n	80029f2 <f_open+0xc6>
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <f_open+0xc6>
 80029ec:	2308      	movs	r3, #8
 80029ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d163      	bne.n	8002ac2 <f_open+0x196>
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d05e      	beq.n	8002ac2 <f_open+0x196>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f96d 	bl	8001cea <ld_clust>
 8002a10:	6538      	str	r0, [r7, #80]	; 0x50
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	f103 040e 	add.w	r4, r3, #14
 8002a18:	f7fe fabc 	bl	8000f94 <get_fattime>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7fe fb17 	bl	8001054 <st_dword>
 8002a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a28:	330b      	adds	r3, #11
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a32:	2200      	movs	r2, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f977 	bl	8001d28 <st_clust>
 8002a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3c:	331c      	adds	r3, #28
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe fb07 	bl	8001054 <st_dword>
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	70da      	strb	r2, [r3, #3]
 8002a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d037      	beq.n	8002ac2 <f_open+0x196>
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a58:	f107 0318 	add.w	r3, r7, #24
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fe6c 	bl	800173e <remove_chain>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d126      	bne.n	8002ac2 <f_open+0x196>
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fc1a 	bl	80012b2 <move_window>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a88:	3a01      	subs	r2, #1
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	e019      	b.n	8002ac2 <f_open+0x196>
 8002a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d115      	bne.n	8002ac2 <f_open+0x196>
 8002a96:	7fbb      	ldrb	r3, [r7, #30]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <f_open+0x17c>
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002aa6:	e00c      	b.n	8002ac2 <f_open+0x196>
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <f_open+0x196>
 8002ab2:	7fbb      	ldrb	r3, [r7, #30]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <f_open+0x196>
 8002abc:	2307      	movs	r3, #7
 8002abe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <f_open+0x1be>
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <f_open+0x1b0>
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ada:	71fb      	strb	r3, [r7, #7]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	621a      	str	r2, [r3, #32]
 8002ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
 8002aea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 8092 	bne.w	8002c18 <f_open+0x2ec>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff f8f5 	bl	8001cea <ld_clust>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b08:	331c      	adds	r3, #28
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fa64 	bl	8000fd8 <ld_dword>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	88da      	ldrh	r2, [r3, #6]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	809a      	strh	r2, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	79fa      	ldrb	r2, [r7, #7]
 8002b28:	741a      	strb	r2, [r3, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	745a      	strb	r2, [r3, #17]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3328      	adds	r3, #40	; 0x28
 8002b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fad1 	bl	80010ee <mem_set>
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d060      	beq.n	8002c18 <f_open+0x2ec>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d05c      	beq.n	8002c18 <f_open+0x2ec>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	615a      	str	r2, [r3, #20]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	895b      	ldrh	r3, [r3, #10]
 8002b6a:	025b      	lsls	r3, r3, #9
 8002b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	657b      	str	r3, [r7, #84]	; 0x54
 8002b7a:	e016      	b.n	8002baa <f_open+0x27e>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fc50 	bl	8001426 <get_fat>
 8002b86:	65b8      	str	r0, [r7, #88]	; 0x58
 8002b88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d802      	bhi.n	8002b94 <f_open+0x268>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9a:	d102      	bne.n	8002ba2 <f_open+0x276>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ba2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	657b      	str	r3, [r7, #84]	; 0x54
 8002baa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <f_open+0x28e>
 8002bb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d8e0      	bhi.n	8002b7c <f_open+0x250>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bbe:	619a      	str	r2, [r3, #24]
 8002bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d127      	bne.n	8002c18 <f_open+0x2ec>
 8002bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d022      	beq.n	8002c18 <f_open+0x2ec>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fc06 	bl	80013e8 <clst2sect>
 8002bdc:	6478      	str	r0, [r7, #68]	; 0x44
 8002bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <f_open+0x2c0>
 8002be4:	2302      	movs	r3, #2
 8002be6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002bea:	e015      	b.n	8002c18 <f_open+0x2ec>
 8002bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bee:	0a5a      	lsrs	r2, r3, #9
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf2:	441a      	add	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	61da      	str	r2, [r3, #28]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	7858      	ldrb	r0, [r3, #1]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	2301      	movs	r3, #1
 8002c08:	f7fd ff18 	bl	8000a3c <disk_read>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <f_open+0x2ec>
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <f_open+0x2fa>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3764      	adds	r7, #100	; 0x64
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd90      	pop	{r4, r7, pc}

08002c32 <f_read>:
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b08e      	sub	sp, #56	; 0x38
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f107 0214 	add.w	r2, r7, #20
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fdf4 	bl	8002840 <validate>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d107      	bne.n	8002c76 <f_read+0x44>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	7c5b      	ldrb	r3, [r3, #17]
 8002c6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <f_read+0x4a>
 8002c76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c7a:	e109      	b.n	8002e90 <f_read+0x25e>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	7c1b      	ldrb	r3, [r3, #16]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <f_read+0x5a>
 8002c88:	2307      	movs	r3, #7
 8002c8a:	e101      	b.n	8002e90 <f_read+0x25e>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f240 80f2 	bls.w	8002e86 <f_read+0x254>
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	e0ee      	b.n	8002e86 <f_read+0x254>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f040 80ba 	bne.w	8002e2a <f_read+0x1f8>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	0a5b      	lsrs	r3, r3, #9
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	8952      	ldrh	r2, [r2, #10]
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d123      	bne.n	8002d14 <f_read+0xe2>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <f_read+0xaa>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cda:	e007      	b.n	8002cec <f_read+0xba>
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f7fe fb9e 	bl	8001426 <get_fat>
 8002cea:	6338      	str	r0, [r7, #48]	; 0x30
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d804      	bhi.n	8002cfc <f_read+0xca>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	745a      	strb	r2, [r3, #17]
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e0c9      	b.n	8002e90 <f_read+0x25e>
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d104      	bne.n	8002d0e <f_read+0xdc>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	745a      	strb	r2, [r3, #17]
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0c0      	b.n	8002e90 <f_read+0x25e>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d12:	619a      	str	r2, [r3, #24]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f7fe fb63 	bl	80013e8 <clst2sect>
 8002d22:	61b8      	str	r0, [r7, #24]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d104      	bne.n	8002d34 <f_read+0x102>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	745a      	strb	r2, [r3, #17]
 8002d30:	2302      	movs	r3, #2
 8002d32:	e0ad      	b.n	8002e90 <f_read+0x25e>
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0a5b      	lsrs	r3, r3, #9
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d039      	beq.n	8002dbc <f_read+0x18a>
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	4413      	add	r3, r2
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	8952      	ldrh	r2, [r2, #10]
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d905      	bls.n	8002d62 <f_read+0x130>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	895b      	ldrh	r3, [r3, #10]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	7858      	ldrb	r0, [r3, #1]
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6c:	f7fd fe66 	bl	8000a3c <disk_read>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <f_read+0x14e>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	745a      	strb	r2, [r3, #17]
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e087      	b.n	8002e90 <f_read+0x25e>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	7c1b      	ldrb	r3, [r3, #16]
 8002d84:	b25b      	sxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	da14      	bge.n	8002db4 <f_read+0x182>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d90d      	bls.n	8002db4 <f_read+0x182>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	025b      	lsls	r3, r3, #9
 8002da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da4:	18d0      	adds	r0, r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3328      	adds	r3, #40	; 0x28
 8002daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dae:	4619      	mov	r1, r3
 8002db0:	f7fe f97c 	bl	80010ac <mem_cpy>
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dba:	e050      	b.n	8002e5e <f_read+0x22c>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d02e      	beq.n	8002e24 <f_read+0x1f2>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	7c1b      	ldrb	r3, [r3, #16]
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	da18      	bge.n	8002e02 <f_read+0x1d0>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	7858      	ldrb	r0, [r3, #1]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	2301      	movs	r3, #1
 8002de0:	f7fd fe96 	bl	8000b10 <disk_write>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d004      	beq.n	8002df4 <f_read+0x1c2>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	745a      	strb	r2, [r3, #17]
 8002df0:	2301      	movs	r3, #1
 8002df2:	e04d      	b.n	8002e90 <f_read+0x25e>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	7c1b      	ldrb	r3, [r3, #16]
 8002df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	741a      	strb	r2, [r3, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	7858      	ldrb	r0, [r3, #1]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	f7fd fe14 	bl	8000a3c <disk_read>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d004      	beq.n	8002e24 <f_read+0x1f2>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	745a      	strb	r2, [r3, #17]
 8002e20:	2301      	movs	r3, #1
 8002e22:	e035      	b.n	8002e90 <f_read+0x25e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	61da      	str	r2, [r3, #28]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e32:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d901      	bls.n	8002e44 <f_read+0x212>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e52:	4413      	add	r3, r2
 8002e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e56:	4619      	mov	r1, r3
 8002e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e5a:	f7fe f927 	bl	80010ac <mem_cpy>
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	441a      	add	r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	4413      	add	r3, r2
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	441a      	add	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	615a      	str	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f47f af0d 	bne.w	8002ca8 <f_read+0x76>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	3738      	adds	r7, #56	; 0x38
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <f_sync>:
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f107 0208 	add.w	r2, r7, #8
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fcc9 	bl	8002840 <validate>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	75fb      	strb	r3, [r7, #23]
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d168      	bne.n	8002f8a <f_sync+0xf2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7c1b      	ldrb	r3, [r3, #16]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d062      	beq.n	8002f8a <f_sync+0xf2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7c1b      	ldrb	r3, [r3, #16]
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da15      	bge.n	8002efa <f_sync+0x62>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	7858      	ldrb	r0, [r3, #1]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	2301      	movs	r3, #1
 8002ede:	f7fd fe17 	bl	8000b10 <disk_write>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <f_sync+0x54>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e04f      	b.n	8002f8c <f_sync+0xf4>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	7c1b      	ldrb	r3, [r3, #16]
 8002ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	741a      	strb	r2, [r3, #16]
 8002efa:	f7fe f84b 	bl	8000f94 <get_fattime>
 8002efe:	6138      	str	r0, [r7, #16]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f7fe f9d2 	bl	80012b2 <move_window>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	75fb      	strb	r3, [r7, #23]
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d138      	bne.n	8002f8a <f_sync+0xf2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	330b      	adds	r3, #11
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	330b      	adds	r3, #11
 8002f28:	f042 0220 	orr.w	r2, r2, #32
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	f7fe fef4 	bl	8001d28 <st_clust>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f103 021c 	add.w	r2, r3, #28
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	f7fe f881 	bl	8001054 <st_dword>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3316      	adds	r3, #22
 8002f56:	6939      	ldr	r1, [r7, #16]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe f87b 	bl	8001054 <st_dword>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3312      	adds	r3, #18
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe f85a 	bl	800101e <st_word>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	70da      	strb	r2, [r3, #3]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe f9ca 	bl	800130c <sync_fs>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	75fb      	strb	r3, [r7, #23]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7c1b      	ldrb	r3, [r3, #16]
 8002f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	741a      	strb	r2, [r3, #16]
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <f_close>:
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff7b 	bl	8002e98 <f_sync>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10e      	bne.n	8002fca <f_close+0x36>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f107 0208 	add.w	r2, r7, #8
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fc43 	bl	8002840 <validate>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	73fb      	strb	r3, [r7, #15]
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <f_close+0x36>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <f_opendir>:
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <f_opendir+0x14>
 8002fe4:	2309      	movs	r3, #9
 8002fe6:	e04a      	b.n	800307e <f_opendir+0xaa>
 8002fe8:	f107 0108 	add.w	r1, r7, #8
 8002fec:	463b      	mov	r3, r7
 8002fee:	2200      	movs	r2, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff f9cd 	bl	8002390 <find_volume>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	73fb      	strb	r3, [r7, #15]
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d137      	bne.n	8003070 <f_opendir+0x9c>
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff f8b6 	bl	800217c <follow_path>
 8003010:	4603      	mov	r3, r0
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d125      	bne.n	8003066 <f_opendir+0x92>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003020:	b25b      	sxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	db12      	blt.n	800304c <f_opendir+0x78>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	799b      	ldrb	r3, [r3, #6]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <f_opendir+0x74>
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f7fe fe55 	bl	8001cea <ld_clust>
 8003040:	4602      	mov	r2, r0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	e001      	b.n	800304c <f_opendir+0x78>
 8003048:	2305      	movs	r3, #5
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <f_opendir+0x92>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	88da      	ldrh	r2, [r3, #6]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	809a      	strh	r2, [r3, #4]
 800305a:	2100      	movs	r1, #0
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7fe fcec 	bl	8001a3a <dir_sdi>
 8003062:	4603      	mov	r3, r0
 8003064:	73fb      	strb	r3, [r7, #15]
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b04      	cmp	r3, #4
 800306a:	d101      	bne.n	8003070 <f_opendir+0x9c>
 800306c:	2305      	movs	r3, #5
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <f_opendir+0xa8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <f_readdir>:
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f107 0208 	add.w	r2, r7, #8
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fbd1 	bl	8002840 <validate>
 800309e:	4603      	mov	r3, r0
 80030a0:	73fb      	strb	r3, [r7, #15]
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d126      	bne.n	80030f6 <f_readdir+0x70>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <f_readdir+0x36>
 80030ae:	2100      	movs	r1, #0
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fe fcc2 	bl	8001a3a <dir_sdi>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]
 80030ba:	e01c      	b.n	80030f6 <f_readdir+0x70>
 80030bc:	2100      	movs	r1, #0
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fe52 	bl	8001d68 <dir_read>
 80030c4:	4603      	mov	r3, r0
 80030c6:	73fb      	strb	r3, [r7, #15]
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d101      	bne.n	80030d2 <f_readdir+0x4c>
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10e      	bne.n	80030f6 <f_readdir+0x70>
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe ff28 	bl	8001f30 <get_fileinfo>
 80030e0:	2100      	movs	r1, #0
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe fd24 	bl	8001b30 <dir_next>
 80030e8:	4603      	mov	r3, r0
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d101      	bne.n	80030f6 <f_readdir+0x70>
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <read_song>:
static void MX_TIM6_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

void read_song(){
 8003100:	b580      	push	{r7, lr}
 8003102:	b08e      	sub	sp, #56	; 0x38
 8003104:	af00      	add	r7, sp, #0
    DIR dir;
    UINT i;
    UINT z;
    static FILINFO fno;

    if(otw==0){
 8003106:	4b45      	ldr	r3, [pc, #276]	; (800321c <read_song+0x11c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d144      	bne.n	8003198 <read_song+0x98>
		res = f_opendir(&dir, "/");
 800310e:	463b      	mov	r3, r7
 8003110:	4943      	ldr	r1, [pc, #268]	; (8003220 <read_song+0x120>)
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff5e 	bl	8002fd4 <f_opendir>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    	if (res == FR_OK) {
 800311e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003122:	2b00      	cmp	r3, #0
 8003124:	d176      	bne.n	8003214 <read_song+0x114>
  	  	  	do{
            		res = f_readdir(&dir, &fno);
 8003126:	463b      	mov	r3, r7
 8003128:	493e      	ldr	r1, [pc, #248]	; (8003224 <read_song+0x124>)
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ffab 	bl	8003086 <f_readdir>
 8003130:	4603      	mov	r3, r0
 8003132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            		if (res != FR_OK || fno.fname[0] == 0) break;
 8003136:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800313a:	2b00      	cmp	r3, #0
 800313c:	d124      	bne.n	8003188 <read_song+0x88>
 800313e:	4b39      	ldr	r3, [pc, #228]	; (8003224 <read_song+0x124>)
 8003140:	7a5b      	ldrb	r3, [r3, #9]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d020      	beq.n	8003188 <read_song+0x88>
            		printf("%s\n", fno.fname);
 8003146:	4838      	ldr	r0, [pc, #224]	; (8003228 <read_song+0x128>)
 8003148:	f004 fb12 	bl	8007770 <puts>
                	z = strlen(fno.fname);
 800314c:	4836      	ldr	r0, [pc, #216]	; (8003228 <read_song+0x128>)
 800314e:	f7fd f83b 	bl	80001c8 <strlen>
 8003152:	62f8      	str	r0, [r7, #44]	; 0x2c
                	utwor++;
 8003154:	4b35      	ldr	r3, [pc, #212]	; (800322c <read_song+0x12c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	4a34      	ldr	r2, [pc, #208]	; (800322c <read_song+0x12c>)
 800315c:	6013      	str	r3, [r2, #0]
            	}
            	while((fno.fname[z-1]!='V') || (fno.fname[z-2]!='A')|| (fno.fname[z-3]!='W')) ;
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003160:	3b01      	subs	r3, #1
 8003162:	4a30      	ldr	r2, [pc, #192]	; (8003224 <read_song+0x124>)
 8003164:	4413      	add	r3, r2
 8003166:	7a5b      	ldrb	r3, [r3, #9]
 8003168:	2b56      	cmp	r3, #86	; 0x56
 800316a:	d1dc      	bne.n	8003126 <read_song+0x26>
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	3b02      	subs	r3, #2
 8003170:	4a2c      	ldr	r2, [pc, #176]	; (8003224 <read_song+0x124>)
 8003172:	4413      	add	r3, r2
 8003174:	7a5b      	ldrb	r3, [r3, #9]
 8003176:	2b41      	cmp	r3, #65	; 0x41
 8003178:	d1d5      	bne.n	8003126 <read_song+0x26>
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	3b03      	subs	r3, #3
 800317e:	4a29      	ldr	r2, [pc, #164]	; (8003224 <read_song+0x124>)
 8003180:	4413      	add	r3, r2
 8003182:	7a5b      	ldrb	r3, [r3, #9]
 8003184:	2b57      	cmp	r3, #87	; 0x57
 8003186:	d1ce      	bne.n	8003126 <read_song+0x26>
  	  	  		otw=1;
 8003188:	4b24      	ldr	r3, [pc, #144]	; (800321c <read_song+0x11c>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]
  	  	  		sprintf(a,"%s",fno.fname);
 800318e:	4926      	ldr	r1, [pc, #152]	; (8003228 <read_song+0x128>)
 8003190:	4827      	ldr	r0, [pc, #156]	; (8003230 <read_song+0x130>)
 8003192:	f004 faf5 	bl	8007780 <strcpy>
 8003196:	e03d      	b.n	8003214 <read_song+0x114>
            	}
            }

      else{
    	  res = f_opendir(&dir, "/");
 8003198:	463b      	mov	r3, r7
 800319a:	4921      	ldr	r1, [pc, #132]	; (8003220 <read_song+0x120>)
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff ff19 	bl	8002fd4 <f_opendir>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
           for(int i=0;i<=utwor;i++)
 80031a8:	2300      	movs	r3, #0
 80031aa:	637b      	str	r3, [r7, #52]	; 0x34
 80031ac:	e024      	b.n	80031f8 <read_song+0xf8>
           {
            		res = f_readdir(&dir, &fno);
 80031ae:	463b      	mov	r3, r7
 80031b0:	491c      	ldr	r1, [pc, #112]	; (8003224 <read_song+0x124>)
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff67 	bl	8003086 <f_readdir>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            		if (res != FR_OK || fno.fname[0] == 0){
 80031be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d103      	bne.n	80031ce <read_song+0xce>
 80031c6:	4b17      	ldr	r3, [pc, #92]	; (8003224 <read_song+0x124>)
 80031c8:	7a5b      	ldrb	r3, [r3, #9]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <read_song+0xdc>
            			otw=0;
 80031ce:	4b13      	ldr	r3, [pc, #76]	; (800321c <read_song+0x11c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
            			utwor=0;
 80031d4:	4b15      	ldr	r3, [pc, #84]	; (800322c <read_song+0x12c>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
            			break;
 80031da:	e012      	b.n	8003202 <read_song+0x102>
            		}
            		printf("%s\n", fno.fname);
 80031dc:	4812      	ldr	r0, [pc, #72]	; (8003228 <read_song+0x128>)
 80031de:	f004 fac7 	bl	8007770 <puts>
                	z = strlen(fno.fname);
 80031e2:	4811      	ldr	r0, [pc, #68]	; (8003228 <read_song+0x128>)
 80031e4:	f7fc fff0 	bl	80001c8 <strlen>
 80031e8:	62f8      	str	r0, [r7, #44]	; 0x2c
                	sprintf(b,"%s",fno.fname);
 80031ea:	490f      	ldr	r1, [pc, #60]	; (8003228 <read_song+0x128>)
 80031ec:	4811      	ldr	r0, [pc, #68]	; (8003234 <read_song+0x134>)
 80031ee:	f004 fac7 	bl	8007780 <strcpy>
           for(int i=0;i<=utwor;i++)
 80031f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f4:	3301      	adds	r3, #1
 80031f6:	637b      	str	r3, [r7, #52]	; 0x34
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <read_song+0x12c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031fe:	429a      	cmp	r2, r3
 8003200:	ddd5      	ble.n	80031ae <read_song+0xae>
            	}

            	utwor++;
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <read_song+0x12c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	4a08      	ldr	r2, [pc, #32]	; (800322c <read_song+0x12c>)
 800320a:	6013      	str	r3, [r2, #0]
            	sprintf(a,"%s",fno.fname);
 800320c:	4906      	ldr	r1, [pc, #24]	; (8003228 <read_song+0x128>)
 800320e:	4808      	ldr	r0, [pc, #32]	; (8003230 <read_song+0x130>)
 8003210:	f004 fab6 	bl	8007780 <strcpy>
            	return;
            	}
	}
 8003214:	3738      	adds	r7, #56	; 0x38
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	200000ac 	.word	0x200000ac
 8003220:	08007fcc 	.word	0x08007fcc
 8003224:	200000bc 	.word	0x200000bc
 8003228:	200000c5 	.word	0x200000c5
 800322c:	200000b4 	.word	0x200000b4
 8003230:	200083e0 	.word	0x200083e0
 8003234:	200000f8 	.word	0x200000f8

08003238 <HAL_ADC_ConvCpltCallback>:
    }
   f_closedir(&dir);
    return res;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]


		  		  value = HAL_ADC_GetValue(&hadc1);
 8003240:	4851      	ldr	r0, [pc, #324]	; (8003388 <HAL_ADC_ConvCpltCallback+0x150>)
 8003242:	f001 fad6 	bl	80047f2 <HAL_ADC_GetValue>
 8003246:	4603      	mov	r3, r0
 8003248:	461a      	mov	r2, r3
 800324a:	4b50      	ldr	r3, [pc, #320]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 800324c:	601a      	str	r2, [r3, #0]

//za pierwszym ustawieniem potencjometru działa ale potem się nie zmienia
		  	  if(value>0 && value <= 410) indeks_glosnosci = 0;
 800324e:	4b4f      	ldr	r3, [pc, #316]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	dd08      	ble.n	8003268 <HAL_ADC_ConvCpltCallback+0x30>
 8003256:	4b4d      	ldr	r3, [pc, #308]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800325e:	dc03      	bgt.n	8003268 <HAL_ADC_ConvCpltCallback+0x30>
 8003260:	4b4b      	ldr	r3, [pc, #300]	; (8003390 <HAL_ADC_ConvCpltCallback+0x158>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e088      	b.n	800337a <HAL_ADC_ConvCpltCallback+0x142>
		  	  else if(value>410 && value <= 819) indeks_glosnosci = 1;
 8003268:	4b48      	ldr	r3, [pc, #288]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8003270:	dd08      	ble.n	8003284 <HAL_ADC_ConvCpltCallback+0x4c>
 8003272:	4b46      	ldr	r3, [pc, #280]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 800327a:	da03      	bge.n	8003284 <HAL_ADC_ConvCpltCallback+0x4c>
 800327c:	4b44      	ldr	r3, [pc, #272]	; (8003390 <HAL_ADC_ConvCpltCallback+0x158>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	e07a      	b.n	800337a <HAL_ADC_ConvCpltCallback+0x142>
		  	  else if(value>819 && value <= 1228) indeks_glosnosci = 2;
 8003284:	4b41      	ldr	r3, [pc, #260]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 800328c:	db09      	blt.n	80032a2 <HAL_ADC_ConvCpltCallback+0x6a>
 800328e:	4b3f      	ldr	r3, [pc, #252]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8003296:	4293      	cmp	r3, r2
 8003298:	dc03      	bgt.n	80032a2 <HAL_ADC_ConvCpltCallback+0x6a>
 800329a:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <HAL_ADC_ConvCpltCallback+0x158>)
 800329c:	2202      	movs	r2, #2
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	e06b      	b.n	800337a <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>1228 && value <= 1647) indeks_glosnosci = 3;
 80032a2:	4b3a      	ldr	r3, [pc, #232]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f240 42cc 	movw	r2, #1228	; 0x4cc
 80032aa:	4293      	cmp	r3, r2
 80032ac:	dd08      	ble.n	80032c0 <HAL_ADC_ConvCpltCallback+0x88>
 80032ae:	4b37      	ldr	r3, [pc, #220]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80032b6:	da03      	bge.n	80032c0 <HAL_ADC_ConvCpltCallback+0x88>
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <HAL_ADC_ConvCpltCallback+0x158>)
 80032ba:	2203      	movs	r2, #3
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e05c      	b.n	800337a <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>1647 && value <= 2058) indeks_glosnosci = 4;
 80032c0:	4b32      	ldr	r3, [pc, #200]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80032c8:	db09      	blt.n	80032de <HAL_ADC_ConvCpltCallback+0xa6>
 80032ca:	4b30      	ldr	r3, [pc, #192]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f640 020a 	movw	r2, #2058	; 0x80a
 80032d2:	4293      	cmp	r3, r2
 80032d4:	dc03      	bgt.n	80032de <HAL_ADC_ConvCpltCallback+0xa6>
 80032d6:	4b2e      	ldr	r3, [pc, #184]	; (8003390 <HAL_ADC_ConvCpltCallback+0x158>)
 80032d8:	2204      	movs	r2, #4
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e04d      	b.n	800337a <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2058 && value <= 2467) indeks_glosnosci = 5;
 80032de:	4b2b      	ldr	r3, [pc, #172]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f640 020a 	movw	r2, #2058	; 0x80a
 80032e6:	4293      	cmp	r3, r2
 80032e8:	dd09      	ble.n	80032fe <HAL_ADC_ConvCpltCallback+0xc6>
 80032ea:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f640 12a3 	movw	r2, #2467	; 0x9a3
 80032f2:	4293      	cmp	r3, r2
 80032f4:	dc03      	bgt.n	80032fe <HAL_ADC_ConvCpltCallback+0xc6>
 80032f6:	4b26      	ldr	r3, [pc, #152]	; (8003390 <HAL_ADC_ConvCpltCallback+0x158>)
 80032f8:	2205      	movs	r2, #5
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	e03d      	b.n	800337a <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2467 && value <= 2876) indeks_glosnosci = 6;
 80032fe:	4b23      	ldr	r3, [pc, #140]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f640 12a3 	movw	r2, #2467	; 0x9a3
 8003306:	4293      	cmp	r3, r2
 8003308:	dd09      	ble.n	800331e <HAL_ADC_ConvCpltCallback+0xe6>
 800330a:	4b20      	ldr	r3, [pc, #128]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f640 323c 	movw	r2, #2876	; 0xb3c
 8003312:	4293      	cmp	r3, r2
 8003314:	dc03      	bgt.n	800331e <HAL_ADC_ConvCpltCallback+0xe6>
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <HAL_ADC_ConvCpltCallback+0x158>)
 8003318:	2206      	movs	r2, #6
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e02d      	b.n	800337a <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2876 && value <= 3285) indeks_glosnosci = 7;
 800331e:	4b1b      	ldr	r3, [pc, #108]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f640 323c 	movw	r2, #2876	; 0xb3c
 8003326:	4293      	cmp	r3, r2
 8003328:	dd09      	ble.n	800333e <HAL_ADC_ConvCpltCallback+0x106>
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8003332:	4293      	cmp	r3, r2
 8003334:	dc03      	bgt.n	800333e <HAL_ADC_ConvCpltCallback+0x106>
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_ADC_ConvCpltCallback+0x158>)
 8003338:	2207      	movs	r2, #7
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e01d      	b.n	800337a <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>3285 && value <= 3692) indeks_glosnosci = 8;
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8003346:	4293      	cmp	r3, r2
 8003348:	dd09      	ble.n	800335e <HAL_ADC_ConvCpltCallback+0x126>
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f640 626c 	movw	r2, #3692	; 0xe6c
 8003352:	4293      	cmp	r3, r2
 8003354:	dc03      	bgt.n	800335e <HAL_ADC_ConvCpltCallback+0x126>
 8003356:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <HAL_ADC_ConvCpltCallback+0x158>)
 8003358:	2208      	movs	r2, #8
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	e00d      	b.n	800337a <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>3692 && value <= 4095) indeks_glosnosci = 9;
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f640 626c 	movw	r2, #3692	; 0xe6c
 8003366:	4293      	cmp	r3, r2
 8003368:	dd07      	ble.n	800337a <HAL_ADC_ConvCpltCallback+0x142>
 800336a:	4b08      	ldr	r3, [pc, #32]	; (800338c <HAL_ADC_ConvCpltCallback+0x154>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003372:	da02      	bge.n	800337a <HAL_ADC_ConvCpltCallback+0x142>
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_ADC_ConvCpltCallback+0x158>)
 8003376:	2209      	movs	r2, #9
 8003378:	601a      	str	r2, [r3, #0]
		  	HAL_ADC_Start_IT(&hadc1);
 800337a:	4803      	ldr	r0, [pc, #12]	; (8003388 <HAL_ADC_ConvCpltCallback+0x150>)
 800337c:	f001 f828 	bl	80043d0 <HAL_ADC_Start_IT>
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	2000050c 	.word	0x2000050c
 800338c:	200000a8 	.word	0x200000a8
 8003390:	200000a4 	.word	0x200000a4

08003394 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	80fb      	strh	r3, [r7, #6]

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET){
 800339e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033a2:	4845      	ldr	r0, [pc, #276]	; (80034b8 <HAL_GPIO_EXTI_Callback+0x124>)
 80033a4:	f002 f836 	bl	8005414 <HAL_GPIO_ReadPin>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_GPIO_EXTI_Callback+0x34>

		 //ciszej

		 if(indeks_glosnosci>0 && indeks_glosnosci<=9) indeks_glosnosci--;
 80033ae:	4b43      	ldr	r3, [pc, #268]	; (80034bc <HAL_GPIO_EXTI_Callback+0x128>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	dd08      	ble.n	80033c8 <HAL_GPIO_EXTI_Callback+0x34>
 80033b6:	4b41      	ldr	r3, [pc, #260]	; (80034bc <HAL_GPIO_EXTI_Callback+0x128>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b09      	cmp	r3, #9
 80033bc:	dc04      	bgt.n	80033c8 <HAL_GPIO_EXTI_Callback+0x34>
 80033be:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <HAL_GPIO_EXTI_Callback+0x128>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	4a3d      	ldr	r2, [pc, #244]	; (80034bc <HAL_GPIO_EXTI_Callback+0x128>)
 80033c6:	6013      	str	r3, [r2, #0]

		  	}

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 80033c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033cc:	483a      	ldr	r0, [pc, #232]	; (80034b8 <HAL_GPIO_EXTI_Callback+0x124>)
 80033ce:	f002 f821 	bl	8005414 <HAL_GPIO_ReadPin>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d104      	bne.n	80033e2 <HAL_GPIO_EXTI_Callback+0x4e>
			  		//prev song
			  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80033d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033dc:	4838      	ldr	r0, [pc, #224]	; (80034c0 <HAL_GPIO_EXTI_Callback+0x12c>)
 80033de:	f002 f84a 	bl	8005476 <HAL_GPIO_TogglePin>

			}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 80033e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033e6:	4834      	ldr	r0, [pc, #208]	; (80034b8 <HAL_GPIO_EXTI_Callback+0x124>)
 80033e8:	f002 f814 	bl	8005414 <HAL_GPIO_ReadPin>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d110      	bne.n	8003414 <HAL_GPIO_EXTI_Callback+0x80>


		 //pause/start
		 //na razie tylko startuje
		 if(stan==1){
 80033f2:	4b34      	ldr	r3, [pc, #208]	; (80034c4 <HAL_GPIO_EXTI_Callback+0x130>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d106      	bne.n	8003408 <HAL_GPIO_EXTI_Callback+0x74>

		 HAL_TIM_Base_Start_IT(&htim4);
 80033fa:	4833      	ldr	r0, [pc, #204]	; (80034c8 <HAL_GPIO_EXTI_Callback+0x134>)
 80033fc:	f003 f8d7 	bl	80065ae <HAL_TIM_Base_Start_IT>

		 stan = 0;
 8003400:	4b30      	ldr	r3, [pc, #192]	; (80034c4 <HAL_GPIO_EXTI_Callback+0x130>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e005      	b.n	8003414 <HAL_GPIO_EXTI_Callback+0x80>
		 }
		 else
		 {
			 HAL_TIM_Base_Stop_IT(&htim4);
 8003408:	482f      	ldr	r0, [pc, #188]	; (80034c8 <HAL_GPIO_EXTI_Callback+0x134>)
 800340a:	f003 f8f4 	bl	80065f6 <HAL_TIM_Base_Stop_IT>
			 stan=1;
 800340e:	4b2d      	ldr	r3, [pc, #180]	; (80034c4 <HAL_GPIO_EXTI_Callback+0x130>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]
		 }

	 		}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET){
 8003414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003418:	4827      	ldr	r0, [pc, #156]	; (80034b8 <HAL_GPIO_EXTI_Callback+0x124>)
 800341a:	f001 fffb 	bl	8005414 <HAL_GPIO_ReadPin>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d12d      	bne.n	8003480 <HAL_GPIO_EXTI_Callback+0xec>
		 	 HAL_TIM_Base_Stop_IT(&htim4);
 8003424:	4828      	ldr	r0, [pc, #160]	; (80034c8 <HAL_GPIO_EXTI_Callback+0x134>)
 8003426:	f003 f8e6 	bl	80065f6 <HAL_TIM_Base_Stop_IT>
		 	 	 f_close(&file);
 800342a:	4828      	ldr	r0, [pc, #160]	; (80034cc <HAL_GPIO_EXTI_Callback+0x138>)
 800342c:	f7ff fdb2 	bl	8002f94 <f_close>
		 	 	read_song();
 8003430:	f7ff fe66 	bl	8003100 <read_song>
		 	   // if (fresult == FR_OK) {
		 	      //     strcpy(buff, "/");
		 	           //read_song();
		 	           // fresult = scan_files(buff);
		 	     //  }
		 	       fresult = f_open(&file, &b , FA_READ|FA_OPEN_EXISTING);
 8003434:	2201      	movs	r2, #1
 8003436:	4926      	ldr	r1, [pc, #152]	; (80034d0 <HAL_GPIO_EXTI_Callback+0x13c>)
 8003438:	4824      	ldr	r0, [pc, #144]	; (80034cc <HAL_GPIO_EXTI_Callback+0x138>)
 800343a:	f7ff fa77 	bl	800292c <f_open>
 800343e:	4603      	mov	r3, r0
 8003440:	461a      	mov	r2, r3
 8003442:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <HAL_GPIO_EXTI_Callback+0x140>)
 8003444:	701a      	strb	r2, [r3, #0]
		 	       f_read(&file, &buf2,16000, &bytes_read);
 8003446:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <HAL_GPIO_EXTI_Callback+0x144>)
 8003448:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800344c:	4923      	ldr	r1, [pc, #140]	; (80034dc <HAL_GPIO_EXTI_Callback+0x148>)
 800344e:	481f      	ldr	r0, [pc, #124]	; (80034cc <HAL_GPIO_EXTI_Callback+0x138>)
 8003450:	f7ff fbef 	bl	8002c32 <f_read>
		 	       f_read(&file, &buf, 16000, &bytes_read);
 8003454:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <HAL_GPIO_EXTI_Callback+0x144>)
 8003456:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800345a:	4921      	ldr	r1, [pc, #132]	; (80034e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 800345c:	481b      	ldr	r0, [pc, #108]	; (80034cc <HAL_GPIO_EXTI_Callback+0x138>)
 800345e:	f7ff fbe8 	bl	8002c32 <f_read>
		 		 	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);\
 8003462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003466:	4816      	ldr	r0, [pc, #88]	; (80034c0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003468:	f002 f805 	bl	8005476 <HAL_GPIO_TogglePin>
		 		 	i=352;
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_GPIO_EXTI_Callback+0x150>)
 800346e:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8003472:	601a      	str	r2, [r3, #0]
		 		 	j=0;
 8003474:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <HAL_GPIO_EXTI_Callback+0x154>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
		 		 	 HAL_TIM_Base_Start_IT(&htim4);
 800347a:	4813      	ldr	r0, [pc, #76]	; (80034c8 <HAL_GPIO_EXTI_Callback+0x134>)
 800347c:	f003 f897 	bl	80065ae <HAL_TIM_Base_Start_IT>

		 	}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 8003480:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003484:	480c      	ldr	r0, [pc, #48]	; (80034b8 <HAL_GPIO_EXTI_Callback+0x124>)
 8003486:	f001 ffc5 	bl	8005414 <HAL_GPIO_ReadPin>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10c      	bne.n	80034aa <HAL_GPIO_EXTI_Callback+0x116>

		 //glosniej

		 if(indeks_glosnosci>=0 && indeks_glosnosci<9)
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <HAL_GPIO_EXTI_Callback+0x128>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	db08      	blt.n	80034aa <HAL_GPIO_EXTI_Callback+0x116>
 8003498:	4b08      	ldr	r3, [pc, #32]	; (80034bc <HAL_GPIO_EXTI_Callback+0x128>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b08      	cmp	r3, #8
 800349e:	dc04      	bgt.n	80034aa <HAL_GPIO_EXTI_Callback+0x116>
			 indeks_glosnosci++;
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_GPIO_EXTI_Callback+0x128>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3301      	adds	r3, #1
 80034a6:	4a05      	ldr	r2, [pc, #20]	; (80034bc <HAL_GPIO_EXTI_Callback+0x128>)
 80034a8:	6013      	str	r3, [r2, #0]
			 	}
	 HAL_Delay(200);
 80034aa:	20c8      	movs	r0, #200	; 0xc8
 80034ac:	f000 ff2a 	bl	8004304 <HAL_Delay>

}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40020400 	.word	0x40020400
 80034bc:	200000a4 	.word	0x200000a4
 80034c0:	40020c00 	.word	0x40020c00
 80034c4:	200000b0 	.word	0x200000b0
 80034c8:	2000010c 	.word	0x2000010c
 80034cc:	200002e4 	.word	0x200002e4
 80034d0:	200000f8 	.word	0x200000f8
 80034d4:	200083dc 	.word	0x200083dc
 80034d8:	20000554 	.word	0x20000554
 80034dc:	20000558 	.word	0x20000558
 80034e0:	2000455c 	.word	0x2000455c
 80034e4:	20000004 	.word	0x20000004
 80034e8:	20000008 	.word	0x20000008

080034ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
if(htim->Instance == TIM4)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2a      	ldr	r2, [pc, #168]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d14d      	bne.n	800359a <HAL_TIM_PeriodElapsedCallback+0xae>
{
	if(aktualny_utwor==0){
 80034fe:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d122      	bne.n	800354c <HAL_TIM_PeriodElapsedCallback+0x60>
			HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,buf[i]);
 8003506:	4b29      	ldr	r3, [pc, #164]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a29      	ldr	r2, [pc, #164]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800350c:	5cd3      	ldrb	r3, [r2, r3]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2200      	movs	r2, #0
 8003512:	2100      	movs	r1, #0
 8003514:	4827      	ldr	r0, [pc, #156]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003516:	f001 fd9b 	bl	8005050 <HAL_DAC_SetValue>

			f_read(&file, &buf2[i],1, &bytes_read);
 800351a:	4b24      	ldr	r3, [pc, #144]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a26      	ldr	r2, [pc, #152]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003520:	1899      	adds	r1, r3, r2
 8003522:	4b26      	ldr	r3, [pc, #152]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003524:	2201      	movs	r2, #1
 8003526:	4826      	ldr	r0, [pc, #152]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003528:	f7ff fb83 	bl	8002c32 <f_read>
			i++;
 800352c:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	4a1e      	ldr	r2, [pc, #120]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003534:	6013      	str	r3, [r2, #0]
			if(i==16000){
 8003536:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800353e:	d105      	bne.n	800354c <HAL_TIM_PeriodElapsedCallback+0x60>
				aktualny_utwor = 1;
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]
				j=0;
 8003546:	4b1f      	ldr	r3, [pc, #124]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
				//HAL_TIM_Base_Start_IT(&htim7);*glosnosc_guziczki[indeks_glosnosci]
			}
		}

	if(aktualny_utwor==1){
 800354c:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d122      	bne.n	800359a <HAL_TIM_PeriodElapsedCallback+0xae>
		HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,buf2[j]);
 8003554:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a17      	ldr	r2, [pc, #92]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800355a:	5cd3      	ldrb	r3, [r2, r3]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2200      	movs	r2, #0
 8003560:	2100      	movs	r1, #0
 8003562:	4814      	ldr	r0, [pc, #80]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003564:	f001 fd74 	bl	8005050 <HAL_DAC_SetValue>

		f_read(&file, &buf[j],1, &bytes_read);
 8003568:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a10      	ldr	r2, [pc, #64]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800356e:	1899      	adds	r1, r3, r2
 8003570:	4b12      	ldr	r3, [pc, #72]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003572:	2201      	movs	r2, #1
 8003574:	4812      	ldr	r0, [pc, #72]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003576:	f7ff fb5c 	bl	8002c32 <f_read>
		j++;
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	4a10      	ldr	r2, [pc, #64]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003582:	6013      	str	r3, [r2, #0]
		if(j==16000){
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800358c:	d105      	bne.n	800359a <HAL_TIM_PeriodElapsedCallback+0xae>
			aktualny_utwor = 0;
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
			i=0;
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
			f_read(&file, &buf2, 16000, &bytes_read);
			}
	HAL_TIM_Base_Stop_IT(&htim7);
}*/

}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40000800 	.word	0x40000800
 80035a8:	200000b8 	.word	0x200000b8
 80035ac:	20000004 	.word	0x20000004
 80035b0:	2000455c 	.word	0x2000455c
 80035b4:	200043d8 	.word	0x200043d8
 80035b8:	20000558 	.word	0x20000558
 80035bc:	20000554 	.word	0x20000554
 80035c0:	200002e4 	.word	0x200002e4
 80035c4:	20000008 	.word	0x20000008

080035c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
	{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
			{

			// tutaj umieszczamy kod wykonywany w zależności od odebranej inf

			}
	}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80035e2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035e4:	f000 fe1c 	bl	8004220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035e8:	f000 f84c 	bl	8003684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035ec:	f000 fa46 	bl	8003a7c <MX_GPIO_Init>
  MX_ADC1_Init();
 80035f0:	f000 f8b2 	bl	8003758 <MX_ADC1_Init>
  MX_DAC_Init();
 80035f4:	f000 f902 	bl	80037fc <MX_DAC_Init>
  MX_SPI3_Init();
 80035f8:	f000 f92a 	bl	8003850 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 80035fc:	f000 fa14 	bl	8003a28 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8003600:	f000 f9a8 	bl	8003954 <MX_TIM6_Init>
  MX_TIM4_Init();
 8003604:	f000 f95a 	bl	80038bc <MX_TIM4_Init>
  MX_TIM7_Init();
 8003608:	f000 f9d8 	bl	80039bc <MX_TIM7_Init>
  //fresult = f_mount(&FatFs, "", 0);




  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 800360c:	2100      	movs	r1, #0
 800360e:	4815      	ldr	r0, [pc, #84]	; (8003664 <main+0x88>)
 8003610:	f001 fc6b 	bl	8004eea <HAL_DAC_Start>
  HAL_ADC_Start_IT(&hadc1);
 8003614:	4814      	ldr	r0, [pc, #80]	; (8003668 <main+0x8c>)
 8003616:	f000 fedb 	bl	80043d0 <HAL_ADC_Start_IT>

  FATFS fs;
    FRESULT res;


      res = f_mount(&fs, "", 1);
 800361a:	1d3b      	adds	r3, r7, #4
 800361c:	2201      	movs	r2, #1
 800361e:	4913      	ldr	r1, [pc, #76]	; (800366c <main+0x90>)
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff f943 	bl	80028ac <f_mount>
 8003626:	4603      	mov	r3, r0
 8003628:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
     /* if (res == FR_OK) {
          strcpy(buff, "/");
           res = scan_files(buff);
      }*/
      read_song();
 800362c:	f7ff fd68 	bl	8003100 <read_song>
      res = f_open(&file, &a , FA_READ|FA_OPEN_EXISTING);
 8003630:	2201      	movs	r2, #1
 8003632:	490f      	ldr	r1, [pc, #60]	; (8003670 <main+0x94>)
 8003634:	480f      	ldr	r0, [pc, #60]	; (8003674 <main+0x98>)
 8003636:	f7ff f979 	bl	800292c <f_open>
 800363a:	4603      	mov	r3, r0
 800363c:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
      f_read(&file, &buf2,16000, &bytes_read);
 8003640:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <main+0x9c>)
 8003642:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003646:	490d      	ldr	r1, [pc, #52]	; (800367c <main+0xa0>)
 8003648:	480a      	ldr	r0, [pc, #40]	; (8003674 <main+0x98>)
 800364a:	f7ff faf2 	bl	8002c32 <f_read>
      f_read(&file, &buf, 16000, &bytes_read);
 800364e:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <main+0x9c>)
 8003650:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003654:	490a      	ldr	r1, [pc, #40]	; (8003680 <main+0xa4>)
 8003656:	4807      	ldr	r0, [pc, #28]	; (8003674 <main+0x98>)
 8003658:	f7ff faeb 	bl	8002c32 <f_read>
      char u=0;
 800365c:	2300      	movs	r3, #0
 800365e:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
 // song(dir);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      while (1)
 8003662:	e7fe      	b.n	8003662 <main+0x86>
 8003664:	200043d8 	.word	0x200043d8
 8003668:	2000050c 	.word	0x2000050c
 800366c:	08007fdc 	.word	0x08007fdc
 8003670:	200083e0 	.word	0x200083e0
 8003674:	200002e4 	.word	0x200002e4
 8003678:	20000554 	.word	0x20000554
 800367c:	20000558 	.word	0x20000558
 8003680:	2000455c 	.word	0x2000455c

08003684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b094      	sub	sp, #80	; 0x50
 8003688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800368a:	f107 0320 	add.w	r3, r7, #32
 800368e:	2230      	movs	r2, #48	; 0x30
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f004 f808 	bl	80076a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003698:	f107 030c 	add.w	r3, r7, #12
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036a8:	2300      	movs	r3, #0
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	4b28      	ldr	r3, [pc, #160]	; (8003750 <SystemClock_Config+0xcc>)
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	4a27      	ldr	r2, [pc, #156]	; (8003750 <SystemClock_Config+0xcc>)
 80036b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b6:	6413      	str	r3, [r2, #64]	; 0x40
 80036b8:	4b25      	ldr	r3, [pc, #148]	; (8003750 <SystemClock_Config+0xcc>)
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036c4:	2300      	movs	r3, #0
 80036c6:	607b      	str	r3, [r7, #4]
 80036c8:	4b22      	ldr	r3, [pc, #136]	; (8003754 <SystemClock_Config+0xd0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a21      	ldr	r2, [pc, #132]	; (8003754 <SystemClock_Config+0xd0>)
 80036ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <SystemClock_Config+0xd0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036e0:	2301      	movs	r3, #1
 80036e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036ea:	2302      	movs	r3, #2
 80036ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80036f4:	2304      	movs	r3, #4
 80036f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80036f8:	23a8      	movs	r3, #168	; 0xa8
 80036fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036fc:	2302      	movs	r3, #2
 80036fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003700:	2304      	movs	r3, #4
 8003702:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003704:	f107 0320 	add.w	r3, r7, #32
 8003708:	4618      	mov	r0, r3
 800370a:	f001 ff01 	bl	8005510 <HAL_RCC_OscConfig>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003714:	f000 fa52 	bl	8003bbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003718:	230f      	movs	r3, #15
 800371a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800371c:	2302      	movs	r3, #2
 800371e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003724:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800372a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800372e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003730:	f107 030c 	add.w	r3, r7, #12
 8003734:	2105      	movs	r1, #5
 8003736:	4618      	mov	r0, r3
 8003738:	f002 f92c 	bl	8005994 <HAL_RCC_ClockConfig>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003742:	f000 fa3b 	bl	8003bbc <Error_Handler>
  }
}
 8003746:	bf00      	nop
 8003748:	3750      	adds	r7, #80	; 0x50
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	40007000 	.word	0x40007000

08003758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800375e:	463b      	mov	r3, r7
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800376a:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <MX_ADC1_Init+0x98>)
 800376c:	4a21      	ldr	r2, [pc, #132]	; (80037f4 <MX_ADC1_Init+0x9c>)
 800376e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003770:	4b1f      	ldr	r3, [pc, #124]	; (80037f0 <MX_ADC1_Init+0x98>)
 8003772:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003776:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003778:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <MX_ADC1_Init+0x98>)
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800377e:	4b1c      	ldr	r3, [pc, #112]	; (80037f0 <MX_ADC1_Init+0x98>)
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003784:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <MX_ADC1_Init+0x98>)
 8003786:	2200      	movs	r2, #0
 8003788:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800378a:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <MX_ADC1_Init+0x98>)
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003792:	4b17      	ldr	r3, [pc, #92]	; (80037f0 <MX_ADC1_Init+0x98>)
 8003794:	2200      	movs	r2, #0
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003798:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <MX_ADC1_Init+0x98>)
 800379a:	4a17      	ldr	r2, [pc, #92]	; (80037f8 <MX_ADC1_Init+0xa0>)
 800379c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800379e:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <MX_ADC1_Init+0x98>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80037a4:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <MX_ADC1_Init+0x98>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80037aa:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <MX_ADC1_Init+0x98>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <MX_ADC1_Init+0x98>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037b8:	480d      	ldr	r0, [pc, #52]	; (80037f0 <MX_ADC1_Init+0x98>)
 80037ba:	f000 fdc5 	bl	8004348 <HAL_ADC_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80037c4:	f000 f9fa 	bl	8003bbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80037c8:	2303      	movs	r3, #3
 80037ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80037cc:	2301      	movs	r3, #1
 80037ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037d4:	463b      	mov	r3, r7
 80037d6:	4619      	mov	r1, r3
 80037d8:	4805      	ldr	r0, [pc, #20]	; (80037f0 <MX_ADC1_Init+0x98>)
 80037da:	f001 f82b 	bl	8004834 <HAL_ADC_ConfigChannel>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80037e4:	f000 f9ea 	bl	8003bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	2000050c 	.word	0x2000050c
 80037f4:	40012000 	.word	0x40012000
 80037f8:	0f000001 	.word	0x0f000001

080037fc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003802:	463b      	mov	r3, r7
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800380a:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <MX_DAC_Init+0x4c>)
 800380c:	4a0f      	ldr	r2, [pc, #60]	; (800384c <MX_DAC_Init+0x50>)
 800380e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003810:	480d      	ldr	r0, [pc, #52]	; (8003848 <MX_DAC_Init+0x4c>)
 8003812:	f001 fb48 	bl	8004ea6 <HAL_DAC_Init>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800381c:	f000 f9ce 	bl	8003bbc <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003820:	2300      	movs	r3, #0
 8003822:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003824:	2300      	movs	r3, #0
 8003826:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003828:	463b      	mov	r3, r7
 800382a:	2200      	movs	r2, #0
 800382c:	4619      	mov	r1, r3
 800382e:	4806      	ldr	r0, [pc, #24]	; (8003848 <MX_DAC_Init+0x4c>)
 8003830:	f001 fbc1 	bl	8004fb6 <HAL_DAC_ConfigChannel>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800383a:	f000 f9bf 	bl	8003bbc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	200043d8 	.word	0x200043d8
 800384c:	40007400 	.word	0x40007400

08003850 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003854:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <MX_SPI3_Init+0x64>)
 8003856:	4a18      	ldr	r2, [pc, #96]	; (80038b8 <MX_SPI3_Init+0x68>)
 8003858:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800385a:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <MX_SPI3_Init+0x64>)
 800385c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003860:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003862:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <MX_SPI3_Init+0x64>)
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003868:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <MX_SPI3_Init+0x64>)
 800386a:	2200      	movs	r2, #0
 800386c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800386e:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <MX_SPI3_Init+0x64>)
 8003870:	2200      	movs	r2, #0
 8003872:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <MX_SPI3_Init+0x64>)
 8003876:	2200      	movs	r2, #0
 8003878:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800387a:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <MX_SPI3_Init+0x64>)
 800387c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003880:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003882:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <MX_SPI3_Init+0x64>)
 8003884:	2218      	movs	r2, #24
 8003886:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003888:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <MX_SPI3_Init+0x64>)
 800388a:	2200      	movs	r2, #0
 800388c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <MX_SPI3_Init+0x64>)
 8003890:	2200      	movs	r2, #0
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003894:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <MX_SPI3_Init+0x64>)
 8003896:	2200      	movs	r2, #0
 8003898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <MX_SPI3_Init+0x64>)
 800389c:	220a      	movs	r2, #10
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80038a0:	4804      	ldr	r0, [pc, #16]	; (80038b4 <MX_SPI3_Init+0x64>)
 80038a2:	f002 fa65 	bl	8005d70 <HAL_SPI_Init>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80038ac:	f000 f986 	bl	8003bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80038b0:	bf00      	nop
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	2000028c 	.word	0x2000028c
 80038b8:	40003c00 	.word	0x40003c00

080038bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038c2:	f107 0308 	add.w	r3, r7, #8
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	609a      	str	r2, [r3, #8]
 80038ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d0:	463b      	mov	r3, r7
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038d8:	4b1c      	ldr	r3, [pc, #112]	; (800394c <MX_TIM4_Init+0x90>)
 80038da:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <MX_TIM4_Init+0x94>)
 80038dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 104;
 80038de:	4b1b      	ldr	r3, [pc, #108]	; (800394c <MX_TIM4_Init+0x90>)
 80038e0:	2268      	movs	r2, #104	; 0x68
 80038e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <MX_TIM4_Init+0x90>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49;
 80038ea:	4b18      	ldr	r3, [pc, #96]	; (800394c <MX_TIM4_Init+0x90>)
 80038ec:	2231      	movs	r2, #49	; 0x31
 80038ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f0:	4b16      	ldr	r3, [pc, #88]	; (800394c <MX_TIM4_Init+0x90>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <MX_TIM4_Init+0x90>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80038fc:	4813      	ldr	r0, [pc, #76]	; (800394c <MX_TIM4_Init+0x90>)
 80038fe:	f002 fe2b 	bl	8006558 <HAL_TIM_Base_Init>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8003908:	f000 f958 	bl	8003bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800390c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003912:	f107 0308 	add.w	r3, r7, #8
 8003916:	4619      	mov	r1, r3
 8003918:	480c      	ldr	r0, [pc, #48]	; (800394c <MX_TIM4_Init+0x90>)
 800391a:	f002 ff9f 	bl	800685c <HAL_TIM_ConfigClockSource>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8003924:	f000 f94a 	bl	8003bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003928:	2300      	movs	r3, #0
 800392a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800392c:	2300      	movs	r3, #0
 800392e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003930:	463b      	mov	r3, r7
 8003932:	4619      	mov	r1, r3
 8003934:	4805      	ldr	r0, [pc, #20]	; (800394c <MX_TIM4_Init+0x90>)
 8003936:	f003 f9ab 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003940:	f000 f93c 	bl	8003bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003944:	bf00      	nop
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	2000010c 	.word	0x2000010c
 8003950:	40000800 	.word	0x40000800

08003954 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800395a:	463b      	mov	r3, r7
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003962:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <MX_TIM6_Init+0x60>)
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <MX_TIM6_Init+0x64>)
 8003966:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 249;
 8003968:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <MX_TIM6_Init+0x60>)
 800396a:	22f9      	movs	r2, #249	; 0xf9
 800396c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <MX_TIM6_Init+0x60>)
 8003970:	2200      	movs	r2, #0
 8003972:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20;
 8003974:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <MX_TIM6_Init+0x60>)
 8003976:	2214      	movs	r2, #20
 8003978:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800397a:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <MX_TIM6_Init+0x60>)
 800397c:	2200      	movs	r2, #0
 800397e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003980:	480c      	ldr	r0, [pc, #48]	; (80039b4 <MX_TIM6_Init+0x60>)
 8003982:	f002 fde9 	bl	8006558 <HAL_TIM_Base_Init>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 800398c:	f000 f916 	bl	8003bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003990:	2300      	movs	r3, #0
 8003992:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003994:	2300      	movs	r3, #0
 8003996:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003998:	463b      	mov	r3, r7
 800399a:	4619      	mov	r1, r3
 800399c:	4805      	ldr	r0, [pc, #20]	; (80039b4 <MX_TIM6_Init+0x60>)
 800399e:	f003 f977 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80039a8:	f000 f908 	bl	8003bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	200044ec 	.word	0x200044ec
 80039b8:	40001000 	.word	0x40001000

080039bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c2:	463b      	mov	r3, r7
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <MX_TIM7_Init+0x64>)
 80039cc:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <MX_TIM7_Init+0x68>)
 80039ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <MX_TIM7_Init+0x64>)
 80039d2:	2204      	movs	r2, #4
 80039d4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <MX_TIM7_Init+0x64>)
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 380;
 80039dc:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <MX_TIM7_Init+0x64>)
 80039de:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80039e2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <MX_TIM7_Init+0x64>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80039ea:	480d      	ldr	r0, [pc, #52]	; (8003a20 <MX_TIM7_Init+0x64>)
 80039ec:	f002 fdb4 	bl	8006558 <HAL_TIM_Base_Init>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80039f6:	f000 f8e1 	bl	8003bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003a02:	463b      	mov	r3, r7
 8003a04:	4619      	mov	r1, r3
 8003a06:	4806      	ldr	r0, [pc, #24]	; (8003a20 <MX_TIM7_Init+0x64>)
 8003a08:	f003 f942 	bl	8006c90 <HAL_TIMEx_MasterConfigSynchronization>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003a12:	f000 f8d3 	bl	8003bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	200083f8 	.word	0x200083f8
 8003a24:	40001400 	.word	0x40001400

08003a28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a2e:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <MX_USART3_UART_Init+0x50>)
 8003a30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a4e:	220c      	movs	r2, #12
 8003a50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a5e:	4805      	ldr	r0, [pc, #20]	; (8003a74 <MX_USART3_UART_Init+0x4c>)
 8003a60:	f003 f96f 	bl	8006d42 <HAL_UART_Init>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003a6a:	f000 f8a7 	bl	8003bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	2000014c 	.word	0x2000014c
 8003a78:	40004800 	.word	0x40004800

08003a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a82:	f107 0314 	add.w	r3, r7, #20
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	609a      	str	r2, [r3, #8]
 8003a8e:	60da      	str	r2, [r3, #12]
 8003a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	4a42      	ldr	r2, [pc, #264]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa2:	4b40      	ldr	r3, [pc, #256]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	4b3c      	ldr	r3, [pc, #240]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	4a3b      	ldr	r2, [pc, #236]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6313      	str	r3, [r2, #48]	; 0x30
 8003abe:	4b39      	ldr	r3, [pc, #228]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	4b35      	ldr	r3, [pc, #212]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	4a34      	ldr	r2, [pc, #208]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003ad4:	f043 0302 	orr.w	r3, r3, #2
 8003ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ada:	4b32      	ldr	r3, [pc, #200]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	4a2d      	ldr	r2, [pc, #180]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003af0:	f043 0308 	orr.w	r3, r3, #8
 8003af4:	6313      	str	r3, [r2, #48]	; 0x30
 8003af6:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4b27      	ldr	r3, [pc, #156]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	4a26      	ldr	r2, [pc, #152]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003b0c:	f043 0304 	orr.w	r3, r3, #4
 8003b10:	6313      	str	r3, [r2, #48]	; 0x30
 8003b12:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <MX_GPIO_Init+0x128>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003b24:	4820      	ldr	r0, [pc, #128]	; (8003ba8 <MX_GPIO_Init+0x12c>)
 8003b26:	f001 fc8d 	bl	8005444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b2e:	4b1f      	ldr	r3, [pc, #124]	; (8003bac <MX_GPIO_Init+0x130>)
 8003b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b32:	2302      	movs	r3, #2
 8003b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b36:	f107 0314 	add.w	r3, r7, #20
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	481c      	ldr	r0, [pc, #112]	; (8003bb0 <MX_GPIO_Init+0x134>)
 8003b3e:	f001 facf 	bl	80050e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8003b42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b46:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003b48:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <MX_GPIO_Init+0x138>)
 8003b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b50:	f107 0314 	add.w	r3, r7, #20
 8003b54:	4619      	mov	r1, r3
 8003b56:	4818      	ldr	r0, [pc, #96]	; (8003bb8 <MX_GPIO_Init+0x13c>)
 8003b58:	f001 fac2 	bl	80050e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003b5c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b62:	2301      	movs	r3, #1
 8003b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b6e:	f107 0314 	add.w	r3, r7, #20
 8003b72:	4619      	mov	r1, r3
 8003b74:	480c      	ldr	r0, [pc, #48]	; (8003ba8 <MX_GPIO_Init+0x12c>)
 8003b76:	f001 fab3 	bl	80050e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	2006      	movs	r0, #6
 8003b80:	f001 f95b 	bl	8004e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003b84:	2006      	movs	r0, #6
 8003b86:	f001 f974 	bl	8004e72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	2028      	movs	r0, #40	; 0x28
 8003b90:	f001 f953 	bl	8004e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b94:	2028      	movs	r0, #40	; 0x28
 8003b96:	f001 f96c 	bl	8004e72 <HAL_NVIC_EnableIRQ>

}
 8003b9a:	bf00      	nop
 8003b9c:	3728      	adds	r7, #40	; 0x28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40020c00 	.word	0x40020c00
 8003bac:	10110000 	.word	0x10110000
 8003bb0:	40020000 	.word	0x40020000
 8003bb4:	10310000 	.word	0x10310000
 8003bb8:	40020400 	.word	0x40020400

08003bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	607b      	str	r3, [r7, #4]
 8003bd6:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <HAL_MspInit+0x58>)
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	4a12      	ldr	r2, [pc, #72]	; (8003c24 <HAL_MspInit+0x58>)
 8003bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003be0:	6453      	str	r3, [r2, #68]	; 0x44
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <HAL_MspInit+0x58>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bea:	607b      	str	r3, [r7, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <HAL_MspInit+0x58>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	4a0b      	ldr	r2, [pc, #44]	; (8003c24 <HAL_MspInit+0x58>)
 8003bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfe:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <HAL_MspInit+0x58>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	2001      	movs	r0, #1
 8003c10:	f001 f913 	bl	8004e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003c14:	2001      	movs	r0, #1
 8003c16:	f001 f92c 	bl	8004e72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800

08003c28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	; 0x28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c30:	f107 0314 	add.w	r3, r7, #20
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	605a      	str	r2, [r3, #4]
 8003c3a:	609a      	str	r2, [r3, #8]
 8003c3c:	60da      	str	r2, [r3, #12]
 8003c3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <HAL_ADC_MspInit+0x8c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d12f      	bne.n	8003caa <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <HAL_ADC_MspInit+0x90>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <HAL_ADC_MspInit+0x90>)
 8003c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c58:	6453      	str	r3, [r2, #68]	; 0x44
 8003c5a:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <HAL_ADC_MspInit+0x90>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <HAL_ADC_MspInit+0x90>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <HAL_ADC_MspInit+0x90>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6313      	str	r3, [r2, #48]	; 0x30
 8003c76:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <HAL_ADC_MspInit+0x90>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c82:	2308      	movs	r3, #8
 8003c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c86:	2303      	movs	r3, #3
 8003c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c8e:	f107 0314 	add.w	r3, r7, #20
 8003c92:	4619      	mov	r1, r3
 8003c94:	4809      	ldr	r0, [pc, #36]	; (8003cbc <HAL_ADC_MspInit+0x94>)
 8003c96:	f001 fa23 	bl	80050e0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	2012      	movs	r0, #18
 8003ca0:	f001 f8cb 	bl	8004e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f001 f8e4 	bl	8004e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003caa:	bf00      	nop
 8003cac:	3728      	adds	r7, #40	; 0x28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40012000 	.word	0x40012000
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40020000 	.word	0x40020000

08003cc0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	; 0x28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc8:	f107 0314 	add.w	r3, r7, #20
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <HAL_DAC_MspInit+0x7c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d127      	bne.n	8003d32 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <HAL_DAC_MspInit+0x80>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	4a15      	ldr	r2, [pc, #84]	; (8003d40 <HAL_DAC_MspInit+0x80>)
 8003cec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf2:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <HAL_DAC_MspInit+0x80>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <HAL_DAC_MspInit+0x80>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	4a0e      	ldr	r2, [pc, #56]	; (8003d40 <HAL_DAC_MspInit+0x80>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <HAL_DAC_MspInit+0x80>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003d1a:	2310      	movs	r3, #16
 8003d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d26:	f107 0314 	add.w	r3, r7, #20
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4805      	ldr	r0, [pc, #20]	; (8003d44 <HAL_DAC_MspInit+0x84>)
 8003d2e:	f001 f9d7 	bl	80050e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003d32:	bf00      	nop
 8003d34:	3728      	adds	r7, #40	; 0x28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40007400 	.word	0x40007400
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40020000 	.word	0x40020000

08003d48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d50:	f107 0314 	add.w	r3, r7, #20
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	60da      	str	r2, [r3, #12]
 8003d5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a19      	ldr	r2, [pc, #100]	; (8003dcc <HAL_SPI_MspInit+0x84>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d12b      	bne.n	8003dc2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <HAL_SPI_MspInit+0x88>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	4a17      	ldr	r2, [pc, #92]	; (8003dd0 <HAL_SPI_MspInit+0x88>)
 8003d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d78:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <HAL_SPI_MspInit+0x88>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_SPI_MspInit+0x88>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	4a10      	ldr	r2, [pc, #64]	; (8003dd0 <HAL_SPI_MspInit+0x88>)
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	6313      	str	r3, [r2, #48]	; 0x30
 8003d96:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <HAL_SPI_MspInit+0x88>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003da2:	2338      	movs	r3, #56	; 0x38
 8003da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da6:	2302      	movs	r3, #2
 8003da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dae:	2303      	movs	r3, #3
 8003db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003db2:	2306      	movs	r3, #6
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db6:	f107 0314 	add.w	r3, r7, #20
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4805      	ldr	r0, [pc, #20]	; (8003dd4 <HAL_SPI_MspInit+0x8c>)
 8003dbe:	f001 f98f 	bl	80050e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003dc2:	bf00      	nop
 8003dc4:	3728      	adds	r7, #40	; 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40003c00 	.word	0x40003c00
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40020400 	.word	0x40020400

08003dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <HAL_TIM_Base_MspInit+0xa8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d116      	bne.n	8003e18 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	4b25      	ldr	r3, [pc, #148]	; (8003e84 <HAL_TIM_Base_MspInit+0xac>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	4a24      	ldr	r2, [pc, #144]	; (8003e84 <HAL_TIM_Base_MspInit+0xac>)
 8003df4:	f043 0304 	orr.w	r3, r3, #4
 8003df8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfa:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <HAL_TIM_Base_MspInit+0xac>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2100      	movs	r1, #0
 8003e0a:	201e      	movs	r0, #30
 8003e0c:	f001 f815 	bl	8004e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e10:	201e      	movs	r0, #30
 8003e12:	f001 f82e 	bl	8004e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003e16:	e02e      	b.n	8003e76 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1a      	ldr	r2, [pc, #104]	; (8003e88 <HAL_TIM_Base_MspInit+0xb0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d10e      	bne.n	8003e40 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <HAL_TIM_Base_MspInit+0xac>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	4a16      	ldr	r2, [pc, #88]	; (8003e84 <HAL_TIM_Base_MspInit+0xac>)
 8003e2c:	f043 0310 	orr.w	r3, r3, #16
 8003e30:	6413      	str	r3, [r2, #64]	; 0x40
 8003e32:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <HAL_TIM_Base_MspInit+0xac>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	693b      	ldr	r3, [r7, #16]
}
 8003e3e:	e01a      	b.n	8003e76 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a11      	ldr	r2, [pc, #68]	; (8003e8c <HAL_TIM_Base_MspInit+0xb4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d115      	bne.n	8003e76 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <HAL_TIM_Base_MspInit+0xac>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	4a0c      	ldr	r2, [pc, #48]	; (8003e84 <HAL_TIM_Base_MspInit+0xac>)
 8003e54:	f043 0320 	orr.w	r3, r3, #32
 8003e58:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <HAL_TIM_Base_MspInit+0xac>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003e66:	2200      	movs	r2, #0
 8003e68:	2100      	movs	r1, #0
 8003e6a:	2037      	movs	r0, #55	; 0x37
 8003e6c:	f000 ffe5 	bl	8004e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e70:	2037      	movs	r0, #55	; 0x37
 8003e72:	f000 fffe 	bl	8004e72 <HAL_NVIC_EnableIRQ>
}
 8003e76:	bf00      	nop
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40000800 	.word	0x40000800
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40001000 	.word	0x40001000
 8003e8c:	40001400 	.word	0x40001400

08003e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e98:	f107 0314 	add.w	r3, r7, #20
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1d      	ldr	r2, [pc, #116]	; (8003f24 <HAL_UART_MspInit+0x94>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d134      	bne.n	8003f1c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <HAL_UART_MspInit+0x98>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <HAL_UART_MspInit+0x98>)
 8003ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec2:	4b19      	ldr	r3, [pc, #100]	; (8003f28 <HAL_UART_MspInit+0x98>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <HAL_UART_MspInit+0x98>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	4a14      	ldr	r2, [pc, #80]	; (8003f28 <HAL_UART_MspInit+0x98>)
 8003ed8:	f043 0304 	orr.w	r3, r3, #4
 8003edc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ede:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <HAL_UART_MspInit+0x98>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003eea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003efc:	2307      	movs	r3, #7
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	4619      	mov	r1, r3
 8003f06:	4809      	ldr	r0, [pc, #36]	; (8003f2c <HAL_UART_MspInit+0x9c>)
 8003f08:	f001 f8ea 	bl	80050e0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2100      	movs	r1, #0
 8003f10:	2027      	movs	r0, #39	; 0x27
 8003f12:	f000 ff92 	bl	8004e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003f16:	2027      	movs	r0, #39	; 0x27
 8003f18:	f000 ffab 	bl	8004e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f1c:	bf00      	nop
 8003f1e:	3728      	adds	r7, #40	; 0x28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40004800 	.word	0x40004800
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40020800 	.word	0x40020800

08003f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f34:	bf00      	nop
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f42:	e7fe      	b.n	8003f42 <HardFault_Handler+0x4>

08003f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f48:	e7fe      	b.n	8003f48 <MemManage_Handler+0x4>

08003f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f4e:	e7fe      	b.n	8003f4e <BusFault_Handler+0x4>

08003f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f54:	e7fe      	b.n	8003f54 <UsageFault_Handler+0x4>

08003f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f56:	b480      	push	{r7}
 8003f58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f72:	b480      	push	{r7}
 8003f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8003f84:	f7fc ffee 	bl	8000f64 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f88:	f000 f99c 	bl	80042c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f8c:	bf00      	nop
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003f94:	f001 faa2 	bl	80054dc <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	f001 fa83 	bl	80054ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003fb0:	4802      	ldr	r0, [pc, #8]	; (8003fbc <ADC_IRQHandler+0x10>)
 8003fb2:	f000 fadd 	bl	8004570 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	2000050c 	.word	0x2000050c

08003fc0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003fc4:	4802      	ldr	r0, [pc, #8]	; (8003fd0 <TIM4_IRQHandler+0x10>)
 8003fc6:	f002 fb41 	bl	800664c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	2000010c 	.word	0x2000010c

08003fd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003fd8:	4802      	ldr	r0, [pc, #8]	; (8003fe4 <USART3_IRQHandler+0x10>)
 8003fda:	f002 feff 	bl	8006ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003fde:	bf00      	nop
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	2000014c 	.word	0x2000014c

08003fe8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003fec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003ff0:	f001 fa5c 	bl	80054ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003ff4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ff8:	f001 fa58 	bl	80054ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003ffc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004000:	f001 fa54 	bl	80054ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004004:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004008:	f001 fa50 	bl	80054ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800400c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004010:	f001 fa4c 	bl	80054ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004014:	bf00      	nop
 8004016:	bd80      	pop	{r7, pc}

08004018 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800401c:	4802      	ldr	r0, [pc, #8]	; (8004028 <TIM7_IRQHandler+0x10>)
 800401e:	f002 fb15 	bl	800664c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	200083f8 	.word	0x200083f8

0800402c <_read>:
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	e00a      	b.n	8004054 <_read+0x28>
 800403e:	f3af 8000 	nop.w
 8004042:	4601      	mov	r1, r0
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	60ba      	str	r2, [r7, #8]
 800404a:	b2ca      	uxtb	r2, r1
 800404c:	701a      	strb	r2, [r3, #0]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	3301      	adds	r3, #1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	429a      	cmp	r2, r3
 800405a:	dbf0      	blt.n	800403e <_read+0x12>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <_write>:
 8004066:	b580      	push	{r7, lr}
 8004068:	b086      	sub	sp, #24
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e009      	b.n	800408c <_write+0x26>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	60ba      	str	r2, [r7, #8]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f3af 8000 	nop.w
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	3301      	adds	r3, #1
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	429a      	cmp	r2, r3
 8004092:	dbf1      	blt.n	8004078 <_write+0x12>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <_close>:
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	f04f 33ff 	mov.w	r3, #4294967295
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <_fstat>:
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040c6:	605a      	str	r2, [r3, #4]
 80040c8:	2300      	movs	r3, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <_isatty>:
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	2301      	movs	r3, #1
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <_lseek>:
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	2300      	movs	r3, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <_sbrk>:
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	4b11      	ldr	r3, [pc, #68]	; (8004158 <_sbrk+0x50>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d102      	bne.n	800411e <_sbrk+0x16>
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <_sbrk+0x50>)
 800411a:	4a10      	ldr	r2, [pc, #64]	; (800415c <_sbrk+0x54>)
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <_sbrk+0x50>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <_sbrk+0x50>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4413      	add	r3, r2
 800412c:	466a      	mov	r2, sp
 800412e:	4293      	cmp	r3, r2
 8004130:	d907      	bls.n	8004142 <_sbrk+0x3a>
 8004132:	f003 fa8f 	bl	8007654 <__errno>
 8004136:	4602      	mov	r2, r0
 8004138:	230c      	movs	r3, #12
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	f04f 33ff 	mov.w	r3, #4294967295
 8004140:	e006      	b.n	8004150 <_sbrk+0x48>
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <_sbrk+0x50>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4413      	add	r3, r2
 800414a:	4a03      	ldr	r2, [pc, #12]	; (8004158 <_sbrk+0x50>)
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	200000d4 	.word	0x200000d4
 800415c:	20008440 	.word	0x20008440

08004160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004164:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <SystemInit+0x60>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416a:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <SystemInit+0x60>)
 800416c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004174:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <SystemInit+0x64>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a12      	ldr	r2, [pc, #72]	; (80041c4 <SystemInit+0x64>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004180:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <SystemInit+0x64>)
 8004182:	2200      	movs	r2, #0
 8004184:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004186:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <SystemInit+0x64>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a0e      	ldr	r2, [pc, #56]	; (80041c4 <SystemInit+0x64>)
 800418c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004194:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <SystemInit+0x64>)
 8004198:	4a0b      	ldr	r2, [pc, #44]	; (80041c8 <SystemInit+0x68>)
 800419a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800419c:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <SystemInit+0x64>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <SystemInit+0x64>)
 80041a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <SystemInit+0x64>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041ae:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <SystemInit+0x60>)
 80041b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041b4:	609a      	str	r2, [r3, #8]
#endif
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	e000ed00 	.word	0xe000ed00
 80041c4:	40023800 	.word	0x40023800
 80041c8:	24003010 	.word	0x24003010

080041cc <Reset_Handler>:
 80041cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004204 <LoopFillZerobss+0x14>
 80041d0:	2100      	movs	r1, #0
 80041d2:	e003      	b.n	80041dc <LoopCopyDataInit>

080041d4 <CopyDataInit>:
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <LoopFillZerobss+0x18>)
 80041d6:	585b      	ldr	r3, [r3, r1]
 80041d8:	5043      	str	r3, [r0, r1]
 80041da:	3104      	adds	r1, #4

080041dc <LoopCopyDataInit>:
 80041dc:	480b      	ldr	r0, [pc, #44]	; (800420c <LoopFillZerobss+0x1c>)
 80041de:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <LoopFillZerobss+0x20>)
 80041e0:	1842      	adds	r2, r0, r1
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d3f6      	bcc.n	80041d4 <CopyDataInit>
 80041e6:	4a0b      	ldr	r2, [pc, #44]	; (8004214 <LoopFillZerobss+0x24>)
 80041e8:	e002      	b.n	80041f0 <LoopFillZerobss>

080041ea <FillZerobss>:
 80041ea:	2300      	movs	r3, #0
 80041ec:	f842 3b04 	str.w	r3, [r2], #4

080041f0 <LoopFillZerobss>:
 80041f0:	4b09      	ldr	r3, [pc, #36]	; (8004218 <LoopFillZerobss+0x28>)
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d3f9      	bcc.n	80041ea <FillZerobss>
 80041f6:	f7ff ffb3 	bl	8004160 <SystemInit>
 80041fa:	f003 fa31 	bl	8007660 <__libc_init_array>
 80041fe:	f7ff f9ed 	bl	80035dc <main>
 8004202:	4770      	bx	lr
 8004204:	20020000 	.word	0x20020000
 8004208:	0800806c 	.word	0x0800806c
 800420c:	20000000 	.word	0x20000000
 8004210:	2000007c 	.word	0x2000007c
 8004214:	2000007c 	.word	0x2000007c
 8004218:	20008440 	.word	0x20008440

0800421c <CAN1_RX0_IRQHandler>:
 800421c:	e7fe      	b.n	800421c <CAN1_RX0_IRQHandler>
	...

08004220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004224:	4b0e      	ldr	r3, [pc, #56]	; (8004260 <HAL_Init+0x40>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a0d      	ldr	r2, [pc, #52]	; (8004260 <HAL_Init+0x40>)
 800422a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_Init+0x40>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <HAL_Init+0x40>)
 8004236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800423a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800423c:	4b08      	ldr	r3, [pc, #32]	; (8004260 <HAL_Init+0x40>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a07      	ldr	r2, [pc, #28]	; (8004260 <HAL_Init+0x40>)
 8004242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004248:	2003      	movs	r0, #3
 800424a:	f000 fdeb 	bl	8004e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800424e:	2000      	movs	r0, #0
 8004250:	f000 f808 	bl	8004264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004254:	f7ff fcba 	bl	8003bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40023c00 	.word	0x40023c00

08004264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_InitTick+0x54>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b12      	ldr	r3, [pc, #72]	; (80042bc <HAL_InitTick+0x58>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	4619      	mov	r1, r3
 8004276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800427a:	fbb3 f3f1 	udiv	r3, r3, r1
 800427e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fe03 	bl	8004e8e <HAL_SYSTICK_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e00e      	b.n	80042b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b0f      	cmp	r3, #15
 8004296:	d80a      	bhi.n	80042ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004298:	2200      	movs	r2, #0
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	f04f 30ff 	mov.w	r0, #4294967295
 80042a0:	f000 fdcb 	bl	8004e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042a4:	4a06      	ldr	r2, [pc, #24]	; (80042c0 <HAL_InitTick+0x5c>)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e000      	b.n	80042b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	2000000c 	.word	0x2000000c
 80042bc:	20000014 	.word	0x20000014
 80042c0:	20000010 	.word	0x20000010

080042c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <HAL_IncTick+0x20>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_IncTick+0x24>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4413      	add	r3, r2
 80042d4:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <HAL_IncTick+0x24>)
 80042d6:	6013      	str	r3, [r2, #0]
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20000014 	.word	0x20000014
 80042e8:	20008438 	.word	0x20008438

080042ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return uwTick;
 80042f0:	4b03      	ldr	r3, [pc, #12]	; (8004300 <HAL_GetTick+0x14>)
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20008438 	.word	0x20008438

08004304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800430c:	f7ff ffee 	bl	80042ec <HAL_GetTick>
 8004310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d005      	beq.n	800432a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800431e:	4b09      	ldr	r3, [pc, #36]	; (8004344 <HAL_Delay+0x40>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800432a:	bf00      	nop
 800432c:	f7ff ffde 	bl	80042ec <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	429a      	cmp	r2, r3
 800433a:	d8f7      	bhi.n	800432c <HAL_Delay+0x28>
  {
  }
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000014 	.word	0x20000014

08004348 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e033      	b.n	80043c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff fc5e 	bl	8003c28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b00      	cmp	r3, #0
 8004384:	d118      	bne.n	80043b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800438e:	f023 0302 	bic.w	r3, r3, #2
 8004392:	f043 0202 	orr.w	r2, r3, #2
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fb6c 	bl	8004a78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f023 0303 	bic.w	r3, r3, #3
 80043ae:	f043 0201 	orr.w	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
 80043b6:	e001      	b.n	80043bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_ADC_Start_IT+0x1a>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e0b0      	b.n	800454c <HAL_ADC_Start_IT+0x17c>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d018      	beq.n	8004432 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004410:	4b51      	ldr	r3, [pc, #324]	; (8004558 <HAL_ADC_Start_IT+0x188>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a51      	ldr	r2, [pc, #324]	; (800455c <HAL_ADC_Start_IT+0x18c>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	0c9a      	lsrs	r2, r3, #18
 800441c:	4613      	mov	r3, r2
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004424:	e002      	b.n	800442c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	3b01      	subs	r3, #1
 800442a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f9      	bne.n	8004426 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	f040 8084 	bne.w	800454a <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800444a:	f023 0301 	bic.w	r3, r3, #1
 800444e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004460:	2b00      	cmp	r3, #0
 8004462:	d007      	beq.n	8004474 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800446c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004480:	d106      	bne.n	8004490 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	f023 0206 	bic.w	r2, r3, #6
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	645a      	str	r2, [r3, #68]	; 0x44
 800448e:	e002      	b.n	8004496 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800449e:	4b30      	ldr	r3, [pc, #192]	; (8004560 <HAL_ADC_Start_IT+0x190>)
 80044a0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80044aa:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ba:	f043 0320 	orr.w	r3, r3, #32
 80044be:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d12a      	bne.n	8004522 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a24      	ldr	r2, [pc, #144]	; (8004564 <HAL_ADC_Start_IT+0x194>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d015      	beq.n	8004502 <HAL_ADC_Start_IT+0x132>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a23      	ldr	r2, [pc, #140]	; (8004568 <HAL_ADC_Start_IT+0x198>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d105      	bne.n	80044ec <HAL_ADC_Start_IT+0x11c>
 80044e0:	4b1f      	ldr	r3, [pc, #124]	; (8004560 <HAL_ADC_Start_IT+0x190>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1e      	ldr	r2, [pc, #120]	; (800456c <HAL_ADC_Start_IT+0x19c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d129      	bne.n	800454a <HAL_ADC_Start_IT+0x17a>
 80044f6:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <HAL_ADC_Start_IT+0x190>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2b0f      	cmp	r3, #15
 8004500:	d823      	bhi.n	800454a <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11c      	bne.n	800454a <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800451e:	609a      	str	r2, [r3, #8]
 8004520:	e013      	b.n	800454a <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a0f      	ldr	r2, [pc, #60]	; (8004564 <HAL_ADC_Start_IT+0x194>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d10e      	bne.n	800454a <HAL_ADC_Start_IT+0x17a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d107      	bne.n	800454a <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004548:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	2000000c 	.word	0x2000000c
 800455c:	431bde83 	.word	0x431bde83
 8004560:	40012300 	.word	0x40012300
 8004564:	40012000 	.word	0x40012000
 8004568:	40012100 	.word	0x40012100
 800456c:	40012200 	.word	0x40012200

08004570 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	2300      	movs	r3, #0
 800457e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b02      	cmp	r3, #2
 800458c:	bf0c      	ite	eq
 800458e:	2301      	moveq	r3, #1
 8004590:	2300      	movne	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d049      	beq.n	8004646 <HAL_ADC_IRQHandler+0xd6>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d046      	beq.n	8004646 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d12b      	bne.n	8004636 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d127      	bne.n	8004636 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d006      	beq.n	8004602 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d119      	bne.n	8004636 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0220 	bic.w	r2, r2, #32
 8004610:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fe fdfe 	bl	8003238 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0212 	mvn.w	r2, #18
 8004644:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b04      	cmp	r3, #4
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b80      	cmp	r3, #128	; 0x80
 8004668:	bf0c      	ite	eq
 800466a:	2301      	moveq	r3, #1
 800466c:	2300      	movne	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d057      	beq.n	8004728 <HAL_ADC_IRQHandler+0x1b8>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d054      	beq.n	8004728 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b00      	cmp	r3, #0
 8004688:	d105      	bne.n	8004696 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d139      	bne.n	8004718 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d006      	beq.n	80046c0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d12b      	bne.n	8004718 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d124      	bne.n	8004718 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d11d      	bne.n	8004718 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d119      	bne.n	8004718 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	f043 0201 	orr.w	r2, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 faa9 	bl	8004c70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f06f 020c 	mvn.w	r2, #12
 8004726:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b01      	cmp	r3, #1
 8004734:	bf0c      	ite	eq
 8004736:	2301      	moveq	r3, #1
 8004738:	2300      	movne	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b40      	cmp	r3, #64	; 0x40
 800474a:	bf0c      	ite	eq
 800474c:	2301      	moveq	r3, #1
 800474e:	2300      	movne	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d017      	beq.n	800478a <HAL_ADC_IRQHandler+0x21a>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d014      	beq.n	800478a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b01      	cmp	r3, #1
 800476c:	d10d      	bne.n	800478a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f846 	bl	800480c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0201 	mvn.w	r2, #1
 8004788:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b20      	cmp	r3, #32
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d015      	beq.n	80047ea <HAL_ADC_IRQHandler+0x27a>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d012      	beq.n	80047ea <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c8:	f043 0202 	orr.w	r2, r3, #2
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0220 	mvn.w	r2, #32
 80047d8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f820 	bl	8004820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0220 	mvn.w	r2, #32
 80047e8:	601a      	str	r2, [r3, #0]
  }
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x1c>
 800484c:	2302      	movs	r3, #2
 800484e:	e105      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x228>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b09      	cmp	r3, #9
 800485e:	d925      	bls.n	80048ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68d9      	ldr	r1, [r3, #12]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	b29b      	uxth	r3, r3
 800486c:	461a      	mov	r2, r3
 800486e:	4613      	mov	r3, r2
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4413      	add	r3, r2
 8004874:	3b1e      	subs	r3, #30
 8004876:	2207      	movs	r2, #7
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	43da      	mvns	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	400a      	ands	r2, r1
 8004884:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68d9      	ldr	r1, [r3, #12]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	4618      	mov	r0, r3
 8004898:	4603      	mov	r3, r0
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	4403      	add	r3, r0
 800489e:	3b1e      	subs	r3, #30
 80048a0:	409a      	lsls	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	60da      	str	r2, [r3, #12]
 80048aa:	e022      	b.n	80048f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6919      	ldr	r1, [r3, #16]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	2207      	movs	r2, #7
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	43da      	mvns	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	400a      	ands	r2, r1
 80048ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6919      	ldr	r1, [r3, #16]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	4618      	mov	r0, r3
 80048e2:	4603      	mov	r3, r0
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	4403      	add	r3, r0
 80048e8:	409a      	lsls	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b06      	cmp	r3, #6
 80048f8:	d824      	bhi.n	8004944 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	3b05      	subs	r3, #5
 800490c:	221f      	movs	r2, #31
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43da      	mvns	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	400a      	ands	r2, r1
 800491a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	4618      	mov	r0, r3
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	3b05      	subs	r3, #5
 8004936:	fa00 f203 	lsl.w	r2, r0, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	635a      	str	r2, [r3, #52]	; 0x34
 8004942:	e04c      	b.n	80049de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b0c      	cmp	r3, #12
 800494a:	d824      	bhi.n	8004996 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	3b23      	subs	r3, #35	; 0x23
 800495e:	221f      	movs	r2, #31
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	43da      	mvns	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	400a      	ands	r2, r1
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	b29b      	uxth	r3, r3
 800497a:	4618      	mov	r0, r3
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	3b23      	subs	r3, #35	; 0x23
 8004988:	fa00 f203 	lsl.w	r2, r0, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
 8004994:	e023      	b.n	80049de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	3b41      	subs	r3, #65	; 0x41
 80049a8:	221f      	movs	r2, #31
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43da      	mvns	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	400a      	ands	r2, r1
 80049b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	4618      	mov	r0, r3
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	3b41      	subs	r3, #65	; 0x41
 80049d2:	fa00 f203 	lsl.w	r2, r0, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049de:	4b22      	ldr	r3, [pc, #136]	; (8004a68 <HAL_ADC_ConfigChannel+0x234>)
 80049e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a21      	ldr	r2, [pc, #132]	; (8004a6c <HAL_ADC_ConfigChannel+0x238>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d109      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x1cc>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b12      	cmp	r3, #18
 80049f2:	d105      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a19      	ldr	r2, [pc, #100]	; (8004a6c <HAL_ADC_ConfigChannel+0x238>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d123      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x21e>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b10      	cmp	r3, #16
 8004a10:	d003      	beq.n	8004a1a <HAL_ADC_ConfigChannel+0x1e6>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b11      	cmp	r3, #17
 8004a18:	d11b      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d111      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <HAL_ADC_ConfigChannel+0x23c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <HAL_ADC_ConfigChannel+0x240>)
 8004a34:	fba2 2303 	umull	r2, r3, r2, r3
 8004a38:	0c9a      	lsrs	r2, r3, #18
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a44:	e002      	b.n	8004a4c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f9      	bne.n	8004a46 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40012300 	.word	0x40012300
 8004a6c:	40012000 	.word	0x40012000
 8004a70:	2000000c 	.word	0x2000000c
 8004a74:	431bde83 	.word	0x431bde83

08004a78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a80:	4b79      	ldr	r3, [pc, #484]	; (8004c68 <ADC_Init+0x1f0>)
 8004a82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6859      	ldr	r1, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	021a      	lsls	r2, r3, #8
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ad0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6859      	ldr	r1, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6899      	ldr	r1, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	4a58      	ldr	r2, [pc, #352]	; (8004c6c <ADC_Init+0x1f4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d022      	beq.n	8004b56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6899      	ldr	r1, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6899      	ldr	r1, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	609a      	str	r2, [r3, #8]
 8004b54:	e00f      	b.n	8004b76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0202 	bic.w	r2, r2, #2
 8004b84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6899      	ldr	r1, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	7e1b      	ldrb	r3, [r3, #24]
 8004b90:	005a      	lsls	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01b      	beq.n	8004bdc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004bc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6859      	ldr	r1, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	035a      	lsls	r2, r3, #13
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
 8004bda:	e007      	b.n	8004bec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	051a      	lsls	r2, r3, #20
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6899      	ldr	r1, [r3, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c2e:	025a      	lsls	r2, r3, #9
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6899      	ldr	r1, [r3, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	029a      	lsls	r2, r3, #10
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	609a      	str	r2, [r3, #8]
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	40012300 	.word	0x40012300
 8004c6c:	0f000001 	.word	0x0f000001

08004c70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cb6:	4a04      	ldr	r2, [pc, #16]	; (8004cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	60d3      	str	r3, [r2, #12]
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	e000ed00 	.word	0xe000ed00

08004ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cd0:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	0a1b      	lsrs	r3, r3, #8
 8004cd6:	f003 0307 	and.w	r3, r3, #7
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	e000ed00 	.word	0xe000ed00

08004ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	db0b      	blt.n	8004d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	f003 021f 	and.w	r2, r3, #31
 8004d00:	4907      	ldr	r1, [pc, #28]	; (8004d20 <__NVIC_EnableIRQ+0x38>)
 8004d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	2001      	movs	r0, #1
 8004d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	e000e100 	.word	0xe000e100

08004d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	6039      	str	r1, [r7, #0]
 8004d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	db0a      	blt.n	8004d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	490c      	ldr	r1, [pc, #48]	; (8004d70 <__NVIC_SetPriority+0x4c>)
 8004d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d42:	0112      	lsls	r2, r2, #4
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	440b      	add	r3, r1
 8004d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d4c:	e00a      	b.n	8004d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	4908      	ldr	r1, [pc, #32]	; (8004d74 <__NVIC_SetPriority+0x50>)
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	3b04      	subs	r3, #4
 8004d5c:	0112      	lsls	r2, r2, #4
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	440b      	add	r3, r1
 8004d62:	761a      	strb	r2, [r3, #24]
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	e000e100 	.word	0xe000e100
 8004d74:	e000ed00 	.word	0xe000ed00

08004d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b089      	sub	sp, #36	; 0x24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f1c3 0307 	rsb	r3, r3, #7
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	bf28      	it	cs
 8004d96:	2304      	movcs	r3, #4
 8004d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	2b06      	cmp	r3, #6
 8004da0:	d902      	bls.n	8004da8 <NVIC_EncodePriority+0x30>
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	3b03      	subs	r3, #3
 8004da6:	e000      	b.n	8004daa <NVIC_EncodePriority+0x32>
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dac:	f04f 32ff 	mov.w	r2, #4294967295
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	43da      	mvns	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	401a      	ands	r2, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dca:	43d9      	mvns	r1, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dd0:	4313      	orrs	r3, r2
         );
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3724      	adds	r7, #36	; 0x24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
	...

08004de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004df0:	d301      	bcc.n	8004df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004df2:	2301      	movs	r3, #1
 8004df4:	e00f      	b.n	8004e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004df6:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <SysTick_Config+0x40>)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dfe:	210f      	movs	r1, #15
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295
 8004e04:	f7ff ff8e 	bl	8004d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <SysTick_Config+0x40>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e0e:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <SysTick_Config+0x40>)
 8004e10:	2207      	movs	r2, #7
 8004e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	e000e010 	.word	0xe000e010

08004e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff ff29 	bl	8004c84 <__NVIC_SetPriorityGrouping>
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b086      	sub	sp, #24
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	4603      	mov	r3, r0
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
 8004e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e4c:	f7ff ff3e 	bl	8004ccc <__NVIC_GetPriorityGrouping>
 8004e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	6978      	ldr	r0, [r7, #20]
 8004e58:	f7ff ff8e 	bl	8004d78 <NVIC_EncodePriority>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e62:	4611      	mov	r1, r2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff ff5d 	bl	8004d24 <__NVIC_SetPriority>
}
 8004e6a:	bf00      	nop
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	4603      	mov	r3, r0
 8004e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff ff31 	bl	8004ce8 <__NVIC_EnableIRQ>
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff ffa2 	bl	8004de0 <SysTick_Config>
 8004e9c:	4603      	mov	r3, r0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e014      	b.n	8004ee2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	791b      	ldrb	r3, [r3, #4]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7fe fef9 	bl	8003cc0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	795b      	ldrb	r3, [r3, #5]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_DAC_Start+0x1e>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e050      	b.n	8004faa <HAL_DAC_Start+0xc0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6819      	ldr	r1, [r3, #0]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d11a      	bne.n	8004f64 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f44:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d127      	bne.n	8004f9c <HAL_DAC_Start+0xb2>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b38      	cmp	r3, #56	; 0x38
 8004f50:	d124      	bne.n	8004f9c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0201 	orr.w	r2, r2, #1
 8004f60:	605a      	str	r2, [r3, #4]
 8004f62:	e01b      	b.n	8004f9c <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f6e:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8004f7a:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f82:	d10b      	bne.n	8004f9c <HAL_DAC_Start+0xb2>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004f8a:	d107      	bne.n	8004f9c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0202 	orr.w	r2, r2, #2
 8004f9a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b087      	sub	sp, #28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	795b      	ldrb	r3, [r3, #5]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_DAC_ConfigChannel+0x20>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e036      	b.n	8005044 <HAL_DAC_ConfigChannel+0x8e>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004fea:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6819      	ldr	r1, [r3, #0]
 8005024:	22c0      	movs	r2, #192	; 0xc0
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43da      	mvns	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	400a      	ands	r2, r1
 8005034:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	371c      	adds	r7, #28
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4413      	add	r3, r2
 8005074:	3308      	adds	r3, #8
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	e004      	b.n	8005084 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4413      	add	r3, r2
 8005080:	3314      	adds	r3, #20
 8005082:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	461a      	mov	r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d004      	beq.n	80050b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2280      	movs	r2, #128	; 0x80
 80050b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e00c      	b.n	80050d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2205      	movs	r2, #5
 80050bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0201 	bic.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
	...

080050e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b089      	sub	sp, #36	; 0x24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	e16b      	b.n	80053d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050fc:	2201      	movs	r2, #1
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4013      	ands	r3, r2
 800510e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	429a      	cmp	r2, r3
 8005116:	f040 815a 	bne.w	80053ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d003      	beq.n	800512a <HAL_GPIO_Init+0x4a>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b12      	cmp	r3, #18
 8005128:	d123      	bne.n	8005172 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	08da      	lsrs	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3208      	adds	r2, #8
 8005132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	220f      	movs	r2, #15
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	4013      	ands	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4313      	orrs	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	08da      	lsrs	r2, r3, #3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3208      	adds	r2, #8
 800516c:	69b9      	ldr	r1, [r7, #24]
 800516e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	2203      	movs	r2, #3
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43db      	mvns	r3, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	4013      	ands	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f003 0203 	and.w	r2, r3, #3
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4313      	orrs	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d00b      	beq.n	80051c6 <HAL_GPIO_Init+0xe6>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d007      	beq.n	80051c6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051ba:	2b11      	cmp	r3, #17
 80051bc:	d003      	beq.n	80051c6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b12      	cmp	r3, #18
 80051c4:	d130      	bne.n	8005228 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	2203      	movs	r2, #3
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	43db      	mvns	r3, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4013      	ands	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051fc:	2201      	movs	r2, #1
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	43db      	mvns	r3, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4013      	ands	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	f003 0201 	and.w	r2, r3, #1
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4313      	orrs	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	2203      	movs	r2, #3
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	4313      	orrs	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 80b4 	beq.w	80053ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	4b5f      	ldr	r3, [pc, #380]	; (80053e8 <HAL_GPIO_Init+0x308>)
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	4a5e      	ldr	r2, [pc, #376]	; (80053e8 <HAL_GPIO_Init+0x308>)
 8005270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005274:	6453      	str	r3, [r2, #68]	; 0x44
 8005276:	4b5c      	ldr	r3, [pc, #368]	; (80053e8 <HAL_GPIO_Init+0x308>)
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005282:	4a5a      	ldr	r2, [pc, #360]	; (80053ec <HAL_GPIO_Init+0x30c>)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	089b      	lsrs	r3, r3, #2
 8005288:	3302      	adds	r3, #2
 800528a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	220f      	movs	r2, #15
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43db      	mvns	r3, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	4013      	ands	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a51      	ldr	r2, [pc, #324]	; (80053f0 <HAL_GPIO_Init+0x310>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d02b      	beq.n	8005306 <HAL_GPIO_Init+0x226>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a50      	ldr	r2, [pc, #320]	; (80053f4 <HAL_GPIO_Init+0x314>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d025      	beq.n	8005302 <HAL_GPIO_Init+0x222>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a4f      	ldr	r2, [pc, #316]	; (80053f8 <HAL_GPIO_Init+0x318>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01f      	beq.n	80052fe <HAL_GPIO_Init+0x21e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a4e      	ldr	r2, [pc, #312]	; (80053fc <HAL_GPIO_Init+0x31c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d019      	beq.n	80052fa <HAL_GPIO_Init+0x21a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a4d      	ldr	r2, [pc, #308]	; (8005400 <HAL_GPIO_Init+0x320>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <HAL_GPIO_Init+0x216>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a4c      	ldr	r2, [pc, #304]	; (8005404 <HAL_GPIO_Init+0x324>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00d      	beq.n	80052f2 <HAL_GPIO_Init+0x212>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a4b      	ldr	r2, [pc, #300]	; (8005408 <HAL_GPIO_Init+0x328>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d007      	beq.n	80052ee <HAL_GPIO_Init+0x20e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a4a      	ldr	r2, [pc, #296]	; (800540c <HAL_GPIO_Init+0x32c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d101      	bne.n	80052ea <HAL_GPIO_Init+0x20a>
 80052e6:	2307      	movs	r3, #7
 80052e8:	e00e      	b.n	8005308 <HAL_GPIO_Init+0x228>
 80052ea:	2308      	movs	r3, #8
 80052ec:	e00c      	b.n	8005308 <HAL_GPIO_Init+0x228>
 80052ee:	2306      	movs	r3, #6
 80052f0:	e00a      	b.n	8005308 <HAL_GPIO_Init+0x228>
 80052f2:	2305      	movs	r3, #5
 80052f4:	e008      	b.n	8005308 <HAL_GPIO_Init+0x228>
 80052f6:	2304      	movs	r3, #4
 80052f8:	e006      	b.n	8005308 <HAL_GPIO_Init+0x228>
 80052fa:	2303      	movs	r3, #3
 80052fc:	e004      	b.n	8005308 <HAL_GPIO_Init+0x228>
 80052fe:	2302      	movs	r3, #2
 8005300:	e002      	b.n	8005308 <HAL_GPIO_Init+0x228>
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <HAL_GPIO_Init+0x228>
 8005306:	2300      	movs	r3, #0
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	f002 0203 	and.w	r2, r2, #3
 800530e:	0092      	lsls	r2, r2, #2
 8005310:	4093      	lsls	r3, r2
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4313      	orrs	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005318:	4934      	ldr	r1, [pc, #208]	; (80053ec <HAL_GPIO_Init+0x30c>)
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	089b      	lsrs	r3, r3, #2
 800531e:	3302      	adds	r3, #2
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005326:	4b3a      	ldr	r3, [pc, #232]	; (8005410 <HAL_GPIO_Init+0x330>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	43db      	mvns	r3, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4013      	ands	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800534a:	4a31      	ldr	r2, [pc, #196]	; (8005410 <HAL_GPIO_Init+0x330>)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005350:	4b2f      	ldr	r3, [pc, #188]	; (8005410 <HAL_GPIO_Init+0x330>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	43db      	mvns	r3, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4013      	ands	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005374:	4a26      	ldr	r2, [pc, #152]	; (8005410 <HAL_GPIO_Init+0x330>)
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800537a:	4b25      	ldr	r3, [pc, #148]	; (8005410 <HAL_GPIO_Init+0x330>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	43db      	mvns	r3, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4013      	ands	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800539e:	4a1c      	ldr	r2, [pc, #112]	; (8005410 <HAL_GPIO_Init+0x330>)
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053a4:	4b1a      	ldr	r3, [pc, #104]	; (8005410 <HAL_GPIO_Init+0x330>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	43db      	mvns	r3, r3
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4013      	ands	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053c8:	4a11      	ldr	r2, [pc, #68]	; (8005410 <HAL_GPIO_Init+0x330>)
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	3301      	adds	r3, #1
 80053d2:	61fb      	str	r3, [r7, #28]
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	2b0f      	cmp	r3, #15
 80053d8:	f67f ae90 	bls.w	80050fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053dc:	bf00      	nop
 80053de:	3724      	adds	r7, #36	; 0x24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40013800 	.word	0x40013800
 80053f0:	40020000 	.word	0x40020000
 80053f4:	40020400 	.word	0x40020400
 80053f8:	40020800 	.word	0x40020800
 80053fc:	40020c00 	.word	0x40020c00
 8005400:	40021000 	.word	0x40021000
 8005404:	40021400 	.word	0x40021400
 8005408:	40021800 	.word	0x40021800
 800540c:	40021c00 	.word	0x40021c00
 8005410:	40013c00 	.word	0x40013c00

08005414 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	887b      	ldrh	r3, [r7, #2]
 8005426:	4013      	ands	r3, r2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800542c:	2301      	movs	r3, #1
 800542e:	73fb      	strb	r3, [r7, #15]
 8005430:	e001      	b.n	8005436 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005436:	7bfb      	ldrb	r3, [r7, #15]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	807b      	strh	r3, [r7, #2]
 8005450:	4613      	mov	r3, r2
 8005452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005454:	787b      	ldrb	r3, [r7, #1]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800545a:	887a      	ldrh	r2, [r7, #2]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005460:	e003      	b.n	800546a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005462:	887b      	ldrh	r3, [r7, #2]
 8005464:	041a      	lsls	r2, r3, #16
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	619a      	str	r2, [r3, #24]
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	460b      	mov	r3, r1
 8005480:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	887b      	ldrh	r3, [r7, #2]
 8005488:	401a      	ands	r2, r3
 800548a:	887b      	ldrh	r3, [r7, #2]
 800548c:	429a      	cmp	r2, r3
 800548e:	d104      	bne.n	800549a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005490:	887b      	ldrh	r3, [r7, #2]
 8005492:	041a      	lsls	r2, r3, #16
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005498:	e002      	b.n	80054a0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800549a:	887a      	ldrh	r2, [r7, #2]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	619a      	str	r2, [r3, #24]
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054b6:	4b08      	ldr	r3, [pc, #32]	; (80054d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054b8:	695a      	ldr	r2, [r3, #20]
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	4013      	ands	r3, r2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d006      	beq.n	80054d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054c2:	4a05      	ldr	r2, [pc, #20]	; (80054d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054c8:	88fb      	ldrh	r3, [r7, #6]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fd ff62 	bl	8003394 <HAL_GPIO_EXTI_Callback>
  }
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40013c00 	.word	0x40013c00

080054dc <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <HAL_PWR_PVD_IRQHandler+0x20>)
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80054ec:	f000 f808 	bl	8005500 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80054f0:	4b02      	ldr	r3, [pc, #8]	; (80054fc <HAL_PWR_PVD_IRQHandler+0x20>)
 80054f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054f6:	615a      	str	r2, [r3, #20]
  }
}
 80054f8:	bf00      	nop
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40013c00 	.word	0x40013c00

08005500 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e22d      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d075      	beq.n	800561a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800552e:	4ba3      	ldr	r3, [pc, #652]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	2b04      	cmp	r3, #4
 8005538:	d00c      	beq.n	8005554 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800553a:	4ba0      	ldr	r3, [pc, #640]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005542:	2b08      	cmp	r3, #8
 8005544:	d112      	bne.n	800556c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005546:	4b9d      	ldr	r3, [pc, #628]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800554e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005552:	d10b      	bne.n	800556c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005554:	4b99      	ldr	r3, [pc, #612]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d05b      	beq.n	8005618 <HAL_RCC_OscConfig+0x108>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d157      	bne.n	8005618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e208      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005574:	d106      	bne.n	8005584 <HAL_RCC_OscConfig+0x74>
 8005576:	4b91      	ldr	r3, [pc, #580]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a90      	ldr	r2, [pc, #576]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 800557c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e01d      	b.n	80055c0 <HAL_RCC_OscConfig+0xb0>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800558c:	d10c      	bne.n	80055a8 <HAL_RCC_OscConfig+0x98>
 800558e:	4b8b      	ldr	r3, [pc, #556]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a8a      	ldr	r2, [pc, #552]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	4b88      	ldr	r3, [pc, #544]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a87      	ldr	r2, [pc, #540]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	e00b      	b.n	80055c0 <HAL_RCC_OscConfig+0xb0>
 80055a8:	4b84      	ldr	r3, [pc, #528]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a83      	ldr	r2, [pc, #524]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80055ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	4b81      	ldr	r3, [pc, #516]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a80      	ldr	r2, [pc, #512]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80055ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d013      	beq.n	80055f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c8:	f7fe fe90 	bl	80042ec <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d0:	f7fe fe8c 	bl	80042ec <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b64      	cmp	r3, #100	; 0x64
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e1cd      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e2:	4b76      	ldr	r3, [pc, #472]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0f0      	beq.n	80055d0 <HAL_RCC_OscConfig+0xc0>
 80055ee:	e014      	b.n	800561a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f0:	f7fe fe7c 	bl	80042ec <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055f8:	f7fe fe78 	bl	80042ec <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b64      	cmp	r3, #100	; 0x64
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e1b9      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800560a:	4b6c      	ldr	r3, [pc, #432]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0xe8>
 8005616:	e000      	b.n	800561a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d063      	beq.n	80056ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005626:	4b65      	ldr	r3, [pc, #404]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00b      	beq.n	800564a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005632:	4b62      	ldr	r3, [pc, #392]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800563a:	2b08      	cmp	r3, #8
 800563c:	d11c      	bne.n	8005678 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800563e:	4b5f      	ldr	r3, [pc, #380]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d116      	bne.n	8005678 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800564a:	4b5c      	ldr	r3, [pc, #368]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_RCC_OscConfig+0x152>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d001      	beq.n	8005662 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e18d      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005662:	4b56      	ldr	r3, [pc, #344]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	4952      	ldr	r1, [pc, #328]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005672:	4313      	orrs	r3, r2
 8005674:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005676:	e03a      	b.n	80056ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d020      	beq.n	80056c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005680:	4b4f      	ldr	r3, [pc, #316]	; (80057c0 <HAL_RCC_OscConfig+0x2b0>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005686:	f7fe fe31 	bl	80042ec <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800568e:	f7fe fe2d 	bl	80042ec <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e16e      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a0:	4b46      	ldr	r3, [pc, #280]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f0      	beq.n	800568e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ac:	4b43      	ldr	r3, [pc, #268]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	4940      	ldr	r1, [pc, #256]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	600b      	str	r3, [r1, #0]
 80056c0:	e015      	b.n	80056ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056c2:	4b3f      	ldr	r3, [pc, #252]	; (80057c0 <HAL_RCC_OscConfig+0x2b0>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c8:	f7fe fe10 	bl	80042ec <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d0:	f7fe fe0c 	bl	80042ec <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e14d      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056e2:	4b36      	ldr	r3, [pc, #216]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f0      	bne.n	80056d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d030      	beq.n	800575c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d016      	beq.n	8005730 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005702:	4b30      	ldr	r3, [pc, #192]	; (80057c4 <HAL_RCC_OscConfig+0x2b4>)
 8005704:	2201      	movs	r2, #1
 8005706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005708:	f7fe fdf0 	bl	80042ec <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005710:	f7fe fdec 	bl	80042ec <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e12d      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005722:	4b26      	ldr	r3, [pc, #152]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0f0      	beq.n	8005710 <HAL_RCC_OscConfig+0x200>
 800572e:	e015      	b.n	800575c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005730:	4b24      	ldr	r3, [pc, #144]	; (80057c4 <HAL_RCC_OscConfig+0x2b4>)
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005736:	f7fe fdd9 	bl	80042ec <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800573e:	f7fe fdd5 	bl	80042ec <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e116      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005750:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f0      	bne.n	800573e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 80a0 	beq.w	80058aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800576a:	2300      	movs	r3, #0
 800576c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10f      	bne.n	800579a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	4a0e      	ldr	r2, [pc, #56]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005788:	6413      	str	r3, [r2, #64]	; 0x40
 800578a:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005796:	2301      	movs	r3, #1
 8005798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800579a:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <HAL_RCC_OscConfig+0x2b8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d121      	bne.n	80057ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057a6:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <HAL_RCC_OscConfig+0x2b8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a07      	ldr	r2, [pc, #28]	; (80057c8 <HAL_RCC_OscConfig+0x2b8>)
 80057ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057b2:	f7fe fd9b 	bl	80042ec <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b8:	e011      	b.n	80057de <HAL_RCC_OscConfig+0x2ce>
 80057ba:	bf00      	nop
 80057bc:	40023800 	.word	0x40023800
 80057c0:	42470000 	.word	0x42470000
 80057c4:	42470e80 	.word	0x42470e80
 80057c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057cc:	f7fe fd8e 	bl	80042ec <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e0cf      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057de:	4b6a      	ldr	r3, [pc, #424]	; (8005988 <HAL_RCC_OscConfig+0x478>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d106      	bne.n	8005800 <HAL_RCC_OscConfig+0x2f0>
 80057f2:	4b66      	ldr	r3, [pc, #408]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	4a65      	ldr	r2, [pc, #404]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	6713      	str	r3, [r2, #112]	; 0x70
 80057fe:	e01c      	b.n	800583a <HAL_RCC_OscConfig+0x32a>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	2b05      	cmp	r3, #5
 8005806:	d10c      	bne.n	8005822 <HAL_RCC_OscConfig+0x312>
 8005808:	4b60      	ldr	r3, [pc, #384]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 800580a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580c:	4a5f      	ldr	r2, [pc, #380]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 800580e:	f043 0304 	orr.w	r3, r3, #4
 8005812:	6713      	str	r3, [r2, #112]	; 0x70
 8005814:	4b5d      	ldr	r3, [pc, #372]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 8005816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005818:	4a5c      	ldr	r2, [pc, #368]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 800581a:	f043 0301 	orr.w	r3, r3, #1
 800581e:	6713      	str	r3, [r2, #112]	; 0x70
 8005820:	e00b      	b.n	800583a <HAL_RCC_OscConfig+0x32a>
 8005822:	4b5a      	ldr	r3, [pc, #360]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	4a59      	ldr	r2, [pc, #356]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 8005828:	f023 0301 	bic.w	r3, r3, #1
 800582c:	6713      	str	r3, [r2, #112]	; 0x70
 800582e:	4b57      	ldr	r3, [pc, #348]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	4a56      	ldr	r2, [pc, #344]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 8005834:	f023 0304 	bic.w	r3, r3, #4
 8005838:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d015      	beq.n	800586e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005842:	f7fe fd53 	bl	80042ec <HAL_GetTick>
 8005846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005848:	e00a      	b.n	8005860 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800584a:	f7fe fd4f 	bl	80042ec <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	f241 3288 	movw	r2, #5000	; 0x1388
 8005858:	4293      	cmp	r3, r2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e08e      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005860:	4b4a      	ldr	r3, [pc, #296]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 8005862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0ee      	beq.n	800584a <HAL_RCC_OscConfig+0x33a>
 800586c:	e014      	b.n	8005898 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800586e:	f7fe fd3d 	bl	80042ec <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005874:	e00a      	b.n	800588c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005876:	f7fe fd39 	bl	80042ec <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	f241 3288 	movw	r2, #5000	; 0x1388
 8005884:	4293      	cmp	r3, r2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e078      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800588c:	4b3f      	ldr	r3, [pc, #252]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 800588e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1ee      	bne.n	8005876 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005898:	7dfb      	ldrb	r3, [r7, #23]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d105      	bne.n	80058aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589e:	4b3b      	ldr	r3, [pc, #236]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	4a3a      	ldr	r2, [pc, #232]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 80058a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d064      	beq.n	800597c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058b2:	4b36      	ldr	r3, [pc, #216]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 030c 	and.w	r3, r3, #12
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d05c      	beq.n	8005978 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d141      	bne.n	800594a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c6:	4b32      	ldr	r3, [pc, #200]	; (8005990 <HAL_RCC_OscConfig+0x480>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058cc:	f7fe fd0e 	bl	80042ec <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d4:	f7fe fd0a 	bl	80042ec <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e04b      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e6:	4b29      	ldr	r3, [pc, #164]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69da      	ldr	r2, [r3, #28]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	019b      	lsls	r3, r3, #6
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	3b01      	subs	r3, #1
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	061b      	lsls	r3, r3, #24
 8005916:	491d      	ldr	r1, [pc, #116]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 8005918:	4313      	orrs	r3, r2
 800591a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800591c:	4b1c      	ldr	r3, [pc, #112]	; (8005990 <HAL_RCC_OscConfig+0x480>)
 800591e:	2201      	movs	r2, #1
 8005920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005922:	f7fe fce3 	bl	80042ec <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592a:	f7fe fcdf 	bl	80042ec <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e020      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800593c:	4b13      	ldr	r3, [pc, #76]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCC_OscConfig+0x41a>
 8005948:	e018      	b.n	800597c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594a:	4b11      	ldr	r3, [pc, #68]	; (8005990 <HAL_RCC_OscConfig+0x480>)
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005950:	f7fe fccc 	bl	80042ec <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005958:	f7fe fcc8 	bl	80042ec <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e009      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800596a:	4b08      	ldr	r3, [pc, #32]	; (800598c <HAL_RCC_OscConfig+0x47c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f0      	bne.n	8005958 <HAL_RCC_OscConfig+0x448>
 8005976:	e001      	b.n	800597c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40007000 	.word	0x40007000
 800598c:	40023800 	.word	0x40023800
 8005990:	42470060 	.word	0x42470060

08005994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e0ca      	b.n	8005b3e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059a8:	4b67      	ldr	r3, [pc, #412]	; (8005b48 <HAL_RCC_ClockConfig+0x1b4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d90c      	bls.n	80059d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b6:	4b64      	ldr	r3, [pc, #400]	; (8005b48 <HAL_RCC_ClockConfig+0x1b4>)
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059be:	4b62      	ldr	r3, [pc, #392]	; (8005b48 <HAL_RCC_ClockConfig+0x1b4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d001      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e0b6      	b.n	8005b3e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d020      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059e8:	4b58      	ldr	r3, [pc, #352]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	4a57      	ldr	r2, [pc, #348]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 80059ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a00:	4b52      	ldr	r3, [pc, #328]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	4a51      	ldr	r2, [pc, #324]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a0c:	4b4f      	ldr	r3, [pc, #316]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	494c      	ldr	r1, [pc, #304]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d044      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d107      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a32:	4b46      	ldr	r3, [pc, #280]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d119      	bne.n	8005a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e07d      	b.n	8005b3e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d003      	beq.n	8005a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d107      	bne.n	8005a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a52:	4b3e      	ldr	r3, [pc, #248]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e06d      	b.n	8005b3e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a62:	4b3a      	ldr	r3, [pc, #232]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e065      	b.n	8005b3e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a72:	4b36      	ldr	r3, [pc, #216]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f023 0203 	bic.w	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	4933      	ldr	r1, [pc, #204]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a84:	f7fe fc32 	bl	80042ec <HAL_GetTick>
 8005a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8a:	e00a      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a8c:	f7fe fc2e 	bl	80042ec <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e04d      	b.n	8005b3e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa2:	4b2a      	ldr	r3, [pc, #168]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 020c 	and.w	r2, r3, #12
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d1eb      	bne.n	8005a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ab4:	4b24      	ldr	r3, [pc, #144]	; (8005b48 <HAL_RCC_ClockConfig+0x1b4>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d20c      	bcs.n	8005adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac2:	4b21      	ldr	r3, [pc, #132]	; (8005b48 <HAL_RCC_ClockConfig+0x1b4>)
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aca:	4b1f      	ldr	r3, [pc, #124]	; (8005b48 <HAL_RCC_ClockConfig+0x1b4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d001      	beq.n	8005adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e030      	b.n	8005b3e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d008      	beq.n	8005afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ae8:	4b18      	ldr	r3, [pc, #96]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	4915      	ldr	r1, [pc, #84]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b06:	4b11      	ldr	r3, [pc, #68]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	490d      	ldr	r1, [pc, #52]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b1a:	f000 f81d 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 8005b1e:	4601      	mov	r1, r0
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	091b      	lsrs	r3, r3, #4
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2c:	5cd3      	ldrb	r3, [r2, r3]
 8005b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8005b32:	4a08      	ldr	r2, [pc, #32]	; (8005b54 <HAL_RCC_ClockConfig+0x1c0>)
 8005b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8005b36:	2000      	movs	r0, #0
 8005b38:	f7fe fb94 	bl	8004264 <HAL_InitTick>

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	40023c00 	.word	0x40023c00
 8005b4c:	40023800 	.word	0x40023800
 8005b50:	08007fe0 	.word	0x08007fe0
 8005b54:	2000000c 	.word	0x2000000c

08005b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	607b      	str	r3, [r7, #4]
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	2300      	movs	r3, #0
 8005b68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b6e:	4b63      	ldr	r3, [pc, #396]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 030c 	and.w	r3, r3, #12
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d007      	beq.n	8005b8a <HAL_RCC_GetSysClockFreq+0x32>
 8005b7a:	2b08      	cmp	r3, #8
 8005b7c:	d008      	beq.n	8005b90 <HAL_RCC_GetSysClockFreq+0x38>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f040 80b4 	bne.w	8005cec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b84:	4b5e      	ldr	r3, [pc, #376]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005b86:	60bb      	str	r3, [r7, #8]
       break;
 8005b88:	e0b3      	b.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b8a:	4b5e      	ldr	r3, [pc, #376]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005b8c:	60bb      	str	r3, [r7, #8]
      break;
 8005b8e:	e0b0      	b.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b90:	4b5a      	ldr	r3, [pc, #360]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b9a:	4b58      	ldr	r3, [pc, #352]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d04a      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ba6:	4b55      	ldr	r3, [pc, #340]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	099b      	lsrs	r3, r3, #6
 8005bac:	f04f 0400 	mov.w	r4, #0
 8005bb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	ea03 0501 	and.w	r5, r3, r1
 8005bbc:	ea04 0602 	and.w	r6, r4, r2
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	4632      	mov	r2, r6
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	f04f 0400 	mov.w	r4, #0
 8005bcc:	0154      	lsls	r4, r2, #5
 8005bce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005bd2:	014b      	lsls	r3, r1, #5
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	1b49      	subs	r1, r1, r5
 8005bda:	eb62 0206 	sbc.w	r2, r2, r6
 8005bde:	f04f 0300 	mov.w	r3, #0
 8005be2:	f04f 0400 	mov.w	r4, #0
 8005be6:	0194      	lsls	r4, r2, #6
 8005be8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005bec:	018b      	lsls	r3, r1, #6
 8005bee:	1a5b      	subs	r3, r3, r1
 8005bf0:	eb64 0402 	sbc.w	r4, r4, r2
 8005bf4:	f04f 0100 	mov.w	r1, #0
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	00e2      	lsls	r2, r4, #3
 8005bfe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c02:	00d9      	lsls	r1, r3, #3
 8005c04:	460b      	mov	r3, r1
 8005c06:	4614      	mov	r4, r2
 8005c08:	195b      	adds	r3, r3, r5
 8005c0a:	eb44 0406 	adc.w	r4, r4, r6
 8005c0e:	f04f 0100 	mov.w	r1, #0
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	0262      	lsls	r2, r4, #9
 8005c18:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005c1c:	0259      	lsls	r1, r3, #9
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4614      	mov	r4, r2
 8005c22:	4618      	mov	r0, r3
 8005c24:	4621      	mov	r1, r4
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f04f 0400 	mov.w	r4, #0
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	4623      	mov	r3, r4
 8005c30:	f7fa fad2 	bl	80001d8 <__aeabi_uldivmod>
 8005c34:	4603      	mov	r3, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	e049      	b.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c3c:	4b2f      	ldr	r3, [pc, #188]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	099b      	lsrs	r3, r3, #6
 8005c42:	f04f 0400 	mov.w	r4, #0
 8005c46:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	ea03 0501 	and.w	r5, r3, r1
 8005c52:	ea04 0602 	and.w	r6, r4, r2
 8005c56:	4629      	mov	r1, r5
 8005c58:	4632      	mov	r2, r6
 8005c5a:	f04f 0300 	mov.w	r3, #0
 8005c5e:	f04f 0400 	mov.w	r4, #0
 8005c62:	0154      	lsls	r4, r2, #5
 8005c64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c68:	014b      	lsls	r3, r1, #5
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4622      	mov	r2, r4
 8005c6e:	1b49      	subs	r1, r1, r5
 8005c70:	eb62 0206 	sbc.w	r2, r2, r6
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	f04f 0400 	mov.w	r4, #0
 8005c7c:	0194      	lsls	r4, r2, #6
 8005c7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c82:	018b      	lsls	r3, r1, #6
 8005c84:	1a5b      	subs	r3, r3, r1
 8005c86:	eb64 0402 	sbc.w	r4, r4, r2
 8005c8a:	f04f 0100 	mov.w	r1, #0
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	00e2      	lsls	r2, r4, #3
 8005c94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c98:	00d9      	lsls	r1, r3, #3
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4614      	mov	r4, r2
 8005c9e:	195b      	adds	r3, r3, r5
 8005ca0:	eb44 0406 	adc.w	r4, r4, r6
 8005ca4:	f04f 0100 	mov.w	r1, #0
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	02a2      	lsls	r2, r4, #10
 8005cae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005cb2:	0299      	lsls	r1, r3, #10
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4614      	mov	r4, r2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	4621      	mov	r1, r4
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f04f 0400 	mov.w	r4, #0
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	4623      	mov	r3, r4
 8005cc6:	f7fa fa87 	bl	80001d8 <__aeabi_uldivmod>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	460c      	mov	r4, r1
 8005cce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	0c1b      	lsrs	r3, r3, #16
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	3301      	adds	r3, #1
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	60bb      	str	r3, [r7, #8]
      break;
 8005cea:	e002      	b.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cec:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005cee:	60bb      	str	r3, [r7, #8]
      break;
 8005cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	00f42400 	.word	0x00f42400
 8005d04:	007a1200 	.word	0x007a1200

08005d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d0c:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	2000000c 	.word	0x2000000c

08005d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d24:	f7ff fff0 	bl	8005d08 <HAL_RCC_GetHCLKFreq>
 8005d28:	4601      	mov	r1, r0
 8005d2a:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	0a9b      	lsrs	r3, r3, #10
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	4a03      	ldr	r2, [pc, #12]	; (8005d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d36:	5cd3      	ldrb	r3, [r2, r3]
 8005d38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40023800 	.word	0x40023800
 8005d44:	08007ff0 	.word	0x08007ff0

08005d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d4c:	f7ff ffdc 	bl	8005d08 <HAL_RCC_GetHCLKFreq>
 8005d50:	4601      	mov	r1, r0
 8005d52:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	0b5b      	lsrs	r3, r3, #13
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	4a03      	ldr	r2, [pc, #12]	; (8005d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d5e:	5cd3      	ldrb	r3, [r2, r3]
 8005d60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	08007ff0 	.word	0x08007ff0

08005d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e056      	b.n	8005e30 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d106      	bne.n	8005da2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7fd ffd3 	bl	8003d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2202      	movs	r2, #2
 8005da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005db8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	ea42 0103 	orr.w	r1, r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	0c1b      	lsrs	r3, r3, #16
 8005e00:	f003 0104 	and.w	r1, r3, #4
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69da      	ldr	r2, [r3, #28]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	4613      	mov	r3, r2
 8005e46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <HAL_SPI_Transmit+0x22>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e11e      	b.n	8006098 <HAL_SPI_Transmit+0x260>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e62:	f7fe fa43 	bl	80042ec <HAL_GetTick>
 8005e66:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e68:	88fb      	ldrh	r3, [r7, #6]
 8005e6a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d002      	beq.n	8005e7e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e78:	2302      	movs	r3, #2
 8005e7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e7c:	e103      	b.n	8006086 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <HAL_SPI_Transmit+0x52>
 8005e84:	88fb      	ldrh	r3, [r7, #6]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d102      	bne.n	8005e90 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e8e:	e0fa      	b.n	8006086 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2203      	movs	r2, #3
 8005e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	88fa      	ldrh	r2, [r7, #6]
 8005ea8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	88fa      	ldrh	r2, [r7, #6]
 8005eae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed6:	d107      	bne.n	8005ee8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ee6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b40      	cmp	r3, #64	; 0x40
 8005ef4:	d007      	beq.n	8005f06 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f0e:	d14b      	bne.n	8005fa8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <HAL_SPI_Transmit+0xe6>
 8005f18:	8afb      	ldrh	r3, [r7, #22]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d13e      	bne.n	8005f9c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f22:	881a      	ldrh	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	1c9a      	adds	r2, r3, #2
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f42:	e02b      	b.n	8005f9c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d112      	bne.n	8005f78 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	881a      	ldrh	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	1c9a      	adds	r2, r3, #2
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f76:	e011      	b.n	8005f9c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f78:	f7fe f9b8 	bl	80042ec <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d803      	bhi.n	8005f90 <HAL_SPI_Transmit+0x158>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8e:	d102      	bne.n	8005f96 <HAL_SPI_Transmit+0x15e>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f9a:	e074      	b.n	8006086 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1ce      	bne.n	8005f44 <HAL_SPI_Transmit+0x10c>
 8005fa6:	e04c      	b.n	8006042 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <HAL_SPI_Transmit+0x17e>
 8005fb0:	8afb      	ldrh	r3, [r7, #22]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d140      	bne.n	8006038 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	7812      	ldrb	r2, [r2, #0]
 8005fc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005fdc:	e02c      	b.n	8006038 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d113      	bne.n	8006014 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	7812      	ldrb	r2, [r2, #0]
 8005ff8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006008:	b29b      	uxth	r3, r3
 800600a:	3b01      	subs	r3, #1
 800600c:	b29a      	uxth	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	86da      	strh	r2, [r3, #54]	; 0x36
 8006012:	e011      	b.n	8006038 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006014:	f7fe f96a 	bl	80042ec <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d803      	bhi.n	800602c <HAL_SPI_Transmit+0x1f4>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602a:	d102      	bne.n	8006032 <HAL_SPI_Transmit+0x1fa>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d102      	bne.n	8006038 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006036:	e026      	b.n	8006086 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1cd      	bne.n	8005fde <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 fa44 	bl	80064d4 <SPI_EndRxTxTransaction>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10a      	bne.n	8006076 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006060:	2300      	movs	r3, #0
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	77fb      	strb	r3, [r7, #31]
 8006082:	e000      	b.n	8006086 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006084:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006096:	7ffb      	ldrb	r3, [r7, #31]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3720      	adds	r7, #32
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08c      	sub	sp, #48	; 0x30
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060ae:	2301      	movs	r3, #1
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_SPI_TransmitReceive+0x26>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e18a      	b.n	80063dc <HAL_SPI_TransmitReceive+0x33c>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060ce:	f7fe f90d 	bl	80042ec <HAL_GetTick>
 80060d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80060e4:	887b      	ldrh	r3, [r7, #2]
 80060e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d00f      	beq.n	8006110 <HAL_SPI_TransmitReceive+0x70>
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060f6:	d107      	bne.n	8006108 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d103      	bne.n	8006108 <HAL_SPI_TransmitReceive+0x68>
 8006100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006104:	2b04      	cmp	r3, #4
 8006106:	d003      	beq.n	8006110 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006108:	2302      	movs	r3, #2
 800610a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800610e:	e15b      	b.n	80063c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <HAL_SPI_TransmitReceive+0x82>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HAL_SPI_TransmitReceive+0x82>
 800611c:	887b      	ldrh	r3, [r7, #2]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d103      	bne.n	800612a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006128:	e14e      	b.n	80063c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b04      	cmp	r3, #4
 8006134:	d003      	beq.n	800613e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2205      	movs	r2, #5
 800613a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	887a      	ldrh	r2, [r7, #2]
 800614e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	887a      	ldrh	r2, [r7, #2]
 8006154:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	887a      	ldrh	r2, [r7, #2]
 8006160:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	887a      	ldrh	r2, [r7, #2]
 8006166:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617e:	2b40      	cmp	r3, #64	; 0x40
 8006180:	d007      	beq.n	8006192 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006190:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800619a:	d178      	bne.n	800628e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_SPI_TransmitReceive+0x10a>
 80061a4:	8b7b      	ldrh	r3, [r7, #26]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d166      	bne.n	8006278 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	881a      	ldrh	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	1c9a      	adds	r2, r3, #2
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ce:	e053      	b.n	8006278 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d11b      	bne.n	8006216 <HAL_SPI_TransmitReceive+0x176>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d016      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x176>
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d113      	bne.n	8006216 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	881a      	ldrh	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	1c9a      	adds	r2, r3, #2
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b01      	cmp	r3, #1
 8006222:	d119      	bne.n	8006258 <HAL_SPI_TransmitReceive+0x1b8>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d014      	beq.n	8006258 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	b292      	uxth	r2, r2
 800623a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	1c9a      	adds	r2, r3, #2
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800624a:	b29b      	uxth	r3, r3
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006254:	2301      	movs	r3, #1
 8006256:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006258:	f7fe f848 	bl	80042ec <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006264:	429a      	cmp	r2, r3
 8006266:	d807      	bhi.n	8006278 <HAL_SPI_TransmitReceive+0x1d8>
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626e:	d003      	beq.n	8006278 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006276:	e0a7      	b.n	80063c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1a6      	bne.n	80061d0 <HAL_SPI_TransmitReceive+0x130>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006286:	b29b      	uxth	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1a1      	bne.n	80061d0 <HAL_SPI_TransmitReceive+0x130>
 800628c:	e07c      	b.n	8006388 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <HAL_SPI_TransmitReceive+0x1fc>
 8006296:	8b7b      	ldrh	r3, [r7, #26]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d16b      	bne.n	8006374 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	330c      	adds	r3, #12
 80062a6:	7812      	ldrb	r2, [r2, #0]
 80062a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062c2:	e057      	b.n	8006374 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d11c      	bne.n	800630c <HAL_SPI_TransmitReceive+0x26c>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d017      	beq.n	800630c <HAL_SPI_TransmitReceive+0x26c>
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d114      	bne.n	800630c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	330c      	adds	r3, #12
 80062ec:	7812      	ldrb	r2, [r2, #0]
 80062ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b01      	cmp	r3, #1
 8006318:	d119      	bne.n	800634e <HAL_SPI_TransmitReceive+0x2ae>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631e:	b29b      	uxth	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d014      	beq.n	800634e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800634a:	2301      	movs	r3, #1
 800634c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800634e:	f7fd ffcd 	bl	80042ec <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800635a:	429a      	cmp	r2, r3
 800635c:	d803      	bhi.n	8006366 <HAL_SPI_TransmitReceive+0x2c6>
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006364:	d102      	bne.n	800636c <HAL_SPI_TransmitReceive+0x2cc>
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006372:	e029      	b.n	80063c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1a2      	bne.n	80062c4 <HAL_SPI_TransmitReceive+0x224>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d19d      	bne.n	80062c4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f8a1 	bl	80064d4 <SPI_EndRxTxTransaction>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d006      	beq.n	80063a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80063a4:	e010      	b.n	80063c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	e000      	b.n	80063c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80063c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3730      	adds	r7, #48	; 0x30
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063f2:	b2db      	uxtb	r3, r3
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	603b      	str	r3, [r7, #0]
 800640c:	4613      	mov	r3, r2
 800640e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006410:	e04c      	b.n	80064ac <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006418:	d048      	beq.n	80064ac <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800641a:	f7fd ff67 	bl	80042ec <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d902      	bls.n	8006430 <SPI_WaitFlagStateUntilTimeout+0x30>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d13d      	bne.n	80064ac <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800643e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006448:	d111      	bne.n	800646e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006452:	d004      	beq.n	800645e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645c:	d107      	bne.n	800646e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800646c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006476:	d10f      	bne.n	8006498 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006496:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e00f      	b.n	80064cc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4013      	ands	r3, r2
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	bf0c      	ite	eq
 80064bc:	2301      	moveq	r3, #1
 80064be:	2300      	movne	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d1a3      	bne.n	8006412 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af02      	add	r7, sp, #8
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064e0:	4b1b      	ldr	r3, [pc, #108]	; (8006550 <SPI_EndRxTxTransaction+0x7c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1b      	ldr	r2, [pc, #108]	; (8006554 <SPI_EndRxTxTransaction+0x80>)
 80064e6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ea:	0d5b      	lsrs	r3, r3, #21
 80064ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064f0:	fb02 f303 	mul.w	r3, r2, r3
 80064f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064fe:	d112      	bne.n	8006526 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2200      	movs	r2, #0
 8006508:	2180      	movs	r1, #128	; 0x80
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f7ff ff78 	bl	8006400 <SPI_WaitFlagStateUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d016      	beq.n	8006544 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651a:	f043 0220 	orr.w	r2, r3, #32
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e00f      	b.n	8006546 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	3b01      	subs	r3, #1
 8006530:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653c:	2b80      	cmp	r3, #128	; 0x80
 800653e:	d0f2      	beq.n	8006526 <SPI_EndRxTxTransaction+0x52>
 8006540:	e000      	b.n	8006544 <SPI_EndRxTxTransaction+0x70>
        break;
 8006542:	bf00      	nop
  }

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	2000000c 	.word	0x2000000c
 8006554:	165e9f81 	.word	0x165e9f81

08006558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e01d      	b.n	80065a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7fd fc2a 	bl	8003dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3304      	adds	r3, #4
 8006594:	4619      	mov	r1, r3
 8006596:	4610      	mov	r0, r2
 8006598:	f000 fa40 	bl	8006a1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b085      	sub	sp, #20
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0201 	orr.w	r2, r2, #1
 80065c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b06      	cmp	r3, #6
 80065d6:	d007      	beq.n	80065e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0201 	bic.w	r2, r2, #1
 800660c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6a1a      	ldr	r2, [r3, #32]
 8006614:	f241 1311 	movw	r3, #4369	; 0x1111
 8006618:	4013      	ands	r3, r2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10f      	bne.n	800663e <HAL_TIM_Base_Stop_IT+0x48>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6a1a      	ldr	r2, [r3, #32]
 8006624:	f240 4344 	movw	r3, #1092	; 0x444
 8006628:	4013      	ands	r3, r2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d107      	bne.n	800663e <HAL_TIM_Base_Stop_IT+0x48>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0201 	bic.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b02      	cmp	r3, #2
 8006660:	d122      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b02      	cmp	r3, #2
 800666e:	d11b      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0202 	mvn.w	r2, #2
 8006678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f9a5 	bl	80069de <HAL_TIM_IC_CaptureCallback>
 8006694:	e005      	b.n	80066a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f997 	bl	80069ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f9a8 	bl	80069f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d122      	bne.n	80066fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d11b      	bne.n	80066fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f06f 0204 	mvn.w	r2, #4
 80066cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f97b 	bl	80069de <HAL_TIM_IC_CaptureCallback>
 80066e8:	e005      	b.n	80066f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f96d 	bl	80069ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f97e 	bl	80069f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b08      	cmp	r3, #8
 8006708:	d122      	bne.n	8006750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b08      	cmp	r3, #8
 8006716:	d11b      	bne.n	8006750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f06f 0208 	mvn.w	r2, #8
 8006720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2204      	movs	r2, #4
 8006726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f951 	bl	80069de <HAL_TIM_IC_CaptureCallback>
 800673c:	e005      	b.n	800674a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f943 	bl	80069ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f954 	bl	80069f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0310 	and.w	r3, r3, #16
 800675a:	2b10      	cmp	r3, #16
 800675c:	d122      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b10      	cmp	r3, #16
 800676a:	d11b      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0210 	mvn.w	r2, #16
 8006774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2208      	movs	r2, #8
 800677a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f927 	bl	80069de <HAL_TIM_IC_CaptureCallback>
 8006790:	e005      	b.n	800679e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f919 	bl	80069ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f92a 	bl	80069f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d10e      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d107      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0201 	mvn.w	r2, #1
 80067c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fc fe8e 	bl	80034ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067da:	2b80      	cmp	r3, #128	; 0x80
 80067dc:	d10e      	bne.n	80067fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e8:	2b80      	cmp	r3, #128	; 0x80
 80067ea:	d107      	bne.n	80067fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fa99 	bl	8006d2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b40      	cmp	r3, #64	; 0x40
 8006808:	d10e      	bne.n	8006828 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006814:	2b40      	cmp	r3, #64	; 0x40
 8006816:	d107      	bne.n	8006828 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f8ef 	bl	8006a06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b20      	cmp	r3, #32
 8006834:	d10e      	bne.n	8006854 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b20      	cmp	r3, #32
 8006842:	d107      	bne.n	8006854 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0220 	mvn.w	r2, #32
 800684c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fa63 	bl	8006d1a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800686c:	2b01      	cmp	r3, #1
 800686e:	d101      	bne.n	8006874 <HAL_TIM_ConfigClockSource+0x18>
 8006870:	2302      	movs	r3, #2
 8006872:	e0a6      	b.n	80069c2 <HAL_TIM_ConfigClockSource+0x166>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006892:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800689a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b40      	cmp	r3, #64	; 0x40
 80068aa:	d067      	beq.n	800697c <HAL_TIM_ConfigClockSource+0x120>
 80068ac:	2b40      	cmp	r3, #64	; 0x40
 80068ae:	d80b      	bhi.n	80068c8 <HAL_TIM_ConfigClockSource+0x6c>
 80068b0:	2b10      	cmp	r3, #16
 80068b2:	d073      	beq.n	800699c <HAL_TIM_ConfigClockSource+0x140>
 80068b4:	2b10      	cmp	r3, #16
 80068b6:	d802      	bhi.n	80068be <HAL_TIM_ConfigClockSource+0x62>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d06f      	beq.n	800699c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80068bc:	e078      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80068be:	2b20      	cmp	r3, #32
 80068c0:	d06c      	beq.n	800699c <HAL_TIM_ConfigClockSource+0x140>
 80068c2:	2b30      	cmp	r3, #48	; 0x30
 80068c4:	d06a      	beq.n	800699c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80068c6:	e073      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80068c8:	2b70      	cmp	r3, #112	; 0x70
 80068ca:	d00d      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0x8c>
 80068cc:	2b70      	cmp	r3, #112	; 0x70
 80068ce:	d804      	bhi.n	80068da <HAL_TIM_ConfigClockSource+0x7e>
 80068d0:	2b50      	cmp	r3, #80	; 0x50
 80068d2:	d033      	beq.n	800693c <HAL_TIM_ConfigClockSource+0xe0>
 80068d4:	2b60      	cmp	r3, #96	; 0x60
 80068d6:	d041      	beq.n	800695c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80068d8:	e06a      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80068da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068de:	d066      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x152>
 80068e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e4:	d017      	beq.n	8006916 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80068e6:	e063      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	6899      	ldr	r1, [r3, #8]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f000 f9aa 	bl	8006c50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800690a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	609a      	str	r2, [r3, #8]
      break;
 8006914:	e04c      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6818      	ldr	r0, [r3, #0]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	6899      	ldr	r1, [r3, #8]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f000 f993 	bl	8006c50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006938:	609a      	str	r2, [r3, #8]
      break;
 800693a:	e039      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6818      	ldr	r0, [r3, #0]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	6859      	ldr	r1, [r3, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	461a      	mov	r2, r3
 800694a:	f000 f907 	bl	8006b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2150      	movs	r1, #80	; 0x50
 8006954:	4618      	mov	r0, r3
 8006956:	f000 f960 	bl	8006c1a <TIM_ITRx_SetConfig>
      break;
 800695a:	e029      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	6859      	ldr	r1, [r3, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	461a      	mov	r2, r3
 800696a:	f000 f926 	bl	8006bba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2160      	movs	r1, #96	; 0x60
 8006974:	4618      	mov	r0, r3
 8006976:	f000 f950 	bl	8006c1a <TIM_ITRx_SetConfig>
      break;
 800697a:	e019      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6818      	ldr	r0, [r3, #0]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	6859      	ldr	r1, [r3, #4]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	461a      	mov	r2, r3
 800698a:	f000 f8e7 	bl	8006b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2140      	movs	r1, #64	; 0x40
 8006994:	4618      	mov	r0, r3
 8006996:	f000 f940 	bl	8006c1a <TIM_ITRx_SetConfig>
      break;
 800699a:	e009      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4619      	mov	r1, r3
 80069a6:	4610      	mov	r0, r2
 80069a8:	f000 f937 	bl	8006c1a <TIM_ITRx_SetConfig>
      break;
 80069ac:	e000      	b.n	80069b0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80069ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
	...

08006a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a40      	ldr	r2, [pc, #256]	; (8006b30 <TIM_Base_SetConfig+0x114>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d013      	beq.n	8006a5c <TIM_Base_SetConfig+0x40>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3a:	d00f      	beq.n	8006a5c <TIM_Base_SetConfig+0x40>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a3d      	ldr	r2, [pc, #244]	; (8006b34 <TIM_Base_SetConfig+0x118>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00b      	beq.n	8006a5c <TIM_Base_SetConfig+0x40>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a3c      	ldr	r2, [pc, #240]	; (8006b38 <TIM_Base_SetConfig+0x11c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d007      	beq.n	8006a5c <TIM_Base_SetConfig+0x40>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a3b      	ldr	r2, [pc, #236]	; (8006b3c <TIM_Base_SetConfig+0x120>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d003      	beq.n	8006a5c <TIM_Base_SetConfig+0x40>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a3a      	ldr	r2, [pc, #232]	; (8006b40 <TIM_Base_SetConfig+0x124>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d108      	bne.n	8006a6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a2f      	ldr	r2, [pc, #188]	; (8006b30 <TIM_Base_SetConfig+0x114>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d02b      	beq.n	8006ace <TIM_Base_SetConfig+0xb2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7c:	d027      	beq.n	8006ace <TIM_Base_SetConfig+0xb2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a2c      	ldr	r2, [pc, #176]	; (8006b34 <TIM_Base_SetConfig+0x118>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d023      	beq.n	8006ace <TIM_Base_SetConfig+0xb2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a2b      	ldr	r2, [pc, #172]	; (8006b38 <TIM_Base_SetConfig+0x11c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d01f      	beq.n	8006ace <TIM_Base_SetConfig+0xb2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a2a      	ldr	r2, [pc, #168]	; (8006b3c <TIM_Base_SetConfig+0x120>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d01b      	beq.n	8006ace <TIM_Base_SetConfig+0xb2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a29      	ldr	r2, [pc, #164]	; (8006b40 <TIM_Base_SetConfig+0x124>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d017      	beq.n	8006ace <TIM_Base_SetConfig+0xb2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a28      	ldr	r2, [pc, #160]	; (8006b44 <TIM_Base_SetConfig+0x128>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d013      	beq.n	8006ace <TIM_Base_SetConfig+0xb2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a27      	ldr	r2, [pc, #156]	; (8006b48 <TIM_Base_SetConfig+0x12c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00f      	beq.n	8006ace <TIM_Base_SetConfig+0xb2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a26      	ldr	r2, [pc, #152]	; (8006b4c <TIM_Base_SetConfig+0x130>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00b      	beq.n	8006ace <TIM_Base_SetConfig+0xb2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a25      	ldr	r2, [pc, #148]	; (8006b50 <TIM_Base_SetConfig+0x134>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d007      	beq.n	8006ace <TIM_Base_SetConfig+0xb2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a24      	ldr	r2, [pc, #144]	; (8006b54 <TIM_Base_SetConfig+0x138>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d003      	beq.n	8006ace <TIM_Base_SetConfig+0xb2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a23      	ldr	r2, [pc, #140]	; (8006b58 <TIM_Base_SetConfig+0x13c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d108      	bne.n	8006ae0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a0a      	ldr	r2, [pc, #40]	; (8006b30 <TIM_Base_SetConfig+0x114>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d003      	beq.n	8006b14 <TIM_Base_SetConfig+0xf8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a0c      	ldr	r2, [pc, #48]	; (8006b40 <TIM_Base_SetConfig+0x124>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d103      	bne.n	8006b1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	615a      	str	r2, [r3, #20]
}
 8006b22:	bf00      	nop
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40010000 	.word	0x40010000
 8006b34:	40000400 	.word	0x40000400
 8006b38:	40000800 	.word	0x40000800
 8006b3c:	40000c00 	.word	0x40000c00
 8006b40:	40010400 	.word	0x40010400
 8006b44:	40014000 	.word	0x40014000
 8006b48:	40014400 	.word	0x40014400
 8006b4c:	40014800 	.word	0x40014800
 8006b50:	40001800 	.word	0x40001800
 8006b54:	40001c00 	.word	0x40001c00
 8006b58:	40002000 	.word	0x40002000

08006b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f023 0201 	bic.w	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f023 030a 	bic.w	r3, r3, #10
 8006b98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	621a      	str	r2, [r3, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b087      	sub	sp, #28
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f023 0210 	bic.w	r2, r3, #16
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006be4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	031b      	lsls	r3, r3, #12
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	621a      	str	r2, [r3, #32]
}
 8006c0e:	bf00      	nop
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	f043 0307 	orr.w	r3, r3, #7
 8006c3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	609a      	str	r2, [r3, #8]
}
 8006c44:	bf00      	nop
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	021a      	lsls	r2, r3, #8
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	609a      	str	r2, [r3, #8]
}
 8006c84:	bf00      	nop
 8006c86:	371c      	adds	r7, #28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e032      	b.n	8006d0e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ce0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e03f      	b.n	8006dd4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d106      	bne.n	8006d6e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7fd f891 	bl	8003e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2224      	movs	r2, #36	; 0x24
 8006d72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fa5a 	bl	8007240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695a      	ldr	r2, [r3, #20]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006daa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10d      	bne.n	8006e2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d008      	beq.n	8006e2e <HAL_UART_IRQHandler+0x52>
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f988 	bl	800713c <UART_Receive_IT>
      return;
 8006e2c:	e0cc      	b.n	8006fc8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 80ab 	beq.w	8006f8c <HAL_UART_IRQHandler+0x1b0>
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d105      	bne.n	8006e4c <HAL_UART_IRQHandler+0x70>
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 80a0 	beq.w	8006f8c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <HAL_UART_IRQHandler+0x90>
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e64:	f043 0201 	orr.w	r2, r3, #1
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <HAL_UART_IRQHandler+0xb0>
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d005      	beq.n	8006e8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e84:	f043 0202 	orr.w	r2, r3, #2
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <HAL_UART_IRQHandler+0xd0>
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea4:	f043 0204 	orr.w	r2, r3, #4
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <HAL_UART_IRQHandler+0xf0>
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec4:	f043 0208 	orr.w	r2, r3, #8
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d078      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d007      	beq.n	8006eee <HAL_UART_IRQHandler+0x112>
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f927 	bl	800713c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b40      	cmp	r3, #64	; 0x40
 8006efa:	bf0c      	ite	eq
 8006efc:	2301      	moveq	r3, #1
 8006efe:	2300      	movne	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d102      	bne.n	8006f16 <HAL_UART_IRQHandler+0x13a>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d031      	beq.n	8006f7a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f870 	bl	8006ffc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d123      	bne.n	8006f72 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	695a      	ldr	r2, [r3, #20]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f38:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d013      	beq.n	8006f6a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f46:	4a22      	ldr	r2, [pc, #136]	; (8006fd0 <HAL_UART_IRQHandler+0x1f4>)
 8006f48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe f8a3 	bl	800509a <HAL_DMA_Abort_IT>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d016      	beq.n	8006f88 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f64:	4610      	mov	r0, r2
 8006f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f68:	e00e      	b.n	8006f88 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f83c 	bl	8006fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f70:	e00a      	b.n	8006f88 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f838 	bl	8006fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f78:	e006      	b.n	8006f88 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f834 	bl	8006fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006f86:	e01e      	b.n	8006fc6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f88:	bf00      	nop
    return;
 8006f8a:	e01c      	b.n	8006fc6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d008      	beq.n	8006fa8 <HAL_UART_IRQHandler+0x1cc>
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d003      	beq.n	8006fa8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f85d 	bl	8007060 <UART_Transmit_IT>
    return;
 8006fa6:	e00f      	b.n	8006fc8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <HAL_UART_IRQHandler+0x1ec>
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f8a5 	bl	800710c <UART_EndTransmit_IT>
    return;
 8006fc2:	bf00      	nop
 8006fc4:	e000      	b.n	8006fc8 <HAL_UART_IRQHandler+0x1ec>
    return;
 8006fc6:	bf00      	nop
  }
}
 8006fc8:	3720      	adds	r7, #32
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	08007039 	.word	0x08007039

08006fd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007012:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695a      	ldr	r2, [r3, #20]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0201 	bic.w	r2, r2, #1
 8007022:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007044:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f7ff ffc8 	bl	8006fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007058:	bf00      	nop
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b21      	cmp	r3, #33	; 0x21
 8007072:	d144      	bne.n	80070fe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707c:	d11a      	bne.n	80070b4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007092:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d105      	bne.n	80070a8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	1c9a      	adds	r2, r3, #2
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	621a      	str	r2, [r3, #32]
 80070a6:	e00e      	b.n	80070c6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	621a      	str	r2, [r3, #32]
 80070b2:	e008      	b.n	80070c6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	1c59      	adds	r1, r3, #1
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6211      	str	r1, [r2, #32]
 80070be:	781a      	ldrb	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3b01      	subs	r3, #1
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	4619      	mov	r1, r3
 80070d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10f      	bne.n	80070fa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e000      	b.n	8007100 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80070fe:	2302      	movs	r3, #2
  }
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007122:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff ff51 	bl	8006fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b22      	cmp	r3, #34	; 0x22
 800714e:	d171      	bne.n	8007234 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007158:	d123      	bne.n	80071a2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10e      	bne.n	8007186 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	b29b      	uxth	r3, r3
 8007170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	1c9a      	adds	r2, r3, #2
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	629a      	str	r2, [r3, #40]	; 0x28
 8007184:	e029      	b.n	80071da <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	b29b      	uxth	r3, r3
 800718e:	b2db      	uxtb	r3, r3
 8007190:	b29a      	uxth	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	629a      	str	r2, [r3, #40]	; 0x28
 80071a0:	e01b      	b.n	80071da <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10a      	bne.n	80071c0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6858      	ldr	r0, [r3, #4]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b4:	1c59      	adds	r1, r3, #1
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6291      	str	r1, [r2, #40]	; 0x28
 80071ba:	b2c2      	uxtb	r2, r0
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	e00c      	b.n	80071da <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071cc:	1c58      	adds	r0, r3, #1
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	6288      	str	r0, [r1, #40]	; 0x28
 80071d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	4619      	mov	r1, r3
 80071e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d120      	bne.n	8007230 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0220 	bic.w	r2, r2, #32
 80071fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800720c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	695a      	ldr	r2, [r3, #20]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0201 	bic.w	r2, r2, #1
 800721c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fc f9ce 	bl	80035c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	e002      	b.n	8007236 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	e000      	b.n	8007236 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007234:	2302      	movs	r3, #2
  }
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007240:	b5b0      	push	{r4, r5, r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	689a      	ldr	r2, [r3, #8]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	431a      	orrs	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007280:	f023 030c 	bic.w	r3, r3, #12
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6812      	ldr	r2, [r2, #0]
 8007288:	68f9      	ldr	r1, [r7, #12]
 800728a:	430b      	orrs	r3, r1
 800728c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	699a      	ldr	r2, [r3, #24]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ac:	f040 80e4 	bne.w	8007478 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4aab      	ldr	r2, [pc, #684]	; (8007564 <UART_SetConfig+0x324>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d004      	beq.n	80072c4 <UART_SetConfig+0x84>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4aaa      	ldr	r2, [pc, #680]	; (8007568 <UART_SetConfig+0x328>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d16c      	bne.n	800739e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80072c4:	f7fe fd40 	bl	8005d48 <HAL_RCC_GetPCLK2Freq>
 80072c8:	4602      	mov	r2, r0
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009a      	lsls	r2, r3, #2
 80072d2:	441a      	add	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	fbb2 f3f3 	udiv	r3, r2, r3
 80072de:	4aa3      	ldr	r2, [pc, #652]	; (800756c <UART_SetConfig+0x32c>)
 80072e0:	fba2 2303 	umull	r2, r3, r2, r3
 80072e4:	095b      	lsrs	r3, r3, #5
 80072e6:	011c      	lsls	r4, r3, #4
 80072e8:	f7fe fd2e 	bl	8005d48 <HAL_RCC_GetPCLK2Freq>
 80072ec:	4602      	mov	r2, r0
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009a      	lsls	r2, r3, #2
 80072f6:	441a      	add	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	fbb2 f5f3 	udiv	r5, r2, r3
 8007302:	f7fe fd21 	bl	8005d48 <HAL_RCC_GetPCLK2Freq>
 8007306:	4602      	mov	r2, r0
 8007308:	4613      	mov	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	009a      	lsls	r2, r3, #2
 8007310:	441a      	add	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	fbb2 f3f3 	udiv	r3, r2, r3
 800731c:	4a93      	ldr	r2, [pc, #588]	; (800756c <UART_SetConfig+0x32c>)
 800731e:	fba2 2303 	umull	r2, r3, r2, r3
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	2264      	movs	r2, #100	; 0x64
 8007326:	fb02 f303 	mul.w	r3, r2, r3
 800732a:	1aeb      	subs	r3, r5, r3
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	3332      	adds	r3, #50	; 0x32
 8007330:	4a8e      	ldr	r2, [pc, #568]	; (800756c <UART_SetConfig+0x32c>)
 8007332:	fba2 2303 	umull	r2, r3, r2, r3
 8007336:	095b      	lsrs	r3, r3, #5
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800733e:	441c      	add	r4, r3
 8007340:	f7fe fd02 	bl	8005d48 <HAL_RCC_GetPCLK2Freq>
 8007344:	4602      	mov	r2, r0
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	009a      	lsls	r2, r3, #2
 800734e:	441a      	add	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	fbb2 f5f3 	udiv	r5, r2, r3
 800735a:	f7fe fcf5 	bl	8005d48 <HAL_RCC_GetPCLK2Freq>
 800735e:	4602      	mov	r2, r0
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	009a      	lsls	r2, r3, #2
 8007368:	441a      	add	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	fbb2 f3f3 	udiv	r3, r2, r3
 8007374:	4a7d      	ldr	r2, [pc, #500]	; (800756c <UART_SetConfig+0x32c>)
 8007376:	fba2 2303 	umull	r2, r3, r2, r3
 800737a:	095b      	lsrs	r3, r3, #5
 800737c:	2264      	movs	r2, #100	; 0x64
 800737e:	fb02 f303 	mul.w	r3, r2, r3
 8007382:	1aeb      	subs	r3, r5, r3
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	3332      	adds	r3, #50	; 0x32
 8007388:	4a78      	ldr	r2, [pc, #480]	; (800756c <UART_SetConfig+0x32c>)
 800738a:	fba2 2303 	umull	r2, r3, r2, r3
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	f003 0207 	and.w	r2, r3, #7
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4422      	add	r2, r4
 800739a:	609a      	str	r2, [r3, #8]
 800739c:	e154      	b.n	8007648 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800739e:	f7fe fcbf 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 80073a2:	4602      	mov	r2, r0
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009a      	lsls	r2, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b8:	4a6c      	ldr	r2, [pc, #432]	; (800756c <UART_SetConfig+0x32c>)
 80073ba:	fba2 2303 	umull	r2, r3, r2, r3
 80073be:	095b      	lsrs	r3, r3, #5
 80073c0:	011c      	lsls	r4, r3, #4
 80073c2:	f7fe fcad 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 80073c6:	4602      	mov	r2, r0
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	009a      	lsls	r2, r3, #2
 80073d0:	441a      	add	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	fbb2 f5f3 	udiv	r5, r2, r3
 80073dc:	f7fe fca0 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 80073e0:	4602      	mov	r2, r0
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	009a      	lsls	r2, r3, #2
 80073ea:	441a      	add	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f6:	4a5d      	ldr	r2, [pc, #372]	; (800756c <UART_SetConfig+0x32c>)
 80073f8:	fba2 2303 	umull	r2, r3, r2, r3
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	2264      	movs	r2, #100	; 0x64
 8007400:	fb02 f303 	mul.w	r3, r2, r3
 8007404:	1aeb      	subs	r3, r5, r3
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	3332      	adds	r3, #50	; 0x32
 800740a:	4a58      	ldr	r2, [pc, #352]	; (800756c <UART_SetConfig+0x32c>)
 800740c:	fba2 2303 	umull	r2, r3, r2, r3
 8007410:	095b      	lsrs	r3, r3, #5
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007418:	441c      	add	r4, r3
 800741a:	f7fe fc81 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 800741e:	4602      	mov	r2, r0
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	009a      	lsls	r2, r3, #2
 8007428:	441a      	add	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	fbb2 f5f3 	udiv	r5, r2, r3
 8007434:	f7fe fc74 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8007438:	4602      	mov	r2, r0
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	009a      	lsls	r2, r3, #2
 8007442:	441a      	add	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	fbb2 f3f3 	udiv	r3, r2, r3
 800744e:	4a47      	ldr	r2, [pc, #284]	; (800756c <UART_SetConfig+0x32c>)
 8007450:	fba2 2303 	umull	r2, r3, r2, r3
 8007454:	095b      	lsrs	r3, r3, #5
 8007456:	2264      	movs	r2, #100	; 0x64
 8007458:	fb02 f303 	mul.w	r3, r2, r3
 800745c:	1aeb      	subs	r3, r5, r3
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	3332      	adds	r3, #50	; 0x32
 8007462:	4a42      	ldr	r2, [pc, #264]	; (800756c <UART_SetConfig+0x32c>)
 8007464:	fba2 2303 	umull	r2, r3, r2, r3
 8007468:	095b      	lsrs	r3, r3, #5
 800746a:	f003 0207 	and.w	r2, r3, #7
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4422      	add	r2, r4
 8007474:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8007476:	e0e7      	b.n	8007648 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a39      	ldr	r2, [pc, #228]	; (8007564 <UART_SetConfig+0x324>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d004      	beq.n	800748c <UART_SetConfig+0x24c>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a38      	ldr	r2, [pc, #224]	; (8007568 <UART_SetConfig+0x328>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d171      	bne.n	8007570 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800748c:	f7fe fc5c 	bl	8005d48 <HAL_RCC_GetPCLK2Freq>
 8007490:	4602      	mov	r2, r0
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	009a      	lsls	r2, r3, #2
 800749a:	441a      	add	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a6:	4a31      	ldr	r2, [pc, #196]	; (800756c <UART_SetConfig+0x32c>)
 80074a8:	fba2 2303 	umull	r2, r3, r2, r3
 80074ac:	095b      	lsrs	r3, r3, #5
 80074ae:	011c      	lsls	r4, r3, #4
 80074b0:	f7fe fc4a 	bl	8005d48 <HAL_RCC_GetPCLK2Freq>
 80074b4:	4602      	mov	r2, r0
 80074b6:	4613      	mov	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	009a      	lsls	r2, r3, #2
 80074be:	441a      	add	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	fbb2 f5f3 	udiv	r5, r2, r3
 80074ca:	f7fe fc3d 	bl	8005d48 <HAL_RCC_GetPCLK2Freq>
 80074ce:	4602      	mov	r2, r0
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	009a      	lsls	r2, r3, #2
 80074d8:	441a      	add	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e4:	4a21      	ldr	r2, [pc, #132]	; (800756c <UART_SetConfig+0x32c>)
 80074e6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ea:	095b      	lsrs	r3, r3, #5
 80074ec:	2264      	movs	r2, #100	; 0x64
 80074ee:	fb02 f303 	mul.w	r3, r2, r3
 80074f2:	1aeb      	subs	r3, r5, r3
 80074f4:	011b      	lsls	r3, r3, #4
 80074f6:	3332      	adds	r3, #50	; 0x32
 80074f8:	4a1c      	ldr	r2, [pc, #112]	; (800756c <UART_SetConfig+0x32c>)
 80074fa:	fba2 2303 	umull	r2, r3, r2, r3
 80074fe:	095b      	lsrs	r3, r3, #5
 8007500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007504:	441c      	add	r4, r3
 8007506:	f7fe fc1f 	bl	8005d48 <HAL_RCC_GetPCLK2Freq>
 800750a:	4602      	mov	r2, r0
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	009a      	lsls	r2, r3, #2
 8007514:	441a      	add	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	fbb2 f5f3 	udiv	r5, r2, r3
 8007520:	f7fe fc12 	bl	8005d48 <HAL_RCC_GetPCLK2Freq>
 8007524:	4602      	mov	r2, r0
 8007526:	4613      	mov	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	009a      	lsls	r2, r3, #2
 800752e:	441a      	add	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	fbb2 f3f3 	udiv	r3, r2, r3
 800753a:	4a0c      	ldr	r2, [pc, #48]	; (800756c <UART_SetConfig+0x32c>)
 800753c:	fba2 2303 	umull	r2, r3, r2, r3
 8007540:	095b      	lsrs	r3, r3, #5
 8007542:	2264      	movs	r2, #100	; 0x64
 8007544:	fb02 f303 	mul.w	r3, r2, r3
 8007548:	1aeb      	subs	r3, r5, r3
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	3332      	adds	r3, #50	; 0x32
 800754e:	4a07      	ldr	r2, [pc, #28]	; (800756c <UART_SetConfig+0x32c>)
 8007550:	fba2 2303 	umull	r2, r3, r2, r3
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	f003 020f 	and.w	r2, r3, #15
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4422      	add	r2, r4
 8007560:	609a      	str	r2, [r3, #8]
 8007562:	e071      	b.n	8007648 <UART_SetConfig+0x408>
 8007564:	40011000 	.word	0x40011000
 8007568:	40011400 	.word	0x40011400
 800756c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007570:	f7fe fbd6 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8007574:	4602      	mov	r2, r0
 8007576:	4613      	mov	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	009a      	lsls	r2, r3, #2
 800757e:	441a      	add	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	fbb2 f3f3 	udiv	r3, r2, r3
 800758a:	4a31      	ldr	r2, [pc, #196]	; (8007650 <UART_SetConfig+0x410>)
 800758c:	fba2 2303 	umull	r2, r3, r2, r3
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	011c      	lsls	r4, r3, #4
 8007594:	f7fe fbc4 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8007598:	4602      	mov	r2, r0
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	009a      	lsls	r2, r3, #2
 80075a2:	441a      	add	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	fbb2 f5f3 	udiv	r5, r2, r3
 80075ae:	f7fe fbb7 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 80075b2:	4602      	mov	r2, r0
 80075b4:	4613      	mov	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	009a      	lsls	r2, r3, #2
 80075bc:	441a      	add	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c8:	4a21      	ldr	r2, [pc, #132]	; (8007650 <UART_SetConfig+0x410>)
 80075ca:	fba2 2303 	umull	r2, r3, r2, r3
 80075ce:	095b      	lsrs	r3, r3, #5
 80075d0:	2264      	movs	r2, #100	; 0x64
 80075d2:	fb02 f303 	mul.w	r3, r2, r3
 80075d6:	1aeb      	subs	r3, r5, r3
 80075d8:	011b      	lsls	r3, r3, #4
 80075da:	3332      	adds	r3, #50	; 0x32
 80075dc:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <UART_SetConfig+0x410>)
 80075de:	fba2 2303 	umull	r2, r3, r2, r3
 80075e2:	095b      	lsrs	r3, r3, #5
 80075e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075e8:	441c      	add	r4, r3
 80075ea:	f7fe fb99 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 80075ee:	4602      	mov	r2, r0
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	009a      	lsls	r2, r3, #2
 80075f8:	441a      	add	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	fbb2 f5f3 	udiv	r5, r2, r3
 8007604:	f7fe fb8c 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8007608:	4602      	mov	r2, r0
 800760a:	4613      	mov	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	009a      	lsls	r2, r3, #2
 8007612:	441a      	add	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	fbb2 f3f3 	udiv	r3, r2, r3
 800761e:	4a0c      	ldr	r2, [pc, #48]	; (8007650 <UART_SetConfig+0x410>)
 8007620:	fba2 2303 	umull	r2, r3, r2, r3
 8007624:	095b      	lsrs	r3, r3, #5
 8007626:	2264      	movs	r2, #100	; 0x64
 8007628:	fb02 f303 	mul.w	r3, r2, r3
 800762c:	1aeb      	subs	r3, r5, r3
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	3332      	adds	r3, #50	; 0x32
 8007632:	4a07      	ldr	r2, [pc, #28]	; (8007650 <UART_SetConfig+0x410>)
 8007634:	fba2 2303 	umull	r2, r3, r2, r3
 8007638:	095b      	lsrs	r3, r3, #5
 800763a:	f003 020f 	and.w	r2, r3, #15
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4422      	add	r2, r4
 8007644:	609a      	str	r2, [r3, #8]
}
 8007646:	e7ff      	b.n	8007648 <UART_SetConfig+0x408>
 8007648:	bf00      	nop
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bdb0      	pop	{r4, r5, r7, pc}
 8007650:	51eb851f 	.word	0x51eb851f

08007654 <__errno>:
 8007654:	4b01      	ldr	r3, [pc, #4]	; (800765c <__errno+0x8>)
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	20000018 	.word	0x20000018

08007660 <__libc_init_array>:
 8007660:	b570      	push	{r4, r5, r6, lr}
 8007662:	4e0d      	ldr	r6, [pc, #52]	; (8007698 <__libc_init_array+0x38>)
 8007664:	4c0d      	ldr	r4, [pc, #52]	; (800769c <__libc_init_array+0x3c>)
 8007666:	1ba4      	subs	r4, r4, r6
 8007668:	10a4      	asrs	r4, r4, #2
 800766a:	2500      	movs	r5, #0
 800766c:	42a5      	cmp	r5, r4
 800766e:	d109      	bne.n	8007684 <__libc_init_array+0x24>
 8007670:	4e0b      	ldr	r6, [pc, #44]	; (80076a0 <__libc_init_array+0x40>)
 8007672:	4c0c      	ldr	r4, [pc, #48]	; (80076a4 <__libc_init_array+0x44>)
 8007674:	f000 fc90 	bl	8007f98 <_init>
 8007678:	1ba4      	subs	r4, r4, r6
 800767a:	10a4      	asrs	r4, r4, #2
 800767c:	2500      	movs	r5, #0
 800767e:	42a5      	cmp	r5, r4
 8007680:	d105      	bne.n	800768e <__libc_init_array+0x2e>
 8007682:	bd70      	pop	{r4, r5, r6, pc}
 8007684:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007688:	4798      	blx	r3
 800768a:	3501      	adds	r5, #1
 800768c:	e7ee      	b.n	800766c <__libc_init_array+0xc>
 800768e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007692:	4798      	blx	r3
 8007694:	3501      	adds	r5, #1
 8007696:	e7f2      	b.n	800767e <__libc_init_array+0x1e>
 8007698:	08008064 	.word	0x08008064
 800769c:	08008064 	.word	0x08008064
 80076a0:	08008064 	.word	0x08008064
 80076a4:	08008068 	.word	0x08008068

080076a8 <memset>:
 80076a8:	4402      	add	r2, r0
 80076aa:	4603      	mov	r3, r0
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d100      	bne.n	80076b2 <memset+0xa>
 80076b0:	4770      	bx	lr
 80076b2:	f803 1b01 	strb.w	r1, [r3], #1
 80076b6:	e7f9      	b.n	80076ac <memset+0x4>

080076b8 <_puts_r>:
 80076b8:	b570      	push	{r4, r5, r6, lr}
 80076ba:	460e      	mov	r6, r1
 80076bc:	4605      	mov	r5, r0
 80076be:	b118      	cbz	r0, 80076c8 <_puts_r+0x10>
 80076c0:	6983      	ldr	r3, [r0, #24]
 80076c2:	b90b      	cbnz	r3, 80076c8 <_puts_r+0x10>
 80076c4:	f000 fa14 	bl	8007af0 <__sinit>
 80076c8:	69ab      	ldr	r3, [r5, #24]
 80076ca:	68ac      	ldr	r4, [r5, #8]
 80076cc:	b913      	cbnz	r3, 80076d4 <_puts_r+0x1c>
 80076ce:	4628      	mov	r0, r5
 80076d0:	f000 fa0e 	bl	8007af0 <__sinit>
 80076d4:	4b23      	ldr	r3, [pc, #140]	; (8007764 <_puts_r+0xac>)
 80076d6:	429c      	cmp	r4, r3
 80076d8:	d117      	bne.n	800770a <_puts_r+0x52>
 80076da:	686c      	ldr	r4, [r5, #4]
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	071b      	lsls	r3, r3, #28
 80076e0:	d51d      	bpl.n	800771e <_puts_r+0x66>
 80076e2:	6923      	ldr	r3, [r4, #16]
 80076e4:	b1db      	cbz	r3, 800771e <_puts_r+0x66>
 80076e6:	3e01      	subs	r6, #1
 80076e8:	68a3      	ldr	r3, [r4, #8]
 80076ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076ee:	3b01      	subs	r3, #1
 80076f0:	60a3      	str	r3, [r4, #8]
 80076f2:	b9e9      	cbnz	r1, 8007730 <_puts_r+0x78>
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	da2e      	bge.n	8007756 <_puts_r+0x9e>
 80076f8:	4622      	mov	r2, r4
 80076fa:	210a      	movs	r1, #10
 80076fc:	4628      	mov	r0, r5
 80076fe:	f000 f847 	bl	8007790 <__swbuf_r>
 8007702:	3001      	adds	r0, #1
 8007704:	d011      	beq.n	800772a <_puts_r+0x72>
 8007706:	200a      	movs	r0, #10
 8007708:	e011      	b.n	800772e <_puts_r+0x76>
 800770a:	4b17      	ldr	r3, [pc, #92]	; (8007768 <_puts_r+0xb0>)
 800770c:	429c      	cmp	r4, r3
 800770e:	d101      	bne.n	8007714 <_puts_r+0x5c>
 8007710:	68ac      	ldr	r4, [r5, #8]
 8007712:	e7e3      	b.n	80076dc <_puts_r+0x24>
 8007714:	4b15      	ldr	r3, [pc, #84]	; (800776c <_puts_r+0xb4>)
 8007716:	429c      	cmp	r4, r3
 8007718:	bf08      	it	eq
 800771a:	68ec      	ldreq	r4, [r5, #12]
 800771c:	e7de      	b.n	80076dc <_puts_r+0x24>
 800771e:	4621      	mov	r1, r4
 8007720:	4628      	mov	r0, r5
 8007722:	f000 f887 	bl	8007834 <__swsetup_r>
 8007726:	2800      	cmp	r0, #0
 8007728:	d0dd      	beq.n	80076e6 <_puts_r+0x2e>
 800772a:	f04f 30ff 	mov.w	r0, #4294967295
 800772e:	bd70      	pop	{r4, r5, r6, pc}
 8007730:	2b00      	cmp	r3, #0
 8007732:	da04      	bge.n	800773e <_puts_r+0x86>
 8007734:	69a2      	ldr	r2, [r4, #24]
 8007736:	429a      	cmp	r2, r3
 8007738:	dc06      	bgt.n	8007748 <_puts_r+0x90>
 800773a:	290a      	cmp	r1, #10
 800773c:	d004      	beq.n	8007748 <_puts_r+0x90>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	6022      	str	r2, [r4, #0]
 8007744:	7019      	strb	r1, [r3, #0]
 8007746:	e7cf      	b.n	80076e8 <_puts_r+0x30>
 8007748:	4622      	mov	r2, r4
 800774a:	4628      	mov	r0, r5
 800774c:	f000 f820 	bl	8007790 <__swbuf_r>
 8007750:	3001      	adds	r0, #1
 8007752:	d1c9      	bne.n	80076e8 <_puts_r+0x30>
 8007754:	e7e9      	b.n	800772a <_puts_r+0x72>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	200a      	movs	r0, #10
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	6022      	str	r2, [r4, #0]
 800775e:	7018      	strb	r0, [r3, #0]
 8007760:	e7e5      	b.n	800772e <_puts_r+0x76>
 8007762:	bf00      	nop
 8007764:	0800801c 	.word	0x0800801c
 8007768:	0800803c 	.word	0x0800803c
 800776c:	08007ffc 	.word	0x08007ffc

08007770 <puts>:
 8007770:	4b02      	ldr	r3, [pc, #8]	; (800777c <puts+0xc>)
 8007772:	4601      	mov	r1, r0
 8007774:	6818      	ldr	r0, [r3, #0]
 8007776:	f7ff bf9f 	b.w	80076b8 <_puts_r>
 800777a:	bf00      	nop
 800777c:	20000018 	.word	0x20000018

08007780 <strcpy>:
 8007780:	4603      	mov	r3, r0
 8007782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007786:	f803 2b01 	strb.w	r2, [r3], #1
 800778a:	2a00      	cmp	r2, #0
 800778c:	d1f9      	bne.n	8007782 <strcpy+0x2>
 800778e:	4770      	bx	lr

08007790 <__swbuf_r>:
 8007790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007792:	460e      	mov	r6, r1
 8007794:	4614      	mov	r4, r2
 8007796:	4605      	mov	r5, r0
 8007798:	b118      	cbz	r0, 80077a2 <__swbuf_r+0x12>
 800779a:	6983      	ldr	r3, [r0, #24]
 800779c:	b90b      	cbnz	r3, 80077a2 <__swbuf_r+0x12>
 800779e:	f000 f9a7 	bl	8007af0 <__sinit>
 80077a2:	4b21      	ldr	r3, [pc, #132]	; (8007828 <__swbuf_r+0x98>)
 80077a4:	429c      	cmp	r4, r3
 80077a6:	d12a      	bne.n	80077fe <__swbuf_r+0x6e>
 80077a8:	686c      	ldr	r4, [r5, #4]
 80077aa:	69a3      	ldr	r3, [r4, #24]
 80077ac:	60a3      	str	r3, [r4, #8]
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	071a      	lsls	r2, r3, #28
 80077b2:	d52e      	bpl.n	8007812 <__swbuf_r+0x82>
 80077b4:	6923      	ldr	r3, [r4, #16]
 80077b6:	b363      	cbz	r3, 8007812 <__swbuf_r+0x82>
 80077b8:	6923      	ldr	r3, [r4, #16]
 80077ba:	6820      	ldr	r0, [r4, #0]
 80077bc:	1ac0      	subs	r0, r0, r3
 80077be:	6963      	ldr	r3, [r4, #20]
 80077c0:	b2f6      	uxtb	r6, r6
 80077c2:	4283      	cmp	r3, r0
 80077c4:	4637      	mov	r7, r6
 80077c6:	dc04      	bgt.n	80077d2 <__swbuf_r+0x42>
 80077c8:	4621      	mov	r1, r4
 80077ca:	4628      	mov	r0, r5
 80077cc:	f000 f926 	bl	8007a1c <_fflush_r>
 80077d0:	bb28      	cbnz	r0, 800781e <__swbuf_r+0x8e>
 80077d2:	68a3      	ldr	r3, [r4, #8]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	60a3      	str	r3, [r4, #8]
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	6022      	str	r2, [r4, #0]
 80077de:	701e      	strb	r6, [r3, #0]
 80077e0:	6963      	ldr	r3, [r4, #20]
 80077e2:	3001      	adds	r0, #1
 80077e4:	4283      	cmp	r3, r0
 80077e6:	d004      	beq.n	80077f2 <__swbuf_r+0x62>
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	07db      	lsls	r3, r3, #31
 80077ec:	d519      	bpl.n	8007822 <__swbuf_r+0x92>
 80077ee:	2e0a      	cmp	r6, #10
 80077f0:	d117      	bne.n	8007822 <__swbuf_r+0x92>
 80077f2:	4621      	mov	r1, r4
 80077f4:	4628      	mov	r0, r5
 80077f6:	f000 f911 	bl	8007a1c <_fflush_r>
 80077fa:	b190      	cbz	r0, 8007822 <__swbuf_r+0x92>
 80077fc:	e00f      	b.n	800781e <__swbuf_r+0x8e>
 80077fe:	4b0b      	ldr	r3, [pc, #44]	; (800782c <__swbuf_r+0x9c>)
 8007800:	429c      	cmp	r4, r3
 8007802:	d101      	bne.n	8007808 <__swbuf_r+0x78>
 8007804:	68ac      	ldr	r4, [r5, #8]
 8007806:	e7d0      	b.n	80077aa <__swbuf_r+0x1a>
 8007808:	4b09      	ldr	r3, [pc, #36]	; (8007830 <__swbuf_r+0xa0>)
 800780a:	429c      	cmp	r4, r3
 800780c:	bf08      	it	eq
 800780e:	68ec      	ldreq	r4, [r5, #12]
 8007810:	e7cb      	b.n	80077aa <__swbuf_r+0x1a>
 8007812:	4621      	mov	r1, r4
 8007814:	4628      	mov	r0, r5
 8007816:	f000 f80d 	bl	8007834 <__swsetup_r>
 800781a:	2800      	cmp	r0, #0
 800781c:	d0cc      	beq.n	80077b8 <__swbuf_r+0x28>
 800781e:	f04f 37ff 	mov.w	r7, #4294967295
 8007822:	4638      	mov	r0, r7
 8007824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007826:	bf00      	nop
 8007828:	0800801c 	.word	0x0800801c
 800782c:	0800803c 	.word	0x0800803c
 8007830:	08007ffc 	.word	0x08007ffc

08007834 <__swsetup_r>:
 8007834:	4b32      	ldr	r3, [pc, #200]	; (8007900 <__swsetup_r+0xcc>)
 8007836:	b570      	push	{r4, r5, r6, lr}
 8007838:	681d      	ldr	r5, [r3, #0]
 800783a:	4606      	mov	r6, r0
 800783c:	460c      	mov	r4, r1
 800783e:	b125      	cbz	r5, 800784a <__swsetup_r+0x16>
 8007840:	69ab      	ldr	r3, [r5, #24]
 8007842:	b913      	cbnz	r3, 800784a <__swsetup_r+0x16>
 8007844:	4628      	mov	r0, r5
 8007846:	f000 f953 	bl	8007af0 <__sinit>
 800784a:	4b2e      	ldr	r3, [pc, #184]	; (8007904 <__swsetup_r+0xd0>)
 800784c:	429c      	cmp	r4, r3
 800784e:	d10f      	bne.n	8007870 <__swsetup_r+0x3c>
 8007850:	686c      	ldr	r4, [r5, #4]
 8007852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007856:	b29a      	uxth	r2, r3
 8007858:	0715      	lsls	r5, r2, #28
 800785a:	d42c      	bmi.n	80078b6 <__swsetup_r+0x82>
 800785c:	06d0      	lsls	r0, r2, #27
 800785e:	d411      	bmi.n	8007884 <__swsetup_r+0x50>
 8007860:	2209      	movs	r2, #9
 8007862:	6032      	str	r2, [r6, #0]
 8007864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007868:	81a3      	strh	r3, [r4, #12]
 800786a:	f04f 30ff 	mov.w	r0, #4294967295
 800786e:	e03e      	b.n	80078ee <__swsetup_r+0xba>
 8007870:	4b25      	ldr	r3, [pc, #148]	; (8007908 <__swsetup_r+0xd4>)
 8007872:	429c      	cmp	r4, r3
 8007874:	d101      	bne.n	800787a <__swsetup_r+0x46>
 8007876:	68ac      	ldr	r4, [r5, #8]
 8007878:	e7eb      	b.n	8007852 <__swsetup_r+0x1e>
 800787a:	4b24      	ldr	r3, [pc, #144]	; (800790c <__swsetup_r+0xd8>)
 800787c:	429c      	cmp	r4, r3
 800787e:	bf08      	it	eq
 8007880:	68ec      	ldreq	r4, [r5, #12]
 8007882:	e7e6      	b.n	8007852 <__swsetup_r+0x1e>
 8007884:	0751      	lsls	r1, r2, #29
 8007886:	d512      	bpl.n	80078ae <__swsetup_r+0x7a>
 8007888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800788a:	b141      	cbz	r1, 800789e <__swsetup_r+0x6a>
 800788c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007890:	4299      	cmp	r1, r3
 8007892:	d002      	beq.n	800789a <__swsetup_r+0x66>
 8007894:	4630      	mov	r0, r6
 8007896:	f000 fa19 	bl	8007ccc <_free_r>
 800789a:	2300      	movs	r3, #0
 800789c:	6363      	str	r3, [r4, #52]	; 0x34
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078a4:	81a3      	strh	r3, [r4, #12]
 80078a6:	2300      	movs	r3, #0
 80078a8:	6063      	str	r3, [r4, #4]
 80078aa:	6923      	ldr	r3, [r4, #16]
 80078ac:	6023      	str	r3, [r4, #0]
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	f043 0308 	orr.w	r3, r3, #8
 80078b4:	81a3      	strh	r3, [r4, #12]
 80078b6:	6923      	ldr	r3, [r4, #16]
 80078b8:	b94b      	cbnz	r3, 80078ce <__swsetup_r+0x9a>
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078c4:	d003      	beq.n	80078ce <__swsetup_r+0x9a>
 80078c6:	4621      	mov	r1, r4
 80078c8:	4630      	mov	r0, r6
 80078ca:	f000 f9bf 	bl	8007c4c <__smakebuf_r>
 80078ce:	89a2      	ldrh	r2, [r4, #12]
 80078d0:	f012 0301 	ands.w	r3, r2, #1
 80078d4:	d00c      	beq.n	80078f0 <__swsetup_r+0xbc>
 80078d6:	2300      	movs	r3, #0
 80078d8:	60a3      	str	r3, [r4, #8]
 80078da:	6963      	ldr	r3, [r4, #20]
 80078dc:	425b      	negs	r3, r3
 80078de:	61a3      	str	r3, [r4, #24]
 80078e0:	6923      	ldr	r3, [r4, #16]
 80078e2:	b953      	cbnz	r3, 80078fa <__swsetup_r+0xc6>
 80078e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80078ec:	d1ba      	bne.n	8007864 <__swsetup_r+0x30>
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	0792      	lsls	r2, r2, #30
 80078f2:	bf58      	it	pl
 80078f4:	6963      	ldrpl	r3, [r4, #20]
 80078f6:	60a3      	str	r3, [r4, #8]
 80078f8:	e7f2      	b.n	80078e0 <__swsetup_r+0xac>
 80078fa:	2000      	movs	r0, #0
 80078fc:	e7f7      	b.n	80078ee <__swsetup_r+0xba>
 80078fe:	bf00      	nop
 8007900:	20000018 	.word	0x20000018
 8007904:	0800801c 	.word	0x0800801c
 8007908:	0800803c 	.word	0x0800803c
 800790c:	08007ffc 	.word	0x08007ffc

08007910 <__sflush_r>:
 8007910:	898a      	ldrh	r2, [r1, #12]
 8007912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007916:	4605      	mov	r5, r0
 8007918:	0710      	lsls	r0, r2, #28
 800791a:	460c      	mov	r4, r1
 800791c:	d458      	bmi.n	80079d0 <__sflush_r+0xc0>
 800791e:	684b      	ldr	r3, [r1, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	dc05      	bgt.n	8007930 <__sflush_r+0x20>
 8007924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	dc02      	bgt.n	8007930 <__sflush_r+0x20>
 800792a:	2000      	movs	r0, #0
 800792c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007932:	2e00      	cmp	r6, #0
 8007934:	d0f9      	beq.n	800792a <__sflush_r+0x1a>
 8007936:	2300      	movs	r3, #0
 8007938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800793c:	682f      	ldr	r7, [r5, #0]
 800793e:	6a21      	ldr	r1, [r4, #32]
 8007940:	602b      	str	r3, [r5, #0]
 8007942:	d032      	beq.n	80079aa <__sflush_r+0x9a>
 8007944:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007946:	89a3      	ldrh	r3, [r4, #12]
 8007948:	075a      	lsls	r2, r3, #29
 800794a:	d505      	bpl.n	8007958 <__sflush_r+0x48>
 800794c:	6863      	ldr	r3, [r4, #4]
 800794e:	1ac0      	subs	r0, r0, r3
 8007950:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007952:	b10b      	cbz	r3, 8007958 <__sflush_r+0x48>
 8007954:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007956:	1ac0      	subs	r0, r0, r3
 8007958:	2300      	movs	r3, #0
 800795a:	4602      	mov	r2, r0
 800795c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800795e:	6a21      	ldr	r1, [r4, #32]
 8007960:	4628      	mov	r0, r5
 8007962:	47b0      	blx	r6
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	89a3      	ldrh	r3, [r4, #12]
 8007968:	d106      	bne.n	8007978 <__sflush_r+0x68>
 800796a:	6829      	ldr	r1, [r5, #0]
 800796c:	291d      	cmp	r1, #29
 800796e:	d848      	bhi.n	8007a02 <__sflush_r+0xf2>
 8007970:	4a29      	ldr	r2, [pc, #164]	; (8007a18 <__sflush_r+0x108>)
 8007972:	40ca      	lsrs	r2, r1
 8007974:	07d6      	lsls	r6, r2, #31
 8007976:	d544      	bpl.n	8007a02 <__sflush_r+0xf2>
 8007978:	2200      	movs	r2, #0
 800797a:	6062      	str	r2, [r4, #4]
 800797c:	04d9      	lsls	r1, r3, #19
 800797e:	6922      	ldr	r2, [r4, #16]
 8007980:	6022      	str	r2, [r4, #0]
 8007982:	d504      	bpl.n	800798e <__sflush_r+0x7e>
 8007984:	1c42      	adds	r2, r0, #1
 8007986:	d101      	bne.n	800798c <__sflush_r+0x7c>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b903      	cbnz	r3, 800798e <__sflush_r+0x7e>
 800798c:	6560      	str	r0, [r4, #84]	; 0x54
 800798e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007990:	602f      	str	r7, [r5, #0]
 8007992:	2900      	cmp	r1, #0
 8007994:	d0c9      	beq.n	800792a <__sflush_r+0x1a>
 8007996:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800799a:	4299      	cmp	r1, r3
 800799c:	d002      	beq.n	80079a4 <__sflush_r+0x94>
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 f994 	bl	8007ccc <_free_r>
 80079a4:	2000      	movs	r0, #0
 80079a6:	6360      	str	r0, [r4, #52]	; 0x34
 80079a8:	e7c0      	b.n	800792c <__sflush_r+0x1c>
 80079aa:	2301      	movs	r3, #1
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b0      	blx	r6
 80079b0:	1c41      	adds	r1, r0, #1
 80079b2:	d1c8      	bne.n	8007946 <__sflush_r+0x36>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0c5      	beq.n	8007946 <__sflush_r+0x36>
 80079ba:	2b1d      	cmp	r3, #29
 80079bc:	d001      	beq.n	80079c2 <__sflush_r+0xb2>
 80079be:	2b16      	cmp	r3, #22
 80079c0:	d101      	bne.n	80079c6 <__sflush_r+0xb6>
 80079c2:	602f      	str	r7, [r5, #0]
 80079c4:	e7b1      	b.n	800792a <__sflush_r+0x1a>
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	e7ad      	b.n	800792c <__sflush_r+0x1c>
 80079d0:	690f      	ldr	r7, [r1, #16]
 80079d2:	2f00      	cmp	r7, #0
 80079d4:	d0a9      	beq.n	800792a <__sflush_r+0x1a>
 80079d6:	0793      	lsls	r3, r2, #30
 80079d8:	680e      	ldr	r6, [r1, #0]
 80079da:	bf08      	it	eq
 80079dc:	694b      	ldreq	r3, [r1, #20]
 80079de:	600f      	str	r7, [r1, #0]
 80079e0:	bf18      	it	ne
 80079e2:	2300      	movne	r3, #0
 80079e4:	eba6 0807 	sub.w	r8, r6, r7
 80079e8:	608b      	str	r3, [r1, #8]
 80079ea:	f1b8 0f00 	cmp.w	r8, #0
 80079ee:	dd9c      	ble.n	800792a <__sflush_r+0x1a>
 80079f0:	4643      	mov	r3, r8
 80079f2:	463a      	mov	r2, r7
 80079f4:	6a21      	ldr	r1, [r4, #32]
 80079f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b0      	blx	r6
 80079fc:	2800      	cmp	r0, #0
 80079fe:	dc06      	bgt.n	8007a0e <__sflush_r+0xfe>
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0c:	e78e      	b.n	800792c <__sflush_r+0x1c>
 8007a0e:	4407      	add	r7, r0
 8007a10:	eba8 0800 	sub.w	r8, r8, r0
 8007a14:	e7e9      	b.n	80079ea <__sflush_r+0xda>
 8007a16:	bf00      	nop
 8007a18:	20400001 	.word	0x20400001

08007a1c <_fflush_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	690b      	ldr	r3, [r1, #16]
 8007a20:	4605      	mov	r5, r0
 8007a22:	460c      	mov	r4, r1
 8007a24:	b1db      	cbz	r3, 8007a5e <_fflush_r+0x42>
 8007a26:	b118      	cbz	r0, 8007a30 <_fflush_r+0x14>
 8007a28:	6983      	ldr	r3, [r0, #24]
 8007a2a:	b90b      	cbnz	r3, 8007a30 <_fflush_r+0x14>
 8007a2c:	f000 f860 	bl	8007af0 <__sinit>
 8007a30:	4b0c      	ldr	r3, [pc, #48]	; (8007a64 <_fflush_r+0x48>)
 8007a32:	429c      	cmp	r4, r3
 8007a34:	d109      	bne.n	8007a4a <_fflush_r+0x2e>
 8007a36:	686c      	ldr	r4, [r5, #4]
 8007a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a3c:	b17b      	cbz	r3, 8007a5e <_fflush_r+0x42>
 8007a3e:	4621      	mov	r1, r4
 8007a40:	4628      	mov	r0, r5
 8007a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a46:	f7ff bf63 	b.w	8007910 <__sflush_r>
 8007a4a:	4b07      	ldr	r3, [pc, #28]	; (8007a68 <_fflush_r+0x4c>)
 8007a4c:	429c      	cmp	r4, r3
 8007a4e:	d101      	bne.n	8007a54 <_fflush_r+0x38>
 8007a50:	68ac      	ldr	r4, [r5, #8]
 8007a52:	e7f1      	b.n	8007a38 <_fflush_r+0x1c>
 8007a54:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <_fflush_r+0x50>)
 8007a56:	429c      	cmp	r4, r3
 8007a58:	bf08      	it	eq
 8007a5a:	68ec      	ldreq	r4, [r5, #12]
 8007a5c:	e7ec      	b.n	8007a38 <_fflush_r+0x1c>
 8007a5e:	2000      	movs	r0, #0
 8007a60:	bd38      	pop	{r3, r4, r5, pc}
 8007a62:	bf00      	nop
 8007a64:	0800801c 	.word	0x0800801c
 8007a68:	0800803c 	.word	0x0800803c
 8007a6c:	08007ffc 	.word	0x08007ffc

08007a70 <std>:
 8007a70:	2300      	movs	r3, #0
 8007a72:	b510      	push	{r4, lr}
 8007a74:	4604      	mov	r4, r0
 8007a76:	e9c0 3300 	strd	r3, r3, [r0]
 8007a7a:	6083      	str	r3, [r0, #8]
 8007a7c:	8181      	strh	r1, [r0, #12]
 8007a7e:	6643      	str	r3, [r0, #100]	; 0x64
 8007a80:	81c2      	strh	r2, [r0, #14]
 8007a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a86:	6183      	str	r3, [r0, #24]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	2208      	movs	r2, #8
 8007a8c:	305c      	adds	r0, #92	; 0x5c
 8007a8e:	f7ff fe0b 	bl	80076a8 <memset>
 8007a92:	4b05      	ldr	r3, [pc, #20]	; (8007aa8 <std+0x38>)
 8007a94:	6263      	str	r3, [r4, #36]	; 0x24
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <std+0x3c>)
 8007a98:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a9a:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <std+0x40>)
 8007a9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a9e:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <std+0x44>)
 8007aa0:	6224      	str	r4, [r4, #32]
 8007aa2:	6323      	str	r3, [r4, #48]	; 0x30
 8007aa4:	bd10      	pop	{r4, pc}
 8007aa6:	bf00      	nop
 8007aa8:	08007e3d 	.word	0x08007e3d
 8007aac:	08007e5f 	.word	0x08007e5f
 8007ab0:	08007e97 	.word	0x08007e97
 8007ab4:	08007ebb 	.word	0x08007ebb

08007ab8 <_cleanup_r>:
 8007ab8:	4901      	ldr	r1, [pc, #4]	; (8007ac0 <_cleanup_r+0x8>)
 8007aba:	f000 b885 	b.w	8007bc8 <_fwalk_reent>
 8007abe:	bf00      	nop
 8007ac0:	08007a1d 	.word	0x08007a1d

08007ac4 <__sfmoreglue>:
 8007ac4:	b570      	push	{r4, r5, r6, lr}
 8007ac6:	1e4a      	subs	r2, r1, #1
 8007ac8:	2568      	movs	r5, #104	; 0x68
 8007aca:	4355      	muls	r5, r2
 8007acc:	460e      	mov	r6, r1
 8007ace:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ad2:	f000 f949 	bl	8007d68 <_malloc_r>
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	b140      	cbz	r0, 8007aec <__sfmoreglue+0x28>
 8007ada:	2100      	movs	r1, #0
 8007adc:	e9c0 1600 	strd	r1, r6, [r0]
 8007ae0:	300c      	adds	r0, #12
 8007ae2:	60a0      	str	r0, [r4, #8]
 8007ae4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ae8:	f7ff fdde 	bl	80076a8 <memset>
 8007aec:	4620      	mov	r0, r4
 8007aee:	bd70      	pop	{r4, r5, r6, pc}

08007af0 <__sinit>:
 8007af0:	6983      	ldr	r3, [r0, #24]
 8007af2:	b510      	push	{r4, lr}
 8007af4:	4604      	mov	r4, r0
 8007af6:	bb33      	cbnz	r3, 8007b46 <__sinit+0x56>
 8007af8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007afc:	6503      	str	r3, [r0, #80]	; 0x50
 8007afe:	4b12      	ldr	r3, [pc, #72]	; (8007b48 <__sinit+0x58>)
 8007b00:	4a12      	ldr	r2, [pc, #72]	; (8007b4c <__sinit+0x5c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6282      	str	r2, [r0, #40]	; 0x28
 8007b06:	4298      	cmp	r0, r3
 8007b08:	bf04      	itt	eq
 8007b0a:	2301      	moveq	r3, #1
 8007b0c:	6183      	streq	r3, [r0, #24]
 8007b0e:	f000 f81f 	bl	8007b50 <__sfp>
 8007b12:	6060      	str	r0, [r4, #4]
 8007b14:	4620      	mov	r0, r4
 8007b16:	f000 f81b 	bl	8007b50 <__sfp>
 8007b1a:	60a0      	str	r0, [r4, #8]
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f000 f817 	bl	8007b50 <__sfp>
 8007b22:	2200      	movs	r2, #0
 8007b24:	60e0      	str	r0, [r4, #12]
 8007b26:	2104      	movs	r1, #4
 8007b28:	6860      	ldr	r0, [r4, #4]
 8007b2a:	f7ff ffa1 	bl	8007a70 <std>
 8007b2e:	2201      	movs	r2, #1
 8007b30:	2109      	movs	r1, #9
 8007b32:	68a0      	ldr	r0, [r4, #8]
 8007b34:	f7ff ff9c 	bl	8007a70 <std>
 8007b38:	2202      	movs	r2, #2
 8007b3a:	2112      	movs	r1, #18
 8007b3c:	68e0      	ldr	r0, [r4, #12]
 8007b3e:	f7ff ff97 	bl	8007a70 <std>
 8007b42:	2301      	movs	r3, #1
 8007b44:	61a3      	str	r3, [r4, #24]
 8007b46:	bd10      	pop	{r4, pc}
 8007b48:	08007ff8 	.word	0x08007ff8
 8007b4c:	08007ab9 	.word	0x08007ab9

08007b50 <__sfp>:
 8007b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b52:	4b1b      	ldr	r3, [pc, #108]	; (8007bc0 <__sfp+0x70>)
 8007b54:	681e      	ldr	r6, [r3, #0]
 8007b56:	69b3      	ldr	r3, [r6, #24]
 8007b58:	4607      	mov	r7, r0
 8007b5a:	b913      	cbnz	r3, 8007b62 <__sfp+0x12>
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f7ff ffc7 	bl	8007af0 <__sinit>
 8007b62:	3648      	adds	r6, #72	; 0x48
 8007b64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	d503      	bpl.n	8007b74 <__sfp+0x24>
 8007b6c:	6833      	ldr	r3, [r6, #0]
 8007b6e:	b133      	cbz	r3, 8007b7e <__sfp+0x2e>
 8007b70:	6836      	ldr	r6, [r6, #0]
 8007b72:	e7f7      	b.n	8007b64 <__sfp+0x14>
 8007b74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b78:	b16d      	cbz	r5, 8007b96 <__sfp+0x46>
 8007b7a:	3468      	adds	r4, #104	; 0x68
 8007b7c:	e7f4      	b.n	8007b68 <__sfp+0x18>
 8007b7e:	2104      	movs	r1, #4
 8007b80:	4638      	mov	r0, r7
 8007b82:	f7ff ff9f 	bl	8007ac4 <__sfmoreglue>
 8007b86:	6030      	str	r0, [r6, #0]
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d1f1      	bne.n	8007b70 <__sfp+0x20>
 8007b8c:	230c      	movs	r3, #12
 8007b8e:	603b      	str	r3, [r7, #0]
 8007b90:	4604      	mov	r4, r0
 8007b92:	4620      	mov	r0, r4
 8007b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b96:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <__sfp+0x74>)
 8007b98:	6665      	str	r5, [r4, #100]	; 0x64
 8007b9a:	e9c4 5500 	strd	r5, r5, [r4]
 8007b9e:	60a5      	str	r5, [r4, #8]
 8007ba0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007ba4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007ba8:	2208      	movs	r2, #8
 8007baa:	4629      	mov	r1, r5
 8007bac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bb0:	f7ff fd7a 	bl	80076a8 <memset>
 8007bb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007bb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bbc:	e7e9      	b.n	8007b92 <__sfp+0x42>
 8007bbe:	bf00      	nop
 8007bc0:	08007ff8 	.word	0x08007ff8
 8007bc4:	ffff0001 	.word	0xffff0001

08007bc8 <_fwalk_reent>:
 8007bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bcc:	4680      	mov	r8, r0
 8007bce:	4689      	mov	r9, r1
 8007bd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007bd4:	2600      	movs	r6, #0
 8007bd6:	b914      	cbnz	r4, 8007bde <_fwalk_reent+0x16>
 8007bd8:	4630      	mov	r0, r6
 8007bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bde:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007be2:	3f01      	subs	r7, #1
 8007be4:	d501      	bpl.n	8007bea <_fwalk_reent+0x22>
 8007be6:	6824      	ldr	r4, [r4, #0]
 8007be8:	e7f5      	b.n	8007bd6 <_fwalk_reent+0xe>
 8007bea:	89ab      	ldrh	r3, [r5, #12]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d907      	bls.n	8007c00 <_fwalk_reent+0x38>
 8007bf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	d003      	beq.n	8007c00 <_fwalk_reent+0x38>
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	4640      	mov	r0, r8
 8007bfc:	47c8      	blx	r9
 8007bfe:	4306      	orrs	r6, r0
 8007c00:	3568      	adds	r5, #104	; 0x68
 8007c02:	e7ee      	b.n	8007be2 <_fwalk_reent+0x1a>

08007c04 <__swhatbuf_r>:
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	460e      	mov	r6, r1
 8007c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	b096      	sub	sp, #88	; 0x58
 8007c10:	4614      	mov	r4, r2
 8007c12:	461d      	mov	r5, r3
 8007c14:	da07      	bge.n	8007c26 <__swhatbuf_r+0x22>
 8007c16:	2300      	movs	r3, #0
 8007c18:	602b      	str	r3, [r5, #0]
 8007c1a:	89b3      	ldrh	r3, [r6, #12]
 8007c1c:	061a      	lsls	r2, r3, #24
 8007c1e:	d410      	bmi.n	8007c42 <__swhatbuf_r+0x3e>
 8007c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c24:	e00e      	b.n	8007c44 <__swhatbuf_r+0x40>
 8007c26:	466a      	mov	r2, sp
 8007c28:	f000 f96e 	bl	8007f08 <_fstat_r>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	dbf2      	blt.n	8007c16 <__swhatbuf_r+0x12>
 8007c30:	9a01      	ldr	r2, [sp, #4]
 8007c32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c3a:	425a      	negs	r2, r3
 8007c3c:	415a      	adcs	r2, r3
 8007c3e:	602a      	str	r2, [r5, #0]
 8007c40:	e7ee      	b.n	8007c20 <__swhatbuf_r+0x1c>
 8007c42:	2340      	movs	r3, #64	; 0x40
 8007c44:	2000      	movs	r0, #0
 8007c46:	6023      	str	r3, [r4, #0]
 8007c48:	b016      	add	sp, #88	; 0x58
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}

08007c4c <__smakebuf_r>:
 8007c4c:	898b      	ldrh	r3, [r1, #12]
 8007c4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c50:	079d      	lsls	r5, r3, #30
 8007c52:	4606      	mov	r6, r0
 8007c54:	460c      	mov	r4, r1
 8007c56:	d507      	bpl.n	8007c68 <__smakebuf_r+0x1c>
 8007c58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c5c:	6023      	str	r3, [r4, #0]
 8007c5e:	6123      	str	r3, [r4, #16]
 8007c60:	2301      	movs	r3, #1
 8007c62:	6163      	str	r3, [r4, #20]
 8007c64:	b002      	add	sp, #8
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	ab01      	add	r3, sp, #4
 8007c6a:	466a      	mov	r2, sp
 8007c6c:	f7ff ffca 	bl	8007c04 <__swhatbuf_r>
 8007c70:	9900      	ldr	r1, [sp, #0]
 8007c72:	4605      	mov	r5, r0
 8007c74:	4630      	mov	r0, r6
 8007c76:	f000 f877 	bl	8007d68 <_malloc_r>
 8007c7a:	b948      	cbnz	r0, 8007c90 <__smakebuf_r+0x44>
 8007c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c80:	059a      	lsls	r2, r3, #22
 8007c82:	d4ef      	bmi.n	8007c64 <__smakebuf_r+0x18>
 8007c84:	f023 0303 	bic.w	r3, r3, #3
 8007c88:	f043 0302 	orr.w	r3, r3, #2
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	e7e3      	b.n	8007c58 <__smakebuf_r+0xc>
 8007c90:	4b0d      	ldr	r3, [pc, #52]	; (8007cc8 <__smakebuf_r+0x7c>)
 8007c92:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	6020      	str	r0, [r4, #0]
 8007c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	9b00      	ldr	r3, [sp, #0]
 8007ca0:	6163      	str	r3, [r4, #20]
 8007ca2:	9b01      	ldr	r3, [sp, #4]
 8007ca4:	6120      	str	r0, [r4, #16]
 8007ca6:	b15b      	cbz	r3, 8007cc0 <__smakebuf_r+0x74>
 8007ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cac:	4630      	mov	r0, r6
 8007cae:	f000 f93d 	bl	8007f2c <_isatty_r>
 8007cb2:	b128      	cbz	r0, 8007cc0 <__smakebuf_r+0x74>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	f023 0303 	bic.w	r3, r3, #3
 8007cba:	f043 0301 	orr.w	r3, r3, #1
 8007cbe:	81a3      	strh	r3, [r4, #12]
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	431d      	orrs	r5, r3
 8007cc4:	81a5      	strh	r5, [r4, #12]
 8007cc6:	e7cd      	b.n	8007c64 <__smakebuf_r+0x18>
 8007cc8:	08007ab9 	.word	0x08007ab9

08007ccc <_free_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4605      	mov	r5, r0
 8007cd0:	2900      	cmp	r1, #0
 8007cd2:	d045      	beq.n	8007d60 <_free_r+0x94>
 8007cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cd8:	1f0c      	subs	r4, r1, #4
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	bfb8      	it	lt
 8007cde:	18e4      	addlt	r4, r4, r3
 8007ce0:	f000 f946 	bl	8007f70 <__malloc_lock>
 8007ce4:	4a1f      	ldr	r2, [pc, #124]	; (8007d64 <_free_r+0x98>)
 8007ce6:	6813      	ldr	r3, [r2, #0]
 8007ce8:	4610      	mov	r0, r2
 8007cea:	b933      	cbnz	r3, 8007cfa <_free_r+0x2e>
 8007cec:	6063      	str	r3, [r4, #4]
 8007cee:	6014      	str	r4, [r2, #0]
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cf6:	f000 b93c 	b.w	8007f72 <__malloc_unlock>
 8007cfa:	42a3      	cmp	r3, r4
 8007cfc:	d90c      	bls.n	8007d18 <_free_r+0x4c>
 8007cfe:	6821      	ldr	r1, [r4, #0]
 8007d00:	1862      	adds	r2, r4, r1
 8007d02:	4293      	cmp	r3, r2
 8007d04:	bf04      	itt	eq
 8007d06:	681a      	ldreq	r2, [r3, #0]
 8007d08:	685b      	ldreq	r3, [r3, #4]
 8007d0a:	6063      	str	r3, [r4, #4]
 8007d0c:	bf04      	itt	eq
 8007d0e:	1852      	addeq	r2, r2, r1
 8007d10:	6022      	streq	r2, [r4, #0]
 8007d12:	6004      	str	r4, [r0, #0]
 8007d14:	e7ec      	b.n	8007cf0 <_free_r+0x24>
 8007d16:	4613      	mov	r3, r2
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	b10a      	cbz	r2, 8007d20 <_free_r+0x54>
 8007d1c:	42a2      	cmp	r2, r4
 8007d1e:	d9fa      	bls.n	8007d16 <_free_r+0x4a>
 8007d20:	6819      	ldr	r1, [r3, #0]
 8007d22:	1858      	adds	r0, r3, r1
 8007d24:	42a0      	cmp	r0, r4
 8007d26:	d10b      	bne.n	8007d40 <_free_r+0x74>
 8007d28:	6820      	ldr	r0, [r4, #0]
 8007d2a:	4401      	add	r1, r0
 8007d2c:	1858      	adds	r0, r3, r1
 8007d2e:	4282      	cmp	r2, r0
 8007d30:	6019      	str	r1, [r3, #0]
 8007d32:	d1dd      	bne.n	8007cf0 <_free_r+0x24>
 8007d34:	6810      	ldr	r0, [r2, #0]
 8007d36:	6852      	ldr	r2, [r2, #4]
 8007d38:	605a      	str	r2, [r3, #4]
 8007d3a:	4401      	add	r1, r0
 8007d3c:	6019      	str	r1, [r3, #0]
 8007d3e:	e7d7      	b.n	8007cf0 <_free_r+0x24>
 8007d40:	d902      	bls.n	8007d48 <_free_r+0x7c>
 8007d42:	230c      	movs	r3, #12
 8007d44:	602b      	str	r3, [r5, #0]
 8007d46:	e7d3      	b.n	8007cf0 <_free_r+0x24>
 8007d48:	6820      	ldr	r0, [r4, #0]
 8007d4a:	1821      	adds	r1, r4, r0
 8007d4c:	428a      	cmp	r2, r1
 8007d4e:	bf04      	itt	eq
 8007d50:	6811      	ldreq	r1, [r2, #0]
 8007d52:	6852      	ldreq	r2, [r2, #4]
 8007d54:	6062      	str	r2, [r4, #4]
 8007d56:	bf04      	itt	eq
 8007d58:	1809      	addeq	r1, r1, r0
 8007d5a:	6021      	streq	r1, [r4, #0]
 8007d5c:	605c      	str	r4, [r3, #4]
 8007d5e:	e7c7      	b.n	8007cf0 <_free_r+0x24>
 8007d60:	bd38      	pop	{r3, r4, r5, pc}
 8007d62:	bf00      	nop
 8007d64:	200000d8 	.word	0x200000d8

08007d68 <_malloc_r>:
 8007d68:	b570      	push	{r4, r5, r6, lr}
 8007d6a:	1ccd      	adds	r5, r1, #3
 8007d6c:	f025 0503 	bic.w	r5, r5, #3
 8007d70:	3508      	adds	r5, #8
 8007d72:	2d0c      	cmp	r5, #12
 8007d74:	bf38      	it	cc
 8007d76:	250c      	movcc	r5, #12
 8007d78:	2d00      	cmp	r5, #0
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	db01      	blt.n	8007d82 <_malloc_r+0x1a>
 8007d7e:	42a9      	cmp	r1, r5
 8007d80:	d903      	bls.n	8007d8a <_malloc_r+0x22>
 8007d82:	230c      	movs	r3, #12
 8007d84:	6033      	str	r3, [r6, #0]
 8007d86:	2000      	movs	r0, #0
 8007d88:	bd70      	pop	{r4, r5, r6, pc}
 8007d8a:	f000 f8f1 	bl	8007f70 <__malloc_lock>
 8007d8e:	4a21      	ldr	r2, [pc, #132]	; (8007e14 <_malloc_r+0xac>)
 8007d90:	6814      	ldr	r4, [r2, #0]
 8007d92:	4621      	mov	r1, r4
 8007d94:	b991      	cbnz	r1, 8007dbc <_malloc_r+0x54>
 8007d96:	4c20      	ldr	r4, [pc, #128]	; (8007e18 <_malloc_r+0xb0>)
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	b91b      	cbnz	r3, 8007da4 <_malloc_r+0x3c>
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f000 f83d 	bl	8007e1c <_sbrk_r>
 8007da2:	6020      	str	r0, [r4, #0]
 8007da4:	4629      	mov	r1, r5
 8007da6:	4630      	mov	r0, r6
 8007da8:	f000 f838 	bl	8007e1c <_sbrk_r>
 8007dac:	1c43      	adds	r3, r0, #1
 8007dae:	d124      	bne.n	8007dfa <_malloc_r+0x92>
 8007db0:	230c      	movs	r3, #12
 8007db2:	6033      	str	r3, [r6, #0]
 8007db4:	4630      	mov	r0, r6
 8007db6:	f000 f8dc 	bl	8007f72 <__malloc_unlock>
 8007dba:	e7e4      	b.n	8007d86 <_malloc_r+0x1e>
 8007dbc:	680b      	ldr	r3, [r1, #0]
 8007dbe:	1b5b      	subs	r3, r3, r5
 8007dc0:	d418      	bmi.n	8007df4 <_malloc_r+0x8c>
 8007dc2:	2b0b      	cmp	r3, #11
 8007dc4:	d90f      	bls.n	8007de6 <_malloc_r+0x7e>
 8007dc6:	600b      	str	r3, [r1, #0]
 8007dc8:	50cd      	str	r5, [r1, r3]
 8007dca:	18cc      	adds	r4, r1, r3
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f000 f8d0 	bl	8007f72 <__malloc_unlock>
 8007dd2:	f104 000b 	add.w	r0, r4, #11
 8007dd6:	1d23      	adds	r3, r4, #4
 8007dd8:	f020 0007 	bic.w	r0, r0, #7
 8007ddc:	1ac3      	subs	r3, r0, r3
 8007dde:	d0d3      	beq.n	8007d88 <_malloc_r+0x20>
 8007de0:	425a      	negs	r2, r3
 8007de2:	50e2      	str	r2, [r4, r3]
 8007de4:	e7d0      	b.n	8007d88 <_malloc_r+0x20>
 8007de6:	428c      	cmp	r4, r1
 8007de8:	684b      	ldr	r3, [r1, #4]
 8007dea:	bf16      	itet	ne
 8007dec:	6063      	strne	r3, [r4, #4]
 8007dee:	6013      	streq	r3, [r2, #0]
 8007df0:	460c      	movne	r4, r1
 8007df2:	e7eb      	b.n	8007dcc <_malloc_r+0x64>
 8007df4:	460c      	mov	r4, r1
 8007df6:	6849      	ldr	r1, [r1, #4]
 8007df8:	e7cc      	b.n	8007d94 <_malloc_r+0x2c>
 8007dfa:	1cc4      	adds	r4, r0, #3
 8007dfc:	f024 0403 	bic.w	r4, r4, #3
 8007e00:	42a0      	cmp	r0, r4
 8007e02:	d005      	beq.n	8007e10 <_malloc_r+0xa8>
 8007e04:	1a21      	subs	r1, r4, r0
 8007e06:	4630      	mov	r0, r6
 8007e08:	f000 f808 	bl	8007e1c <_sbrk_r>
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	d0cf      	beq.n	8007db0 <_malloc_r+0x48>
 8007e10:	6025      	str	r5, [r4, #0]
 8007e12:	e7db      	b.n	8007dcc <_malloc_r+0x64>
 8007e14:	200000d8 	.word	0x200000d8
 8007e18:	200000dc 	.word	0x200000dc

08007e1c <_sbrk_r>:
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	4c06      	ldr	r4, [pc, #24]	; (8007e38 <_sbrk_r+0x1c>)
 8007e20:	2300      	movs	r3, #0
 8007e22:	4605      	mov	r5, r0
 8007e24:	4608      	mov	r0, r1
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	f7fc f96e 	bl	8004108 <_sbrk>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d102      	bne.n	8007e36 <_sbrk_r+0x1a>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	b103      	cbz	r3, 8007e36 <_sbrk_r+0x1a>
 8007e34:	602b      	str	r3, [r5, #0]
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	2000843c 	.word	0x2000843c

08007e3c <__sread>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	460c      	mov	r4, r1
 8007e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e44:	f000 f896 	bl	8007f74 <_read_r>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	bfab      	itete	ge
 8007e4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8007e50:	181b      	addge	r3, r3, r0
 8007e52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e56:	bfac      	ite	ge
 8007e58:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e5a:	81a3      	strhlt	r3, [r4, #12]
 8007e5c:	bd10      	pop	{r4, pc}

08007e5e <__swrite>:
 8007e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e62:	461f      	mov	r7, r3
 8007e64:	898b      	ldrh	r3, [r1, #12]
 8007e66:	05db      	lsls	r3, r3, #23
 8007e68:	4605      	mov	r5, r0
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	4616      	mov	r6, r2
 8007e6e:	d505      	bpl.n	8007e7c <__swrite+0x1e>
 8007e70:	2302      	movs	r3, #2
 8007e72:	2200      	movs	r2, #0
 8007e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e78:	f000 f868 	bl	8007f4c <_lseek_r>
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	4632      	mov	r2, r6
 8007e8a:	463b      	mov	r3, r7
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e92:	f000 b817 	b.w	8007ec4 <_write_r>

08007e96 <__sseek>:
 8007e96:	b510      	push	{r4, lr}
 8007e98:	460c      	mov	r4, r1
 8007e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e9e:	f000 f855 	bl	8007f4c <_lseek_r>
 8007ea2:	1c43      	adds	r3, r0, #1
 8007ea4:	89a3      	ldrh	r3, [r4, #12]
 8007ea6:	bf15      	itete	ne
 8007ea8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007eaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007eb2:	81a3      	strheq	r3, [r4, #12]
 8007eb4:	bf18      	it	ne
 8007eb6:	81a3      	strhne	r3, [r4, #12]
 8007eb8:	bd10      	pop	{r4, pc}

08007eba <__sclose>:
 8007eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ebe:	f000 b813 	b.w	8007ee8 <_close_r>
	...

08007ec4 <_write_r>:
 8007ec4:	b538      	push	{r3, r4, r5, lr}
 8007ec6:	4c07      	ldr	r4, [pc, #28]	; (8007ee4 <_write_r+0x20>)
 8007ec8:	4605      	mov	r5, r0
 8007eca:	4608      	mov	r0, r1
 8007ecc:	4611      	mov	r1, r2
 8007ece:	2200      	movs	r2, #0
 8007ed0:	6022      	str	r2, [r4, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	f7fc f8c7 	bl	8004066 <_write>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	d102      	bne.n	8007ee2 <_write_r+0x1e>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	b103      	cbz	r3, 8007ee2 <_write_r+0x1e>
 8007ee0:	602b      	str	r3, [r5, #0]
 8007ee2:	bd38      	pop	{r3, r4, r5, pc}
 8007ee4:	2000843c 	.word	0x2000843c

08007ee8 <_close_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	4c06      	ldr	r4, [pc, #24]	; (8007f04 <_close_r+0x1c>)
 8007eec:	2300      	movs	r3, #0
 8007eee:	4605      	mov	r5, r0
 8007ef0:	4608      	mov	r0, r1
 8007ef2:	6023      	str	r3, [r4, #0]
 8007ef4:	f7fc f8d3 	bl	800409e <_close>
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	d102      	bne.n	8007f02 <_close_r+0x1a>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	b103      	cbz	r3, 8007f02 <_close_r+0x1a>
 8007f00:	602b      	str	r3, [r5, #0]
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	2000843c 	.word	0x2000843c

08007f08 <_fstat_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	4c07      	ldr	r4, [pc, #28]	; (8007f28 <_fstat_r+0x20>)
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	4605      	mov	r5, r0
 8007f10:	4608      	mov	r0, r1
 8007f12:	4611      	mov	r1, r2
 8007f14:	6023      	str	r3, [r4, #0]
 8007f16:	f7fc f8ce 	bl	80040b6 <_fstat>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	d102      	bne.n	8007f24 <_fstat_r+0x1c>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	b103      	cbz	r3, 8007f24 <_fstat_r+0x1c>
 8007f22:	602b      	str	r3, [r5, #0]
 8007f24:	bd38      	pop	{r3, r4, r5, pc}
 8007f26:	bf00      	nop
 8007f28:	2000843c 	.word	0x2000843c

08007f2c <_isatty_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4c06      	ldr	r4, [pc, #24]	; (8007f48 <_isatty_r+0x1c>)
 8007f30:	2300      	movs	r3, #0
 8007f32:	4605      	mov	r5, r0
 8007f34:	4608      	mov	r0, r1
 8007f36:	6023      	str	r3, [r4, #0]
 8007f38:	f7fc f8cd 	bl	80040d6 <_isatty>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	d102      	bne.n	8007f46 <_isatty_r+0x1a>
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	b103      	cbz	r3, 8007f46 <_isatty_r+0x1a>
 8007f44:	602b      	str	r3, [r5, #0]
 8007f46:	bd38      	pop	{r3, r4, r5, pc}
 8007f48:	2000843c 	.word	0x2000843c

08007f4c <_lseek_r>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	4c07      	ldr	r4, [pc, #28]	; (8007f6c <_lseek_r+0x20>)
 8007f50:	4605      	mov	r5, r0
 8007f52:	4608      	mov	r0, r1
 8007f54:	4611      	mov	r1, r2
 8007f56:	2200      	movs	r2, #0
 8007f58:	6022      	str	r2, [r4, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	f7fc f8c6 	bl	80040ec <_lseek>
 8007f60:	1c43      	adds	r3, r0, #1
 8007f62:	d102      	bne.n	8007f6a <_lseek_r+0x1e>
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	b103      	cbz	r3, 8007f6a <_lseek_r+0x1e>
 8007f68:	602b      	str	r3, [r5, #0]
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
 8007f6c:	2000843c 	.word	0x2000843c

08007f70 <__malloc_lock>:
 8007f70:	4770      	bx	lr

08007f72 <__malloc_unlock>:
 8007f72:	4770      	bx	lr

08007f74 <_read_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4c07      	ldr	r4, [pc, #28]	; (8007f94 <_read_r+0x20>)
 8007f78:	4605      	mov	r5, r0
 8007f7a:	4608      	mov	r0, r1
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	2200      	movs	r2, #0
 8007f80:	6022      	str	r2, [r4, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	f7fc f852 	bl	800402c <_read>
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	d102      	bne.n	8007f92 <_read_r+0x1e>
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	b103      	cbz	r3, 8007f92 <_read_r+0x1e>
 8007f90:	602b      	str	r3, [r5, #0]
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	2000843c 	.word	0x2000843c

08007f98 <_init>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	bf00      	nop
 8007f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9e:	bc08      	pop	{r3}
 8007fa0:	469e      	mov	lr, r3
 8007fa2:	4770      	bx	lr

08007fa4 <_fini>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	bf00      	nop
 8007fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007faa:	bc08      	pop	{r3}
 8007fac:	469e      	mov	lr, r3
 8007fae:	4770      	bx	lr
