
MP3_PLAYER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08009e4c  08009e4c  00019e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eec  08009eec  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009eec  08009eec  00019eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ef4  08009ef4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ef4  08009ef4  00019ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ef8  08009ef8  00019ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000856c  20000084  08009f80  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200085f0  08009f80  000285f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b8d  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d9e  00000000  00000000  00036c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016d0  00000000  00000000  000399e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001588  00000000  00000000  0003b0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002453a  00000000  00000000  0003c638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e07  00000000  00000000  00060b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8c5c  00000000  00000000  00071979  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a5d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006708  00000000  00000000  0014a650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009e34 	.word	0x08009e34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08009e34 	.word	0x08009e34

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <DESELECT>:

static
inline void DESELECT(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0

}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <xmit_spi>:

extern SPI_HandleTypeDef hspi3;

static
void xmit_spi(BYTE Data)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 80004fe:	bf00      	nop
 8000500:	4808      	ldr	r0, [pc, #32]	; (8000524 <xmit_spi+0x30>)
 8000502:	f007 fe23 	bl	800814c <HAL_SPI_GetState>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d1f9      	bne.n	8000500 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi3, &Data, 1, 5000);
 800050c:	1df9      	adds	r1, r7, #7
 800050e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000512:	2201      	movs	r2, #1
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <xmit_spi+0x30>)
 8000516:	f007 fb43 	bl	8007ba0 <HAL_SPI_Transmit>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200004fc 	.word	0x200004fc

08000528 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 800052e:	23ff      	movs	r3, #255	; 0xff
 8000530:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8000536:	bf00      	nop
 8000538:	4809      	ldr	r0, [pc, #36]	; (8000560 <rcvr_spi+0x38>)
 800053a:	f007 fe07 	bl	800814c <HAL_SPI_GetState>
 800053e:	4603      	mov	r3, r0
 8000540:	2b01      	cmp	r3, #1
 8000542:	d1f9      	bne.n	8000538 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi3, &Dummy, &Data, 1, 5000);
 8000544:	1dba      	adds	r2, r7, #6
 8000546:	1df9      	adds	r1, r7, #7
 8000548:	f241 3388 	movw	r3, #5000	; 0x1388
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2301      	movs	r3, #1
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <rcvr_spi+0x38>)
 8000552:	f007 fc59 	bl	8007e08 <HAL_SPI_TransmitReceive>

	return Data;
 8000556:	79bb      	ldrb	r3, [r7, #6]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200004fc 	.word	0x200004fc

08000564 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 800056c:	f7ff ffdc 	bl	8000528 <rcvr_spi>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	701a      	strb	r2, [r3, #0]
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <wait_ready+0x34>)
 8000588:	2232      	movs	r2, #50	; 0x32
 800058a:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 800058c:	f7ff ffcc 	bl	8000528 <rcvr_spi>
	do
		res = rcvr_spi();
 8000590:	f7ff ffca 	bl	8000528 <rcvr_spi>
 8000594:	4603      	mov	r3, r0
 8000596:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2bff      	cmp	r3, #255	; 0xff
 800059c:	d004      	beq.n	80005a8 <wait_ready+0x28>
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <wait_ready+0x34>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1f3      	bne.n	8000590 <wait_ready+0x10>

	return res;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200000a1 	.word	0x200000a1

080005b8 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 80005be:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005c2:	60bb      	str	r3, [r7, #8]

	DESELECT();
 80005c4:	f7ff ff8f 	bl	80004e6 <DESELECT>

	for (i = 0; i < 10; i++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	e005      	b.n	80005da <power_on+0x22>
		xmit_spi(0xFF);
 80005ce:	20ff      	movs	r0, #255	; 0xff
 80005d0:	f7ff ff90 	bl	80004f4 <xmit_spi>
	for (i = 0; i < 10; i++)
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	3301      	adds	r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	2b09      	cmp	r3, #9
 80005de:	d9f6      	bls.n	80005ce <power_on+0x16>

	SELECT();
 80005e0:	f7ff ff7a 	bl	80004d8 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 80005e4:	2340      	movs	r3, #64	; 0x40
 80005e6:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 80005f8:	2395      	movs	r3, #149	; 0x95
 80005fa:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e00b      	b.n	800061a <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	f107 0210 	add.w	r2, r7, #16
 8000608:	4413      	add	r3, r2
 800060a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff70 	bl	80004f4 <xmit_spi>
	for (i = 0; i < 6; i++)
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	3301      	adds	r3, #1
 8000618:	73fb      	strb	r3, [r7, #15]
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	2b05      	cmp	r3, #5
 800061e:	d9f0      	bls.n	8000602 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000620:	e002      	b.n	8000628 <power_on+0x70>
		Count--;
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	3b01      	subs	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000628:	f7ff ff7e 	bl	8000528 <rcvr_spi>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d002      	beq.n	8000638 <power_on+0x80>
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f4      	bne.n	8000622 <power_on+0x6a>

	DESELECT();
 8000638:	f7ff ff55 	bl	80004e6 <DESELECT>
	xmit_spi(0XFF);
 800063c:	20ff      	movs	r0, #255	; 0xff
 800063e:	f7ff ff59 	bl	80004f4 <xmit_spi>

	PowerFlag = 1;
 8000642:	4b03      	ldr	r3, [pc, #12]	; (8000650 <power_on+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000a3 	.word	0x200000a3

08000654 <power_off>:

static
void power_off(void) {
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <power_off+0x14>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	200000a3 	.word	0x200000a3

0800066c <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <chk_power+0x14>)
 8000672:	781b      	ldrb	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	200000a3 	.word	0x200000a3

08000684 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <rcvr_datablock+0x68>)
 8000690:	220a      	movs	r2, #10
 8000692:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000694:	f7ff ff48 	bl	8000528 <rcvr_spi>
 8000698:	4603      	mov	r3, r0
 800069a:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	2bff      	cmp	r3, #255	; 0xff
 80006a0:	d104      	bne.n	80006ac <rcvr_datablock+0x28>
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <rcvr_datablock+0x68>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1f3      	bne.n	8000694 <rcvr_datablock+0x10>
	if (token != 0xFE)
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	2bfe      	cmp	r3, #254	; 0xfe
 80006b0:	d001      	beq.n	80006b6 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 80006b2:	2300      	movs	r3, #0
 80006b4:	e016      	b.n	80006e4 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff51 	bl	8000564 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff4b 	bl	8000564 <rcvr_spi_m>
	} while (btr -= 2);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	3b02      	subs	r3, #2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1ed      	bne.n	80006b6 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 80006da:	f7ff ff25 	bl	8000528 <rcvr_spi>
	rcvr_spi();
 80006de:	f7ff ff23 	bl	8000528 <rcvr_spi>

	return TRUE; /* Return with success */
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000a0 	.word	0x200000a0

080006f0 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000700:	f7ff ff3e 	bl	8000580 <wait_ready>
 8000704:	4603      	mov	r3, r0
 8000706:	2bff      	cmp	r3, #255	; 0xff
 8000708:	d001      	beq.n	800070e <xmit_datablock+0x1e>
		return FALSE;
 800070a:	2300      	movs	r3, #0
 800070c:	e040      	b.n	8000790 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 800070e:	78fb      	ldrb	r3, [r7, #3]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff feef 	bl	80004f4 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	2bfd      	cmp	r3, #253	; 0xfd
 800071a:	d031      	beq.n	8000780 <xmit_datablock+0x90>
		wc = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fee3 	bl	80004f4 <xmit_spi>
			xmit_spi(*buff++);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fedc 	bl	80004f4 <xmit_spi>
		} while (--wc);
 800073c:	7bbb      	ldrb	r3, [r7, #14]
 800073e:	3b01      	subs	r3, #1
 8000740:	73bb      	strb	r3, [r7, #14]
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1eb      	bne.n	8000720 <xmit_datablock+0x30>

		rcvr_spi();
 8000748:	f7ff feee 	bl	8000528 <rcvr_spi>
		rcvr_spi();
 800074c:	f7ff feec 	bl	8000528 <rcvr_spi>

		while (i <= 64) {
 8000750:	e00b      	b.n	800076a <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000752:	f7ff fee9 	bl	8000528 <rcvr_spi>
 8000756:	4603      	mov	r3, r0
 8000758:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	f003 031f 	and.w	r3, r3, #31
 8000760:	2b05      	cmp	r3, #5
 8000762:	d006      	beq.n	8000772 <xmit_datablock+0x82>
				break;
			i++;
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	3301      	adds	r3, #1
 8000768:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	2b40      	cmp	r3, #64	; 0x40
 800076e:	d9f0      	bls.n	8000752 <xmit_datablock+0x62>
 8000770:	e000      	b.n	8000774 <xmit_datablock+0x84>
				break;
 8000772:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000774:	bf00      	nop
 8000776:	f7ff fed7 	bl	8000528 <rcvr_spi>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0fa      	beq.n	8000776 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f003 031f 	and.w	r3, r3, #31
 8000786:	2b05      	cmp	r3, #5
 8000788:	d101      	bne.n	800078e <xmit_datablock+0x9e>
		return TRUE;
 800078a:	2301      	movs	r3, #1
 800078c:	e000      	b.n	8000790 <xmit_datablock+0xa0>
	else
		return FALSE;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 80007a4:	f7ff feec 	bl	8000580 <wait_ready>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2bff      	cmp	r3, #255	; 0xff
 80007ac:	d001      	beq.n	80007b2 <send_cmd+0x1a>
		return 0xFF;
 80007ae:	23ff      	movs	r3, #255	; 0xff
 80007b0:	e040      	b.n	8000834 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fe9d 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	0e1b      	lsrs	r3, r3, #24
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe97 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	0c1b      	lsrs	r3, r3, #16
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fe91 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fe8b 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fe86 	bl	80004f4 <xmit_spi>
	n = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b40      	cmp	r3, #64	; 0x40
 80007f0:	d101      	bne.n	80007f6 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 80007f2:	2395      	movs	r3, #149	; 0x95
 80007f4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b48      	cmp	r3, #72	; 0x48
 80007fa:	d101      	bne.n	8000800 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 80007fc:	2387      	movs	r3, #135	; 0x87
 80007fe:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe76 	bl	80004f4 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b4c      	cmp	r3, #76	; 0x4c
 800080c:	d101      	bne.n	8000812 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 800080e:	f7ff fe8b 	bl	8000528 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8000812:	230a      	movs	r3, #10
 8000814:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8000816:	f7ff fe87 	bl	8000528 <rcvr_spi>
 800081a:	4603      	mov	r3, r0
 800081c:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 800081e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000822:	2b00      	cmp	r3, #0
 8000824:	da05      	bge.n	8000832 <send_cmd+0x9a>
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	3b01      	subs	r3, #1
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f1      	bne.n	8000816 <send_cmd+0x7e>

	return res; /* Return with the response value */
 8000832:	7bbb      	ldrb	r3, [r7, #14]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 800084c:	2301      	movs	r3, #1
 800084e:	e0d5      	b.n	80009fc <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8000850:	4b6c      	ldr	r3, [pc, #432]	; (8000a04 <disk_initialize+0x1c8>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <disk_initialize+0x1c8>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	e0ca      	b.n	80009fc <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8000866:	f7ff fea7 	bl	80005b8 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 800086a:	f7ff fe35 	bl	80004d8 <SELECT>
	ty = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8000872:	2100      	movs	r1, #0
 8000874:	2040      	movs	r0, #64	; 0x40
 8000876:	f7ff ff8f 	bl	8000798 <send_cmd>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 80a5 	bne.w	80009cc <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8000882:	4b61      	ldr	r3, [pc, #388]	; (8000a08 <disk_initialize+0x1cc>)
 8000884:	2264      	movs	r2, #100	; 0x64
 8000886:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8000888:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800088c:	2048      	movs	r0, #72	; 0x48
 800088e:	f7ff ff83 	bl	8000798 <send_cmd>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d158      	bne.n	800094a <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e00c      	b.n	80008b8 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800089e:	7bfc      	ldrb	r4, [r7, #15]
 80008a0:	f7ff fe42 	bl	8000528 <rcvr_spi>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4423      	add	r3, r4
 80008ae:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	3301      	adds	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d9ef      	bls.n	800089e <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 80008be:	7abb      	ldrb	r3, [r7, #10]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	f040 8083 	bne.w	80009cc <disk_initialize+0x190>
 80008c6:	7afb      	ldrb	r3, [r7, #11]
 80008c8:	2baa      	cmp	r3, #170	; 0xaa
 80008ca:	d17f      	bne.n	80009cc <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 80008cc:	2100      	movs	r1, #0
 80008ce:	2077      	movs	r0, #119	; 0x77
 80008d0:	f7ff ff62 	bl	8000798 <send_cmd>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d807      	bhi.n	80008ea <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80008da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008de:	2069      	movs	r0, #105	; 0x69
 80008e0:	f7ff ff5a 	bl	8000798 <send_cmd>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d005      	beq.n	80008f6 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80008ea:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <disk_initialize+0x1cc>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1eb      	bne.n	80008cc <disk_initialize+0x90>
 80008f4:	e000      	b.n	80008f8 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80008f6:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80008f8:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <disk_initialize+0x1cc>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d064      	beq.n	80009cc <disk_initialize+0x190>
 8000902:	2100      	movs	r1, #0
 8000904:	207a      	movs	r0, #122	; 0x7a
 8000906:	f7ff ff47 	bl	8000798 <send_cmd>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d15d      	bne.n	80009cc <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8000910:	2300      	movs	r3, #0
 8000912:	73fb      	strb	r3, [r7, #15]
 8000914:	e00c      	b.n	8000930 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8000916:	7bfc      	ldrb	r4, [r7, #15]
 8000918:	f7ff fe06 	bl	8000528 <rcvr_spi>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4423      	add	r3, r4
 8000926:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	3301      	adds	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	2b03      	cmp	r3, #3
 8000934:	d9ef      	bls.n	8000916 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8000936:	7a3b      	ldrb	r3, [r7, #8]
 8000938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <disk_initialize+0x108>
 8000940:	2306      	movs	r3, #6
 8000942:	e000      	b.n	8000946 <disk_initialize+0x10a>
 8000944:	2302      	movs	r3, #2
 8000946:	73bb      	strb	r3, [r7, #14]
 8000948:	e040      	b.n	80009cc <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800094a:	2100      	movs	r1, #0
 800094c:	2077      	movs	r0, #119	; 0x77
 800094e:	f7ff ff23 	bl	8000798 <send_cmd>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	d808      	bhi.n	800096a <disk_initialize+0x12e>
 8000958:	2100      	movs	r1, #0
 800095a:	2069      	movs	r0, #105	; 0x69
 800095c:	f7ff ff1c 	bl	8000798 <send_cmd>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d801      	bhi.n	800096a <disk_initialize+0x12e>
 8000966:	2302      	movs	r3, #2
 8000968:	e000      	b.n	800096c <disk_initialize+0x130>
 800096a:	2301      	movs	r3, #1
 800096c:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 800096e:	7bbb      	ldrb	r3, [r7, #14]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d10e      	bne.n	8000992 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8000974:	2100      	movs	r1, #0
 8000976:	2077      	movs	r0, #119	; 0x77
 8000978:	f7ff ff0e 	bl	8000798 <send_cmd>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d80e      	bhi.n	80009a0 <disk_initialize+0x164>
 8000982:	2100      	movs	r1, #0
 8000984:	2069      	movs	r0, #105	; 0x69
 8000986:	f7ff ff07 	bl	8000798 <send_cmd>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d107      	bne.n	80009a0 <disk_initialize+0x164>
						break; /* ACMD41 */
 8000990:	e00d      	b.n	80009ae <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8000992:	2100      	movs	r1, #0
 8000994:	2041      	movs	r0, #65	; 0x41
 8000996:	f7ff feff 	bl	8000798 <send_cmd>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d005      	beq.n	80009ac <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <disk_initialize+0x1cc>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1e1      	bne.n	800096e <disk_initialize+0x132>
 80009aa:	e000      	b.n	80009ae <disk_initialize+0x172>
						break; /* CMD1 */
 80009ac:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <disk_initialize+0x1cc>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d007      	beq.n	80009c8 <disk_initialize+0x18c>
 80009b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009bc:	2050      	movs	r0, #80	; 0x50
 80009be:	f7ff feeb 	bl	8000798 <send_cmd>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <disk_initialize+0x190>
				ty = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 80009cc:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <disk_initialize+0x1d0>)
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80009d2:	f7ff fd88 	bl	80004e6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80009d6:	f7ff fda7 	bl	8000528 <rcvr_spi>

	if (ty) /* Initialization succeded */
 80009da:	7bbb      	ldrb	r3, [r7, #14]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d008      	beq.n	80009f2 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <disk_initialize+0x1c8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f023 0301 	bic.w	r3, r3, #1
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <disk_initialize+0x1c8>)
 80009ee:	701a      	strb	r2, [r3, #0]
 80009f0:	e001      	b.n	80009f6 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80009f2:	f7ff fe2f 	bl	8000654 <power_off>

	return Stat;
 80009f6:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <disk_initialize+0x1c8>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	200000a0 	.word	0x200000a0
 8000a0c:	200000a2 	.word	0x200000a2

08000a10 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000a20:	2301      	movs	r3, #1
 8000a22:	e002      	b.n	8000a2a <disk_status+0x1a>
	return Stat;
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <disk_status+0x28>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000000 	.word	0x20000000

08000a3c <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	4603      	mov	r3, r0
 8000a4a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d102      	bne.n	8000a58 <disk_read+0x1c>
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <disk_read+0x20>
		return RES_PARERR;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	e051      	b.n	8000b00 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <disk_read+0xcc>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <disk_read+0x32>
		return RES_NOTRDY;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e048      	b.n	8000b00 <disk_read+0xc4>

	if (!(CardType & 4))
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <disk_read+0xd0>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	025b      	lsls	r3, r3, #9
 8000a7e:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000a80:	f7ff fd2a 	bl	80004d8 <SELECT>

	if (count == 1) { /* Single block read */
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d111      	bne.n	8000aae <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2051      	movs	r0, #81	; 0x51
 8000a8e:	f7ff fe83 	bl	8000798 <send_cmd>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d129      	bne.n	8000aec <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8000a98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9c:	68b8      	ldr	r0, [r7, #8]
 8000a9e:	f7ff fdf1 	bl	8000684 <rcvr_datablock>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d021      	beq.n	8000aec <disk_read+0xb0>
			count = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	e01e      	b.n	8000aec <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2052      	movs	r0, #82	; 0x52
 8000ab2:	f7ff fe71 	bl	8000798 <send_cmd>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d117      	bne.n	8000aec <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8000abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac0:	68b8      	ldr	r0, [r7, #8]
 8000ac2:	f7ff fddf 	bl	8000684 <rcvr_datablock>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00a      	beq.n	8000ae2 <disk_read+0xa6>
					break;
				buff += 512;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ad2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1ed      	bne.n	8000abc <disk_read+0x80>
 8000ae0:	e000      	b.n	8000ae4 <disk_read+0xa8>
					break;
 8000ae2:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	204c      	movs	r0, #76	; 0x4c
 8000ae8:	f7ff fe56 	bl	8000798 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8000aec:	f7ff fcfb 	bl	80004e6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000af0:	f7ff fd1a 	bl	8000528 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bf14      	ite	ne
 8000afa:	2301      	movne	r3, #1
 8000afc:	2300      	moveq	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	200000a2 	.word	0x200000a2

08000b10 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <disk_write+0x1c>
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <disk_write+0x20>
		return RES_PARERR;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	e06b      	b.n	8000c08 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8000b30:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <disk_write+0x100>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <disk_write+0x32>
		return RES_NOTRDY;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e062      	b.n	8000c08 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8000b42:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <disk_write+0x100>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <disk_write+0x44>
		return RES_WRPRT;
 8000b50:	2302      	movs	r3, #2
 8000b52:	e059      	b.n	8000c08 <disk_write+0xf8>

	if (!(CardType & 4))
 8000b54:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <disk_write+0x104>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	025b      	lsls	r3, r3, #9
 8000b64:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000b66:	f7ff fcb7 	bl	80004d8 <SELECT>

	if (count == 1) { /* Single block write */
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d110      	bne.n	8000b92 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	2058      	movs	r0, #88	; 0x58
 8000b74:	f7ff fe10 	bl	8000798 <send_cmd>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d13a      	bne.n	8000bf4 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8000b7e:	21fe      	movs	r1, #254	; 0xfe
 8000b80:	68b8      	ldr	r0, [r7, #8]
 8000b82:	f7ff fdb5 	bl	80006f0 <xmit_datablock>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d033      	beq.n	8000bf4 <disk_write+0xe4>
			count = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	e030      	b.n	8000bf4 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <disk_write+0x104>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d007      	beq.n	8000bae <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2077      	movs	r0, #119	; 0x77
 8000ba2:	f7ff fdf9 	bl	8000798 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8000ba6:	6839      	ldr	r1, [r7, #0]
 8000ba8:	2057      	movs	r0, #87	; 0x57
 8000baa:	f7ff fdf5 	bl	8000798 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2059      	movs	r0, #89	; 0x59
 8000bb2:	f7ff fdf1 	bl	8000798 <send_cmd>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d11b      	bne.n	8000bf4 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8000bbc:	21fc      	movs	r1, #252	; 0xfc
 8000bbe:	68b8      	ldr	r0, [r7, #8]
 8000bc0:	f7ff fd96 	bl	80006f0 <xmit_datablock>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00a      	beq.n	8000be0 <disk_write+0xd0>
					break;
				buff += 512;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bd0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1ee      	bne.n	8000bbc <disk_write+0xac>
 8000bde:	e000      	b.n	8000be2 <disk_write+0xd2>
					break;
 8000be0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8000be2:	21fd      	movs	r1, #253	; 0xfd
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff fd83 	bl	80006f0 <xmit_datablock>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <disk_write+0xe4>
				count = 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8000bf4:	f7ff fc77 	bl	80004e6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000bf8:	f7ff fc96 	bl	8000528 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf14      	ite	ne
 8000c02:	2301      	movne	r3, #1
 8000c04:	2300      	moveq	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000000 	.word	0x20000000
 8000c14:	200000a2 	.word	0x200000a2

08000c18 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b08b      	sub	sp, #44	; 0x2c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	603a      	str	r2, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	460b      	mov	r3, r1
 8000c26:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <disk_ioctl+0x1e>
		return RES_PARERR;
 8000c32:	2304      	movs	r3, #4
 8000c34:	e16a      	b.n	8000f0c <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	d127      	bne.n	8000c92 <disk_ioctl+0x7a>
		switch (*ptr) {
 8000c42:	6a3b      	ldr	r3, [r7, #32]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d00e      	beq.n	8000c68 <disk_ioctl+0x50>
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d012      	beq.n	8000c74 <disk_ioctl+0x5c>
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d11b      	bne.n	8000c8a <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 8000c52:	f7ff fd0b 	bl	800066c <chk_power>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <disk_ioctl+0x48>
				power_off(); /* Power off */
 8000c5c:	f7ff fcfa 	bl	8000654 <power_off>
			res = RES_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c66:	e14f      	b.n	8000f08 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8000c68:	f7ff fca6 	bl	80005b8 <power_on>
			res = RES_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c72:	e149      	b.n	8000f08 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8000c74:	f7ff fcfa 	bl	800066c <chk_power>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	6a3b      	ldr	r3, [r7, #32]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c88:	e13e      	b.n	8000f08 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c90:	e13a      	b.n	8000f08 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8000c92:	4ba0      	ldr	r3, [pc, #640]	; (8000f14 <disk_ioctl+0x2fc>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e133      	b.n	8000f0c <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8000ca4:	f7ff fc18 	bl	80004d8 <SELECT>

		switch (ctrl) {
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	2b35      	cmp	r3, #53	; 0x35
 8000cac:	f200 811d 	bhi.w	8000eea <disk_ioctl+0x2d2>
 8000cb0:	a201      	add	r2, pc, #4	; (adr r2, 8000cb8 <disk_ioctl+0xa0>)
 8000cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb6:	bf00      	nop
 8000cb8:	08000e53 	.word	0x08000e53
 8000cbc:	08000d91 	.word	0x08000d91
 8000cc0:	08000e43 	.word	0x08000e43
 8000cc4:	08000eeb 	.word	0x08000eeb
 8000cc8:	08000eeb 	.word	0x08000eeb
 8000ccc:	08000eeb 	.word	0x08000eeb
 8000cd0:	08000eeb 	.word	0x08000eeb
 8000cd4:	08000eeb 	.word	0x08000eeb
 8000cd8:	08000eeb 	.word	0x08000eeb
 8000cdc:	08000eeb 	.word	0x08000eeb
 8000ce0:	08000eeb 	.word	0x08000eeb
 8000ce4:	08000eeb 	.word	0x08000eeb
 8000ce8:	08000eeb 	.word	0x08000eeb
 8000cec:	08000eeb 	.word	0x08000eeb
 8000cf0:	08000eeb 	.word	0x08000eeb
 8000cf4:	08000eeb 	.word	0x08000eeb
 8000cf8:	08000eeb 	.word	0x08000eeb
 8000cfc:	08000eeb 	.word	0x08000eeb
 8000d00:	08000eeb 	.word	0x08000eeb
 8000d04:	08000eeb 	.word	0x08000eeb
 8000d08:	08000eeb 	.word	0x08000eeb
 8000d0c:	08000eeb 	.word	0x08000eeb
 8000d10:	08000eeb 	.word	0x08000eeb
 8000d14:	08000eeb 	.word	0x08000eeb
 8000d18:	08000eeb 	.word	0x08000eeb
 8000d1c:	08000eeb 	.word	0x08000eeb
 8000d20:	08000eeb 	.word	0x08000eeb
 8000d24:	08000eeb 	.word	0x08000eeb
 8000d28:	08000eeb 	.word	0x08000eeb
 8000d2c:	08000eeb 	.word	0x08000eeb
 8000d30:	08000eeb 	.word	0x08000eeb
 8000d34:	08000eeb 	.word	0x08000eeb
 8000d38:	08000eeb 	.word	0x08000eeb
 8000d3c:	08000eeb 	.word	0x08000eeb
 8000d40:	08000eeb 	.word	0x08000eeb
 8000d44:	08000eeb 	.word	0x08000eeb
 8000d48:	08000eeb 	.word	0x08000eeb
 8000d4c:	08000eeb 	.word	0x08000eeb
 8000d50:	08000eeb 	.word	0x08000eeb
 8000d54:	08000eeb 	.word	0x08000eeb
 8000d58:	08000eeb 	.word	0x08000eeb
 8000d5c:	08000eeb 	.word	0x08000eeb
 8000d60:	08000eeb 	.word	0x08000eeb
 8000d64:	08000eeb 	.word	0x08000eeb
 8000d68:	08000eeb 	.word	0x08000eeb
 8000d6c:	08000eeb 	.word	0x08000eeb
 8000d70:	08000eeb 	.word	0x08000eeb
 8000d74:	08000eeb 	.word	0x08000eeb
 8000d78:	08000eeb 	.word	0x08000eeb
 8000d7c:	08000eeb 	.word	0x08000eeb
 8000d80:	08000eeb 	.word	0x08000eeb
 8000d84:	08000e65 	.word	0x08000e65
 8000d88:	08000e89 	.word	0x08000e89
 8000d8c:	08000ead 	.word	0x08000ead
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8000d90:	2100      	movs	r1, #0
 8000d92:	2049      	movs	r0, #73	; 0x49
 8000d94:	f7ff fd00 	bl	8000798 <send_cmd>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 80a9 	bne.w	8000ef2 <disk_ioctl+0x2da>
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2110      	movs	r1, #16
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc6c 	bl	8000684 <rcvr_datablock>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 809f 	beq.w	8000ef2 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8000db4:	7b3b      	ldrb	r3, [r7, #12]
 8000db6:	099b      	lsrs	r3, r3, #6
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d10e      	bne.n	8000ddc <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dbe:	7d7b      	ldrb	r3, [r7, #21]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	7d3b      	ldrb	r3, [r7, #20]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4413      	add	r3, r2
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3301      	adds	r3, #1
 8000dd0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dd2:	8bfb      	ldrh	r3, [r7, #30]
 8000dd4:	029a      	lsls	r2, r3, #10
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e02e      	b.n	8000e3a <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000ddc:	7c7b      	ldrb	r3, [r7, #17]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	7dbb      	ldrb	r3, [r7, #22]
 8000de6:	09db      	lsrs	r3, r3, #7
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8000dee:	7d7b      	ldrb	r3, [r7, #21]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 0306 	and.w	r3, r3, #6
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000dfe:	3302      	adds	r3, #2
 8000e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000e04:	7d3b      	ldrb	r3, [r7, #20]
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	7cfb      	ldrb	r3, [r7, #19]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8000e18:	7cbb      	ldrb	r3, [r7, #18]
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000e28:	3301      	adds	r3, #1
 8000e2a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e2c:	8bfa      	ldrh	r2, [r7, #30]
 8000e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e32:	3b09      	subs	r3, #9
 8000e34:	409a      	lsls	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e40:	e057      	b.n	8000ef2 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e48:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e50:	e056      	b.n	8000f00 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8000e52:	f7ff fb95 	bl	8000580 <wait_ready>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2bff      	cmp	r3, #255	; 0xff
 8000e5a:	d14c      	bne.n	8000ef6 <disk_ioctl+0x2de>
				res = RES_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e62:	e048      	b.n	8000ef6 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8000e64:	2100      	movs	r1, #0
 8000e66:	2049      	movs	r0, #73	; 0x49
 8000e68:	f7ff fc96 	bl	8000798 <send_cmd>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d143      	bne.n	8000efa <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8000e72:	2110      	movs	r1, #16
 8000e74:	6a38      	ldr	r0, [r7, #32]
 8000e76:	f7ff fc05 	bl	8000684 <rcvr_datablock>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d03c      	beq.n	8000efa <disk_ioctl+0x2e2>
				res = RES_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e86:	e038      	b.n	8000efa <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8000e88:	2100      	movs	r1, #0
 8000e8a:	204a      	movs	r0, #74	; 0x4a
 8000e8c:	f7ff fc84 	bl	8000798 <send_cmd>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d133      	bne.n	8000efe <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8000e96:	2110      	movs	r1, #16
 8000e98:	6a38      	ldr	r0, [r7, #32]
 8000e9a:	f7ff fbf3 	bl	8000684 <rcvr_datablock>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d02c      	beq.n	8000efe <disk_ioctl+0x2e6>
				res = RES_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000eaa:	e028      	b.n	8000efe <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8000eac:	2100      	movs	r1, #0
 8000eae:	207a      	movs	r0, #122	; 0x7a
 8000eb0:	f7ff fc72 	bl	8000798 <send_cmd>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d117      	bne.n	8000eea <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ec0:	e00b      	b.n	8000eda <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8000ec2:	6a3c      	ldr	r4, [r7, #32]
 8000ec4:	1c63      	adds	r3, r4, #1
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	f7ff fb2e 	bl	8000528 <rcvr_spi>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d9ef      	bls.n	8000ec2 <disk_ioctl+0x2aa>
				res = RES_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000ee8:	e00a      	b.n	8000f00 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8000eea:	2304      	movs	r3, #4
 8000eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ef0:	e006      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000ef2:	bf00      	nop
 8000ef4:	e004      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000ef6:	bf00      	nop
 8000ef8:	e002      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000efa:	bf00      	nop
 8000efc:	e000      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000efe:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8000f00:	f7ff faf1 	bl	80004e6 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8000f04:	f7ff fb10 	bl	8000528 <rcvr_spi>
	}

	return res;
 8000f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	372c      	adds	r7, #44	; 0x2c
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	20000000 	.word	0x20000000

08000f18 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <disk_timerproc+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d005      	beq.n	8000f36 <disk_timerproc+0x1e>
		Timer1 = --n;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <disk_timerproc+0x44>)
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <disk_timerproc+0x48>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <disk_timerproc+0x36>
		Timer2 = --n;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <disk_timerproc+0x48>)
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	7013      	strb	r3, [r2, #0]

}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200000a0 	.word	0x200000a0
 8000f60:	200000a1 	.word	0x200000a1

08000f64 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f74:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	2b09      	cmp	r3, #9
 8000f7e:	d904      	bls.n	8000f8a <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8000f86:	f7ff ffc7 	bl	8000f18 <disk_timerproc>
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000310 	.word	0x20000310

08000f94 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	36c55cc0 	.word	0x36c55cc0

08000fa8 <ld_word>:
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	81fb      	strh	r3, [r7, #14]
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	81fb      	strh	r3, [r7, #14]
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <ld_dword>:
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3303      	adds	r3, #3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	3202      	adds	r2, #2
 8000ff0:	7812      	ldrb	r2, [r2, #0]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	3201      	adds	r2, #1
 8000ffe:	7812      	ldrb	r2, [r2, #0]
 8001000:	4313      	orrs	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	7812      	ldrb	r2, [r2, #0]
 800100c:	4313      	orrs	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <st_word>:
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	887a      	ldrh	r2, [r7, #2]
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	807b      	strh	r3, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <st_dword>:
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	0a1b      	lsrs	r3, r3, #8
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <mem_cpy>:
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00d      	beq.n	80010e2 <mem_cpy+0x36>
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	1c53      	adds	r3, r2, #1
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	1c59      	adds	r1, r3, #1
 80010d0:	6179      	str	r1, [r7, #20]
 80010d2:	7812      	ldrb	r2, [r2, #0]
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3b01      	subs	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f1      	bne.n	80010c6 <mem_cpy+0x1a>
 80010e2:	bf00      	nop
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <mem_set>:
 80010ee:	b480      	push	{r7}
 80010f0:	b087      	sub	sp, #28
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	617a      	str	r2, [r7, #20]
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3b01      	subs	r3, #1
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f3      	bne.n	80010fe <mem_set+0x10>
 8001116:	bf00      	nop
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <mem_cmp>:
 8001122:	b480      	push	{r7}
 8001124:	b089      	sub	sp, #36	; 0x24
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	61fa      	str	r2, [r7, #28]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	61ba      	str	r2, [r7, #24]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	1acb      	subs	r3, r1, r3
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <mem_cmp+0x40>
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0eb      	beq.n	800113a <mem_cmp+0x18>
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	4618      	mov	r0, r3
 8001166:	3724      	adds	r7, #36	; 0x24
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <chk_chr>:
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	e002      	b.n	8001182 <chk_chr+0x12>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3301      	adds	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <chk_chr+0x26>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4293      	cmp	r3, r2
 8001194:	d1f2      	bne.n	800117c <chk_chr+0xc>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <dbc_1st>:
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	2281      	movs	r2, #129	; 0x81
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d30f      	bcc.n	80011d8 <dbc_1st+0x32>
 80011b8:	229f      	movs	r2, #159	; 0x9f
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4293      	cmp	r3, r2
 80011be:	d801      	bhi.n	80011c4 <dbc_1st+0x1e>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e00a      	b.n	80011da <dbc_1st+0x34>
 80011c4:	22e0      	movs	r2, #224	; 0xe0
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d305      	bcc.n	80011d8 <dbc_1st+0x32>
 80011cc:	22fc      	movs	r2, #252	; 0xfc
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d801      	bhi.n	80011d8 <dbc_1st+0x32>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <dbc_1st+0x34>
 80011d8:	2300      	movs	r3, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <dbc_2nd>:
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	2240      	movs	r2, #64	; 0x40
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d319      	bcc.n	800122c <dbc_2nd+0x46>
 80011f8:	227e      	movs	r2, #126	; 0x7e
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d801      	bhi.n	8001204 <dbc_2nd+0x1e>
 8001200:	2301      	movs	r3, #1
 8001202:	e014      	b.n	800122e <dbc_2nd+0x48>
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	4293      	cmp	r3, r2
 800120a:	d305      	bcc.n	8001218 <dbc_2nd+0x32>
 800120c:	22fc      	movs	r2, #252	; 0xfc
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4293      	cmp	r3, r2
 8001212:	d801      	bhi.n	8001218 <dbc_2nd+0x32>
 8001214:	2301      	movs	r3, #1
 8001216:	e00a      	b.n	800122e <dbc_2nd+0x48>
 8001218:	2200      	movs	r2, #0
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4293      	cmp	r3, r2
 800121e:	d305      	bcc.n	800122c <dbc_2nd+0x46>
 8001220:	2200      	movs	r2, #0
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4293      	cmp	r3, r2
 8001226:	d801      	bhi.n	800122c <dbc_2nd+0x46>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <dbc_2nd+0x48>
 800122c:	2300      	movs	r3, #0
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <sync_window>:
 800123a:	b580      	push	{r7, lr}
 800123c:	b084      	sub	sp, #16
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	78db      	ldrb	r3, [r3, #3]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d02c      	beq.n	80012a8 <sync_window+0x6e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7858      	ldrb	r0, [r3, #1]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800125c:	2301      	movs	r3, #1
 800125e:	f7ff fc57 	bl	8000b10 <disk_write>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d11d      	bne.n	80012a4 <sync_window+0x6a>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	70da      	strb	r2, [r3, #3]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	1ad2      	subs	r2, r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	429a      	cmp	r2, r3
 800127e:	d213      	bcs.n	80012a8 <sync_window+0x6e>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	789b      	ldrb	r3, [r3, #2]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d10f      	bne.n	80012a8 <sync_window+0x6e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7858      	ldrb	r0, [r3, #1]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	441a      	add	r2, r3
 800129c:	2301      	movs	r3, #1
 800129e:	f7ff fc37 	bl	8000b10 <disk_write>
 80012a2:	e001      	b.n	80012a8 <sync_window+0x6e>
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <move_window>:
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d01b      	beq.n	8001302 <move_window+0x50>
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffb5 	bl	800123a <sync_window>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d113      	bne.n	8001302 <move_window+0x50>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7858      	ldrb	r0, [r3, #1]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80012e4:	2301      	movs	r3, #1
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	f7ff fba8 	bl	8000a3c <disk_read>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <move_window+0x4a>
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <sync_fs>:
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff90 	bl	800123a <sync_window>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d158      	bne.n	80013d6 <sync_fs+0xca>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d148      	bne.n	80013be <sync_fs+0xb2>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	791b      	ldrb	r3, [r3, #4]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d144      	bne.n	80013be <sync_fs+0xb2>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3330      	adds	r3, #48	; 0x30
 8001338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fed5 	bl	80010ee <mem_set>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3330      	adds	r3, #48	; 0x30
 8001348:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800134c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe64 	bl	800101e <st_word>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3330      	adds	r3, #48	; 0x30
 800135a:	4921      	ldr	r1, [pc, #132]	; (80013e0 <sync_fs+0xd4>)
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe79 	bl	8001054 <st_dword>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3330      	adds	r3, #48	; 0x30
 8001366:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800136a:	491e      	ldr	r1, [pc, #120]	; (80013e4 <sync_fs+0xd8>)
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe71 	bl	8001054 <st_dword>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3330      	adds	r3, #48	; 0x30
 8001376:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	4619      	mov	r1, r3
 8001380:	4610      	mov	r0, r2
 8001382:	f7ff fe67 	bl	8001054 <st_dword>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3330      	adds	r3, #48	; 0x30
 800138a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	4619      	mov	r1, r3
 8001394:	4610      	mov	r0, r2
 8001396:	f7ff fe5d 	bl	8001054 <st_dword>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7858      	ldrb	r0, [r3, #1]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b2:	2301      	movs	r3, #1
 80013b4:	f7ff fbac 	bl	8000b10 <disk_write>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	711a      	strb	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	785b      	ldrb	r3, [r3, #1]
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fc26 	bl	8000c18 <disk_ioctl>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <sync_fs+0xca>
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	41615252 	.word	0x41615252
 80013e4:	61417272 	.word	0x61417272

080013e8 <clst2sect>:
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	3b02      	subs	r3, #2
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	3b02      	subs	r3, #2
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d301      	bcc.n	8001408 <clst2sect+0x20>
 8001404:	2300      	movs	r3, #0
 8001406:	e008      	b.n	800141a <clst2sect+0x32>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	895b      	ldrh	r3, [r3, #10]
 8001410:	4619      	mov	r1, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	fb03 f301 	mul.w	r3, r3, r1
 8001418:	4413      	add	r3, r2
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <get_fat>:
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d904      	bls.n	8001446 <get_fat+0x20>
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d302      	bcc.n	800144c <get_fat+0x26>
 8001446:	2301      	movs	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	e08c      	b.n	8001566 <get_fat+0x140>
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d045      	beq.n	80014e6 <get_fat+0xc0>
 800145a:	2b03      	cmp	r3, #3
 800145c:	d05d      	beq.n	800151a <get_fat+0xf4>
 800145e:	2b01      	cmp	r3, #1
 8001460:	d177      	bne.n	8001552 <get_fat+0x12c>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4413      	add	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	6a1a      	ldr	r2, [r3, #32]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	0a5b      	lsrs	r3, r3, #9
 8001478:	4413      	add	r3, r2
 800147a:	4619      	mov	r1, r3
 800147c:	6938      	ldr	r0, [r7, #16]
 800147e:	f7ff ff18 	bl	80012b2 <move_window>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d167      	bne.n	8001558 <get_fat+0x132>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60fa      	str	r2, [r7, #12]
 800148e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4413      	add	r3, r2
 8001496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6a1a      	ldr	r2, [r3, #32]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	0a5b      	lsrs	r3, r3, #9
 80014a4:	4413      	add	r3, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	6938      	ldr	r0, [r7, #16]
 80014aa:	f7ff ff02 	bl	80012b2 <move_window>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d153      	bne.n	800155c <get_fat+0x136>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	461a      	mov	r2, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <get_fat+0xb6>
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	e002      	b.n	80014e2 <get_fat+0xbc>
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e03f      	b.n	8001566 <get_fat+0x140>
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	6a1a      	ldr	r2, [r3, #32]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	4413      	add	r3, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	6938      	ldr	r0, [r7, #16]
 80014f4:	f7ff fedd 	bl	80012b2 <move_window>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d130      	bne.n	8001560 <get_fat+0x13a>
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800150c:	4413      	add	r3, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fd4a 	bl	8000fa8 <ld_word>
 8001514:	4603      	mov	r3, r0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e025      	b.n	8001566 <get_fat+0x140>
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	6a1a      	ldr	r2, [r3, #32]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	09db      	lsrs	r3, r3, #7
 8001522:	4413      	add	r3, r2
 8001524:	4619      	mov	r1, r3
 8001526:	6938      	ldr	r0, [r7, #16]
 8001528:	f7ff fec3 	bl	80012b2 <move_window>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d118      	bne.n	8001564 <get_fat+0x13e>
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001540:	4413      	add	r3, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fd48 	bl	8000fd8 <ld_dword>
 8001548:	4603      	mov	r3, r0
 800154a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e009      	b.n	8001566 <get_fat+0x140>
 8001552:	2301      	movs	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	e006      	b.n	8001566 <get_fat+0x140>
 8001558:	bf00      	nop
 800155a:	e004      	b.n	8001566 <get_fat+0x140>
 800155c:	bf00      	nop
 800155e:	e002      	b.n	8001566 <get_fat+0x140>
 8001560:	bf00      	nop
 8001562:	e000      	b.n	8001566 <get_fat+0x140>
 8001564:	bf00      	nop
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <put_fat>:
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	2302      	movs	r3, #2
 800157e:	77fb      	strb	r3, [r7, #31]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b01      	cmp	r3, #1
 8001584:	f240 80d6 	bls.w	8001734 <put_fat+0x1c4>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	429a      	cmp	r2, r3
 8001590:	f080 80d0 	bcs.w	8001734 <put_fat+0x1c4>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d073      	beq.n	8001684 <put_fat+0x114>
 800159c:	2b03      	cmp	r3, #3
 800159e:	f000 8091 	beq.w	80016c4 <put_fat+0x154>
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	f040 80c6 	bne.w	8001734 <put_fat+0x1c4>
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4413      	add	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	0a5b      	lsrs	r3, r3, #9
 80015be:	4413      	add	r3, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f7ff fe75 	bl	80012b2 <move_window>
 80015c8:	4603      	mov	r3, r0
 80015ca:	77fb      	strb	r3, [r7, #31]
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f040 80a9 	bne.w	8001726 <put_fat+0x1b6>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	61b9      	str	r1, [r7, #24]
 80015e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e4:	4413      	add	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00d      	beq.n	800160e <put_fat+0x9e>
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	b25a      	sxtb	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	b25b      	sxtb	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b25b      	sxtb	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	e001      	b.n	8001612 <put_fat+0xa2>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	7013      	strb	r3, [r2, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2201      	movs	r2, #1
 800161a:	70da      	strb	r2, [r3, #3]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a1a      	ldr	r2, [r3, #32]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	0a5b      	lsrs	r3, r3, #9
 8001624:	4413      	add	r3, r2
 8001626:	4619      	mov	r1, r3
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fe42 	bl	80012b2 <move_window>
 800162e:	4603      	mov	r3, r0
 8001630:	77fb      	strb	r3, [r7, #31]
 8001632:	7ffb      	ldrb	r3, [r7, #31]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d178      	bne.n	800172a <put_fat+0x1ba>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001644:	4413      	add	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <put_fat+0xea>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	b2db      	uxtb	r3, r3
 8001658:	e00e      	b.n	8001678 <put_fat+0x108>
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b25b      	sxtb	r3, r3
 8001660:	f023 030f 	bic.w	r3, r3, #15
 8001664:	b25a      	sxtb	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	b25b      	sxtb	r3, r3
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	b25b      	sxtb	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	7013      	strb	r3, [r2, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2201      	movs	r2, #1
 8001680:	70da      	strb	r2, [r3, #3]
 8001682:	e057      	b.n	8001734 <put_fat+0x1c4>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6a1a      	ldr	r2, [r3, #32]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	4413      	add	r3, r2
 800168e:	4619      	mov	r1, r3
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff fe0e 	bl	80012b2 <move_window>
 8001696:	4603      	mov	r3, r0
 8001698:	77fb      	strb	r3, [r7, #31]
 800169a:	7ffb      	ldrb	r3, [r7, #31]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d146      	bne.n	800172e <put_fat+0x1be>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80016ae:	4413      	add	r3, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	b292      	uxth	r2, r2
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fcb1 	bl	800101e <st_word>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2201      	movs	r2, #1
 80016c0:	70da      	strb	r2, [r3, #3]
 80016c2:	e037      	b.n	8001734 <put_fat+0x1c4>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	09db      	lsrs	r3, r3, #7
 80016cc:	4413      	add	r3, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff fdee 	bl	80012b2 <move_window>
 80016d6:	4603      	mov	r3, r0
 80016d8:	77fb      	strb	r3, [r7, #31]
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d128      	bne.n	8001732 <put_fat+0x1c2>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80016f4:	4413      	add	r3, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fc6e 	bl	8000fd8 <ld_dword>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001702:	4323      	orrs	r3, r4
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001714:	4413      	add	r3, r2
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fc9b 	bl	8001054 <st_dword>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2201      	movs	r2, #1
 8001722:	70da      	strb	r2, [r3, #3]
 8001724:	e006      	b.n	8001734 <put_fat+0x1c4>
 8001726:	bf00      	nop
 8001728:	e004      	b.n	8001734 <put_fat+0x1c4>
 800172a:	bf00      	nop
 800172c:	e002      	b.n	8001734 <put_fat+0x1c4>
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <put_fat+0x1c4>
 8001732:	bf00      	nop
 8001734:	7ffb      	ldrb	r3, [r7, #31]
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd90      	pop	{r4, r7, pc}

0800173e <remove_chain>:
 800173e:	b580      	push	{r7, lr}
 8001740:	b088      	sub	sp, #32
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	2300      	movs	r3, #0
 800174c:	77fb      	strb	r3, [r7, #31]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d904      	bls.n	8001764 <remove_chain+0x26>
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	429a      	cmp	r2, r3
 8001762:	d301      	bcc.n	8001768 <remove_chain+0x2a>
 8001764:	2302      	movs	r3, #2
 8001766:	e04b      	b.n	8001800 <remove_chain+0xc2>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00c      	beq.n	8001788 <remove_chain+0x4a>
 800176e:	f04f 32ff 	mov.w	r2, #4294967295
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	69b8      	ldr	r0, [r7, #24]
 8001776:	f7ff fefb 	bl	8001570 <put_fat>
 800177a:	4603      	mov	r3, r0
 800177c:	77fb      	strb	r3, [r7, #31]
 800177e:	7ffb      	ldrb	r3, [r7, #31]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <remove_chain+0x4a>
 8001784:	7ffb      	ldrb	r3, [r7, #31]
 8001786:	e03b      	b.n	8001800 <remove_chain+0xc2>
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f7ff fe4b 	bl	8001426 <get_fat>
 8001790:	6178      	str	r0, [r7, #20]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d031      	beq.n	80017fc <remove_chain+0xbe>
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <remove_chain+0x64>
 800179e:	2302      	movs	r3, #2
 80017a0:	e02e      	b.n	8001800 <remove_chain+0xc2>
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a8:	d101      	bne.n	80017ae <remove_chain+0x70>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e028      	b.n	8001800 <remove_chain+0xc2>
 80017ae:	2200      	movs	r2, #0
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	69b8      	ldr	r0, [r7, #24]
 80017b4:	f7ff fedc 	bl	8001570 <put_fat>
 80017b8:	4603      	mov	r3, r0
 80017ba:	77fb      	strb	r3, [r7, #31]
 80017bc:	7ffb      	ldrb	r3, [r7, #31]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <remove_chain+0x88>
 80017c2:	7ffb      	ldrb	r3, [r7, #31]
 80017c4:	e01c      	b.n	8001800 <remove_chain+0xc2>
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	3b02      	subs	r3, #2
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d20b      	bcs.n	80017ec <remove_chain+0xae>
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	791b      	ldrb	r3, [r3, #4]
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	711a      	strb	r2, [r3, #4]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3c6      	bcc.n	8001788 <remove_chain+0x4a>
 80017fa:	e000      	b.n	80017fe <remove_chain+0xc0>
 80017fc:	bf00      	nop
 80017fe:	2300      	movs	r3, #0
 8001800:	4618      	mov	r0, r3
 8001802:	3720      	adds	r7, #32
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <create_chain>:
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10d      	bne.n	800183a <create_chain+0x32>
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <create_chain+0x2c>
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	429a      	cmp	r2, r3
 8001832:	d31b      	bcc.n	800186c <create_chain+0x64>
 8001834:	2301      	movs	r3, #1
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	e018      	b.n	800186c <create_chain+0x64>
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fdf2 	bl	8001426 <get_fat>
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d801      	bhi.n	800184e <create_chain+0x46>
 800184a:	2301      	movs	r3, #1
 800184c:	e0a9      	b.n	80019a2 <create_chain+0x19a>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001854:	d101      	bne.n	800185a <create_chain+0x52>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	e0a3      	b.n	80019a2 <create_chain+0x19a>
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d201      	bcs.n	8001868 <create_chain+0x60>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	e09c      	b.n	80019a2 <create_chain+0x19a>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <create_chain+0x70>
 8001874:	2300      	movs	r3, #0
 8001876:	e094      	b.n	80019a2 <create_chain+0x19a>
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d129      	bne.n	80018d8 <create_chain+0xd0>
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	3301      	adds	r3, #1
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	429a      	cmp	r2, r3
 8001892:	d301      	bcc.n	8001898 <create_chain+0x90>
 8001894:	2302      	movs	r3, #2
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	69f9      	ldr	r1, [r7, #28]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fdc3 	bl	8001426 <get_fat>
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d003      	beq.n	80018b0 <create_chain+0xa8>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ae:	d101      	bne.n	80018b4 <create_chain+0xac>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	e076      	b.n	80019a2 <create_chain+0x19a>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00e      	beq.n	80018d8 <create_chain+0xd0>
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d906      	bls.n	80018d4 <create_chain+0xcc>
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d201      	bcs.n	80018d4 <create_chain+0xcc>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d129      	bne.n	8001932 <create_chain+0x12a>
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3301      	adds	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d307      	bcc.n	8001902 <create_chain+0xfa>
 80018f2:	2302      	movs	r3, #2
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d901      	bls.n	8001902 <create_chain+0xfa>
 80018fe:	2300      	movs	r3, #0
 8001900:	e04f      	b.n	80019a2 <create_chain+0x19a>
 8001902:	69f9      	ldr	r1, [r7, #28]
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fd8e 	bl	8001426 <get_fat>
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00e      	beq.n	8001930 <create_chain+0x128>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d003      	beq.n	8001920 <create_chain+0x118>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191e:	d101      	bne.n	8001924 <create_chain+0x11c>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	e03e      	b.n	80019a2 <create_chain+0x19a>
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	429a      	cmp	r2, r3
 800192a:	d1da      	bne.n	80018e2 <create_chain+0xda>
 800192c:	2300      	movs	r3, #0
 800192e:	e038      	b.n	80019a2 <create_chain+0x19a>
 8001930:	bf00      	nop
 8001932:	f04f 32ff 	mov.w	r2, #4294967295
 8001936:	69f9      	ldr	r1, [r7, #28]
 8001938:	6938      	ldr	r0, [r7, #16]
 800193a:	f7ff fe19 	bl	8001570 <put_fat>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d109      	bne.n	800195c <create_chain+0x154>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <create_chain+0x154>
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	6938      	ldr	r0, [r7, #16]
 8001954:	f7ff fe0c 	bl	8001570 <put_fat>
 8001958:	4603      	mov	r3, r0
 800195a:	75fb      	strb	r3, [r7, #23]
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d116      	bne.n	8001990 <create_chain+0x188>
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	3b02      	subs	r3, #2
 8001972:	429a      	cmp	r2, r3
 8001974:	d804      	bhi.n	8001980 <create_chain+0x178>
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	1e5a      	subs	r2, r3, #1
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	791b      	ldrb	r3, [r3, #4]
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	b2da      	uxtb	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	711a      	strb	r2, [r3, #4]
 800198e:	e007      	b.n	80019a0 <create_chain+0x198>
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d102      	bne.n	800199c <create_chain+0x194>
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e000      	b.n	800199e <create_chain+0x196>
 800199c:	2301      	movs	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	4618      	mov	r0, r3
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <dir_clear>:
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fc40 	bl	800123a <sync_window>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <dir_clear+0x1a>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e036      	b.n	8001a32 <dir_clear+0x88>
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fd0e 	bl	80013e8 <clst2sect>
 80019cc:	6138      	str	r0, [r7, #16]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3330      	adds	r3, #48	; 0x30
 80019d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fb85 	bl	80010ee <mem_set>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3330      	adds	r3, #48	; 0x30
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	2301      	movs	r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e003      	b.n	80019fc <dir_clear+0x52>
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	4413      	add	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	895b      	ldrh	r3, [r3, #10]
 8001a00:	461a      	mov	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d20b      	bcs.n	8001a20 <dir_clear+0x76>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7858      	ldrb	r0, [r3, #1]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	441a      	add	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	f7ff f87b 	bl	8000b10 <disk_write>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0e9      	beq.n	80019f4 <dir_clear+0x4a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	895b      	ldrh	r3, [r3, #10]
 8001a24:	461a      	mov	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <dir_sdi>:
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a50:	d204      	bcs.n	8001a5c <dir_sdi+0x22>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <dir_sdi+0x26>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e063      	b.n	8001b28 <dir_sdi+0xee>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <dir_sdi+0x46>
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d902      	bls.n	8001a80 <dir_sdi+0x46>
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <dir_sdi+0x66>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	8912      	ldrh	r2, [r2, #8]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d301      	bcc.n	8001a96 <dir_sdi+0x5c>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e048      	b.n	8001b28 <dir_sdi+0xee>
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	619a      	str	r2, [r3, #24]
 8001a9e:	e029      	b.n	8001af4 <dir_sdi+0xba>
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	895b      	ldrh	r3, [r3, #10]
 8001aa4:	025b      	lsls	r3, r3, #9
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e019      	b.n	8001ade <dir_sdi+0xa4>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6979      	ldr	r1, [r7, #20]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fcb9 	bl	8001426 <get_fat>
 8001ab4:	6178      	str	r0, [r7, #20]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d101      	bne.n	8001ac2 <dir_sdi+0x88>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e032      	b.n	8001b28 <dir_sdi+0xee>
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d904      	bls.n	8001ad2 <dir_sdi+0x98>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d301      	bcc.n	8001ad6 <dir_sdi+0x9c>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e028      	b.n	8001b28 <dir_sdi+0xee>
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d2e1      	bcs.n	8001aaa <dir_sdi+0x70>
 8001ae6:	6979      	ldr	r1, [r7, #20]
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	f7ff fc7d 	bl	80013e8 <clst2sect>
 8001aee:	4602      	mov	r2, r0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	615a      	str	r2, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <dir_sdi+0xcc>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e010      	b.n	8001b28 <dir_sdi+0xee>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	0a5b      	lsrs	r3, r3, #9
 8001b0e:	441a      	add	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b20:	441a      	add	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	61da      	str	r2, [r3, #28]
 8001b26:	2300      	movs	r3, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <dir_next>:
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	3320      	adds	r3, #32
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b4e:	d302      	bcc.n	8001b56 <dir_next+0x26>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <dir_next+0x32>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e078      	b.n	8001c54 <dir_next+0x124>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d166      	bne.n	8001c3a <dir_next+0x10a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10a      	bne.n	8001b94 <dir_next+0x64>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	095b      	lsrs	r3, r3, #5
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	8912      	ldrh	r2, [r2, #8]
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d357      	bcc.n	8001c3a <dir_next+0x10a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
 8001b90:	2304      	movs	r3, #4
 8001b92:	e05f      	b.n	8001c54 <dir_next+0x124>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	0a5b      	lsrs	r3, r3, #9
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	8952      	ldrh	r2, [r2, #10]
 8001b9c:	3a01      	subs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d14a      	bne.n	8001c3a <dir_next+0x10a>
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f7ff fc3a 	bl	8001426 <get_fat>
 8001bb2:	6178      	str	r0, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d801      	bhi.n	8001bbe <dir_next+0x8e>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e04a      	b.n	8001c54 <dir_next+0x124>
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d101      	bne.n	8001bca <dir_next+0x9a>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e044      	b.n	8001c54 <dir_next+0x124>
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d328      	bcc.n	8001c26 <dir_next+0xf6>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d104      	bne.n	8001be4 <dir_next+0xb4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
 8001be0:	2304      	movs	r3, #4
 8001be2:	e037      	b.n	8001c54 <dir_next+0x124>
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	4619      	mov	r1, r3
 8001bec:	4610      	mov	r0, r2
 8001bee:	f7ff fe0b 	bl	8001808 <create_chain>
 8001bf2:	6178      	str	r0, [r7, #20]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <dir_next+0xce>
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	e02a      	b.n	8001c54 <dir_next+0x124>
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <dir_next+0xd8>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e025      	b.n	8001c54 <dir_next+0x124>
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0e:	d101      	bne.n	8001c14 <dir_next+0xe4>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e01f      	b.n	8001c54 <dir_next+0x124>
 8001c14:	6979      	ldr	r1, [r7, #20]
 8001c16:	6938      	ldr	r0, [r7, #16]
 8001c18:	f7ff fec7 	bl	80019aa <dir_clear>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <dir_next+0xf6>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e016      	b.n	8001c54 <dir_next+0x124>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	615a      	str	r2, [r3, #20]
 8001c2c:	6979      	ldr	r1, [r7, #20]
 8001c2e:	6938      	ldr	r0, [r7, #16]
 8001c30:	f7ff fbda 	bl	80013e8 <clst2sect>
 8001c34:	4602      	mov	r2, r0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c4c:	441a      	add	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	61da      	str	r2, [r3, #28]
 8001c52:	2300      	movs	r3, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <dir_alloc>:
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fee3 	bl	8001a3a <dir_sdi>
 8001c74:	4603      	mov	r3, r0
 8001c76:	75fb      	strb	r3, [r7, #23]
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d12b      	bne.n	8001cd6 <dir_alloc+0x7a>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	4619      	mov	r1, r3
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fb12 	bl	80012b2 <move_window>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	75fb      	strb	r3, [r7, #23]
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11d      	bne.n	8001cd4 <dir_alloc+0x78>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2be5      	cmp	r3, #229	; 0xe5
 8001ca0:	d004      	beq.n	8001cac <dir_alloc+0x50>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <dir_alloc+0x60>
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d102      	bne.n	8001cc0 <dir_alloc+0x64>
 8001cba:	e00c      	b.n	8001cd6 <dir_alloc+0x7a>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ff34 	bl	8001b30 <dir_next>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	75fb      	strb	r3, [r7, #23]
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0d7      	beq.n	8001c82 <dir_alloc+0x26>
 8001cd2:	e000      	b.n	8001cd6 <dir_alloc+0x7a>
 8001cd4:	bf00      	nop
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d101      	bne.n	8001ce0 <dir_alloc+0x84>
 8001cdc:	2307      	movs	r3, #7
 8001cde:	75fb      	strb	r3, [r7, #23]
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <ld_clust>:
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	331a      	adds	r3, #26
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f955 	bl	8000fa8 <ld_word>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d109      	bne.n	8001d1e <ld_clust+0x34>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	3314      	adds	r3, #20
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f94a 	bl	8000fa8 <ld_word>
 8001d14:	4603      	mov	r3, r0
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <st_clust>:
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	331a      	adds	r3, #26
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	b292      	uxth	r2, r2
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f96d 	bl	800101e <st_word>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d109      	bne.n	8001d60 <st_clust+0x38>
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f103 0214 	add.w	r2, r3, #20
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	0c1b      	lsrs	r3, r3, #16
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f7ff f95f 	bl	800101e <st_word>
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <dir_read>:
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	2304      	movs	r3, #4
 8001d74:	75fb      	strb	r3, [r7, #23]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e03c      	b.n	8001df8 <dir_read+0x90>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	4619      	mov	r1, r3
 8001d84:	6938      	ldr	r0, [r7, #16]
 8001d86:	f7ff fa94 	bl	80012b2 <move_window>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	75fb      	strb	r3, [r7, #23]
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d136      	bne.n	8001e02 <dir_read+0x9a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <dir_read+0x40>
 8001da2:	2304      	movs	r3, #4
 8001da4:	75fb      	strb	r3, [r7, #23]
 8001da6:	e031      	b.n	8001e0c <dir_read+0xa4>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	330b      	adds	r3, #11
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db4:	73bb      	strb	r3, [r7, #14]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7bba      	ldrb	r2, [r7, #14]
 8001dba:	719a      	strb	r2, [r3, #6]
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2be5      	cmp	r3, #229	; 0xe5
 8001dc0:	d011      	beq.n	8001de6 <dir_read+0x7e>
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8001dc6:	d00e      	beq.n	8001de6 <dir_read+0x7e>
 8001dc8:	7bbb      	ldrb	r3, [r7, #14]
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	d00b      	beq.n	8001de6 <dir_read+0x7e>
 8001dce:	7bbb      	ldrb	r3, [r7, #14]
 8001dd0:	f023 0320 	bic.w	r3, r3, #32
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00f      	beq.n	8001e06 <dir_read+0x9e>
 8001de6:	2100      	movs	r1, #0
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fea1 	bl	8001b30 <dir_next>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d108      	bne.n	8001e0a <dir_read+0xa2>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1be      	bne.n	8001d7e <dir_read+0x16>
 8001e00:	e004      	b.n	8001e0c <dir_read+0xa4>
 8001e02:	bf00      	nop
 8001e04:	e002      	b.n	8001e0c <dir_read+0xa4>
 8001e06:	bf00      	nop
 8001e08:	e000      	b.n	8001e0c <dir_read+0xa4>
 8001e0a:	bf00      	nop
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <dir_read+0xb0>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <dir_find>:
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	2100      	movs	r1, #0
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fe01 	bl	8001a3a <dir_sdi>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	75fb      	strb	r3, [r7, #23]
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <dir_find+0x24>
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	e03e      	b.n	8001ec4 <dir_find+0xa2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6938      	ldr	r0, [r7, #16]
 8001e4e:	f7ff fa30 	bl	80012b2 <move_window>
 8001e52:	4603      	mov	r3, r0
 8001e54:	75fb      	strb	r3, [r7, #23]
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d12f      	bne.n	8001ebc <dir_find+0x9a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <dir_find+0x4e>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	75fb      	strb	r3, [r7, #23]
 8001e6e:	e028      	b.n	8001ec2 <dir_find+0xa0>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	330b      	adds	r3, #11
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	719a      	strb	r2, [r3, #6]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	330b      	adds	r3, #11
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <dir_find+0x86>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69d8      	ldr	r0, [r3, #28]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3320      	adds	r3, #32
 8001e9a:	220b      	movs	r2, #11
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f7ff f940 	bl	8001122 <mem_cmp>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00b      	beq.n	8001ec0 <dir_find+0x9e>
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fe40 	bl	8001b30 <dir_next>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	75fb      	strb	r3, [r7, #23]
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0c5      	beq.n	8001e46 <dir_find+0x24>
 8001eba:	e002      	b.n	8001ec2 <dir_find+0xa0>
 8001ebc:	bf00      	nop
 8001ebe:	e000      	b.n	8001ec2 <dir_find+0xa0>
 8001ec0:	bf00      	nop
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <dir_register>:
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	2101      	movs	r1, #1
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff febd 	bl	8001c5c <dir_alloc>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d11c      	bne.n	8001f26 <dir_register+0x5a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	68b8      	ldr	r0, [r7, #8]
 8001ef4:	f7ff f9dd 	bl	80012b2 <move_window>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d111      	bne.n	8001f26 <dir_register+0x5a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	2220      	movs	r2, #32
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f8ef 	bl	80010ee <mem_set>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69d8      	ldr	r0, [r3, #28]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3320      	adds	r3, #32
 8001f18:	220b      	movs	r2, #11
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7ff f8c6 	bl	80010ac <mem_cpy>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2201      	movs	r2, #1
 8001f24:	70da      	strb	r2, [r3, #3]
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <get_fileinfo>:
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	725a      	strb	r2, [r3, #9]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d052      	beq.n	8001fee <get_fileinfo+0xbe>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e021      	b.n	8001f96 <get_fileinfo+0x66>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	1c59      	adds	r1, r3, #1
 8001f5a:	6179      	str	r1, [r7, #20]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	73fb      	strb	r3, [r7, #15]
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d100      	bne.n	8001f6a <get_fileinfo+0x3a>
 8001f68:	e015      	b.n	8001f96 <get_fileinfo+0x66>
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d101      	bne.n	8001f74 <get_fileinfo+0x44>
 8001f70:	23e5      	movs	r3, #229	; 0xe5
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b09      	cmp	r3, #9
 8001f78:	d106      	bne.n	8001f88 <get_fileinfo+0x58>
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	613a      	str	r2, [r7, #16]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	222e      	movs	r2, #46	; 0x2e
 8001f86:	725a      	strb	r2, [r3, #9]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	613a      	str	r2, [r7, #16]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	725a      	strb	r2, [r3, #9]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b0a      	cmp	r3, #10
 8001f9a:	d9da      	bls.n	8001f52 <get_fileinfo+0x22>
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3309      	adds	r3, #9
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	7ada      	ldrb	r2, [r3, #11]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	721a      	strb	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	331c      	adds	r3, #28
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff f80d 	bl	8000fd8 <ld_dword>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	3316      	adds	r3, #22
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe ffec 	bl	8000fa8 <ld_word>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	80da      	strh	r2, [r3, #6]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	3318      	adds	r3, #24
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe ffe2 	bl	8000fa8 <ld_word>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	809a      	strh	r2, [r3, #4]
 8001fec:	e000      	b.n	8001ff0 <get_fileinfo+0xc0>
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <create_name>:
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3320      	adds	r3, #32
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	220b      	movs	r2, #11
 8002010:	2120      	movs	r1, #32
 8002012:	6938      	ldr	r0, [r7, #16]
 8002014:	f7ff f86b 	bl	80010ee <mem_set>
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	2308      	movs	r3, #8
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	61fa      	str	r2, [r7, #28]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002038:	2b20      	cmp	r3, #32
 800203a:	d97c      	bls.n	8002136 <create_name+0x13e>
 800203c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002040:	2b2f      	cmp	r3, #47	; 0x2f
 8002042:	d007      	beq.n	8002054 <create_name+0x5c>
 8002044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002048:	2b5c      	cmp	r3, #92	; 0x5c
 800204a:	d110      	bne.n	800206e <create_name+0x76>
 800204c:	e002      	b.n	8002054 <create_name+0x5c>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3301      	adds	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b2f      	cmp	r3, #47	; 0x2f
 800205e:	d0f6      	beq.n	800204e <create_name+0x56>
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4413      	add	r3, r2
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b5c      	cmp	r3, #92	; 0x5c
 800206a:	d0f0      	beq.n	800204e <create_name+0x56>
 800206c:	e064      	b.n	8002138 <create_name+0x140>
 800206e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002072:	2b2e      	cmp	r3, #46	; 0x2e
 8002074:	d003      	beq.n	800207e <create_name+0x86>
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	429a      	cmp	r2, r3
 800207c:	d30d      	bcc.n	800209a <create_name+0xa2>
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2b0b      	cmp	r3, #11
 8002082:	d003      	beq.n	800208c <create_name+0x94>
 8002084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002088:	2b2e      	cmp	r3, #46	; 0x2e
 800208a:	d001      	beq.n	8002090 <create_name+0x98>
 800208c:	2306      	movs	r3, #6
 800208e:	e06f      	b.n	8002170 <create_name+0x178>
 8002090:	2308      	movs	r3, #8
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	230b      	movs	r3, #11
 8002096:	623b      	str	r3, [r7, #32]
 8002098:	e04c      	b.n	8002134 <create_name+0x13c>
 800209a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f881 	bl	80011a6 <dbc_1st>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d024      	beq.n	80020f4 <create_name+0xfc>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	61fa      	str	r2, [r7, #28]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4413      	add	r3, r2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff f893 	bl	80011e6 <dbc_2nd>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <create_name+0xd8>
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d301      	bcc.n	80020d4 <create_name+0xdc>
 80020d0:	2306      	movs	r3, #6
 80020d2:	e04d      	b.n	8002170 <create_name+0x178>
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	61ba      	str	r2, [r7, #24]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	61ba      	str	r2, [r7, #24]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e797      	b.n	8002024 <create_name+0x2c>
 80020f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020f8:	4619      	mov	r1, r3
 80020fa:	481f      	ldr	r0, [pc, #124]	; (8002178 <create_name+0x180>)
 80020fc:	f7ff f838 	bl	8001170 <chk_chr>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <create_name+0x112>
 8002106:	2306      	movs	r3, #6
 8002108:	e032      	b.n	8002170 <create_name+0x178>
 800210a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800210e:	2b60      	cmp	r3, #96	; 0x60
 8002110:	d908      	bls.n	8002124 <create_name+0x12c>
 8002112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002116:	2b7a      	cmp	r3, #122	; 0x7a
 8002118:	d804      	bhi.n	8002124 <create_name+0x12c>
 800211a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800211e:	3b20      	subs	r3, #32
 8002120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	61ba      	str	r2, [r7, #24]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	e776      	b.n	8002024 <create_name+0x2c>
 8002136:	bf00      	nop
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	441a      	add	r2, r3
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <create_name+0x154>
 8002148:	2306      	movs	r3, #6
 800214a:	e011      	b.n	8002170 <create_name+0x178>
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2be5      	cmp	r3, #229	; 0xe5
 8002152:	d102      	bne.n	800215a <create_name+0x162>
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2205      	movs	r2, #5
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800215e:	2b20      	cmp	r3, #32
 8002160:	d801      	bhi.n	8002166 <create_name+0x16e>
 8002162:	2204      	movs	r2, #4
 8002164:	e000      	b.n	8002168 <create_name+0x170>
 8002166:	2200      	movs	r2, #0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	330b      	adds	r3, #11
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	4618      	mov	r0, r3
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	08009e4c 	.word	0x08009e4c

0800217c <follow_path>:
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	e002      	b.n	8002194 <follow_path+0x18>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b2f      	cmp	r3, #47	; 0x2f
 800219a:	d0f8      	beq.n	800218e <follow_path+0x12>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b5c      	cmp	r3, #92	; 0x5c
 80021a2:	d0f4      	beq.n	800218e <follow_path+0x12>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b1f      	cmp	r3, #31
 80021b0:	d80a      	bhi.n	80021c8 <follow_path+0x4c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 80021ba:	2100      	movs	r1, #0
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fc3c 	bl	8001a3a <dir_sdi>
 80021c2:	4603      	mov	r3, r0
 80021c4:	75fb      	strb	r3, [r7, #23]
 80021c6:	e043      	b.n	8002250 <follow_path+0xd4>
 80021c8:	463b      	mov	r3, r7
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff13 	bl	8001ff8 <create_name>
 80021d2:	4603      	mov	r3, r0
 80021d4:	75fb      	strb	r3, [r7, #23]
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d134      	bne.n	8002246 <follow_path+0xca>
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fe20 	bl	8001e22 <dir_find>
 80021e2:	4603      	mov	r3, r0
 80021e4:	75fb      	strb	r3, [r7, #23]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <follow_path+0x8e>
 80021f4:	7dfb      	ldrb	r3, [r7, #23]
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d127      	bne.n	800224a <follow_path+0xce>
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d122      	bne.n	800224a <follow_path+0xce>
 8002204:	2305      	movs	r3, #5
 8002206:	75fb      	strb	r3, [r7, #23]
 8002208:	e01f      	b.n	800224a <follow_path+0xce>
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d11c      	bne.n	800224e <follow_path+0xd2>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	799b      	ldrb	r3, [r3, #6]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <follow_path+0xaa>
 8002220:	2305      	movs	r3, #5
 8002222:	75fb      	strb	r3, [r7, #23]
 8002224:	e014      	b.n	8002250 <follow_path+0xd4>
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002234:	4413      	add	r3, r2
 8002236:	4619      	mov	r1, r3
 8002238:	6938      	ldr	r0, [r7, #16]
 800223a:	f7ff fd56 	bl	8001cea <ld_clust>
 800223e:	4602      	mov	r2, r0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	e7c0      	b.n	80021c8 <follow_path+0x4c>
 8002246:	bf00      	nop
 8002248:	e002      	b.n	8002250 <follow_path+0xd4>
 800224a:	bf00      	nop
 800224c:	e000      	b.n	8002250 <follow_path+0xd4>
 800224e:	bf00      	nop
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <get_ldnumber>:
 800225a:	b480      	push	{r7}
 800225c:	b089      	sub	sp, #36	; 0x24
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <get_ldnumber+0x22>
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	e02d      	b.n	80022d8 <get_ldnumber+0x7e>
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	61fa      	str	r2, [r7, #28]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	2b20      	cmp	r3, #32
 800228a:	d902      	bls.n	8002292 <get_ldnumber+0x38>
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	2b3a      	cmp	r3, #58	; 0x3a
 8002290:	d1f4      	bne.n	800227c <get_ldnumber+0x22>
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	2b3a      	cmp	r3, #58	; 0x3a
 8002296:	d11c      	bne.n	80022d2 <get_ldnumber+0x78>
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b2f      	cmp	r3, #47	; 0x2f
 80022a2:	d90c      	bls.n	80022be <get_ldnumber+0x64>
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b39      	cmp	r3, #57	; 0x39
 80022aa:	d808      	bhi.n	80022be <get_ldnumber+0x64>
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	3302      	adds	r3, #2
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d103      	bne.n	80022be <get_ldnumber+0x64>
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	3b30      	subs	r3, #48	; 0x30
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	dc04      	bgt.n	80022ce <get_ldnumber+0x74>
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	e002      	b.n	80022d8 <get_ldnumber+0x7e>
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	4618      	mov	r0, r3
 80022da:	3724      	adds	r7, #36	; 0x24
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <check_fs>:
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	70da      	strb	r2, [r3, #3]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f04f 32ff 	mov.w	r2, #4294967295
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80022fc:	6839      	ldr	r1, [r7, #0]
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe ffd7 	bl	80012b2 <move_window>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <check_fs+0x2a>
 800230a:	2304      	movs	r3, #4
 800230c:	e038      	b.n	8002380 <check_fs+0x9c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3330      	adds	r3, #48	; 0x30
 8002312:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe fe46 	bl	8000fa8 <ld_word>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <check_fs+0x48>
 8002328:	2303      	movs	r3, #3
 800232a:	e029      	b.n	8002380 <check_fs+0x9c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002332:	2be9      	cmp	r3, #233	; 0xe9
 8002334:	d009      	beq.n	800234a <check_fs+0x66>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800233c:	2beb      	cmp	r3, #235	; 0xeb
 800233e:	d004      	beq.n	800234a <check_fs+0x66>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002346:	2be8      	cmp	r3, #232	; 0xe8
 8002348:	d119      	bne.n	800237e <check_fs+0x9a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3330      	adds	r3, #48	; 0x30
 800234e:	3336      	adds	r3, #54	; 0x36
 8002350:	2203      	movs	r2, #3
 8002352:	490d      	ldr	r1, [pc, #52]	; (8002388 <check_fs+0xa4>)
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fee4 	bl	8001122 <mem_cmp>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <check_fs+0x80>
 8002360:	2300      	movs	r3, #0
 8002362:	e00d      	b.n	8002380 <check_fs+0x9c>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3330      	adds	r3, #48	; 0x30
 8002368:	3352      	adds	r3, #82	; 0x52
 800236a:	2205      	movs	r2, #5
 800236c:	4907      	ldr	r1, [pc, #28]	; (800238c <check_fs+0xa8>)
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fed7 	bl	8001122 <mem_cmp>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <check_fs+0x9a>
 800237a:	2300      	movs	r3, #0
 800237c:	e000      	b.n	8002380 <check_fs+0x9c>
 800237e:	2302      	movs	r3, #2
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	08009e5c 	.word	0x08009e5c
 800238c:	08009e60 	.word	0x08009e60

08002390 <find_volume>:
 8002390:	b580      	push	{r7, lr}
 8002392:	b096      	sub	sp, #88	; 0x58
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff ff58 	bl	800225a <get_ldnumber>
 80023aa:	63f8      	str	r0, [r7, #60]	; 0x3c
 80023ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	da01      	bge.n	80023b6 <find_volume+0x26>
 80023b2:	230b      	movs	r3, #11
 80023b4:	e238      	b.n	8002828 <find_volume+0x498>
 80023b6:	4aa8      	ldr	r2, [pc, #672]	; (8002658 <find_volume+0x2c8>)
 80023b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <find_volume+0x3a>
 80023c6:	230c      	movs	r3, #12
 80023c8:	e22e      	b.n	8002828 <find_volume+0x498>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	71fb      	strb	r3, [r7, #7]
 80023d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01a      	beq.n	8002416 <find_volume+0x86>
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fb13 	bl	8000a10 <disk_status>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10c      	bne.n	8002416 <find_volume+0x86>
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <find_volume+0x82>
 8002402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <find_volume+0x82>
 800240e:	230a      	movs	r3, #10
 8002410:	e20a      	b.n	8002828 <find_volume+0x498>
 8002412:	2300      	movs	r3, #0
 8002414:	e208      	b.n	8002828 <find_volume+0x498>
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241e:	b2da      	uxtb	r2, r3
 8002420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002422:	705a      	strb	r2, [r3, #1]
 8002424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fa07 	bl	800083c <disk_initialize>
 800242e:	4603      	mov	r3, r0
 8002430:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <find_volume+0xb4>
 8002440:	2303      	movs	r3, #3
 8002442:	e1f1      	b.n	8002828 <find_volume+0x498>
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <find_volume+0xca>
 800244a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <find_volume+0xca>
 8002456:	230a      	movs	r3, #10
 8002458:	e1e6      	b.n	8002828 <find_volume+0x498>
 800245a:	2300      	movs	r3, #0
 800245c:	653b      	str	r3, [r7, #80]	; 0x50
 800245e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002462:	f7ff ff3f 	bl	80022e4 <check_fs>
 8002466:	4603      	mov	r3, r0
 8002468:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800246c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002470:	2b02      	cmp	r3, #2
 8002472:	d14b      	bne.n	800250c <find_volume+0x17c>
 8002474:	2300      	movs	r3, #0
 8002476:	643b      	str	r3, [r7, #64]	; 0x40
 8002478:	e01f      	b.n	80024ba <find_volume+0x12a>
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002488:	4413      	add	r3, r2
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	3304      	adds	r3, #4
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <find_volume+0x114>
 8002496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002498:	3308      	adds	r3, #8
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fd9c 	bl	8000fd8 <ld_dword>
 80024a0:	4602      	mov	r2, r0
 80024a2:	e000      	b.n	80024a6 <find_volume+0x116>
 80024a4:	2200      	movs	r2, #0
 80024a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80024ae:	440b      	add	r3, r1
 80024b0:	f843 2c44 	str.w	r2, [r3, #-68]
 80024b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b6:	3301      	adds	r3, #1
 80024b8:	643b      	str	r3, [r7, #64]	; 0x40
 80024ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d9dc      	bls.n	800247a <find_volume+0xea>
 80024c0:	2300      	movs	r3, #0
 80024c2:	643b      	str	r3, [r7, #64]	; 0x40
 80024c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <find_volume+0x140>
 80024ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024cc:	3b01      	subs	r3, #1
 80024ce:	643b      	str	r3, [r7, #64]	; 0x40
 80024d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80024d8:	4413      	add	r3, r2
 80024da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80024de:	653b      	str	r3, [r7, #80]	; 0x50
 80024e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <find_volume+0x162>
 80024e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80024e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80024ea:	f7ff fefb 	bl	80022e4 <check_fs>
 80024ee:	4603      	mov	r3, r0
 80024f0:	e000      	b.n	80024f4 <find_volume+0x164>
 80024f2:	2303      	movs	r3, #3
 80024f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80024f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d905      	bls.n	800250c <find_volume+0x17c>
 8002500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002502:	3301      	adds	r3, #1
 8002504:	643b      	str	r3, [r7, #64]	; 0x40
 8002506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002508:	2b03      	cmp	r3, #3
 800250a:	d9e1      	bls.n	80024d0 <find_volume+0x140>
 800250c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002510:	2b04      	cmp	r3, #4
 8002512:	d101      	bne.n	8002518 <find_volume+0x188>
 8002514:	2301      	movs	r3, #1
 8002516:	e187      	b.n	8002828 <find_volume+0x498>
 8002518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800251c:	2b01      	cmp	r3, #1
 800251e:	d901      	bls.n	8002524 <find_volume+0x194>
 8002520:	230d      	movs	r3, #13
 8002522:	e181      	b.n	8002828 <find_volume+0x498>
 8002524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002526:	3330      	adds	r3, #48	; 0x30
 8002528:	330b      	adds	r3, #11
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fd3c 	bl	8000fa8 <ld_word>
 8002530:	4603      	mov	r3, r0
 8002532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002536:	d001      	beq.n	800253c <find_volume+0x1ac>
 8002538:	230d      	movs	r3, #13
 800253a:	e175      	b.n	8002828 <find_volume+0x498>
 800253c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253e:	3330      	adds	r3, #48	; 0x30
 8002540:	3316      	adds	r3, #22
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fd30 	bl	8000fa8 <ld_word>
 8002548:	4603      	mov	r3, r0
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800254c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <find_volume+0x1d0>
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	3330      	adds	r3, #48	; 0x30
 8002556:	3324      	adds	r3, #36	; 0x24
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fd3d 	bl	8000fd8 <ld_dword>
 800255e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002564:	619a      	str	r2, [r3, #24]
 8002566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002568:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256e:	709a      	strb	r2, [r3, #2]
 8002570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002572:	789b      	ldrb	r3, [r3, #2]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d005      	beq.n	8002584 <find_volume+0x1f4>
 8002578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257a:	789b      	ldrb	r3, [r3, #2]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d001      	beq.n	8002584 <find_volume+0x1f4>
 8002580:	230d      	movs	r3, #13
 8002582:	e151      	b.n	8002828 <find_volume+0x498>
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	789b      	ldrb	r3, [r3, #2]
 8002588:	461a      	mov	r2, r3
 800258a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002598:	b29a      	uxth	r2, r3
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	815a      	strh	r2, [r3, #10]
 800259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a0:	895b      	ldrh	r3, [r3, #10]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <find_volume+0x228>
 80025a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a8:	895b      	ldrh	r3, [r3, #10]
 80025aa:	461a      	mov	r2, r3
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	895b      	ldrh	r3, [r3, #10]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <find_volume+0x22c>
 80025b8:	230d      	movs	r3, #13
 80025ba:	e135      	b.n	8002828 <find_volume+0x498>
 80025bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025be:	3330      	adds	r3, #48	; 0x30
 80025c0:	3311      	adds	r3, #17
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fcf0 	bl	8000fa8 <ld_word>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ce:	811a      	strh	r2, [r3, #8]
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	891b      	ldrh	r3, [r3, #8]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <find_volume+0x252>
 80025de:	230d      	movs	r3, #13
 80025e0:	e122      	b.n	8002828 <find_volume+0x498>
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	3330      	adds	r3, #48	; 0x30
 80025e6:	3313      	adds	r3, #19
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fcdd 	bl	8000fa8 <ld_word>
 80025ee:	4603      	mov	r3, r0
 80025f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80025f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <find_volume+0x276>
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	3330      	adds	r3, #48	; 0x30
 80025fc:	3320      	adds	r3, #32
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fcea 	bl	8000fd8 <ld_dword>
 8002604:	64b8      	str	r0, [r7, #72]	; 0x48
 8002606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002608:	3330      	adds	r3, #48	; 0x30
 800260a:	330e      	adds	r3, #14
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fccb 	bl	8000fa8 <ld_word>
 8002612:	4603      	mov	r3, r0
 8002614:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002616:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <find_volume+0x290>
 800261c:	230d      	movs	r3, #13
 800261e:	e103      	b.n	8002828 <find_volume+0x498>
 8002620:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002624:	4413      	add	r3, r2
 8002626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002628:	8912      	ldrh	r2, [r2, #8]
 800262a:	0912      	lsrs	r2, r2, #4
 800262c:	b292      	uxth	r2, r2
 800262e:	4413      	add	r3, r2
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
 8002632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	429a      	cmp	r2, r3
 8002638:	d201      	bcs.n	800263e <find_volume+0x2ae>
 800263a:	230d      	movs	r3, #13
 800263c:	e0f4      	b.n	8002828 <find_volume+0x498>
 800263e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002646:	8952      	ldrh	r2, [r2, #10]
 8002648:	fbb3 f3f2 	udiv	r3, r3, r2
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <find_volume+0x2cc>
 8002654:	230d      	movs	r3, #13
 8002656:	e0e7      	b.n	8002828 <find_volume+0x498>
 8002658:	200000a4 	.word	0x200000a4
 800265c:	2300      	movs	r3, #0
 800265e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	4a72      	ldr	r2, [pc, #456]	; (8002830 <find_volume+0x4a0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d802      	bhi.n	8002670 <find_volume+0x2e0>
 800266a:	2303      	movs	r3, #3
 800266c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002676:	4293      	cmp	r3, r2
 8002678:	d802      	bhi.n	8002680 <find_volume+0x2f0>
 800267a:	2302      	movs	r3, #2
 800267c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002686:	4293      	cmp	r3, r2
 8002688:	d802      	bhi.n	8002690 <find_volume+0x300>
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <find_volume+0x30c>
 8002698:	230d      	movs	r3, #13
 800269a:	e0c5      	b.n	8002828 <find_volume+0x498>
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	1c9a      	adds	r2, r3, #2
 80026a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a2:	615a      	str	r2, [r3, #20]
 80026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026a8:	61da      	str	r2, [r3, #28]
 80026aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80026ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ae:	441a      	add	r2, r3
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	621a      	str	r2, [r3, #32]
 80026b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	441a      	add	r2, r3
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	629a      	str	r2, [r3, #40]	; 0x28
 80026be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d11e      	bne.n	8002704 <find_volume+0x374>
 80026c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c8:	3330      	adds	r3, #48	; 0x30
 80026ca:	332a      	adds	r3, #42	; 0x2a
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fc6b 	bl	8000fa8 <ld_word>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <find_volume+0x34c>
 80026d8:	230d      	movs	r3, #13
 80026da:	e0a5      	b.n	8002828 <find_volume+0x498>
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	891b      	ldrh	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <find_volume+0x358>
 80026e4:	230d      	movs	r3, #13
 80026e6:	e09f      	b.n	8002828 <find_volume+0x498>
 80026e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ea:	3330      	adds	r3, #48	; 0x30
 80026ec:	332c      	adds	r3, #44	; 0x2c
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fc72 	bl	8000fd8 <ld_dword>
 80026f4:	4602      	mov	r2, r0
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
 80026fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	647b      	str	r3, [r7, #68]	; 0x44
 8002702:	e01f      	b.n	8002744 <find_volume+0x3b4>
 8002704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002706:	891b      	ldrh	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <find_volume+0x380>
 800270c:	230d      	movs	r3, #13
 800270e:	e08b      	b.n	8002828 <find_volume+0x498>
 8002710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002712:	6a1a      	ldr	r2, [r3, #32]
 8002714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002716:	441a      	add	r2, r3
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
 800271c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002720:	2b02      	cmp	r3, #2
 8002722:	d103      	bne.n	800272c <find_volume+0x39c>
 8002724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	e00a      	b.n	8002742 <find_volume+0x3b2>
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	085a      	lsrs	r2, r3, #1
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	647b      	str	r3, [r7, #68]	; 0x44
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	699a      	ldr	r2, [r3, #24]
 8002748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800274a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800274e:	0a5b      	lsrs	r3, r3, #9
 8002750:	429a      	cmp	r2, r3
 8002752:	d201      	bcs.n	8002758 <find_volume+0x3c8>
 8002754:	230d      	movs	r3, #13
 8002756:	e067      	b.n	8002828 <find_volume+0x498>
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	f04f 32ff 	mov.w	r2, #4294967295
 800275e:	611a      	str	r2, [r3, #16]
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	60da      	str	r2, [r3, #12]
 8002768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	711a      	strb	r2, [r3, #4]
 800276e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002772:	2b03      	cmp	r3, #3
 8002774:	d149      	bne.n	800280a <find_volume+0x47a>
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	3330      	adds	r3, #48	; 0x30
 800277a:	3330      	adds	r3, #48	; 0x30
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fc13 	bl	8000fa8 <ld_word>
 8002782:	4603      	mov	r3, r0
 8002784:	2b01      	cmp	r3, #1
 8002786:	d140      	bne.n	800280a <find_volume+0x47a>
 8002788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278a:	3301      	adds	r3, #1
 800278c:	4619      	mov	r1, r3
 800278e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002790:	f7fe fd8f 	bl	80012b2 <move_window>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d137      	bne.n	800280a <find_volume+0x47a>
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	2200      	movs	r2, #0
 800279e:	711a      	strb	r2, [r3, #4]
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	3330      	adds	r3, #48	; 0x30
 80027a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fbfd 	bl	8000fa8 <ld_word>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d127      	bne.n	800280a <find_volume+0x47a>
 80027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027bc:	3330      	adds	r3, #48	; 0x30
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fc0a 	bl	8000fd8 <ld_dword>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <find_volume+0x4a4>)
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d11e      	bne.n	800280a <find_volume+0x47a>
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	3330      	adds	r3, #48	; 0x30
 80027d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fbff 	bl	8000fd8 <ld_dword>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b16      	ldr	r3, [pc, #88]	; (8002838 <find_volume+0x4a8>)
 80027de:	429a      	cmp	r2, r3
 80027e0:	d113      	bne.n	800280a <find_volume+0x47a>
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	3330      	adds	r3, #48	; 0x30
 80027e6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fbf4 	bl	8000fd8 <ld_dword>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	611a      	str	r2, [r3, #16]
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f8:	3330      	adds	r3, #48	; 0x30
 80027fa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fbea 	bl	8000fd8 <ld_dword>
 8002804:	4602      	mov	r2, r0
 8002806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <find_volume+0x4ac>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <find_volume+0x4ac>)
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <find_volume+0x4ac>)
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	80da      	strh	r2, [r3, #6]
 8002826:	2300      	movs	r3, #0
 8002828:	4618      	mov	r0, r3
 800282a:	3758      	adds	r7, #88	; 0x58
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	0ffffff5 	.word	0x0ffffff5
 8002834:	41615252 	.word	0x41615252
 8002838:	61417272 	.word	0x61417272
 800283c:	200000a8 	.word	0x200000a8

08002840 <validate>:
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	2309      	movs	r3, #9
 800284c:	73fb      	strb	r3, [r7, #15]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01c      	beq.n	800288e <validate+0x4e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d018      	beq.n	800288e <validate+0x4e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d013      	beq.n	800288e <validate+0x4e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	889a      	ldrh	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	88db      	ldrh	r3, [r3, #6]
 8002870:	429a      	cmp	r2, r3
 8002872:	d10c      	bne.n	800288e <validate+0x4e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	785b      	ldrb	r3, [r3, #1]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe f8c8 	bl	8000a10 <disk_status>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <validate+0x4e>
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <validate+0x5a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	e000      	b.n	800289c <validate+0x5c>
 800289a:	2300      	movs	r3, #0
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <f_mount>:
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	4613      	mov	r3, r2
 80028b8:	71fb      	strb	r3, [r7, #7]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fcc9 	bl	800225a <get_ldnumber>
 80028c8:	61f8      	str	r0, [r7, #28]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da01      	bge.n	80028d4 <f_mount+0x28>
 80028d0:	230b      	movs	r3, #11
 80028d2:	e025      	b.n	8002920 <f_mount+0x74>
 80028d4:	4a14      	ldr	r2, [pc, #80]	; (8002928 <f_mount+0x7c>)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <f_mount+0x3e>
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <f_mount+0x4a>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	490b      	ldr	r1, [pc, #44]	; (8002928 <f_mount+0x7c>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <f_mount+0x5e>
 8002906:	2300      	movs	r3, #0
 8002908:	e00a      	b.n	8002920 <f_mount+0x74>
 800290a:	f107 010c 	add.w	r1, r7, #12
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	2200      	movs	r2, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fd3b 	bl	8002390 <find_volume>
 800291a:	4603      	mov	r3, r0
 800291c:	75fb      	strb	r3, [r7, #23]
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	4618      	mov	r0, r3
 8002922:	3720      	adds	r7, #32
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	200000a4 	.word	0x200000a4

0800292c <f_open>:
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b099      	sub	sp, #100	; 0x64
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	71fb      	strb	r3, [r7, #7]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <f_open+0x18>
 8002940:	2309      	movs	r3, #9
 8002942:	e172      	b.n	8002c2a <f_open+0x2fe>
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	79fa      	ldrb	r2, [r7, #7]
 800294e:	f107 0114 	add.w	r1, r7, #20
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fd1a 	bl	8002390 <find_volume>
 800295c:	4603      	mov	r3, r0
 800295e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 8156 	bne.w	8002c18 <f_open+0x2ec>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	61bb      	str	r3, [r7, #24]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	f107 0318 	add.w	r3, r7, #24
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fbff 	bl	800217c <follow_path>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002984:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002988:	2b00      	cmp	r3, #0
 800298a:	d107      	bne.n	800299c <f_open+0x70>
 800298c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002990:	b25b      	sxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	da02      	bge.n	800299c <f_open+0x70>
 8002996:	2306      	movs	r3, #6
 8002998:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 031c 	and.w	r3, r3, #28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d073      	beq.n	8002a8e <f_open+0x162>
 80029a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d010      	beq.n	80029d0 <f_open+0xa4>
 80029ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d107      	bne.n	80029c6 <f_open+0x9a>
 80029b6:	f107 0318 	add.w	r3, r7, #24
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fa86 	bl	8001ecc <dir_register>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f043 0308 	orr.w	r3, r3, #8
 80029cc:	71fb      	strb	r3, [r7, #7]
 80029ce:	e010      	b.n	80029f2 <f_open+0xc6>
 80029d0:	7fbb      	ldrb	r3, [r7, #30]
 80029d2:	f003 0311 	and.w	r3, r3, #17
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <f_open+0xb6>
 80029da:	2307      	movs	r3, #7
 80029dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029e0:	e007      	b.n	80029f2 <f_open+0xc6>
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <f_open+0xc6>
 80029ec:	2308      	movs	r3, #8
 80029ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d163      	bne.n	8002ac2 <f_open+0x196>
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d05e      	beq.n	8002ac2 <f_open+0x196>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f96d 	bl	8001cea <ld_clust>
 8002a10:	6538      	str	r0, [r7, #80]	; 0x50
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	f103 040e 	add.w	r4, r3, #14
 8002a18:	f7fe fabc 	bl	8000f94 <get_fattime>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7fe fb17 	bl	8001054 <st_dword>
 8002a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a28:	330b      	adds	r3, #11
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a32:	2200      	movs	r2, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f977 	bl	8001d28 <st_clust>
 8002a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3c:	331c      	adds	r3, #28
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe fb07 	bl	8001054 <st_dword>
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	70da      	strb	r2, [r3, #3]
 8002a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d037      	beq.n	8002ac2 <f_open+0x196>
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a58:	f107 0318 	add.w	r3, r7, #24
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fe6c 	bl	800173e <remove_chain>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d126      	bne.n	8002ac2 <f_open+0x196>
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fc1a 	bl	80012b2 <move_window>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a88:	3a01      	subs	r2, #1
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	e019      	b.n	8002ac2 <f_open+0x196>
 8002a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d115      	bne.n	8002ac2 <f_open+0x196>
 8002a96:	7fbb      	ldrb	r3, [r7, #30]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <f_open+0x17c>
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002aa6:	e00c      	b.n	8002ac2 <f_open+0x196>
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <f_open+0x196>
 8002ab2:	7fbb      	ldrb	r3, [r7, #30]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <f_open+0x196>
 8002abc:	2307      	movs	r3, #7
 8002abe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <f_open+0x1be>
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <f_open+0x1b0>
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ada:	71fb      	strb	r3, [r7, #7]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	621a      	str	r2, [r3, #32]
 8002ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
 8002aea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 8092 	bne.w	8002c18 <f_open+0x2ec>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff f8f5 	bl	8001cea <ld_clust>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b08:	331c      	adds	r3, #28
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fa64 	bl	8000fd8 <ld_dword>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	88da      	ldrh	r2, [r3, #6]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	809a      	strh	r2, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	79fa      	ldrb	r2, [r7, #7]
 8002b28:	741a      	strb	r2, [r3, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	745a      	strb	r2, [r3, #17]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3328      	adds	r3, #40	; 0x28
 8002b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fad1 	bl	80010ee <mem_set>
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d060      	beq.n	8002c18 <f_open+0x2ec>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d05c      	beq.n	8002c18 <f_open+0x2ec>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	615a      	str	r2, [r3, #20]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	895b      	ldrh	r3, [r3, #10]
 8002b6a:	025b      	lsls	r3, r3, #9
 8002b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	657b      	str	r3, [r7, #84]	; 0x54
 8002b7a:	e016      	b.n	8002baa <f_open+0x27e>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fc50 	bl	8001426 <get_fat>
 8002b86:	65b8      	str	r0, [r7, #88]	; 0x58
 8002b88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d802      	bhi.n	8002b94 <f_open+0x268>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9a:	d102      	bne.n	8002ba2 <f_open+0x276>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ba2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	657b      	str	r3, [r7, #84]	; 0x54
 8002baa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <f_open+0x28e>
 8002bb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d8e0      	bhi.n	8002b7c <f_open+0x250>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bbe:	619a      	str	r2, [r3, #24]
 8002bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d127      	bne.n	8002c18 <f_open+0x2ec>
 8002bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d022      	beq.n	8002c18 <f_open+0x2ec>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fc06 	bl	80013e8 <clst2sect>
 8002bdc:	6478      	str	r0, [r7, #68]	; 0x44
 8002bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <f_open+0x2c0>
 8002be4:	2302      	movs	r3, #2
 8002be6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002bea:	e015      	b.n	8002c18 <f_open+0x2ec>
 8002bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bee:	0a5a      	lsrs	r2, r3, #9
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf2:	441a      	add	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	61da      	str	r2, [r3, #28]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	7858      	ldrb	r0, [r3, #1]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	2301      	movs	r3, #1
 8002c08:	f7fd ff18 	bl	8000a3c <disk_read>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <f_open+0x2ec>
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <f_open+0x2fa>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3764      	adds	r7, #100	; 0x64
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd90      	pop	{r4, r7, pc}

08002c32 <f_read>:
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b08e      	sub	sp, #56	; 0x38
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f107 0214 	add.w	r2, r7, #20
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fdf4 	bl	8002840 <validate>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d107      	bne.n	8002c76 <f_read+0x44>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	7c5b      	ldrb	r3, [r3, #17]
 8002c6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <f_read+0x4a>
 8002c76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c7a:	e109      	b.n	8002e90 <f_read+0x25e>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	7c1b      	ldrb	r3, [r3, #16]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <f_read+0x5a>
 8002c88:	2307      	movs	r3, #7
 8002c8a:	e101      	b.n	8002e90 <f_read+0x25e>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f240 80f2 	bls.w	8002e86 <f_read+0x254>
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	e0ee      	b.n	8002e86 <f_read+0x254>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f040 80ba 	bne.w	8002e2a <f_read+0x1f8>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	0a5b      	lsrs	r3, r3, #9
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	8952      	ldrh	r2, [r2, #10]
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d123      	bne.n	8002d14 <f_read+0xe2>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <f_read+0xaa>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cda:	e007      	b.n	8002cec <f_read+0xba>
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f7fe fb9e 	bl	8001426 <get_fat>
 8002cea:	6338      	str	r0, [r7, #48]	; 0x30
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d804      	bhi.n	8002cfc <f_read+0xca>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	745a      	strb	r2, [r3, #17]
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e0c9      	b.n	8002e90 <f_read+0x25e>
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d104      	bne.n	8002d0e <f_read+0xdc>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	745a      	strb	r2, [r3, #17]
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0c0      	b.n	8002e90 <f_read+0x25e>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d12:	619a      	str	r2, [r3, #24]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f7fe fb63 	bl	80013e8 <clst2sect>
 8002d22:	61b8      	str	r0, [r7, #24]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d104      	bne.n	8002d34 <f_read+0x102>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	745a      	strb	r2, [r3, #17]
 8002d30:	2302      	movs	r3, #2
 8002d32:	e0ad      	b.n	8002e90 <f_read+0x25e>
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0a5b      	lsrs	r3, r3, #9
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d039      	beq.n	8002dbc <f_read+0x18a>
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	4413      	add	r3, r2
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	8952      	ldrh	r2, [r2, #10]
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d905      	bls.n	8002d62 <f_read+0x130>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	895b      	ldrh	r3, [r3, #10]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	7858      	ldrb	r0, [r3, #1]
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6c:	f7fd fe66 	bl	8000a3c <disk_read>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <f_read+0x14e>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	745a      	strb	r2, [r3, #17]
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e087      	b.n	8002e90 <f_read+0x25e>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	7c1b      	ldrb	r3, [r3, #16]
 8002d84:	b25b      	sxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	da14      	bge.n	8002db4 <f_read+0x182>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d90d      	bls.n	8002db4 <f_read+0x182>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	025b      	lsls	r3, r3, #9
 8002da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da4:	18d0      	adds	r0, r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3328      	adds	r3, #40	; 0x28
 8002daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dae:	4619      	mov	r1, r3
 8002db0:	f7fe f97c 	bl	80010ac <mem_cpy>
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dba:	e050      	b.n	8002e5e <f_read+0x22c>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d02e      	beq.n	8002e24 <f_read+0x1f2>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	7c1b      	ldrb	r3, [r3, #16]
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	da18      	bge.n	8002e02 <f_read+0x1d0>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	7858      	ldrb	r0, [r3, #1]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	2301      	movs	r3, #1
 8002de0:	f7fd fe96 	bl	8000b10 <disk_write>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d004      	beq.n	8002df4 <f_read+0x1c2>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	745a      	strb	r2, [r3, #17]
 8002df0:	2301      	movs	r3, #1
 8002df2:	e04d      	b.n	8002e90 <f_read+0x25e>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	7c1b      	ldrb	r3, [r3, #16]
 8002df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	741a      	strb	r2, [r3, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	7858      	ldrb	r0, [r3, #1]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	f7fd fe14 	bl	8000a3c <disk_read>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d004      	beq.n	8002e24 <f_read+0x1f2>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	745a      	strb	r2, [r3, #17]
 8002e20:	2301      	movs	r3, #1
 8002e22:	e035      	b.n	8002e90 <f_read+0x25e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	61da      	str	r2, [r3, #28]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e32:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d901      	bls.n	8002e44 <f_read+0x212>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e52:	4413      	add	r3, r2
 8002e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e56:	4619      	mov	r1, r3
 8002e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e5a:	f7fe f927 	bl	80010ac <mem_cpy>
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	441a      	add	r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	4413      	add	r3, r2
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	441a      	add	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	615a      	str	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f47f af0d 	bne.w	8002ca8 <f_read+0x76>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	3738      	adds	r7, #56	; 0x38
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <f_sync>:
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f107 0208 	add.w	r2, r7, #8
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fcc9 	bl	8002840 <validate>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	75fb      	strb	r3, [r7, #23]
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d168      	bne.n	8002f8a <f_sync+0xf2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7c1b      	ldrb	r3, [r3, #16]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d062      	beq.n	8002f8a <f_sync+0xf2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7c1b      	ldrb	r3, [r3, #16]
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da15      	bge.n	8002efa <f_sync+0x62>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	7858      	ldrb	r0, [r3, #1]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	2301      	movs	r3, #1
 8002ede:	f7fd fe17 	bl	8000b10 <disk_write>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <f_sync+0x54>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e04f      	b.n	8002f8c <f_sync+0xf4>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	7c1b      	ldrb	r3, [r3, #16]
 8002ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	741a      	strb	r2, [r3, #16]
 8002efa:	f7fe f84b 	bl	8000f94 <get_fattime>
 8002efe:	6138      	str	r0, [r7, #16]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f7fe f9d2 	bl	80012b2 <move_window>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	75fb      	strb	r3, [r7, #23]
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d138      	bne.n	8002f8a <f_sync+0xf2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	330b      	adds	r3, #11
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	330b      	adds	r3, #11
 8002f28:	f042 0220 	orr.w	r2, r2, #32
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	f7fe fef4 	bl	8001d28 <st_clust>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f103 021c 	add.w	r2, r3, #28
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	f7fe f881 	bl	8001054 <st_dword>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3316      	adds	r3, #22
 8002f56:	6939      	ldr	r1, [r7, #16]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe f87b 	bl	8001054 <st_dword>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3312      	adds	r3, #18
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe f85a 	bl	800101e <st_word>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	70da      	strb	r2, [r3, #3]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe f9ca 	bl	800130c <sync_fs>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	75fb      	strb	r3, [r7, #23]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7c1b      	ldrb	r3, [r3, #16]
 8002f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	741a      	strb	r2, [r3, #16]
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <f_close>:
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff7b 	bl	8002e98 <f_sync>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10e      	bne.n	8002fca <f_close+0x36>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f107 0208 	add.w	r2, r7, #8
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fc43 	bl	8002840 <validate>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	73fb      	strb	r3, [r7, #15]
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <f_close+0x36>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <f_opendir>:
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <f_opendir+0x14>
 8002fe4:	2309      	movs	r3, #9
 8002fe6:	e04a      	b.n	800307e <f_opendir+0xaa>
 8002fe8:	f107 0108 	add.w	r1, r7, #8
 8002fec:	463b      	mov	r3, r7
 8002fee:	2200      	movs	r2, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff f9cd 	bl	8002390 <find_volume>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	73fb      	strb	r3, [r7, #15]
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d137      	bne.n	8003070 <f_opendir+0x9c>
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff f8b6 	bl	800217c <follow_path>
 8003010:	4603      	mov	r3, r0
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d125      	bne.n	8003066 <f_opendir+0x92>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003020:	b25b      	sxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	db12      	blt.n	800304c <f_opendir+0x78>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	799b      	ldrb	r3, [r3, #6]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <f_opendir+0x74>
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f7fe fe55 	bl	8001cea <ld_clust>
 8003040:	4602      	mov	r2, r0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	e001      	b.n	800304c <f_opendir+0x78>
 8003048:	2305      	movs	r3, #5
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <f_opendir+0x92>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	88da      	ldrh	r2, [r3, #6]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	809a      	strh	r2, [r3, #4]
 800305a:	2100      	movs	r1, #0
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7fe fcec 	bl	8001a3a <dir_sdi>
 8003062:	4603      	mov	r3, r0
 8003064:	73fb      	strb	r3, [r7, #15]
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b04      	cmp	r3, #4
 800306a:	d101      	bne.n	8003070 <f_opendir+0x9c>
 800306c:	2305      	movs	r3, #5
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <f_opendir+0xa8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <f_readdir>:
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f107 0208 	add.w	r2, r7, #8
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fbd1 	bl	8002840 <validate>
 800309e:	4603      	mov	r3, r0
 80030a0:	73fb      	strb	r3, [r7, #15]
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d126      	bne.n	80030f6 <f_readdir+0x70>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <f_readdir+0x36>
 80030ae:	2100      	movs	r1, #0
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fe fcc2 	bl	8001a3a <dir_sdi>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]
 80030ba:	e01c      	b.n	80030f6 <f_readdir+0x70>
 80030bc:	2100      	movs	r1, #0
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fe52 	bl	8001d68 <dir_read>
 80030c4:	4603      	mov	r3, r0
 80030c6:	73fb      	strb	r3, [r7, #15]
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d101      	bne.n	80030d2 <f_readdir+0x4c>
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10e      	bne.n	80030f6 <f_readdir+0x70>
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe ff28 	bl	8001f30 <get_fileinfo>
 80030e0:	2100      	movs	r1, #0
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe fd24 	bl	8001b30 <dir_next>
 80030e8:	4603      	mov	r3, r0
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d101      	bne.n	80030f6 <f_readdir+0x70>
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <read_song>:
static void MX_TIM7_Init(void);
static void MX_I2C3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

void read_song(){
 8003100:	b580      	push	{r7, lr}
 8003102:	b08e      	sub	sp, #56	; 0x38
 8003104:	af00      	add	r7, sp, #0
    DIR dir;
    UINT i;
    UINT z;
    static FILINFO fno;

    if(otw==0){
 8003106:	4b46      	ldr	r3, [pc, #280]	; (8003220 <read_song+0x120>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d145      	bne.n	800319a <read_song+0x9a>
		res = f_opendir(&dir, "/");
 800310e:	463b      	mov	r3, r7
 8003110:	4944      	ldr	r1, [pc, #272]	; (8003224 <read_song+0x124>)
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff5e 	bl	8002fd4 <f_opendir>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    	if (res == FR_OK) {
 800311e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003122:	2b00      	cmp	r3, #0
 8003124:	d179      	bne.n	800321a <read_song+0x11a>
  	  	  	do{
            		res = f_readdir(&dir, &fno);
 8003126:	463b      	mov	r3, r7
 8003128:	493f      	ldr	r1, [pc, #252]	; (8003228 <read_song+0x128>)
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ffab 	bl	8003086 <f_readdir>
 8003130:	4603      	mov	r3, r0
 8003132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            		if (res != FR_OK || fno.fname[0] == 0) break;
 8003136:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800313a:	2b00      	cmp	r3, #0
 800313c:	d125      	bne.n	800318a <read_song+0x8a>
 800313e:	4b3a      	ldr	r3, [pc, #232]	; (8003228 <read_song+0x128>)
 8003140:	7a5b      	ldrb	r3, [r3, #9]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d021      	beq.n	800318a <read_song+0x8a>
            		printf("%s\n", fno.fname);
 8003146:	4839      	ldr	r0, [pc, #228]	; (800322c <read_song+0x12c>)
 8003148:	f006 fa60 	bl	800960c <puts>
                	z = strlen(fno.fname);
 800314c:	4837      	ldr	r0, [pc, #220]	; (800322c <read_song+0x12c>)
 800314e:	f7fd f83b 	bl	80001c8 <strlen>
 8003152:	62f8      	str	r0, [r7, #44]	; 0x2c
                	nr_utworu++;
 8003154:	4b36      	ldr	r3, [pc, #216]	; (8003230 <read_song+0x130>)
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	4b34      	ldr	r3, [pc, #208]	; (8003230 <read_song+0x130>)
 800315e:	801a      	strh	r2, [r3, #0]
            	}
            	while((fno.fname[z-1]!='V') || (fno.fname[z-2]!='A')|| (fno.fname[z-3]!='W')) ;
 8003160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003162:	3b01      	subs	r3, #1
 8003164:	4a30      	ldr	r2, [pc, #192]	; (8003228 <read_song+0x128>)
 8003166:	4413      	add	r3, r2
 8003168:	7a5b      	ldrb	r3, [r3, #9]
 800316a:	2b56      	cmp	r3, #86	; 0x56
 800316c:	d1db      	bne.n	8003126 <read_song+0x26>
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	3b02      	subs	r3, #2
 8003172:	4a2d      	ldr	r2, [pc, #180]	; (8003228 <read_song+0x128>)
 8003174:	4413      	add	r3, r2
 8003176:	7a5b      	ldrb	r3, [r3, #9]
 8003178:	2b41      	cmp	r3, #65	; 0x41
 800317a:	d1d4      	bne.n	8003126 <read_song+0x26>
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	3b03      	subs	r3, #3
 8003180:	4a29      	ldr	r2, [pc, #164]	; (8003228 <read_song+0x128>)
 8003182:	4413      	add	r3, r2
 8003184:	7a5b      	ldrb	r3, [r3, #9]
 8003186:	2b57      	cmp	r3, #87	; 0x57
 8003188:	d1cd      	bne.n	8003126 <read_song+0x26>
  	  	  		otw=1;
 800318a:	4b25      	ldr	r3, [pc, #148]	; (8003220 <read_song+0x120>)
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
  	  	  		sprintf(utwor_poprzedni,"%s",fno.fname);
 8003190:	4926      	ldr	r1, [pc, #152]	; (800322c <read_song+0x12c>)
 8003192:	4828      	ldr	r0, [pc, #160]	; (8003234 <read_song+0x134>)
 8003194:	f006 fa42 	bl	800961c <strcpy>
 8003198:	e03f      	b.n	800321a <read_song+0x11a>
            	}
            }

      else{
    	  sprintf(utwor_poprzedni, "%s", utwor);
 800319a:	4927      	ldr	r1, [pc, #156]	; (8003238 <read_song+0x138>)
 800319c:	4825      	ldr	r0, [pc, #148]	; (8003234 <read_song+0x134>)
 800319e:	f006 fa3d 	bl	800961c <strcpy>
    	  res = f_opendir(&dir, "/");
 80031a2:	463b      	mov	r3, r7
 80031a4:	491f      	ldr	r1, [pc, #124]	; (8003224 <read_song+0x124>)
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff14 	bl	8002fd4 <f_opendir>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
           for(int i=0;i<=nr_utworu;i++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
 80031b6:	e024      	b.n	8003202 <read_song+0x102>
           {
            		res = f_readdir(&dir, &fno);
 80031b8:	463b      	mov	r3, r7
 80031ba:	491b      	ldr	r1, [pc, #108]	; (8003228 <read_song+0x128>)
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff62 	bl	8003086 <f_readdir>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            		if (res != FR_OK || fno.fname[0] == 0){
 80031c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <read_song+0xd8>
 80031d0:	4b15      	ldr	r3, [pc, #84]	; (8003228 <read_song+0x128>)
 80031d2:	7a5b      	ldrb	r3, [r3, #9]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d106      	bne.n	80031e6 <read_song+0xe6>
            			otw=0;
 80031d8:	4b11      	ldr	r3, [pc, #68]	; (8003220 <read_song+0x120>)
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
            			nr_utworu=0;
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <read_song+0x130>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	801a      	strh	r2, [r3, #0]
            			break;
 80031e4:	e013      	b.n	800320e <read_song+0x10e>
            		}
            		printf("%s\n", fno.fname);
 80031e6:	4811      	ldr	r0, [pc, #68]	; (800322c <read_song+0x12c>)
 80031e8:	f006 fa10 	bl	800960c <puts>
                	z = strlen(fno.fname);
 80031ec:	480f      	ldr	r0, [pc, #60]	; (800322c <read_song+0x12c>)
 80031ee:	f7fc ffeb 	bl	80001c8 <strlen>
 80031f2:	62f8      	str	r0, [r7, #44]	; 0x2c
                	sprintf(utwor,"%s",fno.fname);
 80031f4:	490d      	ldr	r1, [pc, #52]	; (800322c <read_song+0x12c>)
 80031f6:	4810      	ldr	r0, [pc, #64]	; (8003238 <read_song+0x138>)
 80031f8:	f006 fa10 	bl	800961c <strcpy>
           for(int i=0;i<=nr_utworu;i++)
 80031fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fe:	3301      	adds	r3, #1
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <read_song+0x130>)
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320a:	4293      	cmp	r3, r2
 800320c:	ddd4      	ble.n	80031b8 <read_song+0xb8>
            	}

            	nr_utworu++;
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <read_song+0x130>)
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <read_song+0x130>)
 8003218:	801a      	strh	r2, [r3, #0]
               	return;
            	}
	}
 800321a:	3738      	adds	r7, #56	; 0x38
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	200002e0 	.word	0x200002e0
 8003224:	08009e68 	.word	0x08009e68
 8003228:	200002ec 	.word	0x200002ec
 800322c:	200002f5 	.word	0x200002f5
 8003230:	200002e8 	.word	0x200002e8
 8003234:	20004648 	.word	0x20004648
 8003238:	200004e8 	.word	0x200004e8

0800323c <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]


		  		  value = HAL_ADC_GetValue(&hadc1);
 8003244:	4851      	ldr	r0, [pc, #324]	; (800338c <HAL_ADC_ConvCpltCallback+0x150>)
 8003246:	f001 fc80 	bl	8004b4a <HAL_ADC_GetValue>
 800324a:	4603      	mov	r3, r0
 800324c:	b29a      	uxth	r2, r3
 800324e:	4b50      	ldr	r3, [pc, #320]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003250:	801a      	strh	r2, [r3, #0]

//za pierwszym ustawieniem potencjometru działa ale potem się nie zmienia
		  	  if(value>0 && value <= 410) indeks_glosnosci = 0;
 8003252:	4b4f      	ldr	r3, [pc, #316]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_ADC_ConvCpltCallback+0x30>
 800325a:	4b4d      	ldr	r3, [pc, #308]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8003262:	d803      	bhi.n	800326c <HAL_ADC_ConvCpltCallback+0x30>
 8003264:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e088      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	  else if(value>410 && value <= 819) indeks_glosnosci = 1;
 800326c:	4b48      	ldr	r3, [pc, #288]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8003274:	d908      	bls.n	8003288 <HAL_ADC_ConvCpltCallback+0x4c>
 8003276:	4b46      	ldr	r3, [pc, #280]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 800327e:	d203      	bcs.n	8003288 <HAL_ADC_ConvCpltCallback+0x4c>
 8003280:	4b44      	ldr	r3, [pc, #272]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e07a      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	  else if(value>819 && value <= 1228) indeks_glosnosci = 2;
 8003288:	4b41      	ldr	r3, [pc, #260]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003290:	d309      	bcc.n	80032a6 <HAL_ADC_ConvCpltCallback+0x6a>
 8003292:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800329a:	4293      	cmp	r3, r2
 800329c:	d803      	bhi.n	80032a6 <HAL_ADC_ConvCpltCallback+0x6a>
 800329e:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 80032a0:	2202      	movs	r2, #2
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e06b      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>1228 && value <= 1647) indeks_glosnosci = 3;
 80032a6:	4b3a      	ldr	r3, [pc, #232]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	f240 42cc 	movw	r2, #1228	; 0x4cc
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d908      	bls.n	80032c4 <HAL_ADC_ConvCpltCallback+0x88>
 80032b2:	4b37      	ldr	r3, [pc, #220]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80032ba:	d203      	bcs.n	80032c4 <HAL_ADC_ConvCpltCallback+0x88>
 80032bc:	4b35      	ldr	r3, [pc, #212]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 80032be:	2203      	movs	r2, #3
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e05c      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>1647 && value <= 2058) indeks_glosnosci = 4;
 80032c4:	4b32      	ldr	r3, [pc, #200]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80032cc:	d309      	bcc.n	80032e2 <HAL_ADC_ConvCpltCallback+0xa6>
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	f640 020a 	movw	r2, #2058	; 0x80a
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d803      	bhi.n	80032e2 <HAL_ADC_ConvCpltCallback+0xa6>
 80032da:	4b2e      	ldr	r3, [pc, #184]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 80032dc:	2204      	movs	r2, #4
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	e04d      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2058 && value <= 2467) indeks_glosnosci = 5;
 80032e2:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	f640 020a 	movw	r2, #2058	; 0x80a
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d909      	bls.n	8003302 <HAL_ADC_ConvCpltCallback+0xc6>
 80032ee:	4b28      	ldr	r3, [pc, #160]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	f640 12a3 	movw	r2, #2467	; 0x9a3
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d803      	bhi.n	8003302 <HAL_ADC_ConvCpltCallback+0xc6>
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 80032fc:	2205      	movs	r2, #5
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e03d      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2467 && value <= 2876) indeks_glosnosci = 6;
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	f640 12a3 	movw	r2, #2467	; 0x9a3
 800330a:	4293      	cmp	r3, r2
 800330c:	d909      	bls.n	8003322 <HAL_ADC_ConvCpltCallback+0xe6>
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	f640 323c 	movw	r2, #2876	; 0xb3c
 8003316:	4293      	cmp	r3, r2
 8003318:	d803      	bhi.n	8003322 <HAL_ADC_ConvCpltCallback+0xe6>
 800331a:	4b1e      	ldr	r3, [pc, #120]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 800331c:	2206      	movs	r2, #6
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e02d      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2876 && value <= 3285) indeks_glosnosci = 7;
 8003322:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	f640 323c 	movw	r2, #2876	; 0xb3c
 800332a:	4293      	cmp	r3, r2
 800332c:	d909      	bls.n	8003342 <HAL_ADC_ConvCpltCallback+0x106>
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8003336:	4293      	cmp	r3, r2
 8003338:	d803      	bhi.n	8003342 <HAL_ADC_ConvCpltCallback+0x106>
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 800333c:	2207      	movs	r2, #7
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	e01d      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>3285 && value <= 3692) indeks_glosnosci = 8;
 8003342:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	f640 42d5 	movw	r2, #3285	; 0xcd5
 800334a:	4293      	cmp	r3, r2
 800334c:	d909      	bls.n	8003362 <HAL_ADC_ConvCpltCallback+0x126>
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	f640 626c 	movw	r2, #3692	; 0xe6c
 8003356:	4293      	cmp	r3, r2
 8003358:	d803      	bhi.n	8003362 <HAL_ADC_ConvCpltCallback+0x126>
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 800335c:	2208      	movs	r2, #8
 800335e:	701a      	strb	r2, [r3, #0]
 8003360:	e00d      	b.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>3692 && value <= 4095) indeks_glosnosci = 9;
 8003362:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	f640 626c 	movw	r2, #3692	; 0xe6c
 800336a:	4293      	cmp	r3, r2
 800336c:	d907      	bls.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_ADC_ConvCpltCallback+0x154>)
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003376:	d202      	bcs.n	800337e <HAL_ADC_ConvCpltCallback+0x142>
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_ADC_ConvCpltCallback+0x158>)
 800337a:	2209      	movs	r2, #9
 800337c:	701a      	strb	r2, [r3, #0]
		  	HAL_ADC_Start_IT(&hadc1);
 800337e:	4803      	ldr	r0, [pc, #12]	; (800338c <HAL_ADC_ConvCpltCallback+0x150>)
 8003380:	f001 f9d2 	bl	8004728 <HAL_ADC_Start_IT>
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	2000077c 	.word	0x2000077c
 8003390:	200002de 	.word	0x200002de
 8003394:	200002dc 	.word	0x200002dc

08003398 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET){
 80033a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033a6:	4853      	ldr	r0, [pc, #332]	; (80034f4 <HAL_GPIO_EXTI_Callback+0x15c>)
 80033a8:	f002 f9ee 	bl	8005788 <HAL_GPIO_ReadPin>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_GPIO_EXTI_Callback+0x36>

		 //ciszej

		 if(indeks_glosnosci>0 && indeks_glosnosci<=9) indeks_glosnosci--;
 80033b2:	4b51      	ldr	r3, [pc, #324]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_GPIO_EXTI_Callback+0x36>
 80033ba:	4b4f      	ldr	r3, [pc, #316]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b09      	cmp	r3, #9
 80033c0:	d805      	bhi.n	80033ce <HAL_GPIO_EXTI_Callback+0x36>
 80033c2:	4b4d      	ldr	r3, [pc, #308]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4b4b      	ldr	r3, [pc, #300]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80033cc:	701a      	strb	r2, [r3, #0]

		  	}

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 80033ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033d2:	4848      	ldr	r0, [pc, #288]	; (80034f4 <HAL_GPIO_EXTI_Callback+0x15c>)
 80033d4:	f002 f9d8 	bl	8005788 <HAL_GPIO_ReadPin>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d126      	bne.n	800342c <HAL_GPIO_EXTI_Callback+0x94>
			  		//prev song
			  		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
			  		HAL_TIM_Base_Stop_IT(&htim4);
 80033de:	4847      	ldr	r0, [pc, #284]	; (80034fc <HAL_GPIO_EXTI_Callback+0x164>)
 80033e0:	f004 ffbd 	bl	800835e <HAL_TIM_Base_Stop_IT>
			  		f_close(&file);
 80033e4:	4846      	ldr	r0, [pc, #280]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 80033e6:	f7ff fdd5 	bl	8002f94 <f_close>
			  		fresult = f_open(&file, &utwor_poprzedni , FA_READ|FA_OPEN_EXISTING);
 80033ea:	2201      	movs	r2, #1
 80033ec:	4945      	ldr	r1, [pc, #276]	; (8003504 <HAL_GPIO_EXTI_Callback+0x16c>)
 80033ee:	4844      	ldr	r0, [pc, #272]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 80033f0:	f7ff fa9c 	bl	800292c <f_open>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b43      	ldr	r3, [pc, #268]	; (8003508 <HAL_GPIO_EXTI_Callback+0x170>)
 80033fa:	701a      	strb	r2, [r3, #0]
			  		f_read(&file, &buf2,16000, &bytes_read);
 80033fc:	4b43      	ldr	r3, [pc, #268]	; (800350c <HAL_GPIO_EXTI_Callback+0x174>)
 80033fe:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003402:	4943      	ldr	r1, [pc, #268]	; (8003510 <HAL_GPIO_EXTI_Callback+0x178>)
 8003404:	483e      	ldr	r0, [pc, #248]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 8003406:	f7ff fc14 	bl	8002c32 <f_read>
			  	    f_read(&file, &buf, 16000, &bytes_read);
 800340a:	4b40      	ldr	r3, [pc, #256]	; (800350c <HAL_GPIO_EXTI_Callback+0x174>)
 800340c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003410:	4940      	ldr	r1, [pc, #256]	; (8003514 <HAL_GPIO_EXTI_Callback+0x17c>)
 8003412:	483b      	ldr	r0, [pc, #236]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 8003414:	f7ff fc0d 	bl	8002c32 <f_read>
			  		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
			  		i=352;
 8003418:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <HAL_GPIO_EXTI_Callback+0x180>)
 800341a:	f44f 72b0 	mov.w	r2, #352	; 0x160
 800341e:	601a      	str	r2, [r3, #0]
			  		j=0;
 8003420:	4b3e      	ldr	r3, [pc, #248]	; (800351c <HAL_GPIO_EXTI_Callback+0x184>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
			  		HAL_TIM_Base_Start_IT(&htim4);
 8003426:	4835      	ldr	r0, [pc, #212]	; (80034fc <HAL_GPIO_EXTI_Callback+0x164>)
 8003428:	f004 ff75 	bl	8008316 <HAL_TIM_Base_Start_IT>
			  		//kom

			}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 800342c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003430:	4830      	ldr	r0, [pc, #192]	; (80034f4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003432:	f002 f9a9 	bl	8005788 <HAL_GPIO_ReadPin>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d110      	bne.n	800345e <HAL_GPIO_EXTI_Callback+0xc6>


		 //pause/start

		 if(stan==1){
 800343c:	4b38      	ldr	r3, [pc, #224]	; (8003520 <HAL_GPIO_EXTI_Callback+0x188>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d106      	bne.n	8003452 <HAL_GPIO_EXTI_Callback+0xba>

		 HAL_TIM_Base_Start_IT(&htim4);
 8003444:	482d      	ldr	r0, [pc, #180]	; (80034fc <HAL_GPIO_EXTI_Callback+0x164>)
 8003446:	f004 ff66 	bl	8008316 <HAL_TIM_Base_Start_IT>

		 stan = 0;
 800344a:	4b35      	ldr	r3, [pc, #212]	; (8003520 <HAL_GPIO_EXTI_Callback+0x188>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e005      	b.n	800345e <HAL_GPIO_EXTI_Callback+0xc6>
		 }
		 else
		 {
			 HAL_TIM_Base_Stop_IT(&htim4);
 8003452:	482a      	ldr	r0, [pc, #168]	; (80034fc <HAL_GPIO_EXTI_Callback+0x164>)
 8003454:	f004 ff83 	bl	800835e <HAL_TIM_Base_Stop_IT>
			 stan=1;
 8003458:	4b31      	ldr	r3, [pc, #196]	; (8003520 <HAL_GPIO_EXTI_Callback+0x188>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]
		 }

	 		}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET){
 800345e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003462:	4824      	ldr	r0, [pc, #144]	; (80034f4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8003464:	f002 f990 	bl	8005788 <HAL_GPIO_ReadPin>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d128      	bne.n	80034c0 <HAL_GPIO_EXTI_Callback+0x128>
		 	 HAL_TIM_Base_Stop_IT(&htim4);
 800346e:	4823      	ldr	r0, [pc, #140]	; (80034fc <HAL_GPIO_EXTI_Callback+0x164>)
 8003470:	f004 ff75 	bl	800835e <HAL_TIM_Base_Stop_IT>
		 	 	 f_close(&file);
 8003474:	4822      	ldr	r0, [pc, #136]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 8003476:	f7ff fd8d 	bl	8002f94 <f_close>
		 	 	read_song();
 800347a:	f7ff fe41 	bl	8003100 <read_song>

		 	       fresult = f_open(&file, &utwor , FA_READ|FA_OPEN_EXISTING);
 800347e:	2201      	movs	r2, #1
 8003480:	4928      	ldr	r1, [pc, #160]	; (8003524 <HAL_GPIO_EXTI_Callback+0x18c>)
 8003482:	481f      	ldr	r0, [pc, #124]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 8003484:	f7ff fa52 	bl	800292c <f_open>
 8003488:	4603      	mov	r3, r0
 800348a:	461a      	mov	r2, r3
 800348c:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <HAL_GPIO_EXTI_Callback+0x170>)
 800348e:	701a      	strb	r2, [r3, #0]
		 	       f_read(&file, &buf2,16000, &bytes_read);
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <HAL_GPIO_EXTI_Callback+0x174>)
 8003492:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003496:	491e      	ldr	r1, [pc, #120]	; (8003510 <HAL_GPIO_EXTI_Callback+0x178>)
 8003498:	4819      	ldr	r0, [pc, #100]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 800349a:	f7ff fbca 	bl	8002c32 <f_read>
		 	       f_read(&file, &buf, 16000, &bytes_read);
 800349e:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_GPIO_EXTI_Callback+0x174>)
 80034a0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80034a4:	491b      	ldr	r1, [pc, #108]	; (8003514 <HAL_GPIO_EXTI_Callback+0x17c>)
 80034a6:	4816      	ldr	r0, [pc, #88]	; (8003500 <HAL_GPIO_EXTI_Callback+0x168>)
 80034a8:	f7ff fbc3 	bl	8002c32 <f_read>
		 		 //	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
		 		 	i=352;
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <HAL_GPIO_EXTI_Callback+0x180>)
 80034ae:	f44f 72b0 	mov.w	r2, #352	; 0x160
 80034b2:	601a      	str	r2, [r3, #0]
		 		 	j=0;
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_GPIO_EXTI_Callback+0x184>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
		 		 	 HAL_TIM_Base_Start_IT(&htim4);
 80034ba:	4810      	ldr	r0, [pc, #64]	; (80034fc <HAL_GPIO_EXTI_Callback+0x164>)
 80034bc:	f004 ff2b 	bl	8008316 <HAL_TIM_Base_Start_IT>

		 	}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 80034c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034c4:	480b      	ldr	r0, [pc, #44]	; (80034f4 <HAL_GPIO_EXTI_Callback+0x15c>)
 80034c6:	f002 f95f 	bl	8005788 <HAL_GPIO_ReadPin>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_GPIO_EXTI_Callback+0x14c>

		 //glosniej

		 if(indeks_glosnosci>=0 && indeks_glosnosci<9)
 80034d0:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d805      	bhi.n	80034e4 <HAL_GPIO_EXTI_Callback+0x14c>
			 indeks_glosnosci++;
 80034d8:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_GPIO_EXTI_Callback+0x160>)
 80034e2:	701a      	strb	r2, [r3, #0]
			 	}
	 HAL_Delay(200);
 80034e4:	20c8      	movs	r0, #200	; 0xc8
 80034e6:	f001 f8b9 	bl	800465c <HAL_Delay>

}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40020400 	.word	0x40020400
 80034f8:	200002dc 	.word	0x200002dc
 80034fc:	20000368 	.word	0x20000368
 8003500:	20000554 	.word	0x20000554
 8003504:	20004648 	.word	0x20004648
 8003508:	20008560 	.word	0x20008560
 800350c:	200007c4 	.word	0x200007c4
 8003510:	200007c8 	.word	0x200007c8
 8003514:	200046e0 	.word	0x200046e0
 8003518:	2000000c 	.word	0x2000000c
 800351c:	20000010 	.word	0x20000010
 8003520:	200002e4 	.word	0x200002e4
 8003524:	200004e8 	.word	0x200004e8

08003528 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
if(htim->Instance == TIM4)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a2c      	ldr	r2, [pc, #176]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d151      	bne.n	80035de <HAL_TIM_PeriodElapsedCallback+0xb6>
{
	if(aktualny_bufor==0){
 800353a:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d126      	bne.n	8003590 <HAL_TIM_PeriodElapsedCallback+0x68>
			HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,buf[i]);
 8003542:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003548:	5cd3      	ldrb	r3, [r2, r3]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2200      	movs	r2, #0
 800354e:	2100      	movs	r1, #0
 8003550:	4829      	ldr	r0, [pc, #164]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003552:	f001 ff29 	bl	80053a8 <HAL_DAC_SetValue>
			fresult=f_read(&file, &buf2[i],1, &bytes_read);
 8003556:	4b26      	ldr	r3, [pc, #152]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a28      	ldr	r2, [pc, #160]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800355c:	1899      	adds	r1, r3, r2
 800355e:	4b28      	ldr	r3, [pc, #160]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003560:	2201      	movs	r2, #1
 8003562:	4828      	ldr	r0, [pc, #160]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003564:	f7ff fb65 	bl	8002c32 <f_read>
 8003568:	4603      	mov	r3, r0
 800356a:	461a      	mov	r2, r3
 800356c:	4b26      	ldr	r3, [pc, #152]	; (8003608 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800356e:	701a      	strb	r2, [r3, #0]
			i++;
 8003570:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003578:	6013      	str	r3, [r2, #0]
			if(i==16000){
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003582:	d105      	bne.n	8003590 <HAL_TIM_PeriodElapsedCallback+0x68>
				aktualny_bufor = 1;
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]
				j=0;
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
				//HAL_TIM_Base_Start_IT(&htim7);*glosnosc_guziczki[indeks_glosnosci]
			}
		}

	if(aktualny_bufor==1){
 8003590:	4b16      	ldr	r3, [pc, #88]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d122      	bne.n	80035de <HAL_TIM_PeriodElapsedCallback+0xb6>
		HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,buf2[j]);
 8003598:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a17      	ldr	r2, [pc, #92]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800359e:	5cd3      	ldrb	r3, [r2, r3]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	4814      	ldr	r0, [pc, #80]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80035a8:	f001 fefe 	bl	80053a8 <HAL_DAC_SetValue>

		f_read(&file, &buf[j],1, &bytes_read);
 80035ac:	4b17      	ldr	r3, [pc, #92]	; (800360c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a10      	ldr	r2, [pc, #64]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80035b2:	1899      	adds	r1, r3, r2
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	4812      	ldr	r0, [pc, #72]	; (8003604 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80035ba:	f7ff fb3a 	bl	8002c32 <f_read>
		j++;
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3301      	adds	r3, #1
 80035c4:	4a11      	ldr	r2, [pc, #68]	; (800360c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80035c6:	6013      	str	r3, [r2, #0]
		if(j==16000){
 80035c8:	4b10      	ldr	r3, [pc, #64]	; (800360c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80035d0:	d105      	bne.n	80035de <HAL_TIM_PeriodElapsedCallback+0xb6>
			aktualny_bufor = 0;
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
			i=0;
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
			f_read(&file, &buf2, 16000, &bytes_read);
			}
	HAL_TIM_Base_Stop_IT(&htim7);
}*/

}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40000800 	.word	0x40000800
 80035ec:	200002ea 	.word	0x200002ea
 80035f0:	2000000c 	.word	0x2000000c
 80035f4:	200046e0 	.word	0x200046e0
 80035f8:	2000465c 	.word	0x2000465c
 80035fc:	200007c8 	.word	0x200007c8
 8003600:	200007c4 	.word	0x200007c4
 8003604:	20000554 	.word	0x20000554
 8003608:	20008560 	.word	0x20008560
 800360c:	20000010 	.word	0x20000010

08003610 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
	{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
		if(huart->Instance == USART2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a0b      	ldr	r2, [pc, #44]	; (800364c <HAL_UART_RxCpltCallback+0x3c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d10f      	bne.n	8003642 <HAL_UART_RxCpltCallback+0x32>
			{

			HAL_UART_Receive_IT(&huart2, receiveUART, sizeReceiveUART);
 8003622:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <HAL_UART_RxCpltCallback+0x40>)
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	490a      	ldr	r1, [pc, #40]	; (8003654 <HAL_UART_RxCpltCallback+0x44>)
 800362a:	480b      	ldr	r0, [pc, #44]	; (8003658 <HAL_UART_RxCpltCallback+0x48>)
 800362c:	f005 facf 	bl	8008bce <HAL_UART_Receive_IT>
			if(receiveUART[0]==79){
 8003630:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HAL_UART_RxCpltCallback+0x44>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b4f      	cmp	r3, #79	; 0x4f
 8003636:	d104      	bne.n	8003642 <HAL_UART_RxCpltCallback+0x32>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8003638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800363c:	4807      	ldr	r0, [pc, #28]	; (800365c <HAL_UART_RxCpltCallback+0x4c>)
 800363e:	f002 f8d4 	bl	80057ea <HAL_GPIO_TogglePin>
			}
			}
	}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40004400 	.word	0x40004400
 8003650:	20000008 	.word	0x20000008
 8003654:	200046b0 	.word	0x200046b0
 8003658:	20008564 	.word	0x20008564
 800365c:	40020c00 	.word	0x40020c00

08003660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003664:	f000 ff88 	bl	8004578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003668:	f000 f86a 	bl	8003740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800366c:	f000 fabc 	bl	8003be8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003670:	f000 f8d0 	bl	8003814 <MX_ADC1_Init>
  MX_DAC_Init();
 8003674:	f000 f920 	bl	80038b8 <MX_DAC_Init>
  MX_SPI3_Init();
 8003678:	f000 f976 	bl	8003968 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 800367c:	f000 fa8a 	bl	8003b94 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8003680:	f000 f9f4 	bl	8003a6c <MX_TIM6_Init>
  MX_TIM4_Init();
 8003684:	f000 f9a6 	bl	80039d4 <MX_TIM4_Init>
  MX_TIM7_Init();
 8003688:	f000 fa24 	bl	8003ad4 <MX_TIM7_Init>
  MX_I2C3_Init();
 800368c:	f000 f93e 	bl	800390c <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8003690:	f000 fa56 	bl	8003b40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8003694:	2100      	movs	r1, #0
 8003696:	481b      	ldr	r0, [pc, #108]	; (8003704 <main+0xa4>)
 8003698:	f001 fdd3 	bl	8005242 <HAL_DAC_Start>
  HAL_ADC_Start_IT(&hadc1);
 800369c:	481a      	ldr	r0, [pc, #104]	; (8003708 <main+0xa8>)
 800369e:	f001 f843 	bl	8004728 <HAL_ADC_Start_IT>

  HAL_UART_Transmit_IT(&huart2, sendUART, sizeSendUART);
 80036a2:	4b1a      	ldr	r3, [pc, #104]	; (800370c <main+0xac>)
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	4919      	ldr	r1, [pc, #100]	; (8003710 <main+0xb0>)
 80036aa:	481a      	ldr	r0, [pc, #104]	; (8003714 <main+0xb4>)
 80036ac:	f005 fa4a 	bl	8008b44 <HAL_UART_Transmit_IT>

  	  fresult = f_mount(&FatFs, "", 1);
 80036b0:	2201      	movs	r2, #1
 80036b2:	4919      	ldr	r1, [pc, #100]	; (8003718 <main+0xb8>)
 80036b4:	4819      	ldr	r0, [pc, #100]	; (800371c <main+0xbc>)
 80036b6:	f7ff f8f9 	bl	80028ac <f_mount>
 80036ba:	4603      	mov	r3, r0
 80036bc:	461a      	mov	r2, r3
 80036be:	4b18      	ldr	r3, [pc, #96]	; (8003720 <main+0xc0>)
 80036c0:	701a      	strb	r2, [r3, #0]
      read_song();
 80036c2:	f7ff fd1d 	bl	8003100 <read_song>
      fresult = f_open(&file, &utwor_poprzedni , FA_READ|FA_OPEN_EXISTING|FA_OPEN_ALWAYS);
 80036c6:	2211      	movs	r2, #17
 80036c8:	4916      	ldr	r1, [pc, #88]	; (8003724 <main+0xc4>)
 80036ca:	4817      	ldr	r0, [pc, #92]	; (8003728 <main+0xc8>)
 80036cc:	f7ff f92e 	bl	800292c <f_open>
 80036d0:	4603      	mov	r3, r0
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <main+0xc0>)
 80036d6:	701a      	strb	r2, [r3, #0]
      f_read(&file, &buf2,16000, &bytes_read);
 80036d8:	4b14      	ldr	r3, [pc, #80]	; (800372c <main+0xcc>)
 80036da:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80036de:	4914      	ldr	r1, [pc, #80]	; (8003730 <main+0xd0>)
 80036e0:	4811      	ldr	r0, [pc, #68]	; (8003728 <main+0xc8>)
 80036e2:	f7ff faa6 	bl	8002c32 <f_read>
      f_read(&file, &buf, 16000, &bytes_read);
 80036e6:	4b11      	ldr	r3, [pc, #68]	; (800372c <main+0xcc>)
 80036e8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80036ec:	4911      	ldr	r1, [pc, #68]	; (8003734 <main+0xd4>)
 80036ee:	480e      	ldr	r0, [pc, #56]	; (8003728 <main+0xc8>)
 80036f0:	f7ff fa9f 	bl	8002c32 <f_read>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      while (1)
  {
    	  HAL_UART_Receive_IT(&huart2, receiveUART, sizeReceiveUART);
 80036f4:	4b10      	ldr	r3, [pc, #64]	; (8003738 <main+0xd8>)
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	4910      	ldr	r1, [pc, #64]	; (800373c <main+0xdc>)
 80036fc:	4805      	ldr	r0, [pc, #20]	; (8003714 <main+0xb4>)
 80036fe:	f005 fa66 	bl	8008bce <HAL_UART_Receive_IT>
 8003702:	e7f7      	b.n	80036f4 <main+0x94>
 8003704:	2000465c 	.word	0x2000465c
 8003708:	2000077c 	.word	0x2000077c
 800370c:	20000006 	.word	0x20000006
 8003710:	20000004 	.word	0x20000004
 8003714:	20008564 	.word	0x20008564
 8003718:	08009e6c 	.word	0x08009e6c
 800371c:	200000ac 	.word	0x200000ac
 8003720:	20008560 	.word	0x20008560
 8003724:	20004648 	.word	0x20004648
 8003728:	20000554 	.word	0x20000554
 800372c:	200007c4 	.word	0x200007c4
 8003730:	200007c8 	.word	0x200007c8
 8003734:	200046e0 	.word	0x200046e0
 8003738:	20000008 	.word	0x20000008
 800373c:	200046b0 	.word	0x200046b0

08003740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b094      	sub	sp, #80	; 0x50
 8003744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003746:	f107 0320 	add.w	r3, r7, #32
 800374a:	2230      	movs	r2, #48	; 0x30
 800374c:	2100      	movs	r1, #0
 800374e:	4618      	mov	r0, r3
 8003750:	f005 fef8 	bl	8009544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003754:	f107 030c 	add.w	r3, r7, #12
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003764:	2300      	movs	r3, #0
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	4b28      	ldr	r3, [pc, #160]	; (800380c <SystemClock_Config+0xcc>)
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	4a27      	ldr	r2, [pc, #156]	; (800380c <SystemClock_Config+0xcc>)
 800376e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003772:	6413      	str	r3, [r2, #64]	; 0x40
 8003774:	4b25      	ldr	r3, [pc, #148]	; (800380c <SystemClock_Config+0xcc>)
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003780:	2300      	movs	r3, #0
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	4b22      	ldr	r3, [pc, #136]	; (8003810 <SystemClock_Config+0xd0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a21      	ldr	r2, [pc, #132]	; (8003810 <SystemClock_Config+0xd0>)
 800378a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <SystemClock_Config+0xd0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800379c:	2301      	movs	r3, #1
 800379e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037a6:	2302      	movs	r3, #2
 80037a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80037b0:	2304      	movs	r3, #4
 80037b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80037b4:	23a8      	movs	r3, #168	; 0xa8
 80037b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037b8:	2302      	movs	r3, #2
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80037bc:	2304      	movs	r3, #4
 80037be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037c0:	f107 0320 	add.w	r3, r7, #32
 80037c4:	4618      	mov	r0, r3
 80037c6:	f003 fd57 	bl	8007278 <HAL_RCC_OscConfig>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80037d0:	f000 faaa 	bl	8003d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037d4:	230f      	movs	r3, #15
 80037d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037d8:	2302      	movs	r3, #2
 80037da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80037e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	2105      	movs	r1, #5
 80037f2:	4618      	mov	r0, r3
 80037f4:	f003 ff82 	bl	80076fc <HAL_RCC_ClockConfig>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80037fe:	f000 fa93 	bl	8003d28 <Error_Handler>
  }
}
 8003802:	bf00      	nop
 8003804:	3750      	adds	r7, #80	; 0x50
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800
 8003810:	40007000 	.word	0x40007000

08003814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800381a:	463b      	mov	r3, r7
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003826:	4b21      	ldr	r3, [pc, #132]	; (80038ac <MX_ADC1_Init+0x98>)
 8003828:	4a21      	ldr	r2, [pc, #132]	; (80038b0 <MX_ADC1_Init+0x9c>)
 800382a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800382c:	4b1f      	ldr	r3, [pc, #124]	; (80038ac <MX_ADC1_Init+0x98>)
 800382e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003832:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003834:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <MX_ADC1_Init+0x98>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800383a:	4b1c      	ldr	r3, [pc, #112]	; (80038ac <MX_ADC1_Init+0x98>)
 800383c:	2200      	movs	r2, #0
 800383e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003840:	4b1a      	ldr	r3, [pc, #104]	; (80038ac <MX_ADC1_Init+0x98>)
 8003842:	2200      	movs	r2, #0
 8003844:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003846:	4b19      	ldr	r3, [pc, #100]	; (80038ac <MX_ADC1_Init+0x98>)
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800384e:	4b17      	ldr	r3, [pc, #92]	; (80038ac <MX_ADC1_Init+0x98>)
 8003850:	2200      	movs	r2, #0
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003854:	4b15      	ldr	r3, [pc, #84]	; (80038ac <MX_ADC1_Init+0x98>)
 8003856:	4a17      	ldr	r2, [pc, #92]	; (80038b4 <MX_ADC1_Init+0xa0>)
 8003858:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800385a:	4b14      	ldr	r3, [pc, #80]	; (80038ac <MX_ADC1_Init+0x98>)
 800385c:	2200      	movs	r2, #0
 800385e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <MX_ADC1_Init+0x98>)
 8003862:	2201      	movs	r2, #1
 8003864:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <MX_ADC1_Init+0x98>)
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800386e:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <MX_ADC1_Init+0x98>)
 8003870:	2201      	movs	r2, #1
 8003872:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003874:	480d      	ldr	r0, [pc, #52]	; (80038ac <MX_ADC1_Init+0x98>)
 8003876:	f000 ff13 	bl	80046a0 <HAL_ADC_Init>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003880:	f000 fa52 	bl	8003d28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003884:	2303      	movs	r3, #3
 8003886:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003888:	2301      	movs	r3, #1
 800388a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800388c:	2300      	movs	r3, #0
 800388e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003890:	463b      	mov	r3, r7
 8003892:	4619      	mov	r1, r3
 8003894:	4805      	ldr	r0, [pc, #20]	; (80038ac <MX_ADC1_Init+0x98>)
 8003896:	f001 f979 	bl	8004b8c <HAL_ADC_ConfigChannel>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80038a0:	f000 fa42 	bl	8003d28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	2000077c 	.word	0x2000077c
 80038b0:	40012000 	.word	0x40012000
 80038b4:	0f000001 	.word	0x0f000001

080038b8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80038be:	463b      	mov	r3, r7
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <MX_DAC_Init+0x4c>)
 80038c8:	4a0f      	ldr	r2, [pc, #60]	; (8003908 <MX_DAC_Init+0x50>)
 80038ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80038cc:	480d      	ldr	r0, [pc, #52]	; (8003904 <MX_DAC_Init+0x4c>)
 80038ce:	f001 fc96 	bl	80051fe <HAL_DAC_Init>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80038d8:	f000 fa26 	bl	8003d28 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80038dc:	2300      	movs	r3, #0
 80038de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80038e4:	463b      	mov	r3, r7
 80038e6:	2200      	movs	r2, #0
 80038e8:	4619      	mov	r1, r3
 80038ea:	4806      	ldr	r0, [pc, #24]	; (8003904 <MX_DAC_Init+0x4c>)
 80038ec:	f001 fd0f 	bl	800530e <HAL_DAC_ConfigChannel>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80038f6:	f000 fa17 	bl	8003d28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	2000465c 	.word	0x2000465c
 8003908:	40007400 	.word	0x40007400

0800390c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003910:	4b12      	ldr	r3, [pc, #72]	; (800395c <MX_I2C3_Init+0x50>)
 8003912:	4a13      	ldr	r2, [pc, #76]	; (8003960 <MX_I2C3_Init+0x54>)
 8003914:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003916:	4b11      	ldr	r3, [pc, #68]	; (800395c <MX_I2C3_Init+0x50>)
 8003918:	4a12      	ldr	r2, [pc, #72]	; (8003964 <MX_I2C3_Init+0x58>)
 800391a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800391c:	4b0f      	ldr	r3, [pc, #60]	; (800395c <MX_I2C3_Init+0x50>)
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003922:	4b0e      	ldr	r3, [pc, #56]	; (800395c <MX_I2C3_Init+0x50>)
 8003924:	2200      	movs	r2, #0
 8003926:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003928:	4b0c      	ldr	r3, [pc, #48]	; (800395c <MX_I2C3_Init+0x50>)
 800392a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800392e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <MX_I2C3_Init+0x50>)
 8003932:	2200      	movs	r2, #0
 8003934:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <MX_I2C3_Init+0x50>)
 8003938:	2200      	movs	r2, #0
 800393a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <MX_I2C3_Init+0x50>)
 800393e:	2200      	movs	r2, #0
 8003940:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <MX_I2C3_Init+0x50>)
 8003944:	2200      	movs	r2, #0
 8003946:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003948:	4804      	ldr	r0, [pc, #16]	; (800395c <MX_I2C3_Init+0x50>)
 800394a:	f001 ff81 	bl	8005850 <HAL_I2C_Init>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003954:	f000 f9e8 	bl	8003d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003958:	bf00      	nop
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20000314 	.word	0x20000314
 8003960:	40005c00 	.word	0x40005c00
 8003964:	000186a0 	.word	0x000186a0

08003968 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800396c:	4b17      	ldr	r3, [pc, #92]	; (80039cc <MX_SPI3_Init+0x64>)
 800396e:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <MX_SPI3_Init+0x68>)
 8003970:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003972:	4b16      	ldr	r3, [pc, #88]	; (80039cc <MX_SPI3_Init+0x64>)
 8003974:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003978:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <MX_SPI3_Init+0x64>)
 800397c:	2200      	movs	r2, #0
 800397e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <MX_SPI3_Init+0x64>)
 8003982:	2200      	movs	r2, #0
 8003984:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <MX_SPI3_Init+0x64>)
 8003988:	2200      	movs	r2, #0
 800398a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800398c:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <MX_SPI3_Init+0x64>)
 800398e:	2200      	movs	r2, #0
 8003990:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003992:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <MX_SPI3_Init+0x64>)
 8003994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003998:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800399a:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <MX_SPI3_Init+0x64>)
 800399c:	2218      	movs	r2, #24
 800399e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039a0:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <MX_SPI3_Init+0x64>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <MX_SPI3_Init+0x64>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ac:	4b07      	ldr	r3, [pc, #28]	; (80039cc <MX_SPI3_Init+0x64>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <MX_SPI3_Init+0x64>)
 80039b4:	220a      	movs	r2, #10
 80039b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80039b8:	4804      	ldr	r0, [pc, #16]	; (80039cc <MX_SPI3_Init+0x64>)
 80039ba:	f004 f88d 	bl	8007ad8 <HAL_SPI_Init>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80039c4:	f000 f9b0 	bl	8003d28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	200004fc 	.word	0x200004fc
 80039d0:	40003c00 	.word	0x40003c00

080039d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039da:	f107 0308 	add.w	r3, r7, #8
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	609a      	str	r2, [r3, #8]
 80039e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039e8:	463b      	mov	r3, r7
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039f0:	4b1c      	ldr	r3, [pc, #112]	; (8003a64 <MX_TIM4_Init+0x90>)
 80039f2:	4a1d      	ldr	r2, [pc, #116]	; (8003a68 <MX_TIM4_Init+0x94>)
 80039f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 104;
 80039f6:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <MX_TIM4_Init+0x90>)
 80039f8:	2268      	movs	r2, #104	; 0x68
 80039fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <MX_TIM4_Init+0x90>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49;
 8003a02:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <MX_TIM4_Init+0x90>)
 8003a04:	2231      	movs	r2, #49	; 0x31
 8003a06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a08:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <MX_TIM4_Init+0x90>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <MX_TIM4_Init+0x90>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a14:	4813      	ldr	r0, [pc, #76]	; (8003a64 <MX_TIM4_Init+0x90>)
 8003a16:	f004 fc53 	bl	80082c0 <HAL_TIM_Base_Init>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8003a20:	f000 f982 	bl	8003d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a2a:	f107 0308 	add.w	r3, r7, #8
 8003a2e:	4619      	mov	r1, r3
 8003a30:	480c      	ldr	r0, [pc, #48]	; (8003a64 <MX_TIM4_Init+0x90>)
 8003a32:	f004 fdc7 	bl	80085c4 <HAL_TIM_ConfigClockSource>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8003a3c:	f000 f974 	bl	8003d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a40:	2300      	movs	r3, #0
 8003a42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a48:	463b      	mov	r3, r7
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4805      	ldr	r0, [pc, #20]	; (8003a64 <MX_TIM4_Init+0x90>)
 8003a4e:	f004 ffd3 	bl	80089f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003a58:	f000 f966 	bl	8003d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003a5c:	bf00      	nop
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000368 	.word	0x20000368
 8003a68:	40000800 	.word	0x40000800

08003a6c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a72:	463b      	mov	r3, r7
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a7a:	4b14      	ldr	r3, [pc, #80]	; (8003acc <MX_TIM6_Init+0x60>)
 8003a7c:	4a14      	ldr	r2, [pc, #80]	; (8003ad0 <MX_TIM6_Init+0x64>)
 8003a7e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 249;
 8003a80:	4b12      	ldr	r3, [pc, #72]	; (8003acc <MX_TIM6_Init+0x60>)
 8003a82:	22f9      	movs	r2, #249	; 0xf9
 8003a84:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a86:	4b11      	ldr	r3, [pc, #68]	; (8003acc <MX_TIM6_Init+0x60>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20;
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <MX_TIM6_Init+0x60>)
 8003a8e:	2214      	movs	r2, #20
 8003a90:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a92:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <MX_TIM6_Init+0x60>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a98:	480c      	ldr	r0, [pc, #48]	; (8003acc <MX_TIM6_Init+0x60>)
 8003a9a:	f004 fc11 	bl	80082c0 <HAL_TIM_Base_Init>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8003aa4:	f000 f940 	bl	8003d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003ab0:	463b      	mov	r3, r7
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4805      	ldr	r0, [pc, #20]	; (8003acc <MX_TIM6_Init+0x60>)
 8003ab6:	f004 ff9f 	bl	80089f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8003ac0:	f000 f932 	bl	8003d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20004670 	.word	0x20004670
 8003ad0:	40001000 	.word	0x40001000

08003ad4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ada:	463b      	mov	r3, r7
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003ae2:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <MX_TIM7_Init+0x64>)
 8003ae4:	4a15      	ldr	r2, [pc, #84]	; (8003b3c <MX_TIM7_Init+0x68>)
 8003ae6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8003ae8:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <MX_TIM7_Init+0x64>)
 8003aea:	2204      	movs	r2, #4
 8003aec:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aee:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <MX_TIM7_Init+0x64>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 380;
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <MX_TIM7_Init+0x64>)
 8003af6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8003afa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003afc:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <MX_TIM7_Init+0x64>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003b02:	480d      	ldr	r0, [pc, #52]	; (8003b38 <MX_TIM7_Init+0x64>)
 8003b04:	f004 fbdc 	bl	80082c0 <HAL_TIM_Base_Init>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003b0e:	f000 f90b 	bl	8003d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003b1a:	463b      	mov	r3, r7
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4806      	ldr	r0, [pc, #24]	; (8003b38 <MX_TIM7_Init+0x64>)
 8003b20:	f004 ff6a 	bl	80089f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003b2a:	f000 f8fd 	bl	8003d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200085a8 	.word	0x200085a8
 8003b3c:	40001400 	.word	0x40001400

08003b40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b46:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <MX_USART2_UART_Init+0x50>)
 8003b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b52:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b66:	220c      	movs	r2, #12
 8003b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b76:	4805      	ldr	r0, [pc, #20]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b78:	f004 ff97 	bl	8008aaa <HAL_UART_Init>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b82:	f000 f8d1 	bl	8003d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20008564 	.word	0x20008564
 8003b90:	40004400 	.word	0x40004400

08003b94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003b9a:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <MX_USART3_UART_Init+0x50>)
 8003b9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003ba0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ba4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003bb8:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003bba:	220c      	movs	r2, #12
 8003bbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003bca:	4805      	ldr	r0, [pc, #20]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003bcc:	f004 ff6d 	bl	8008aaa <HAL_UART_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003bd6:	f000 f8a7 	bl	8003d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	200003a8 	.word	0x200003a8
 8003be4:	40004800 	.word	0x40004800

08003be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bee:	f107 0314 	add.w	r3, r7, #20
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	605a      	str	r2, [r3, #4]
 8003bf8:	609a      	str	r2, [r3, #8]
 8003bfa:	60da      	str	r2, [r3, #12]
 8003bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	4b43      	ldr	r3, [pc, #268]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	4a42      	ldr	r2, [pc, #264]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0e:	4b40      	ldr	r3, [pc, #256]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	4b3c      	ldr	r3, [pc, #240]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	4a3b      	ldr	r2, [pc, #236]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2a:	4b39      	ldr	r3, [pc, #228]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	4a34      	ldr	r2, [pc, #208]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c40:	f043 0302 	orr.w	r3, r3, #2
 8003c44:	6313      	str	r3, [r2, #48]	; 0x30
 8003c46:	4b32      	ldr	r3, [pc, #200]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a2d      	ldr	r2, [pc, #180]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c5c:	f043 0308 	orr.w	r3, r3, #8
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c78:	f043 0304 	orr.w	r3, r3, #4
 8003c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7e:	4b24      	ldr	r3, [pc, #144]	; (8003d10 <MX_GPIO_Init+0x128>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003c90:	4820      	ldr	r0, [pc, #128]	; (8003d14 <MX_GPIO_Init+0x12c>)
 8003c92:	f001 fd91 	bl	80057b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c96:	2301      	movs	r3, #1
 8003c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c9a:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <MX_GPIO_Init+0x130>)
 8003c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca2:	f107 0314 	add.w	r3, r7, #20
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	481c      	ldr	r0, [pc, #112]	; (8003d1c <MX_GPIO_Init+0x134>)
 8003caa:	f001 fbd3 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8003cae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cb2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003cb4:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <MX_GPIO_Init+0x138>)
 8003cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cbc:	f107 0314 	add.w	r3, r7, #20
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4818      	ldr	r0, [pc, #96]	; (8003d24 <MX_GPIO_Init+0x13c>)
 8003cc4:	f001 fbc6 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003cc8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cda:	f107 0314 	add.w	r3, r7, #20
 8003cde:	4619      	mov	r1, r3
 8003ce0:	480c      	ldr	r0, [pc, #48]	; (8003d14 <MX_GPIO_Init+0x12c>)
 8003ce2:	f001 fbb7 	bl	8005454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2101      	movs	r1, #1
 8003cea:	2006      	movs	r0, #6
 8003cec:	f001 fa51 	bl	8005192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003cf0:	2006      	movs	r0, #6
 8003cf2:	f001 fa6a 	bl	80051ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	2028      	movs	r0, #40	; 0x28
 8003cfc:	f001 fa49 	bl	8005192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d00:	2028      	movs	r0, #40	; 0x28
 8003d02:	f001 fa62 	bl	80051ca <HAL_NVIC_EnableIRQ>

}
 8003d06:	bf00      	nop
 8003d08:	3728      	adds	r7, #40	; 0x28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40020c00 	.word	0x40020c00
 8003d18:	10110000 	.word	0x10110000
 8003d1c:	40020000 	.word	0x40020000
 8003d20:	10310000 	.word	0x10310000
 8003d24:	40020400 	.word	0x40020400

08003d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <HAL_MspInit+0x58>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <HAL_MspInit+0x58>)
 8003d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <HAL_MspInit+0x58>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d56:	607b      	str	r3, [r7, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <HAL_MspInit+0x58>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <HAL_MspInit+0x58>)
 8003d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d68:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_MspInit+0x58>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003d76:	2200      	movs	r2, #0
 8003d78:	2100      	movs	r1, #0
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	f001 fa09 	bl	8005192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003d80:	2001      	movs	r0, #1
 8003d82:	f001 fa22 	bl	80051ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800

08003d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08a      	sub	sp, #40	; 0x28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 0314 	add.w	r3, r7, #20
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1b      	ldr	r2, [pc, #108]	; (8003e20 <HAL_ADC_MspInit+0x8c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d12f      	bne.n	8003e16 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <HAL_ADC_MspInit+0x90>)
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	4a19      	ldr	r2, [pc, #100]	; (8003e24 <HAL_ADC_MspInit+0x90>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003dc6:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <HAL_ADC_MspInit+0x90>)
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <HAL_ADC_MspInit+0x90>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <HAL_ADC_MspInit+0x90>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	6313      	str	r3, [r2, #48]	; 0x30
 8003de2:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <HAL_ADC_MspInit+0x90>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003dee:	2308      	movs	r3, #8
 8003df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003df2:	2303      	movs	r3, #3
 8003df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfa:	f107 0314 	add.w	r3, r7, #20
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4809      	ldr	r0, [pc, #36]	; (8003e28 <HAL_ADC_MspInit+0x94>)
 8003e02:	f001 fb27 	bl	8005454 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2101      	movs	r1, #1
 8003e0a:	2012      	movs	r0, #18
 8003e0c:	f001 f9c1 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003e10:	2012      	movs	r0, #18
 8003e12:	f001 f9da 	bl	80051ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e16:	bf00      	nop
 8003e18:	3728      	adds	r7, #40	; 0x28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40012000 	.word	0x40012000
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40020000 	.word	0x40020000

08003e2c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <HAL_DAC_MspInit+0x7c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d127      	bne.n	8003e9e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	4b16      	ldr	r3, [pc, #88]	; (8003eac <HAL_DAC_MspInit+0x80>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	4a15      	ldr	r2, [pc, #84]	; (8003eac <HAL_DAC_MspInit+0x80>)
 8003e58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5e:	4b13      	ldr	r3, [pc, #76]	; (8003eac <HAL_DAC_MspInit+0x80>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <HAL_DAC_MspInit+0x80>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	4a0e      	ldr	r2, [pc, #56]	; (8003eac <HAL_DAC_MspInit+0x80>)
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <HAL_DAC_MspInit+0x80>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e86:	2310      	movs	r3, #16
 8003e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e92:	f107 0314 	add.w	r3, r7, #20
 8003e96:	4619      	mov	r1, r3
 8003e98:	4805      	ldr	r0, [pc, #20]	; (8003eb0 <HAL_DAC_MspInit+0x84>)
 8003e9a:	f001 fadb 	bl	8005454 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003e9e:	bf00      	nop
 8003ea0:	3728      	adds	r7, #40	; 0x28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40007400 	.word	0x40007400
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40020000 	.word	0x40020000

08003eb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08a      	sub	sp, #40	; 0x28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ebc:	f107 0314 	add.w	r3, r7, #20
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	609a      	str	r2, [r3, #8]
 8003ec8:	60da      	str	r2, [r3, #12]
 8003eca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a31      	ldr	r2, [pc, #196]	; (8003f98 <HAL_I2C_MspInit+0xe4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d15b      	bne.n	8003f8e <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <HAL_I2C_MspInit+0xe8>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	4a2f      	ldr	r2, [pc, #188]	; (8003f9c <HAL_I2C_MspInit+0xe8>)
 8003ee0:	f043 0304 	orr.w	r3, r3, #4
 8003ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee6:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <HAL_I2C_MspInit+0xe8>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <HAL_I2C_MspInit+0xe8>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	4a28      	ldr	r2, [pc, #160]	; (8003f9c <HAL_I2C_MspInit+0xe8>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6313      	str	r3, [r2, #48]	; 0x30
 8003f02:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <HAL_I2C_MspInit+0xe8>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f14:	2312      	movs	r3, #18
 8003f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f20:	2304      	movs	r3, #4
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f24:	f107 0314 	add.w	r3, r7, #20
 8003f28:	4619      	mov	r1, r3
 8003f2a:	481d      	ldr	r0, [pc, #116]	; (8003fa0 <HAL_I2C_MspInit+0xec>)
 8003f2c:	f001 fa92 	bl	8005454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f36:	2312      	movs	r3, #18
 8003f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f42:	2304      	movs	r3, #4
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f46:	f107 0314 	add.w	r3, r7, #20
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4815      	ldr	r0, [pc, #84]	; (8003fa4 <HAL_I2C_MspInit+0xf0>)
 8003f4e:	f001 fa81 	bl	8005454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <HAL_I2C_MspInit+0xe8>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4a10      	ldr	r2, [pc, #64]	; (8003f9c <HAL_I2C_MspInit+0xe8>)
 8003f5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
 8003f62:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <HAL_I2C_MspInit+0xe8>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2100      	movs	r1, #0
 8003f72:	2048      	movs	r0, #72	; 0x48
 8003f74:	f001 f90d 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003f78:	2048      	movs	r0, #72	; 0x48
 8003f7a:	f001 f926 	bl	80051ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2100      	movs	r1, #0
 8003f82:	2049      	movs	r0, #73	; 0x49
 8003f84:	f001 f905 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003f88:	2049      	movs	r0, #73	; 0x49
 8003f8a:	f001 f91e 	bl	80051ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003f8e:	bf00      	nop
 8003f90:	3728      	adds	r7, #40	; 0x28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40005c00 	.word	0x40005c00
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40020800 	.word	0x40020800
 8003fa4:	40020000 	.word	0x40020000

08003fa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb0:	f107 0314 	add.w	r3, r7, #20
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	60da      	str	r2, [r3, #12]
 8003fbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a19      	ldr	r2, [pc, #100]	; (800402c <HAL_SPI_MspInit+0x84>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d12b      	bne.n	8004022 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	4b18      	ldr	r3, [pc, #96]	; (8004030 <HAL_SPI_MspInit+0x88>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	4a17      	ldr	r2, [pc, #92]	; (8004030 <HAL_SPI_MspInit+0x88>)
 8003fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <HAL_SPI_MspInit+0x88>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	4b11      	ldr	r3, [pc, #68]	; (8004030 <HAL_SPI_MspInit+0x88>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	4a10      	ldr	r2, [pc, #64]	; (8004030 <HAL_SPI_MspInit+0x88>)
 8003ff0:	f043 0302 	orr.w	r3, r3, #2
 8003ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff6:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <HAL_SPI_MspInit+0x88>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004002:	2338      	movs	r3, #56	; 0x38
 8004004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004006:	2302      	movs	r3, #2
 8004008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400e:	2303      	movs	r3, #3
 8004010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004012:	2306      	movs	r3, #6
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004016:	f107 0314 	add.w	r3, r7, #20
 800401a:	4619      	mov	r1, r3
 800401c:	4805      	ldr	r0, [pc, #20]	; (8004034 <HAL_SPI_MspInit+0x8c>)
 800401e:	f001 fa19 	bl	8005454 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004022:	bf00      	nop
 8004024:	3728      	adds	r7, #40	; 0x28
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40003c00 	.word	0x40003c00
 8004030:	40023800 	.word	0x40023800
 8004034:	40020400 	.word	0x40020400

08004038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a26      	ldr	r2, [pc, #152]	; (80040e0 <HAL_TIM_Base_MspInit+0xa8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d116      	bne.n	8004078 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <HAL_TIM_Base_MspInit+0xac>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	4a24      	ldr	r2, [pc, #144]	; (80040e4 <HAL_TIM_Base_MspInit+0xac>)
 8004054:	f043 0304 	orr.w	r3, r3, #4
 8004058:	6413      	str	r3, [r2, #64]	; 0x40
 800405a:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <HAL_TIM_Base_MspInit+0xac>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004066:	2200      	movs	r2, #0
 8004068:	2100      	movs	r1, #0
 800406a:	201e      	movs	r0, #30
 800406c:	f001 f891 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004070:	201e      	movs	r0, #30
 8004072:	f001 f8aa 	bl	80051ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004076:	e02e      	b.n	80040d6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <HAL_TIM_Base_MspInit+0xb0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d10e      	bne.n	80040a0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <HAL_TIM_Base_MspInit+0xac>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <HAL_TIM_Base_MspInit+0xac>)
 800408c:	f043 0310 	orr.w	r3, r3, #16
 8004090:	6413      	str	r3, [r2, #64]	; 0x40
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <HAL_TIM_Base_MspInit+0xac>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]
}
 800409e:	e01a      	b.n	80040d6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a11      	ldr	r2, [pc, #68]	; (80040ec <HAL_TIM_Base_MspInit+0xb4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d115      	bne.n	80040d6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <HAL_TIM_Base_MspInit+0xac>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <HAL_TIM_Base_MspInit+0xac>)
 80040b4:	f043 0320 	orr.w	r3, r3, #32
 80040b8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ba:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <HAL_TIM_Base_MspInit+0xac>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80040c6:	2200      	movs	r2, #0
 80040c8:	2100      	movs	r1, #0
 80040ca:	2037      	movs	r0, #55	; 0x37
 80040cc:	f001 f861 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80040d0:	2037      	movs	r0, #55	; 0x37
 80040d2:	f001 f87a 	bl	80051ca <HAL_NVIC_EnableIRQ>
}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40001000 	.word	0x40001000
 80040ec:	40001400 	.word	0x40001400

080040f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08c      	sub	sp, #48	; 0x30
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f8:	f107 031c 	add.w	r3, r7, #28
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a49      	ldr	r2, [pc, #292]	; (8004234 <HAL_UART_MspInit+0x144>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d152      	bne.n	80041b8 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	4b48      	ldr	r3, [pc, #288]	; (8004238 <HAL_UART_MspInit+0x148>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	4a47      	ldr	r2, [pc, #284]	; (8004238 <HAL_UART_MspInit+0x148>)
 800411c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004120:	6413      	str	r3, [r2, #64]	; 0x40
 8004122:	4b45      	ldr	r3, [pc, #276]	; (8004238 <HAL_UART_MspInit+0x148>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	61bb      	str	r3, [r7, #24]
 800412c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	4b41      	ldr	r3, [pc, #260]	; (8004238 <HAL_UART_MspInit+0x148>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4a40      	ldr	r2, [pc, #256]	; (8004238 <HAL_UART_MspInit+0x148>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	6313      	str	r3, [r2, #48]	; 0x30
 800413e:	4b3e      	ldr	r3, [pc, #248]	; (8004238 <HAL_UART_MspInit+0x148>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	4b3a      	ldr	r3, [pc, #232]	; (8004238 <HAL_UART_MspInit+0x148>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	4a39      	ldr	r2, [pc, #228]	; (8004238 <HAL_UART_MspInit+0x148>)
 8004154:	f043 0308 	orr.w	r3, r3, #8
 8004158:	6313      	str	r3, [r2, #48]	; 0x30
 800415a:	4b37      	ldr	r3, [pc, #220]	; (8004238 <HAL_UART_MspInit+0x148>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004166:	2304      	movs	r3, #4
 8004168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416a:	2302      	movs	r3, #2
 800416c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800416e:	2301      	movs	r3, #1
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004172:	2303      	movs	r3, #3
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004176:	2307      	movs	r3, #7
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800417a:	f107 031c 	add.w	r3, r7, #28
 800417e:	4619      	mov	r1, r3
 8004180:	482e      	ldr	r0, [pc, #184]	; (800423c <HAL_UART_MspInit+0x14c>)
 8004182:	f001 f967 	bl	8005454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004186:	2340      	movs	r3, #64	; 0x40
 8004188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418a:	2302      	movs	r3, #2
 800418c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800418e:	2301      	movs	r3, #1
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004192:	2303      	movs	r3, #3
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004196:	2307      	movs	r3, #7
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800419a:	f107 031c 	add.w	r3, r7, #28
 800419e:	4619      	mov	r1, r3
 80041a0:	4827      	ldr	r0, [pc, #156]	; (8004240 <HAL_UART_MspInit+0x150>)
 80041a2:	f001 f957 	bl	8005454 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80041a6:	2200      	movs	r2, #0
 80041a8:	2100      	movs	r1, #0
 80041aa:	2026      	movs	r0, #38	; 0x26
 80041ac:	f000 fff1 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041b0:	2026      	movs	r0, #38	; 0x26
 80041b2:	f001 f80a 	bl	80051ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80041b6:	e039      	b.n	800422c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a21      	ldr	r2, [pc, #132]	; (8004244 <HAL_UART_MspInit+0x154>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d134      	bne.n	800422c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	4b1c      	ldr	r3, [pc, #112]	; (8004238 <HAL_UART_MspInit+0x148>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <HAL_UART_MspInit+0x148>)
 80041cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d0:	6413      	str	r3, [r2, #64]	; 0x40
 80041d2:	4b19      	ldr	r3, [pc, #100]	; (8004238 <HAL_UART_MspInit+0x148>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	4b15      	ldr	r3, [pc, #84]	; (8004238 <HAL_UART_MspInit+0x148>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	4a14      	ldr	r2, [pc, #80]	; (8004238 <HAL_UART_MspInit+0x148>)
 80041e8:	f043 0304 	orr.w	r3, r3, #4
 80041ec:	6313      	str	r3, [r2, #48]	; 0x30
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_UART_MspInit+0x148>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80041fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80041fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004200:	2302      	movs	r3, #2
 8004202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004204:	2301      	movs	r3, #1
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004208:	2303      	movs	r3, #3
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800420c:	2307      	movs	r3, #7
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004210:	f107 031c 	add.w	r3, r7, #28
 8004214:	4619      	mov	r1, r3
 8004216:	480c      	ldr	r0, [pc, #48]	; (8004248 <HAL_UART_MspInit+0x158>)
 8004218:	f001 f91c 	bl	8005454 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800421c:	2200      	movs	r2, #0
 800421e:	2100      	movs	r1, #0
 8004220:	2027      	movs	r0, #39	; 0x27
 8004222:	f000 ffb6 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004226:	2027      	movs	r0, #39	; 0x27
 8004228:	f000 ffcf 	bl	80051ca <HAL_NVIC_EnableIRQ>
}
 800422c:	bf00      	nop
 800422e:	3730      	adds	r7, #48	; 0x30
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40004400 	.word	0x40004400
 8004238:	40023800 	.word	0x40023800
 800423c:	40020000 	.word	0x40020000
 8004240:	40020c00 	.word	0x40020c00
 8004244:	40004800 	.word	0x40004800
 8004248:	40020800 	.word	0x40020800

0800424c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004250:	bf00      	nop
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800425e:	e7fe      	b.n	800425e <HardFault_Handler+0x4>

08004260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004264:	e7fe      	b.n	8004264 <MemManage_Handler+0x4>

08004266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004266:	b480      	push	{r7}
 8004268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800426a:	e7fe      	b.n	800426a <BusFault_Handler+0x4>

0800426c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004270:	e7fe      	b.n	8004270 <UsageFault_Handler+0x4>

08004272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004272:	b480      	push	{r7}
 8004274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004284:	bf00      	nop
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800428e:	b480      	push	{r7}
 8004290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004292:	bf00      	nop
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 80042a0:	f7fc fe60 	bl	8000f64 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042a4:	f000 f9ba 	bl	800461c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042a8:	bf00      	nop
 80042aa:	bd80      	pop	{r7, pc}

080042ac <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80042b0:	f002 ffc8 	bl	8007244 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80042b4:	bf00      	nop
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80042bc:	2001      	movs	r0, #1
 80042be:	f001 faaf 	bl	8005820 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80042cc:	4802      	ldr	r0, [pc, #8]	; (80042d8 <ADC_IRQHandler+0x10>)
 80042ce:	f000 fafb 	bl	80048c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	2000077c 	.word	0x2000077c

080042dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80042e0:	4802      	ldr	r0, [pc, #8]	; (80042ec <TIM4_IRQHandler+0x10>)
 80042e2:	f004 f867 	bl	80083b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000368 	.word	0x20000368

080042f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042f4:	4802      	ldr	r0, [pc, #8]	; (8004300 <USART2_IRQHandler+0x10>)
 80042f6:	f004 fcbf 	bl	8008c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20008564 	.word	0x20008564

08004304 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004308:	4802      	ldr	r0, [pc, #8]	; (8004314 <USART3_IRQHandler+0x10>)
 800430a:	f004 fcb5 	bl	8008c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200003a8 	.word	0x200003a8

08004318 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800431c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004320:	f001 fa7e 	bl	8005820 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004324:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004328:	f001 fa7a 	bl	8005820 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800432c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004330:	f001 fa76 	bl	8005820 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004334:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004338:	f001 fa72 	bl	8005820 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800433c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004340:	f001 fa6e 	bl	8005820 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004344:	bf00      	nop
 8004346:	bd80      	pop	{r7, pc}

08004348 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800434c:	4802      	ldr	r0, [pc, #8]	; (8004358 <TIM7_IRQHandler+0x10>)
 800434e:	f004 f831 	bl	80083b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	200085a8 	.word	0x200085a8

0800435c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004360:	4802      	ldr	r0, [pc, #8]	; (800436c <I2C3_EV_IRQHandler+0x10>)
 8004362:	f001 fb9d 	bl	8005aa0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000314 	.word	0x20000314

08004370 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8004374:	4802      	ldr	r0, [pc, #8]	; (8004380 <I2C3_ER_IRQHandler+0x10>)
 8004376:	f001 fcf9 	bl	8005d6c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000314 	.word	0x20000314

08004384 <_read>:
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e00a      	b.n	80043ac <_read+0x28>
 8004396:	f3af 8000 	nop.w
 800439a:	4601      	mov	r1, r0
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	60ba      	str	r2, [r7, #8]
 80043a2:	b2ca      	uxtb	r2, r1
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	3301      	adds	r3, #1
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	dbf0      	blt.n	8004396 <_read+0x12>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <_write>:
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	e009      	b.n	80043e4 <_write+0x26>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	60ba      	str	r2, [r7, #8]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f3af 8000 	nop.w
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	3301      	adds	r3, #1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	dbf1      	blt.n	80043d0 <_write+0x12>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <_close>:
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <_fstat>:
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	6039      	str	r1, [r7, #0]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800441e:	605a      	str	r2, [r3, #4]
 8004420:	2300      	movs	r3, #0
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <_isatty>:
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	2301      	movs	r3, #1
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <_lseek>:
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	2300      	movs	r3, #0
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
	...

08004460 <_sbrk>:
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <_sbrk+0x50>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <_sbrk+0x16>
 8004470:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <_sbrk+0x50>)
 8004472:	4a10      	ldr	r2, [pc, #64]	; (80044b4 <_sbrk+0x54>)
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <_sbrk+0x50>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <_sbrk+0x50>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4413      	add	r3, r2
 8004484:	466a      	mov	r2, sp
 8004486:	4293      	cmp	r3, r2
 8004488:	d907      	bls.n	800449a <_sbrk+0x3a>
 800448a:	f005 f831 	bl	80094f0 <__errno>
 800448e:	4602      	mov	r2, r0
 8004490:	230c      	movs	r3, #12
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	f04f 33ff 	mov.w	r3, #4294967295
 8004498:	e006      	b.n	80044a8 <_sbrk+0x48>
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <_sbrk+0x50>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	4a03      	ldr	r2, [pc, #12]	; (80044b0 <_sbrk+0x50>)
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000304 	.word	0x20000304
 80044b4:	200085f0 	.word	0x200085f0

080044b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044bc:	4b16      	ldr	r3, [pc, #88]	; (8004518 <SystemInit+0x60>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	4a15      	ldr	r2, [pc, #84]	; (8004518 <SystemInit+0x60>)
 80044c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80044cc:	4b13      	ldr	r3, [pc, #76]	; (800451c <SystemInit+0x64>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a12      	ldr	r2, [pc, #72]	; (800451c <SystemInit+0x64>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80044d8:	4b10      	ldr	r3, [pc, #64]	; (800451c <SystemInit+0x64>)
 80044da:	2200      	movs	r2, #0
 80044dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <SystemInit+0x64>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a0e      	ldr	r2, [pc, #56]	; (800451c <SystemInit+0x64>)
 80044e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80044e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80044ee:	4b0b      	ldr	r3, [pc, #44]	; (800451c <SystemInit+0x64>)
 80044f0:	4a0b      	ldr	r2, [pc, #44]	; (8004520 <SystemInit+0x68>)
 80044f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80044f4:	4b09      	ldr	r3, [pc, #36]	; (800451c <SystemInit+0x64>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a08      	ldr	r2, [pc, #32]	; (800451c <SystemInit+0x64>)
 80044fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <SystemInit+0x64>)
 8004502:	2200      	movs	r2, #0
 8004504:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004506:	4b04      	ldr	r3, [pc, #16]	; (8004518 <SystemInit+0x60>)
 8004508:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800450c:	609a      	str	r2, [r3, #8]
#endif
}
 800450e:	bf00      	nop
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	e000ed00 	.word	0xe000ed00
 800451c:	40023800 	.word	0x40023800
 8004520:	24003010 	.word	0x24003010

08004524 <Reset_Handler>:
 8004524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800455c <LoopFillZerobss+0x14>
 8004528:	2100      	movs	r1, #0
 800452a:	e003      	b.n	8004534 <LoopCopyDataInit>

0800452c <CopyDataInit>:
 800452c:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <LoopFillZerobss+0x18>)
 800452e:	585b      	ldr	r3, [r3, r1]
 8004530:	5043      	str	r3, [r0, r1]
 8004532:	3104      	adds	r1, #4

08004534 <LoopCopyDataInit>:
 8004534:	480b      	ldr	r0, [pc, #44]	; (8004564 <LoopFillZerobss+0x1c>)
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <LoopFillZerobss+0x20>)
 8004538:	1842      	adds	r2, r0, r1
 800453a:	429a      	cmp	r2, r3
 800453c:	d3f6      	bcc.n	800452c <CopyDataInit>
 800453e:	4a0b      	ldr	r2, [pc, #44]	; (800456c <LoopFillZerobss+0x24>)
 8004540:	e002      	b.n	8004548 <LoopFillZerobss>

08004542 <FillZerobss>:
 8004542:	2300      	movs	r3, #0
 8004544:	f842 3b04 	str.w	r3, [r2], #4

08004548 <LoopFillZerobss>:
 8004548:	4b09      	ldr	r3, [pc, #36]	; (8004570 <LoopFillZerobss+0x28>)
 800454a:	429a      	cmp	r2, r3
 800454c:	d3f9      	bcc.n	8004542 <FillZerobss>
 800454e:	f7ff ffb3 	bl	80044b8 <SystemInit>
 8004552:	f004 ffd3 	bl	80094fc <__libc_init_array>
 8004556:	f7ff f883 	bl	8003660 <main>
 800455a:	4770      	bx	lr
 800455c:	20020000 	.word	0x20020000
 8004560:	08009efc 	.word	0x08009efc
 8004564:	20000000 	.word	0x20000000
 8004568:	20000084 	.word	0x20000084
 800456c:	20000084 	.word	0x20000084
 8004570:	200085f0 	.word	0x200085f0

08004574 <CAN1_RX0_IRQHandler>:
 8004574:	e7fe      	b.n	8004574 <CAN1_RX0_IRQHandler>
	...

08004578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800457c:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <HAL_Init+0x40>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0d      	ldr	r2, [pc, #52]	; (80045b8 <HAL_Init+0x40>)
 8004582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004586:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_Init+0x40>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a0a      	ldr	r2, [pc, #40]	; (80045b8 <HAL_Init+0x40>)
 800458e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004592:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004594:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <HAL_Init+0x40>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a07      	ldr	r2, [pc, #28]	; (80045b8 <HAL_Init+0x40>)
 800459a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045a0:	2003      	movs	r0, #3
 80045a2:	f000 fdeb 	bl	800517c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045a6:	2000      	movs	r0, #0
 80045a8:	f000 f808 	bl	80045bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045ac:	f7ff fbc4 	bl	8003d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40023c00 	.word	0x40023c00

080045bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045c4:	4b12      	ldr	r3, [pc, #72]	; (8004610 <HAL_InitTick+0x54>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_InitTick+0x58>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	4619      	mov	r1, r3
 80045ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80045d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fe03 	bl	80051e6 <HAL_SYSTICK_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e00e      	b.n	8004608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b0f      	cmp	r3, #15
 80045ee:	d80a      	bhi.n	8004606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045f0:	2200      	movs	r2, #0
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	f000 fdcb 	bl	8005192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045fc:	4a06      	ldr	r2, [pc, #24]	; (8004618 <HAL_InitTick+0x5c>)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	e000      	b.n	8004608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
}
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000014 	.word	0x20000014
 8004614:	2000001c 	.word	0x2000001c
 8004618:	20000018 	.word	0x20000018

0800461c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004620:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_IncTick+0x20>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_IncTick+0x24>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4413      	add	r3, r2
 800462c:	4a04      	ldr	r2, [pc, #16]	; (8004640 <HAL_IncTick+0x24>)
 800462e:	6013      	str	r3, [r2, #0]
}
 8004630:	bf00      	nop
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	2000001c 	.word	0x2000001c
 8004640:	200085e8 	.word	0x200085e8

08004644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  return uwTick;
 8004648:	4b03      	ldr	r3, [pc, #12]	; (8004658 <HAL_GetTick+0x14>)
 800464a:	681b      	ldr	r3, [r3, #0]
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	200085e8 	.word	0x200085e8

0800465c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004664:	f7ff ffee 	bl	8004644 <HAL_GetTick>
 8004668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d005      	beq.n	8004682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_Delay+0x40>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004682:	bf00      	nop
 8004684:	f7ff ffde 	bl	8004644 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	429a      	cmp	r2, r3
 8004692:	d8f7      	bhi.n	8004684 <HAL_Delay+0x28>
  {
  }
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	2000001c 	.word	0x2000001c

080046a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e033      	b.n	800471e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff fb68 	bl	8003d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d118      	bne.n	8004710 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046e6:	f023 0302 	bic.w	r3, r3, #2
 80046ea:	f043 0202 	orr.w	r2, r3, #2
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fb6c 	bl	8004dd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f023 0303 	bic.w	r3, r3, #3
 8004706:	f043 0201 	orr.w	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
 800470e:	e001      	b.n	8004714 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800471c:	7bfb      	ldrb	r3, [r7, #15]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_ADC_Start_IT+0x1a>
 800473e:	2302      	movs	r3, #2
 8004740:	e0b0      	b.n	80048a4 <HAL_ADC_Start_IT+0x17c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b01      	cmp	r3, #1
 8004756:	d018      	beq.n	800478a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004768:	4b51      	ldr	r3, [pc, #324]	; (80048b0 <HAL_ADC_Start_IT+0x188>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a51      	ldr	r2, [pc, #324]	; (80048b4 <HAL_ADC_Start_IT+0x18c>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	0c9a      	lsrs	r2, r3, #18
 8004774:	4613      	mov	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	4413      	add	r3, r2
 800477a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800477c:	e002      	b.n	8004784 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	3b01      	subs	r3, #1
 8004782:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f9      	bne.n	800477e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	f040 8084 	bne.w	80048a2 <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047a2:	f023 0301 	bic.w	r3, r3, #1
 80047a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d8:	d106      	bne.n	80047e8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	f023 0206 	bic.w	r2, r3, #6
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44
 80047e6:	e002      	b.n	80047ee <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047f6:	4b30      	ldr	r3, [pc, #192]	; (80048b8 <HAL_ADC_Start_IT+0x190>)
 80047f8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004802:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004812:	f043 0320 	orr.w	r3, r3, #32
 8004816:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	2b00      	cmp	r3, #0
 8004822:	d12a      	bne.n	800487a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a24      	ldr	r2, [pc, #144]	; (80048bc <HAL_ADC_Start_IT+0x194>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d015      	beq.n	800485a <HAL_ADC_Start_IT+0x132>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a23      	ldr	r2, [pc, #140]	; (80048c0 <HAL_ADC_Start_IT+0x198>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d105      	bne.n	8004844 <HAL_ADC_Start_IT+0x11c>
 8004838:	4b1f      	ldr	r3, [pc, #124]	; (80048b8 <HAL_ADC_Start_IT+0x190>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1e      	ldr	r2, [pc, #120]	; (80048c4 <HAL_ADC_Start_IT+0x19c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d129      	bne.n	80048a2 <HAL_ADC_Start_IT+0x17a>
 800484e:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <HAL_ADC_Start_IT+0x190>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	2b0f      	cmp	r3, #15
 8004858:	d823      	bhi.n	80048a2 <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d11c      	bne.n	80048a2 <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004876:	609a      	str	r2, [r3, #8]
 8004878:	e013      	b.n	80048a2 <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a0f      	ldr	r2, [pc, #60]	; (80048bc <HAL_ADC_Start_IT+0x194>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d10e      	bne.n	80048a2 <HAL_ADC_Start_IT+0x17a>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d107      	bne.n	80048a2 <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048a0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	20000014 	.word	0x20000014
 80048b4:	431bde83 	.word	0x431bde83
 80048b8:	40012300 	.word	0x40012300
 80048bc:	40012000 	.word	0x40012000
 80048c0:	40012100 	.word	0x40012100
 80048c4:	40012200 	.word	0x40012200

080048c8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	2300      	movs	r3, #0
 80048d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	bf0c      	ite	eq
 80048e6:	2301      	moveq	r3, #1
 80048e8:	2300      	movne	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d049      	beq.n	800499e <HAL_ADC_IRQHandler+0xd6>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d046      	beq.n	800499e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d12b      	bne.n	800498e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800493a:	2b00      	cmp	r3, #0
 800493c:	d127      	bne.n	800498e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004948:	2b00      	cmp	r3, #0
 800494a:	d006      	beq.n	800495a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004956:	2b00      	cmp	r3, #0
 8004958:	d119      	bne.n	800498e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0220 	bic.w	r2, r2, #32
 8004968:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d105      	bne.n	800498e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f043 0201 	orr.w	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fe fc54 	bl	800323c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0212 	mvn.w	r2, #18
 800499c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049be:	2b80      	cmp	r3, #128	; 0x80
 80049c0:	bf0c      	ite	eq
 80049c2:	2301      	moveq	r3, #1
 80049c4:	2300      	movne	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d057      	beq.n	8004a80 <HAL_ADC_IRQHandler+0x1b8>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d054      	beq.n	8004a80 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d105      	bne.n	80049ee <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d139      	bne.n	8004a70 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d006      	beq.n	8004a18 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d12b      	bne.n	8004a70 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d124      	bne.n	8004a70 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d11d      	bne.n	8004a70 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d119      	bne.n	8004a70 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a4a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d105      	bne.n	8004a70 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	f043 0201 	orr.w	r2, r3, #1
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 faa9 	bl	8004fc8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f06f 020c 	mvn.w	r2, #12
 8004a7e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	bf0c      	ite	eq
 8004a8e:	2301      	moveq	r3, #1
 8004a90:	2300      	movne	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d017      	beq.n	8004ae2 <HAL_ADC_IRQHandler+0x21a>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d014      	beq.n	8004ae2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d10d      	bne.n	8004ae2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f846 	bl	8004b64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0201 	mvn.w	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	bf0c      	ite	eq
 8004af0:	2301      	moveq	r3, #1
 8004af2:	2300      	movne	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b06:	bf0c      	ite	eq
 8004b08:	2301      	moveq	r3, #1
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d015      	beq.n	8004b42 <HAL_ADC_IRQHandler+0x27a>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d012      	beq.n	8004b42 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b20:	f043 0202 	orr.w	r2, r3, #2
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0220 	mvn.w	r2, #32
 8004b30:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f820 	bl	8004b78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0220 	mvn.w	r2, #32
 8004b40:	601a      	str	r2, [r3, #0]
  }
}
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_ADC_ConfigChannel+0x1c>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e105      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x228>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b09      	cmp	r3, #9
 8004bb6:	d925      	bls.n	8004c04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68d9      	ldr	r1, [r3, #12]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	4413      	add	r3, r2
 8004bcc:	3b1e      	subs	r3, #30
 8004bce:	2207      	movs	r2, #7
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	43da      	mvns	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	400a      	ands	r2, r1
 8004bdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68d9      	ldr	r1, [r3, #12]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	4618      	mov	r0, r3
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	4403      	add	r3, r0
 8004bf6:	3b1e      	subs	r3, #30
 8004bf8:	409a      	lsls	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	e022      	b.n	8004c4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6919      	ldr	r1, [r3, #16]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	4613      	mov	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	4413      	add	r3, r2
 8004c18:	2207      	movs	r2, #7
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43da      	mvns	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	400a      	ands	r2, r1
 8004c26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6919      	ldr	r1, [r3, #16]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	4618      	mov	r0, r3
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	4403      	add	r3, r0
 8004c40:	409a      	lsls	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b06      	cmp	r3, #6
 8004c50:	d824      	bhi.n	8004c9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	3b05      	subs	r3, #5
 8004c64:	221f      	movs	r2, #31
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43da      	mvns	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	400a      	ands	r2, r1
 8004c72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	4618      	mov	r0, r3
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3b05      	subs	r3, #5
 8004c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	635a      	str	r2, [r3, #52]	; 0x34
 8004c9a:	e04c      	b.n	8004d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	d824      	bhi.n	8004cee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3b23      	subs	r3, #35	; 0x23
 8004cb6:	221f      	movs	r2, #31
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43da      	mvns	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	400a      	ands	r2, r1
 8004cc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	3b23      	subs	r3, #35	; 0x23
 8004ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
 8004cec:	e023      	b.n	8004d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3b41      	subs	r3, #65	; 0x41
 8004d00:	221f      	movs	r2, #31
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	43da      	mvns	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	400a      	ands	r2, r1
 8004d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	3b41      	subs	r3, #65	; 0x41
 8004d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d36:	4b22      	ldr	r3, [pc, #136]	; (8004dc0 <HAL_ADC_ConfigChannel+0x234>)
 8004d38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a21      	ldr	r2, [pc, #132]	; (8004dc4 <HAL_ADC_ConfigChannel+0x238>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d109      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x1cc>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b12      	cmp	r3, #18
 8004d4a:	d105      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <HAL_ADC_ConfigChannel+0x238>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d123      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x21e>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d003      	beq.n	8004d72 <HAL_ADC_ConfigChannel+0x1e6>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b11      	cmp	r3, #17
 8004d70:	d11b      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	d111      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d86:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <HAL_ADC_ConfigChannel+0x23c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a10      	ldr	r2, [pc, #64]	; (8004dcc <HAL_ADC_ConfigChannel+0x240>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	0c9a      	lsrs	r2, r3, #18
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d9c:	e002      	b.n	8004da4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f9      	bne.n	8004d9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	40012300 	.word	0x40012300
 8004dc4:	40012000 	.word	0x40012000
 8004dc8:	20000014 	.word	0x20000014
 8004dcc:	431bde83 	.word	0x431bde83

08004dd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dd8:	4b79      	ldr	r3, [pc, #484]	; (8004fc0 <ADC_Init+0x1f0>)
 8004dda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	431a      	orrs	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6859      	ldr	r1, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	021a      	lsls	r2, r3, #8
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004e28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6859      	ldr	r1, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6899      	ldr	r1, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	4a58      	ldr	r2, [pc, #352]	; (8004fc4 <ADC_Init+0x1f4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d022      	beq.n	8004eae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6899      	ldr	r1, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6899      	ldr	r1, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
 8004eac:	e00f      	b.n	8004ece <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ebc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ecc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0202 	bic.w	r2, r2, #2
 8004edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6899      	ldr	r1, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	7e1b      	ldrb	r3, [r3, #24]
 8004ee8:	005a      	lsls	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01b      	beq.n	8004f34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004f1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6859      	ldr	r1, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	3b01      	subs	r3, #1
 8004f28:	035a      	lsls	r2, r3, #13
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	e007      	b.n	8004f44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	051a      	lsls	r2, r3, #20
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6899      	ldr	r1, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f86:	025a      	lsls	r2, r3, #9
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6899      	ldr	r1, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	029a      	lsls	r2, r3, #10
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	609a      	str	r2, [r3, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	40012300 	.word	0x40012300
 8004fc4:	0f000001 	.word	0x0f000001

08004fc8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fec:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <__NVIC_SetPriorityGrouping+0x44>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800500c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800500e:	4a04      	ldr	r2, [pc, #16]	; (8005020 <__NVIC_SetPriorityGrouping+0x44>)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	60d3      	str	r3, [r2, #12]
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	e000ed00 	.word	0xe000ed00

08005024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005028:	4b04      	ldr	r3, [pc, #16]	; (800503c <__NVIC_GetPriorityGrouping+0x18>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	0a1b      	lsrs	r3, r3, #8
 800502e:	f003 0307 	and.w	r3, r3, #7
}
 8005032:	4618      	mov	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	e000ed00 	.word	0xe000ed00

08005040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800504a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504e:	2b00      	cmp	r3, #0
 8005050:	db0b      	blt.n	800506a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	f003 021f 	and.w	r2, r3, #31
 8005058:	4907      	ldr	r1, [pc, #28]	; (8005078 <__NVIC_EnableIRQ+0x38>)
 800505a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	2001      	movs	r0, #1
 8005062:	fa00 f202 	lsl.w	r2, r0, r2
 8005066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	e000e100 	.word	0xe000e100

0800507c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	6039      	str	r1, [r7, #0]
 8005086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508c:	2b00      	cmp	r3, #0
 800508e:	db0a      	blt.n	80050a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	b2da      	uxtb	r2, r3
 8005094:	490c      	ldr	r1, [pc, #48]	; (80050c8 <__NVIC_SetPriority+0x4c>)
 8005096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509a:	0112      	lsls	r2, r2, #4
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	440b      	add	r3, r1
 80050a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050a4:	e00a      	b.n	80050bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	4908      	ldr	r1, [pc, #32]	; (80050cc <__NVIC_SetPriority+0x50>)
 80050ac:	79fb      	ldrb	r3, [r7, #7]
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	3b04      	subs	r3, #4
 80050b4:	0112      	lsls	r2, r2, #4
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	440b      	add	r3, r1
 80050ba:	761a      	strb	r2, [r3, #24]
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	e000e100 	.word	0xe000e100
 80050cc:	e000ed00 	.word	0xe000ed00

080050d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b089      	sub	sp, #36	; 0x24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f1c3 0307 	rsb	r3, r3, #7
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	bf28      	it	cs
 80050ee:	2304      	movcs	r3, #4
 80050f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	3304      	adds	r3, #4
 80050f6:	2b06      	cmp	r3, #6
 80050f8:	d902      	bls.n	8005100 <NVIC_EncodePriority+0x30>
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	3b03      	subs	r3, #3
 80050fe:	e000      	b.n	8005102 <NVIC_EncodePriority+0x32>
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005104:	f04f 32ff 	mov.w	r2, #4294967295
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	43da      	mvns	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	401a      	ands	r2, r3
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005118:	f04f 31ff 	mov.w	r1, #4294967295
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	fa01 f303 	lsl.w	r3, r1, r3
 8005122:	43d9      	mvns	r1, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005128:	4313      	orrs	r3, r2
         );
}
 800512a:	4618      	mov	r0, r3
 800512c:	3724      	adds	r7, #36	; 0x24
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
	...

08005138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3b01      	subs	r3, #1
 8005144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005148:	d301      	bcc.n	800514e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800514a:	2301      	movs	r3, #1
 800514c:	e00f      	b.n	800516e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800514e:	4a0a      	ldr	r2, [pc, #40]	; (8005178 <SysTick_Config+0x40>)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3b01      	subs	r3, #1
 8005154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005156:	210f      	movs	r1, #15
 8005158:	f04f 30ff 	mov.w	r0, #4294967295
 800515c:	f7ff ff8e 	bl	800507c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005160:	4b05      	ldr	r3, [pc, #20]	; (8005178 <SysTick_Config+0x40>)
 8005162:	2200      	movs	r2, #0
 8005164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005166:	4b04      	ldr	r3, [pc, #16]	; (8005178 <SysTick_Config+0x40>)
 8005168:	2207      	movs	r2, #7
 800516a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	e000e010 	.word	0xe000e010

0800517c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff ff29 	bl	8004fdc <__NVIC_SetPriorityGrouping>
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005192:	b580      	push	{r7, lr}
 8005194:	b086      	sub	sp, #24
 8005196:	af00      	add	r7, sp, #0
 8005198:	4603      	mov	r3, r0
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	607a      	str	r2, [r7, #4]
 800519e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051a4:	f7ff ff3e 	bl	8005024 <__NVIC_GetPriorityGrouping>
 80051a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	6978      	ldr	r0, [r7, #20]
 80051b0:	f7ff ff8e 	bl	80050d0 <NVIC_EncodePriority>
 80051b4:	4602      	mov	r2, r0
 80051b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ba:	4611      	mov	r1, r2
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff ff5d 	bl	800507c <__NVIC_SetPriority>
}
 80051c2:	bf00      	nop
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	4603      	mov	r3, r0
 80051d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff ff31 	bl	8005040 <__NVIC_EnableIRQ>
}
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff ffa2 	bl	8005138 <SysTick_Config>
 80051f4:	4603      	mov	r3, r0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80051fe:	b580      	push	{r7, lr}
 8005200:	b082      	sub	sp, #8
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e014      	b.n	800523a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	791b      	ldrb	r3, [r3, #4]
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d105      	bne.n	8005226 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fe fe03 	bl	8003e2c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	2300      	movs	r3, #0
 8005252:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	795b      	ldrb	r3, [r3, #5]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_DAC_Start+0x1e>
 800525c:	2302      	movs	r3, #2
 800525e:	e050      	b.n	8005302 <HAL_DAC_Start+0xc0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6819      	ldr	r1, [r3, #0]
 8005272:	2201      	movs	r2, #1
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	409a      	lsls	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d11a      	bne.n	80052bc <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800529c:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d127      	bne.n	80052f4 <HAL_DAC_Start+0xb2>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b38      	cmp	r3, #56	; 0x38
 80052a8:	d124      	bne.n	80052f4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	e01b      	b.n	80052f4 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052c6:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80052d2:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052da:	d10b      	bne.n	80052f4 <HAL_DAC_Start+0xb2>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80052e2:	d107      	bne.n	80052f4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0202 	orr.w	r2, r2, #2
 80052f2:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800530e:	b480      	push	{r7}
 8005310:	b087      	sub	sp, #28
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	2300      	movs	r3, #0
 8005320:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	795b      	ldrb	r3, [r3, #5]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_DAC_ConfigChannel+0x20>
 800532a:	2302      	movs	r3, #2
 800532c:	e036      	b.n	800539c <HAL_DAC_ConfigChannel+0x8e>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2202      	movs	r2, #2
 8005338:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005342:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	43db      	mvns	r3, r3
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4013      	ands	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6819      	ldr	r1, [r3, #0]
 800537c:	22c0      	movs	r2, #192	; 0xc0
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	43da      	mvns	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	400a      	ands	r2, r1
 800538c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2201      	movs	r2, #1
 8005392:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d105      	bne.n	80053d2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4413      	add	r3, r2
 80053cc:	3308      	adds	r3, #8
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	e004      	b.n	80053dc <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4413      	add	r3, r2
 80053d8:	3314      	adds	r3, #20
 80053da:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	461a      	mov	r2, r3
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d004      	beq.n	8005410 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2280      	movs	r2, #128	; 0x80
 800540a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e00c      	b.n	800542a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2205      	movs	r2, #5
 8005414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0201 	bic.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005444:	b2db      	uxtb	r3, r3
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005454:	b480      	push	{r7}
 8005456:	b089      	sub	sp, #36	; 0x24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005462:	2300      	movs	r3, #0
 8005464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005466:	2300      	movs	r3, #0
 8005468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	e16b      	b.n	8005748 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005470:	2201      	movs	r2, #1
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4013      	ands	r3, r2
 8005482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	429a      	cmp	r2, r3
 800548a:	f040 815a 	bne.w	8005742 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d003      	beq.n	800549e <HAL_GPIO_Init+0x4a>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b12      	cmp	r3, #18
 800549c:	d123      	bne.n	80054e6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	08da      	lsrs	r2, r3, #3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3208      	adds	r2, #8
 80054a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	220f      	movs	r2, #15
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	43db      	mvns	r3, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4013      	ands	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	08da      	lsrs	r2, r3, #3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3208      	adds	r2, #8
 80054e0:	69b9      	ldr	r1, [r7, #24]
 80054e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	2203      	movs	r2, #3
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	43db      	mvns	r3, r3
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4013      	ands	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f003 0203 	and.w	r2, r3, #3
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4313      	orrs	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d00b      	beq.n	800553a <HAL_GPIO_Init+0xe6>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d007      	beq.n	800553a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800552e:	2b11      	cmp	r3, #17
 8005530:	d003      	beq.n	800553a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b12      	cmp	r3, #18
 8005538:	d130      	bne.n	800559c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	2203      	movs	r2, #3
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	43db      	mvns	r3, r3
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	4013      	ands	r3, r2
 8005550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	4313      	orrs	r3, r2
 8005562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005570:	2201      	movs	r2, #1
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4013      	ands	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	f003 0201 	and.w	r2, r3, #1
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4313      	orrs	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	2203      	movs	r2, #3
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	43db      	mvns	r3, r3
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	4013      	ands	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80b4 	beq.w	8005742 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	4b5f      	ldr	r3, [pc, #380]	; (800575c <HAL_GPIO_Init+0x308>)
 80055e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e2:	4a5e      	ldr	r2, [pc, #376]	; (800575c <HAL_GPIO_Init+0x308>)
 80055e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055e8:	6453      	str	r3, [r2, #68]	; 0x44
 80055ea:	4b5c      	ldr	r3, [pc, #368]	; (800575c <HAL_GPIO_Init+0x308>)
 80055ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055f6:	4a5a      	ldr	r2, [pc, #360]	; (8005760 <HAL_GPIO_Init+0x30c>)
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	089b      	lsrs	r3, r3, #2
 80055fc:	3302      	adds	r3, #2
 80055fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	220f      	movs	r2, #15
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43db      	mvns	r3, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a51      	ldr	r2, [pc, #324]	; (8005764 <HAL_GPIO_Init+0x310>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d02b      	beq.n	800567a <HAL_GPIO_Init+0x226>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a50      	ldr	r2, [pc, #320]	; (8005768 <HAL_GPIO_Init+0x314>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d025      	beq.n	8005676 <HAL_GPIO_Init+0x222>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a4f      	ldr	r2, [pc, #316]	; (800576c <HAL_GPIO_Init+0x318>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01f      	beq.n	8005672 <HAL_GPIO_Init+0x21e>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a4e      	ldr	r2, [pc, #312]	; (8005770 <HAL_GPIO_Init+0x31c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d019      	beq.n	800566e <HAL_GPIO_Init+0x21a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a4d      	ldr	r2, [pc, #308]	; (8005774 <HAL_GPIO_Init+0x320>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d013      	beq.n	800566a <HAL_GPIO_Init+0x216>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a4c      	ldr	r2, [pc, #304]	; (8005778 <HAL_GPIO_Init+0x324>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00d      	beq.n	8005666 <HAL_GPIO_Init+0x212>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a4b      	ldr	r2, [pc, #300]	; (800577c <HAL_GPIO_Init+0x328>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d007      	beq.n	8005662 <HAL_GPIO_Init+0x20e>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a4a      	ldr	r2, [pc, #296]	; (8005780 <HAL_GPIO_Init+0x32c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d101      	bne.n	800565e <HAL_GPIO_Init+0x20a>
 800565a:	2307      	movs	r3, #7
 800565c:	e00e      	b.n	800567c <HAL_GPIO_Init+0x228>
 800565e:	2308      	movs	r3, #8
 8005660:	e00c      	b.n	800567c <HAL_GPIO_Init+0x228>
 8005662:	2306      	movs	r3, #6
 8005664:	e00a      	b.n	800567c <HAL_GPIO_Init+0x228>
 8005666:	2305      	movs	r3, #5
 8005668:	e008      	b.n	800567c <HAL_GPIO_Init+0x228>
 800566a:	2304      	movs	r3, #4
 800566c:	e006      	b.n	800567c <HAL_GPIO_Init+0x228>
 800566e:	2303      	movs	r3, #3
 8005670:	e004      	b.n	800567c <HAL_GPIO_Init+0x228>
 8005672:	2302      	movs	r3, #2
 8005674:	e002      	b.n	800567c <HAL_GPIO_Init+0x228>
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <HAL_GPIO_Init+0x228>
 800567a:	2300      	movs	r3, #0
 800567c:	69fa      	ldr	r2, [r7, #28]
 800567e:	f002 0203 	and.w	r2, r2, #3
 8005682:	0092      	lsls	r2, r2, #2
 8005684:	4093      	lsls	r3, r2
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4313      	orrs	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800568c:	4934      	ldr	r1, [pc, #208]	; (8005760 <HAL_GPIO_Init+0x30c>)
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	089b      	lsrs	r3, r3, #2
 8005692:	3302      	adds	r3, #2
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800569a:	4b3a      	ldr	r3, [pc, #232]	; (8005784 <HAL_GPIO_Init+0x330>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	43db      	mvns	r3, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4013      	ands	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056be:	4a31      	ldr	r2, [pc, #196]	; (8005784 <HAL_GPIO_Init+0x330>)
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056c4:	4b2f      	ldr	r3, [pc, #188]	; (8005784 <HAL_GPIO_Init+0x330>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4013      	ands	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056e8:	4a26      	ldr	r2, [pc, #152]	; (8005784 <HAL_GPIO_Init+0x330>)
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056ee:	4b25      	ldr	r3, [pc, #148]	; (8005784 <HAL_GPIO_Init+0x330>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	43db      	mvns	r3, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4013      	ands	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005712:	4a1c      	ldr	r2, [pc, #112]	; (8005784 <HAL_GPIO_Init+0x330>)
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005718:	4b1a      	ldr	r3, [pc, #104]	; (8005784 <HAL_GPIO_Init+0x330>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	43db      	mvns	r3, r3
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4013      	ands	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800573c:	4a11      	ldr	r2, [pc, #68]	; (8005784 <HAL_GPIO_Init+0x330>)
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	3301      	adds	r3, #1
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b0f      	cmp	r3, #15
 800574c:	f67f ae90 	bls.w	8005470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005750:	bf00      	nop
 8005752:	3724      	adds	r7, #36	; 0x24
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	40023800 	.word	0x40023800
 8005760:	40013800 	.word	0x40013800
 8005764:	40020000 	.word	0x40020000
 8005768:	40020400 	.word	0x40020400
 800576c:	40020800 	.word	0x40020800
 8005770:	40020c00 	.word	0x40020c00
 8005774:	40021000 	.word	0x40021000
 8005778:	40021400 	.word	0x40021400
 800577c:	40021800 	.word	0x40021800
 8005780:	40021c00 	.word	0x40021c00
 8005784:	40013c00 	.word	0x40013c00

08005788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	887b      	ldrh	r3, [r7, #2]
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057a0:	2301      	movs	r3, #1
 80057a2:	73fb      	strb	r3, [r7, #15]
 80057a4:	e001      	b.n	80057aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	807b      	strh	r3, [r7, #2]
 80057c4:	4613      	mov	r3, r2
 80057c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057c8:	787b      	ldrb	r3, [r7, #1]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057ce:	887a      	ldrh	r2, [r7, #2]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057d4:	e003      	b.n	80057de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057d6:	887b      	ldrh	r3, [r7, #2]
 80057d8:	041a      	lsls	r2, r3, #16
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	619a      	str	r2, [r3, #24]
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	460b      	mov	r3, r1
 80057f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695a      	ldr	r2, [r3, #20]
 80057fa:	887b      	ldrh	r3, [r7, #2]
 80057fc:	401a      	ands	r2, r3
 80057fe:	887b      	ldrh	r3, [r7, #2]
 8005800:	429a      	cmp	r2, r3
 8005802:	d104      	bne.n	800580e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005804:	887b      	ldrh	r3, [r7, #2]
 8005806:	041a      	lsls	r2, r3, #16
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800580c:	e002      	b.n	8005814 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800580e:	887a      	ldrh	r2, [r7, #2]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	619a      	str	r2, [r3, #24]
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800582a:	4b08      	ldr	r3, [pc, #32]	; (800584c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800582c:	695a      	ldr	r2, [r3, #20]
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d006      	beq.n	8005844 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005836:	4a05      	ldr	r2, [pc, #20]	; (800584c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005838:	88fb      	ldrh	r3, [r7, #6]
 800583a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	4618      	mov	r0, r3
 8005840:	f7fd fdaa 	bl	8003398 <HAL_GPIO_EXTI_Callback>
  }
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40013c00 	.word	0x40013c00

08005850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e10f      	b.n	8005a82 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fe fb1c 	bl	8003eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2224      	movs	r2, #36	; 0x24
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0201 	bic.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005894:	f002 f8f8 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 8005898:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	4a7b      	ldr	r2, [pc, #492]	; (8005a8c <HAL_I2C_Init+0x23c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d807      	bhi.n	80058b4 <HAL_I2C_Init+0x64>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4a7a      	ldr	r2, [pc, #488]	; (8005a90 <HAL_I2C_Init+0x240>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	bf94      	ite	ls
 80058ac:	2301      	movls	r3, #1
 80058ae:	2300      	movhi	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	e006      	b.n	80058c2 <HAL_I2C_Init+0x72>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4a77      	ldr	r2, [pc, #476]	; (8005a94 <HAL_I2C_Init+0x244>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	bf94      	ite	ls
 80058bc:	2301      	movls	r3, #1
 80058be:	2300      	movhi	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e0db      	b.n	8005a82 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4a72      	ldr	r2, [pc, #456]	; (8005a98 <HAL_I2C_Init+0x248>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	0c9b      	lsrs	r3, r3, #18
 80058d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	4a64      	ldr	r2, [pc, #400]	; (8005a8c <HAL_I2C_Init+0x23c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d802      	bhi.n	8005904 <HAL_I2C_Init+0xb4>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	3301      	adds	r3, #1
 8005902:	e009      	b.n	8005918 <HAL_I2C_Init+0xc8>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800590a:	fb02 f303 	mul.w	r3, r2, r3
 800590e:	4a63      	ldr	r2, [pc, #396]	; (8005a9c <HAL_I2C_Init+0x24c>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	099b      	lsrs	r3, r3, #6
 8005916:	3301      	adds	r3, #1
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	430b      	orrs	r3, r1
 800591e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800592a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	4956      	ldr	r1, [pc, #344]	; (8005a8c <HAL_I2C_Init+0x23c>)
 8005934:	428b      	cmp	r3, r1
 8005936:	d80d      	bhi.n	8005954 <HAL_I2C_Init+0x104>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	1e59      	subs	r1, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	fbb1 f3f3 	udiv	r3, r1, r3
 8005946:	3301      	adds	r3, #1
 8005948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594c:	2b04      	cmp	r3, #4
 800594e:	bf38      	it	cc
 8005950:	2304      	movcc	r3, #4
 8005952:	e04f      	b.n	80059f4 <HAL_I2C_Init+0x1a4>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d111      	bne.n	8005980 <HAL_I2C_Init+0x130>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	1e58      	subs	r0, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6859      	ldr	r1, [r3, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	440b      	add	r3, r1
 800596a:	fbb0 f3f3 	udiv	r3, r0, r3
 800596e:	3301      	adds	r3, #1
 8005970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005974:	2b00      	cmp	r3, #0
 8005976:	bf0c      	ite	eq
 8005978:	2301      	moveq	r3, #1
 800597a:	2300      	movne	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	e012      	b.n	80059a6 <HAL_I2C_Init+0x156>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	1e58      	subs	r0, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6859      	ldr	r1, [r3, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	0099      	lsls	r1, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	fbb0 f3f3 	udiv	r3, r0, r3
 8005996:	3301      	adds	r3, #1
 8005998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800599c:	2b00      	cmp	r3, #0
 800599e:	bf0c      	ite	eq
 80059a0:	2301      	moveq	r3, #1
 80059a2:	2300      	movne	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <HAL_I2C_Init+0x15e>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e022      	b.n	80059f4 <HAL_I2C_Init+0x1a4>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10e      	bne.n	80059d4 <HAL_I2C_Init+0x184>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	1e58      	subs	r0, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6859      	ldr	r1, [r3, #4]
 80059be:	460b      	mov	r3, r1
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	440b      	add	r3, r1
 80059c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80059c8:	3301      	adds	r3, #1
 80059ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d2:	e00f      	b.n	80059f4 <HAL_I2C_Init+0x1a4>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	1e58      	subs	r0, r3, #1
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6859      	ldr	r1, [r3, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	0099      	lsls	r1, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ea:	3301      	adds	r3, #1
 80059ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	6809      	ldr	r1, [r1, #0]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69da      	ldr	r2, [r3, #28]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6911      	ldr	r1, [r2, #16]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	68d2      	ldr	r2, [r2, #12]
 8005a2e:	4311      	orrs	r1, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695a      	ldr	r2, [r3, #20]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	000186a0 	.word	0x000186a0
 8005a90:	001e847f 	.word	0x001e847f
 8005a94:	003d08ff 	.word	0x003d08ff
 8005a98:	431bde83 	.word	0x431bde83
 8005a9c:	10624dd3 	.word	0x10624dd3

08005aa0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ac0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	d003      	beq.n	8005ad8 <HAL_I2C_EV_IRQHandler+0x38>
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	f040 80b6 	bne.w	8005c44 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10d      	bne.n	8005b0e <HAL_I2C_EV_IRQHandler+0x6e>
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005af8:	d003      	beq.n	8005b02 <HAL_I2C_EV_IRQHandler+0x62>
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b00:	d101      	bne.n	8005b06 <HAL_I2C_EV_IRQHandler+0x66>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <HAL_I2C_EV_IRQHandler+0x68>
 8005b06:	2300      	movs	r3, #0
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	f000 8127 	beq.w	8005d5c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00c      	beq.n	8005b32 <HAL_I2C_EV_IRQHandler+0x92>
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	0a5b      	lsrs	r3, r3, #9
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d006      	beq.n	8005b32 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f001 fb72 	bl	800720e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fd05 	bl	800653a <I2C_Master_SB>
 8005b30:	e087      	b.n	8005c42 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	08db      	lsrs	r3, r3, #3
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d009      	beq.n	8005b52 <HAL_I2C_EV_IRQHandler+0xb2>
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	0a5b      	lsrs	r3, r3, #9
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fd7b 	bl	8006646 <I2C_Master_ADD10>
 8005b50:	e077      	b.n	8005c42 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d009      	beq.n	8005b72 <HAL_I2C_EV_IRQHandler+0xd2>
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	0a5b      	lsrs	r3, r3, #9
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fd95 	bl	800669a <I2C_Master_ADDR>
 8005b70:	e067      	b.n	8005c42 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	089b      	lsrs	r3, r3, #2
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d030      	beq.n	8005be0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b8c:	f000 80e8 	beq.w	8005d60 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	09db      	lsrs	r3, r3, #7
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00f      	beq.n	8005bbc <HAL_I2C_EV_IRQHandler+0x11c>
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	0a9b      	lsrs	r3, r3, #10
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d009      	beq.n	8005bbc <HAL_I2C_EV_IRQHandler+0x11c>
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	089b      	lsrs	r3, r3, #2
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d103      	bne.n	8005bbc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f9e6 	bl	8005f86 <I2C_MasterTransmit_TXE>
 8005bba:	e042      	b.n	8005c42 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	089b      	lsrs	r3, r3, #2
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80cb 	beq.w	8005d60 <HAL_I2C_EV_IRQHandler+0x2c0>
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	0a5b      	lsrs	r3, r3, #9
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 80c4 	beq.w	8005d60 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 facc 	bl	8006176 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bde:	e0bf      	b.n	8005d60 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bee:	f000 80b7 	beq.w	8005d60 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	099b      	lsrs	r3, r3, #6
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00f      	beq.n	8005c1e <HAL_I2C_EV_IRQHandler+0x17e>
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	0a9b      	lsrs	r3, r3, #10
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d009      	beq.n	8005c1e <HAL_I2C_EV_IRQHandler+0x17e>
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	089b      	lsrs	r3, r3, #2
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fb23 	bl	8006262 <I2C_MasterReceive_RXNE>
 8005c1c:	e011      	b.n	8005c42 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	089b      	lsrs	r3, r3, #2
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 809a 	beq.w	8005d60 <HAL_I2C_EV_IRQHandler+0x2c0>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	0a5b      	lsrs	r3, r3, #9
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8093 	beq.w	8005d60 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fb93 	bl	8006366 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c40:	e08e      	b.n	8005d60 <HAL_I2C_EV_IRQHandler+0x2c0>
 8005c42:	e08d      	b.n	8005d60 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d004      	beq.n	8005c56 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	61fb      	str	r3, [r7, #28]
 8005c54:	e007      	b.n	8005c66 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	085b      	lsrs	r3, r3, #1
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d012      	beq.n	8005c98 <HAL_I2C_EV_IRQHandler+0x1f8>
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	0a5b      	lsrs	r3, r3, #9
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00c      	beq.n	8005c98 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005c8e:	69b9      	ldr	r1, [r7, #24]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 ff51 	bl	8006b38 <I2C_Slave_ADDR>
 8005c96:	e066      	b.n	8005d66 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	091b      	lsrs	r3, r3, #4
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d009      	beq.n	8005cb8 <HAL_I2C_EV_IRQHandler+0x218>
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	0a5b      	lsrs	r3, r3, #9
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 ff85 	bl	8006bc0 <I2C_Slave_STOPF>
 8005cb6:	e056      	b.n	8005d66 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	2b21      	cmp	r3, #33	; 0x21
 8005cbc:	d002      	beq.n	8005cc4 <HAL_I2C_EV_IRQHandler+0x224>
 8005cbe:	7bbb      	ldrb	r3, [r7, #14]
 8005cc0:	2b29      	cmp	r3, #41	; 0x29
 8005cc2:	d125      	bne.n	8005d10 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	09db      	lsrs	r3, r3, #7
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00f      	beq.n	8005cf0 <HAL_I2C_EV_IRQHandler+0x250>
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	0a9b      	lsrs	r3, r3, #10
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <HAL_I2C_EV_IRQHandler+0x250>
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	089b      	lsrs	r3, r3, #2
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d103      	bne.n	8005cf0 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fe67 	bl	80069bc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cee:	e039      	b.n	8005d64 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	089b      	lsrs	r3, r3, #2
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d033      	beq.n	8005d64 <HAL_I2C_EV_IRQHandler+0x2c4>
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	0a5b      	lsrs	r3, r3, #9
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d02d      	beq.n	8005d64 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fe94 	bl	8006a36 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d0e:	e029      	b.n	8005d64 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	099b      	lsrs	r3, r3, #6
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00f      	beq.n	8005d3c <HAL_I2C_EV_IRQHandler+0x29c>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	0a9b      	lsrs	r3, r3, #10
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d009      	beq.n	8005d3c <HAL_I2C_EV_IRQHandler+0x29c>
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	089b      	lsrs	r3, r3, #2
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d103      	bne.n	8005d3c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fe9f 	bl	8006a78 <I2C_SlaveReceive_RXNE>
 8005d3a:	e014      	b.n	8005d66 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	089b      	lsrs	r3, r3, #2
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00e      	beq.n	8005d66 <HAL_I2C_EV_IRQHandler+0x2c6>
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	0a5b      	lsrs	r3, r3, #9
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d008      	beq.n	8005d66 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fecd 	bl	8006af4 <I2C_SlaveReceive_BTF>
 8005d5a:	e004      	b.n	8005d66 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8005d5c:	bf00      	nop
 8005d5e:	e002      	b.n	8005d66 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d60:	bf00      	nop
 8005d62:	e000      	b.n	8005d66 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d64:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005d66:	3720      	adds	r7, #32
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	; 0x28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	0a1b      	lsrs	r3, r3, #8
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00e      	beq.n	8005db2 <HAL_I2C_ER_IRQHandler+0x46>
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	0a1b      	lsrs	r3, r3, #8
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d008      	beq.n	8005db2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	f043 0301 	orr.w	r3, r3, #1
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005db0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	0a5b      	lsrs	r3, r3, #9
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00e      	beq.n	8005ddc <HAL_I2C_ER_IRQHandler+0x70>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	0a1b      	lsrs	r3, r3, #8
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d008      	beq.n	8005ddc <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	f043 0302 	orr.w	r3, r3, #2
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005dda:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	0a9b      	lsrs	r3, r3, #10
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d041      	beq.n	8005e6c <HAL_I2C_ER_IRQHandler+0x100>
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	0a1b      	lsrs	r3, r3, #8
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d03b      	beq.n	8005e6c <HAL_I2C_ER_IRQHandler+0x100>
  {
    tmp1 = hi2c->Mode;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dfa:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0a:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005e12:	7efb      	ldrb	r3, [r7, #27]
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d112      	bne.n	8005e3e <HAL_I2C_ER_IRQHandler+0xd2>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10f      	bne.n	8005e3e <HAL_I2C_ER_IRQHandler+0xd2>
 8005e1e:	7cfb      	ldrb	r3, [r7, #19]
 8005e20:	2b21      	cmp	r3, #33	; 0x21
 8005e22:	d008      	beq.n	8005e36 <HAL_I2C_ER_IRQHandler+0xca>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005e24:	7cfb      	ldrb	r3, [r7, #19]
 8005e26:	2b29      	cmp	r3, #41	; 0x29
 8005e28:	d005      	beq.n	8005e36 <HAL_I2C_ER_IRQHandler+0xca>
 8005e2a:	7cfb      	ldrb	r3, [r7, #19]
 8005e2c:	2b28      	cmp	r3, #40	; 0x28
 8005e2e:	d106      	bne.n	8005e3e <HAL_I2C_ER_IRQHandler+0xd2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b21      	cmp	r3, #33	; 0x21
 8005e34:	d103      	bne.n	8005e3e <HAL_I2C_ER_IRQHandler+0xd2>
    {
      I2C_Slave_AF(hi2c);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fff2 	bl	8006e20 <I2C_Slave_AF>
 8005e3c:	e016      	b.n	8005e6c <HAL_I2C_ER_IRQHandler+0x100>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e46:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	f043 0304 	orr.w	r3, r3, #4
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b10      	cmp	r3, #16
 8005e5a:	d107      	bne.n	8005e6c <HAL_I2C_ER_IRQHandler+0x100>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	0adb      	lsrs	r3, r3, #11
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00e      	beq.n	8005e96 <HAL_I2C_ER_IRQHandler+0x12a>
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	0a1b      	lsrs	r3, r3, #8
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <HAL_I2C_ER_IRQHandler+0x12a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	f043 0308 	orr.w	r3, r3, #8
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005e94:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_I2C_ER_IRQHandler+0x142>
  {
    hi2c->ErrorCode |= error;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f001 f829 	bl	8006f00 <I2C_ITError>
  }
}
 8005eae:	bf00      	nop
 8005eb0:	3728      	adds	r7, #40	; 0x28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	70fb      	strb	r3, [r7, #3]
 8005f12:	4613      	mov	r3, r2
 8005f14:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005f66:	bf00      	nop
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b084      	sub	sp, #16
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f9c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d150      	bne.n	800604e <I2C_MasterTransmit_TXE+0xc8>
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	2b21      	cmp	r3, #33	; 0x21
 8005fb0:	d14d      	bne.n	800604e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d01d      	beq.n	8005ff4 <I2C_MasterTransmit_TXE+0x6e>
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d01a      	beq.n	8005ff4 <I2C_MasterTransmit_TXE+0x6e>
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fc4:	d016      	beq.n	8005ff4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fd4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2211      	movs	r2, #17
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff ff62 	bl	8005eb6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ff2:	e0bc      	b.n	800616e <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006002:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006012:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b40      	cmp	r3, #64	; 0x40
 800602c:	d107      	bne.n	800603e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff ff7d 	bl	8005f36 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800603c:	e097      	b.n	800616e <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff ff35 	bl	8005eb6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800604c:	e08f      	b.n	800616e <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	2b21      	cmp	r3, #33	; 0x21
 8006052:	d007      	beq.n	8006064 <I2C_MasterTransmit_TXE+0xde>
 8006054:	7bbb      	ldrb	r3, [r7, #14]
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	f040 8089 	bne.w	800616e <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b22      	cmp	r3, #34	; 0x22
 8006060:	f040 8085 	bne.w	800616e <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d108      	bne.n	8006080 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800607c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800607e:	e076      	b.n	800616e <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d15d      	bne.n	8006148 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006090:	2b00      	cmp	r3, #0
 8006092:	d11d      	bne.n	80060d0 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006098:	2b01      	cmp	r3, #1
 800609a:	d10b      	bne.n	80060b4 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ac:	1c9a      	adds	r2, r3, #2
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80060b2:	e05c      	b.n	800616e <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	121b      	asrs	r3, r3, #8
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80060ce:	e04e      	b.n	800616e <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d10b      	bne.n	80060f0 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80060ee:	e03e      	b.n	800616e <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d13a      	bne.n	800616e <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b22      	cmp	r3, #34	; 0x22
 8006102:	d108      	bne.n	8006116 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006112:	601a      	str	r2, [r3, #0]
}
 8006114:	e02b      	b.n	800616e <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b21      	cmp	r3, #33	; 0x21
 8006120:	d125      	bne.n	800616e <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	781a      	ldrb	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006146:	e012      	b.n	800616e <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	781a      	ldrb	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800616c:	e7ff      	b.n	800616e <I2C_MasterTransmit_TXE+0x1e8>
 800616e:	bf00      	nop
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b21      	cmp	r3, #33	; 0x21
 800618e:	d164      	bne.n	800625a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d012      	beq.n	80061c0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 80061be:	e04c      	b.n	800625a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d01d      	beq.n	8006202 <I2C_MasterTransmit_BTF+0x8c>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d01a      	beq.n	8006202 <I2C_MasterTransmit_BTF+0x8c>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061d2:	d016      	beq.n	8006202 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061e2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2211      	movs	r2, #17
 80061e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7ff fe5b 	bl	8005eb6 <HAL_I2C_MasterTxCpltCallback>
}
 8006200:	e02b      	b.n	800625a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006210:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006220:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b40      	cmp	r3, #64	; 0x40
 800623a:	d107      	bne.n	800624c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff fe76 	bl	8005f36 <HAL_I2C_MemTxCpltCallback>
}
 800624a:	e006      	b.n	800625a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff fe2e 	bl	8005eb6 <HAL_I2C_MasterTxCpltCallback>
}
 800625a:	bf00      	nop
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b22      	cmp	r3, #34	; 0x22
 8006274:	d173      	bne.n	800635e <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627a:	b29b      	uxth	r3, r3
 800627c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b03      	cmp	r3, #3
 8006282:	d920      	bls.n	80062c6 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691a      	ldr	r2, [r3, #16]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d154      	bne.n	800635e <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80062c4:	e04b      	b.n	800635e <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d047      	beq.n	800635e <I2C_MasterReceive_RXNE+0xfc>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d002      	beq.n	80062da <I2C_MasterReceive_RXNE+0x78>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d141      	bne.n	800635e <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062f8:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2220      	movs	r2, #32
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b40      	cmp	r3, #64	; 0x40
 8006332:	d10a      	bne.n	800634a <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fe01 	bl	8005f4a <HAL_I2C_MemRxCpltCallback>
}
 8006348:	e009      	b.n	800635e <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2212      	movs	r2, #18
 8006356:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff fdb6 	bl	8005eca <HAL_I2C_MasterRxCpltCallback>
}
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006372:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b04      	cmp	r3, #4
 800637c:	d11b      	bne.n	80063b6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800638c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80063b4:	e0bd      	b.n	8006532 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d129      	bne.n	8006414 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d00a      	beq.n	80063ec <I2C_MasterReceive_BTF+0x86>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d007      	beq.n	80063ec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006408:	b29b      	uxth	r3, r3
 800640a:	3b01      	subs	r3, #1
 800640c:	b29a      	uxth	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006412:	e08e      	b.n	8006532 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d176      	bne.n	800650c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d002      	beq.n	800642a <I2C_MasterReceive_BTF+0xc4>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b10      	cmp	r3, #16
 8006428:	d108      	bne.n	800643c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	e019      	b.n	8006470 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b04      	cmp	r3, #4
 8006440:	d002      	beq.n	8006448 <I2C_MasterReceive_BTF+0xe2>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d108      	bne.n	800645a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	e00a      	b.n	8006470 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b10      	cmp	r3, #16
 800645e:	d007      	beq.n	8006470 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800646e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80064ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b40      	cmp	r3, #64	; 0x40
 80064de:	d10a      	bne.n	80064f6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7ff fd2b 	bl	8005f4a <HAL_I2C_MemRxCpltCallback>
}
 80064f4:	e01d      	b.n	8006532 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2212      	movs	r2, #18
 8006502:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff fce0 	bl	8005eca <HAL_I2C_MasterRxCpltCallback>
}
 800650a:	e012      	b.n	8006532 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006532:	bf00      	nop
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b40      	cmp	r3, #64	; 0x40
 800654c:	d117      	bne.n	800657e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006552:	2b00      	cmp	r3, #0
 8006554:	d109      	bne.n	800656a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655a:	b2db      	uxtb	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006566:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006568:	e067      	b.n	800663a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	b2da      	uxtb	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	611a      	str	r2, [r3, #16]
}
 800657c:	e05d      	b.n	800663a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006586:	d133      	bne.n	80065f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b21      	cmp	r3, #33	; 0x21
 8006592:	d109      	bne.n	80065a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006598:	b2db      	uxtb	r3, r3
 800659a:	461a      	mov	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065a4:	611a      	str	r2, [r3, #16]
 80065a6:	e008      	b.n	80065ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d103      	bne.n	80065ca <I2C_Master_SB+0x90>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d037      	beq.n	800663a <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d104      	bne.n	80065de <I2C_Master_SB+0xa4>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d02d      	beq.n	800663a <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ec:	605a      	str	r2, [r3, #4]
}
 80065ee:	e024      	b.n	800663a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10e      	bne.n	8006616 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	11db      	asrs	r3, r3, #7
 8006600:	b2db      	uxtb	r3, r3
 8006602:	f003 0306 	and.w	r3, r3, #6
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f063 030f 	orn	r3, r3, #15
 800660c:	b2da      	uxtb	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	611a      	str	r2, [r3, #16]
}
 8006614:	e011      	b.n	800663a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661a:	2b01      	cmp	r3, #1
 800661c:	d10d      	bne.n	800663a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006622:	b29b      	uxth	r3, r3
 8006624:	11db      	asrs	r3, r3, #7
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f003 0306 	and.w	r3, r3, #6
 800662c:	b2db      	uxtb	r3, r3
 800662e:	f063 030e 	orn	r3, r3, #14
 8006632:	b2da      	uxtb	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	611a      	str	r2, [r3, #16]
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006652:	b2da      	uxtb	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665e:	2b00      	cmp	r3, #0
 8006660:	d103      	bne.n	800666a <I2C_Master_ADD10+0x24>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006666:	2b00      	cmp	r3, #0
 8006668:	d011      	beq.n	800668e <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d104      	bne.n	800667e <I2C_Master_ADD10+0x38>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800668c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800669a:	b480      	push	{r7}
 800669c:	b091      	sub	sp, #68	; 0x44
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b22      	cmp	r3, #34	; 0x22
 80066c2:	f040 8169 	bne.w	8006998 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10f      	bne.n	80066ee <I2C_Master_ADDR+0x54>
 80066ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066d2:	2b40      	cmp	r3, #64	; 0x40
 80066d4:	d10b      	bne.n	80066ee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066d6:	2300      	movs	r3, #0
 80066d8:	633b      	str	r3, [r7, #48]	; 0x30
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	633b      	str	r3, [r7, #48]	; 0x30
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	633b      	str	r3, [r7, #48]	; 0x30
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	e160      	b.n	80069b0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d11d      	bne.n	8006732 <I2C_Master_ADDR+0x98>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066fe:	d118      	bne.n	8006732 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006700:	2300      	movs	r3, #0
 8006702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006724:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	651a      	str	r2, [r3, #80]	; 0x50
 8006730:	e13e      	b.n	80069b0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006736:	b29b      	uxth	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d113      	bne.n	8006764 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800673c:	2300      	movs	r3, #0
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	62bb      	str	r3, [r7, #40]	; 0x28
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	e115      	b.n	8006990 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b01      	cmp	r3, #1
 800676c:	f040 808a 	bne.w	8006884 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006772:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006776:	d137      	bne.n	80067e8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006786:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006796:	d113      	bne.n	80067c0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a8:	2300      	movs	r3, #0
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	e0e7      	b.n	8006990 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c0:	2300      	movs	r3, #0
 80067c2:	623b      	str	r3, [r7, #32]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	623b      	str	r3, [r7, #32]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	623b      	str	r3, [r7, #32]
 80067d4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	e0d3      	b.n	8006990 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d02e      	beq.n	800684c <I2C_Master_ADDR+0x1b2>
 80067ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d02b      	beq.n	800684c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80067f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f6:	2b12      	cmp	r3, #18
 80067f8:	d102      	bne.n	8006800 <I2C_Master_ADDR+0x166>
 80067fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d125      	bne.n	800684c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006802:	2b04      	cmp	r3, #4
 8006804:	d00e      	beq.n	8006824 <I2C_Master_ADDR+0x18a>
 8006806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006808:	2b02      	cmp	r3, #2
 800680a:	d00b      	beq.n	8006824 <I2C_Master_ADDR+0x18a>
 800680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680e:	2b10      	cmp	r3, #16
 8006810:	d008      	beq.n	8006824 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	e007      	b.n	8006834 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006832:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006834:	2300      	movs	r3, #0
 8006836:	61fb      	str	r3, [r7, #28]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	61fb      	str	r3, [r7, #28]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	61fb      	str	r3, [r7, #28]
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	e0a1      	b.n	8006990 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800685a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	61bb      	str	r3, [r7, #24]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	61bb      	str	r3, [r7, #24]
 8006870:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	e085      	b.n	8006990 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d14d      	bne.n	800692a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	2b04      	cmp	r3, #4
 8006892:	d016      	beq.n	80068c2 <I2C_Master_ADDR+0x228>
 8006894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006896:	2b02      	cmp	r3, #2
 8006898:	d013      	beq.n	80068c2 <I2C_Master_ADDR+0x228>
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	2b10      	cmp	r3, #16
 800689e:	d010      	beq.n	80068c2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	e007      	b.n	80068d2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068d0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e0:	d117      	bne.n	8006912 <I2C_Master_ADDR+0x278>
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068e8:	d00b      	beq.n	8006902 <I2C_Master_ADDR+0x268>
 80068ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d008      	beq.n	8006902 <I2C_Master_ADDR+0x268>
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	2b08      	cmp	r3, #8
 80068f4:	d005      	beq.n	8006902 <I2C_Master_ADDR+0x268>
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	2b10      	cmp	r3, #16
 80068fa:	d002      	beq.n	8006902 <I2C_Master_ADDR+0x268>
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	2b20      	cmp	r3, #32
 8006900:	d107      	bne.n	8006912 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006910:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	e032      	b.n	8006990 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006938:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006948:	d117      	bne.n	800697a <I2C_Master_ADDR+0x2e0>
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006950:	d00b      	beq.n	800696a <I2C_Master_ADDR+0x2d0>
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	2b01      	cmp	r3, #1
 8006956:	d008      	beq.n	800696a <I2C_Master_ADDR+0x2d0>
 8006958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695a:	2b08      	cmp	r3, #8
 800695c:	d005      	beq.n	800696a <I2C_Master_ADDR+0x2d0>
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	2b10      	cmp	r3, #16
 8006962:	d002      	beq.n	800696a <I2C_Master_ADDR+0x2d0>
 8006964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006966:	2b20      	cmp	r3, #32
 8006968:	d107      	bne.n	800697a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006978:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800697a:	2300      	movs	r3, #0
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	613b      	str	r3, [r7, #16]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	613b      	str	r3, [r7, #16]
 800698e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006996:	e00b      	b.n	80069b0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
}
 80069ae:	e7ff      	b.n	80069b0 <I2C_Master_ADDR+0x316>
 80069b0:	bf00      	nop
 80069b2:	3744      	adds	r7, #68	; 0x44
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d02b      	beq.n	8006a2e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	781a      	ldrb	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d114      	bne.n	8006a2e <I2C_SlaveTransmit_TXE+0x72>
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	2b29      	cmp	r3, #41	; 0x29
 8006a08:	d111      	bne.n	8006a2e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a18:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2221      	movs	r2, #33	; 0x21
 8006a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2228      	movs	r2, #40	; 0x28
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff fa58 	bl	8005ede <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006a2e:	bf00      	nop
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d011      	beq.n	8006a6c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	781a      	ldrb	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d02c      	beq.n	8006aec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	691a      	ldr	r2, [r3, #16]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d114      	bne.n	8006aec <I2C_SlaveReceive_RXNE+0x74>
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ac6:	d111      	bne.n	8006aec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2222      	movs	r2, #34	; 0x22
 8006adc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2228      	movs	r2, #40	; 0x28
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff fa03 	bl	8005ef2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d012      	beq.n	8006b2c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b52:	2b28      	cmp	r3, #40	; 0x28
 8006b54:	d127      	bne.n	8006ba6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b64:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	089b      	lsrs	r3, r3, #2
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006b72:	2301      	movs	r3, #1
 8006b74:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	09db      	lsrs	r3, r3, #7
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d103      	bne.n	8006b8a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	81bb      	strh	r3, [r7, #12]
 8006b88:	e002      	b.n	8006b90 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006b98:	89ba      	ldrh	r2, [r7, #12]
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7ff f9b1 	bl	8005f06 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ba4:	e008      	b.n	8006bb8 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f06f 0202 	mvn.w	r2, #2
 8006bae:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006bb8:	bf00      	nop
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bde:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006be0:	2300      	movs	r3, #0
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	60bb      	str	r3, [r7, #8]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c1c:	d172      	bne.n	8006d04 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	2b22      	cmp	r3, #34	; 0x22
 8006c22:	d002      	beq.n	8006c2a <I2C_Slave_STOPF+0x6a>
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	2b2a      	cmp	r3, #42	; 0x2a
 8006c28:	d135      	bne.n	8006c96 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	f043 0204 	orr.w	r2, r3, #4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe fbe7 	bl	8005436 <HAL_DMA_GetState>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d049      	beq.n	8006d02 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	4a69      	ldr	r2, [pc, #420]	; (8006e18 <I2C_Slave_STOPF+0x258>)
 8006c74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fe fbb9 	bl	80053f2 <HAL_DMA_Abort_IT>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d03d      	beq.n	8006d02 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c90:	4610      	mov	r0, r2
 8006c92:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c94:	e035      	b.n	8006d02 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	f043 0204 	orr.w	r2, r3, #4
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cc8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fbb1 	bl	8005436 <HAL_DMA_GetState>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d014      	beq.n	8006d04 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cde:	4a4e      	ldr	r2, [pc, #312]	; (8006e18 <I2C_Slave_STOPF+0x258>)
 8006ce0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fe fb83 	bl	80053f2 <HAL_DMA_Abort_IT>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d008      	beq.n	8006d04 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4798      	blx	r3
 8006d00:	e000      	b.n	8006d04 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d02:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d03e      	beq.n	8006d8c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d112      	bne.n	8006d42 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	691a      	ldr	r2, [r3, #16]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	b2d2      	uxtb	r2, r2
 8006d28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b40      	cmp	r3, #64	; 0x40
 8006d4e:	d112      	bne.n	8006d76 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691a      	ldr	r2, [r3, #16]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d005      	beq.n	8006d8c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	f043 0204 	orr.w	r2, r3, #4
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f8b3 	bl	8006f00 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006d9a:	e039      	b.n	8006e10 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8006da0:	d109      	bne.n	8006db6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2228      	movs	r2, #40	; 0x28
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff f89e 	bl	8005ef2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b28      	cmp	r3, #40	; 0x28
 8006dc0:	d111      	bne.n	8006de6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <I2C_Slave_STOPF+0x25c>)
 8006dc6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7ff f89f 	bl	8005f22 <HAL_I2C_ListenCpltCallback>
}
 8006de4:	e014      	b.n	8006e10 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dea:	2b22      	cmp	r3, #34	; 0x22
 8006dec:	d002      	beq.n	8006df4 <I2C_Slave_STOPF+0x234>
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
 8006df0:	2b22      	cmp	r3, #34	; 0x22
 8006df2:	d10d      	bne.n	8006e10 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff f871 	bl	8005ef2 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e10:	bf00      	nop
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	08007131 	.word	0x08007131
 8006e1c:	ffff0000 	.word	0xffff0000

08006e20 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d002      	beq.n	8006e42 <I2C_Slave_AF+0x22>
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d129      	bne.n	8006e96 <I2C_Slave_AF+0x76>
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	2b28      	cmp	r3, #40	; 0x28
 8006e46:	d126      	bne.n	8006e96 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a2c      	ldr	r2, [pc, #176]	; (8006efc <I2C_Slave_AF+0xdc>)
 8006e4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e5c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e66:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e76:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7ff f847 	bl	8005f22 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006e94:	e02e      	b.n	8006ef4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	2b21      	cmp	r3, #33	; 0x21
 8006e9a:	d126      	bne.n	8006eea <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a17      	ldr	r2, [pc, #92]	; (8006efc <I2C_Slave_AF+0xdc>)
 8006ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2221      	movs	r2, #33	; 0x21
 8006ea6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ec6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ed0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7fe fffb 	bl	8005ede <HAL_I2C_SlaveTxCpltCallback>
}
 8006ee8:	e004      	b.n	8006ef4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ef2:	615a      	str	r2, [r3, #20]
}
 8006ef4:	bf00      	nop
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	ffff0000 	.word	0xffff0000

08006f00 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0e:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b10      	cmp	r3, #16
 8006f1a:	d10a      	bne.n	8006f32 <I2C_ITError+0x32>
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	2b22      	cmp	r3, #34	; 0x22
 8006f20:	d107      	bne.n	8006f32 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f30:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f38:	2b28      	cmp	r3, #40	; 0x28
 8006f3a:	d107      	bne.n	8006f4c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2228      	movs	r2, #40	; 0x28
 8006f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f4a:	e015      	b.n	8006f78 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f5a:	d006      	beq.n	8006f6a <I2C_ITError+0x6a>
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	2b60      	cmp	r3, #96	; 0x60
 8006f60:	d003      	beq.n	8006f6a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f86:	d162      	bne.n	800704e <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f96:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d020      	beq.n	8006fe8 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006faa:	4a5f      	ldr	r2, [pc, #380]	; (8007128 <I2C_ITError+0x228>)
 8006fac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe fa1d 	bl	80053f2 <HAL_DMA_Abort_IT>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 8089 	beq.w	80070d2 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0201 	bic.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	4798      	blx	r3
 8006fe6:	e074      	b.n	80070d2 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	4a4e      	ldr	r2, [pc, #312]	; (8007128 <I2C_ITError+0x228>)
 8006fee:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe f9fc 	bl	80053f2 <HAL_DMA_Abort_IT>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d068      	beq.n	80070d2 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700a:	2b40      	cmp	r3, #64	; 0x40
 800700c:	d10b      	bne.n	8007026 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	691a      	ldr	r2, [r3, #16]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	b2d2      	uxtb	r2, r2
 800701a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0201 	bic.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2220      	movs	r2, #32
 800703a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007048:	4610      	mov	r0, r2
 800704a:	4798      	blx	r3
 800704c:	e041      	b.n	80070d2 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b60      	cmp	r3, #96	; 0x60
 8007058:	d125      	bne.n	80070a6 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007072:	2b40      	cmp	r3, #64	; 0x40
 8007074:	d10b      	bne.n	800708e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	691a      	ldr	r2, [r3, #16]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	b2d2      	uxtb	r2, r2
 8007082:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0201 	bic.w	r2, r2, #1
 800709c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7fe ff67 	bl	8005f72 <HAL_I2C_AbortCpltCallback>
 80070a4:	e015      	b.n	80070d2 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b0:	2b40      	cmp	r3, #64	; 0x40
 80070b2:	d10b      	bne.n	80070cc <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691a      	ldr	r2, [r3, #16]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7fe ff46 	bl	8005f5e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d8:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d11b      	bne.n	800711e <I2C_ITError+0x21e>
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	2b28      	cmp	r3, #40	; 0x28
 80070ea:	d118      	bne.n	800711e <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070fa:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a0b      	ldr	r2, [pc, #44]	; (800712c <I2C_ITError+0x22c>)
 8007100:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7fe ff02 	bl	8005f22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	08007131 	.word	0x08007131
 800712c:	ffff0000 	.word	0xffff0000

08007130 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007144:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714a:	2200      	movs	r2, #0
 800714c:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007152:	2200      	movs	r2, #0
 8007154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007164:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007170:	2200      	movs	r2, #0
 8007172:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	2200      	movs	r2, #0
 800717a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0201 	bic.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b60      	cmp	r3, #96	; 0x60
 8007196:	d10e      	bne.n	80071b6 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2220      	movs	r2, #32
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7fe fedf 	bl	8005f72 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071b4:	e027      	b.n	8007206 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071b6:	7afb      	ldrb	r3, [r7, #11]
 80071b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071bc:	2b28      	cmp	r3, #40	; 0x28
 80071be:	d117      	bne.n	80071f0 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0201 	orr.w	r2, r2, #1
 80071ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2228      	movs	r2, #40	; 0x28
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071ee:	e007      	b.n	8007200 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f7fe feac 	bl	8005f5e <HAL_I2C_ErrorCallback>
}
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800721e:	d103      	bne.n	8007228 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007226:	e007      	b.n	8007238 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007230:	d102      	bne.n	8007238 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2208      	movs	r2, #8
 8007236:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8007248:	4b06      	ldr	r3, [pc, #24]	; (8007264 <HAL_PWR_PVD_IRQHandler+0x20>)
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8007254:	f000 f808 	bl	8007268 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8007258:	4b02      	ldr	r3, [pc, #8]	; (8007264 <HAL_PWR_PVD_IRQHandler+0x20>)
 800725a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800725e:	615a      	str	r2, [r3, #20]
  }
}
 8007260:	bf00      	nop
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40013c00 	.word	0x40013c00

08007268 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800726c:	bf00      	nop
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
	...

08007278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e22d      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d075      	beq.n	8007382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007296:	4ba3      	ldr	r3, [pc, #652]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f003 030c 	and.w	r3, r3, #12
 800729e:	2b04      	cmp	r3, #4
 80072a0:	d00c      	beq.n	80072bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072a2:	4ba0      	ldr	r3, [pc, #640]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072aa:	2b08      	cmp	r3, #8
 80072ac:	d112      	bne.n	80072d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072ae:	4b9d      	ldr	r3, [pc, #628]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072ba:	d10b      	bne.n	80072d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072bc:	4b99      	ldr	r3, [pc, #612]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d05b      	beq.n	8007380 <HAL_RCC_OscConfig+0x108>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d157      	bne.n	8007380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e208      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072dc:	d106      	bne.n	80072ec <HAL_RCC_OscConfig+0x74>
 80072de:	4b91      	ldr	r3, [pc, #580]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a90      	ldr	r2, [pc, #576]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80072e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	e01d      	b.n	8007328 <HAL_RCC_OscConfig+0xb0>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072f4:	d10c      	bne.n	8007310 <HAL_RCC_OscConfig+0x98>
 80072f6:	4b8b      	ldr	r3, [pc, #556]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a8a      	ldr	r2, [pc, #552]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80072fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	4b88      	ldr	r3, [pc, #544]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a87      	ldr	r2, [pc, #540]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 8007308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	e00b      	b.n	8007328 <HAL_RCC_OscConfig+0xb0>
 8007310:	4b84      	ldr	r3, [pc, #528]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a83      	ldr	r2, [pc, #524]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 8007316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	4b81      	ldr	r3, [pc, #516]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a80      	ldr	r2, [pc, #512]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 8007322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d013      	beq.n	8007358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007330:	f7fd f988 	bl	8004644 <HAL_GetTick>
 8007334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007336:	e008      	b.n	800734a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007338:	f7fd f984 	bl	8004644 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	2b64      	cmp	r3, #100	; 0x64
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e1cd      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800734a:	4b76      	ldr	r3, [pc, #472]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0f0      	beq.n	8007338 <HAL_RCC_OscConfig+0xc0>
 8007356:	e014      	b.n	8007382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007358:	f7fd f974 	bl	8004644 <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800735e:	e008      	b.n	8007372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007360:	f7fd f970 	bl	8004644 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b64      	cmp	r3, #100	; 0x64
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e1b9      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007372:	4b6c      	ldr	r3, [pc, #432]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1f0      	bne.n	8007360 <HAL_RCC_OscConfig+0xe8>
 800737e:	e000      	b.n	8007382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d063      	beq.n	8007456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800738e:	4b65      	ldr	r3, [pc, #404]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f003 030c 	and.w	r3, r3, #12
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00b      	beq.n	80073b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800739a:	4b62      	ldr	r3, [pc, #392]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073a2:	2b08      	cmp	r3, #8
 80073a4:	d11c      	bne.n	80073e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073a6:	4b5f      	ldr	r3, [pc, #380]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d116      	bne.n	80073e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073b2:	4b5c      	ldr	r3, [pc, #368]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d005      	beq.n	80073ca <HAL_RCC_OscConfig+0x152>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d001      	beq.n	80073ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e18d      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073ca:	4b56      	ldr	r3, [pc, #344]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	4952      	ldr	r1, [pc, #328]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073de:	e03a      	b.n	8007456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d020      	beq.n	800742a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073e8:	4b4f      	ldr	r3, [pc, #316]	; (8007528 <HAL_RCC_OscConfig+0x2b0>)
 80073ea:	2201      	movs	r2, #1
 80073ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ee:	f7fd f929 	bl	8004644 <HAL_GetTick>
 80073f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073f4:	e008      	b.n	8007408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073f6:	f7fd f925 	bl	8004644 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	2b02      	cmp	r3, #2
 8007402:	d901      	bls.n	8007408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e16e      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007408:	4b46      	ldr	r3, [pc, #280]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d0f0      	beq.n	80073f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007414:	4b43      	ldr	r3, [pc, #268]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	4940      	ldr	r1, [pc, #256]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 8007424:	4313      	orrs	r3, r2
 8007426:	600b      	str	r3, [r1, #0]
 8007428:	e015      	b.n	8007456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800742a:	4b3f      	ldr	r3, [pc, #252]	; (8007528 <HAL_RCC_OscConfig+0x2b0>)
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007430:	f7fd f908 	bl	8004644 <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007438:	f7fd f904 	bl	8004644 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e14d      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800744a:	4b36      	ldr	r3, [pc, #216]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1f0      	bne.n	8007438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	2b00      	cmp	r3, #0
 8007460:	d030      	beq.n	80074c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d016      	beq.n	8007498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800746a:	4b30      	ldr	r3, [pc, #192]	; (800752c <HAL_RCC_OscConfig+0x2b4>)
 800746c:	2201      	movs	r2, #1
 800746e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007470:	f7fd f8e8 	bl	8004644 <HAL_GetTick>
 8007474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007476:	e008      	b.n	800748a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007478:	f7fd f8e4 	bl	8004644 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d901      	bls.n	800748a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e12d      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800748a:	4b26      	ldr	r3, [pc, #152]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 800748c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0f0      	beq.n	8007478 <HAL_RCC_OscConfig+0x200>
 8007496:	e015      	b.n	80074c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007498:	4b24      	ldr	r3, [pc, #144]	; (800752c <HAL_RCC_OscConfig+0x2b4>)
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800749e:	f7fd f8d1 	bl	8004644 <HAL_GetTick>
 80074a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074a4:	e008      	b.n	80074b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074a6:	f7fd f8cd 	bl	8004644 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d901      	bls.n	80074b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e116      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074b8:	4b1a      	ldr	r3, [pc, #104]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80074ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1f0      	bne.n	80074a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0304 	and.w	r3, r3, #4
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 80a0 	beq.w	8007612 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074d2:	2300      	movs	r3, #0
 80074d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074d6:	4b13      	ldr	r3, [pc, #76]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10f      	bne.n	8007502 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	4a0e      	ldr	r2, [pc, #56]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80074ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f0:	6413      	str	r3, [r2, #64]	; 0x40
 80074f2:	4b0c      	ldr	r3, [pc, #48]	; (8007524 <HAL_RCC_OscConfig+0x2ac>)
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80074fe:	2301      	movs	r3, #1
 8007500:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007502:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <HAL_RCC_OscConfig+0x2b8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750a:	2b00      	cmp	r3, #0
 800750c:	d121      	bne.n	8007552 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800750e:	4b08      	ldr	r3, [pc, #32]	; (8007530 <HAL_RCC_OscConfig+0x2b8>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a07      	ldr	r2, [pc, #28]	; (8007530 <HAL_RCC_OscConfig+0x2b8>)
 8007514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800751a:	f7fd f893 	bl	8004644 <HAL_GetTick>
 800751e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007520:	e011      	b.n	8007546 <HAL_RCC_OscConfig+0x2ce>
 8007522:	bf00      	nop
 8007524:	40023800 	.word	0x40023800
 8007528:	42470000 	.word	0x42470000
 800752c:	42470e80 	.word	0x42470e80
 8007530:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007534:	f7fd f886 	bl	8004644 <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	2b02      	cmp	r3, #2
 8007540:	d901      	bls.n	8007546 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e0cf      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007546:	4b6a      	ldr	r3, [pc, #424]	; (80076f0 <HAL_RCC_OscConfig+0x478>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0f0      	beq.n	8007534 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d106      	bne.n	8007568 <HAL_RCC_OscConfig+0x2f0>
 800755a:	4b66      	ldr	r3, [pc, #408]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 800755c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755e:	4a65      	ldr	r2, [pc, #404]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 8007560:	f043 0301 	orr.w	r3, r3, #1
 8007564:	6713      	str	r3, [r2, #112]	; 0x70
 8007566:	e01c      	b.n	80075a2 <HAL_RCC_OscConfig+0x32a>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b05      	cmp	r3, #5
 800756e:	d10c      	bne.n	800758a <HAL_RCC_OscConfig+0x312>
 8007570:	4b60      	ldr	r3, [pc, #384]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 8007572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007574:	4a5f      	ldr	r2, [pc, #380]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 8007576:	f043 0304 	orr.w	r3, r3, #4
 800757a:	6713      	str	r3, [r2, #112]	; 0x70
 800757c:	4b5d      	ldr	r3, [pc, #372]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 800757e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007580:	4a5c      	ldr	r2, [pc, #368]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 8007582:	f043 0301 	orr.w	r3, r3, #1
 8007586:	6713      	str	r3, [r2, #112]	; 0x70
 8007588:	e00b      	b.n	80075a2 <HAL_RCC_OscConfig+0x32a>
 800758a:	4b5a      	ldr	r3, [pc, #360]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 800758c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758e:	4a59      	ldr	r2, [pc, #356]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 8007590:	f023 0301 	bic.w	r3, r3, #1
 8007594:	6713      	str	r3, [r2, #112]	; 0x70
 8007596:	4b57      	ldr	r3, [pc, #348]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 8007598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759a:	4a56      	ldr	r2, [pc, #344]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 800759c:	f023 0304 	bic.w	r3, r3, #4
 80075a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d015      	beq.n	80075d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075aa:	f7fd f84b 	bl	8004644 <HAL_GetTick>
 80075ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075b0:	e00a      	b.n	80075c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075b2:	f7fd f847 	bl	8004644 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d901      	bls.n	80075c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e08e      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075c8:	4b4a      	ldr	r3, [pc, #296]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 80075ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075cc:	f003 0302 	and.w	r3, r3, #2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0ee      	beq.n	80075b2 <HAL_RCC_OscConfig+0x33a>
 80075d4:	e014      	b.n	8007600 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075d6:	f7fd f835 	bl	8004644 <HAL_GetTick>
 80075da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075dc:	e00a      	b.n	80075f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075de:	f7fd f831 	bl	8004644 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e078      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075f4:	4b3f      	ldr	r3, [pc, #252]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 80075f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1ee      	bne.n	80075de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d105      	bne.n	8007612 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007606:	4b3b      	ldr	r3, [pc, #236]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	4a3a      	ldr	r2, [pc, #232]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 800760c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007610:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d064      	beq.n	80076e4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800761a:	4b36      	ldr	r3, [pc, #216]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 030c 	and.w	r3, r3, #12
 8007622:	2b08      	cmp	r3, #8
 8007624:	d05c      	beq.n	80076e0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	2b02      	cmp	r3, #2
 800762c:	d141      	bne.n	80076b2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800762e:	4b32      	ldr	r3, [pc, #200]	; (80076f8 <HAL_RCC_OscConfig+0x480>)
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007634:	f7fd f806 	bl	8004644 <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800763c:	f7fd f802 	bl	8004644 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e04b      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800764e:	4b29      	ldr	r3, [pc, #164]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1f0      	bne.n	800763c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	69da      	ldr	r2, [r3, #28]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	431a      	orrs	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	019b      	lsls	r3, r3, #6
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007670:	085b      	lsrs	r3, r3, #1
 8007672:	3b01      	subs	r3, #1
 8007674:	041b      	lsls	r3, r3, #16
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	061b      	lsls	r3, r3, #24
 800767e:	491d      	ldr	r1, [pc, #116]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 8007680:	4313      	orrs	r3, r2
 8007682:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007684:	4b1c      	ldr	r3, [pc, #112]	; (80076f8 <HAL_RCC_OscConfig+0x480>)
 8007686:	2201      	movs	r2, #1
 8007688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800768a:	f7fc ffdb 	bl	8004644 <HAL_GetTick>
 800768e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007690:	e008      	b.n	80076a4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007692:	f7fc ffd7 	bl	8004644 <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d901      	bls.n	80076a4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e020      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076a4:	4b13      	ldr	r3, [pc, #76]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d0f0      	beq.n	8007692 <HAL_RCC_OscConfig+0x41a>
 80076b0:	e018      	b.n	80076e4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076b2:	4b11      	ldr	r3, [pc, #68]	; (80076f8 <HAL_RCC_OscConfig+0x480>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076b8:	f7fc ffc4 	bl	8004644 <HAL_GetTick>
 80076bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076be:	e008      	b.n	80076d2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076c0:	f7fc ffc0 	bl	8004644 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e009      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076d2:	4b08      	ldr	r3, [pc, #32]	; (80076f4 <HAL_RCC_OscConfig+0x47c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1f0      	bne.n	80076c0 <HAL_RCC_OscConfig+0x448>
 80076de:	e001      	b.n	80076e4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e000      	b.n	80076e6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	40007000 	.word	0x40007000
 80076f4:	40023800 	.word	0x40023800
 80076f8:	42470060 	.word	0x42470060

080076fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e0ca      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007710:	4b67      	ldr	r3, [pc, #412]	; (80078b0 <HAL_RCC_ClockConfig+0x1b4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 030f 	and.w	r3, r3, #15
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	d90c      	bls.n	8007738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800771e:	4b64      	ldr	r3, [pc, #400]	; (80078b0 <HAL_RCC_ClockConfig+0x1b4>)
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007726:	4b62      	ldr	r3, [pc, #392]	; (80078b0 <HAL_RCC_ClockConfig+0x1b4>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d001      	beq.n	8007738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e0b6      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d020      	beq.n	8007786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d005      	beq.n	800775c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007750:	4b58      	ldr	r3, [pc, #352]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	4a57      	ldr	r2, [pc, #348]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800775a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0308 	and.w	r3, r3, #8
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007768:	4b52      	ldr	r3, [pc, #328]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	4a51      	ldr	r2, [pc, #324]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 800776e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007774:	4b4f      	ldr	r3, [pc, #316]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	494c      	ldr	r1, [pc, #304]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007782:	4313      	orrs	r3, r2
 8007784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d044      	beq.n	800781c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d107      	bne.n	80077aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800779a:	4b46      	ldr	r3, [pc, #280]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d119      	bne.n	80077da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e07d      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d003      	beq.n	80077ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d107      	bne.n	80077ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077ba:	4b3e      	ldr	r3, [pc, #248]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d109      	bne.n	80077da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e06d      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077ca:	4b3a      	ldr	r3, [pc, #232]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e065      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077da:	4b36      	ldr	r3, [pc, #216]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f023 0203 	bic.w	r2, r3, #3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	4933      	ldr	r1, [pc, #204]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077ec:	f7fc ff2a 	bl	8004644 <HAL_GetTick>
 80077f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077f2:	e00a      	b.n	800780a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077f4:	f7fc ff26 	bl	8004644 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007802:	4293      	cmp	r3, r2
 8007804:	d901      	bls.n	800780a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e04d      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800780a:	4b2a      	ldr	r3, [pc, #168]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 020c 	and.w	r2, r3, #12
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	429a      	cmp	r2, r3
 800781a:	d1eb      	bne.n	80077f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800781c:	4b24      	ldr	r3, [pc, #144]	; (80078b0 <HAL_RCC_ClockConfig+0x1b4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d20c      	bcs.n	8007844 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800782a:	4b21      	ldr	r3, [pc, #132]	; (80078b0 <HAL_RCC_ClockConfig+0x1b4>)
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	b2d2      	uxtb	r2, r2
 8007830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007832:	4b1f      	ldr	r3, [pc, #124]	; (80078b0 <HAL_RCC_ClockConfig+0x1b4>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 030f 	and.w	r3, r3, #15
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	429a      	cmp	r2, r3
 800783e:	d001      	beq.n	8007844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e030      	b.n	80078a6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007850:	4b18      	ldr	r3, [pc, #96]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	4915      	ldr	r1, [pc, #84]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 800785e:	4313      	orrs	r3, r2
 8007860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800786e:	4b11      	ldr	r3, [pc, #68]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	490d      	ldr	r1, [pc, #52]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 800787e:	4313      	orrs	r3, r2
 8007880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007882:	f000 f81d 	bl	80078c0 <HAL_RCC_GetSysClockFreq>
 8007886:	4601      	mov	r1, r0
 8007888:	4b0a      	ldr	r3, [pc, #40]	; (80078b4 <HAL_RCC_ClockConfig+0x1b8>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	091b      	lsrs	r3, r3, #4
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	4a09      	ldr	r2, [pc, #36]	; (80078b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007894:	5cd3      	ldrb	r3, [r2, r3]
 8007896:	fa21 f303 	lsr.w	r3, r1, r3
 800789a:	4a08      	ldr	r2, [pc, #32]	; (80078bc <HAL_RCC_ClockConfig+0x1c0>)
 800789c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800789e:	2000      	movs	r0, #0
 80078a0:	f7fc fe8c 	bl	80045bc <HAL_InitTick>

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	40023c00 	.word	0x40023c00
 80078b4:	40023800 	.word	0x40023800
 80078b8:	08009e70 	.word	0x08009e70
 80078bc:	20000014 	.word	0x20000014

080078c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	607b      	str	r3, [r7, #4]
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	2300      	movs	r3, #0
 80078d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078d6:	4b63      	ldr	r3, [pc, #396]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f003 030c 	and.w	r3, r3, #12
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d007      	beq.n	80078f2 <HAL_RCC_GetSysClockFreq+0x32>
 80078e2:	2b08      	cmp	r3, #8
 80078e4:	d008      	beq.n	80078f8 <HAL_RCC_GetSysClockFreq+0x38>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f040 80b4 	bne.w	8007a54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078ec:	4b5e      	ldr	r3, [pc, #376]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80078ee:	60bb      	str	r3, [r7, #8]
       break;
 80078f0:	e0b3      	b.n	8007a5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078f2:	4b5e      	ldr	r3, [pc, #376]	; (8007a6c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80078f4:	60bb      	str	r3, [r7, #8]
      break;
 80078f6:	e0b0      	b.n	8007a5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078f8:	4b5a      	ldr	r3, [pc, #360]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007900:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007902:	4b58      	ldr	r3, [pc, #352]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d04a      	beq.n	80079a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800790e:	4b55      	ldr	r3, [pc, #340]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	099b      	lsrs	r3, r3, #6
 8007914:	f04f 0400 	mov.w	r4, #0
 8007918:	f240 11ff 	movw	r1, #511	; 0x1ff
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	ea03 0501 	and.w	r5, r3, r1
 8007924:	ea04 0602 	and.w	r6, r4, r2
 8007928:	4629      	mov	r1, r5
 800792a:	4632      	mov	r2, r6
 800792c:	f04f 0300 	mov.w	r3, #0
 8007930:	f04f 0400 	mov.w	r4, #0
 8007934:	0154      	lsls	r4, r2, #5
 8007936:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800793a:	014b      	lsls	r3, r1, #5
 800793c:	4619      	mov	r1, r3
 800793e:	4622      	mov	r2, r4
 8007940:	1b49      	subs	r1, r1, r5
 8007942:	eb62 0206 	sbc.w	r2, r2, r6
 8007946:	f04f 0300 	mov.w	r3, #0
 800794a:	f04f 0400 	mov.w	r4, #0
 800794e:	0194      	lsls	r4, r2, #6
 8007950:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007954:	018b      	lsls	r3, r1, #6
 8007956:	1a5b      	subs	r3, r3, r1
 8007958:	eb64 0402 	sbc.w	r4, r4, r2
 800795c:	f04f 0100 	mov.w	r1, #0
 8007960:	f04f 0200 	mov.w	r2, #0
 8007964:	00e2      	lsls	r2, r4, #3
 8007966:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800796a:	00d9      	lsls	r1, r3, #3
 800796c:	460b      	mov	r3, r1
 800796e:	4614      	mov	r4, r2
 8007970:	195b      	adds	r3, r3, r5
 8007972:	eb44 0406 	adc.w	r4, r4, r6
 8007976:	f04f 0100 	mov.w	r1, #0
 800797a:	f04f 0200 	mov.w	r2, #0
 800797e:	0262      	lsls	r2, r4, #9
 8007980:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007984:	0259      	lsls	r1, r3, #9
 8007986:	460b      	mov	r3, r1
 8007988:	4614      	mov	r4, r2
 800798a:	4618      	mov	r0, r3
 800798c:	4621      	mov	r1, r4
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f04f 0400 	mov.w	r4, #0
 8007994:	461a      	mov	r2, r3
 8007996:	4623      	mov	r3, r4
 8007998:	f7f8 fc1e 	bl	80001d8 <__aeabi_uldivmod>
 800799c:	4603      	mov	r3, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	e049      	b.n	8007a38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079a4:	4b2f      	ldr	r3, [pc, #188]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	099b      	lsrs	r3, r3, #6
 80079aa:	f04f 0400 	mov.w	r4, #0
 80079ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	ea03 0501 	and.w	r5, r3, r1
 80079ba:	ea04 0602 	and.w	r6, r4, r2
 80079be:	4629      	mov	r1, r5
 80079c0:	4632      	mov	r2, r6
 80079c2:	f04f 0300 	mov.w	r3, #0
 80079c6:	f04f 0400 	mov.w	r4, #0
 80079ca:	0154      	lsls	r4, r2, #5
 80079cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80079d0:	014b      	lsls	r3, r1, #5
 80079d2:	4619      	mov	r1, r3
 80079d4:	4622      	mov	r2, r4
 80079d6:	1b49      	subs	r1, r1, r5
 80079d8:	eb62 0206 	sbc.w	r2, r2, r6
 80079dc:	f04f 0300 	mov.w	r3, #0
 80079e0:	f04f 0400 	mov.w	r4, #0
 80079e4:	0194      	lsls	r4, r2, #6
 80079e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80079ea:	018b      	lsls	r3, r1, #6
 80079ec:	1a5b      	subs	r3, r3, r1
 80079ee:	eb64 0402 	sbc.w	r4, r4, r2
 80079f2:	f04f 0100 	mov.w	r1, #0
 80079f6:	f04f 0200 	mov.w	r2, #0
 80079fa:	00e2      	lsls	r2, r4, #3
 80079fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007a00:	00d9      	lsls	r1, r3, #3
 8007a02:	460b      	mov	r3, r1
 8007a04:	4614      	mov	r4, r2
 8007a06:	195b      	adds	r3, r3, r5
 8007a08:	eb44 0406 	adc.w	r4, r4, r6
 8007a0c:	f04f 0100 	mov.w	r1, #0
 8007a10:	f04f 0200 	mov.w	r2, #0
 8007a14:	02a2      	lsls	r2, r4, #10
 8007a16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007a1a:	0299      	lsls	r1, r3, #10
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4614      	mov	r4, r2
 8007a20:	4618      	mov	r0, r3
 8007a22:	4621      	mov	r1, r4
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f04f 0400 	mov.w	r4, #0
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	4623      	mov	r3, r4
 8007a2e:	f7f8 fbd3 	bl	80001d8 <__aeabi_uldivmod>
 8007a32:	4603      	mov	r3, r0
 8007a34:	460c      	mov	r4, r1
 8007a36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a38:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	0c1b      	lsrs	r3, r3, #16
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	3301      	adds	r3, #1
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a50:	60bb      	str	r3, [r7, #8]
      break;
 8007a52:	e002      	b.n	8007a5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a54:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007a56:	60bb      	str	r3, [r7, #8]
      break;
 8007a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a64:	40023800 	.word	0x40023800
 8007a68:	00f42400 	.word	0x00f42400
 8007a6c:	007a1200 	.word	0x007a1200

08007a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a70:	b480      	push	{r7}
 8007a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a74:	4b03      	ldr	r3, [pc, #12]	; (8007a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a76:	681b      	ldr	r3, [r3, #0]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	20000014 	.word	0x20000014

08007a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a8c:	f7ff fff0 	bl	8007a70 <HAL_RCC_GetHCLKFreq>
 8007a90:	4601      	mov	r1, r0
 8007a92:	4b05      	ldr	r3, [pc, #20]	; (8007aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	0a9b      	lsrs	r3, r3, #10
 8007a98:	f003 0307 	and.w	r3, r3, #7
 8007a9c:	4a03      	ldr	r2, [pc, #12]	; (8007aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a9e:	5cd3      	ldrb	r3, [r2, r3]
 8007aa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	40023800 	.word	0x40023800
 8007aac:	08009e80 	.word	0x08009e80

08007ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ab4:	f7ff ffdc 	bl	8007a70 <HAL_RCC_GetHCLKFreq>
 8007ab8:	4601      	mov	r1, r0
 8007aba:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	0b5b      	lsrs	r3, r3, #13
 8007ac0:	f003 0307 	and.w	r3, r3, #7
 8007ac4:	4a03      	ldr	r2, [pc, #12]	; (8007ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ac6:	5cd3      	ldrb	r3, [r2, r3]
 8007ac8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	40023800 	.word	0x40023800
 8007ad4:	08009e80 	.word	0x08009e80

08007ad8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e056      	b.n	8007b98 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d106      	bne.n	8007b0a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7fc fa4f 	bl	8003fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b20:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	431a      	orrs	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	431a      	orrs	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b46:	431a      	orrs	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	69db      	ldr	r3, [r3, #28]
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	ea42 0103 	orr.w	r1, r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	0c1b      	lsrs	r3, r3, #16
 8007b68:	f003 0104 	and.w	r1, r3, #4
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	69da      	ldr	r2, [r3, #28]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	4613      	mov	r3, r2
 8007bae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d101      	bne.n	8007bc2 <HAL_SPI_Transmit+0x22>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	e11e      	b.n	8007e00 <HAL_SPI_Transmit+0x260>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bca:	f7fc fd3b 	bl	8004644 <HAL_GetTick>
 8007bce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007bd0:	88fb      	ldrh	r3, [r7, #6]
 8007bd2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d002      	beq.n	8007be6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007be0:	2302      	movs	r3, #2
 8007be2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007be4:	e103      	b.n	8007dee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <HAL_SPI_Transmit+0x52>
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d102      	bne.n	8007bf8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007bf6:	e0fa      	b.n	8007dee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	88fa      	ldrh	r2, [r7, #6]
 8007c10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	88fa      	ldrh	r2, [r7, #6]
 8007c16:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c3e:	d107      	bne.n	8007c50 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5a:	2b40      	cmp	r3, #64	; 0x40
 8007c5c:	d007      	beq.n	8007c6e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c76:	d14b      	bne.n	8007d10 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <HAL_SPI_Transmit+0xe6>
 8007c80:	8afb      	ldrh	r3, [r7, #22]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d13e      	bne.n	8007d04 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8a:	881a      	ldrh	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	1c9a      	adds	r2, r3, #2
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007caa:	e02b      	b.n	8007d04 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d112      	bne.n	8007ce0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbe:	881a      	ldrh	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cca:	1c9a      	adds	r2, r3, #2
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	86da      	strh	r2, [r3, #54]	; 0x36
 8007cde:	e011      	b.n	8007d04 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ce0:	f7fc fcb0 	bl	8004644 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d803      	bhi.n	8007cf8 <HAL_SPI_Transmit+0x158>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf6:	d102      	bne.n	8007cfe <HAL_SPI_Transmit+0x15e>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d102      	bne.n	8007d04 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d02:	e074      	b.n	8007dee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1ce      	bne.n	8007cac <HAL_SPI_Transmit+0x10c>
 8007d0e:	e04c      	b.n	8007daa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <HAL_SPI_Transmit+0x17e>
 8007d18:	8afb      	ldrh	r3, [r7, #22]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d140      	bne.n	8007da0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	330c      	adds	r3, #12
 8007d28:	7812      	ldrb	r2, [r2, #0]
 8007d2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007d44:	e02c      	b.n	8007da0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d113      	bne.n	8007d7c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	330c      	adds	r3, #12
 8007d5e:	7812      	ldrb	r2, [r2, #0]
 8007d60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	3b01      	subs	r3, #1
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	86da      	strh	r2, [r3, #54]	; 0x36
 8007d7a:	e011      	b.n	8007da0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d7c:	f7fc fc62 	bl	8004644 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d803      	bhi.n	8007d94 <HAL_SPI_Transmit+0x1f4>
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d92:	d102      	bne.n	8007d9a <HAL_SPI_Transmit+0x1fa>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d102      	bne.n	8007da0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d9e:	e026      	b.n	8007dee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1cd      	bne.n	8007d46 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 fa44 	bl	800823c <SPI_EndRxTxTransaction>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dc8:	2300      	movs	r3, #0
 8007dca:	613b      	str	r3, [r7, #16]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	613b      	str	r3, [r7, #16]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	613b      	str	r3, [r7, #16]
 8007ddc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	77fb      	strb	r3, [r7, #31]
 8007dea:	e000      	b.n	8007dee <HAL_SPI_Transmit+0x24e>
  }

error:
 8007dec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007dfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3720      	adds	r7, #32
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08c      	sub	sp, #48	; 0x30
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
 8007e14:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e16:	2301      	movs	r3, #1
 8007e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d101      	bne.n	8007e2e <HAL_SPI_TransmitReceive+0x26>
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e18a      	b.n	8008144 <HAL_SPI_TransmitReceive+0x33c>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e36:	f7fc fc05 	bl	8004644 <HAL_GetTick>
 8007e3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007e4c:	887b      	ldrh	r3, [r7, #2]
 8007e4e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d00f      	beq.n	8007e78 <HAL_SPI_TransmitReceive+0x70>
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e5e:	d107      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d103      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x68>
 8007e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d003      	beq.n	8007e78 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007e70:	2302      	movs	r3, #2
 8007e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e76:	e15b      	b.n	8008130 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d005      	beq.n	8007e8a <HAL_SPI_TransmitReceive+0x82>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <HAL_SPI_TransmitReceive+0x82>
 8007e84:	887b      	ldrh	r3, [r7, #2]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d103      	bne.n	8007e92 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e90:	e14e      	b.n	8008130 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d003      	beq.n	8007ea6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2205      	movs	r2, #5
 8007ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	887a      	ldrh	r2, [r7, #2]
 8007eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	887a      	ldrh	r2, [r7, #2]
 8007ebc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	887a      	ldrh	r2, [r7, #2]
 8007ec8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	887a      	ldrh	r2, [r7, #2]
 8007ece:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee6:	2b40      	cmp	r3, #64	; 0x40
 8007ee8:	d007      	beq.n	8007efa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ef8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f02:	d178      	bne.n	8007ff6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <HAL_SPI_TransmitReceive+0x10a>
 8007f0c:	8b7b      	ldrh	r3, [r7, #26]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d166      	bne.n	8007fe0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f16:	881a      	ldrh	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f22:	1c9a      	adds	r2, r3, #2
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f36:	e053      	b.n	8007fe0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d11b      	bne.n	8007f7e <HAL_SPI_TransmitReceive+0x176>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d016      	beq.n	8007f7e <HAL_SPI_TransmitReceive+0x176>
 8007f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d113      	bne.n	8007f7e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5a:	881a      	ldrh	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f66:	1c9a      	adds	r2, r3, #2
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	3b01      	subs	r3, #1
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d119      	bne.n	8007fc0 <HAL_SPI_TransmitReceive+0x1b8>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d014      	beq.n	8007fc0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68da      	ldr	r2, [r3, #12]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	b292      	uxth	r2, r2
 8007fa2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa8:	1c9a      	adds	r2, r3, #2
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007fc0:	f7fc fb40 	bl	8004644 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d807      	bhi.n	8007fe0 <HAL_SPI_TransmitReceive+0x1d8>
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd6:	d003      	beq.n	8007fe0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007fde:	e0a7      	b.n	8008130 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1a6      	bne.n	8007f38 <HAL_SPI_TransmitReceive+0x130>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1a1      	bne.n	8007f38 <HAL_SPI_TransmitReceive+0x130>
 8007ff4:	e07c      	b.n	80080f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <HAL_SPI_TransmitReceive+0x1fc>
 8007ffe:	8b7b      	ldrh	r3, [r7, #26]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d16b      	bne.n	80080dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	330c      	adds	r3, #12
 800800e:	7812      	ldrb	r2, [r2, #0]
 8008010:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	b29a      	uxth	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800802a:	e057      	b.n	80080dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b02      	cmp	r3, #2
 8008038:	d11c      	bne.n	8008074 <HAL_SPI_TransmitReceive+0x26c>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d017      	beq.n	8008074 <HAL_SPI_TransmitReceive+0x26c>
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	2b01      	cmp	r3, #1
 8008048:	d114      	bne.n	8008074 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	330c      	adds	r3, #12
 8008054:	7812      	ldrb	r2, [r2, #0]
 8008056:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b01      	cmp	r3, #1
 8008080:	d119      	bne.n	80080b6 <HAL_SPI_TransmitReceive+0x2ae>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008086:	b29b      	uxth	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	d014      	beq.n	80080b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008096:	b2d2      	uxtb	r2, r2
 8008098:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809e:	1c5a      	adds	r2, r3, #1
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	3b01      	subs	r3, #1
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080b2:	2301      	movs	r3, #1
 80080b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080b6:	f7fc fac5 	bl	8004644 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d803      	bhi.n	80080ce <HAL_SPI_TransmitReceive+0x2c6>
 80080c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080cc:	d102      	bne.n	80080d4 <HAL_SPI_TransmitReceive+0x2cc>
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d103      	bne.n	80080dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80080da:	e029      	b.n	8008130 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1a2      	bne.n	800802c <HAL_SPI_TransmitReceive+0x224>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d19d      	bne.n	800802c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 f8a1 	bl	800823c <SPI_EndRxTxTransaction>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d006      	beq.n	800810e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2220      	movs	r2, #32
 800810a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800810c:	e010      	b.n	8008130 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10b      	bne.n	800812e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008116:	2300      	movs	r3, #0
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	617b      	str	r3, [r7, #20]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	617b      	str	r3, [r7, #20]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	e000      	b.n	8008130 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800812e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008140:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008144:	4618      	mov	r0, r3
 8008146:	3730      	adds	r7, #48	; 0x30
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800815a:	b2db      	uxtb	r3, r3
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	4613      	mov	r3, r2
 8008176:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008178:	e04c      	b.n	8008214 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008180:	d048      	beq.n	8008214 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008182:	f7fc fa5f 	bl	8004644 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d902      	bls.n	8008198 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d13d      	bne.n	8008214 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081b0:	d111      	bne.n	80081d6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ba:	d004      	beq.n	80081c6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081c4:	d107      	bne.n	80081d6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081de:	d10f      	bne.n	8008200 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e00f      	b.n	8008234 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	4013      	ands	r3, r2
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	429a      	cmp	r2, r3
 8008222:	bf0c      	ite	eq
 8008224:	2301      	moveq	r3, #1
 8008226:	2300      	movne	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	461a      	mov	r2, r3
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	429a      	cmp	r2, r3
 8008230:	d1a3      	bne.n	800817a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b088      	sub	sp, #32
 8008240:	af02      	add	r7, sp, #8
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008248:	4b1b      	ldr	r3, [pc, #108]	; (80082b8 <SPI_EndRxTxTransaction+0x7c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a1b      	ldr	r2, [pc, #108]	; (80082bc <SPI_EndRxTxTransaction+0x80>)
 800824e:	fba2 2303 	umull	r2, r3, r2, r3
 8008252:	0d5b      	lsrs	r3, r3, #21
 8008254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008258:	fb02 f303 	mul.w	r3, r2, r3
 800825c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008266:	d112      	bne.n	800828e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2200      	movs	r2, #0
 8008270:	2180      	movs	r1, #128	; 0x80
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f7ff ff78 	bl	8008168 <SPI_WaitFlagStateUntilTimeout>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d016      	beq.n	80082ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008282:	f043 0220 	orr.w	r2, r3, #32
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e00f      	b.n	80082ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00a      	beq.n	80082aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	3b01      	subs	r3, #1
 8008298:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a4:	2b80      	cmp	r3, #128	; 0x80
 80082a6:	d0f2      	beq.n	800828e <SPI_EndRxTxTransaction+0x52>
 80082a8:	e000      	b.n	80082ac <SPI_EndRxTxTransaction+0x70>
        break;
 80082aa:	bf00      	nop
  }

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20000014 	.word	0x20000014
 80082bc:	165e9f81 	.word	0x165e9f81

080082c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e01d      	b.n	800830e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d106      	bne.n	80082ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7fb fea6 	bl	8004038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3304      	adds	r3, #4
 80082fc:	4619      	mov	r1, r3
 80082fe:	4610      	mov	r0, r2
 8008300:	f000 fa40 	bl	8008784 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008316:	b480      	push	{r7}
 8008318:	b085      	sub	sp, #20
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f042 0201 	orr.w	r2, r2, #1
 800832c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f003 0307 	and.w	r3, r3, #7
 8008338:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2b06      	cmp	r3, #6
 800833e:	d007      	beq.n	8008350 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f042 0201 	orr.w	r2, r2, #1
 800834e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f022 0201 	bic.w	r2, r2, #1
 8008374:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6a1a      	ldr	r2, [r3, #32]
 800837c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008380:	4013      	ands	r3, r2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10f      	bne.n	80083a6 <HAL_TIM_Base_Stop_IT+0x48>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6a1a      	ldr	r2, [r3, #32]
 800838c:	f240 4344 	movw	r3, #1092	; 0x444
 8008390:	4013      	ands	r3, r2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d107      	bne.n	80083a6 <HAL_TIM_Base_Stop_IT+0x48>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0201 	bic.w	r2, r2, #1
 80083a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	f003 0302 	and.w	r3, r3, #2
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d122      	bne.n	8008410 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d11b      	bne.n	8008410 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f06f 0202 	mvn.w	r2, #2
 80083e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	f003 0303 	and.w	r3, r3, #3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f9a5 	bl	8008746 <HAL_TIM_IC_CaptureCallback>
 80083fc:	e005      	b.n	800840a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f997 	bl	8008732 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f9a8 	bl	800875a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	f003 0304 	and.w	r3, r3, #4
 800841a:	2b04      	cmp	r3, #4
 800841c:	d122      	bne.n	8008464 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f003 0304 	and.w	r3, r3, #4
 8008428:	2b04      	cmp	r3, #4
 800842a:	d11b      	bne.n	8008464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f06f 0204 	mvn.w	r2, #4
 8008434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2202      	movs	r2, #2
 800843a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f97b 	bl	8008746 <HAL_TIM_IC_CaptureCallback>
 8008450:	e005      	b.n	800845e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f96d 	bl	8008732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f97e 	bl	800875a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	f003 0308 	and.w	r3, r3, #8
 800846e:	2b08      	cmp	r3, #8
 8008470:	d122      	bne.n	80084b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f003 0308 	and.w	r3, r3, #8
 800847c:	2b08      	cmp	r3, #8
 800847e:	d11b      	bne.n	80084b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f06f 0208 	mvn.w	r2, #8
 8008488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2204      	movs	r2, #4
 800848e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f951 	bl	8008746 <HAL_TIM_IC_CaptureCallback>
 80084a4:	e005      	b.n	80084b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f943 	bl	8008732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f954 	bl	800875a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	f003 0310 	and.w	r3, r3, #16
 80084c2:	2b10      	cmp	r3, #16
 80084c4:	d122      	bne.n	800850c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f003 0310 	and.w	r3, r3, #16
 80084d0:	2b10      	cmp	r3, #16
 80084d2:	d11b      	bne.n	800850c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f06f 0210 	mvn.w	r2, #16
 80084dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2208      	movs	r2, #8
 80084e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f927 	bl	8008746 <HAL_TIM_IC_CaptureCallback>
 80084f8:	e005      	b.n	8008506 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f919 	bl	8008732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f92a 	bl	800875a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b01      	cmp	r3, #1
 8008518:	d10e      	bne.n	8008538 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	2b01      	cmp	r3, #1
 8008526:	d107      	bne.n	8008538 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f06f 0201 	mvn.w	r2, #1
 8008530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7fa fff8 	bl	8003528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008542:	2b80      	cmp	r3, #128	; 0x80
 8008544:	d10e      	bne.n	8008564 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008550:	2b80      	cmp	r3, #128	; 0x80
 8008552:	d107      	bne.n	8008564 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800855c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fa99 	bl	8008a96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856e:	2b40      	cmp	r3, #64	; 0x40
 8008570:	d10e      	bne.n	8008590 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800857c:	2b40      	cmp	r3, #64	; 0x40
 800857e:	d107      	bne.n	8008590 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f8ef 	bl	800876e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	f003 0320 	and.w	r3, r3, #32
 800859a:	2b20      	cmp	r3, #32
 800859c:	d10e      	bne.n	80085bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f003 0320 	and.w	r3, r3, #32
 80085a8:	2b20      	cmp	r3, #32
 80085aa:	d107      	bne.n	80085bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f06f 0220 	mvn.w	r2, #32
 80085b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fa63 	bl	8008a82 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085bc:	bf00      	nop
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_TIM_ConfigClockSource+0x18>
 80085d8:	2302      	movs	r3, #2
 80085da:	e0a6      	b.n	800872a <HAL_TIM_ConfigClockSource+0x166>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80085fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008602:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b40      	cmp	r3, #64	; 0x40
 8008612:	d067      	beq.n	80086e4 <HAL_TIM_ConfigClockSource+0x120>
 8008614:	2b40      	cmp	r3, #64	; 0x40
 8008616:	d80b      	bhi.n	8008630 <HAL_TIM_ConfigClockSource+0x6c>
 8008618:	2b10      	cmp	r3, #16
 800861a:	d073      	beq.n	8008704 <HAL_TIM_ConfigClockSource+0x140>
 800861c:	2b10      	cmp	r3, #16
 800861e:	d802      	bhi.n	8008626 <HAL_TIM_ConfigClockSource+0x62>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d06f      	beq.n	8008704 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008624:	e078      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008626:	2b20      	cmp	r3, #32
 8008628:	d06c      	beq.n	8008704 <HAL_TIM_ConfigClockSource+0x140>
 800862a:	2b30      	cmp	r3, #48	; 0x30
 800862c:	d06a      	beq.n	8008704 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800862e:	e073      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008630:	2b70      	cmp	r3, #112	; 0x70
 8008632:	d00d      	beq.n	8008650 <HAL_TIM_ConfigClockSource+0x8c>
 8008634:	2b70      	cmp	r3, #112	; 0x70
 8008636:	d804      	bhi.n	8008642 <HAL_TIM_ConfigClockSource+0x7e>
 8008638:	2b50      	cmp	r3, #80	; 0x50
 800863a:	d033      	beq.n	80086a4 <HAL_TIM_ConfigClockSource+0xe0>
 800863c:	2b60      	cmp	r3, #96	; 0x60
 800863e:	d041      	beq.n	80086c4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008640:	e06a      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008646:	d066      	beq.n	8008716 <HAL_TIM_ConfigClockSource+0x152>
 8008648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800864c:	d017      	beq.n	800867e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800864e:	e063      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6818      	ldr	r0, [r3, #0]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	6899      	ldr	r1, [r3, #8]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f000 f9aa 	bl	80089b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008672:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	609a      	str	r2, [r3, #8]
      break;
 800867c:	e04c      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	6899      	ldr	r1, [r3, #8]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	685a      	ldr	r2, [r3, #4]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f000 f993 	bl	80089b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086a0:	609a      	str	r2, [r3, #8]
      break;
 80086a2:	e039      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	6859      	ldr	r1, [r3, #4]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	461a      	mov	r2, r3
 80086b2:	f000 f907 	bl	80088c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2150      	movs	r1, #80	; 0x50
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 f960 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 80086c2:	e029      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	6859      	ldr	r1, [r3, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	461a      	mov	r2, r3
 80086d2:	f000 f926 	bl	8008922 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2160      	movs	r1, #96	; 0x60
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 f950 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 80086e2:	e019      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	6859      	ldr	r1, [r3, #4]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	461a      	mov	r2, r3
 80086f2:	f000 f8e7 	bl	80088c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2140      	movs	r1, #64	; 0x40
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 f940 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 8008702:	e009      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4619      	mov	r1, r3
 800870e:	4610      	mov	r0, r2
 8008710:	f000 f937 	bl	8008982 <TIM_ITRx_SetConfig>
      break;
 8008714:	e000      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800873a:	bf00      	nop
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008746:	b480      	push	{r7}
 8008748:	b083      	sub	sp, #12
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800874e:	bf00      	nop
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800875a:	b480      	push	{r7}
 800875c:	b083      	sub	sp, #12
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008762:	bf00      	nop
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
	...

08008784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a40      	ldr	r2, [pc, #256]	; (8008898 <TIM_Base_SetConfig+0x114>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d013      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a2:	d00f      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a3d      	ldr	r2, [pc, #244]	; (800889c <TIM_Base_SetConfig+0x118>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d00b      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a3c      	ldr	r2, [pc, #240]	; (80088a0 <TIM_Base_SetConfig+0x11c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d007      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a3b      	ldr	r2, [pc, #236]	; (80088a4 <TIM_Base_SetConfig+0x120>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d003      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a3a      	ldr	r2, [pc, #232]	; (80088a8 <TIM_Base_SetConfig+0x124>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d108      	bne.n	80087d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a2f      	ldr	r2, [pc, #188]	; (8008898 <TIM_Base_SetConfig+0x114>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d02b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e4:	d027      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a2c      	ldr	r2, [pc, #176]	; (800889c <TIM_Base_SetConfig+0x118>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d023      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a2b      	ldr	r2, [pc, #172]	; (80088a0 <TIM_Base_SetConfig+0x11c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d01f      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a2a      	ldr	r2, [pc, #168]	; (80088a4 <TIM_Base_SetConfig+0x120>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d01b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a29      	ldr	r2, [pc, #164]	; (80088a8 <TIM_Base_SetConfig+0x124>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d017      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a28      	ldr	r2, [pc, #160]	; (80088ac <TIM_Base_SetConfig+0x128>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d013      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a27      	ldr	r2, [pc, #156]	; (80088b0 <TIM_Base_SetConfig+0x12c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d00f      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a26      	ldr	r2, [pc, #152]	; (80088b4 <TIM_Base_SetConfig+0x130>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d00b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a25      	ldr	r2, [pc, #148]	; (80088b8 <TIM_Base_SetConfig+0x134>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d007      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a24      	ldr	r2, [pc, #144]	; (80088bc <TIM_Base_SetConfig+0x138>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d003      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a23      	ldr	r2, [pc, #140]	; (80088c0 <TIM_Base_SetConfig+0x13c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d108      	bne.n	8008848 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800883c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	4313      	orrs	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a0a      	ldr	r2, [pc, #40]	; (8008898 <TIM_Base_SetConfig+0x114>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_Base_SetConfig+0xf8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a0c      	ldr	r2, [pc, #48]	; (80088a8 <TIM_Base_SetConfig+0x124>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d103      	bne.n	8008884 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	691a      	ldr	r2, [r3, #16]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	615a      	str	r2, [r3, #20]
}
 800888a:	bf00      	nop
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	40010000 	.word	0x40010000
 800889c:	40000400 	.word	0x40000400
 80088a0:	40000800 	.word	0x40000800
 80088a4:	40000c00 	.word	0x40000c00
 80088a8:	40010400 	.word	0x40010400
 80088ac:	40014000 	.word	0x40014000
 80088b0:	40014400 	.word	0x40014400
 80088b4:	40014800 	.word	0x40014800
 80088b8:	40001800 	.word	0x40001800
 80088bc:	40001c00 	.word	0x40001c00
 80088c0:	40002000 	.word	0x40002000

080088c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	f023 0201 	bic.w	r2, r3, #1
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f023 030a 	bic.w	r3, r3, #10
 8008900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	621a      	str	r2, [r3, #32]
}
 8008916:	bf00      	nop
 8008918:	371c      	adds	r7, #28
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008922:	b480      	push	{r7}
 8008924:	b087      	sub	sp, #28
 8008926:	af00      	add	r7, sp, #0
 8008928:	60f8      	str	r0, [r7, #12]
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	f023 0210 	bic.w	r2, r3, #16
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800894c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	031b      	lsls	r3, r3, #12
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	4313      	orrs	r3, r2
 8008956:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800895e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	011b      	lsls	r3, r3, #4
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	4313      	orrs	r3, r2
 8008968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	621a      	str	r2, [r3, #32]
}
 8008976:	bf00      	nop
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008982:	b480      	push	{r7}
 8008984:	b085      	sub	sp, #20
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4313      	orrs	r3, r2
 80089a0:	f043 0307 	orr.w	r3, r3, #7
 80089a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	609a      	str	r2, [r3, #8]
}
 80089ac:	bf00      	nop
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	021a      	lsls	r2, r3, #8
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	431a      	orrs	r2, r3
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	4313      	orrs	r3, r2
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	609a      	str	r2, [r3, #8]
}
 80089ec:	bf00      	nop
 80089ee:	371c      	adds	r7, #28
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d101      	bne.n	8008a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	e032      	b.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a48:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b083      	sub	sp, #12
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a8a:	bf00      	nop
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a9e:	bf00      	nop
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e03f      	b.n	8008b3c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d106      	bne.n	8008ad6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7fb fb0d 	bl	80040f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2224      	movs	r2, #36	; 0x24
 8008ada:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008aec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 faf4 	bl	80090dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691a      	ldr	r2, [r3, #16]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	695a      	ldr	r2, [r3, #20]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b12:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b22:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2220      	movs	r2, #32
 8008b2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2220      	movs	r2, #32
 8008b36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b20      	cmp	r3, #32
 8008b5c:	d130      	bne.n	8008bc0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <HAL_UART_Transmit_IT+0x26>
 8008b64:	88fb      	ldrh	r3, [r7, #6]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e029      	b.n	8008bc2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d101      	bne.n	8008b7c <HAL_UART_Transmit_IT+0x38>
 8008b78:	2302      	movs	r3, #2
 8008b7a:	e022      	b.n	8008bc2 <HAL_UART_Transmit_IT+0x7e>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	88fa      	ldrh	r2, [r7, #6]
 8008b8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	88fa      	ldrh	r2, [r7, #6]
 8008b94:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2221      	movs	r2, #33	; 0x21
 8008ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68da      	ldr	r2, [r3, #12]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008bba:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	e000      	b.n	8008bc2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008bc0:	2302      	movs	r3, #2
  }
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b085      	sub	sp, #20
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	60f8      	str	r0, [r7, #12]
 8008bd6:	60b9      	str	r1, [r7, #8]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b20      	cmp	r3, #32
 8008be6:	d140      	bne.n	8008c6a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <HAL_UART_Receive_IT+0x26>
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e039      	b.n	8008c6c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d101      	bne.n	8008c06 <HAL_UART_Receive_IT+0x38>
 8008c02:	2302      	movs	r3, #2
 8008c04:	e032      	b.n	8008c6c <HAL_UART_Receive_IT+0x9e>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	88fa      	ldrh	r2, [r7, #6]
 8008c18:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	88fa      	ldrh	r2, [r7, #6]
 8008c1e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2222      	movs	r2, #34	; 0x22
 8008c2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68da      	ldr	r2, [r3, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c44:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	695a      	ldr	r2, [r3, #20]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f042 0201 	orr.w	r2, r2, #1
 8008c54:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f042 0220 	orr.w	r2, r2, #32
 8008c64:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	e000      	b.n	8008c6c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008c6a:	2302      	movs	r3, #2
  }
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3714      	adds	r7, #20
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	f003 030f 	and.w	r3, r3, #15
 8008ca6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10d      	bne.n	8008cca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	f003 0320 	and.w	r3, r3, #32
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d008      	beq.n	8008cca <HAL_UART_IRQHandler+0x52>
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f988 	bl	8008fd8 <UART_Receive_IT>
      return;
 8008cc8:	e0cc      	b.n	8008e64 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 80ab 	beq.w	8008e28 <HAL_UART_IRQHandler+0x1b0>
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d105      	bne.n	8008ce8 <HAL_UART_IRQHandler+0x70>
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f000 80a0 	beq.w	8008e28 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00a      	beq.n	8008d08 <HAL_UART_IRQHandler+0x90>
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d00:	f043 0201 	orr.w	r2, r3, #1
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	f003 0304 	and.w	r3, r3, #4
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00a      	beq.n	8008d28 <HAL_UART_IRQHandler+0xb0>
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d005      	beq.n	8008d28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d20:	f043 0202 	orr.w	r2, r3, #2
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00a      	beq.n	8008d48 <HAL_UART_IRQHandler+0xd0>
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d005      	beq.n	8008d48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d40:	f043 0204 	orr.w	r2, r3, #4
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	f003 0308 	and.w	r3, r3, #8
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00a      	beq.n	8008d68 <HAL_UART_IRQHandler+0xf0>
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d005      	beq.n	8008d68 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d60:	f043 0208 	orr.w	r2, r3, #8
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d078      	beq.n	8008e62 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	f003 0320 	and.w	r3, r3, #32
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d007      	beq.n	8008d8a <HAL_UART_IRQHandler+0x112>
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	f003 0320 	and.w	r3, r3, #32
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f927 	bl	8008fd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	695b      	ldr	r3, [r3, #20]
 8008d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d94:	2b40      	cmp	r3, #64	; 0x40
 8008d96:	bf0c      	ite	eq
 8008d98:	2301      	moveq	r3, #1
 8008d9a:	2300      	movne	r3, #0
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da4:	f003 0308 	and.w	r3, r3, #8
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d102      	bne.n	8008db2 <HAL_UART_IRQHandler+0x13a>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d031      	beq.n	8008e16 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f870 	bl	8008e98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc2:	2b40      	cmp	r3, #64	; 0x40
 8008dc4:	d123      	bne.n	8008e0e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	695a      	ldr	r2, [r3, #20]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dd4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d013      	beq.n	8008e06 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de2:	4a22      	ldr	r2, [pc, #136]	; (8008e6c <HAL_UART_IRQHandler+0x1f4>)
 8008de4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fc fb01 	bl	80053f2 <HAL_DMA_Abort_IT>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d016      	beq.n	8008e24 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008e00:	4610      	mov	r0, r2
 8008e02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e04:	e00e      	b.n	8008e24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f83c 	bl	8008e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e0c:	e00a      	b.n	8008e24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f838 	bl	8008e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e14:	e006      	b.n	8008e24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f834 	bl	8008e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008e22:	e01e      	b.n	8008e62 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e24:	bf00      	nop
    return;
 8008e26:	e01c      	b.n	8008e62 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d008      	beq.n	8008e44 <HAL_UART_IRQHandler+0x1cc>
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f85d 	bl	8008efc <UART_Transmit_IT>
    return;
 8008e42:	e00f      	b.n	8008e64 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <HAL_UART_IRQHandler+0x1ec>
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d005      	beq.n	8008e64 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f8a5 	bl	8008fa8 <UART_EndTransmit_IT>
    return;
 8008e5e:	bf00      	nop
 8008e60:	e000      	b.n	8008e64 <HAL_UART_IRQHandler+0x1ec>
    return;
 8008e62:	bf00      	nop
  }
}
 8008e64:	3720      	adds	r7, #32
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	08008ed5 	.word	0x08008ed5

08008e70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68da      	ldr	r2, [r3, #12]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008eae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	695a      	ldr	r2, [r3, #20]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f022 0201 	bic.w	r2, r2, #1
 8008ebe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f7ff ffc8 	bl	8008e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ef4:	bf00      	nop
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b21      	cmp	r3, #33	; 0x21
 8008f0e:	d144      	bne.n	8008f9a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f18:	d11a      	bne.n	8008f50 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f2e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d105      	bne.n	8008f44 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	1c9a      	adds	r2, r3, #2
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	621a      	str	r2, [r3, #32]
 8008f42:	e00e      	b.n	8008f62 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	621a      	str	r2, [r3, #32]
 8008f4e:	e008      	b.n	8008f62 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a1b      	ldr	r3, [r3, #32]
 8008f54:	1c59      	adds	r1, r3, #1
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	6211      	str	r1, [r2, #32]
 8008f5a:	781a      	ldrb	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10f      	bne.n	8008f96 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68da      	ldr	r2, [r3, #12]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	e000      	b.n	8008f9c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008f9a:	2302      	movs	r3, #2
  }
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3714      	adds	r7, #20
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fbe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff ff51 	bl	8008e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b22      	cmp	r3, #34	; 0x22
 8008fea:	d171      	bne.n	80090d0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ff4:	d123      	bne.n	800903e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10e      	bne.n	8009022 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	b29b      	uxth	r3, r3
 800900c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901a:	1c9a      	adds	r2, r3, #2
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	629a      	str	r2, [r3, #40]	; 0x28
 8009020:	e029      	b.n	8009076 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	b29b      	uxth	r3, r3
 800902a:	b2db      	uxtb	r3, r3
 800902c:	b29a      	uxth	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009036:	1c5a      	adds	r2, r3, #1
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	629a      	str	r2, [r3, #40]	; 0x28
 800903c:	e01b      	b.n	8009076 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10a      	bne.n	800905c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6858      	ldr	r0, [r3, #4]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009050:	1c59      	adds	r1, r3, #1
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	6291      	str	r1, [r2, #40]	; 0x28
 8009056:	b2c2      	uxtb	r2, r0
 8009058:	701a      	strb	r2, [r3, #0]
 800905a:	e00c      	b.n	8009076 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	b2da      	uxtb	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009068:	1c58      	adds	r0, r3, #1
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	6288      	str	r0, [r1, #40]	; 0x28
 800906e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009072:	b2d2      	uxtb	r2, r2
 8009074:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800907a:	b29b      	uxth	r3, r3
 800907c:	3b01      	subs	r3, #1
 800907e:	b29b      	uxth	r3, r3
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	4619      	mov	r1, r3
 8009084:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009086:	2b00      	cmp	r3, #0
 8009088:	d120      	bne.n	80090cc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68da      	ldr	r2, [r3, #12]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f022 0220 	bic.w	r2, r2, #32
 8009098:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68da      	ldr	r2, [r3, #12]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	695a      	ldr	r2, [r3, #20]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0201 	bic.w	r2, r2, #1
 80090b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7fa faa4 	bl	8003610 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	e002      	b.n	80090d2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80090cc:	2300      	movs	r3, #0
 80090ce:	e000      	b.n	80090d2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80090d0:	2302      	movs	r3, #2
  }
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090dc:	b5b0      	push	{r4, r5, r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68da      	ldr	r2, [r3, #12]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	430a      	orrs	r2, r1
 80090f8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	689a      	ldr	r2, [r3, #8]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	431a      	orrs	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	695b      	ldr	r3, [r3, #20]
 8009108:	431a      	orrs	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	4313      	orrs	r3, r2
 8009110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800911c:	f023 030c 	bic.w	r3, r3, #12
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	6812      	ldr	r2, [r2, #0]
 8009124:	68f9      	ldr	r1, [r7, #12]
 8009126:	430b      	orrs	r3, r1
 8009128:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	699a      	ldr	r2, [r3, #24]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	430a      	orrs	r2, r1
 800913e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009148:	f040 80e4 	bne.w	8009314 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4aab      	ldr	r2, [pc, #684]	; (8009400 <UART_SetConfig+0x324>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d004      	beq.n	8009160 <UART_SetConfig+0x84>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4aaa      	ldr	r2, [pc, #680]	; (8009404 <UART_SetConfig+0x328>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d16c      	bne.n	800923a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009160:	f7fe fca6 	bl	8007ab0 <HAL_RCC_GetPCLK2Freq>
 8009164:	4602      	mov	r2, r0
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	009a      	lsls	r2, r3, #2
 800916e:	441a      	add	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	005b      	lsls	r3, r3, #1
 8009176:	fbb2 f3f3 	udiv	r3, r2, r3
 800917a:	4aa3      	ldr	r2, [pc, #652]	; (8009408 <UART_SetConfig+0x32c>)
 800917c:	fba2 2303 	umull	r2, r3, r2, r3
 8009180:	095b      	lsrs	r3, r3, #5
 8009182:	011c      	lsls	r4, r3, #4
 8009184:	f7fe fc94 	bl	8007ab0 <HAL_RCC_GetPCLK2Freq>
 8009188:	4602      	mov	r2, r0
 800918a:	4613      	mov	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4413      	add	r3, r2
 8009190:	009a      	lsls	r2, r3, #2
 8009192:	441a      	add	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	fbb2 f5f3 	udiv	r5, r2, r3
 800919e:	f7fe fc87 	bl	8007ab0 <HAL_RCC_GetPCLK2Freq>
 80091a2:	4602      	mov	r2, r0
 80091a4:	4613      	mov	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	009a      	lsls	r2, r3, #2
 80091ac:	441a      	add	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b8:	4a93      	ldr	r2, [pc, #588]	; (8009408 <UART_SetConfig+0x32c>)
 80091ba:	fba2 2303 	umull	r2, r3, r2, r3
 80091be:	095b      	lsrs	r3, r3, #5
 80091c0:	2264      	movs	r2, #100	; 0x64
 80091c2:	fb02 f303 	mul.w	r3, r2, r3
 80091c6:	1aeb      	subs	r3, r5, r3
 80091c8:	00db      	lsls	r3, r3, #3
 80091ca:	3332      	adds	r3, #50	; 0x32
 80091cc:	4a8e      	ldr	r2, [pc, #568]	; (8009408 <UART_SetConfig+0x32c>)
 80091ce:	fba2 2303 	umull	r2, r3, r2, r3
 80091d2:	095b      	lsrs	r3, r3, #5
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80091da:	441c      	add	r4, r3
 80091dc:	f7fe fc68 	bl	8007ab0 <HAL_RCC_GetPCLK2Freq>
 80091e0:	4602      	mov	r2, r0
 80091e2:	4613      	mov	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	009a      	lsls	r2, r3, #2
 80091ea:	441a      	add	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	fbb2 f5f3 	udiv	r5, r2, r3
 80091f6:	f7fe fc5b 	bl	8007ab0 <HAL_RCC_GetPCLK2Freq>
 80091fa:	4602      	mov	r2, r0
 80091fc:	4613      	mov	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	009a      	lsls	r2, r3, #2
 8009204:	441a      	add	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009210:	4a7d      	ldr	r2, [pc, #500]	; (8009408 <UART_SetConfig+0x32c>)
 8009212:	fba2 2303 	umull	r2, r3, r2, r3
 8009216:	095b      	lsrs	r3, r3, #5
 8009218:	2264      	movs	r2, #100	; 0x64
 800921a:	fb02 f303 	mul.w	r3, r2, r3
 800921e:	1aeb      	subs	r3, r5, r3
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	3332      	adds	r3, #50	; 0x32
 8009224:	4a78      	ldr	r2, [pc, #480]	; (8009408 <UART_SetConfig+0x32c>)
 8009226:	fba2 2303 	umull	r2, r3, r2, r3
 800922a:	095b      	lsrs	r3, r3, #5
 800922c:	f003 0207 	and.w	r2, r3, #7
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4422      	add	r2, r4
 8009236:	609a      	str	r2, [r3, #8]
 8009238:	e154      	b.n	80094e4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800923a:	f7fe fc25 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 800923e:	4602      	mov	r2, r0
 8009240:	4613      	mov	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	009a      	lsls	r2, r3, #2
 8009248:	441a      	add	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	fbb2 f3f3 	udiv	r3, r2, r3
 8009254:	4a6c      	ldr	r2, [pc, #432]	; (8009408 <UART_SetConfig+0x32c>)
 8009256:	fba2 2303 	umull	r2, r3, r2, r3
 800925a:	095b      	lsrs	r3, r3, #5
 800925c:	011c      	lsls	r4, r3, #4
 800925e:	f7fe fc13 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 8009262:	4602      	mov	r2, r0
 8009264:	4613      	mov	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4413      	add	r3, r2
 800926a:	009a      	lsls	r2, r3, #2
 800926c:	441a      	add	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	005b      	lsls	r3, r3, #1
 8009274:	fbb2 f5f3 	udiv	r5, r2, r3
 8009278:	f7fe fc06 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 800927c:	4602      	mov	r2, r0
 800927e:	4613      	mov	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	009a      	lsls	r2, r3, #2
 8009286:	441a      	add	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009292:	4a5d      	ldr	r2, [pc, #372]	; (8009408 <UART_SetConfig+0x32c>)
 8009294:	fba2 2303 	umull	r2, r3, r2, r3
 8009298:	095b      	lsrs	r3, r3, #5
 800929a:	2264      	movs	r2, #100	; 0x64
 800929c:	fb02 f303 	mul.w	r3, r2, r3
 80092a0:	1aeb      	subs	r3, r5, r3
 80092a2:	00db      	lsls	r3, r3, #3
 80092a4:	3332      	adds	r3, #50	; 0x32
 80092a6:	4a58      	ldr	r2, [pc, #352]	; (8009408 <UART_SetConfig+0x32c>)
 80092a8:	fba2 2303 	umull	r2, r3, r2, r3
 80092ac:	095b      	lsrs	r3, r3, #5
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092b4:	441c      	add	r4, r3
 80092b6:	f7fe fbe7 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 80092ba:	4602      	mov	r2, r0
 80092bc:	4613      	mov	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	009a      	lsls	r2, r3, #2
 80092c4:	441a      	add	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	005b      	lsls	r3, r3, #1
 80092cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80092d0:	f7fe fbda 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 80092d4:	4602      	mov	r2, r0
 80092d6:	4613      	mov	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	009a      	lsls	r2, r3, #2
 80092de:	441a      	add	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092ea:	4a47      	ldr	r2, [pc, #284]	; (8009408 <UART_SetConfig+0x32c>)
 80092ec:	fba2 2303 	umull	r2, r3, r2, r3
 80092f0:	095b      	lsrs	r3, r3, #5
 80092f2:	2264      	movs	r2, #100	; 0x64
 80092f4:	fb02 f303 	mul.w	r3, r2, r3
 80092f8:	1aeb      	subs	r3, r5, r3
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	3332      	adds	r3, #50	; 0x32
 80092fe:	4a42      	ldr	r2, [pc, #264]	; (8009408 <UART_SetConfig+0x32c>)
 8009300:	fba2 2303 	umull	r2, r3, r2, r3
 8009304:	095b      	lsrs	r3, r3, #5
 8009306:	f003 0207 	and.w	r2, r3, #7
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4422      	add	r2, r4
 8009310:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8009312:	e0e7      	b.n	80094e4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a39      	ldr	r2, [pc, #228]	; (8009400 <UART_SetConfig+0x324>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d004      	beq.n	8009328 <UART_SetConfig+0x24c>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a38      	ldr	r2, [pc, #224]	; (8009404 <UART_SetConfig+0x328>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d171      	bne.n	800940c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009328:	f7fe fbc2 	bl	8007ab0 <HAL_RCC_GetPCLK2Freq>
 800932c:	4602      	mov	r2, r0
 800932e:	4613      	mov	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4413      	add	r3, r2
 8009334:	009a      	lsls	r2, r3, #2
 8009336:	441a      	add	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009342:	4a31      	ldr	r2, [pc, #196]	; (8009408 <UART_SetConfig+0x32c>)
 8009344:	fba2 2303 	umull	r2, r3, r2, r3
 8009348:	095b      	lsrs	r3, r3, #5
 800934a:	011c      	lsls	r4, r3, #4
 800934c:	f7fe fbb0 	bl	8007ab0 <HAL_RCC_GetPCLK2Freq>
 8009350:	4602      	mov	r2, r0
 8009352:	4613      	mov	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	009a      	lsls	r2, r3, #2
 800935a:	441a      	add	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	fbb2 f5f3 	udiv	r5, r2, r3
 8009366:	f7fe fba3 	bl	8007ab0 <HAL_RCC_GetPCLK2Freq>
 800936a:	4602      	mov	r2, r0
 800936c:	4613      	mov	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	4413      	add	r3, r2
 8009372:	009a      	lsls	r2, r3, #2
 8009374:	441a      	add	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009380:	4a21      	ldr	r2, [pc, #132]	; (8009408 <UART_SetConfig+0x32c>)
 8009382:	fba2 2303 	umull	r2, r3, r2, r3
 8009386:	095b      	lsrs	r3, r3, #5
 8009388:	2264      	movs	r2, #100	; 0x64
 800938a:	fb02 f303 	mul.w	r3, r2, r3
 800938e:	1aeb      	subs	r3, r5, r3
 8009390:	011b      	lsls	r3, r3, #4
 8009392:	3332      	adds	r3, #50	; 0x32
 8009394:	4a1c      	ldr	r2, [pc, #112]	; (8009408 <UART_SetConfig+0x32c>)
 8009396:	fba2 2303 	umull	r2, r3, r2, r3
 800939a:	095b      	lsrs	r3, r3, #5
 800939c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093a0:	441c      	add	r4, r3
 80093a2:	f7fe fb85 	bl	8007ab0 <HAL_RCC_GetPCLK2Freq>
 80093a6:	4602      	mov	r2, r0
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	009a      	lsls	r2, r3, #2
 80093b0:	441a      	add	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80093bc:	f7fe fb78 	bl	8007ab0 <HAL_RCC_GetPCLK2Freq>
 80093c0:	4602      	mov	r2, r0
 80093c2:	4613      	mov	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4413      	add	r3, r2
 80093c8:	009a      	lsls	r2, r3, #2
 80093ca:	441a      	add	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093d6:	4a0c      	ldr	r2, [pc, #48]	; (8009408 <UART_SetConfig+0x32c>)
 80093d8:	fba2 2303 	umull	r2, r3, r2, r3
 80093dc:	095b      	lsrs	r3, r3, #5
 80093de:	2264      	movs	r2, #100	; 0x64
 80093e0:	fb02 f303 	mul.w	r3, r2, r3
 80093e4:	1aeb      	subs	r3, r5, r3
 80093e6:	011b      	lsls	r3, r3, #4
 80093e8:	3332      	adds	r3, #50	; 0x32
 80093ea:	4a07      	ldr	r2, [pc, #28]	; (8009408 <UART_SetConfig+0x32c>)
 80093ec:	fba2 2303 	umull	r2, r3, r2, r3
 80093f0:	095b      	lsrs	r3, r3, #5
 80093f2:	f003 020f 	and.w	r2, r3, #15
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4422      	add	r2, r4
 80093fc:	609a      	str	r2, [r3, #8]
 80093fe:	e071      	b.n	80094e4 <UART_SetConfig+0x408>
 8009400:	40011000 	.word	0x40011000
 8009404:	40011400 	.word	0x40011400
 8009408:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800940c:	f7fe fb3c 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 8009410:	4602      	mov	r2, r0
 8009412:	4613      	mov	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4413      	add	r3, r2
 8009418:	009a      	lsls	r2, r3, #2
 800941a:	441a      	add	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	fbb2 f3f3 	udiv	r3, r2, r3
 8009426:	4a31      	ldr	r2, [pc, #196]	; (80094ec <UART_SetConfig+0x410>)
 8009428:	fba2 2303 	umull	r2, r3, r2, r3
 800942c:	095b      	lsrs	r3, r3, #5
 800942e:	011c      	lsls	r4, r3, #4
 8009430:	f7fe fb2a 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 8009434:	4602      	mov	r2, r0
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	009a      	lsls	r2, r3, #2
 800943e:	441a      	add	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	fbb2 f5f3 	udiv	r5, r2, r3
 800944a:	f7fe fb1d 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 800944e:	4602      	mov	r2, r0
 8009450:	4613      	mov	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	4413      	add	r3, r2
 8009456:	009a      	lsls	r2, r3, #2
 8009458:	441a      	add	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	fbb2 f3f3 	udiv	r3, r2, r3
 8009464:	4a21      	ldr	r2, [pc, #132]	; (80094ec <UART_SetConfig+0x410>)
 8009466:	fba2 2303 	umull	r2, r3, r2, r3
 800946a:	095b      	lsrs	r3, r3, #5
 800946c:	2264      	movs	r2, #100	; 0x64
 800946e:	fb02 f303 	mul.w	r3, r2, r3
 8009472:	1aeb      	subs	r3, r5, r3
 8009474:	011b      	lsls	r3, r3, #4
 8009476:	3332      	adds	r3, #50	; 0x32
 8009478:	4a1c      	ldr	r2, [pc, #112]	; (80094ec <UART_SetConfig+0x410>)
 800947a:	fba2 2303 	umull	r2, r3, r2, r3
 800947e:	095b      	lsrs	r3, r3, #5
 8009480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009484:	441c      	add	r4, r3
 8009486:	f7fe faff 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 800948a:	4602      	mov	r2, r0
 800948c:	4613      	mov	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	009a      	lsls	r2, r3, #2
 8009494:	441a      	add	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	fbb2 f5f3 	udiv	r5, r2, r3
 80094a0:	f7fe faf2 	bl	8007a88 <HAL_RCC_GetPCLK1Freq>
 80094a4:	4602      	mov	r2, r0
 80094a6:	4613      	mov	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	009a      	lsls	r2, r3, #2
 80094ae:	441a      	add	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ba:	4a0c      	ldr	r2, [pc, #48]	; (80094ec <UART_SetConfig+0x410>)
 80094bc:	fba2 2303 	umull	r2, r3, r2, r3
 80094c0:	095b      	lsrs	r3, r3, #5
 80094c2:	2264      	movs	r2, #100	; 0x64
 80094c4:	fb02 f303 	mul.w	r3, r2, r3
 80094c8:	1aeb      	subs	r3, r5, r3
 80094ca:	011b      	lsls	r3, r3, #4
 80094cc:	3332      	adds	r3, #50	; 0x32
 80094ce:	4a07      	ldr	r2, [pc, #28]	; (80094ec <UART_SetConfig+0x410>)
 80094d0:	fba2 2303 	umull	r2, r3, r2, r3
 80094d4:	095b      	lsrs	r3, r3, #5
 80094d6:	f003 020f 	and.w	r2, r3, #15
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4422      	add	r2, r4
 80094e0:	609a      	str	r2, [r3, #8]
}
 80094e2:	e7ff      	b.n	80094e4 <UART_SetConfig+0x408>
 80094e4:	bf00      	nop
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bdb0      	pop	{r4, r5, r7, pc}
 80094ec:	51eb851f 	.word	0x51eb851f

080094f0 <__errno>:
 80094f0:	4b01      	ldr	r3, [pc, #4]	; (80094f8 <__errno+0x8>)
 80094f2:	6818      	ldr	r0, [r3, #0]
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	20000020 	.word	0x20000020

080094fc <__libc_init_array>:
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	4e0d      	ldr	r6, [pc, #52]	; (8009534 <__libc_init_array+0x38>)
 8009500:	4c0d      	ldr	r4, [pc, #52]	; (8009538 <__libc_init_array+0x3c>)
 8009502:	1ba4      	subs	r4, r4, r6
 8009504:	10a4      	asrs	r4, r4, #2
 8009506:	2500      	movs	r5, #0
 8009508:	42a5      	cmp	r5, r4
 800950a:	d109      	bne.n	8009520 <__libc_init_array+0x24>
 800950c:	4e0b      	ldr	r6, [pc, #44]	; (800953c <__libc_init_array+0x40>)
 800950e:	4c0c      	ldr	r4, [pc, #48]	; (8009540 <__libc_init_array+0x44>)
 8009510:	f000 fc90 	bl	8009e34 <_init>
 8009514:	1ba4      	subs	r4, r4, r6
 8009516:	10a4      	asrs	r4, r4, #2
 8009518:	2500      	movs	r5, #0
 800951a:	42a5      	cmp	r5, r4
 800951c:	d105      	bne.n	800952a <__libc_init_array+0x2e>
 800951e:	bd70      	pop	{r4, r5, r6, pc}
 8009520:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009524:	4798      	blx	r3
 8009526:	3501      	adds	r5, #1
 8009528:	e7ee      	b.n	8009508 <__libc_init_array+0xc>
 800952a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800952e:	4798      	blx	r3
 8009530:	3501      	adds	r5, #1
 8009532:	e7f2      	b.n	800951a <__libc_init_array+0x1e>
 8009534:	08009ef4 	.word	0x08009ef4
 8009538:	08009ef4 	.word	0x08009ef4
 800953c:	08009ef4 	.word	0x08009ef4
 8009540:	08009ef8 	.word	0x08009ef8

08009544 <memset>:
 8009544:	4402      	add	r2, r0
 8009546:	4603      	mov	r3, r0
 8009548:	4293      	cmp	r3, r2
 800954a:	d100      	bne.n	800954e <memset+0xa>
 800954c:	4770      	bx	lr
 800954e:	f803 1b01 	strb.w	r1, [r3], #1
 8009552:	e7f9      	b.n	8009548 <memset+0x4>

08009554 <_puts_r>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	460e      	mov	r6, r1
 8009558:	4605      	mov	r5, r0
 800955a:	b118      	cbz	r0, 8009564 <_puts_r+0x10>
 800955c:	6983      	ldr	r3, [r0, #24]
 800955e:	b90b      	cbnz	r3, 8009564 <_puts_r+0x10>
 8009560:	f000 fa14 	bl	800998c <__sinit>
 8009564:	69ab      	ldr	r3, [r5, #24]
 8009566:	68ac      	ldr	r4, [r5, #8]
 8009568:	b913      	cbnz	r3, 8009570 <_puts_r+0x1c>
 800956a:	4628      	mov	r0, r5
 800956c:	f000 fa0e 	bl	800998c <__sinit>
 8009570:	4b23      	ldr	r3, [pc, #140]	; (8009600 <_puts_r+0xac>)
 8009572:	429c      	cmp	r4, r3
 8009574:	d117      	bne.n	80095a6 <_puts_r+0x52>
 8009576:	686c      	ldr	r4, [r5, #4]
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	071b      	lsls	r3, r3, #28
 800957c:	d51d      	bpl.n	80095ba <_puts_r+0x66>
 800957e:	6923      	ldr	r3, [r4, #16]
 8009580:	b1db      	cbz	r3, 80095ba <_puts_r+0x66>
 8009582:	3e01      	subs	r6, #1
 8009584:	68a3      	ldr	r3, [r4, #8]
 8009586:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800958a:	3b01      	subs	r3, #1
 800958c:	60a3      	str	r3, [r4, #8]
 800958e:	b9e9      	cbnz	r1, 80095cc <_puts_r+0x78>
 8009590:	2b00      	cmp	r3, #0
 8009592:	da2e      	bge.n	80095f2 <_puts_r+0x9e>
 8009594:	4622      	mov	r2, r4
 8009596:	210a      	movs	r1, #10
 8009598:	4628      	mov	r0, r5
 800959a:	f000 f847 	bl	800962c <__swbuf_r>
 800959e:	3001      	adds	r0, #1
 80095a0:	d011      	beq.n	80095c6 <_puts_r+0x72>
 80095a2:	200a      	movs	r0, #10
 80095a4:	e011      	b.n	80095ca <_puts_r+0x76>
 80095a6:	4b17      	ldr	r3, [pc, #92]	; (8009604 <_puts_r+0xb0>)
 80095a8:	429c      	cmp	r4, r3
 80095aa:	d101      	bne.n	80095b0 <_puts_r+0x5c>
 80095ac:	68ac      	ldr	r4, [r5, #8]
 80095ae:	e7e3      	b.n	8009578 <_puts_r+0x24>
 80095b0:	4b15      	ldr	r3, [pc, #84]	; (8009608 <_puts_r+0xb4>)
 80095b2:	429c      	cmp	r4, r3
 80095b4:	bf08      	it	eq
 80095b6:	68ec      	ldreq	r4, [r5, #12]
 80095b8:	e7de      	b.n	8009578 <_puts_r+0x24>
 80095ba:	4621      	mov	r1, r4
 80095bc:	4628      	mov	r0, r5
 80095be:	f000 f887 	bl	80096d0 <__swsetup_r>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d0dd      	beq.n	8009582 <_puts_r+0x2e>
 80095c6:	f04f 30ff 	mov.w	r0, #4294967295
 80095ca:	bd70      	pop	{r4, r5, r6, pc}
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	da04      	bge.n	80095da <_puts_r+0x86>
 80095d0:	69a2      	ldr	r2, [r4, #24]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	dc06      	bgt.n	80095e4 <_puts_r+0x90>
 80095d6:	290a      	cmp	r1, #10
 80095d8:	d004      	beq.n	80095e4 <_puts_r+0x90>
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	6022      	str	r2, [r4, #0]
 80095e0:	7019      	strb	r1, [r3, #0]
 80095e2:	e7cf      	b.n	8009584 <_puts_r+0x30>
 80095e4:	4622      	mov	r2, r4
 80095e6:	4628      	mov	r0, r5
 80095e8:	f000 f820 	bl	800962c <__swbuf_r>
 80095ec:	3001      	adds	r0, #1
 80095ee:	d1c9      	bne.n	8009584 <_puts_r+0x30>
 80095f0:	e7e9      	b.n	80095c6 <_puts_r+0x72>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	200a      	movs	r0, #10
 80095f6:	1c5a      	adds	r2, r3, #1
 80095f8:	6022      	str	r2, [r4, #0]
 80095fa:	7018      	strb	r0, [r3, #0]
 80095fc:	e7e5      	b.n	80095ca <_puts_r+0x76>
 80095fe:	bf00      	nop
 8009600:	08009eac 	.word	0x08009eac
 8009604:	08009ecc 	.word	0x08009ecc
 8009608:	08009e8c 	.word	0x08009e8c

0800960c <puts>:
 800960c:	4b02      	ldr	r3, [pc, #8]	; (8009618 <puts+0xc>)
 800960e:	4601      	mov	r1, r0
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	f7ff bf9f 	b.w	8009554 <_puts_r>
 8009616:	bf00      	nop
 8009618:	20000020 	.word	0x20000020

0800961c <strcpy>:
 800961c:	4603      	mov	r3, r0
 800961e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009622:	f803 2b01 	strb.w	r2, [r3], #1
 8009626:	2a00      	cmp	r2, #0
 8009628:	d1f9      	bne.n	800961e <strcpy+0x2>
 800962a:	4770      	bx	lr

0800962c <__swbuf_r>:
 800962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962e:	460e      	mov	r6, r1
 8009630:	4614      	mov	r4, r2
 8009632:	4605      	mov	r5, r0
 8009634:	b118      	cbz	r0, 800963e <__swbuf_r+0x12>
 8009636:	6983      	ldr	r3, [r0, #24]
 8009638:	b90b      	cbnz	r3, 800963e <__swbuf_r+0x12>
 800963a:	f000 f9a7 	bl	800998c <__sinit>
 800963e:	4b21      	ldr	r3, [pc, #132]	; (80096c4 <__swbuf_r+0x98>)
 8009640:	429c      	cmp	r4, r3
 8009642:	d12a      	bne.n	800969a <__swbuf_r+0x6e>
 8009644:	686c      	ldr	r4, [r5, #4]
 8009646:	69a3      	ldr	r3, [r4, #24]
 8009648:	60a3      	str	r3, [r4, #8]
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	071a      	lsls	r2, r3, #28
 800964e:	d52e      	bpl.n	80096ae <__swbuf_r+0x82>
 8009650:	6923      	ldr	r3, [r4, #16]
 8009652:	b363      	cbz	r3, 80096ae <__swbuf_r+0x82>
 8009654:	6923      	ldr	r3, [r4, #16]
 8009656:	6820      	ldr	r0, [r4, #0]
 8009658:	1ac0      	subs	r0, r0, r3
 800965a:	6963      	ldr	r3, [r4, #20]
 800965c:	b2f6      	uxtb	r6, r6
 800965e:	4283      	cmp	r3, r0
 8009660:	4637      	mov	r7, r6
 8009662:	dc04      	bgt.n	800966e <__swbuf_r+0x42>
 8009664:	4621      	mov	r1, r4
 8009666:	4628      	mov	r0, r5
 8009668:	f000 f926 	bl	80098b8 <_fflush_r>
 800966c:	bb28      	cbnz	r0, 80096ba <__swbuf_r+0x8e>
 800966e:	68a3      	ldr	r3, [r4, #8]
 8009670:	3b01      	subs	r3, #1
 8009672:	60a3      	str	r3, [r4, #8]
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	1c5a      	adds	r2, r3, #1
 8009678:	6022      	str	r2, [r4, #0]
 800967a:	701e      	strb	r6, [r3, #0]
 800967c:	6963      	ldr	r3, [r4, #20]
 800967e:	3001      	adds	r0, #1
 8009680:	4283      	cmp	r3, r0
 8009682:	d004      	beq.n	800968e <__swbuf_r+0x62>
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	07db      	lsls	r3, r3, #31
 8009688:	d519      	bpl.n	80096be <__swbuf_r+0x92>
 800968a:	2e0a      	cmp	r6, #10
 800968c:	d117      	bne.n	80096be <__swbuf_r+0x92>
 800968e:	4621      	mov	r1, r4
 8009690:	4628      	mov	r0, r5
 8009692:	f000 f911 	bl	80098b8 <_fflush_r>
 8009696:	b190      	cbz	r0, 80096be <__swbuf_r+0x92>
 8009698:	e00f      	b.n	80096ba <__swbuf_r+0x8e>
 800969a:	4b0b      	ldr	r3, [pc, #44]	; (80096c8 <__swbuf_r+0x9c>)
 800969c:	429c      	cmp	r4, r3
 800969e:	d101      	bne.n	80096a4 <__swbuf_r+0x78>
 80096a0:	68ac      	ldr	r4, [r5, #8]
 80096a2:	e7d0      	b.n	8009646 <__swbuf_r+0x1a>
 80096a4:	4b09      	ldr	r3, [pc, #36]	; (80096cc <__swbuf_r+0xa0>)
 80096a6:	429c      	cmp	r4, r3
 80096a8:	bf08      	it	eq
 80096aa:	68ec      	ldreq	r4, [r5, #12]
 80096ac:	e7cb      	b.n	8009646 <__swbuf_r+0x1a>
 80096ae:	4621      	mov	r1, r4
 80096b0:	4628      	mov	r0, r5
 80096b2:	f000 f80d 	bl	80096d0 <__swsetup_r>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d0cc      	beq.n	8009654 <__swbuf_r+0x28>
 80096ba:	f04f 37ff 	mov.w	r7, #4294967295
 80096be:	4638      	mov	r0, r7
 80096c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096c2:	bf00      	nop
 80096c4:	08009eac 	.word	0x08009eac
 80096c8:	08009ecc 	.word	0x08009ecc
 80096cc:	08009e8c 	.word	0x08009e8c

080096d0 <__swsetup_r>:
 80096d0:	4b32      	ldr	r3, [pc, #200]	; (800979c <__swsetup_r+0xcc>)
 80096d2:	b570      	push	{r4, r5, r6, lr}
 80096d4:	681d      	ldr	r5, [r3, #0]
 80096d6:	4606      	mov	r6, r0
 80096d8:	460c      	mov	r4, r1
 80096da:	b125      	cbz	r5, 80096e6 <__swsetup_r+0x16>
 80096dc:	69ab      	ldr	r3, [r5, #24]
 80096de:	b913      	cbnz	r3, 80096e6 <__swsetup_r+0x16>
 80096e0:	4628      	mov	r0, r5
 80096e2:	f000 f953 	bl	800998c <__sinit>
 80096e6:	4b2e      	ldr	r3, [pc, #184]	; (80097a0 <__swsetup_r+0xd0>)
 80096e8:	429c      	cmp	r4, r3
 80096ea:	d10f      	bne.n	800970c <__swsetup_r+0x3c>
 80096ec:	686c      	ldr	r4, [r5, #4]
 80096ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	0715      	lsls	r5, r2, #28
 80096f6:	d42c      	bmi.n	8009752 <__swsetup_r+0x82>
 80096f8:	06d0      	lsls	r0, r2, #27
 80096fa:	d411      	bmi.n	8009720 <__swsetup_r+0x50>
 80096fc:	2209      	movs	r2, #9
 80096fe:	6032      	str	r2, [r6, #0]
 8009700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009704:	81a3      	strh	r3, [r4, #12]
 8009706:	f04f 30ff 	mov.w	r0, #4294967295
 800970a:	e03e      	b.n	800978a <__swsetup_r+0xba>
 800970c:	4b25      	ldr	r3, [pc, #148]	; (80097a4 <__swsetup_r+0xd4>)
 800970e:	429c      	cmp	r4, r3
 8009710:	d101      	bne.n	8009716 <__swsetup_r+0x46>
 8009712:	68ac      	ldr	r4, [r5, #8]
 8009714:	e7eb      	b.n	80096ee <__swsetup_r+0x1e>
 8009716:	4b24      	ldr	r3, [pc, #144]	; (80097a8 <__swsetup_r+0xd8>)
 8009718:	429c      	cmp	r4, r3
 800971a:	bf08      	it	eq
 800971c:	68ec      	ldreq	r4, [r5, #12]
 800971e:	e7e6      	b.n	80096ee <__swsetup_r+0x1e>
 8009720:	0751      	lsls	r1, r2, #29
 8009722:	d512      	bpl.n	800974a <__swsetup_r+0x7a>
 8009724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009726:	b141      	cbz	r1, 800973a <__swsetup_r+0x6a>
 8009728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800972c:	4299      	cmp	r1, r3
 800972e:	d002      	beq.n	8009736 <__swsetup_r+0x66>
 8009730:	4630      	mov	r0, r6
 8009732:	f000 fa19 	bl	8009b68 <_free_r>
 8009736:	2300      	movs	r3, #0
 8009738:	6363      	str	r3, [r4, #52]	; 0x34
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009740:	81a3      	strh	r3, [r4, #12]
 8009742:	2300      	movs	r3, #0
 8009744:	6063      	str	r3, [r4, #4]
 8009746:	6923      	ldr	r3, [r4, #16]
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	f043 0308 	orr.w	r3, r3, #8
 8009750:	81a3      	strh	r3, [r4, #12]
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	b94b      	cbnz	r3, 800976a <__swsetup_r+0x9a>
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800975c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009760:	d003      	beq.n	800976a <__swsetup_r+0x9a>
 8009762:	4621      	mov	r1, r4
 8009764:	4630      	mov	r0, r6
 8009766:	f000 f9bf 	bl	8009ae8 <__smakebuf_r>
 800976a:	89a2      	ldrh	r2, [r4, #12]
 800976c:	f012 0301 	ands.w	r3, r2, #1
 8009770:	d00c      	beq.n	800978c <__swsetup_r+0xbc>
 8009772:	2300      	movs	r3, #0
 8009774:	60a3      	str	r3, [r4, #8]
 8009776:	6963      	ldr	r3, [r4, #20]
 8009778:	425b      	negs	r3, r3
 800977a:	61a3      	str	r3, [r4, #24]
 800977c:	6923      	ldr	r3, [r4, #16]
 800977e:	b953      	cbnz	r3, 8009796 <__swsetup_r+0xc6>
 8009780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009784:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009788:	d1ba      	bne.n	8009700 <__swsetup_r+0x30>
 800978a:	bd70      	pop	{r4, r5, r6, pc}
 800978c:	0792      	lsls	r2, r2, #30
 800978e:	bf58      	it	pl
 8009790:	6963      	ldrpl	r3, [r4, #20]
 8009792:	60a3      	str	r3, [r4, #8]
 8009794:	e7f2      	b.n	800977c <__swsetup_r+0xac>
 8009796:	2000      	movs	r0, #0
 8009798:	e7f7      	b.n	800978a <__swsetup_r+0xba>
 800979a:	bf00      	nop
 800979c:	20000020 	.word	0x20000020
 80097a0:	08009eac 	.word	0x08009eac
 80097a4:	08009ecc 	.word	0x08009ecc
 80097a8:	08009e8c 	.word	0x08009e8c

080097ac <__sflush_r>:
 80097ac:	898a      	ldrh	r2, [r1, #12]
 80097ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b2:	4605      	mov	r5, r0
 80097b4:	0710      	lsls	r0, r2, #28
 80097b6:	460c      	mov	r4, r1
 80097b8:	d458      	bmi.n	800986c <__sflush_r+0xc0>
 80097ba:	684b      	ldr	r3, [r1, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	dc05      	bgt.n	80097cc <__sflush_r+0x20>
 80097c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	dc02      	bgt.n	80097cc <__sflush_r+0x20>
 80097c6:	2000      	movs	r0, #0
 80097c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097ce:	2e00      	cmp	r6, #0
 80097d0:	d0f9      	beq.n	80097c6 <__sflush_r+0x1a>
 80097d2:	2300      	movs	r3, #0
 80097d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097d8:	682f      	ldr	r7, [r5, #0]
 80097da:	6a21      	ldr	r1, [r4, #32]
 80097dc:	602b      	str	r3, [r5, #0]
 80097de:	d032      	beq.n	8009846 <__sflush_r+0x9a>
 80097e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097e2:	89a3      	ldrh	r3, [r4, #12]
 80097e4:	075a      	lsls	r2, r3, #29
 80097e6:	d505      	bpl.n	80097f4 <__sflush_r+0x48>
 80097e8:	6863      	ldr	r3, [r4, #4]
 80097ea:	1ac0      	subs	r0, r0, r3
 80097ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097ee:	b10b      	cbz	r3, 80097f4 <__sflush_r+0x48>
 80097f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097f2:	1ac0      	subs	r0, r0, r3
 80097f4:	2300      	movs	r3, #0
 80097f6:	4602      	mov	r2, r0
 80097f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097fa:	6a21      	ldr	r1, [r4, #32]
 80097fc:	4628      	mov	r0, r5
 80097fe:	47b0      	blx	r6
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	d106      	bne.n	8009814 <__sflush_r+0x68>
 8009806:	6829      	ldr	r1, [r5, #0]
 8009808:	291d      	cmp	r1, #29
 800980a:	d848      	bhi.n	800989e <__sflush_r+0xf2>
 800980c:	4a29      	ldr	r2, [pc, #164]	; (80098b4 <__sflush_r+0x108>)
 800980e:	40ca      	lsrs	r2, r1
 8009810:	07d6      	lsls	r6, r2, #31
 8009812:	d544      	bpl.n	800989e <__sflush_r+0xf2>
 8009814:	2200      	movs	r2, #0
 8009816:	6062      	str	r2, [r4, #4]
 8009818:	04d9      	lsls	r1, r3, #19
 800981a:	6922      	ldr	r2, [r4, #16]
 800981c:	6022      	str	r2, [r4, #0]
 800981e:	d504      	bpl.n	800982a <__sflush_r+0x7e>
 8009820:	1c42      	adds	r2, r0, #1
 8009822:	d101      	bne.n	8009828 <__sflush_r+0x7c>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	b903      	cbnz	r3, 800982a <__sflush_r+0x7e>
 8009828:	6560      	str	r0, [r4, #84]	; 0x54
 800982a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800982c:	602f      	str	r7, [r5, #0]
 800982e:	2900      	cmp	r1, #0
 8009830:	d0c9      	beq.n	80097c6 <__sflush_r+0x1a>
 8009832:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009836:	4299      	cmp	r1, r3
 8009838:	d002      	beq.n	8009840 <__sflush_r+0x94>
 800983a:	4628      	mov	r0, r5
 800983c:	f000 f994 	bl	8009b68 <_free_r>
 8009840:	2000      	movs	r0, #0
 8009842:	6360      	str	r0, [r4, #52]	; 0x34
 8009844:	e7c0      	b.n	80097c8 <__sflush_r+0x1c>
 8009846:	2301      	movs	r3, #1
 8009848:	4628      	mov	r0, r5
 800984a:	47b0      	blx	r6
 800984c:	1c41      	adds	r1, r0, #1
 800984e:	d1c8      	bne.n	80097e2 <__sflush_r+0x36>
 8009850:	682b      	ldr	r3, [r5, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0c5      	beq.n	80097e2 <__sflush_r+0x36>
 8009856:	2b1d      	cmp	r3, #29
 8009858:	d001      	beq.n	800985e <__sflush_r+0xb2>
 800985a:	2b16      	cmp	r3, #22
 800985c:	d101      	bne.n	8009862 <__sflush_r+0xb6>
 800985e:	602f      	str	r7, [r5, #0]
 8009860:	e7b1      	b.n	80097c6 <__sflush_r+0x1a>
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	e7ad      	b.n	80097c8 <__sflush_r+0x1c>
 800986c:	690f      	ldr	r7, [r1, #16]
 800986e:	2f00      	cmp	r7, #0
 8009870:	d0a9      	beq.n	80097c6 <__sflush_r+0x1a>
 8009872:	0793      	lsls	r3, r2, #30
 8009874:	680e      	ldr	r6, [r1, #0]
 8009876:	bf08      	it	eq
 8009878:	694b      	ldreq	r3, [r1, #20]
 800987a:	600f      	str	r7, [r1, #0]
 800987c:	bf18      	it	ne
 800987e:	2300      	movne	r3, #0
 8009880:	eba6 0807 	sub.w	r8, r6, r7
 8009884:	608b      	str	r3, [r1, #8]
 8009886:	f1b8 0f00 	cmp.w	r8, #0
 800988a:	dd9c      	ble.n	80097c6 <__sflush_r+0x1a>
 800988c:	4643      	mov	r3, r8
 800988e:	463a      	mov	r2, r7
 8009890:	6a21      	ldr	r1, [r4, #32]
 8009892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009894:	4628      	mov	r0, r5
 8009896:	47b0      	blx	r6
 8009898:	2800      	cmp	r0, #0
 800989a:	dc06      	bgt.n	80098aa <__sflush_r+0xfe>
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098a2:	81a3      	strh	r3, [r4, #12]
 80098a4:	f04f 30ff 	mov.w	r0, #4294967295
 80098a8:	e78e      	b.n	80097c8 <__sflush_r+0x1c>
 80098aa:	4407      	add	r7, r0
 80098ac:	eba8 0800 	sub.w	r8, r8, r0
 80098b0:	e7e9      	b.n	8009886 <__sflush_r+0xda>
 80098b2:	bf00      	nop
 80098b4:	20400001 	.word	0x20400001

080098b8 <_fflush_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	690b      	ldr	r3, [r1, #16]
 80098bc:	4605      	mov	r5, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	b1db      	cbz	r3, 80098fa <_fflush_r+0x42>
 80098c2:	b118      	cbz	r0, 80098cc <_fflush_r+0x14>
 80098c4:	6983      	ldr	r3, [r0, #24]
 80098c6:	b90b      	cbnz	r3, 80098cc <_fflush_r+0x14>
 80098c8:	f000 f860 	bl	800998c <__sinit>
 80098cc:	4b0c      	ldr	r3, [pc, #48]	; (8009900 <_fflush_r+0x48>)
 80098ce:	429c      	cmp	r4, r3
 80098d0:	d109      	bne.n	80098e6 <_fflush_r+0x2e>
 80098d2:	686c      	ldr	r4, [r5, #4]
 80098d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d8:	b17b      	cbz	r3, 80098fa <_fflush_r+0x42>
 80098da:	4621      	mov	r1, r4
 80098dc:	4628      	mov	r0, r5
 80098de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098e2:	f7ff bf63 	b.w	80097ac <__sflush_r>
 80098e6:	4b07      	ldr	r3, [pc, #28]	; (8009904 <_fflush_r+0x4c>)
 80098e8:	429c      	cmp	r4, r3
 80098ea:	d101      	bne.n	80098f0 <_fflush_r+0x38>
 80098ec:	68ac      	ldr	r4, [r5, #8]
 80098ee:	e7f1      	b.n	80098d4 <_fflush_r+0x1c>
 80098f0:	4b05      	ldr	r3, [pc, #20]	; (8009908 <_fflush_r+0x50>)
 80098f2:	429c      	cmp	r4, r3
 80098f4:	bf08      	it	eq
 80098f6:	68ec      	ldreq	r4, [r5, #12]
 80098f8:	e7ec      	b.n	80098d4 <_fflush_r+0x1c>
 80098fa:	2000      	movs	r0, #0
 80098fc:	bd38      	pop	{r3, r4, r5, pc}
 80098fe:	bf00      	nop
 8009900:	08009eac 	.word	0x08009eac
 8009904:	08009ecc 	.word	0x08009ecc
 8009908:	08009e8c 	.word	0x08009e8c

0800990c <std>:
 800990c:	2300      	movs	r3, #0
 800990e:	b510      	push	{r4, lr}
 8009910:	4604      	mov	r4, r0
 8009912:	e9c0 3300 	strd	r3, r3, [r0]
 8009916:	6083      	str	r3, [r0, #8]
 8009918:	8181      	strh	r1, [r0, #12]
 800991a:	6643      	str	r3, [r0, #100]	; 0x64
 800991c:	81c2      	strh	r2, [r0, #14]
 800991e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009922:	6183      	str	r3, [r0, #24]
 8009924:	4619      	mov	r1, r3
 8009926:	2208      	movs	r2, #8
 8009928:	305c      	adds	r0, #92	; 0x5c
 800992a:	f7ff fe0b 	bl	8009544 <memset>
 800992e:	4b05      	ldr	r3, [pc, #20]	; (8009944 <std+0x38>)
 8009930:	6263      	str	r3, [r4, #36]	; 0x24
 8009932:	4b05      	ldr	r3, [pc, #20]	; (8009948 <std+0x3c>)
 8009934:	62a3      	str	r3, [r4, #40]	; 0x28
 8009936:	4b05      	ldr	r3, [pc, #20]	; (800994c <std+0x40>)
 8009938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800993a:	4b05      	ldr	r3, [pc, #20]	; (8009950 <std+0x44>)
 800993c:	6224      	str	r4, [r4, #32]
 800993e:	6323      	str	r3, [r4, #48]	; 0x30
 8009940:	bd10      	pop	{r4, pc}
 8009942:	bf00      	nop
 8009944:	08009cd9 	.word	0x08009cd9
 8009948:	08009cfb 	.word	0x08009cfb
 800994c:	08009d33 	.word	0x08009d33
 8009950:	08009d57 	.word	0x08009d57

08009954 <_cleanup_r>:
 8009954:	4901      	ldr	r1, [pc, #4]	; (800995c <_cleanup_r+0x8>)
 8009956:	f000 b885 	b.w	8009a64 <_fwalk_reent>
 800995a:	bf00      	nop
 800995c:	080098b9 	.word	0x080098b9

08009960 <__sfmoreglue>:
 8009960:	b570      	push	{r4, r5, r6, lr}
 8009962:	1e4a      	subs	r2, r1, #1
 8009964:	2568      	movs	r5, #104	; 0x68
 8009966:	4355      	muls	r5, r2
 8009968:	460e      	mov	r6, r1
 800996a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800996e:	f000 f949 	bl	8009c04 <_malloc_r>
 8009972:	4604      	mov	r4, r0
 8009974:	b140      	cbz	r0, 8009988 <__sfmoreglue+0x28>
 8009976:	2100      	movs	r1, #0
 8009978:	e9c0 1600 	strd	r1, r6, [r0]
 800997c:	300c      	adds	r0, #12
 800997e:	60a0      	str	r0, [r4, #8]
 8009980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009984:	f7ff fdde 	bl	8009544 <memset>
 8009988:	4620      	mov	r0, r4
 800998a:	bd70      	pop	{r4, r5, r6, pc}

0800998c <__sinit>:
 800998c:	6983      	ldr	r3, [r0, #24]
 800998e:	b510      	push	{r4, lr}
 8009990:	4604      	mov	r4, r0
 8009992:	bb33      	cbnz	r3, 80099e2 <__sinit+0x56>
 8009994:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009998:	6503      	str	r3, [r0, #80]	; 0x50
 800999a:	4b12      	ldr	r3, [pc, #72]	; (80099e4 <__sinit+0x58>)
 800999c:	4a12      	ldr	r2, [pc, #72]	; (80099e8 <__sinit+0x5c>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6282      	str	r2, [r0, #40]	; 0x28
 80099a2:	4298      	cmp	r0, r3
 80099a4:	bf04      	itt	eq
 80099a6:	2301      	moveq	r3, #1
 80099a8:	6183      	streq	r3, [r0, #24]
 80099aa:	f000 f81f 	bl	80099ec <__sfp>
 80099ae:	6060      	str	r0, [r4, #4]
 80099b0:	4620      	mov	r0, r4
 80099b2:	f000 f81b 	bl	80099ec <__sfp>
 80099b6:	60a0      	str	r0, [r4, #8]
 80099b8:	4620      	mov	r0, r4
 80099ba:	f000 f817 	bl	80099ec <__sfp>
 80099be:	2200      	movs	r2, #0
 80099c0:	60e0      	str	r0, [r4, #12]
 80099c2:	2104      	movs	r1, #4
 80099c4:	6860      	ldr	r0, [r4, #4]
 80099c6:	f7ff ffa1 	bl	800990c <std>
 80099ca:	2201      	movs	r2, #1
 80099cc:	2109      	movs	r1, #9
 80099ce:	68a0      	ldr	r0, [r4, #8]
 80099d0:	f7ff ff9c 	bl	800990c <std>
 80099d4:	2202      	movs	r2, #2
 80099d6:	2112      	movs	r1, #18
 80099d8:	68e0      	ldr	r0, [r4, #12]
 80099da:	f7ff ff97 	bl	800990c <std>
 80099de:	2301      	movs	r3, #1
 80099e0:	61a3      	str	r3, [r4, #24]
 80099e2:	bd10      	pop	{r4, pc}
 80099e4:	08009e88 	.word	0x08009e88
 80099e8:	08009955 	.word	0x08009955

080099ec <__sfp>:
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	4b1b      	ldr	r3, [pc, #108]	; (8009a5c <__sfp+0x70>)
 80099f0:	681e      	ldr	r6, [r3, #0]
 80099f2:	69b3      	ldr	r3, [r6, #24]
 80099f4:	4607      	mov	r7, r0
 80099f6:	b913      	cbnz	r3, 80099fe <__sfp+0x12>
 80099f8:	4630      	mov	r0, r6
 80099fa:	f7ff ffc7 	bl	800998c <__sinit>
 80099fe:	3648      	adds	r6, #72	; 0x48
 8009a00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	d503      	bpl.n	8009a10 <__sfp+0x24>
 8009a08:	6833      	ldr	r3, [r6, #0]
 8009a0a:	b133      	cbz	r3, 8009a1a <__sfp+0x2e>
 8009a0c:	6836      	ldr	r6, [r6, #0]
 8009a0e:	e7f7      	b.n	8009a00 <__sfp+0x14>
 8009a10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a14:	b16d      	cbz	r5, 8009a32 <__sfp+0x46>
 8009a16:	3468      	adds	r4, #104	; 0x68
 8009a18:	e7f4      	b.n	8009a04 <__sfp+0x18>
 8009a1a:	2104      	movs	r1, #4
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	f7ff ff9f 	bl	8009960 <__sfmoreglue>
 8009a22:	6030      	str	r0, [r6, #0]
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d1f1      	bne.n	8009a0c <__sfp+0x20>
 8009a28:	230c      	movs	r3, #12
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	4620      	mov	r0, r4
 8009a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a32:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <__sfp+0x74>)
 8009a34:	6665      	str	r5, [r4, #100]	; 0x64
 8009a36:	e9c4 5500 	strd	r5, r5, [r4]
 8009a3a:	60a5      	str	r5, [r4, #8]
 8009a3c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009a40:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009a44:	2208      	movs	r2, #8
 8009a46:	4629      	mov	r1, r5
 8009a48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a4c:	f7ff fd7a 	bl	8009544 <memset>
 8009a50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a58:	e7e9      	b.n	8009a2e <__sfp+0x42>
 8009a5a:	bf00      	nop
 8009a5c:	08009e88 	.word	0x08009e88
 8009a60:	ffff0001 	.word	0xffff0001

08009a64 <_fwalk_reent>:
 8009a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a68:	4680      	mov	r8, r0
 8009a6a:	4689      	mov	r9, r1
 8009a6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a70:	2600      	movs	r6, #0
 8009a72:	b914      	cbnz	r4, 8009a7a <_fwalk_reent+0x16>
 8009a74:	4630      	mov	r0, r6
 8009a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a7a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009a7e:	3f01      	subs	r7, #1
 8009a80:	d501      	bpl.n	8009a86 <_fwalk_reent+0x22>
 8009a82:	6824      	ldr	r4, [r4, #0]
 8009a84:	e7f5      	b.n	8009a72 <_fwalk_reent+0xe>
 8009a86:	89ab      	ldrh	r3, [r5, #12]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d907      	bls.n	8009a9c <_fwalk_reent+0x38>
 8009a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a90:	3301      	adds	r3, #1
 8009a92:	d003      	beq.n	8009a9c <_fwalk_reent+0x38>
 8009a94:	4629      	mov	r1, r5
 8009a96:	4640      	mov	r0, r8
 8009a98:	47c8      	blx	r9
 8009a9a:	4306      	orrs	r6, r0
 8009a9c:	3568      	adds	r5, #104	; 0x68
 8009a9e:	e7ee      	b.n	8009a7e <_fwalk_reent+0x1a>

08009aa0 <__swhatbuf_r>:
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	460e      	mov	r6, r1
 8009aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa8:	2900      	cmp	r1, #0
 8009aaa:	b096      	sub	sp, #88	; 0x58
 8009aac:	4614      	mov	r4, r2
 8009aae:	461d      	mov	r5, r3
 8009ab0:	da07      	bge.n	8009ac2 <__swhatbuf_r+0x22>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	602b      	str	r3, [r5, #0]
 8009ab6:	89b3      	ldrh	r3, [r6, #12]
 8009ab8:	061a      	lsls	r2, r3, #24
 8009aba:	d410      	bmi.n	8009ade <__swhatbuf_r+0x3e>
 8009abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ac0:	e00e      	b.n	8009ae0 <__swhatbuf_r+0x40>
 8009ac2:	466a      	mov	r2, sp
 8009ac4:	f000 f96e 	bl	8009da4 <_fstat_r>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	dbf2      	blt.n	8009ab2 <__swhatbuf_r+0x12>
 8009acc:	9a01      	ldr	r2, [sp, #4]
 8009ace:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ad2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ad6:	425a      	negs	r2, r3
 8009ad8:	415a      	adcs	r2, r3
 8009ada:	602a      	str	r2, [r5, #0]
 8009adc:	e7ee      	b.n	8009abc <__swhatbuf_r+0x1c>
 8009ade:	2340      	movs	r3, #64	; 0x40
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	6023      	str	r3, [r4, #0]
 8009ae4:	b016      	add	sp, #88	; 0x58
 8009ae6:	bd70      	pop	{r4, r5, r6, pc}

08009ae8 <__smakebuf_r>:
 8009ae8:	898b      	ldrh	r3, [r1, #12]
 8009aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009aec:	079d      	lsls	r5, r3, #30
 8009aee:	4606      	mov	r6, r0
 8009af0:	460c      	mov	r4, r1
 8009af2:	d507      	bpl.n	8009b04 <__smakebuf_r+0x1c>
 8009af4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009af8:	6023      	str	r3, [r4, #0]
 8009afa:	6123      	str	r3, [r4, #16]
 8009afc:	2301      	movs	r3, #1
 8009afe:	6163      	str	r3, [r4, #20]
 8009b00:	b002      	add	sp, #8
 8009b02:	bd70      	pop	{r4, r5, r6, pc}
 8009b04:	ab01      	add	r3, sp, #4
 8009b06:	466a      	mov	r2, sp
 8009b08:	f7ff ffca 	bl	8009aa0 <__swhatbuf_r>
 8009b0c:	9900      	ldr	r1, [sp, #0]
 8009b0e:	4605      	mov	r5, r0
 8009b10:	4630      	mov	r0, r6
 8009b12:	f000 f877 	bl	8009c04 <_malloc_r>
 8009b16:	b948      	cbnz	r0, 8009b2c <__smakebuf_r+0x44>
 8009b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b1c:	059a      	lsls	r2, r3, #22
 8009b1e:	d4ef      	bmi.n	8009b00 <__smakebuf_r+0x18>
 8009b20:	f023 0303 	bic.w	r3, r3, #3
 8009b24:	f043 0302 	orr.w	r3, r3, #2
 8009b28:	81a3      	strh	r3, [r4, #12]
 8009b2a:	e7e3      	b.n	8009af4 <__smakebuf_r+0xc>
 8009b2c:	4b0d      	ldr	r3, [pc, #52]	; (8009b64 <__smakebuf_r+0x7c>)
 8009b2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	6020      	str	r0, [r4, #0]
 8009b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	9b00      	ldr	r3, [sp, #0]
 8009b3c:	6163      	str	r3, [r4, #20]
 8009b3e:	9b01      	ldr	r3, [sp, #4]
 8009b40:	6120      	str	r0, [r4, #16]
 8009b42:	b15b      	cbz	r3, 8009b5c <__smakebuf_r+0x74>
 8009b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b48:	4630      	mov	r0, r6
 8009b4a:	f000 f93d 	bl	8009dc8 <_isatty_r>
 8009b4e:	b128      	cbz	r0, 8009b5c <__smakebuf_r+0x74>
 8009b50:	89a3      	ldrh	r3, [r4, #12]
 8009b52:	f023 0303 	bic.w	r3, r3, #3
 8009b56:	f043 0301 	orr.w	r3, r3, #1
 8009b5a:	81a3      	strh	r3, [r4, #12]
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	431d      	orrs	r5, r3
 8009b60:	81a5      	strh	r5, [r4, #12]
 8009b62:	e7cd      	b.n	8009b00 <__smakebuf_r+0x18>
 8009b64:	08009955 	.word	0x08009955

08009b68 <_free_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	2900      	cmp	r1, #0
 8009b6e:	d045      	beq.n	8009bfc <_free_r+0x94>
 8009b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b74:	1f0c      	subs	r4, r1, #4
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	bfb8      	it	lt
 8009b7a:	18e4      	addlt	r4, r4, r3
 8009b7c:	f000 f946 	bl	8009e0c <__malloc_lock>
 8009b80:	4a1f      	ldr	r2, [pc, #124]	; (8009c00 <_free_r+0x98>)
 8009b82:	6813      	ldr	r3, [r2, #0]
 8009b84:	4610      	mov	r0, r2
 8009b86:	b933      	cbnz	r3, 8009b96 <_free_r+0x2e>
 8009b88:	6063      	str	r3, [r4, #4]
 8009b8a:	6014      	str	r4, [r2, #0]
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b92:	f000 b93c 	b.w	8009e0e <__malloc_unlock>
 8009b96:	42a3      	cmp	r3, r4
 8009b98:	d90c      	bls.n	8009bb4 <_free_r+0x4c>
 8009b9a:	6821      	ldr	r1, [r4, #0]
 8009b9c:	1862      	adds	r2, r4, r1
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	bf04      	itt	eq
 8009ba2:	681a      	ldreq	r2, [r3, #0]
 8009ba4:	685b      	ldreq	r3, [r3, #4]
 8009ba6:	6063      	str	r3, [r4, #4]
 8009ba8:	bf04      	itt	eq
 8009baa:	1852      	addeq	r2, r2, r1
 8009bac:	6022      	streq	r2, [r4, #0]
 8009bae:	6004      	str	r4, [r0, #0]
 8009bb0:	e7ec      	b.n	8009b8c <_free_r+0x24>
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	b10a      	cbz	r2, 8009bbc <_free_r+0x54>
 8009bb8:	42a2      	cmp	r2, r4
 8009bba:	d9fa      	bls.n	8009bb2 <_free_r+0x4a>
 8009bbc:	6819      	ldr	r1, [r3, #0]
 8009bbe:	1858      	adds	r0, r3, r1
 8009bc0:	42a0      	cmp	r0, r4
 8009bc2:	d10b      	bne.n	8009bdc <_free_r+0x74>
 8009bc4:	6820      	ldr	r0, [r4, #0]
 8009bc6:	4401      	add	r1, r0
 8009bc8:	1858      	adds	r0, r3, r1
 8009bca:	4282      	cmp	r2, r0
 8009bcc:	6019      	str	r1, [r3, #0]
 8009bce:	d1dd      	bne.n	8009b8c <_free_r+0x24>
 8009bd0:	6810      	ldr	r0, [r2, #0]
 8009bd2:	6852      	ldr	r2, [r2, #4]
 8009bd4:	605a      	str	r2, [r3, #4]
 8009bd6:	4401      	add	r1, r0
 8009bd8:	6019      	str	r1, [r3, #0]
 8009bda:	e7d7      	b.n	8009b8c <_free_r+0x24>
 8009bdc:	d902      	bls.n	8009be4 <_free_r+0x7c>
 8009bde:	230c      	movs	r3, #12
 8009be0:	602b      	str	r3, [r5, #0]
 8009be2:	e7d3      	b.n	8009b8c <_free_r+0x24>
 8009be4:	6820      	ldr	r0, [r4, #0]
 8009be6:	1821      	adds	r1, r4, r0
 8009be8:	428a      	cmp	r2, r1
 8009bea:	bf04      	itt	eq
 8009bec:	6811      	ldreq	r1, [r2, #0]
 8009bee:	6852      	ldreq	r2, [r2, #4]
 8009bf0:	6062      	str	r2, [r4, #4]
 8009bf2:	bf04      	itt	eq
 8009bf4:	1809      	addeq	r1, r1, r0
 8009bf6:	6021      	streq	r1, [r4, #0]
 8009bf8:	605c      	str	r4, [r3, #4]
 8009bfa:	e7c7      	b.n	8009b8c <_free_r+0x24>
 8009bfc:	bd38      	pop	{r3, r4, r5, pc}
 8009bfe:	bf00      	nop
 8009c00:	20000308 	.word	0x20000308

08009c04 <_malloc_r>:
 8009c04:	b570      	push	{r4, r5, r6, lr}
 8009c06:	1ccd      	adds	r5, r1, #3
 8009c08:	f025 0503 	bic.w	r5, r5, #3
 8009c0c:	3508      	adds	r5, #8
 8009c0e:	2d0c      	cmp	r5, #12
 8009c10:	bf38      	it	cc
 8009c12:	250c      	movcc	r5, #12
 8009c14:	2d00      	cmp	r5, #0
 8009c16:	4606      	mov	r6, r0
 8009c18:	db01      	blt.n	8009c1e <_malloc_r+0x1a>
 8009c1a:	42a9      	cmp	r1, r5
 8009c1c:	d903      	bls.n	8009c26 <_malloc_r+0x22>
 8009c1e:	230c      	movs	r3, #12
 8009c20:	6033      	str	r3, [r6, #0]
 8009c22:	2000      	movs	r0, #0
 8009c24:	bd70      	pop	{r4, r5, r6, pc}
 8009c26:	f000 f8f1 	bl	8009e0c <__malloc_lock>
 8009c2a:	4a21      	ldr	r2, [pc, #132]	; (8009cb0 <_malloc_r+0xac>)
 8009c2c:	6814      	ldr	r4, [r2, #0]
 8009c2e:	4621      	mov	r1, r4
 8009c30:	b991      	cbnz	r1, 8009c58 <_malloc_r+0x54>
 8009c32:	4c20      	ldr	r4, [pc, #128]	; (8009cb4 <_malloc_r+0xb0>)
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	b91b      	cbnz	r3, 8009c40 <_malloc_r+0x3c>
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f000 f83d 	bl	8009cb8 <_sbrk_r>
 8009c3e:	6020      	str	r0, [r4, #0]
 8009c40:	4629      	mov	r1, r5
 8009c42:	4630      	mov	r0, r6
 8009c44:	f000 f838 	bl	8009cb8 <_sbrk_r>
 8009c48:	1c43      	adds	r3, r0, #1
 8009c4a:	d124      	bne.n	8009c96 <_malloc_r+0x92>
 8009c4c:	230c      	movs	r3, #12
 8009c4e:	6033      	str	r3, [r6, #0]
 8009c50:	4630      	mov	r0, r6
 8009c52:	f000 f8dc 	bl	8009e0e <__malloc_unlock>
 8009c56:	e7e4      	b.n	8009c22 <_malloc_r+0x1e>
 8009c58:	680b      	ldr	r3, [r1, #0]
 8009c5a:	1b5b      	subs	r3, r3, r5
 8009c5c:	d418      	bmi.n	8009c90 <_malloc_r+0x8c>
 8009c5e:	2b0b      	cmp	r3, #11
 8009c60:	d90f      	bls.n	8009c82 <_malloc_r+0x7e>
 8009c62:	600b      	str	r3, [r1, #0]
 8009c64:	50cd      	str	r5, [r1, r3]
 8009c66:	18cc      	adds	r4, r1, r3
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f000 f8d0 	bl	8009e0e <__malloc_unlock>
 8009c6e:	f104 000b 	add.w	r0, r4, #11
 8009c72:	1d23      	adds	r3, r4, #4
 8009c74:	f020 0007 	bic.w	r0, r0, #7
 8009c78:	1ac3      	subs	r3, r0, r3
 8009c7a:	d0d3      	beq.n	8009c24 <_malloc_r+0x20>
 8009c7c:	425a      	negs	r2, r3
 8009c7e:	50e2      	str	r2, [r4, r3]
 8009c80:	e7d0      	b.n	8009c24 <_malloc_r+0x20>
 8009c82:	428c      	cmp	r4, r1
 8009c84:	684b      	ldr	r3, [r1, #4]
 8009c86:	bf16      	itet	ne
 8009c88:	6063      	strne	r3, [r4, #4]
 8009c8a:	6013      	streq	r3, [r2, #0]
 8009c8c:	460c      	movne	r4, r1
 8009c8e:	e7eb      	b.n	8009c68 <_malloc_r+0x64>
 8009c90:	460c      	mov	r4, r1
 8009c92:	6849      	ldr	r1, [r1, #4]
 8009c94:	e7cc      	b.n	8009c30 <_malloc_r+0x2c>
 8009c96:	1cc4      	adds	r4, r0, #3
 8009c98:	f024 0403 	bic.w	r4, r4, #3
 8009c9c:	42a0      	cmp	r0, r4
 8009c9e:	d005      	beq.n	8009cac <_malloc_r+0xa8>
 8009ca0:	1a21      	subs	r1, r4, r0
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f000 f808 	bl	8009cb8 <_sbrk_r>
 8009ca8:	3001      	adds	r0, #1
 8009caa:	d0cf      	beq.n	8009c4c <_malloc_r+0x48>
 8009cac:	6025      	str	r5, [r4, #0]
 8009cae:	e7db      	b.n	8009c68 <_malloc_r+0x64>
 8009cb0:	20000308 	.word	0x20000308
 8009cb4:	2000030c 	.word	0x2000030c

08009cb8 <_sbrk_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	4c06      	ldr	r4, [pc, #24]	; (8009cd4 <_sbrk_r+0x1c>)
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	4608      	mov	r0, r1
 8009cc2:	6023      	str	r3, [r4, #0]
 8009cc4:	f7fa fbcc 	bl	8004460 <_sbrk>
 8009cc8:	1c43      	adds	r3, r0, #1
 8009cca:	d102      	bne.n	8009cd2 <_sbrk_r+0x1a>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	b103      	cbz	r3, 8009cd2 <_sbrk_r+0x1a>
 8009cd0:	602b      	str	r3, [r5, #0]
 8009cd2:	bd38      	pop	{r3, r4, r5, pc}
 8009cd4:	200085ec 	.word	0x200085ec

08009cd8 <__sread>:
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	460c      	mov	r4, r1
 8009cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce0:	f000 f896 	bl	8009e10 <_read_r>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	bfab      	itete	ge
 8009ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cea:	89a3      	ldrhlt	r3, [r4, #12]
 8009cec:	181b      	addge	r3, r3, r0
 8009cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cf2:	bfac      	ite	ge
 8009cf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cf6:	81a3      	strhlt	r3, [r4, #12]
 8009cf8:	bd10      	pop	{r4, pc}

08009cfa <__swrite>:
 8009cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfe:	461f      	mov	r7, r3
 8009d00:	898b      	ldrh	r3, [r1, #12]
 8009d02:	05db      	lsls	r3, r3, #23
 8009d04:	4605      	mov	r5, r0
 8009d06:	460c      	mov	r4, r1
 8009d08:	4616      	mov	r6, r2
 8009d0a:	d505      	bpl.n	8009d18 <__swrite+0x1e>
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d14:	f000 f868 	bl	8009de8 <_lseek_r>
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d22:	81a3      	strh	r3, [r4, #12]
 8009d24:	4632      	mov	r2, r6
 8009d26:	463b      	mov	r3, r7
 8009d28:	4628      	mov	r0, r5
 8009d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2e:	f000 b817 	b.w	8009d60 <_write_r>

08009d32 <__sseek>:
 8009d32:	b510      	push	{r4, lr}
 8009d34:	460c      	mov	r4, r1
 8009d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d3a:	f000 f855 	bl	8009de8 <_lseek_r>
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	bf15      	itete	ne
 8009d44:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d4e:	81a3      	strheq	r3, [r4, #12]
 8009d50:	bf18      	it	ne
 8009d52:	81a3      	strhne	r3, [r4, #12]
 8009d54:	bd10      	pop	{r4, pc}

08009d56 <__sclose>:
 8009d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d5a:	f000 b813 	b.w	8009d84 <_close_r>
	...

08009d60 <_write_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4c07      	ldr	r4, [pc, #28]	; (8009d80 <_write_r+0x20>)
 8009d64:	4605      	mov	r5, r0
 8009d66:	4608      	mov	r0, r1
 8009d68:	4611      	mov	r1, r2
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	6022      	str	r2, [r4, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f7fa fb25 	bl	80043be <_write>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	d102      	bne.n	8009d7e <_write_r+0x1e>
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	b103      	cbz	r3, 8009d7e <_write_r+0x1e>
 8009d7c:	602b      	str	r3, [r5, #0]
 8009d7e:	bd38      	pop	{r3, r4, r5, pc}
 8009d80:	200085ec 	.word	0x200085ec

08009d84 <_close_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	4c06      	ldr	r4, [pc, #24]	; (8009da0 <_close_r+0x1c>)
 8009d88:	2300      	movs	r3, #0
 8009d8a:	4605      	mov	r5, r0
 8009d8c:	4608      	mov	r0, r1
 8009d8e:	6023      	str	r3, [r4, #0]
 8009d90:	f7fa fb31 	bl	80043f6 <_close>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_close_r+0x1a>
 8009d98:	6823      	ldr	r3, [r4, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_close_r+0x1a>
 8009d9c:	602b      	str	r3, [r5, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	200085ec 	.word	0x200085ec

08009da4 <_fstat_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4c07      	ldr	r4, [pc, #28]	; (8009dc4 <_fstat_r+0x20>)
 8009da8:	2300      	movs	r3, #0
 8009daa:	4605      	mov	r5, r0
 8009dac:	4608      	mov	r0, r1
 8009dae:	4611      	mov	r1, r2
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	f7fa fb2c 	bl	800440e <_fstat>
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	d102      	bne.n	8009dc0 <_fstat_r+0x1c>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	b103      	cbz	r3, 8009dc0 <_fstat_r+0x1c>
 8009dbe:	602b      	str	r3, [r5, #0]
 8009dc0:	bd38      	pop	{r3, r4, r5, pc}
 8009dc2:	bf00      	nop
 8009dc4:	200085ec 	.word	0x200085ec

08009dc8 <_isatty_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4c06      	ldr	r4, [pc, #24]	; (8009de4 <_isatty_r+0x1c>)
 8009dcc:	2300      	movs	r3, #0
 8009dce:	4605      	mov	r5, r0
 8009dd0:	4608      	mov	r0, r1
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	f7fa fb2b 	bl	800442e <_isatty>
 8009dd8:	1c43      	adds	r3, r0, #1
 8009dda:	d102      	bne.n	8009de2 <_isatty_r+0x1a>
 8009ddc:	6823      	ldr	r3, [r4, #0]
 8009dde:	b103      	cbz	r3, 8009de2 <_isatty_r+0x1a>
 8009de0:	602b      	str	r3, [r5, #0]
 8009de2:	bd38      	pop	{r3, r4, r5, pc}
 8009de4:	200085ec 	.word	0x200085ec

08009de8 <_lseek_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4c07      	ldr	r4, [pc, #28]	; (8009e08 <_lseek_r+0x20>)
 8009dec:	4605      	mov	r5, r0
 8009dee:	4608      	mov	r0, r1
 8009df0:	4611      	mov	r1, r2
 8009df2:	2200      	movs	r2, #0
 8009df4:	6022      	str	r2, [r4, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	f7fa fb24 	bl	8004444 <_lseek>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d102      	bne.n	8009e06 <_lseek_r+0x1e>
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	b103      	cbz	r3, 8009e06 <_lseek_r+0x1e>
 8009e04:	602b      	str	r3, [r5, #0]
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	200085ec 	.word	0x200085ec

08009e0c <__malloc_lock>:
 8009e0c:	4770      	bx	lr

08009e0e <__malloc_unlock>:
 8009e0e:	4770      	bx	lr

08009e10 <_read_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	4c07      	ldr	r4, [pc, #28]	; (8009e30 <_read_r+0x20>)
 8009e14:	4605      	mov	r5, r0
 8009e16:	4608      	mov	r0, r1
 8009e18:	4611      	mov	r1, r2
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	6022      	str	r2, [r4, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	f7fa fab0 	bl	8004384 <_read>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_read_r+0x1e>
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_read_r+0x1e>
 8009e2c:	602b      	str	r3, [r5, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	200085ec 	.word	0x200085ec

08009e34 <_init>:
 8009e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e36:	bf00      	nop
 8009e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e3a:	bc08      	pop	{r3}
 8009e3c:	469e      	mov	lr, r3
 8009e3e:	4770      	bx	lr

08009e40 <_fini>:
 8009e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e42:	bf00      	nop
 8009e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e46:	bc08      	pop	{r3}
 8009e48:	469e      	mov	lr, r3
 8009e4a:	4770      	bx	lr
