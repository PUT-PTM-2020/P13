
MP3_PLAYER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008178  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08008308  08008308  00018308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083ec  080083ec  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080083ec  080083ec  000183ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083f4  080083f4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083f4  080083f4  000183f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083f8  080083f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080083fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008290  2000007c  08008478  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000830c  08008478  0002830c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ff3  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b6e  00000000  00000000  0003409f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001410  00000000  00000000  00036c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b8  00000000  00000000  00038020  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e74  00000000  00000000  000392d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee54  00000000  00000000  0005d14c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d666f  00000000  00000000  0006bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014260f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d1c  00000000  00000000  0014268c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082f0 	.word	0x080082f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080082f0 	.word	0x080082f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <DESELECT>:

static
inline void DESELECT(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <xmit_spi>:

extern SPI_HandleTypeDef hspi3;

static
void xmit_spi(BYTE Data)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 80005a6:	bf00      	nop
 80005a8:	4808      	ldr	r0, [pc, #32]	; (80005cc <xmit_spi+0x30>)
 80005aa:	f005 fc8f 	bl	8005ecc <HAL_SPI_GetState>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d1f9      	bne.n	80005a8 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi3, &Data, 1, 5000);
 80005b4:	1df9      	adds	r1, r7, #7
 80005b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <xmit_spi+0x30>)
 80005be:	f005 f9af 	bl	8005920 <HAL_SPI_Transmit>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000170 	.word	0x20000170

080005d0 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 80005d6:	23ff      	movs	r3, #255	; 0xff
 80005d8:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 80005de:	bf00      	nop
 80005e0:	4809      	ldr	r0, [pc, #36]	; (8000608 <rcvr_spi+0x38>)
 80005e2:	f005 fc73 	bl	8005ecc <HAL_SPI_GetState>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d1f9      	bne.n	80005e0 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi3, &Dummy, &Data, 1, 5000);
 80005ec:	1dba      	adds	r2, r7, #6
 80005ee:	1df9      	adds	r1, r7, #7
 80005f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2301      	movs	r3, #1
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <rcvr_spi+0x38>)
 80005fa:	f005 fac5 	bl	8005b88 <HAL_SPI_TransmitReceive>

	return Data;
 80005fe:	79bb      	ldrb	r3, [r7, #6]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000170 	.word	0x20000170

0800060c <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8000614:	f7ff ffdc 	bl	80005d0 <rcvr_spi>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	701a      	strb	r2, [r3, #0]
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <wait_ready+0x34>)
 8000630:	2232      	movs	r2, #50	; 0x32
 8000632:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8000634:	f7ff ffcc 	bl	80005d0 <rcvr_spi>
	do
		res = rcvr_spi();
 8000638:	f7ff ffca 	bl	80005d0 <rcvr_spi>
 800063c:	4603      	mov	r3, r0
 800063e:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2bff      	cmp	r3, #255	; 0xff
 8000644:	d004      	beq.n	8000650 <wait_ready+0x28>
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <wait_ready+0x34>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1f3      	bne.n	8000638 <wait_ready+0x10>

	return res;
 8000650:	79fb      	ldrb	r3, [r7, #7]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000099 	.word	0x20000099

08000660 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8000666:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800066a:	60bb      	str	r3, [r7, #8]

	DESELECT();
 800066c:	f7ff ff8f 	bl	800058e <DESELECT>

	for (i = 0; i < 10; i++)
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]
 8000674:	e005      	b.n	8000682 <power_on+0x22>
		xmit_spi(0xFF);
 8000676:	20ff      	movs	r0, #255	; 0xff
 8000678:	f7ff ff90 	bl	800059c <xmit_spi>
	for (i = 0; i < 10; i++)
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	3301      	adds	r3, #1
 8000680:	73fb      	strb	r3, [r7, #15]
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	2b09      	cmp	r3, #9
 8000686:	d9f6      	bls.n	8000676 <power_on+0x16>

	SELECT();
 8000688:	f7ff ff7a 	bl	8000580 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 800068c:	2340      	movs	r3, #64	; 0x40
 800068e:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 80006a0:	2395      	movs	r3, #149	; 0x95
 80006a2:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	e00b      	b.n	80006c2 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	f107 0210 	add.w	r2, r7, #16
 80006b0:	4413      	add	r3, r2
 80006b2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff70 	bl	800059c <xmit_spi>
	for (i = 0; i < 6; i++)
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	3301      	adds	r3, #1
 80006c0:	73fb      	strb	r3, [r7, #15]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2b05      	cmp	r3, #5
 80006c6:	d9f0      	bls.n	80006aa <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 80006c8:	e002      	b.n	80006d0 <power_on+0x70>
		Count--;
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 80006d0:	f7ff ff7e 	bl	80005d0 <rcvr_spi>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d002      	beq.n	80006e0 <power_on+0x80>
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f4      	bne.n	80006ca <power_on+0x6a>

	DESELECT();
 80006e0:	f7ff ff55 	bl	800058e <DESELECT>
	xmit_spi(0XFF);
 80006e4:	20ff      	movs	r0, #255	; 0xff
 80006e6:	f7ff ff59 	bl	800059c <xmit_spi>

	PowerFlag = 1;
 80006ea:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <power_on+0x98>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000009b 	.word	0x2000009b

080006fc <power_off>:

static
void power_off(void) {
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <power_off+0x14>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	2000009b 	.word	0x2000009b

08000714 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <rcvr_datablock+0x68>)
 8000720:	220a      	movs	r2, #10
 8000722:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000724:	f7ff ff54 	bl	80005d0 <rcvr_spi>
 8000728:	4603      	mov	r3, r0
 800072a:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	2bff      	cmp	r3, #255	; 0xff
 8000730:	d104      	bne.n	800073c <rcvr_datablock+0x28>
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <rcvr_datablock+0x68>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1f3      	bne.n	8000724 <rcvr_datablock+0x10>
	if (token != 0xFE)
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	2bfe      	cmp	r3, #254	; 0xfe
 8000740:	d001      	beq.n	8000746 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8000742:	2300      	movs	r3, #0
 8000744:	e016      	b.n	8000774 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	1c5a      	adds	r2, r3, #1
 800074a:	607a      	str	r2, [r7, #4]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff5d 	bl	800060c <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	1c5a      	adds	r2, r3, #1
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff57 	bl	800060c <rcvr_spi_m>
	} while (btr -= 2);
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	3b02      	subs	r3, #2
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1ed      	bne.n	8000746 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 800076a:	f7ff ff31 	bl	80005d0 <rcvr_spi>
	rcvr_spi();
 800076e:	f7ff ff2f 	bl	80005d0 <rcvr_spi>

	return TRUE; /* Return with success */
 8000772:	2301      	movs	r3, #1
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000098 	.word	0x20000098

08000780 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000790:	f7ff ff4a 	bl	8000628 <wait_ready>
 8000794:	4603      	mov	r3, r0
 8000796:	2bff      	cmp	r3, #255	; 0xff
 8000798:	d001      	beq.n	800079e <xmit_datablock+0x1e>
		return FALSE;
 800079a:	2300      	movs	r3, #0
 800079c:	e040      	b.n	8000820 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fefb 	bl	800059c <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	2bfd      	cmp	r3, #253	; 0xfd
 80007aa:	d031      	beq.n	8000810 <xmit_datablock+0x90>
		wc = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff feef 	bl	800059c <xmit_spi>
			xmit_spi(*buff++);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fee8 	bl	800059c <xmit_spi>
		} while (--wc);
 80007cc:	7bbb      	ldrb	r3, [r7, #14]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	73bb      	strb	r3, [r7, #14]
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1eb      	bne.n	80007b0 <xmit_datablock+0x30>

		rcvr_spi();
 80007d8:	f7ff fefa 	bl	80005d0 <rcvr_spi>
		rcvr_spi();
 80007dc:	f7ff fef8 	bl	80005d0 <rcvr_spi>

		while (i <= 64) {
 80007e0:	e00b      	b.n	80007fa <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 80007e2:	f7ff fef5 	bl	80005d0 <rcvr_spi>
 80007e6:	4603      	mov	r3, r0
 80007e8:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	f003 031f 	and.w	r3, r3, #31
 80007f0:	2b05      	cmp	r3, #5
 80007f2:	d006      	beq.n	8000802 <xmit_datablock+0x82>
				break;
			i++;
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	2b40      	cmp	r3, #64	; 0x40
 80007fe:	d9f0      	bls.n	80007e2 <xmit_datablock+0x62>
 8000800:	e000      	b.n	8000804 <xmit_datablock+0x84>
				break;
 8000802:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000804:	bf00      	nop
 8000806:	f7ff fee3 	bl	80005d0 <rcvr_spi>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d0fa      	beq.n	8000806 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f003 031f 	and.w	r3, r3, #31
 8000816:	2b05      	cmp	r3, #5
 8000818:	d101      	bne.n	800081e <xmit_datablock+0x9e>
		return TRUE;
 800081a:	2301      	movs	r3, #1
 800081c:	e000      	b.n	8000820 <xmit_datablock+0xa0>
	else
		return FALSE;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8000834:	f7ff fef8 	bl	8000628 <wait_ready>
 8000838:	4603      	mov	r3, r0
 800083a:	2bff      	cmp	r3, #255	; 0xff
 800083c:	d001      	beq.n	8000842 <send_cmd+0x1a>
		return 0xFF;
 800083e:	23ff      	movs	r3, #255	; 0xff
 8000840:	e040      	b.n	80008c4 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fea9 	bl	800059c <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	0e1b      	lsrs	r3, r3, #24
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fea3 	bl	800059c <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	0c1b      	lsrs	r3, r3, #16
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fe9d 	bl	800059c <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	0a1b      	lsrs	r3, r3, #8
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fe97 	bl	800059c <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe92 	bl	800059c <xmit_spi>
	n = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2b40      	cmp	r3, #64	; 0x40
 8000880:	d101      	bne.n	8000886 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8000882:	2395      	movs	r3, #149	; 0x95
 8000884:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b48      	cmp	r3, #72	; 0x48
 800088a:	d101      	bne.n	8000890 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 800088c:	2387      	movs	r3, #135	; 0x87
 800088e:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe82 	bl	800059c <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b4c      	cmp	r3, #76	; 0x4c
 800089c:	d101      	bne.n	80008a2 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 800089e:	f7ff fe97 	bl	80005d0 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 80008a2:	230a      	movs	r3, #10
 80008a4:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 80008a6:	f7ff fe93 	bl	80005d0 <rcvr_spi>
 80008aa:	4603      	mov	r3, r0
 80008ac:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 80008ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	da05      	bge.n	80008c2 <send_cmd+0x9a>
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	73fb      	strb	r3, [r7, #15]
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f1      	bne.n	80008a6 <send_cmd+0x7e>

	return res; /* Return with the response value */
 80008c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80008dc:	2301      	movs	r3, #1
 80008de:	e0d5      	b.n	8000a8c <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 80008e0:	4b6c      	ldr	r3, [pc, #432]	; (8000a94 <disk_initialize+0x1c8>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 80008ee:	4b69      	ldr	r3, [pc, #420]	; (8000a94 <disk_initialize+0x1c8>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	e0ca      	b.n	8000a8c <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 80008f6:	f7ff feb3 	bl	8000660 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 80008fa:	f7ff fe41 	bl	8000580 <SELECT>
	ty = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8000902:	2100      	movs	r1, #0
 8000904:	2040      	movs	r0, #64	; 0x40
 8000906:	f7ff ff8f 	bl	8000828 <send_cmd>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	f040 80a5 	bne.w	8000a5c <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8000912:	4b61      	ldr	r3, [pc, #388]	; (8000a98 <disk_initialize+0x1cc>)
 8000914:	2264      	movs	r2, #100	; 0x64
 8000916:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8000918:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800091c:	2048      	movs	r0, #72	; 0x48
 800091e:	f7ff ff83 	bl	8000828 <send_cmd>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	d158      	bne.n	80009da <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]
 800092c:	e00c      	b.n	8000948 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800092e:	7bfc      	ldrb	r4, [r7, #15]
 8000930:	f7ff fe4e 	bl	80005d0 <rcvr_spi>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4423      	add	r3, r4
 800093e:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	3301      	adds	r3, #1
 8000946:	73fb      	strb	r3, [r7, #15]
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2b03      	cmp	r3, #3
 800094c:	d9ef      	bls.n	800092e <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 800094e:	7abb      	ldrb	r3, [r7, #10]
 8000950:	2b01      	cmp	r3, #1
 8000952:	f040 8083 	bne.w	8000a5c <disk_initialize+0x190>
 8000956:	7afb      	ldrb	r3, [r7, #11]
 8000958:	2baa      	cmp	r3, #170	; 0xaa
 800095a:	d17f      	bne.n	8000a5c <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 800095c:	2100      	movs	r1, #0
 800095e:	2077      	movs	r0, #119	; 0x77
 8000960:	f7ff ff62 	bl	8000828 <send_cmd>
 8000964:	4603      	mov	r3, r0
 8000966:	2b01      	cmp	r3, #1
 8000968:	d807      	bhi.n	800097a <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 800096a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800096e:	2069      	movs	r0, #105	; 0x69
 8000970:	f7ff ff5a 	bl	8000828 <send_cmd>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d005      	beq.n	8000986 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 800097a:	4b47      	ldr	r3, [pc, #284]	; (8000a98 <disk_initialize+0x1cc>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1eb      	bne.n	800095c <disk_initialize+0x90>
 8000984:	e000      	b.n	8000988 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8000986:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8000988:	4b43      	ldr	r3, [pc, #268]	; (8000a98 <disk_initialize+0x1cc>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d064      	beq.n	8000a5c <disk_initialize+0x190>
 8000992:	2100      	movs	r1, #0
 8000994:	207a      	movs	r0, #122	; 0x7a
 8000996:	f7ff ff47 	bl	8000828 <send_cmd>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d15d      	bne.n	8000a5c <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
 80009a4:	e00c      	b.n	80009c0 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 80009a6:	7bfc      	ldrb	r4, [r7, #15]
 80009a8:	f7ff fe12 	bl	80005d0 <rcvr_spi>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461a      	mov	r2, r3
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4423      	add	r3, r4
 80009b6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	3301      	adds	r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d9ef      	bls.n	80009a6 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 80009c6:	7a3b      	ldrb	r3, [r7, #8]
 80009c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <disk_initialize+0x108>
 80009d0:	2306      	movs	r3, #6
 80009d2:	e000      	b.n	80009d6 <disk_initialize+0x10a>
 80009d4:	2302      	movs	r3, #2
 80009d6:	73bb      	strb	r3, [r7, #14]
 80009d8:	e040      	b.n	8000a5c <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80009da:	2100      	movs	r1, #0
 80009dc:	2077      	movs	r0, #119	; 0x77
 80009de:	f7ff ff23 	bl	8000828 <send_cmd>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d808      	bhi.n	80009fa <disk_initialize+0x12e>
 80009e8:	2100      	movs	r1, #0
 80009ea:	2069      	movs	r0, #105	; 0x69
 80009ec:	f7ff ff1c 	bl	8000828 <send_cmd>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d801      	bhi.n	80009fa <disk_initialize+0x12e>
 80009f6:	2302      	movs	r3, #2
 80009f8:	e000      	b.n	80009fc <disk_initialize+0x130>
 80009fa:	2301      	movs	r3, #1
 80009fc:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 80009fe:	7bbb      	ldrb	r3, [r7, #14]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d10e      	bne.n	8000a22 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8000a04:	2100      	movs	r1, #0
 8000a06:	2077      	movs	r0, #119	; 0x77
 8000a08:	f7ff ff0e 	bl	8000828 <send_cmd>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d80e      	bhi.n	8000a30 <disk_initialize+0x164>
 8000a12:	2100      	movs	r1, #0
 8000a14:	2069      	movs	r0, #105	; 0x69
 8000a16:	f7ff ff07 	bl	8000828 <send_cmd>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d107      	bne.n	8000a30 <disk_initialize+0x164>
						break; /* ACMD41 */
 8000a20:	e00d      	b.n	8000a3e <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8000a22:	2100      	movs	r1, #0
 8000a24:	2041      	movs	r0, #65	; 0x41
 8000a26:	f7ff feff 	bl	8000828 <send_cmd>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d005      	beq.n	8000a3c <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <disk_initialize+0x1cc>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1e1      	bne.n	80009fe <disk_initialize+0x132>
 8000a3a:	e000      	b.n	8000a3e <disk_initialize+0x172>
						break; /* CMD1 */
 8000a3c:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <disk_initialize+0x1cc>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d007      	beq.n	8000a58 <disk_initialize+0x18c>
 8000a48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4c:	2050      	movs	r0, #80	; 0x50
 8000a4e:	f7ff feeb 	bl	8000828 <send_cmd>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <disk_initialize+0x190>
				ty = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8000a5c:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <disk_initialize+0x1d0>)
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 8000a62:	f7ff fd94 	bl	800058e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000a66:	f7ff fdb3 	bl	80005d0 <rcvr_spi>

	if (ty) /* Initialization succeded */
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d008      	beq.n	8000a82 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <disk_initialize+0x1c8>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f023 0301 	bic.w	r3, r3, #1
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <disk_initialize+0x1c8>)
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	e001      	b.n	8000a86 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 8000a82:	f7ff fe3b 	bl	80006fc <power_off>

	return Stat;
 8000a86:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <disk_initialize+0x1c8>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000098 	.word	0x20000098
 8000a9c:	2000009a 	.word	0x2000009a

08000aa0 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e002      	b.n	8000aba <disk_status+0x1a>
	return Stat;
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <disk_status+0x28>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000000 	.word	0x20000000

08000acc <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	4603      	mov	r3, r0
 8000ada:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d102      	bne.n	8000ae8 <disk_read+0x1c>
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d101      	bne.n	8000aec <disk_read+0x20>
		return RES_PARERR;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	e051      	b.n	8000b90 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8000aec:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <disk_read+0xcc>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <disk_read+0x32>
		return RES_NOTRDY;
 8000afa:	2303      	movs	r3, #3
 8000afc:	e048      	b.n	8000b90 <disk_read+0xc4>

	if (!(CardType & 4))
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <disk_read+0xd0>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d102      	bne.n	8000b10 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	025b      	lsls	r3, r3, #9
 8000b0e:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000b10:	f7ff fd36 	bl	8000580 <SELECT>

	if (count == 1) { /* Single block read */
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d111      	bne.n	8000b3e <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	2051      	movs	r0, #81	; 0x51
 8000b1e:	f7ff fe83 	bl	8000828 <send_cmd>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d129      	bne.n	8000b7c <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8000b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2c:	68b8      	ldr	r0, [r7, #8]
 8000b2e:	f7ff fdf1 	bl	8000714 <rcvr_datablock>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d021      	beq.n	8000b7c <disk_read+0xb0>
			count = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	e01e      	b.n	8000b7c <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	2052      	movs	r0, #82	; 0x52
 8000b42:	f7ff fe71 	bl	8000828 <send_cmd>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d117      	bne.n	8000b7c <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8000b4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b50:	68b8      	ldr	r0, [r7, #8]
 8000b52:	f7ff fddf 	bl	8000714 <rcvr_datablock>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d00a      	beq.n	8000b72 <disk_read+0xa6>
					break;
				buff += 512;
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b62:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1ed      	bne.n	8000b4c <disk_read+0x80>
 8000b70:	e000      	b.n	8000b74 <disk_read+0xa8>
					break;
 8000b72:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8000b74:	2100      	movs	r1, #0
 8000b76:	204c      	movs	r0, #76	; 0x4c
 8000b78:	f7ff fe56 	bl	8000828 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8000b7c:	f7ff fd07 	bl	800058e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000b80:	f7ff fd26 	bl	80005d0 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bf14      	ite	ne
 8000b8a:	2301      	movne	r3, #1
 8000b8c:	2300      	moveq	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	2000009a 	.word	0x2000009a

08000ba0 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	4603      	mov	r3, r0
 8000bae:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <disk_write+0x1c>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d101      	bne.n	8000bc0 <disk_write+0x20>
		return RES_PARERR;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	e06b      	b.n	8000c98 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8000bc0:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <disk_write+0x100>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <disk_write+0x32>
		return RES_NOTRDY;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	e062      	b.n	8000c98 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8000bd2:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <disk_write+0x100>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <disk_write+0x44>
		return RES_WRPRT;
 8000be0:	2302      	movs	r3, #2
 8000be2:	e059      	b.n	8000c98 <disk_write+0xf8>

	if (!(CardType & 4))
 8000be4:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <disk_write+0x104>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	025b      	lsls	r3, r3, #9
 8000bf4:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000bf6:	f7ff fcc3 	bl	8000580 <SELECT>

	if (count == 1) { /* Single block write */
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d110      	bne.n	8000c22 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	2058      	movs	r0, #88	; 0x58
 8000c04:	f7ff fe10 	bl	8000828 <send_cmd>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d13a      	bne.n	8000c84 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8000c0e:	21fe      	movs	r1, #254	; 0xfe
 8000c10:	68b8      	ldr	r0, [r7, #8]
 8000c12:	f7ff fdb5 	bl	8000780 <xmit_datablock>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d033      	beq.n	8000c84 <disk_write+0xe4>
			count = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	e030      	b.n	8000c84 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <disk_write+0x104>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d007      	beq.n	8000c3e <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2077      	movs	r0, #119	; 0x77
 8000c32:	f7ff fdf9 	bl	8000828 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8000c36:	6839      	ldr	r1, [r7, #0]
 8000c38:	2057      	movs	r0, #87	; 0x57
 8000c3a:	f7ff fdf5 	bl	8000828 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	2059      	movs	r0, #89	; 0x59
 8000c42:	f7ff fdf1 	bl	8000828 <send_cmd>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d11b      	bne.n	8000c84 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8000c4c:	21fc      	movs	r1, #252	; 0xfc
 8000c4e:	68b8      	ldr	r0, [r7, #8]
 8000c50:	f7ff fd96 	bl	8000780 <xmit_datablock>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00a      	beq.n	8000c70 <disk_write+0xd0>
					break;
				buff += 512;
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c60:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1ee      	bne.n	8000c4c <disk_write+0xac>
 8000c6e:	e000      	b.n	8000c72 <disk_write+0xd2>
					break;
 8000c70:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8000c72:	21fd      	movs	r1, #253	; 0xfd
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fd83 	bl	8000780 <xmit_datablock>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <disk_write+0xe4>
				count = 1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8000c84:	f7ff fc83 	bl	800058e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000c88:	f7ff fca2 	bl	80005d0 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	bf14      	ite	ne
 8000c92:	2301      	movne	r3, #1
 8000c94:	2300      	moveq	r3, #0
 8000c96:	b2db      	uxtb	r3, r3
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	2000009a 	.word	0x2000009a

08000ca8 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <disk_timerproc+0x44>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d005      	beq.n	8000cc6 <disk_timerproc+0x1e>
		Timer1 = --n;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <disk_timerproc+0x44>)
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <disk_timerproc+0x48>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <disk_timerproc+0x36>
		Timer2 = --n;
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <disk_timerproc+0x48>)
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	7013      	strb	r3, [r2, #0]

}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000098 	.word	0x20000098
 8000cf0:	20000099 	.word	0x20000099

08000cf4 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <sdcard_systick_timerproc+0x2c>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <sdcard_systick_timerproc+0x2c>)
 8000d04:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <sdcard_systick_timerproc+0x2c>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	2b09      	cmp	r3, #9
 8000d0e:	d904      	bls.n	8000d1a <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <sdcard_systick_timerproc+0x2c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8000d16:	f7ff ffc7 	bl	8000ca8 <disk_timerproc>
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200000d8 	.word	0x200000d8

08000d24 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	36c55cc0 	.word	0x36c55cc0

08000d38 <ld_word>:
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3301      	adds	r3, #1
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	81fb      	strh	r3, [r7, #14]
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	81fb      	strh	r3, [r7, #14]
 8000d5a:	89fb      	ldrh	r3, [r7, #14]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <ld_dword>:
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3303      	adds	r3, #3
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	3202      	adds	r2, #2
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	3201      	adds	r2, #1
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021b      	lsls	r3, r3, #8
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	7812      	ldrb	r2, [r2, #0]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4618      	mov	r0, r3
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <st_word>:
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	460b      	mov	r3, r1
 8000db8:	807b      	strh	r3, [r7, #2]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	887a      	ldrh	r2, [r7, #2]
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	807b      	strh	r3, [r7, #2]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	887a      	ldrh	r2, [r7, #2]
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <st_dword>:
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	701a      	strb	r2, [r3, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	0a1b      	lsrs	r3, r3, #8
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <mem_cpy>:
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00d      	beq.n	8000e72 <mem_cpy+0x36>
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	1c53      	adds	r3, r2, #1
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	1c59      	adds	r1, r3, #1
 8000e60:	6179      	str	r1, [r7, #20]
 8000e62:	7812      	ldrb	r2, [r2, #0]
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f1      	bne.n	8000e56 <mem_cpy+0x1a>
 8000e72:	bf00      	nop
 8000e74:	371c      	adds	r7, #28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <mem_set>:
 8000e7e:	b480      	push	{r7}
 8000e80:	b087      	sub	sp, #28
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	617a      	str	r2, [r7, #20]
 8000e94:	68ba      	ldr	r2, [r7, #8]
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f3      	bne.n	8000e8e <mem_set+0x10>
 8000ea6:	bf00      	nop
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <mem_cmp>:
 8000eb2:	b480      	push	{r7}
 8000eb4:	b089      	sub	sp, #36	; 0x24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	61fb      	str	r3, [r7, #28]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	61fa      	str	r2, [r7, #28]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	61ba      	str	r2, [r7, #24]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	1acb      	subs	r3, r1, r3
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <mem_cmp+0x40>
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0eb      	beq.n	8000eca <mem_cmp+0x18>
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3724      	adds	r7, #36	; 0x24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <chk_chr>:
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	e002      	b.n	8000f12 <chk_chr+0x12>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d005      	beq.n	8000f26 <chk_chr+0x26>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d1f2      	bne.n	8000f0c <chk_chr+0xc>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <dbc_1st>:
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	2281      	movs	r2, #129	; 0x81
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d30f      	bcc.n	8000f68 <dbc_1st+0x32>
 8000f48:	229f      	movs	r2, #159	; 0x9f
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d801      	bhi.n	8000f54 <dbc_1st+0x1e>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e00a      	b.n	8000f6a <dbc_1st+0x34>
 8000f54:	22e0      	movs	r2, #224	; 0xe0
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d305      	bcc.n	8000f68 <dbc_1st+0x32>
 8000f5c:	22fc      	movs	r2, #252	; 0xfc
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d801      	bhi.n	8000f68 <dbc_1st+0x32>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <dbc_1st+0x34>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <dbc_2nd>:
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	2240      	movs	r2, #64	; 0x40
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d319      	bcc.n	8000fbc <dbc_2nd+0x46>
 8000f88:	227e      	movs	r2, #126	; 0x7e
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d801      	bhi.n	8000f94 <dbc_2nd+0x1e>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e014      	b.n	8000fbe <dbc_2nd+0x48>
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d305      	bcc.n	8000fa8 <dbc_2nd+0x32>
 8000f9c:	22fc      	movs	r2, #252	; 0xfc
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d801      	bhi.n	8000fa8 <dbc_2nd+0x32>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e00a      	b.n	8000fbe <dbc_2nd+0x48>
 8000fa8:	2200      	movs	r2, #0
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d305      	bcc.n	8000fbc <dbc_2nd+0x46>
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d801      	bhi.n	8000fbc <dbc_2nd+0x46>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <dbc_2nd+0x48>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <sync_window>:
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	78db      	ldrb	r3, [r3, #3]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d02c      	beq.n	8001038 <sync_window+0x6e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7858      	ldrb	r0, [r3, #1]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fec:	2301      	movs	r3, #1
 8000fee:	f7ff fdd7 	bl	8000ba0 <disk_write>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d11d      	bne.n	8001034 <sync_window+0x6a>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	70da      	strb	r2, [r3, #3]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	1ad2      	subs	r2, r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	429a      	cmp	r2, r3
 800100e:	d213      	bcs.n	8001038 <sync_window+0x6e>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	789b      	ldrb	r3, [r3, #2]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d10f      	bne.n	8001038 <sync_window+0x6e>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7858      	ldrb	r0, [r3, #1]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	441a      	add	r2, r3
 800102c:	2301      	movs	r3, #1
 800102e:	f7ff fdb7 	bl	8000ba0 <disk_write>
 8001032:	e001      	b.n	8001038 <sync_window+0x6e>
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <move_window>:
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d01b      	beq.n	8001092 <move_window+0x50>
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffb5 	bl	8000fca <sync_window>
 8001060:	4603      	mov	r3, r0
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d113      	bne.n	8001092 <move_window+0x50>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7858      	ldrb	r0, [r3, #1]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001074:	2301      	movs	r3, #1
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	f7ff fd28 	bl	8000acc <disk_read>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d004      	beq.n	800108c <move_window+0x4a>
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	62da      	str	r2, [r3, #44]	; 0x2c
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <clst2sect>:
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	3b02      	subs	r3, #2
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	3b02      	subs	r3, #2
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d301      	bcc.n	80010bc <clst2sect+0x20>
 80010b8:	2300      	movs	r3, #0
 80010ba:	e008      	b.n	80010ce <clst2sect+0x32>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	895b      	ldrh	r3, [r3, #10]
 80010c4:	4619      	mov	r1, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	fb03 f301 	mul.w	r3, r3, r1
 80010cc:	4413      	add	r3, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <get_fat>:
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d904      	bls.n	80010fa <get_fat+0x20>
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d302      	bcc.n	8001100 <get_fat+0x26>
 80010fa:	2301      	movs	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	e08c      	b.n	800121a <get_fat+0x140>
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d045      	beq.n	800119a <get_fat+0xc0>
 800110e:	2b03      	cmp	r3, #3
 8001110:	d05d      	beq.n	80011ce <get_fat+0xf4>
 8001112:	2b01      	cmp	r3, #1
 8001114:	d177      	bne.n	8001206 <get_fat+0x12c>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	085b      	lsrs	r3, r3, #1
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	4413      	add	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	6a1a      	ldr	r2, [r3, #32]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	0a5b      	lsrs	r3, r3, #9
 800112c:	4413      	add	r3, r2
 800112e:	4619      	mov	r1, r3
 8001130:	6938      	ldr	r0, [r7, #16]
 8001132:	f7ff ff86 	bl	8001042 <move_window>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d167      	bne.n	800120c <get_fat+0x132>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	60fa      	str	r2, [r7, #12]
 8001142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4413      	add	r3, r2
 800114a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	6a1a      	ldr	r2, [r3, #32]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	0a5b      	lsrs	r3, r3, #9
 8001158:	4413      	add	r3, r2
 800115a:	4619      	mov	r1, r3
 800115c:	6938      	ldr	r0, [r7, #16]
 800115e:	f7ff ff70 	bl	8001042 <move_window>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d153      	bne.n	8001210 <get_fat+0x136>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4413      	add	r3, r2
 8001172:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	461a      	mov	r2, r3
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	4313      	orrs	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <get_fat+0xb6>
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	091b      	lsrs	r3, r3, #4
 800118e:	e002      	b.n	8001196 <get_fat+0xbc>
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	e03f      	b.n	800121a <get_fat+0x140>
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	6a1a      	ldr	r2, [r3, #32]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	4413      	add	r3, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	6938      	ldr	r0, [r7, #16]
 80011a8:	f7ff ff4b 	bl	8001042 <move_window>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d130      	bne.n	8001214 <get_fat+0x13a>
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80011c0:	4413      	add	r3, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fdb8 	bl	8000d38 <ld_word>
 80011c8:	4603      	mov	r3, r0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e025      	b.n	800121a <get_fat+0x140>
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	6a1a      	ldr	r2, [r3, #32]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	09db      	lsrs	r3, r3, #7
 80011d6:	4413      	add	r3, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	6938      	ldr	r0, [r7, #16]
 80011dc:	f7ff ff31 	bl	8001042 <move_window>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d118      	bne.n	8001218 <get_fat+0x13e>
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80011f4:	4413      	add	r3, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fdb6 	bl	8000d68 <ld_dword>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e009      	b.n	800121a <get_fat+0x140>
 8001206:	2301      	movs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	e006      	b.n	800121a <get_fat+0x140>
 800120c:	bf00      	nop
 800120e:	e004      	b.n	800121a <get_fat+0x140>
 8001210:	bf00      	nop
 8001212:	e002      	b.n	800121a <get_fat+0x140>
 8001214:	bf00      	nop
 8001216:	e000      	b.n	800121a <get_fat+0x140>
 8001218:	bf00      	nop
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <put_fat>:
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	2302      	movs	r3, #2
 8001232:	77fb      	strb	r3, [r7, #31]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b01      	cmp	r3, #1
 8001238:	f240 80d6 	bls.w	80013e8 <put_fat+0x1c4>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	429a      	cmp	r2, r3
 8001244:	f080 80d0 	bcs.w	80013e8 <put_fat+0x1c4>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d073      	beq.n	8001338 <put_fat+0x114>
 8001250:	2b03      	cmp	r3, #3
 8001252:	f000 8091 	beq.w	8001378 <put_fat+0x154>
 8001256:	2b01      	cmp	r3, #1
 8001258:	f040 80c6 	bne.w	80013e8 <put_fat+0x1c4>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	085b      	lsrs	r3, r3, #1
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4413      	add	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a1a      	ldr	r2, [r3, #32]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	0a5b      	lsrs	r3, r3, #9
 8001272:	4413      	add	r3, r2
 8001274:	4619      	mov	r1, r3
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f7ff fee3 	bl	8001042 <move_window>
 800127c:	4603      	mov	r3, r0
 800127e:	77fb      	strb	r3, [r7, #31]
 8001280:	7ffb      	ldrb	r3, [r7, #31]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f040 80a9 	bne.w	80013da <put_fat+0x1b6>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1c59      	adds	r1, r3, #1
 8001292:	61b9      	str	r1, [r7, #24]
 8001294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001298:	4413      	add	r3, r2
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00d      	beq.n	80012c2 <put_fat+0x9e>
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	b25a      	sxtb	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	e001      	b.n	80012c6 <put_fat+0xa2>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	7013      	strb	r3, [r2, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2201      	movs	r2, #1
 80012ce:	70da      	strb	r2, [r3, #3]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6a1a      	ldr	r2, [r3, #32]
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	0a5b      	lsrs	r3, r3, #9
 80012d8:	4413      	add	r3, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f7ff feb0 	bl	8001042 <move_window>
 80012e2:	4603      	mov	r3, r0
 80012e4:	77fb      	strb	r3, [r7, #31]
 80012e6:	7ffb      	ldrb	r3, [r7, #31]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d178      	bne.n	80013de <put_fat+0x1ba>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012f8:	4413      	add	r3, r2
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <put_fat+0xea>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	b2db      	uxtb	r3, r3
 800130c:	e00e      	b.n	800132c <put_fat+0x108>
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b25b      	sxtb	r3, r3
 8001314:	f023 030f 	bic.w	r3, r3, #15
 8001318:	b25a      	sxtb	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	b25b      	sxtb	r3, r3
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	b25b      	sxtb	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b25b      	sxtb	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	7013      	strb	r3, [r2, #0]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2201      	movs	r2, #1
 8001334:	70da      	strb	r2, [r3, #3]
 8001336:	e057      	b.n	80013e8 <put_fat+0x1c4>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6a1a      	ldr	r2, [r3, #32]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	0a1b      	lsrs	r3, r3, #8
 8001340:	4413      	add	r3, r2
 8001342:	4619      	mov	r1, r3
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f7ff fe7c 	bl	8001042 <move_window>
 800134a:	4603      	mov	r3, r0
 800134c:	77fb      	strb	r3, [r7, #31]
 800134e:	7ffb      	ldrb	r3, [r7, #31]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d146      	bne.n	80013e2 <put_fat+0x1be>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001362:	4413      	add	r3, r2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	b292      	uxth	r2, r2
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fd1f 	bl	8000dae <st_word>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2201      	movs	r2, #1
 8001374:	70da      	strb	r2, [r3, #3]
 8001376:	e037      	b.n	80013e8 <put_fat+0x1c4>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a1a      	ldr	r2, [r3, #32]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	09db      	lsrs	r3, r3, #7
 8001380:	4413      	add	r3, r2
 8001382:	4619      	mov	r1, r3
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f7ff fe5c 	bl	8001042 <move_window>
 800138a:	4603      	mov	r3, r0
 800138c:	77fb      	strb	r3, [r7, #31]
 800138e:	7ffb      	ldrb	r3, [r7, #31]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d128      	bne.n	80013e6 <put_fat+0x1c2>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80013a8:	4413      	add	r3, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fcdc 	bl	8000d68 <ld_dword>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80013b6:	4323      	orrs	r3, r4
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80013c8:	4413      	add	r3, r2
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fd09 	bl	8000de4 <st_dword>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2201      	movs	r2, #1
 80013d6:	70da      	strb	r2, [r3, #3]
 80013d8:	e006      	b.n	80013e8 <put_fat+0x1c4>
 80013da:	bf00      	nop
 80013dc:	e004      	b.n	80013e8 <put_fat+0x1c4>
 80013de:	bf00      	nop
 80013e0:	e002      	b.n	80013e8 <put_fat+0x1c4>
 80013e2:	bf00      	nop
 80013e4:	e000      	b.n	80013e8 <put_fat+0x1c4>
 80013e6:	bf00      	nop
 80013e8:	7ffb      	ldrb	r3, [r7, #31]
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd90      	pop	{r4, r7, pc}

080013f2 <remove_chain>:
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b088      	sub	sp, #32
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	2300      	movs	r3, #0
 8001400:	77fb      	strb	r3, [r7, #31]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d904      	bls.n	8001418 <remove_chain+0x26>
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	429a      	cmp	r2, r3
 8001416:	d301      	bcc.n	800141c <remove_chain+0x2a>
 8001418:	2302      	movs	r3, #2
 800141a:	e04b      	b.n	80014b4 <remove_chain+0xc2>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00c      	beq.n	800143c <remove_chain+0x4a>
 8001422:	f04f 32ff 	mov.w	r2, #4294967295
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	69b8      	ldr	r0, [r7, #24]
 800142a:	f7ff fefb 	bl	8001224 <put_fat>
 800142e:	4603      	mov	r3, r0
 8001430:	77fb      	strb	r3, [r7, #31]
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <remove_chain+0x4a>
 8001438:	7ffb      	ldrb	r3, [r7, #31]
 800143a:	e03b      	b.n	80014b4 <remove_chain+0xc2>
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff fe4b 	bl	80010da <get_fat>
 8001444:	6178      	str	r0, [r7, #20]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d031      	beq.n	80014b0 <remove_chain+0xbe>
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <remove_chain+0x64>
 8001452:	2302      	movs	r3, #2
 8001454:	e02e      	b.n	80014b4 <remove_chain+0xc2>
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145c:	d101      	bne.n	8001462 <remove_chain+0x70>
 800145e:	2301      	movs	r3, #1
 8001460:	e028      	b.n	80014b4 <remove_chain+0xc2>
 8001462:	2200      	movs	r2, #0
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	69b8      	ldr	r0, [r7, #24]
 8001468:	f7ff fedc 	bl	8001224 <put_fat>
 800146c:	4603      	mov	r3, r0
 800146e:	77fb      	strb	r3, [r7, #31]
 8001470:	7ffb      	ldrb	r3, [r7, #31]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <remove_chain+0x88>
 8001476:	7ffb      	ldrb	r3, [r7, #31]
 8001478:	e01c      	b.n	80014b4 <remove_chain+0xc2>
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	691a      	ldr	r2, [r3, #16]
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	3b02      	subs	r3, #2
 8001484:	429a      	cmp	r2, r3
 8001486:	d20b      	bcs.n	80014a0 <remove_chain+0xae>
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	791b      	ldrb	r3, [r3, #4]
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	b2da      	uxtb	r2, r3
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	711a      	strb	r2, [r3, #4]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d3c6      	bcc.n	800143c <remove_chain+0x4a>
 80014ae:	e000      	b.n	80014b2 <remove_chain+0xc0>
 80014b0:	bf00      	nop
 80014b2:	2300      	movs	r3, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <create_chain>:
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10d      	bne.n	80014ee <create_chain+0x32>
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d004      	beq.n	80014e8 <create_chain+0x2c>
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d31b      	bcc.n	8001520 <create_chain+0x64>
 80014e8:	2301      	movs	r3, #1
 80014ea:	61bb      	str	r3, [r7, #24]
 80014ec:	e018      	b.n	8001520 <create_chain+0x64>
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fdf2 	bl	80010da <get_fat>
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d801      	bhi.n	8001502 <create_chain+0x46>
 80014fe:	2301      	movs	r3, #1
 8001500:	e0a9      	b.n	8001656 <create_chain+0x19a>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d101      	bne.n	800150e <create_chain+0x52>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	e0a3      	b.n	8001656 <create_chain+0x19a>
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d201      	bcs.n	800151c <create_chain+0x60>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	e09c      	b.n	8001656 <create_chain+0x19a>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	61bb      	str	r3, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <create_chain+0x70>
 8001528:	2300      	movs	r3, #0
 800152a:	e094      	b.n	8001656 <create_chain+0x19a>
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d129      	bne.n	800158c <create_chain+0xd0>
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	3301      	adds	r3, #1
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	429a      	cmp	r2, r3
 8001546:	d301      	bcc.n	800154c <create_chain+0x90>
 8001548:	2302      	movs	r3, #2
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69f9      	ldr	r1, [r7, #28]
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fdc3 	bl	80010da <get_fat>
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d003      	beq.n	8001564 <create_chain+0xa8>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001562:	d101      	bne.n	8001568 <create_chain+0xac>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	e076      	b.n	8001656 <create_chain+0x19a>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00e      	beq.n	800158c <create_chain+0xd0>
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d906      	bls.n	8001588 <create_chain+0xcc>
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d201      	bcs.n	8001588 <create_chain+0xcc>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d129      	bne.n	80015e6 <create_chain+0x12a>
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	69fa      	ldr	r2, [r7, #28]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d307      	bcc.n	80015b6 <create_chain+0xfa>
 80015a6:	2302      	movs	r3, #2
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d901      	bls.n	80015b6 <create_chain+0xfa>
 80015b2:	2300      	movs	r3, #0
 80015b4:	e04f      	b.n	8001656 <create_chain+0x19a>
 80015b6:	69f9      	ldr	r1, [r7, #28]
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff fd8e 	bl	80010da <get_fat>
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00e      	beq.n	80015e4 <create_chain+0x128>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d003      	beq.n	80015d4 <create_chain+0x118>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d2:	d101      	bne.n	80015d8 <create_chain+0x11c>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	e03e      	b.n	8001656 <create_chain+0x19a>
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d1da      	bne.n	8001596 <create_chain+0xda>
 80015e0:	2300      	movs	r3, #0
 80015e2:	e038      	b.n	8001656 <create_chain+0x19a>
 80015e4:	bf00      	nop
 80015e6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ea:	69f9      	ldr	r1, [r7, #28]
 80015ec:	6938      	ldr	r0, [r7, #16]
 80015ee:	f7ff fe19 	bl	8001224 <put_fat>
 80015f2:	4603      	mov	r3, r0
 80015f4:	75fb      	strb	r3, [r7, #23]
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d109      	bne.n	8001610 <create_chain+0x154>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d006      	beq.n	8001610 <create_chain+0x154>
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	6839      	ldr	r1, [r7, #0]
 8001606:	6938      	ldr	r0, [r7, #16]
 8001608:	f7ff fe0c 	bl	8001224 <put_fat>
 800160c:	4603      	mov	r3, r0
 800160e:	75fb      	strb	r3, [r7, #23]
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d116      	bne.n	8001644 <create_chain+0x188>
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	3b02      	subs	r3, #2
 8001626:	429a      	cmp	r2, r3
 8001628:	d804      	bhi.n	8001634 <create_chain+0x178>
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	1e5a      	subs	r2, r3, #1
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	791b      	ldrb	r3, [r3, #4]
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	b2da      	uxtb	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	711a      	strb	r2, [r3, #4]
 8001642:	e007      	b.n	8001654 <create_chain+0x198>
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d102      	bne.n	8001650 <create_chain+0x194>
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e000      	b.n	8001652 <create_chain+0x196>
 8001650:	2301      	movs	r3, #1
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4618      	mov	r0, r3
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <dir_clear>:
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fcae 	bl	8000fca <sync_window>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <dir_clear+0x1a>
 8001674:	2301      	movs	r3, #1
 8001676:	e036      	b.n	80016e6 <dir_clear+0x88>
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fd0e 	bl	800109c <clst2sect>
 8001680:	6138      	str	r0, [r7, #16]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3330      	adds	r3, #48	; 0x30
 800168c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fbf3 	bl	8000e7e <mem_set>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3330      	adds	r3, #48	; 0x30
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	2301      	movs	r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e003      	b.n	80016b0 <dir_clear+0x52>
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	4413      	add	r3, r2
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	895b      	ldrh	r3, [r3, #10]
 80016b4:	461a      	mov	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d20b      	bcs.n	80016d4 <dir_clear+0x76>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7858      	ldrb	r0, [r3, #1]
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	441a      	add	r2, r3
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	68f9      	ldr	r1, [r7, #12]
 80016ca:	f7ff fa69 	bl	8000ba0 <disk_write>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0e9      	beq.n	80016a8 <dir_clear+0x4a>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	895b      	ldrh	r3, [r3, #10]
 80016d8:	461a      	mov	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	4293      	cmp	r3, r2
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <dir_sdi>:
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001704:	d204      	bcs.n	8001710 <dir_sdi+0x22>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <dir_sdi+0x26>
 8001710:	2302      	movs	r3, #2
 8001712:	e063      	b.n	80017dc <dir_sdi+0xee>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d106      	bne.n	8001734 <dir_sdi+0x46>
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d902      	bls.n	8001734 <dir_sdi+0x46>
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10c      	bne.n	8001754 <dir_sdi+0x66>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	8912      	ldrh	r2, [r2, #8]
 8001742:	4293      	cmp	r3, r2
 8001744:	d301      	bcc.n	800174a <dir_sdi+0x5c>
 8001746:	2302      	movs	r3, #2
 8001748:	e048      	b.n	80017dc <dir_sdi+0xee>
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	619a      	str	r2, [r3, #24]
 8001752:	e029      	b.n	80017a8 <dir_sdi+0xba>
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	895b      	ldrh	r3, [r3, #10]
 8001758:	025b      	lsls	r3, r3, #9
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e019      	b.n	8001792 <dir_sdi+0xa4>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6979      	ldr	r1, [r7, #20]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fcb9 	bl	80010da <get_fat>
 8001768:	6178      	str	r0, [r7, #20]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d101      	bne.n	8001776 <dir_sdi+0x88>
 8001772:	2301      	movs	r3, #1
 8001774:	e032      	b.n	80017dc <dir_sdi+0xee>
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d904      	bls.n	8001786 <dir_sdi+0x98>
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	429a      	cmp	r2, r3
 8001784:	d301      	bcc.n	800178a <dir_sdi+0x9c>
 8001786:	2302      	movs	r3, #2
 8001788:	e028      	b.n	80017dc <dir_sdi+0xee>
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	429a      	cmp	r2, r3
 8001798:	d2e1      	bcs.n	800175e <dir_sdi+0x70>
 800179a:	6979      	ldr	r1, [r7, #20]
 800179c:	6938      	ldr	r0, [r7, #16]
 800179e:	f7ff fc7d 	bl	800109c <clst2sect>
 80017a2:	4602      	mov	r2, r0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	615a      	str	r2, [r3, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <dir_sdi+0xcc>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e010      	b.n	80017dc <dir_sdi+0xee>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699a      	ldr	r2, [r3, #24]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	0a5b      	lsrs	r3, r3, #9
 80017c2:	441a      	add	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d4:	441a      	add	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	61da      	str	r2, [r3, #28]
 80017da:	2300      	movs	r3, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <dir_next>:
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	3320      	adds	r3, #32
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001802:	d302      	bcc.n	800180a <dir_next+0x26>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <dir_next+0x32>
 8001812:	2304      	movs	r3, #4
 8001814:	e078      	b.n	8001908 <dir_next+0x124>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800181c:	2b00      	cmp	r3, #0
 800181e:	d166      	bne.n	80018ee <dir_next+0x10a>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	619a      	str	r2, [r3, #24]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10a      	bne.n	8001848 <dir_next+0x64>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	095b      	lsrs	r3, r3, #5
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	8912      	ldrh	r2, [r2, #8]
 800183a:	4293      	cmp	r3, r2
 800183c:	d357      	bcc.n	80018ee <dir_next+0x10a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
 8001844:	2304      	movs	r3, #4
 8001846:	e05f      	b.n	8001908 <dir_next+0x124>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	0a5b      	lsrs	r3, r3, #9
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	8952      	ldrh	r2, [r2, #10]
 8001850:	3a01      	subs	r2, #1
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d14a      	bne.n	80018ee <dir_next+0x10a>
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	4619      	mov	r1, r3
 8001860:	4610      	mov	r0, r2
 8001862:	f7ff fc3a 	bl	80010da <get_fat>
 8001866:	6178      	str	r0, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d801      	bhi.n	8001872 <dir_next+0x8e>
 800186e:	2302      	movs	r3, #2
 8001870:	e04a      	b.n	8001908 <dir_next+0x124>
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d101      	bne.n	800187e <dir_next+0x9a>
 800187a:	2301      	movs	r3, #1
 800187c:	e044      	b.n	8001908 <dir_next+0x124>
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	429a      	cmp	r2, r3
 8001886:	d328      	bcc.n	80018da <dir_next+0xf6>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d104      	bne.n	8001898 <dir_next+0xb4>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
 8001894:	2304      	movs	r3, #4
 8001896:	e037      	b.n	8001908 <dir_next+0x124>
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	4619      	mov	r1, r3
 80018a0:	4610      	mov	r0, r2
 80018a2:	f7ff fe0b 	bl	80014bc <create_chain>
 80018a6:	6178      	str	r0, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <dir_next+0xce>
 80018ae:	2307      	movs	r3, #7
 80018b0:	e02a      	b.n	8001908 <dir_next+0x124>
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <dir_next+0xd8>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e025      	b.n	8001908 <dir_next+0x124>
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c2:	d101      	bne.n	80018c8 <dir_next+0xe4>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e01f      	b.n	8001908 <dir_next+0x124>
 80018c8:	6979      	ldr	r1, [r7, #20]
 80018ca:	6938      	ldr	r0, [r7, #16]
 80018cc:	f7ff fec7 	bl	800165e <dir_clear>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <dir_next+0xf6>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e016      	b.n	8001908 <dir_next+0x124>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	615a      	str	r2, [r3, #20]
 80018e0:	6979      	ldr	r1, [r7, #20]
 80018e2:	6938      	ldr	r0, [r7, #16]
 80018e4:	f7ff fbda 	bl	800109c <clst2sect>
 80018e8:	4602      	mov	r2, r0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	619a      	str	r2, [r3, #24]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001900:	441a      	add	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	61da      	str	r2, [r3, #28]
 8001906:	2300      	movs	r3, #0
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <dir_alloc>:
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	2100      	movs	r1, #0
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fee3 	bl	80016ee <dir_sdi>
 8001928:	4603      	mov	r3, r0
 800192a:	75fb      	strb	r3, [r7, #23]
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d12b      	bne.n	800198a <dir_alloc+0x7a>
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	4619      	mov	r1, r3
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f7ff fb80 	bl	8001042 <move_window>
 8001942:	4603      	mov	r3, r0
 8001944:	75fb      	strb	r3, [r7, #23]
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d11d      	bne.n	8001988 <dir_alloc+0x78>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2be5      	cmp	r3, #229	; 0xe5
 8001954:	d004      	beq.n	8001960 <dir_alloc+0x50>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d107      	bne.n	8001970 <dir_alloc+0x60>
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	3301      	adds	r3, #1
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d102      	bne.n	8001974 <dir_alloc+0x64>
 800196e:	e00c      	b.n	800198a <dir_alloc+0x7a>
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	2101      	movs	r1, #1
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ff34 	bl	80017e4 <dir_next>
 800197c:	4603      	mov	r3, r0
 800197e:	75fb      	strb	r3, [r7, #23]
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0d7      	beq.n	8001936 <dir_alloc+0x26>
 8001986:	e000      	b.n	800198a <dir_alloc+0x7a>
 8001988:	bf00      	nop
 800198a:	7dfb      	ldrb	r3, [r7, #23]
 800198c:	2b04      	cmp	r3, #4
 800198e:	d101      	bne.n	8001994 <dir_alloc+0x84>
 8001990:	2307      	movs	r3, #7
 8001992:	75fb      	strb	r3, [r7, #23]
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <ld_clust>:
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	331a      	adds	r3, #26
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f9c3 	bl	8000d38 <ld_word>
 80019b2:	4603      	mov	r3, r0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d109      	bne.n	80019d2 <ld_clust+0x34>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	3314      	adds	r3, #20
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff f9b8 	bl	8000d38 <ld_word>
 80019c8:	4603      	mov	r3, r0
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <st_clust>:
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	331a      	adds	r3, #26
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	b292      	uxth	r2, r2
 80019f0:	4611      	mov	r1, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f9db 	bl	8000dae <st_word>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d109      	bne.n	8001a14 <st_clust+0x38>
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f103 0214 	add.w	r2, r3, #20
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f7ff f9cd 	bl	8000dae <st_word>
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <dir_read>:
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	2304      	movs	r3, #4
 8001a28:	75fb      	strb	r3, [r7, #23]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	e03c      	b.n	8001aac <dir_read+0x90>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	4619      	mov	r1, r3
 8001a38:	6938      	ldr	r0, [r7, #16]
 8001a3a:	f7ff fb02 	bl	8001042 <move_window>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d136      	bne.n	8001ab6 <dir_read+0x9a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <dir_read+0x40>
 8001a56:	2304      	movs	r3, #4
 8001a58:	75fb      	strb	r3, [r7, #23]
 8001a5a:	e031      	b.n	8001ac0 <dir_read+0xa4>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	330b      	adds	r3, #11
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a68:	73bb      	strb	r3, [r7, #14]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7bba      	ldrb	r2, [r7, #14]
 8001a6e:	719a      	strb	r2, [r3, #6]
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	2be5      	cmp	r3, #229	; 0xe5
 8001a74:	d011      	beq.n	8001a9a <dir_read+0x7e>
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	2b2e      	cmp	r3, #46	; 0x2e
 8001a7a:	d00e      	beq.n	8001a9a <dir_read+0x7e>
 8001a7c:	7bbb      	ldrb	r3, [r7, #14]
 8001a7e:	2b0f      	cmp	r3, #15
 8001a80:	d00b      	beq.n	8001a9a <dir_read+0x7e>
 8001a82:	7bbb      	ldrb	r3, [r7, #14]
 8001a84:	f023 0320 	bic.w	r3, r3, #32
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00f      	beq.n	8001aba <dir_read+0x9e>
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fea1 	bl	80017e4 <dir_next>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	75fb      	strb	r3, [r7, #23]
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d108      	bne.n	8001abe <dir_read+0xa2>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1be      	bne.n	8001a32 <dir_read+0x16>
 8001ab4:	e004      	b.n	8001ac0 <dir_read+0xa4>
 8001ab6:	bf00      	nop
 8001ab8:	e002      	b.n	8001ac0 <dir_read+0xa4>
 8001aba:	bf00      	nop
 8001abc:	e000      	b.n	8001ac0 <dir_read+0xa4>
 8001abe:	bf00      	nop
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <dir_read+0xb0>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <dir_find>:
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fe01 	bl	80016ee <dir_sdi>
 8001aec:	4603      	mov	r3, r0
 8001aee:	75fb      	strb	r3, [r7, #23]
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <dir_find+0x24>
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
 8001af8:	e03e      	b.n	8001b78 <dir_find+0xa2>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	4619      	mov	r1, r3
 8001b00:	6938      	ldr	r0, [r7, #16]
 8001b02:	f7ff fa9e 	bl	8001042 <move_window>
 8001b06:	4603      	mov	r3, r0
 8001b08:	75fb      	strb	r3, [r7, #23]
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d12f      	bne.n	8001b70 <dir_find+0x9a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <dir_find+0x4e>
 8001b1e:	2304      	movs	r3, #4
 8001b20:	75fb      	strb	r3, [r7, #23]
 8001b22:	e028      	b.n	8001b76 <dir_find+0xa0>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	330b      	adds	r3, #11
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	719a      	strb	r2, [r3, #6]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	330b      	adds	r3, #11
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10a      	bne.n	8001b5c <dir_find+0x86>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69d8      	ldr	r0, [r3, #28]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3320      	adds	r3, #32
 8001b4e:	220b      	movs	r2, #11
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7ff f9ae 	bl	8000eb2 <mem_cmp>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00b      	beq.n	8001b74 <dir_find+0x9e>
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fe40 	bl	80017e4 <dir_next>
 8001b64:	4603      	mov	r3, r0
 8001b66:	75fb      	strb	r3, [r7, #23]
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0c5      	beq.n	8001afa <dir_find+0x24>
 8001b6e:	e002      	b.n	8001b76 <dir_find+0xa0>
 8001b70:	bf00      	nop
 8001b72:	e000      	b.n	8001b76 <dir_find+0xa0>
 8001b74:	bf00      	nop
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <dir_register>:
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	2101      	movs	r1, #1
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff febd 	bl	8001910 <dir_alloc>
 8001b96:	4603      	mov	r3, r0
 8001b98:	73fb      	strb	r3, [r7, #15]
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11c      	bne.n	8001bda <dir_register+0x5a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	68b8      	ldr	r0, [r7, #8]
 8001ba8:	f7ff fa4b 	bl	8001042 <move_window>
 8001bac:	4603      	mov	r3, r0
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d111      	bne.n	8001bda <dir_register+0x5a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff f95d 	bl	8000e7e <mem_set>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69d8      	ldr	r0, [r3, #28]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3320      	adds	r3, #32
 8001bcc:	220b      	movs	r2, #11
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7ff f934 	bl	8000e3c <mem_cpy>
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	70da      	strb	r2, [r3, #3]
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <get_fileinfo>:
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	725a      	strb	r2, [r3, #9]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d052      	beq.n	8001ca2 <get_fileinfo+0xbe>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e021      	b.n	8001c4a <get_fileinfo+0x66>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69da      	ldr	r2, [r3, #28]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	1c59      	adds	r1, r3, #1
 8001c0e:	6179      	str	r1, [r7, #20]
 8001c10:	4413      	add	r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d100      	bne.n	8001c1e <get_fileinfo+0x3a>
 8001c1c:	e015      	b.n	8001c4a <get_fileinfo+0x66>
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d101      	bne.n	8001c28 <get_fileinfo+0x44>
 8001c24:	23e5      	movs	r3, #229	; 0xe5
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b09      	cmp	r3, #9
 8001c2c:	d106      	bne.n	8001c3c <get_fileinfo+0x58>
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	613a      	str	r2, [r7, #16]
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	222e      	movs	r2, #46	; 0x2e
 8001c3a:	725a      	strb	r2, [r3, #9]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	613a      	str	r2, [r7, #16]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	725a      	strb	r2, [r3, #9]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b0a      	cmp	r3, #10
 8001c4e:	d9da      	bls.n	8001c06 <get_fileinfo+0x22>
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4413      	add	r3, r2
 8001c56:	3309      	adds	r3, #9
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	7ada      	ldrb	r2, [r3, #11]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	721a      	strb	r2, [r3, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	331c      	adds	r3, #28
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff f87b 	bl	8000d68 <ld_dword>
 8001c72:	4602      	mov	r2, r0
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	3316      	adds	r3, #22
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff f85a 	bl	8000d38 <ld_word>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	80da      	strh	r2, [r3, #6]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	3318      	adds	r3, #24
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f850 	bl	8000d38 <ld_word>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	809a      	strh	r2, [r3, #4]
 8001ca0:	e000      	b.n	8001ca4 <get_fileinfo+0xc0>
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <create_name>:
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3320      	adds	r3, #32
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	220b      	movs	r2, #11
 8001cc4:	2120      	movs	r1, #32
 8001cc6:	6938      	ldr	r0, [r7, #16]
 8001cc8:	f7ff f8d9 	bl	8000e7e <mem_set>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	623b      	str	r3, [r7, #32]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	61fa      	str	r2, [r7, #28]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cec:	2b20      	cmp	r3, #32
 8001cee:	d97c      	bls.n	8001dea <create_name+0x13e>
 8001cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cf4:	2b2f      	cmp	r3, #47	; 0x2f
 8001cf6:	d007      	beq.n	8001d08 <create_name+0x5c>
 8001cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cfc:	2b5c      	cmp	r3, #92	; 0x5c
 8001cfe:	d110      	bne.n	8001d22 <create_name+0x76>
 8001d00:	e002      	b.n	8001d08 <create_name+0x5c>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3301      	adds	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b2f      	cmp	r3, #47	; 0x2f
 8001d12:	d0f6      	beq.n	8001d02 <create_name+0x56>
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	4413      	add	r3, r2
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b5c      	cmp	r3, #92	; 0x5c
 8001d1e:	d0f0      	beq.n	8001d02 <create_name+0x56>
 8001d20:	e064      	b.n	8001dec <create_name+0x140>
 8001d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d26:	2b2e      	cmp	r3, #46	; 0x2e
 8001d28:	d003      	beq.n	8001d32 <create_name+0x86>
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d30d      	bcc.n	8001d4e <create_name+0xa2>
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	2b0b      	cmp	r3, #11
 8001d36:	d003      	beq.n	8001d40 <create_name+0x94>
 8001d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8001d3e:	d001      	beq.n	8001d44 <create_name+0x98>
 8001d40:	2306      	movs	r3, #6
 8001d42:	e06f      	b.n	8001e24 <create_name+0x178>
 8001d44:	2308      	movs	r3, #8
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	230b      	movs	r3, #11
 8001d4a:	623b      	str	r3, [r7, #32]
 8001d4c:	e04c      	b.n	8001de8 <create_name+0x13c>
 8001d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f8ef 	bl	8000f36 <dbc_1st>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d024      	beq.n	8001da8 <create_name+0xfc>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	61fa      	str	r2, [r7, #28]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	4413      	add	r3, r2
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f901 	bl	8000f76 <dbc_2nd>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d004      	beq.n	8001d84 <create_name+0xd8>
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d301      	bcc.n	8001d88 <create_name+0xdc>
 8001d84:	2306      	movs	r3, #6
 8001d86:	e04d      	b.n	8001e24 <create_name+0x178>
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	61ba      	str	r2, [r7, #24]
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4413      	add	r3, r2
 8001d92:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	61ba      	str	r2, [r7, #24]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	e797      	b.n	8001cd8 <create_name+0x2c>
 8001da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dac:	4619      	mov	r1, r3
 8001dae:	481f      	ldr	r0, [pc, #124]	; (8001e2c <create_name+0x180>)
 8001db0:	f7ff f8a6 	bl	8000f00 <chk_chr>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <create_name+0x112>
 8001dba:	2306      	movs	r3, #6
 8001dbc:	e032      	b.n	8001e24 <create_name+0x178>
 8001dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dc2:	2b60      	cmp	r3, #96	; 0x60
 8001dc4:	d908      	bls.n	8001dd8 <create_name+0x12c>
 8001dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dca:	2b7a      	cmp	r3, #122	; 0x7a
 8001dcc:	d804      	bhi.n	8001dd8 <create_name+0x12c>
 8001dce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dd2:	3b20      	subs	r3, #32
 8001dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	61ba      	str	r2, [r7, #24]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	e776      	b.n	8001cd8 <create_name+0x2c>
 8001dea:	bf00      	nop
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	441a      	add	r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <create_name+0x154>
 8001dfc:	2306      	movs	r3, #6
 8001dfe:	e011      	b.n	8001e24 <create_name+0x178>
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2be5      	cmp	r3, #229	; 0xe5
 8001e06:	d102      	bne.n	8001e0e <create_name+0x162>
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2205      	movs	r2, #5
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	d801      	bhi.n	8001e1a <create_name+0x16e>
 8001e16:	2204      	movs	r2, #4
 8001e18:	e000      	b.n	8001e1c <create_name+0x170>
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	330b      	adds	r3, #11
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	2300      	movs	r3, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	08008308 	.word	0x08008308

08001e30 <follow_path>:
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	e002      	b.n	8001e48 <follow_path+0x18>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b2f      	cmp	r3, #47	; 0x2f
 8001e4e:	d0f8      	beq.n	8001e42 <follow_path+0x12>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b5c      	cmp	r3, #92	; 0x5c
 8001e56:	d0f4      	beq.n	8001e42 <follow_path+0x12>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b1f      	cmp	r3, #31
 8001e64:	d80a      	bhi.n	8001e7c <follow_path+0x4c>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2280      	movs	r2, #128	; 0x80
 8001e6a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001e6e:	2100      	movs	r1, #0
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff fc3c 	bl	80016ee <dir_sdi>
 8001e76:	4603      	mov	r3, r0
 8001e78:	75fb      	strb	r3, [r7, #23]
 8001e7a:	e043      	b.n	8001f04 <follow_path+0xd4>
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff13 	bl	8001cac <create_name>
 8001e86:	4603      	mov	r3, r0
 8001e88:	75fb      	strb	r3, [r7, #23]
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d134      	bne.n	8001efa <follow_path+0xca>
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff fe20 	bl	8001ad6 <dir_find>
 8001e96:	4603      	mov	r3, r0
 8001e98:	75fb      	strb	r3, [r7, #23]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001ea0:	73fb      	strb	r3, [r7, #15]
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00a      	beq.n	8001ebe <follow_path+0x8e>
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d127      	bne.n	8001efe <follow_path+0xce>
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d122      	bne.n	8001efe <follow_path+0xce>
 8001eb8:	2305      	movs	r3, #5
 8001eba:	75fb      	strb	r3, [r7, #23]
 8001ebc:	e01f      	b.n	8001efe <follow_path+0xce>
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d11c      	bne.n	8001f02 <follow_path+0xd2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	799b      	ldrb	r3, [r3, #6]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <follow_path+0xaa>
 8001ed4:	2305      	movs	r3, #5
 8001ed6:	75fb      	strb	r3, [r7, #23]
 8001ed8:	e014      	b.n	8001f04 <follow_path+0xd4>
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee8:	4413      	add	r3, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	6938      	ldr	r0, [r7, #16]
 8001eee:	f7ff fd56 	bl	800199e <ld_clust>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	e7c0      	b.n	8001e7c <follow_path+0x4c>
 8001efa:	bf00      	nop
 8001efc:	e002      	b.n	8001f04 <follow_path+0xd4>
 8001efe:	bf00      	nop
 8001f00:	e000      	b.n	8001f04 <follow_path+0xd4>
 8001f02:	bf00      	nop
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <get_ldnumber>:
 8001f0e:	b480      	push	{r7}
 8001f10:	b089      	sub	sp, #36	; 0x24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <get_ldnumber+0x22>
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	e02d      	b.n	8001f8c <get_ldnumber+0x7e>
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	61fa      	str	r2, [r7, #28]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	73fb      	strb	r3, [r7, #15]
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d902      	bls.n	8001f46 <get_ldnumber+0x38>
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	2b3a      	cmp	r3, #58	; 0x3a
 8001f44:	d1f4      	bne.n	8001f30 <get_ldnumber+0x22>
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	2b3a      	cmp	r3, #58	; 0x3a
 8001f4a:	d11c      	bne.n	8001f86 <get_ldnumber+0x78>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b2f      	cmp	r3, #47	; 0x2f
 8001f56:	d90c      	bls.n	8001f72 <get_ldnumber+0x64>
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b39      	cmp	r3, #57	; 0x39
 8001f5e:	d808      	bhi.n	8001f72 <get_ldnumber+0x64>
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	3302      	adds	r3, #2
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d103      	bne.n	8001f72 <get_ldnumber+0x64>
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	3b30      	subs	r3, #48	; 0x30
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	dc04      	bgt.n	8001f82 <get_ldnumber+0x74>
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	e002      	b.n	8001f8c <get_ldnumber+0x7e>
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3724      	adds	r7, #36	; 0x24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <check_fs>:
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	70da      	strb	r2, [r3, #3]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f04f 32ff 	mov.w	r2, #4294967295
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fb0:	6839      	ldr	r1, [r7, #0]
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff f845 	bl	8001042 <move_window>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <check_fs+0x2a>
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	e038      	b.n	8002034 <check_fs+0x9c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3330      	adds	r3, #48	; 0x30
 8001fc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe feb4 	bl	8000d38 <ld_word>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <check_fs+0x48>
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e029      	b.n	8002034 <check_fs+0x9c>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fe6:	2be9      	cmp	r3, #233	; 0xe9
 8001fe8:	d009      	beq.n	8001ffe <check_fs+0x66>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ff0:	2beb      	cmp	r3, #235	; 0xeb
 8001ff2:	d004      	beq.n	8001ffe <check_fs+0x66>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ffa:	2be8      	cmp	r3, #232	; 0xe8
 8001ffc:	d119      	bne.n	8002032 <check_fs+0x9a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3330      	adds	r3, #48	; 0x30
 8002002:	3336      	adds	r3, #54	; 0x36
 8002004:	2203      	movs	r2, #3
 8002006:	490d      	ldr	r1, [pc, #52]	; (800203c <check_fs+0xa4>)
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe ff52 	bl	8000eb2 <mem_cmp>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <check_fs+0x80>
 8002014:	2300      	movs	r3, #0
 8002016:	e00d      	b.n	8002034 <check_fs+0x9c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3330      	adds	r3, #48	; 0x30
 800201c:	3352      	adds	r3, #82	; 0x52
 800201e:	2205      	movs	r2, #5
 8002020:	4907      	ldr	r1, [pc, #28]	; (8002040 <check_fs+0xa8>)
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe ff45 	bl	8000eb2 <mem_cmp>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <check_fs+0x9a>
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <check_fs+0x9c>
 8002032:	2302      	movs	r3, #2
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	08008318 	.word	0x08008318
 8002040:	0800831c 	.word	0x0800831c

08002044 <find_volume>:
 8002044:	b580      	push	{r7, lr}
 8002046:	b096      	sub	sp, #88	; 0x58
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	71fb      	strb	r3, [r7, #7]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f7ff ff58 	bl	8001f0e <get_ldnumber>
 800205e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002062:	2b00      	cmp	r3, #0
 8002064:	da01      	bge.n	800206a <find_volume+0x26>
 8002066:	230b      	movs	r3, #11
 8002068:	e238      	b.n	80024dc <find_volume+0x498>
 800206a:	4aa8      	ldr	r2, [pc, #672]	; (800230c <find_volume+0x2c8>)
 800206c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800206e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002072:	63bb      	str	r3, [r7, #56]	; 0x38
 8002074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <find_volume+0x3a>
 800207a:	230c      	movs	r3, #12
 800207c:	e22e      	b.n	80024dc <find_volume+0x498>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01a      	beq.n	80020ca <find_volume+0x86>
 8002094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fd01 	bl	8000aa0 <disk_status>
 800209e:	4603      	mov	r3, r0
 80020a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80020a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10c      	bne.n	80020ca <find_volume+0x86>
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <find_volume+0x82>
 80020b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <find_volume+0x82>
 80020c2:	230a      	movs	r3, #10
 80020c4:	e20a      	b.n	80024dc <find_volume+0x498>
 80020c6:	2300      	movs	r3, #0
 80020c8:	e208      	b.n	80024dc <find_volume+0x498>
 80020ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d6:	705a      	strb	r2, [r3, #1]
 80020d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020da:	785b      	ldrb	r3, [r3, #1]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fbf5 	bl	80008cc <disk_initialize>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80020e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <find_volume+0xb4>
 80020f4:	2303      	movs	r3, #3
 80020f6:	e1f1      	b.n	80024dc <find_volume+0x498>
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <find_volume+0xca>
 80020fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <find_volume+0xca>
 800210a:	230a      	movs	r3, #10
 800210c:	e1e6      	b.n	80024dc <find_volume+0x498>
 800210e:	2300      	movs	r3, #0
 8002110:	653b      	str	r3, [r7, #80]	; 0x50
 8002112:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002114:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002116:	f7ff ff3f 	bl	8001f98 <check_fs>
 800211a:	4603      	mov	r3, r0
 800211c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002120:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002124:	2b02      	cmp	r3, #2
 8002126:	d14b      	bne.n	80021c0 <find_volume+0x17c>
 8002128:	2300      	movs	r3, #0
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	e01f      	b.n	800216e <find_volume+0x12a>
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800213c:	4413      	add	r3, r2
 800213e:	633b      	str	r3, [r7, #48]	; 0x30
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002142:	3304      	adds	r3, #4
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <find_volume+0x114>
 800214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214c:	3308      	adds	r3, #8
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fe0a 	bl	8000d68 <ld_dword>
 8002154:	4602      	mov	r2, r0
 8002156:	e000      	b.n	800215a <find_volume+0x116>
 8002158:	2200      	movs	r2, #0
 800215a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002162:	440b      	add	r3, r1
 8002164:	f843 2c44 	str.w	r2, [r3, #-68]
 8002168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800216a:	3301      	adds	r3, #1
 800216c:	643b      	str	r3, [r7, #64]	; 0x40
 800216e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002170:	2b03      	cmp	r3, #3
 8002172:	d9dc      	bls.n	800212e <find_volume+0xea>
 8002174:	2300      	movs	r3, #0
 8002176:	643b      	str	r3, [r7, #64]	; 0x40
 8002178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <find_volume+0x140>
 800217e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002180:	3b01      	subs	r3, #1
 8002182:	643b      	str	r3, [r7, #64]	; 0x40
 8002184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800218c:	4413      	add	r3, r2
 800218e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002192:	653b      	str	r3, [r7, #80]	; 0x50
 8002194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <find_volume+0x162>
 800219a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800219c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800219e:	f7ff fefb 	bl	8001f98 <check_fs>
 80021a2:	4603      	mov	r3, r0
 80021a4:	e000      	b.n	80021a8 <find_volume+0x164>
 80021a6:	2303      	movs	r3, #3
 80021a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80021ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d905      	bls.n	80021c0 <find_volume+0x17c>
 80021b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b6:	3301      	adds	r3, #1
 80021b8:	643b      	str	r3, [r7, #64]	; 0x40
 80021ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d9e1      	bls.n	8002184 <find_volume+0x140>
 80021c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d101      	bne.n	80021cc <find_volume+0x188>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e187      	b.n	80024dc <find_volume+0x498>
 80021cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d901      	bls.n	80021d8 <find_volume+0x194>
 80021d4:	230d      	movs	r3, #13
 80021d6:	e181      	b.n	80024dc <find_volume+0x498>
 80021d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021da:	3330      	adds	r3, #48	; 0x30
 80021dc:	330b      	adds	r3, #11
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fdaa 	bl	8000d38 <ld_word>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ea:	d001      	beq.n	80021f0 <find_volume+0x1ac>
 80021ec:	230d      	movs	r3, #13
 80021ee:	e175      	b.n	80024dc <find_volume+0x498>
 80021f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f2:	3330      	adds	r3, #48	; 0x30
 80021f4:	3316      	adds	r3, #22
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fd9e 	bl	8000d38 <ld_word>
 80021fc:	4603      	mov	r3, r0
 80021fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <find_volume+0x1d0>
 8002206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002208:	3330      	adds	r3, #48	; 0x30
 800220a:	3324      	adds	r3, #36	; 0x24
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fdab 	bl	8000d68 <ld_dword>
 8002212:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002218:	619a      	str	r2, [r3, #24]
 800221a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800221c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002222:	709a      	strb	r2, [r3, #2]
 8002224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002226:	789b      	ldrb	r3, [r3, #2]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d005      	beq.n	8002238 <find_volume+0x1f4>
 800222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222e:	789b      	ldrb	r3, [r3, #2]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d001      	beq.n	8002238 <find_volume+0x1f4>
 8002234:	230d      	movs	r3, #13
 8002236:	e151      	b.n	80024dc <find_volume+0x498>
 8002238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223a:	789b      	ldrb	r3, [r3, #2]
 800223c:	461a      	mov	r2, r3
 800223e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b29a      	uxth	r2, r3
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002250:	815a      	strh	r2, [r3, #10]
 8002252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002254:	895b      	ldrh	r3, [r3, #10]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <find_volume+0x228>
 800225a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225c:	895b      	ldrh	r3, [r3, #10]
 800225e:	461a      	mov	r2, r3
 8002260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002262:	895b      	ldrh	r3, [r3, #10]
 8002264:	3b01      	subs	r3, #1
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <find_volume+0x22c>
 800226c:	230d      	movs	r3, #13
 800226e:	e135      	b.n	80024dc <find_volume+0x498>
 8002270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002272:	3330      	adds	r3, #48	; 0x30
 8002274:	3311      	adds	r3, #17
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fd5e 	bl	8000d38 <ld_word>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002282:	811a      	strh	r2, [r3, #8]
 8002284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002286:	891b      	ldrh	r3, [r3, #8]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <find_volume+0x252>
 8002292:	230d      	movs	r3, #13
 8002294:	e122      	b.n	80024dc <find_volume+0x498>
 8002296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002298:	3330      	adds	r3, #48	; 0x30
 800229a:	3313      	adds	r3, #19
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe fd4b 	bl	8000d38 <ld_word>
 80022a2:	4603      	mov	r3, r0
 80022a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80022a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d106      	bne.n	80022ba <find_volume+0x276>
 80022ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ae:	3330      	adds	r3, #48	; 0x30
 80022b0:	3320      	adds	r3, #32
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fd58 	bl	8000d68 <ld_dword>
 80022b8:	64b8      	str	r0, [r7, #72]	; 0x48
 80022ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022bc:	3330      	adds	r3, #48	; 0x30
 80022be:	330e      	adds	r3, #14
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe fd39 	bl	8000d38 <ld_word>
 80022c6:	4603      	mov	r3, r0
 80022c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80022ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <find_volume+0x290>
 80022d0:	230d      	movs	r3, #13
 80022d2:	e103      	b.n	80024dc <find_volume+0x498>
 80022d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80022d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d8:	4413      	add	r3, r2
 80022da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022dc:	8912      	ldrh	r2, [r2, #8]
 80022de:	0912      	lsrs	r2, r2, #4
 80022e0:	b292      	uxth	r2, r2
 80022e2:	4413      	add	r3, r2
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d201      	bcs.n	80022f2 <find_volume+0x2ae>
 80022ee:	230d      	movs	r3, #13
 80022f0:	e0f4      	b.n	80024dc <find_volume+0x498>
 80022f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022fa:	8952      	ldrh	r2, [r2, #10]
 80022fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	2b00      	cmp	r3, #0
 8002306:	d103      	bne.n	8002310 <find_volume+0x2cc>
 8002308:	230d      	movs	r3, #13
 800230a:	e0e7      	b.n	80024dc <find_volume+0x498>
 800230c:	2000009c 	.word	0x2000009c
 8002310:	2300      	movs	r3, #0
 8002312:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	4a72      	ldr	r2, [pc, #456]	; (80024e4 <find_volume+0x4a0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d802      	bhi.n	8002324 <find_volume+0x2e0>
 800231e:	2303      	movs	r3, #3
 8002320:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800232a:	4293      	cmp	r3, r2
 800232c:	d802      	bhi.n	8002334 <find_volume+0x2f0>
 800232e:	2302      	movs	r3, #2
 8002330:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	f640 72f5 	movw	r2, #4085	; 0xff5
 800233a:	4293      	cmp	r3, r2
 800233c:	d802      	bhi.n	8002344 <find_volume+0x300>
 800233e:	2301      	movs	r3, #1
 8002340:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002344:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <find_volume+0x30c>
 800234c:	230d      	movs	r3, #13
 800234e:	e0c5      	b.n	80024dc <find_volume+0x498>
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	1c9a      	adds	r2, r3, #2
 8002354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002356:	615a      	str	r2, [r3, #20]
 8002358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800235c:	61da      	str	r2, [r3, #28]
 800235e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002362:	441a      	add	r2, r3
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002366:	621a      	str	r2, [r3, #32]
 8002368:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	441a      	add	r2, r3
 800236e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
 8002372:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002376:	2b03      	cmp	r3, #3
 8002378:	d11e      	bne.n	80023b8 <find_volume+0x374>
 800237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237c:	3330      	adds	r3, #48	; 0x30
 800237e:	332a      	adds	r3, #42	; 0x2a
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe fcd9 	bl	8000d38 <ld_word>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <find_volume+0x34c>
 800238c:	230d      	movs	r3, #13
 800238e:	e0a5      	b.n	80024dc <find_volume+0x498>
 8002390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002392:	891b      	ldrh	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <find_volume+0x358>
 8002398:	230d      	movs	r3, #13
 800239a:	e09f      	b.n	80024dc <find_volume+0x498>
 800239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239e:	3330      	adds	r3, #48	; 0x30
 80023a0:	332c      	adds	r3, #44	; 0x2c
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fce0 	bl	8000d68 <ld_dword>
 80023a8:	4602      	mov	r2, r0
 80023aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
 80023ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	647b      	str	r3, [r7, #68]	; 0x44
 80023b6:	e01f      	b.n	80023f8 <find_volume+0x3b4>
 80023b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ba:	891b      	ldrh	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <find_volume+0x380>
 80023c0:	230d      	movs	r3, #13
 80023c2:	e08b      	b.n	80024dc <find_volume+0x498>
 80023c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c6:	6a1a      	ldr	r2, [r3, #32]
 80023c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ca:	441a      	add	r2, r3
 80023cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
 80023d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d103      	bne.n	80023e0 <find_volume+0x39c>
 80023d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	e00a      	b.n	80023f6 <find_volume+0x3b2>
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	085a      	lsrs	r2, r3, #1
 80023ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	647b      	str	r3, [r7, #68]	; 0x44
 80023f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002402:	0a5b      	lsrs	r3, r3, #9
 8002404:	429a      	cmp	r2, r3
 8002406:	d201      	bcs.n	800240c <find_volume+0x3c8>
 8002408:	230d      	movs	r3, #13
 800240a:	e067      	b.n	80024dc <find_volume+0x498>
 800240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240e:	f04f 32ff 	mov.w	r2, #4294967295
 8002412:	611a      	str	r2, [r3, #16]
 8002414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241a:	60da      	str	r2, [r3, #12]
 800241c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	711a      	strb	r2, [r3, #4]
 8002422:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002426:	2b03      	cmp	r3, #3
 8002428:	d149      	bne.n	80024be <find_volume+0x47a>
 800242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242c:	3330      	adds	r3, #48	; 0x30
 800242e:	3330      	adds	r3, #48	; 0x30
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe fc81 	bl	8000d38 <ld_word>
 8002436:	4603      	mov	r3, r0
 8002438:	2b01      	cmp	r3, #1
 800243a:	d140      	bne.n	80024be <find_volume+0x47a>
 800243c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800243e:	3301      	adds	r3, #1
 8002440:	4619      	mov	r1, r3
 8002442:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002444:	f7fe fdfd 	bl	8001042 <move_window>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d137      	bne.n	80024be <find_volume+0x47a>
 800244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002450:	2200      	movs	r2, #0
 8002452:	711a      	strb	r2, [r3, #4]
 8002454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002456:	3330      	adds	r3, #48	; 0x30
 8002458:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe fc6b 	bl	8000d38 <ld_word>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800246a:	429a      	cmp	r2, r3
 800246c:	d127      	bne.n	80024be <find_volume+0x47a>
 800246e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002470:	3330      	adds	r3, #48	; 0x30
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fc78 	bl	8000d68 <ld_dword>
 8002478:	4602      	mov	r2, r0
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <find_volume+0x4a4>)
 800247c:	429a      	cmp	r2, r3
 800247e:	d11e      	bne.n	80024be <find_volume+0x47a>
 8002480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002482:	3330      	adds	r3, #48	; 0x30
 8002484:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fc6d 	bl	8000d68 <ld_dword>
 800248e:	4602      	mov	r2, r0
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <find_volume+0x4a8>)
 8002492:	429a      	cmp	r2, r3
 8002494:	d113      	bne.n	80024be <find_volume+0x47a>
 8002496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002498:	3330      	adds	r3, #48	; 0x30
 800249a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fc62 	bl	8000d68 <ld_dword>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a8:	611a      	str	r2, [r3, #16]
 80024aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ac:	3330      	adds	r3, #48	; 0x30
 80024ae:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fc58 	bl	8000d68 <ld_dword>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <find_volume+0x4ac>)
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	3301      	adds	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <find_volume+0x4ac>)
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <find_volume+0x4ac>)
 80024d4:	881a      	ldrh	r2, [r3, #0]
 80024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d8:	80da      	strh	r2, [r3, #6]
 80024da:	2300      	movs	r3, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	3758      	adds	r7, #88	; 0x58
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	0ffffff5 	.word	0x0ffffff5
 80024e8:	41615252 	.word	0x41615252
 80024ec:	61417272 	.word	0x61417272
 80024f0:	200000a0 	.word	0x200000a0

080024f4 <validate>:
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
 80024fe:	2309      	movs	r3, #9
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01c      	beq.n	8002542 <validate+0x4e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d018      	beq.n	8002542 <validate+0x4e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d013      	beq.n	8002542 <validate+0x4e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	889a      	ldrh	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	88db      	ldrh	r3, [r3, #6]
 8002524:	429a      	cmp	r2, r3
 8002526:	d10c      	bne.n	8002542 <validate+0x4e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	785b      	ldrb	r3, [r3, #1]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fab6 	bl	8000aa0 <disk_status>
 8002534:	4603      	mov	r3, r0
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <validate+0x4e>
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <validate+0x5a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	e000      	b.n	8002550 <validate+0x5c>
 800254e:	2300      	movs	r3, #0
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <f_mount>:
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	4613      	mov	r3, r2
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	f107 0310 	add.w	r3, r7, #16
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fcc9 	bl	8001f0e <get_ldnumber>
 800257c:	61f8      	str	r0, [r7, #28]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	2b00      	cmp	r3, #0
 8002582:	da01      	bge.n	8002588 <f_mount+0x28>
 8002584:	230b      	movs	r3, #11
 8002586:	e025      	b.n	80025d4 <f_mount+0x74>
 8002588:	4a14      	ldr	r2, [pc, #80]	; (80025dc <f_mount+0x7c>)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <f_mount+0x3e>
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <f_mount+0x4a>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	490b      	ldr	r1, [pc, #44]	; (80025dc <f_mount+0x7c>)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <f_mount+0x5e>
 80025ba:	2300      	movs	r3, #0
 80025bc:	e00a      	b.n	80025d4 <f_mount+0x74>
 80025be:	f107 010c 	add.w	r1, r7, #12
 80025c2:	f107 0308 	add.w	r3, r7, #8
 80025c6:	2200      	movs	r2, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fd3b 	bl	8002044 <find_volume>
 80025ce:	4603      	mov	r3, r0
 80025d0:	75fb      	strb	r3, [r7, #23]
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
 80025d4:	4618      	mov	r0, r3
 80025d6:	3720      	adds	r7, #32
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	2000009c 	.word	0x2000009c

080025e0 <f_open>:
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b099      	sub	sp, #100	; 0x64
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	4613      	mov	r3, r2
 80025ec:	71fb      	strb	r3, [r7, #7]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <f_open+0x18>
 80025f4:	2309      	movs	r3, #9
 80025f6:	e172      	b.n	80028de <f_open+0x2fe>
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025fe:	71fb      	strb	r3, [r7, #7]
 8002600:	79fa      	ldrb	r2, [r7, #7]
 8002602:	f107 0114 	add.w	r1, r7, #20
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fd1a 	bl	8002044 <find_volume>
 8002610:	4603      	mov	r3, r0
 8002612:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800261a:	2b00      	cmp	r3, #0
 800261c:	f040 8156 	bne.w	80028cc <f_open+0x2ec>
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	f107 0318 	add.w	r3, r7, #24
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fbff 	bl	8001e30 <follow_path>
 8002632:	4603      	mov	r3, r0
 8002634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002638:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <f_open+0x70>
 8002640:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002644:	b25b      	sxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	da02      	bge.n	8002650 <f_open+0x70>
 800264a:	2306      	movs	r3, #6
 800264c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 031c 	and.w	r3, r3, #28
 8002656:	2b00      	cmp	r3, #0
 8002658:	d073      	beq.n	8002742 <f_open+0x162>
 800265a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800265e:	2b00      	cmp	r3, #0
 8002660:	d010      	beq.n	8002684 <f_open+0xa4>
 8002662:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002666:	2b04      	cmp	r3, #4
 8002668:	d107      	bne.n	800267a <f_open+0x9a>
 800266a:	f107 0318 	add.w	r3, r7, #24
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fa86 	bl	8001b80 <dir_register>
 8002674:	4603      	mov	r3, r0
 8002676:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	71fb      	strb	r3, [r7, #7]
 8002682:	e010      	b.n	80026a6 <f_open+0xc6>
 8002684:	7fbb      	ldrb	r3, [r7, #30]
 8002686:	f003 0311 	and.w	r3, r3, #17
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <f_open+0xb6>
 800268e:	2307      	movs	r3, #7
 8002690:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002694:	e007      	b.n	80026a6 <f_open+0xc6>
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <f_open+0xc6>
 80026a0:	2308      	movs	r3, #8
 80026a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80026a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d163      	bne.n	8002776 <f_open+0x196>
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d05e      	beq.n	8002776 <f_open+0x196>
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff f96d 	bl	800199e <ld_clust>
 80026c4:	6538      	str	r0, [r7, #80]	; 0x50
 80026c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c8:	f103 040e 	add.w	r4, r3, #14
 80026cc:	f7fe fb2a 	bl	8000d24 <get_fattime>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4619      	mov	r1, r3
 80026d4:	4620      	mov	r0, r4
 80026d6:	f7fe fb85 	bl	8000de4 <st_dword>
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	330b      	adds	r3, #11
 80026de:	2220      	movs	r2, #32
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026e6:	2200      	movs	r2, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff f977 	bl	80019dc <st_clust>
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f0:	331c      	adds	r3, #28
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fb75 	bl	8000de4 <st_dword>
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2201      	movs	r2, #1
 80026fe:	70da      	strb	r2, [r3, #3]
 8002700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002702:	2b00      	cmp	r3, #0
 8002704:	d037      	beq.n	8002776 <f_open+0x196>
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800270c:	f107 0318 	add.w	r3, r7, #24
 8002710:	2200      	movs	r2, #0
 8002712:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fe6c 	bl	80013f2 <remove_chain>
 800271a:	4603      	mov	r3, r0
 800271c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002724:	2b00      	cmp	r3, #0
 8002726:	d126      	bne.n	8002776 <f_open+0x196>
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fc88 	bl	8001042 <move_window>
 8002732:	4603      	mov	r3, r0
 8002734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800273c:	3a01      	subs	r2, #1
 800273e:	60da      	str	r2, [r3, #12]
 8002740:	e019      	b.n	8002776 <f_open+0x196>
 8002742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002746:	2b00      	cmp	r3, #0
 8002748:	d115      	bne.n	8002776 <f_open+0x196>
 800274a:	7fbb      	ldrb	r3, [r7, #30]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <f_open+0x17c>
 8002754:	2304      	movs	r3, #4
 8002756:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800275a:	e00c      	b.n	8002776 <f_open+0x196>
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <f_open+0x196>
 8002766:	7fbb      	ldrb	r3, [r7, #30]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <f_open+0x196>
 8002770:	2307      	movs	r3, #7
 8002772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <f_open+0x1be>
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <f_open+0x1b0>
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800278e:	71fb      	strb	r3, [r7, #7]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	621a      	str	r2, [r3, #32]
 8002798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24
 800279e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f040 8092 	bne.w	80028cc <f_open+0x2ec>
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff f8f5 	bl	800199e <ld_clust>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027bc:	331c      	adds	r3, #28
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fad2 	bl	8000d68 <ld_dword>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	88da      	ldrh	r2, [r3, #6]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	809a      	strh	r2, [r3, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	79fa      	ldrb	r2, [r7, #7]
 80027dc:	741a      	strb	r2, [r3, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	745a      	strb	r2, [r3, #17]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	61da      	str	r2, [r3, #28]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	615a      	str	r2, [r3, #20]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3328      	adds	r3, #40	; 0x28
 80027f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe fb3f 	bl	8000e7e <mem_set>
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	2b00      	cmp	r3, #0
 8002808:	d060      	beq.n	80028cc <f_open+0x2ec>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d05c      	beq.n	80028cc <f_open+0x2ec>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	615a      	str	r2, [r3, #20]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	895b      	ldrh	r3, [r3, #10]
 800281e:	025b      	lsls	r3, r3, #9
 8002820:	64bb      	str	r3, [r7, #72]	; 0x48
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	65bb      	str	r3, [r7, #88]	; 0x58
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	657b      	str	r3, [r7, #84]	; 0x54
 800282e:	e016      	b.n	800285e <f_open+0x27e>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fc50 	bl	80010da <get_fat>
 800283a:	65b8      	str	r0, [r7, #88]	; 0x58
 800283c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800283e:	2b01      	cmp	r3, #1
 8002840:	d802      	bhi.n	8002848 <f_open+0x268>
 8002842:	2302      	movs	r3, #2
 8002844:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284e:	d102      	bne.n	8002856 <f_open+0x276>
 8002850:	2301      	movs	r3, #1
 8002852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002856:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	657b      	str	r3, [r7, #84]	; 0x54
 800285e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <f_open+0x28e>
 8002866:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800286a:	429a      	cmp	r2, r3
 800286c:	d8e0      	bhi.n	8002830 <f_open+0x250>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002872:	619a      	str	r2, [r3, #24]
 8002874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002878:	2b00      	cmp	r3, #0
 800287a:	d127      	bne.n	80028cc <f_open+0x2ec>
 800287c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002882:	2b00      	cmp	r3, #0
 8002884:	d022      	beq.n	80028cc <f_open+0x2ec>
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fc06 	bl	800109c <clst2sect>
 8002890:	6478      	str	r0, [r7, #68]	; 0x44
 8002892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002894:	2b00      	cmp	r3, #0
 8002896:	d103      	bne.n	80028a0 <f_open+0x2c0>
 8002898:	2302      	movs	r3, #2
 800289a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800289e:	e015      	b.n	80028cc <f_open+0x2ec>
 80028a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a2:	0a5a      	lsrs	r2, r3, #9
 80028a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a6:	441a      	add	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	61da      	str	r2, [r3, #28]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	7858      	ldrb	r0, [r3, #1]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	69da      	ldr	r2, [r3, #28]
 80028ba:	2301      	movs	r3, #1
 80028bc:	f7fe f906 	bl	8000acc <disk_read>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <f_open+0x2ec>
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80028cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <f_open+0x2fa>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80028de:	4618      	mov	r0, r3
 80028e0:	3764      	adds	r7, #100	; 0x64
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}

080028e6 <f_read>:
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b08e      	sub	sp, #56	; 0x38
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f107 0214 	add.w	r2, r7, #20
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fdf4 	bl	80024f4 <validate>
 800290c:	4603      	mov	r3, r0
 800290e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002912:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002916:	2b00      	cmp	r3, #0
 8002918:	d107      	bne.n	800292a <f_read+0x44>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	7c5b      	ldrb	r3, [r3, #17]
 800291e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002922:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <f_read+0x4a>
 800292a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800292e:	e109      	b.n	8002b44 <f_read+0x25e>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	7c1b      	ldrb	r3, [r3, #16]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <f_read+0x5a>
 800293c:	2307      	movs	r3, #7
 800293e:	e101      	b.n	8002b44 <f_read+0x25e>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	429a      	cmp	r2, r3
 8002952:	f240 80f2 	bls.w	8002b3a <f_read+0x254>
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	e0ee      	b.n	8002b3a <f_read+0x254>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002964:	2b00      	cmp	r3, #0
 8002966:	f040 80ba 	bne.w	8002ade <f_read+0x1f8>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	0a5b      	lsrs	r3, r3, #9
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	8952      	ldrh	r2, [r2, #10]
 8002974:	3a01      	subs	r2, #1
 8002976:	4013      	ands	r3, r2
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d123      	bne.n	80029c8 <f_read+0xe2>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <f_read+0xaa>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	633b      	str	r3, [r7, #48]	; 0x30
 800298e:	e007      	b.n	80029a0 <f_read+0xba>
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	4619      	mov	r1, r3
 8002998:	4610      	mov	r0, r2
 800299a:	f7fe fb9e 	bl	80010da <get_fat>
 800299e:	6338      	str	r0, [r7, #48]	; 0x30
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d804      	bhi.n	80029b0 <f_read+0xca>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2202      	movs	r2, #2
 80029aa:	745a      	strb	r2, [r3, #17]
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0c9      	b.n	8002b44 <f_read+0x25e>
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d104      	bne.n	80029c2 <f_read+0xdc>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	745a      	strb	r2, [r3, #17]
 80029be:	2301      	movs	r3, #1
 80029c0:	e0c0      	b.n	8002b44 <f_read+0x25e>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c6:	619a      	str	r2, [r3, #24]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	4619      	mov	r1, r3
 80029d0:	4610      	mov	r0, r2
 80029d2:	f7fe fb63 	bl	800109c <clst2sect>
 80029d6:	61b8      	str	r0, [r7, #24]
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d104      	bne.n	80029e8 <f_read+0x102>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2202      	movs	r2, #2
 80029e2:	745a      	strb	r2, [r3, #17]
 80029e4:	2302      	movs	r3, #2
 80029e6:	e0ad      	b.n	8002b44 <f_read+0x25e>
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	4413      	add	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	0a5b      	lsrs	r3, r3, #9
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d039      	beq.n	8002a70 <f_read+0x18a>
 80029fc:	69fa      	ldr	r2, [r7, #28]
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	4413      	add	r3, r2
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	8952      	ldrh	r2, [r2, #10]
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d905      	bls.n	8002a16 <f_read+0x130>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	895b      	ldrh	r3, [r3, #10]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	7858      	ldrb	r0, [r3, #1]
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a20:	f7fe f854 	bl	8000acc <disk_read>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d004      	beq.n	8002a34 <f_read+0x14e>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	745a      	strb	r2, [r3, #17]
 8002a30:	2301      	movs	r3, #1
 8002a32:	e087      	b.n	8002b44 <f_read+0x25e>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	7c1b      	ldrb	r3, [r3, #16]
 8002a38:	b25b      	sxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	da14      	bge.n	8002a68 <f_read+0x182>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d90d      	bls.n	8002a68 <f_read+0x182>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	025b      	lsls	r3, r3, #9
 8002a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a58:	18d0      	adds	r0, r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3328      	adds	r3, #40	; 0x28
 8002a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7fe f9ea 	bl	8000e3c <mem_cpy>
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	025b      	lsls	r3, r3, #9
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6e:	e050      	b.n	8002b12 <f_read+0x22c>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d02e      	beq.n	8002ad8 <f_read+0x1f2>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	7c1b      	ldrb	r3, [r3, #16]
 8002a7e:	b25b      	sxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	da18      	bge.n	8002ab6 <f_read+0x1d0>
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	7858      	ldrb	r0, [r3, #1]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	2301      	movs	r3, #1
 8002a94:	f7fe f884 	bl	8000ba0 <disk_write>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d004      	beq.n	8002aa8 <f_read+0x1c2>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	745a      	strb	r2, [r3, #17]
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e04d      	b.n	8002b44 <f_read+0x25e>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	7c1b      	ldrb	r3, [r3, #16]
 8002aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	741a      	strb	r2, [r3, #16]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	7858      	ldrb	r0, [r3, #1]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	f7fe f802 	bl	8000acc <disk_read>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d004      	beq.n	8002ad8 <f_read+0x1f2>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	745a      	strb	r2, [r3, #17]
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e035      	b.n	8002b44 <f_read+0x25e>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	61da      	str	r2, [r3, #28]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d901      	bls.n	8002af8 <f_read+0x212>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b06:	4413      	add	r3, r2
 8002b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b0e:	f7fe f995 	bl	8000e3c <mem_cpy>
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	441a      	add	r2, r3
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	4413      	add	r3, r2
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	441a      	add	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	615a      	str	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f47f af0d 	bne.w	800295c <f_read+0x76>
 8002b42:	2300      	movs	r3, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	3738      	adds	r7, #56	; 0x38
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <f_opendir>:
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <f_opendir+0x14>
 8002b5c:	2309      	movs	r3, #9
 8002b5e:	e04a      	b.n	8002bf6 <f_opendir+0xaa>
 8002b60:	f107 0108 	add.w	r1, r7, #8
 8002b64:	463b      	mov	r3, r7
 8002b66:	2200      	movs	r2, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fa6b 	bl	8002044 <find_volume>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	73fb      	strb	r3, [r7, #15]
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d137      	bne.n	8002be8 <f_opendir+0x9c>
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff f954 	bl	8001e30 <follow_path>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d125      	bne.n	8002bde <f_opendir+0x92>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002b98:	b25b      	sxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	db12      	blt.n	8002bc4 <f_opendir+0x78>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	799b      	ldrb	r3, [r3, #6]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <f_opendir+0x74>
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f7fe fef3 	bl	800199e <ld_clust>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	e001      	b.n	8002bc4 <f_opendir+0x78>
 8002bc0:	2305      	movs	r3, #5
 8002bc2:	73fb      	strb	r3, [r7, #15]
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <f_opendir+0x92>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	88da      	ldrh	r2, [r3, #6]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	809a      	strh	r2, [r3, #4]
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7fe fd8a 	bl	80016ee <dir_sdi>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d101      	bne.n	8002be8 <f_opendir+0x9c>
 8002be4:	2305      	movs	r3, #5
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <f_opendir+0xa8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <f_closedir>:
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f107 0208 	add.w	r2, r7, #8
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fc70 	bl	80024f4 <validate>
 8002c14:	4603      	mov	r3, r0
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <f_closedir+0x26>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <f_readdir>:
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f107 0208 	add.w	r2, r7, #8
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fc57 	bl	80024f4 <validate>
 8002c46:	4603      	mov	r3, r0
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d126      	bne.n	8002c9e <f_readdir+0x70>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <f_readdir+0x36>
 8002c56:	2100      	movs	r1, #0
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fe fd48 	bl	80016ee <dir_sdi>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	e01c      	b.n	8002c9e <f_readdir+0x70>
 8002c64:	2100      	movs	r1, #0
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe fed8 	bl	8001a1c <dir_read>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d101      	bne.n	8002c7a <f_readdir+0x4c>
 8002c76:	2300      	movs	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10e      	bne.n	8002c9e <f_readdir+0x70>
 8002c80:	6839      	ldr	r1, [r7, #0]
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fe ffae 	bl	8001be4 <get_fileinfo>
 8002c88:	2100      	movs	r1, #0
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fe fdaa 	bl	80017e4 <dir_next>
 8002c90:	4603      	mov	r3, r0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d101      	bne.n	8002c9e <f_readdir+0x70>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_ADC_ConvCpltCallback>:
static void MX_TIM6_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]


		  		  value = HAL_ADC_GetValue(&hadc1);
 8002cb0:	4851      	ldr	r0, [pc, #324]	; (8002df8 <HAL_ADC_ConvCpltCallback+0x150>)
 8002cb2:	f001 fb12 	bl	80042da <HAL_ADC_GetValue>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002cbc:	601a      	str	r2, [r3, #0]

//za pierwszym ustawieniem potencjometru działa ale potem się nie zmienia
		  	  if(value>0 && value <= 410) indeks_glosnosci = 0;
 8002cbe:	4b4f      	ldr	r3, [pc, #316]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	dd08      	ble.n	8002cd8 <HAL_ADC_ConvCpltCallback+0x30>
 8002cc6:	4b4d      	ldr	r3, [pc, #308]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8002cce:	dc03      	bgt.n	8002cd8 <HAL_ADC_ConvCpltCallback+0x30>
 8002cd0:	4b4b      	ldr	r3, [pc, #300]	; (8002e00 <HAL_ADC_ConvCpltCallback+0x158>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e088      	b.n	8002dea <HAL_ADC_ConvCpltCallback+0x142>
		  	  else if(value>410 && value <= 819) indeks_glosnosci = 1;
 8002cd8:	4b48      	ldr	r3, [pc, #288]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8002ce0:	dd08      	ble.n	8002cf4 <HAL_ADC_ConvCpltCallback+0x4c>
 8002ce2:	4b46      	ldr	r3, [pc, #280]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8002cea:	da03      	bge.n	8002cf4 <HAL_ADC_ConvCpltCallback+0x4c>
 8002cec:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <HAL_ADC_ConvCpltCallback+0x158>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e07a      	b.n	8002dea <HAL_ADC_ConvCpltCallback+0x142>
		  	  else if(value>819 && value <= 1228) indeks_glosnosci = 2;
 8002cf4:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8002cfc:	db09      	blt.n	8002d12 <HAL_ADC_ConvCpltCallback+0x6a>
 8002cfe:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8002d06:	4293      	cmp	r3, r2
 8002d08:	dc03      	bgt.n	8002d12 <HAL_ADC_ConvCpltCallback+0x6a>
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <HAL_ADC_ConvCpltCallback+0x158>)
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	e06b      	b.n	8002dea <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>1228 && value <= 1647) indeks_glosnosci = 3;
 8002d12:	4b3a      	ldr	r3, [pc, #232]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	dd08      	ble.n	8002d30 <HAL_ADC_ConvCpltCallback+0x88>
 8002d1e:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8002d26:	da03      	bge.n	8002d30 <HAL_ADC_ConvCpltCallback+0x88>
 8002d28:	4b35      	ldr	r3, [pc, #212]	; (8002e00 <HAL_ADC_ConvCpltCallback+0x158>)
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e05c      	b.n	8002dea <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>1647 && value <= 2058) indeks_glosnosci = 4;
 8002d30:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8002d38:	db09      	blt.n	8002d4e <HAL_ADC_ConvCpltCallback+0xa6>
 8002d3a:	4b30      	ldr	r3, [pc, #192]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f640 020a 	movw	r2, #2058	; 0x80a
 8002d42:	4293      	cmp	r3, r2
 8002d44:	dc03      	bgt.n	8002d4e <HAL_ADC_ConvCpltCallback+0xa6>
 8002d46:	4b2e      	ldr	r3, [pc, #184]	; (8002e00 <HAL_ADC_ConvCpltCallback+0x158>)
 8002d48:	2204      	movs	r2, #4
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e04d      	b.n	8002dea <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2058 && value <= 2467) indeks_glosnosci = 5;
 8002d4e:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f640 020a 	movw	r2, #2058	; 0x80a
 8002d56:	4293      	cmp	r3, r2
 8002d58:	dd09      	ble.n	8002d6e <HAL_ADC_ConvCpltCallback+0xc6>
 8002d5a:	4b28      	ldr	r3, [pc, #160]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f640 12a3 	movw	r2, #2467	; 0x9a3
 8002d62:	4293      	cmp	r3, r2
 8002d64:	dc03      	bgt.n	8002d6e <HAL_ADC_ConvCpltCallback+0xc6>
 8002d66:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <HAL_ADC_ConvCpltCallback+0x158>)
 8002d68:	2205      	movs	r2, #5
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	e03d      	b.n	8002dea <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2467 && value <= 2876) indeks_glosnosci = 6;
 8002d6e:	4b23      	ldr	r3, [pc, #140]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f640 12a3 	movw	r2, #2467	; 0x9a3
 8002d76:	4293      	cmp	r3, r2
 8002d78:	dd09      	ble.n	8002d8e <HAL_ADC_ConvCpltCallback+0xe6>
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f640 323c 	movw	r2, #2876	; 0xb3c
 8002d82:	4293      	cmp	r3, r2
 8002d84:	dc03      	bgt.n	8002d8e <HAL_ADC_ConvCpltCallback+0xe6>
 8002d86:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <HAL_ADC_ConvCpltCallback+0x158>)
 8002d88:	2206      	movs	r2, #6
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e02d      	b.n	8002dea <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2876 && value <= 3285) indeks_glosnosci = 7;
 8002d8e:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f640 323c 	movw	r2, #2876	; 0xb3c
 8002d96:	4293      	cmp	r3, r2
 8002d98:	dd09      	ble.n	8002dae <HAL_ADC_ConvCpltCallback+0x106>
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8002da2:	4293      	cmp	r3, r2
 8002da4:	dc03      	bgt.n	8002dae <HAL_ADC_ConvCpltCallback+0x106>
 8002da6:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <HAL_ADC_ConvCpltCallback+0x158>)
 8002da8:	2207      	movs	r2, #7
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	e01d      	b.n	8002dea <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>3285 && value <= 3692) indeks_glosnosci = 8;
 8002dae:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8002db6:	4293      	cmp	r3, r2
 8002db8:	dd09      	ble.n	8002dce <HAL_ADC_ConvCpltCallback+0x126>
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f640 626c 	movw	r2, #3692	; 0xe6c
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	dc03      	bgt.n	8002dce <HAL_ADC_ConvCpltCallback+0x126>
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <HAL_ADC_ConvCpltCallback+0x158>)
 8002dc8:	2208      	movs	r2, #8
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	e00d      	b.n	8002dea <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>3692 && value <= 4095) indeks_glosnosci = 9;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f640 626c 	movw	r2, #3692	; 0xe6c
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	dd07      	ble.n	8002dea <HAL_ADC_ConvCpltCallback+0x142>
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_ADC_ConvCpltCallback+0x154>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de2:	da02      	bge.n	8002dea <HAL_ADC_ConvCpltCallback+0x142>
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_ADC_ConvCpltCallback+0x158>)
 8002de6:	2209      	movs	r2, #9
 8002de8:	601a      	str	r2, [r3, #0]
		  	HAL_ADC_Start_IT(&hadc1);
 8002dea:	4803      	ldr	r0, [pc, #12]	; (8002df8 <HAL_ADC_ConvCpltCallback+0x150>)
 8002dec:	f001 f864 	bl	8003eb8 <HAL_ADC_Start_IT>
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200003f0 	.word	0x200003f0
 8002dfc:	200000a8 	.word	0x200000a8
 8002e00:	200000a4 	.word	0x200000a4

08002e04 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	80fb      	strh	r3, [r7, #6]

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET){
 8002e0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e12:	4831      	ldr	r0, [pc, #196]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002e14:	f002 f872 	bl	8004efc <HAL_GPIO_ReadPin>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10c      	bne.n	8002e38 <HAL_GPIO_EXTI_Callback+0x34>

		 //ciszej

		 if(indeks_glosnosci>0 && indeks_glosnosci<=9) indeks_glosnosci--;
 8002e1e:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <HAL_GPIO_EXTI_Callback+0xd8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	dd08      	ble.n	8002e38 <HAL_GPIO_EXTI_Callback+0x34>
 8002e26:	4b2d      	ldr	r3, [pc, #180]	; (8002edc <HAL_GPIO_EXTI_Callback+0xd8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b09      	cmp	r3, #9
 8002e2c:	dc04      	bgt.n	8002e38 <HAL_GPIO_EXTI_Callback+0x34>
 8002e2e:	4b2b      	ldr	r3, [pc, #172]	; (8002edc <HAL_GPIO_EXTI_Callback+0xd8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	4a29      	ldr	r2, [pc, #164]	; (8002edc <HAL_GPIO_EXTI_Callback+0xd8>)
 8002e36:	6013      	str	r3, [r2, #0]

		  	}

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 8002e38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e3c:	4826      	ldr	r0, [pc, #152]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002e3e:	f002 f85d 	bl	8004efc <HAL_GPIO_ReadPin>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d104      	bne.n	8002e52 <HAL_GPIO_EXTI_Callback+0x4e>
			  		//prev song
			  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e4c:	4824      	ldr	r0, [pc, #144]	; (8002ee0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002e4e:	f002 f886 	bl	8004f5e <HAL_GPIO_TogglePin>

			}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 8002e52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e56:	4820      	ldr	r0, [pc, #128]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002e58:	f002 f850 	bl	8004efc <HAL_GPIO_ReadPin>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d110      	bne.n	8002e84 <HAL_GPIO_EXTI_Callback+0x80>


		 //pause/start
		 //na razie tylko startuje
		 if(stan==1){
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d106      	bne.n	8002e78 <HAL_GPIO_EXTI_Callback+0x74>

		 HAL_TIM_Base_Start_IT(&htim4);
 8002e6a:	481f      	ldr	r0, [pc, #124]	; (8002ee8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002e6c:	f003 f913 	bl	8006096 <HAL_TIM_Base_Start_IT>

		 stan = 0;
 8002e70:	4b1c      	ldr	r3, [pc, #112]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	e005      	b.n	8002e84 <HAL_GPIO_EXTI_Callback+0x80>
		 }
		 else
		 {
			 HAL_TIM_Base_Stop_IT(&htim4);
 8002e78:	481b      	ldr	r0, [pc, #108]	; (8002ee8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002e7a:	f003 f930 	bl	80060de <HAL_TIM_Base_Stop_IT>
			 stan=1;
 8002e7e:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
		 }

	 		}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET){
 8002e84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e88:	4813      	ldr	r0, [pc, #76]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002e8a:	f002 f837 	bl	8004efc <HAL_GPIO_ReadPin>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d104      	bne.n	8002e9e <HAL_GPIO_EXTI_Callback+0x9a>
		 //volume up
		 		 	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e98:	4811      	ldr	r0, [pc, #68]	; (8002ee0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002e9a:	f002 f860 	bl	8004f5e <HAL_GPIO_TogglePin>

		 	}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 8002e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ea2:	480d      	ldr	r0, [pc, #52]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002ea4:	f002 f82a 	bl	8004efc <HAL_GPIO_ReadPin>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10c      	bne.n	8002ec8 <HAL_GPIO_EXTI_Callback+0xc4>

		 //glosniej

		 if(indeks_glosnosci>=0 && indeks_glosnosci<9)
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_GPIO_EXTI_Callback+0xd8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	db08      	blt.n	8002ec8 <HAL_GPIO_EXTI_Callback+0xc4>
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_GPIO_EXTI_Callback+0xd8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	dc04      	bgt.n	8002ec8 <HAL_GPIO_EXTI_Callback+0xc4>
			 indeks_glosnosci++;
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <HAL_GPIO_EXTI_Callback+0xd8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	4a05      	ldr	r2, [pc, #20]	; (8002edc <HAL_GPIO_EXTI_Callback+0xd8>)
 8002ec6:	6013      	str	r3, [r2, #0]
			 	}
	 HAL_Delay(200);
 8002ec8:	20c8      	movs	r0, #200	; 0xc8
 8002eca:	f000 ff8f 	bl	8003dec <HAL_Delay>

}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40020400 	.word	0x40020400
 8002edc:	200000a4 	.word	0x200000a4
 8002ee0:	40020c00 	.word	0x40020c00
 8002ee4:	200000ac 	.word	0x200000ac
 8002ee8:	200000f0 	.word	0x200000f0

08002eec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
if(htim->Instance == TIM4)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2a      	ldr	r2, [pc, #168]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d14d      	bne.n	8002f9a <HAL_TIM_PeriodElapsedCallback+0xae>
{
	if(aktualny_utwor==0){
 8002efe:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d122      	bne.n	8002f4c <HAL_TIM_PeriodElapsedCallback+0x60>
			HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,buf[i]);
 8002f06:	4b29      	ldr	r3, [pc, #164]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002f0c:	5cd3      	ldrb	r3, [r2, r3]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2200      	movs	r2, #0
 8002f12:	2100      	movs	r1, #0
 8002f14:	4827      	ldr	r0, [pc, #156]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002f16:	f001 fe0f 	bl	8004b38 <HAL_DAC_SetValue>

			f_read(&file, &buf2[i],1, &bytes_read);
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002f20:	1899      	adds	r1, r3, r2
 8002f22:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	4826      	ldr	r0, [pc, #152]	; (8002fc0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002f28:	f7ff fcdd 	bl	80028e6 <f_read>
			i++;
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3301      	adds	r3, #1
 8002f32:	4a1e      	ldr	r2, [pc, #120]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f34:	6013      	str	r3, [r2, #0]
			if(i==16000){
 8002f36:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002f3e:	d105      	bne.n	8002f4c <HAL_TIM_PeriodElapsedCallback+0x60>
				aktualny_utwor = 1;
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
				j=0;
 8002f46:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
				//HAL_TIM_Base_Start_IT(&htim7);*glosnosc_guziczki[indeks_glosnosci]
			}
		}

	if(aktualny_utwor==1){
 8002f4c:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d122      	bne.n	8002f9a <HAL_TIM_PeriodElapsedCallback+0xae>
		HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,buf2[j]);
 8002f54:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	4814      	ldr	r0, [pc, #80]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002f64:	f001 fde8 	bl	8004b38 <HAL_DAC_SetValue>

		f_read(&file, &buf[j],1, &bytes_read);
 8002f68:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a10      	ldr	r2, [pc, #64]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002f6e:	1899      	adds	r1, r3, r2
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	4812      	ldr	r0, [pc, #72]	; (8002fc0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002f76:	f7ff fcb6 	bl	80028e6 <f_read>
		j++;
 8002f7a:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	4a10      	ldr	r2, [pc, #64]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002f82:	6013      	str	r3, [r2, #0]
		if(j==16000){
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002f8c:	d105      	bne.n	8002f9a <HAL_TIM_PeriodElapsedCallback+0xae>
			aktualny_utwor = 0;
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
			i=0;
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
			f_read(&file, &buf2, 16000, &bytes_read);
			}
	HAL_TIM_Base_Stop_IT(&htim7);
}*/

}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40000800 	.word	0x40000800
 8002fa8:	200000b0 	.word	0x200000b0
 8002fac:	20000004 	.word	0x20000004
 8002fb0:	20004440 	.word	0x20004440
 8002fb4:	200042bc 	.word	0x200042bc
 8002fb8:	2000043c 	.word	0x2000043c
 8002fbc:	20000438 	.word	0x20000438
 8002fc0:	200001c8 	.word	0x200001c8
 8002fc4:	20000008 	.word	0x20000008

08002fc8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
	{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
			{

			// tutaj umieszczamy kod wykonywany w zależności od odebranej inf

			}
	}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <scan_files>:
*/
FRESULT scan_files (

    char* path        /* Start node to be scanned (***also used as work area***) */
)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b090      	sub	sp, #64	; 0x40
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
    UINT i;
    UINT z;
    static FILINFO fno;


    res = f_opendir(&dir, path);                       /* Open the directory */
 8002fe4:	f107 0308 	add.w	r3, r7, #8
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fdae 	bl	8002b4c <f_opendir>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (res == FR_OK) {
 8002ff6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d161      	bne.n	80030c2 <scan_files+0xe6>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	4933      	ldr	r1, [pc, #204]	; (80030d0 <scan_files+0xf4>)
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fe12 	bl	8002c2e <f_readdir>
 800300a:	4603      	mov	r3, r0
 800300c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8003010:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003014:	2b00      	cmp	r3, #0
 8003016:	d14f      	bne.n	80030b8 <scan_files+0xdc>
 8003018:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <scan_files+0xf4>)
 800301a:	7a5b      	ldrb	r3, [r3, #9]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d04b      	beq.n	80030b8 <scan_files+0xdc>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8003020:	4b2b      	ldr	r3, [pc, #172]	; (80030d0 <scan_files+0xf4>)
 8003022:	7a1b      	ldrb	r3, [r3, #8]
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <scan_files+0x88>
                i = strlen(path);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7fd f8cf 	bl	80001d0 <strlen>
 8003032:	6378      	str	r0, [r7, #52]	; 0x34
                sprintf(&path[i], "/%s", fno.fname);
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003038:	4413      	add	r3, r2
 800303a:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <scan_files+0xf8>)
 800303c:	4926      	ldr	r1, [pc, #152]	; (80030d8 <scan_files+0xfc>)
 800303e:	4618      	mov	r0, r3
 8003040:	f004 f8c6 	bl	80071d0 <siprintf>
                res = scan_files(path);                    /* Enter the directory */
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff ffc9 	bl	8002fdc <scan_files>
 800304a:	4603      	mov	r3, r0
 800304c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                if (res != FR_OK) break;
 8003050:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003054:	2b00      	cmp	r3, #0
 8003056:	d12e      	bne.n	80030b6 <scan_files+0xda>
                path[i] = 0;
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305c:	4413      	add	r3, r2
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	e7cc      	b.n	8002ffe <scan_files+0x22>
            } else {                                       /* It is a file. */
                printf("%s/%s\n", path, fno.fname);
 8003064:	4a1b      	ldr	r2, [pc, #108]	; (80030d4 <scan_files+0xf8>)
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	481c      	ldr	r0, [pc, #112]	; (80030dc <scan_files+0x100>)
 800306a:	f004 f899 	bl	80071a0 <iprintf>
                z = strlen(fno.fname);
 800306e:	4819      	ldr	r0, [pc, #100]	; (80030d4 <scan_files+0xf8>)
 8003070:	f7fd f8ae 	bl	80001d0 <strlen>
 8003074:	63b8      	str	r0, [r7, #56]	; 0x38
                if((fno.fname[z-1]=='V') && (fno.fname[z-2]=='A')&& (fno.fname[z-3]=='W') ){
 8003076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003078:	3b01      	subs	r3, #1
 800307a:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <scan_files+0xf4>)
 800307c:	4413      	add	r3, r2
 800307e:	7a5b      	ldrb	r3, [r3, #9]
 8003080:	2b56      	cmp	r3, #86	; 0x56
 8003082:	d1bc      	bne.n	8002ffe <scan_files+0x22>
 8003084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003086:	3b02      	subs	r3, #2
 8003088:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <scan_files+0xf4>)
 800308a:	4413      	add	r3, r2
 800308c:	7a5b      	ldrb	r3, [r3, #9]
 800308e:	2b41      	cmp	r3, #65	; 0x41
 8003090:	d1b5      	bne.n	8002ffe <scan_files+0x22>
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	3b03      	subs	r3, #3
 8003096:	4a0e      	ldr	r2, [pc, #56]	; (80030d0 <scan_files+0xf4>)
 8003098:	4413      	add	r3, r2
 800309a:	7a5b      	ldrb	r3, [r3, #9]
 800309c:	2b57      	cmp	r3, #87	; 0x57
 800309e:	d1ae      	bne.n	8002ffe <scan_files+0x22>
                	res = f_open(&file, &fno.fname , FA_READ|FA_OPEN_EXISTING);
 80030a0:	2201      	movs	r2, #1
 80030a2:	490c      	ldr	r1, [pc, #48]	; (80030d4 <scan_files+0xf8>)
 80030a4:	480e      	ldr	r0, [pc, #56]	; (80030e0 <scan_files+0x104>)
 80030a6:	f7ff fa9b 	bl	80025e0 <f_open>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                	return res;
 80030b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030b4:	e007      	b.n	80030c6 <scan_files+0xea>
                if (res != FR_OK) break;
 80030b6:	bf00      	nop
                }

            }
        }
        f_closedir(&dir);
 80030b8:	f107 0308 	add.w	r3, r7, #8
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fd9e 	bl	8002bfe <f_closedir>
    }

    return res;
 80030c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3740      	adds	r7, #64	; 0x40
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200000b4 	.word	0x200000b4
 80030d4:	200000bd 	.word	0x200000bd
 80030d8:	08008324 	.word	0x08008324
 80030dc:	08008328 	.word	0x08008328
 80030e0:	200001c8 	.word	0x200001c8

080030e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
 80030ea:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030ec:	f000 fe0c 	bl	8003d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030f0:	f000 f83c 	bl	800316c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030f4:	f000 fa36 	bl	8003564 <MX_GPIO_Init>
  MX_ADC1_Init();
 80030f8:	f000 f8a2 	bl	8003240 <MX_ADC1_Init>
  MX_DAC_Init();
 80030fc:	f000 f8f2 	bl	80032e4 <MX_DAC_Init>
  MX_SPI3_Init();
 8003100:	f000 f91a 	bl	8003338 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8003104:	f000 fa04 	bl	8003510 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8003108:	f000 f998 	bl	800343c <MX_TIM6_Init>
  MX_TIM4_Init();
 800310c:	f000 f94a 	bl	80033a4 <MX_TIM4_Init>
  MX_TIM7_Init();
 8003110:	f000 f9c8 	bl	80034a4 <MX_TIM7_Init>
  //fresult = f_mount(&FatFs, "", 0);




  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8003114:	2100      	movs	r1, #0
 8003116:	4811      	ldr	r0, [pc, #68]	; (800315c <main+0x78>)
 8003118:	f001 fc5b 	bl	80049d2 <HAL_DAC_Start>
  HAL_ADC_Start_IT(&hadc1);
 800311c:	4810      	ldr	r0, [pc, #64]	; (8003160 <main+0x7c>)
 800311e:	f000 fecb 	bl	8003eb8 <HAL_ADC_Start_IT>
  FATFS fs;
    FRESULT res;
      char buff[256];


      res = f_mount(&fs, "", 1);
 8003122:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003126:	2201      	movs	r2, #1
 8003128:	490e      	ldr	r1, [pc, #56]	; (8003164 <main+0x80>)
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fa18 	bl	8002560 <f_mount>
 8003130:	4603      	mov	r3, r0
 8003132:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
      if (res == FR_OK) {
 8003136:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <main+0x74>
          strcpy(buff, "//SONGS");
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	4a09      	ldr	r2, [pc, #36]	; (8003168 <main+0x84>)
 8003142:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003146:	e883 0003 	stmia.w	r3, {r0, r1}
          res = scan_files(buff);
 800314a:	1d3b      	adds	r3, r7, #4
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff45 	bl	8002fdc <scan_files>
 8003152:	4603      	mov	r3, r0
 8003154:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
 // song(dir);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003158:	e7fe      	b.n	8003158 <main+0x74>
 800315a:	bf00      	nop
 800315c:	200042bc 	.word	0x200042bc
 8003160:	200003f0 	.word	0x200003f0
 8003164:	08008330 	.word	0x08008330
 8003168:	08008334 	.word	0x08008334

0800316c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b094      	sub	sp, #80	; 0x50
 8003170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003172:	f107 0320 	add.w	r3, r7, #32
 8003176:	2230      	movs	r2, #48	; 0x30
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f004 f808 	bl	8007190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003180:	f107 030c 	add.w	r3, r7, #12
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003190:	2300      	movs	r3, #0
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	4b28      	ldr	r3, [pc, #160]	; (8003238 <SystemClock_Config+0xcc>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	4a27      	ldr	r2, [pc, #156]	; (8003238 <SystemClock_Config+0xcc>)
 800319a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319e:	6413      	str	r3, [r2, #64]	; 0x40
 80031a0:	4b25      	ldr	r3, [pc, #148]	; (8003238 <SystemClock_Config+0xcc>)
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ac:	2300      	movs	r3, #0
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	4b22      	ldr	r3, [pc, #136]	; (800323c <SystemClock_Config+0xd0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a21      	ldr	r2, [pc, #132]	; (800323c <SystemClock_Config+0xd0>)
 80031b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b1f      	ldr	r3, [pc, #124]	; (800323c <SystemClock_Config+0xd0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031d2:	2302      	movs	r3, #2
 80031d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80031dc:	2304      	movs	r3, #4
 80031de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80031e0:	23a8      	movs	r3, #168	; 0xa8
 80031e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031e4:	2302      	movs	r3, #2
 80031e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80031e8:	2304      	movs	r3, #4
 80031ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ec:	f107 0320 	add.w	r3, r7, #32
 80031f0:	4618      	mov	r0, r3
 80031f2:	f001 ff01 	bl	8004ff8 <HAL_RCC_OscConfig>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80031fc:	f000 fa52 	bl	80036a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003200:	230f      	movs	r3, #15
 8003202:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003204:	2302      	movs	r3, #2
 8003206:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800320c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003216:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	2105      	movs	r1, #5
 800321e:	4618      	mov	r0, r3
 8003220:	f002 f92c 	bl	800547c <HAL_RCC_ClockConfig>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800322a:	f000 fa3b 	bl	80036a4 <Error_Handler>
  }
}
 800322e:	bf00      	nop
 8003230:	3750      	adds	r7, #80	; 0x50
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	40007000 	.word	0x40007000

08003240 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003246:	463b      	mov	r3, r7
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003252:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <MX_ADC1_Init+0x98>)
 8003254:	4a21      	ldr	r2, [pc, #132]	; (80032dc <MX_ADC1_Init+0x9c>)
 8003256:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003258:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <MX_ADC1_Init+0x98>)
 800325a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800325e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003260:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <MX_ADC1_Init+0x98>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003266:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <MX_ADC1_Init+0x98>)
 8003268:	2200      	movs	r2, #0
 800326a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800326c:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <MX_ADC1_Init+0x98>)
 800326e:	2200      	movs	r2, #0
 8003270:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003272:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <MX_ADC1_Init+0x98>)
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <MX_ADC1_Init+0x98>)
 800327c:	2200      	movs	r2, #0
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003280:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <MX_ADC1_Init+0x98>)
 8003282:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <MX_ADC1_Init+0xa0>)
 8003284:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003286:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <MX_ADC1_Init+0x98>)
 8003288:	2200      	movs	r2, #0
 800328a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <MX_ADC1_Init+0x98>)
 800328e:	2201      	movs	r2, #1
 8003290:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <MX_ADC1_Init+0x98>)
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800329a:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <MX_ADC1_Init+0x98>)
 800329c:	2201      	movs	r2, #1
 800329e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032a0:	480d      	ldr	r0, [pc, #52]	; (80032d8 <MX_ADC1_Init+0x98>)
 80032a2:	f000 fdc5 	bl	8003e30 <HAL_ADC_Init>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80032ac:	f000 f9fa 	bl	80036a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80032b0:	2303      	movs	r3, #3
 80032b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80032b4:	2301      	movs	r3, #1
 80032b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032bc:	463b      	mov	r3, r7
 80032be:	4619      	mov	r1, r3
 80032c0:	4805      	ldr	r0, [pc, #20]	; (80032d8 <MX_ADC1_Init+0x98>)
 80032c2:	f001 f82b 	bl	800431c <HAL_ADC_ConfigChannel>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80032cc:	f000 f9ea 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	200003f0 	.word	0x200003f0
 80032dc:	40012000 	.word	0x40012000
 80032e0:	0f000001 	.word	0x0f000001

080032e4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80032ea:	463b      	mov	r3, r7
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <MX_DAC_Init+0x4c>)
 80032f4:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <MX_DAC_Init+0x50>)
 80032f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80032f8:	480d      	ldr	r0, [pc, #52]	; (8003330 <MX_DAC_Init+0x4c>)
 80032fa:	f001 fb48 	bl	800498e <HAL_DAC_Init>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003304:	f000 f9ce 	bl	80036a4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003308:	2300      	movs	r3, #0
 800330a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800330c:	2300      	movs	r3, #0
 800330e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003310:	463b      	mov	r3, r7
 8003312:	2200      	movs	r2, #0
 8003314:	4619      	mov	r1, r3
 8003316:	4806      	ldr	r0, [pc, #24]	; (8003330 <MX_DAC_Init+0x4c>)
 8003318:	f001 fbc1 	bl	8004a9e <HAL_DAC_ConfigChannel>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003322:	f000 f9bf 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	200042bc 	.word	0x200042bc
 8003334:	40007400 	.word	0x40007400

08003338 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800333c:	4b17      	ldr	r3, [pc, #92]	; (800339c <MX_SPI3_Init+0x64>)
 800333e:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <MX_SPI3_Init+0x68>)
 8003340:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <MX_SPI3_Init+0x64>)
 8003344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003348:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800334a:	4b14      	ldr	r3, [pc, #80]	; (800339c <MX_SPI3_Init+0x64>)
 800334c:	2200      	movs	r2, #0
 800334e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <MX_SPI3_Init+0x64>)
 8003352:	2200      	movs	r2, #0
 8003354:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <MX_SPI3_Init+0x64>)
 8003358:	2200      	movs	r2, #0
 800335a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <MX_SPI3_Init+0x64>)
 800335e:	2200      	movs	r2, #0
 8003360:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003362:	4b0e      	ldr	r3, [pc, #56]	; (800339c <MX_SPI3_Init+0x64>)
 8003364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003368:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <MX_SPI3_Init+0x64>)
 800336c:	2218      	movs	r2, #24
 800336e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <MX_SPI3_Init+0x64>)
 8003372:	2200      	movs	r2, #0
 8003374:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <MX_SPI3_Init+0x64>)
 8003378:	2200      	movs	r2, #0
 800337a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <MX_SPI3_Init+0x64>)
 800337e:	2200      	movs	r2, #0
 8003380:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <MX_SPI3_Init+0x64>)
 8003384:	220a      	movs	r2, #10
 8003386:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003388:	4804      	ldr	r0, [pc, #16]	; (800339c <MX_SPI3_Init+0x64>)
 800338a:	f002 fa65 	bl	8005858 <HAL_SPI_Init>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003394:	f000 f986 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000170 	.word	0x20000170
 80033a0:	40003c00 	.word	0x40003c00

080033a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033aa:	f107 0308 	add.w	r3, r7, #8
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	609a      	str	r2, [r3, #8]
 80033b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b8:	463b      	mov	r3, r7
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033c0:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <MX_TIM4_Init+0x90>)
 80033c2:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <MX_TIM4_Init+0x94>)
 80033c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 104;
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <MX_TIM4_Init+0x90>)
 80033c8:	2268      	movs	r2, #104	; 0x68
 80033ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <MX_TIM4_Init+0x90>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49;
 80033d2:	4b18      	ldr	r3, [pc, #96]	; (8003434 <MX_TIM4_Init+0x90>)
 80033d4:	2231      	movs	r2, #49	; 0x31
 80033d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033d8:	4b16      	ldr	r3, [pc, #88]	; (8003434 <MX_TIM4_Init+0x90>)
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <MX_TIM4_Init+0x90>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80033e4:	4813      	ldr	r0, [pc, #76]	; (8003434 <MX_TIM4_Init+0x90>)
 80033e6:	f002 fe2b 	bl	8006040 <HAL_TIM_Base_Init>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80033f0:	f000 f958 	bl	80036a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80033fa:	f107 0308 	add.w	r3, r7, #8
 80033fe:	4619      	mov	r1, r3
 8003400:	480c      	ldr	r0, [pc, #48]	; (8003434 <MX_TIM4_Init+0x90>)
 8003402:	f002 ff9f 	bl	8006344 <HAL_TIM_ConfigClockSource>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800340c:	f000 f94a 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003410:	2300      	movs	r3, #0
 8003412:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003414:	2300      	movs	r3, #0
 8003416:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003418:	463b      	mov	r3, r7
 800341a:	4619      	mov	r1, r3
 800341c:	4805      	ldr	r0, [pc, #20]	; (8003434 <MX_TIM4_Init+0x90>)
 800341e:	f003 f9ab 	bl	8006778 <HAL_TIMEx_MasterConfigSynchronization>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003428:	f000 f93c 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800342c:	bf00      	nop
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	200000f0 	.word	0x200000f0
 8003438:	40000800 	.word	0x40000800

0800343c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003442:	463b      	mov	r3, r7
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <MX_TIM6_Init+0x60>)
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <MX_TIM6_Init+0x64>)
 800344e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 249;
 8003450:	4b12      	ldr	r3, [pc, #72]	; (800349c <MX_TIM6_Init+0x60>)
 8003452:	22f9      	movs	r2, #249	; 0xf9
 8003454:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003456:	4b11      	ldr	r3, [pc, #68]	; (800349c <MX_TIM6_Init+0x60>)
 8003458:	2200      	movs	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20;
 800345c:	4b0f      	ldr	r3, [pc, #60]	; (800349c <MX_TIM6_Init+0x60>)
 800345e:	2214      	movs	r2, #20
 8003460:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <MX_TIM6_Init+0x60>)
 8003464:	2200      	movs	r2, #0
 8003466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003468:	480c      	ldr	r0, [pc, #48]	; (800349c <MX_TIM6_Init+0x60>)
 800346a:	f002 fde9 	bl	8006040 <HAL_TIM_Base_Init>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8003474:	f000 f916 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003478:	2300      	movs	r3, #0
 800347a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800347c:	2300      	movs	r3, #0
 800347e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003480:	463b      	mov	r3, r7
 8003482:	4619      	mov	r1, r3
 8003484:	4805      	ldr	r0, [pc, #20]	; (800349c <MX_TIM6_Init+0x60>)
 8003486:	f003 f977 	bl	8006778 <HAL_TIMEx_MasterConfigSynchronization>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8003490:	f000 f908 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003494:	bf00      	nop
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	200043d0 	.word	0x200043d0
 80034a0:	40001000 	.word	0x40001000

080034a4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034aa:	463b      	mov	r3, r7
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <MX_TIM7_Init+0x64>)
 80034b4:	4a15      	ldr	r2, [pc, #84]	; (800350c <MX_TIM7_Init+0x68>)
 80034b6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 80034b8:	4b13      	ldr	r3, [pc, #76]	; (8003508 <MX_TIM7_Init+0x64>)
 80034ba:	2204      	movs	r2, #4
 80034bc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034be:	4b12      	ldr	r3, [pc, #72]	; (8003508 <MX_TIM7_Init+0x64>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 380;
 80034c4:	4b10      	ldr	r3, [pc, #64]	; (8003508 <MX_TIM7_Init+0x64>)
 80034c6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80034ca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034cc:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <MX_TIM7_Init+0x64>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80034d2:	480d      	ldr	r0, [pc, #52]	; (8003508 <MX_TIM7_Init+0x64>)
 80034d4:	f002 fdb4 	bl	8006040 <HAL_TIM_Base_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80034de:	f000 f8e1 	bl	80036a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80034ea:	463b      	mov	r3, r7
 80034ec:	4619      	mov	r1, r3
 80034ee:	4806      	ldr	r0, [pc, #24]	; (8003508 <MX_TIM7_Init+0x64>)
 80034f0:	f003 f942 	bl	8006778 <HAL_TIMEx_MasterConfigSynchronization>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80034fa:	f000 f8d3 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	200082c4 	.word	0x200082c4
 800350c:	40001400 	.word	0x40001400

08003510 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <MX_USART3_UART_Init+0x4c>)
 8003516:	4a12      	ldr	r2, [pc, #72]	; (8003560 <MX_USART3_UART_Init+0x50>)
 8003518:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <MX_USART3_UART_Init+0x4c>)
 800351c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003520:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003522:	4b0e      	ldr	r3, [pc, #56]	; (800355c <MX_USART3_UART_Init+0x4c>)
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <MX_USART3_UART_Init+0x4c>)
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800352e:	4b0b      	ldr	r3, [pc, #44]	; (800355c <MX_USART3_UART_Init+0x4c>)
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <MX_USART3_UART_Init+0x4c>)
 8003536:	220c      	movs	r2, #12
 8003538:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <MX_USART3_UART_Init+0x4c>)
 800353c:	2200      	movs	r2, #0
 800353e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <MX_USART3_UART_Init+0x4c>)
 8003542:	2200      	movs	r2, #0
 8003544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003546:	4805      	ldr	r0, [pc, #20]	; (800355c <MX_USART3_UART_Init+0x4c>)
 8003548:	f003 f96f 	bl	800682a <HAL_UART_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003552:	f000 f8a7 	bl	80036a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000130 	.word	0x20000130
 8003560:	40004800 	.word	0x40004800

08003564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356a:	f107 0314 	add.w	r3, r7, #20
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	605a      	str	r2, [r3, #4]
 8003574:	609a      	str	r2, [r3, #8]
 8003576:	60da      	str	r2, [r3, #12]
 8003578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	4b43      	ldr	r3, [pc, #268]	; (800368c <MX_GPIO_Init+0x128>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	4a42      	ldr	r2, [pc, #264]	; (800368c <MX_GPIO_Init+0x128>)
 8003584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003588:	6313      	str	r3, [r2, #48]	; 0x30
 800358a:	4b40      	ldr	r3, [pc, #256]	; (800368c <MX_GPIO_Init+0x128>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	4b3c      	ldr	r3, [pc, #240]	; (800368c <MX_GPIO_Init+0x128>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	4a3b      	ldr	r2, [pc, #236]	; (800368c <MX_GPIO_Init+0x128>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6313      	str	r3, [r2, #48]	; 0x30
 80035a6:	4b39      	ldr	r3, [pc, #228]	; (800368c <MX_GPIO_Init+0x128>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	4b35      	ldr	r3, [pc, #212]	; (800368c <MX_GPIO_Init+0x128>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	4a34      	ldr	r2, [pc, #208]	; (800368c <MX_GPIO_Init+0x128>)
 80035bc:	f043 0302 	orr.w	r3, r3, #2
 80035c0:	6313      	str	r3, [r2, #48]	; 0x30
 80035c2:	4b32      	ldr	r3, [pc, #200]	; (800368c <MX_GPIO_Init+0x128>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	607b      	str	r3, [r7, #4]
 80035d2:	4b2e      	ldr	r3, [pc, #184]	; (800368c <MX_GPIO_Init+0x128>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	4a2d      	ldr	r2, [pc, #180]	; (800368c <MX_GPIO_Init+0x128>)
 80035d8:	f043 0308 	orr.w	r3, r3, #8
 80035dc:	6313      	str	r3, [r2, #48]	; 0x30
 80035de:	4b2b      	ldr	r3, [pc, #172]	; (800368c <MX_GPIO_Init+0x128>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	607b      	str	r3, [r7, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4b27      	ldr	r3, [pc, #156]	; (800368c <MX_GPIO_Init+0x128>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	4a26      	ldr	r2, [pc, #152]	; (800368c <MX_GPIO_Init+0x128>)
 80035f4:	f043 0304 	orr.w	r3, r3, #4
 80035f8:	6313      	str	r3, [r2, #48]	; 0x30
 80035fa:	4b24      	ldr	r3, [pc, #144]	; (800368c <MX_GPIO_Init+0x128>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003606:	2200      	movs	r2, #0
 8003608:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800360c:	4820      	ldr	r0, [pc, #128]	; (8003690 <MX_GPIO_Init+0x12c>)
 800360e:	f001 fc8d 	bl	8004f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003612:	2301      	movs	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003616:	4b1f      	ldr	r3, [pc, #124]	; (8003694 <MX_GPIO_Init+0x130>)
 8003618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800361a:	2302      	movs	r3, #2
 800361c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361e:	f107 0314 	add.w	r3, r7, #20
 8003622:	4619      	mov	r1, r3
 8003624:	481c      	ldr	r0, [pc, #112]	; (8003698 <MX_GPIO_Init+0x134>)
 8003626:	f001 facf 	bl	8004bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 800362a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800362e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <MX_GPIO_Init+0x138>)
 8003632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003634:	2301      	movs	r3, #1
 8003636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003638:	f107 0314 	add.w	r3, r7, #20
 800363c:	4619      	mov	r1, r3
 800363e:	4818      	ldr	r0, [pc, #96]	; (80036a0 <MX_GPIO_Init+0x13c>)
 8003640:	f001 fac2 	bl	8004bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003644:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800364a:	2301      	movs	r3, #1
 800364c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003652:	2300      	movs	r3, #0
 8003654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003656:	f107 0314 	add.w	r3, r7, #20
 800365a:	4619      	mov	r1, r3
 800365c:	480c      	ldr	r0, [pc, #48]	; (8003690 <MX_GPIO_Init+0x12c>)
 800365e:	f001 fab3 	bl	8004bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8003662:	2200      	movs	r2, #0
 8003664:	2101      	movs	r1, #1
 8003666:	2006      	movs	r0, #6
 8003668:	f001 f95b 	bl	8004922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800366c:	2006      	movs	r0, #6
 800366e:	f001 f974 	bl	800495a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003672:	2200      	movs	r2, #0
 8003674:	2101      	movs	r1, #1
 8003676:	2028      	movs	r0, #40	; 0x28
 8003678:	f001 f953 	bl	8004922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800367c:	2028      	movs	r0, #40	; 0x28
 800367e:	f001 f96c 	bl	800495a <HAL_NVIC_EnableIRQ>

}
 8003682:	bf00      	nop
 8003684:	3728      	adds	r7, #40	; 0x28
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800
 8003690:	40020c00 	.word	0x40020c00
 8003694:	10110000 	.word	0x10110000
 8003698:	40020000 	.word	0x40020000
 800369c:	10310000 	.word	0x10310000
 80036a0:	40020400 	.word	0x40020400

080036a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	607b      	str	r3, [r7, #4]
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <HAL_MspInit+0x58>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	4a12      	ldr	r2, [pc, #72]	; (800370c <HAL_MspInit+0x58>)
 80036c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <HAL_MspInit+0x58>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	603b      	str	r3, [r7, #0]
 80036da:	4b0c      	ldr	r3, [pc, #48]	; (800370c <HAL_MspInit+0x58>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	4a0b      	ldr	r2, [pc, #44]	; (800370c <HAL_MspInit+0x58>)
 80036e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e4:	6413      	str	r3, [r2, #64]	; 0x40
 80036e6:	4b09      	ldr	r3, [pc, #36]	; (800370c <HAL_MspInit+0x58>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80036f2:	2200      	movs	r2, #0
 80036f4:	2100      	movs	r1, #0
 80036f6:	2001      	movs	r0, #1
 80036f8:	f001 f913 	bl	8004922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80036fc:	2001      	movs	r0, #1
 80036fe:	f001 f92c 	bl	800495a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40023800 	.word	0x40023800

08003710 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	; 0x28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1b      	ldr	r2, [pc, #108]	; (800379c <HAL_ADC_MspInit+0x8c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d12f      	bne.n	8003792 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <HAL_ADC_MspInit+0x90>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <HAL_ADC_MspInit+0x90>)
 800373c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003740:	6453      	str	r3, [r2, #68]	; 0x44
 8003742:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <HAL_ADC_MspInit+0x90>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <HAL_ADC_MspInit+0x90>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <HAL_ADC_MspInit+0x90>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6313      	str	r3, [r2, #48]	; 0x30
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_ADC_MspInit+0x90>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800376a:	2308      	movs	r3, #8
 800376c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800376e:	2303      	movs	r3, #3
 8003770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003776:	f107 0314 	add.w	r3, r7, #20
 800377a:	4619      	mov	r1, r3
 800377c:	4809      	ldr	r0, [pc, #36]	; (80037a4 <HAL_ADC_MspInit+0x94>)
 800377e:	f001 fa23 	bl	8004bc8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8003782:	2200      	movs	r2, #0
 8003784:	2101      	movs	r1, #1
 8003786:	2012      	movs	r0, #18
 8003788:	f001 f8cb 	bl	8004922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800378c:	2012      	movs	r0, #18
 800378e:	f001 f8e4 	bl	800495a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003792:	bf00      	nop
 8003794:	3728      	adds	r7, #40	; 0x28
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40012000 	.word	0x40012000
 80037a0:	40023800 	.word	0x40023800
 80037a4:	40020000 	.word	0x40020000

080037a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	; 0x28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b0:	f107 0314 	add.w	r3, r7, #20
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a17      	ldr	r2, [pc, #92]	; (8003824 <HAL_DAC_MspInit+0x7c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d127      	bne.n	800381a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	4b16      	ldr	r3, [pc, #88]	; (8003828 <HAL_DAC_MspInit+0x80>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	4a15      	ldr	r2, [pc, #84]	; (8003828 <HAL_DAC_MspInit+0x80>)
 80037d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037d8:	6413      	str	r3, [r2, #64]	; 0x40
 80037da:	4b13      	ldr	r3, [pc, #76]	; (8003828 <HAL_DAC_MspInit+0x80>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <HAL_DAC_MspInit+0x80>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4a0e      	ldr	r2, [pc, #56]	; (8003828 <HAL_DAC_MspInit+0x80>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6313      	str	r3, [r2, #48]	; 0x30
 80037f6:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <HAL_DAC_MspInit+0x80>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003802:	2310      	movs	r3, #16
 8003804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003806:	2303      	movs	r3, #3
 8003808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380e:	f107 0314 	add.w	r3, r7, #20
 8003812:	4619      	mov	r1, r3
 8003814:	4805      	ldr	r0, [pc, #20]	; (800382c <HAL_DAC_MspInit+0x84>)
 8003816:	f001 f9d7 	bl	8004bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800381a:	bf00      	nop
 800381c:	3728      	adds	r7, #40	; 0x28
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40007400 	.word	0x40007400
 8003828:	40023800 	.word	0x40023800
 800382c:	40020000 	.word	0x40020000

08003830 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	; 0x28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003838:	f107 0314 	add.w	r3, r7, #20
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a19      	ldr	r2, [pc, #100]	; (80038b4 <HAL_SPI_MspInit+0x84>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d12b      	bne.n	80038aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <HAL_SPI_MspInit+0x88>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <HAL_SPI_MspInit+0x88>)
 800385c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003860:	6413      	str	r3, [r2, #64]	; 0x40
 8003862:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <HAL_SPI_MspInit+0x88>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_SPI_MspInit+0x88>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	4a10      	ldr	r2, [pc, #64]	; (80038b8 <HAL_SPI_MspInit+0x88>)
 8003878:	f043 0302 	orr.w	r3, r3, #2
 800387c:	6313      	str	r3, [r2, #48]	; 0x30
 800387e:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <HAL_SPI_MspInit+0x88>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800388a:	2338      	movs	r3, #56	; 0x38
 800388c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388e:	2302      	movs	r3, #2
 8003890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003896:	2303      	movs	r3, #3
 8003898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800389a:	2306      	movs	r3, #6
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800389e:	f107 0314 	add.w	r3, r7, #20
 80038a2:	4619      	mov	r1, r3
 80038a4:	4805      	ldr	r0, [pc, #20]	; (80038bc <HAL_SPI_MspInit+0x8c>)
 80038a6:	f001 f98f 	bl	8004bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80038aa:	bf00      	nop
 80038ac:	3728      	adds	r7, #40	; 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40003c00 	.word	0x40003c00
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40020400 	.word	0x40020400

080038c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a26      	ldr	r2, [pc, #152]	; (8003968 <HAL_TIM_Base_MspInit+0xa8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d116      	bne.n	8003900 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_TIM_Base_MspInit+0xac>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	4a24      	ldr	r2, [pc, #144]	; (800396c <HAL_TIM_Base_MspInit+0xac>)
 80038dc:	f043 0304 	orr.w	r3, r3, #4
 80038e0:	6413      	str	r3, [r2, #64]	; 0x40
 80038e2:	4b22      	ldr	r3, [pc, #136]	; (800396c <HAL_TIM_Base_MspInit+0xac>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80038ee:	2200      	movs	r2, #0
 80038f0:	2100      	movs	r1, #0
 80038f2:	201e      	movs	r0, #30
 80038f4:	f001 f815 	bl	8004922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80038f8:	201e      	movs	r0, #30
 80038fa:	f001 f82e 	bl	800495a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80038fe:	e02e      	b.n	800395e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <HAL_TIM_Base_MspInit+0xb0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10e      	bne.n	8003928 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	4b17      	ldr	r3, [pc, #92]	; (800396c <HAL_TIM_Base_MspInit+0xac>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	4a16      	ldr	r2, [pc, #88]	; (800396c <HAL_TIM_Base_MspInit+0xac>)
 8003914:	f043 0310 	orr.w	r3, r3, #16
 8003918:	6413      	str	r3, [r2, #64]	; 0x40
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <HAL_TIM_Base_MspInit+0xac>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	693b      	ldr	r3, [r7, #16]
}
 8003926:	e01a      	b.n	800395e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a11      	ldr	r2, [pc, #68]	; (8003974 <HAL_TIM_Base_MspInit+0xb4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d115      	bne.n	800395e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_TIM_Base_MspInit+0xac>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	4a0c      	ldr	r2, [pc, #48]	; (800396c <HAL_TIM_Base_MspInit+0xac>)
 800393c:	f043 0320 	orr.w	r3, r3, #32
 8003940:	6413      	str	r3, [r2, #64]	; 0x40
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <HAL_TIM_Base_MspInit+0xac>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800394e:	2200      	movs	r2, #0
 8003950:	2100      	movs	r1, #0
 8003952:	2037      	movs	r0, #55	; 0x37
 8003954:	f000 ffe5 	bl	8004922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003958:	2037      	movs	r0, #55	; 0x37
 800395a:	f000 fffe 	bl	800495a <HAL_NVIC_EnableIRQ>
}
 800395e:	bf00      	nop
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40000800 	.word	0x40000800
 800396c:	40023800 	.word	0x40023800
 8003970:	40001000 	.word	0x40001000
 8003974:	40001400 	.word	0x40001400

08003978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <HAL_UART_MspInit+0x94>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d134      	bne.n	8003a04 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	4b1c      	ldr	r3, [pc, #112]	; (8003a10 <HAL_UART_MspInit+0x98>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	4a1b      	ldr	r2, [pc, #108]	; (8003a10 <HAL_UART_MspInit+0x98>)
 80039a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a8:	6413      	str	r3, [r2, #64]	; 0x40
 80039aa:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_UART_MspInit+0x98>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <HAL_UART_MspInit+0x98>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <HAL_UART_MspInit+0x98>)
 80039c0:	f043 0304 	orr.w	r3, r3, #4
 80039c4:	6313      	str	r3, [r2, #48]	; 0x30
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_UART_MspInit+0x98>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80039d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d8:	2302      	movs	r3, #2
 80039da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039dc:	2301      	movs	r3, #1
 80039de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e0:	2303      	movs	r3, #3
 80039e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039e4:	2307      	movs	r3, #7
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e8:	f107 0314 	add.w	r3, r7, #20
 80039ec:	4619      	mov	r1, r3
 80039ee:	4809      	ldr	r0, [pc, #36]	; (8003a14 <HAL_UART_MspInit+0x9c>)
 80039f0:	f001 f8ea 	bl	8004bc8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80039f4:	2200      	movs	r2, #0
 80039f6:	2100      	movs	r1, #0
 80039f8:	2027      	movs	r0, #39	; 0x27
 80039fa:	f000 ff92 	bl	8004922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80039fe:	2027      	movs	r0, #39	; 0x27
 8003a00:	f000 ffab 	bl	800495a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003a04:	bf00      	nop
 8003a06:	3728      	adds	r7, #40	; 0x28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40004800 	.word	0x40004800
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40020800 	.word	0x40020800

08003a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a26:	b480      	push	{r7}
 8003a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a2a:	e7fe      	b.n	8003a2a <HardFault_Handler+0x4>

08003a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a30:	e7fe      	b.n	8003a30 <MemManage_Handler+0x4>

08003a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a36:	e7fe      	b.n	8003a36 <BusFault_Handler+0x4>

08003a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a3c:	e7fe      	b.n	8003a3c <UsageFault_Handler+0x4>

08003a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a50:	bf00      	nop
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8003a6c:	f7fd f942 	bl	8000cf4 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a70:	f000 f99c 	bl	8003dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003a7c:	f001 faa2 	bl	8004fc4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003a80:	bf00      	nop
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003a88:	2001      	movs	r0, #1
 8003a8a:	f001 fa83 	bl	8004f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003a98:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <ADC_IRQHandler+0x10>)
 8003a9a:	f000 fadd 	bl	8004058 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200003f0 	.word	0x200003f0

08003aa8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <TIM4_IRQHandler+0x10>)
 8003aae:	f002 fb41 	bl	8006134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200000f0 	.word	0x200000f0

08003abc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <USART3_IRQHandler+0x10>)
 8003ac2:	f002 feff 	bl	80068c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000130 	.word	0x20000130

08003ad0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003ad4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003ad8:	f001 fa5c 	bl	8004f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003adc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ae0:	f001 fa58 	bl	8004f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003ae4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ae8:	f001 fa54 	bl	8004f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003aec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003af0:	f001 fa50 	bl	8004f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003af4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003af8:	f001 fa4c 	bl	8004f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003afc:	bf00      	nop
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <TIM7_IRQHandler+0x10>)
 8003b06:	f002 fb15 	bl	8006134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	200082c4 	.word	0x200082c4

08003b14 <_read>:
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	e00a      	b.n	8003b3c <_read+0x28>
 8003b26:	f3af 8000 	nop.w
 8003b2a:	4601      	mov	r1, r0
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	60ba      	str	r2, [r7, #8]
 8003b32:	b2ca      	uxtb	r2, r1
 8003b34:	701a      	strb	r2, [r3, #0]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	dbf0      	blt.n	8003b26 <_read+0x12>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_write>:
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e009      	b.n	8003b74 <_write+0x26>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	60ba      	str	r2, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f3af 8000 	nop.w
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	3301      	adds	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	dbf1      	blt.n	8003b60 <_write+0x12>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_close>:
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <_fstat>:
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <_isatty>:
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <_lseek>:
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	2300      	movs	r3, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <_sbrk>:
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <_sbrk+0x50>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d102      	bne.n	8003c06 <_sbrk+0x16>
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <_sbrk+0x50>)
 8003c02:	4a10      	ldr	r2, [pc, #64]	; (8003c44 <_sbrk+0x54>)
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <_sbrk+0x50>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <_sbrk+0x50>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4413      	add	r3, r2
 8003c14:	466a      	mov	r2, sp
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d907      	bls.n	8003c2a <_sbrk+0x3a>
 8003c1a:	f003 fa8f 	bl	800713c <__errno>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	230c      	movs	r3, #12
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	e006      	b.n	8003c38 <_sbrk+0x48>
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <_sbrk+0x50>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	4a03      	ldr	r2, [pc, #12]	; (8003c40 <_sbrk+0x50>)
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	200000cc 	.word	0x200000cc
 8003c44:	20008310 	.word	0x20008310

08003c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c4c:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <SystemInit+0x60>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <SystemInit+0x60>)
 8003c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003c5c:	4b13      	ldr	r3, [pc, #76]	; (8003cac <SystemInit+0x64>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a12      	ldr	r2, [pc, #72]	; (8003cac <SystemInit+0x64>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <SystemInit+0x64>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <SystemInit+0x64>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <SystemInit+0x64>)
 8003c74:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <SystemInit+0x64>)
 8003c80:	4a0b      	ldr	r2, [pc, #44]	; (8003cb0 <SystemInit+0x68>)
 8003c82:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003c84:	4b09      	ldr	r3, [pc, #36]	; (8003cac <SystemInit+0x64>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a08      	ldr	r2, [pc, #32]	; (8003cac <SystemInit+0x64>)
 8003c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003c90:	4b06      	ldr	r3, [pc, #24]	; (8003cac <SystemInit+0x64>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c96:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <SystemInit+0x60>)
 8003c98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c9c:	609a      	str	r2, [r3, #8]
#endif
}
 8003c9e:	bf00      	nop
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000ed00 	.word	0xe000ed00
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	24003010 	.word	0x24003010

08003cb4 <Reset_Handler>:
 8003cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cec <LoopFillZerobss+0x14>
 8003cb8:	2100      	movs	r1, #0
 8003cba:	e003      	b.n	8003cc4 <LoopCopyDataInit>

08003cbc <CopyDataInit>:
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <LoopFillZerobss+0x18>)
 8003cbe:	585b      	ldr	r3, [r3, r1]
 8003cc0:	5043      	str	r3, [r0, r1]
 8003cc2:	3104      	adds	r1, #4

08003cc4 <LoopCopyDataInit>:
 8003cc4:	480b      	ldr	r0, [pc, #44]	; (8003cf4 <LoopFillZerobss+0x1c>)
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <LoopFillZerobss+0x20>)
 8003cc8:	1842      	adds	r2, r0, r1
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d3f6      	bcc.n	8003cbc <CopyDataInit>
 8003cce:	4a0b      	ldr	r2, [pc, #44]	; (8003cfc <LoopFillZerobss+0x24>)
 8003cd0:	e002      	b.n	8003cd8 <LoopFillZerobss>

08003cd2 <FillZerobss>:
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f842 3b04 	str.w	r3, [r2], #4

08003cd8 <LoopFillZerobss>:
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <LoopFillZerobss+0x28>)
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d3f9      	bcc.n	8003cd2 <FillZerobss>
 8003cde:	f7ff ffb3 	bl	8003c48 <SystemInit>
 8003ce2:	f003 fa31 	bl	8007148 <__libc_init_array>
 8003ce6:	f7ff f9fd 	bl	80030e4 <main>
 8003cea:	4770      	bx	lr
 8003cec:	20020000 	.word	0x20020000
 8003cf0:	080083fc 	.word	0x080083fc
 8003cf4:	20000000 	.word	0x20000000
 8003cf8:	2000007c 	.word	0x2000007c
 8003cfc:	2000007c 	.word	0x2000007c
 8003d00:	2000830c 	.word	0x2000830c

08003d04 <CAN1_RX0_IRQHandler>:
 8003d04:	e7fe      	b.n	8003d04 <CAN1_RX0_IRQHandler>
	...

08003d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <HAL_Init+0x40>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0d      	ldr	r2, [pc, #52]	; (8003d48 <HAL_Init+0x40>)
 8003d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_Init+0x40>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <HAL_Init+0x40>)
 8003d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d24:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <HAL_Init+0x40>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <HAL_Init+0x40>)
 8003d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d30:	2003      	movs	r0, #3
 8003d32:	f000 fdeb 	bl	800490c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d36:	2000      	movs	r0, #0
 8003d38:	f000 f808 	bl	8003d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d3c:	f7ff fcba 	bl	80036b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40023c00 	.word	0x40023c00

08003d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <HAL_InitTick+0x54>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <HAL_InitTick+0x58>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fe03 	bl	8004976 <HAL_SYSTICK_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e00e      	b.n	8003d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b0f      	cmp	r3, #15
 8003d7e:	d80a      	bhi.n	8003d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d80:	2200      	movs	r2, #0
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	f000 fdcb 	bl	8004922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d8c:	4a06      	ldr	r2, [pc, #24]	; (8003da8 <HAL_InitTick+0x5c>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	e000      	b.n	8003d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	2000000c 	.word	0x2000000c
 8003da4:	20000014 	.word	0x20000014
 8003da8:	20000010 	.word	0x20000010

08003dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_IncTick+0x20>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_IncTick+0x24>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4413      	add	r3, r2
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <HAL_IncTick+0x24>)
 8003dbe:	6013      	str	r3, [r2, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000014 	.word	0x20000014
 8003dd0:	20008304 	.word	0x20008304

08003dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_GetTick+0x14>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20008304 	.word	0x20008304

08003dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003df4:	f7ff ffee 	bl	8003dd4 <HAL_GetTick>
 8003df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d005      	beq.n	8003e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_Delay+0x40>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e12:	bf00      	nop
 8003e14:	f7ff ffde 	bl	8003dd4 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d8f7      	bhi.n	8003e14 <HAL_Delay+0x28>
  {
  }
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000014 	.word	0x20000014

08003e30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e033      	b.n	8003eae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff fc5e 	bl	8003710 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d118      	bne.n	8003ea0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e76:	f023 0302 	bic.w	r3, r3, #2
 8003e7a:	f043 0202 	orr.w	r2, r3, #2
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fb6c 	bl	8004560 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	f023 0303 	bic.w	r3, r3, #3
 8003e96:	f043 0201 	orr.w	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
 8003e9e:	e001      	b.n	8003ea4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_ADC_Start_IT+0x1a>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e0b0      	b.n	8004034 <HAL_ADC_Start_IT+0x17c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d018      	beq.n	8003f1a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ef8:	4b51      	ldr	r3, [pc, #324]	; (8004040 <HAL_ADC_Start_IT+0x188>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a51      	ldr	r2, [pc, #324]	; (8004044 <HAL_ADC_Start_IT+0x18c>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	0c9a      	lsrs	r2, r3, #18
 8003f04:	4613      	mov	r3, r2
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	4413      	add	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003f0c:	e002      	b.n	8003f14 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f9      	bne.n	8003f0e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	f040 8084 	bne.w	8004032 <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f68:	d106      	bne.n	8003f78 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f023 0206 	bic.w	r2, r3, #6
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	; 0x44
 8003f76:	e002      	b.n	8003f7e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f86:	4b30      	ldr	r3, [pc, #192]	; (8004048 <HAL_ADC_Start_IT+0x190>)
 8003f88:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f92:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fa2:	f043 0320 	orr.w	r3, r3, #32
 8003fa6:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d12a      	bne.n	800400a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a24      	ldr	r2, [pc, #144]	; (800404c <HAL_ADC_Start_IT+0x194>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d015      	beq.n	8003fea <HAL_ADC_Start_IT+0x132>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a23      	ldr	r2, [pc, #140]	; (8004050 <HAL_ADC_Start_IT+0x198>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d105      	bne.n	8003fd4 <HAL_ADC_Start_IT+0x11c>
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <HAL_ADC_Start_IT+0x190>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <HAL_ADC_Start_IT+0x19c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d129      	bne.n	8004032 <HAL_ADC_Start_IT+0x17a>
 8003fde:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <HAL_ADC_Start_IT+0x190>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	2b0f      	cmp	r3, #15
 8003fe8:	d823      	bhi.n	8004032 <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d11c      	bne.n	8004032 <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	e013      	b.n	8004032 <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a0f      	ldr	r2, [pc, #60]	; (800404c <HAL_ADC_Start_IT+0x194>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d10e      	bne.n	8004032 <HAL_ADC_Start_IT+0x17a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d107      	bne.n	8004032 <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004030:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	2000000c 	.word	0x2000000c
 8004044:	431bde83 	.word	0x431bde83
 8004048:	40012300 	.word	0x40012300
 800404c:	40012000 	.word	0x40012000
 8004050:	40012100 	.word	0x40012100
 8004054:	40012200 	.word	0x40012200

08004058 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	2300      	movs	r3, #0
 8004066:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b02      	cmp	r3, #2
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b20      	cmp	r3, #32
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d049      	beq.n	800412e <HAL_ADC_IRQHandler+0xd6>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d046      	beq.n	800412e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d105      	bne.n	80040b8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d12b      	bne.n	800411e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d127      	bne.n	800411e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d006      	beq.n	80040ea <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d119      	bne.n	800411e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0220 	bic.w	r2, r2, #32
 80040f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d105      	bne.n	800411e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f043 0201 	orr.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fe fdc2 	bl	8002ca8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0212 	mvn.w	r2, #18
 800412c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b04      	cmp	r3, #4
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414e:	2b80      	cmp	r3, #128	; 0x80
 8004150:	bf0c      	ite	eq
 8004152:	2301      	moveq	r3, #1
 8004154:	2300      	movne	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d057      	beq.n	8004210 <HAL_ADC_IRQHandler+0x1b8>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d054      	beq.n	8004210 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b00      	cmp	r3, #0
 8004170:	d105      	bne.n	800417e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d139      	bne.n	8004200 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004196:	2b00      	cmp	r3, #0
 8004198:	d006      	beq.n	80041a8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d12b      	bne.n	8004200 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d124      	bne.n	8004200 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d11d      	bne.n	8004200 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d119      	bne.n	8004200 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 faa9 	bl	8004758 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f06f 020c 	mvn.w	r2, #12
 800420e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b01      	cmp	r3, #1
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004230:	2b40      	cmp	r3, #64	; 0x40
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d017      	beq.n	8004272 <HAL_ADC_IRQHandler+0x21a>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d014      	beq.n	8004272 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b01      	cmp	r3, #1
 8004254:	d10d      	bne.n	8004272 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f846 	bl	80042f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0201 	mvn.w	r2, #1
 8004270:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b20      	cmp	r3, #32
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d015      	beq.n	80042d2 <HAL_ADC_IRQHandler+0x27a>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d012      	beq.n	80042d2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b0:	f043 0202 	orr.w	r2, r3, #2
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0220 	mvn.w	r2, #32
 80042c0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f820 	bl	8004308 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0220 	mvn.w	r2, #32
 80042d0:	601a      	str	r2, [r3, #0]
  }
}
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x1c>
 8004334:	2302      	movs	r3, #2
 8004336:	e105      	b.n	8004544 <HAL_ADC_ConfigChannel+0x228>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b09      	cmp	r3, #9
 8004346:	d925      	bls.n	8004394 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68d9      	ldr	r1, [r3, #12]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	4613      	mov	r3, r2
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	4413      	add	r3, r2
 800435c:	3b1e      	subs	r3, #30
 800435e:	2207      	movs	r2, #7
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43da      	mvns	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	400a      	ands	r2, r1
 800436c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68d9      	ldr	r1, [r3, #12]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	b29b      	uxth	r3, r3
 800437e:	4618      	mov	r0, r3
 8004380:	4603      	mov	r3, r0
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4403      	add	r3, r0
 8004386:	3b1e      	subs	r3, #30
 8004388:	409a      	lsls	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	60da      	str	r2, [r3, #12]
 8004392:	e022      	b.n	80043da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6919      	ldr	r1, [r3, #16]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	4613      	mov	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4413      	add	r3, r2
 80043a8:	2207      	movs	r2, #7
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43da      	mvns	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	400a      	ands	r2, r1
 80043b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6919      	ldr	r1, [r3, #16]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	4618      	mov	r0, r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	4403      	add	r3, r0
 80043d0:	409a      	lsls	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b06      	cmp	r3, #6
 80043e0:	d824      	bhi.n	800442c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	3b05      	subs	r3, #5
 80043f4:	221f      	movs	r2, #31
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43da      	mvns	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	400a      	ands	r2, r1
 8004402:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	4618      	mov	r0, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	3b05      	subs	r3, #5
 800441e:	fa00 f203 	lsl.w	r2, r0, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	635a      	str	r2, [r3, #52]	; 0x34
 800442a:	e04c      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b0c      	cmp	r3, #12
 8004432:	d824      	bhi.n	800447e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	3b23      	subs	r3, #35	; 0x23
 8004446:	221f      	movs	r2, #31
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43da      	mvns	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	400a      	ands	r2, r1
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	4618      	mov	r0, r3
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	3b23      	subs	r3, #35	; 0x23
 8004470:	fa00 f203 	lsl.w	r2, r0, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
 800447c:	e023      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	3b41      	subs	r3, #65	; 0x41
 8004490:	221f      	movs	r2, #31
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43da      	mvns	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	400a      	ands	r2, r1
 800449e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	4618      	mov	r0, r3
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	3b41      	subs	r3, #65	; 0x41
 80044ba:	fa00 f203 	lsl.w	r2, r0, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044c6:	4b22      	ldr	r3, [pc, #136]	; (8004550 <HAL_ADC_ConfigChannel+0x234>)
 80044c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a21      	ldr	r2, [pc, #132]	; (8004554 <HAL_ADC_ConfigChannel+0x238>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d109      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x1cc>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b12      	cmp	r3, #18
 80044da:	d105      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a19      	ldr	r2, [pc, #100]	; (8004554 <HAL_ADC_ConfigChannel+0x238>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d123      	bne.n	800453a <HAL_ADC_ConfigChannel+0x21e>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b10      	cmp	r3, #16
 80044f8:	d003      	beq.n	8004502 <HAL_ADC_ConfigChannel+0x1e6>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b11      	cmp	r3, #17
 8004500:	d11b      	bne.n	800453a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b10      	cmp	r3, #16
 8004514:	d111      	bne.n	800453a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004516:	4b10      	ldr	r3, [pc, #64]	; (8004558 <HAL_ADC_ConfigChannel+0x23c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a10      	ldr	r2, [pc, #64]	; (800455c <HAL_ADC_ConfigChannel+0x240>)
 800451c:	fba2 2303 	umull	r2, r3, r2, r3
 8004520:	0c9a      	lsrs	r2, r3, #18
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800452c:	e002      	b.n	8004534 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	3b01      	subs	r3, #1
 8004532:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f9      	bne.n	800452e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	40012300 	.word	0x40012300
 8004554:	40012000 	.word	0x40012000
 8004558:	2000000c 	.word	0x2000000c
 800455c:	431bde83 	.word	0x431bde83

08004560 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004568:	4b79      	ldr	r3, [pc, #484]	; (8004750 <ADC_Init+0x1f0>)
 800456a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	431a      	orrs	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6859      	ldr	r1, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	021a      	lsls	r2, r3, #8
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80045b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6859      	ldr	r1, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6899      	ldr	r1, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	4a58      	ldr	r2, [pc, #352]	; (8004754 <ADC_Init+0x1f4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d022      	beq.n	800463e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004606:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6899      	ldr	r1, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6899      	ldr	r1, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	609a      	str	r2, [r3, #8]
 800463c:	e00f      	b.n	800465e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800464c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800465c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0202 	bic.w	r2, r2, #2
 800466c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6899      	ldr	r1, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	7e1b      	ldrb	r3, [r3, #24]
 8004678:	005a      	lsls	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01b      	beq.n	80046c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800469a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80046aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6859      	ldr	r1, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	3b01      	subs	r3, #1
 80046b8:	035a      	lsls	r2, r3, #13
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	e007      	b.n	80046d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	051a      	lsls	r2, r3, #20
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6899      	ldr	r1, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004716:	025a      	lsls	r2, r3, #9
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6899      	ldr	r1, [r3, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	029a      	lsls	r2, r3, #10
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	609a      	str	r2, [r3, #8]
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	40012300 	.word	0x40012300
 8004754:	0f000001 	.word	0x0f000001

08004758 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <__NVIC_SetPriorityGrouping+0x44>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004788:	4013      	ands	r3, r2
 800478a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800479e:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <__NVIC_SetPriorityGrouping+0x44>)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	60d3      	str	r3, [r2, #12]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	e000ed00 	.word	0xe000ed00

080047b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047b8:	4b04      	ldr	r3, [pc, #16]	; (80047cc <__NVIC_GetPriorityGrouping+0x18>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	f003 0307 	and.w	r3, r3, #7
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	e000ed00 	.word	0xe000ed00

080047d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	db0b      	blt.n	80047fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	f003 021f 	and.w	r2, r3, #31
 80047e8:	4907      	ldr	r1, [pc, #28]	; (8004808 <__NVIC_EnableIRQ+0x38>)
 80047ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	2001      	movs	r0, #1
 80047f2:	fa00 f202 	lsl.w	r2, r0, r2
 80047f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	e000e100 	.word	0xe000e100

0800480c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	6039      	str	r1, [r7, #0]
 8004816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481c:	2b00      	cmp	r3, #0
 800481e:	db0a      	blt.n	8004836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	b2da      	uxtb	r2, r3
 8004824:	490c      	ldr	r1, [pc, #48]	; (8004858 <__NVIC_SetPriority+0x4c>)
 8004826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482a:	0112      	lsls	r2, r2, #4
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	440b      	add	r3, r1
 8004830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004834:	e00a      	b.n	800484c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	b2da      	uxtb	r2, r3
 800483a:	4908      	ldr	r1, [pc, #32]	; (800485c <__NVIC_SetPriority+0x50>)
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	3b04      	subs	r3, #4
 8004844:	0112      	lsls	r2, r2, #4
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	440b      	add	r3, r1
 800484a:	761a      	strb	r2, [r3, #24]
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	e000e100 	.word	0xe000e100
 800485c:	e000ed00 	.word	0xe000ed00

08004860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004860:	b480      	push	{r7}
 8004862:	b089      	sub	sp, #36	; 0x24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f1c3 0307 	rsb	r3, r3, #7
 800487a:	2b04      	cmp	r3, #4
 800487c:	bf28      	it	cs
 800487e:	2304      	movcs	r3, #4
 8004880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3304      	adds	r3, #4
 8004886:	2b06      	cmp	r3, #6
 8004888:	d902      	bls.n	8004890 <NVIC_EncodePriority+0x30>
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3b03      	subs	r3, #3
 800488e:	e000      	b.n	8004892 <NVIC_EncodePriority+0x32>
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004894:	f04f 32ff 	mov.w	r2, #4294967295
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43da      	mvns	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	401a      	ands	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048a8:	f04f 31ff 	mov.w	r1, #4294967295
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	43d9      	mvns	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b8:	4313      	orrs	r3, r2
         );
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3724      	adds	r7, #36	; 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048d8:	d301      	bcc.n	80048de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048da:	2301      	movs	r3, #1
 80048dc:	e00f      	b.n	80048fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048de:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <SysTick_Config+0x40>)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048e6:	210f      	movs	r1, #15
 80048e8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ec:	f7ff ff8e 	bl	800480c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <SysTick_Config+0x40>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048f6:	4b04      	ldr	r3, [pc, #16]	; (8004908 <SysTick_Config+0x40>)
 80048f8:	2207      	movs	r2, #7
 80048fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	e000e010 	.word	0xe000e010

0800490c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff ff29 	bl	800476c <__NVIC_SetPriorityGrouping>
}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004922:	b580      	push	{r7, lr}
 8004924:	b086      	sub	sp, #24
 8004926:	af00      	add	r7, sp, #0
 8004928:	4603      	mov	r3, r0
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004934:	f7ff ff3e 	bl	80047b4 <__NVIC_GetPriorityGrouping>
 8004938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	6978      	ldr	r0, [r7, #20]
 8004940:	f7ff ff8e 	bl	8004860 <NVIC_EncodePriority>
 8004944:	4602      	mov	r2, r0
 8004946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff ff5d 	bl	800480c <__NVIC_SetPriority>
}
 8004952:	bf00      	nop
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	4603      	mov	r3, r0
 8004962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff ff31 	bl	80047d0 <__NVIC_EnableIRQ>
}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff ffa2 	bl	80048c8 <SysTick_Config>
 8004984:	4603      	mov	r3, r0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e014      	b.n	80049ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	791b      	ldrb	r3, [r3, #4]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d105      	bne.n	80049b6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7fe fef9 	bl	80037a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2202      	movs	r2, #2
 80049ba:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b085      	sub	sp, #20
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	2300      	movs	r3, #0
 80049e2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	795b      	ldrb	r3, [r3, #5]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_DAC_Start+0x1e>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e050      	b.n	8004a92 <HAL_DAC_Start+0xc0>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6819      	ldr	r1, [r3, #0]
 8004a02:	2201      	movs	r2, #1
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	409a      	lsls	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d11a      	bne.n	8004a4c <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a2c:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d127      	bne.n	8004a84 <HAL_DAC_Start+0xb2>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b38      	cmp	r3, #56	; 0x38
 8004a38:	d124      	bne.n	8004a84 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	e01b      	b.n	8004a84 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a56:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8004a62:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a6a:	d10b      	bne.n	8004a84 <HAL_DAC_Start+0xb2>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004a72:	d107      	bne.n	8004a84 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0202 	orr.w	r2, r2, #2
 8004a82:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b087      	sub	sp, #28
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	795b      	ldrb	r3, [r3, #5]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_DAC_ConfigChannel+0x20>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e036      	b.n	8004b2c <HAL_DAC_ConfigChannel+0x8e>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004ad2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6819      	ldr	r1, [r3, #0]
 8004b0c:	22c0      	movs	r2, #192	; 0xc0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	43da      	mvns	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	400a      	ands	r2, r1
 8004b1c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d105      	bne.n	8004b62 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	e004      	b.n	8004b6c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4413      	add	r3, r2
 8004b68:	3314      	adds	r3, #20
 8004b6a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d004      	beq.n	8004ba0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2280      	movs	r2, #128	; 0x80
 8004b9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e00c      	b.n	8004bba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2205      	movs	r2, #5
 8004ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0201 	bic.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b089      	sub	sp, #36	; 0x24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	e16b      	b.n	8004ebc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004be4:	2201      	movs	r2, #1
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	f040 815a 	bne.w	8004eb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d003      	beq.n	8004c12 <HAL_GPIO_Init+0x4a>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b12      	cmp	r3, #18
 8004c10:	d123      	bne.n	8004c5a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	08da      	lsrs	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3208      	adds	r2, #8
 8004c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	220f      	movs	r2, #15
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4013      	ands	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	08da      	lsrs	r2, r3, #3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3208      	adds	r2, #8
 8004c54:	69b9      	ldr	r1, [r7, #24]
 8004c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	2203      	movs	r2, #3
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f003 0203 	and.w	r2, r3, #3
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d00b      	beq.n	8004cae <HAL_GPIO_Init+0xe6>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d007      	beq.n	8004cae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ca2:	2b11      	cmp	r3, #17
 8004ca4:	d003      	beq.n	8004cae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b12      	cmp	r3, #18
 8004cac:	d130      	bne.n	8004d10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	2203      	movs	r2, #3
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	43db      	mvns	r3, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	f003 0201 	and.w	r2, r3, #1
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	43db      	mvns	r3, r3
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	4013      	ands	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80b4 	beq.w	8004eb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	4b5f      	ldr	r3, [pc, #380]	; (8004ed0 <HAL_GPIO_Init+0x308>)
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	4a5e      	ldr	r2, [pc, #376]	; (8004ed0 <HAL_GPIO_Init+0x308>)
 8004d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d5e:	4b5c      	ldr	r3, [pc, #368]	; (8004ed0 <HAL_GPIO_Init+0x308>)
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d6a:	4a5a      	ldr	r2, [pc, #360]	; (8004ed4 <HAL_GPIO_Init+0x30c>)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	3302      	adds	r3, #2
 8004d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	220f      	movs	r2, #15
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a51      	ldr	r2, [pc, #324]	; (8004ed8 <HAL_GPIO_Init+0x310>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d02b      	beq.n	8004dee <HAL_GPIO_Init+0x226>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a50      	ldr	r2, [pc, #320]	; (8004edc <HAL_GPIO_Init+0x314>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d025      	beq.n	8004dea <HAL_GPIO_Init+0x222>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a4f      	ldr	r2, [pc, #316]	; (8004ee0 <HAL_GPIO_Init+0x318>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01f      	beq.n	8004de6 <HAL_GPIO_Init+0x21e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a4e      	ldr	r2, [pc, #312]	; (8004ee4 <HAL_GPIO_Init+0x31c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d019      	beq.n	8004de2 <HAL_GPIO_Init+0x21a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a4d      	ldr	r2, [pc, #308]	; (8004ee8 <HAL_GPIO_Init+0x320>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <HAL_GPIO_Init+0x216>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a4c      	ldr	r2, [pc, #304]	; (8004eec <HAL_GPIO_Init+0x324>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00d      	beq.n	8004dda <HAL_GPIO_Init+0x212>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a4b      	ldr	r2, [pc, #300]	; (8004ef0 <HAL_GPIO_Init+0x328>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d007      	beq.n	8004dd6 <HAL_GPIO_Init+0x20e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a4a      	ldr	r2, [pc, #296]	; (8004ef4 <HAL_GPIO_Init+0x32c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d101      	bne.n	8004dd2 <HAL_GPIO_Init+0x20a>
 8004dce:	2307      	movs	r3, #7
 8004dd0:	e00e      	b.n	8004df0 <HAL_GPIO_Init+0x228>
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	e00c      	b.n	8004df0 <HAL_GPIO_Init+0x228>
 8004dd6:	2306      	movs	r3, #6
 8004dd8:	e00a      	b.n	8004df0 <HAL_GPIO_Init+0x228>
 8004dda:	2305      	movs	r3, #5
 8004ddc:	e008      	b.n	8004df0 <HAL_GPIO_Init+0x228>
 8004dde:	2304      	movs	r3, #4
 8004de0:	e006      	b.n	8004df0 <HAL_GPIO_Init+0x228>
 8004de2:	2303      	movs	r3, #3
 8004de4:	e004      	b.n	8004df0 <HAL_GPIO_Init+0x228>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e002      	b.n	8004df0 <HAL_GPIO_Init+0x228>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <HAL_GPIO_Init+0x228>
 8004dee:	2300      	movs	r3, #0
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	f002 0203 	and.w	r2, r2, #3
 8004df6:	0092      	lsls	r2, r2, #2
 8004df8:	4093      	lsls	r3, r2
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e00:	4934      	ldr	r1, [pc, #208]	; (8004ed4 <HAL_GPIO_Init+0x30c>)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	089b      	lsrs	r3, r3, #2
 8004e06:	3302      	adds	r3, #2
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e0e:	4b3a      	ldr	r3, [pc, #232]	; (8004ef8 <HAL_GPIO_Init+0x330>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e32:	4a31      	ldr	r2, [pc, #196]	; (8004ef8 <HAL_GPIO_Init+0x330>)
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e38:	4b2f      	ldr	r3, [pc, #188]	; (8004ef8 <HAL_GPIO_Init+0x330>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	43db      	mvns	r3, r3
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	4013      	ands	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e5c:	4a26      	ldr	r2, [pc, #152]	; (8004ef8 <HAL_GPIO_Init+0x330>)
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e62:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <HAL_GPIO_Init+0x330>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e86:	4a1c      	ldr	r2, [pc, #112]	; (8004ef8 <HAL_GPIO_Init+0x330>)
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <HAL_GPIO_Init+0x330>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	43db      	mvns	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004eb0:	4a11      	ldr	r2, [pc, #68]	; (8004ef8 <HAL_GPIO_Init+0x330>)
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2b0f      	cmp	r3, #15
 8004ec0:	f67f ae90 	bls.w	8004be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	3724      	adds	r7, #36	; 0x24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40013800 	.word	0x40013800
 8004ed8:	40020000 	.word	0x40020000
 8004edc:	40020400 	.word	0x40020400
 8004ee0:	40020800 	.word	0x40020800
 8004ee4:	40020c00 	.word	0x40020c00
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40021400 	.word	0x40021400
 8004ef0:	40021800 	.word	0x40021800
 8004ef4:	40021c00 	.word	0x40021c00
 8004ef8:	40013c00 	.word	0x40013c00

08004efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	887b      	ldrh	r3, [r7, #2]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
 8004f18:	e001      	b.n	8004f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	807b      	strh	r3, [r7, #2]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f3c:	787b      	ldrb	r3, [r7, #1]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f42:	887a      	ldrh	r2, [r7, #2]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f48:	e003      	b.n	8004f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f4a:	887b      	ldrh	r3, [r7, #2]
 8004f4c:	041a      	lsls	r2, r3, #16
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	619a      	str	r2, [r3, #24]
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695a      	ldr	r2, [r3, #20]
 8004f6e:	887b      	ldrh	r3, [r7, #2]
 8004f70:	401a      	ands	r2, r3
 8004f72:	887b      	ldrh	r3, [r7, #2]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d104      	bne.n	8004f82 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f78:	887b      	ldrh	r3, [r7, #2]
 8004f7a:	041a      	lsls	r2, r3, #16
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004f80:	e002      	b.n	8004f88 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004f82:	887a      	ldrh	r2, [r7, #2]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	619a      	str	r2, [r3, #24]
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f9e:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	88fb      	ldrh	r3, [r7, #6]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d006      	beq.n	8004fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004faa:	4a05      	ldr	r2, [pc, #20]	; (8004fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fb0:	88fb      	ldrh	r3, [r7, #6]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fd ff26 	bl	8002e04 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fb8:	bf00      	nop
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40013c00 	.word	0x40013c00

08004fc4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004fc8:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004fd4:	f000 f808 	bl	8004fe8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004fd8:	4b02      	ldr	r3, [pc, #8]	; (8004fe4 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004fda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004fde:	615a      	str	r2, [r3, #20]
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40013c00 	.word	0x40013c00

08004fe8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004fec:	bf00      	nop
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e22d      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d075      	beq.n	8005102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005016:	4ba3      	ldr	r3, [pc, #652]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 030c 	and.w	r3, r3, #12
 800501e:	2b04      	cmp	r3, #4
 8005020:	d00c      	beq.n	800503c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005022:	4ba0      	ldr	r3, [pc, #640]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800502a:	2b08      	cmp	r3, #8
 800502c:	d112      	bne.n	8005054 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800502e:	4b9d      	ldr	r3, [pc, #628]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800503a:	d10b      	bne.n	8005054 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503c:	4b99      	ldr	r3, [pc, #612]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d05b      	beq.n	8005100 <HAL_RCC_OscConfig+0x108>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d157      	bne.n	8005100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e208      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505c:	d106      	bne.n	800506c <HAL_RCC_OscConfig+0x74>
 800505e:	4b91      	ldr	r3, [pc, #580]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a90      	ldr	r2, [pc, #576]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	e01d      	b.n	80050a8 <HAL_RCC_OscConfig+0xb0>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005074:	d10c      	bne.n	8005090 <HAL_RCC_OscConfig+0x98>
 8005076:	4b8b      	ldr	r3, [pc, #556]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a8a      	ldr	r2, [pc, #552]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	4b88      	ldr	r3, [pc, #544]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a87      	ldr	r2, [pc, #540]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e00b      	b.n	80050a8 <HAL_RCC_OscConfig+0xb0>
 8005090:	4b84      	ldr	r3, [pc, #528]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a83      	ldr	r2, [pc, #524]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	4b81      	ldr	r3, [pc, #516]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a80      	ldr	r2, [pc, #512]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 80050a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d013      	beq.n	80050d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b0:	f7fe fe90 	bl	8003dd4 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050b8:	f7fe fe8c 	bl	8003dd4 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b64      	cmp	r3, #100	; 0x64
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e1cd      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ca:	4b76      	ldr	r3, [pc, #472]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0xc0>
 80050d6:	e014      	b.n	8005102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d8:	f7fe fe7c 	bl	8003dd4 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e0:	f7fe fe78 	bl	8003dd4 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b64      	cmp	r3, #100	; 0x64
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e1b9      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f2:	4b6c      	ldr	r3, [pc, #432]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0xe8>
 80050fe:	e000      	b.n	8005102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d063      	beq.n	80051d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800510e:	4b65      	ldr	r3, [pc, #404]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 030c 	and.w	r3, r3, #12
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00b      	beq.n	8005132 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800511a:	4b62      	ldr	r3, [pc, #392]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005122:	2b08      	cmp	r3, #8
 8005124:	d11c      	bne.n	8005160 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005126:	4b5f      	ldr	r3, [pc, #380]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d116      	bne.n	8005160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005132:	4b5c      	ldr	r3, [pc, #368]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <HAL_RCC_OscConfig+0x152>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d001      	beq.n	800514a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e18d      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800514a:	4b56      	ldr	r3, [pc, #344]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	4952      	ldr	r1, [pc, #328]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 800515a:	4313      	orrs	r3, r2
 800515c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515e:	e03a      	b.n	80051d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d020      	beq.n	80051aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005168:	4b4f      	ldr	r3, [pc, #316]	; (80052a8 <HAL_RCC_OscConfig+0x2b0>)
 800516a:	2201      	movs	r2, #1
 800516c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516e:	f7fe fe31 	bl	8003dd4 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005176:	f7fe fe2d 	bl	8003dd4 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e16e      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005188:	4b46      	ldr	r3, [pc, #280]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0f0      	beq.n	8005176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005194:	4b43      	ldr	r3, [pc, #268]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	4940      	ldr	r1, [pc, #256]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	600b      	str	r3, [r1, #0]
 80051a8:	e015      	b.n	80051d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051aa:	4b3f      	ldr	r3, [pc, #252]	; (80052a8 <HAL_RCC_OscConfig+0x2b0>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b0:	f7fe fe10 	bl	8003dd4 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051b8:	f7fe fe0c 	bl	8003dd4 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e14d      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ca:	4b36      	ldr	r3, [pc, #216]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f0      	bne.n	80051b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d030      	beq.n	8005244 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d016      	beq.n	8005218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ea:	4b30      	ldr	r3, [pc, #192]	; (80052ac <HAL_RCC_OscConfig+0x2b4>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f0:	f7fe fdf0 	bl	8003dd4 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051f8:	f7fe fdec 	bl	8003dd4 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e12d      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520a:	4b26      	ldr	r3, [pc, #152]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 800520c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCC_OscConfig+0x200>
 8005216:	e015      	b.n	8005244 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005218:	4b24      	ldr	r3, [pc, #144]	; (80052ac <HAL_RCC_OscConfig+0x2b4>)
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800521e:	f7fe fdd9 	bl	8003dd4 <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005226:	f7fe fdd5 	bl	8003dd4 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e116      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005238:	4b1a      	ldr	r3, [pc, #104]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 800523a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1f0      	bne.n	8005226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 80a0 	beq.w	8005392 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005252:	2300      	movs	r3, #0
 8005254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005256:	4b13      	ldr	r3, [pc, #76]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10f      	bne.n	8005282 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	4a0e      	ldr	r2, [pc, #56]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 800526c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005270:	6413      	str	r3, [r2, #64]	; 0x40
 8005272:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <HAL_RCC_OscConfig+0x2ac>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800527e:	2301      	movs	r3, #1
 8005280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005282:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_RCC_OscConfig+0x2b8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d121      	bne.n	80052d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800528e:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <HAL_RCC_OscConfig+0x2b8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a07      	ldr	r2, [pc, #28]	; (80052b0 <HAL_RCC_OscConfig+0x2b8>)
 8005294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800529a:	f7fe fd9b 	bl	8003dd4 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a0:	e011      	b.n	80052c6 <HAL_RCC_OscConfig+0x2ce>
 80052a2:	bf00      	nop
 80052a4:	40023800 	.word	0x40023800
 80052a8:	42470000 	.word	0x42470000
 80052ac:	42470e80 	.word	0x42470e80
 80052b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b4:	f7fe fd8e 	bl	8003dd4 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e0cf      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c6:	4b6a      	ldr	r3, [pc, #424]	; (8005470 <HAL_RCC_OscConfig+0x478>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f0      	beq.n	80052b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d106      	bne.n	80052e8 <HAL_RCC_OscConfig+0x2f0>
 80052da:	4b66      	ldr	r3, [pc, #408]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052de:	4a65      	ldr	r2, [pc, #404]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	6713      	str	r3, [r2, #112]	; 0x70
 80052e6:	e01c      	b.n	8005322 <HAL_RCC_OscConfig+0x32a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b05      	cmp	r3, #5
 80052ee:	d10c      	bne.n	800530a <HAL_RCC_OscConfig+0x312>
 80052f0:	4b60      	ldr	r3, [pc, #384]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f4:	4a5f      	ldr	r2, [pc, #380]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 80052f6:	f043 0304 	orr.w	r3, r3, #4
 80052fa:	6713      	str	r3, [r2, #112]	; 0x70
 80052fc:	4b5d      	ldr	r3, [pc, #372]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 80052fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005300:	4a5c      	ldr	r2, [pc, #368]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 8005302:	f043 0301 	orr.w	r3, r3, #1
 8005306:	6713      	str	r3, [r2, #112]	; 0x70
 8005308:	e00b      	b.n	8005322 <HAL_RCC_OscConfig+0x32a>
 800530a:	4b5a      	ldr	r3, [pc, #360]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	4a59      	ldr	r2, [pc, #356]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	6713      	str	r3, [r2, #112]	; 0x70
 8005316:	4b57      	ldr	r3, [pc, #348]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531a:	4a56      	ldr	r2, [pc, #344]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 800531c:	f023 0304 	bic.w	r3, r3, #4
 8005320:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d015      	beq.n	8005356 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532a:	f7fe fd53 	bl	8003dd4 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005330:	e00a      	b.n	8005348 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005332:	f7fe fd4f 	bl	8003dd4 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005340:	4293      	cmp	r3, r2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e08e      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005348:	4b4a      	ldr	r3, [pc, #296]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0ee      	beq.n	8005332 <HAL_RCC_OscConfig+0x33a>
 8005354:	e014      	b.n	8005380 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005356:	f7fe fd3d 	bl	8003dd4 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800535c:	e00a      	b.n	8005374 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800535e:	f7fe fd39 	bl	8003dd4 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	f241 3288 	movw	r2, #5000	; 0x1388
 800536c:	4293      	cmp	r3, r2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e078      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005374:	4b3f      	ldr	r3, [pc, #252]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1ee      	bne.n	800535e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d105      	bne.n	8005392 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005386:	4b3b      	ldr	r3, [pc, #236]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	4a3a      	ldr	r2, [pc, #232]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 800538c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005390:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d064      	beq.n	8005464 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800539a:	4b36      	ldr	r3, [pc, #216]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d05c      	beq.n	8005460 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d141      	bne.n	8005432 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ae:	4b32      	ldr	r3, [pc, #200]	; (8005478 <HAL_RCC_OscConfig+0x480>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fe fd0e 	bl	8003dd4 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053bc:	f7fe fd0a 	bl	8003dd4 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e04b      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ce:	4b29      	ldr	r3, [pc, #164]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69da      	ldr	r2, [r3, #28]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	019b      	lsls	r3, r3, #6
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	3b01      	subs	r3, #1
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	061b      	lsls	r3, r3, #24
 80053fe:	491d      	ldr	r1, [pc, #116]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 8005400:	4313      	orrs	r3, r2
 8005402:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005404:	4b1c      	ldr	r3, [pc, #112]	; (8005478 <HAL_RCC_OscConfig+0x480>)
 8005406:	2201      	movs	r2, #1
 8005408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540a:	f7fe fce3 	bl	8003dd4 <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005412:	f7fe fcdf 	bl	8003dd4 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e020      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005424:	4b13      	ldr	r3, [pc, #76]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0f0      	beq.n	8005412 <HAL_RCC_OscConfig+0x41a>
 8005430:	e018      	b.n	8005464 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005432:	4b11      	ldr	r3, [pc, #68]	; (8005478 <HAL_RCC_OscConfig+0x480>)
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005438:	f7fe fccc 	bl	8003dd4 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005440:	f7fe fcc8 	bl	8003dd4 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e009      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005452:	4b08      	ldr	r3, [pc, #32]	; (8005474 <HAL_RCC_OscConfig+0x47c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0x448>
 800545e:	e001      	b.n	8005464 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40007000 	.word	0x40007000
 8005474:	40023800 	.word	0x40023800
 8005478:	42470060 	.word	0x42470060

0800547c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0ca      	b.n	8005626 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005490:	4b67      	ldr	r3, [pc, #412]	; (8005630 <HAL_RCC_ClockConfig+0x1b4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d90c      	bls.n	80054b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549e:	4b64      	ldr	r3, [pc, #400]	; (8005630 <HAL_RCC_ClockConfig+0x1b4>)
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a6:	4b62      	ldr	r3, [pc, #392]	; (8005630 <HAL_RCC_ClockConfig+0x1b4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d001      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0b6      	b.n	8005626 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d020      	beq.n	8005506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054d0:	4b58      	ldr	r3, [pc, #352]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	4a57      	ldr	r2, [pc, #348]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80054d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054e8:	4b52      	ldr	r3, [pc, #328]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4a51      	ldr	r2, [pc, #324]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80054ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054f4:	4b4f      	ldr	r3, [pc, #316]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	494c      	ldr	r1, [pc, #304]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 8005502:	4313      	orrs	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d044      	beq.n	800559c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d107      	bne.n	800552a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551a:	4b46      	ldr	r3, [pc, #280]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d119      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e07d      	b.n	8005626 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d003      	beq.n	800553a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005536:	2b03      	cmp	r3, #3
 8005538:	d107      	bne.n	800554a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800553a:	4b3e      	ldr	r3, [pc, #248]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e06d      	b.n	8005626 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800554a:	4b3a      	ldr	r3, [pc, #232]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e065      	b.n	8005626 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800555a:	4b36      	ldr	r3, [pc, #216]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f023 0203 	bic.w	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4933      	ldr	r1, [pc, #204]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 8005568:	4313      	orrs	r3, r2
 800556a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800556c:	f7fe fc32 	bl	8003dd4 <HAL_GetTick>
 8005570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005572:	e00a      	b.n	800558a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005574:	f7fe fc2e 	bl	8003dd4 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005582:	4293      	cmp	r3, r2
 8005584:	d901      	bls.n	800558a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e04d      	b.n	8005626 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558a:	4b2a      	ldr	r3, [pc, #168]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 020c 	and.w	r2, r3, #12
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	429a      	cmp	r2, r3
 800559a:	d1eb      	bne.n	8005574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800559c:	4b24      	ldr	r3, [pc, #144]	; (8005630 <HAL_RCC_ClockConfig+0x1b4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d20c      	bcs.n	80055c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055aa:	4b21      	ldr	r3, [pc, #132]	; (8005630 <HAL_RCC_ClockConfig+0x1b4>)
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b2:	4b1f      	ldr	r3, [pc, #124]	; (8005630 <HAL_RCC_ClockConfig+0x1b4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d001      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e030      	b.n	8005626 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055d0:	4b18      	ldr	r3, [pc, #96]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4915      	ldr	r1, [pc, #84]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ee:	4b11      	ldr	r3, [pc, #68]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	490d      	ldr	r1, [pc, #52]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005602:	f000 f81d 	bl	8005640 <HAL_RCC_GetSysClockFreq>
 8005606:	4601      	mov	r1, r0
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	4a09      	ldr	r2, [pc, #36]	; (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	5cd3      	ldrb	r3, [r2, r3]
 8005616:	fa21 f303 	lsr.w	r3, r1, r3
 800561a:	4a08      	ldr	r2, [pc, #32]	; (800563c <HAL_RCC_ClockConfig+0x1c0>)
 800561c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800561e:	2000      	movs	r0, #0
 8005620:	f7fe fb94 	bl	8003d4c <HAL_InitTick>

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	40023c00 	.word	0x40023c00
 8005634:	40023800 	.word	0x40023800
 8005638:	0800833c 	.word	0x0800833c
 800563c:	2000000c 	.word	0x2000000c

08005640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	607b      	str	r3, [r7, #4]
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	2300      	movs	r3, #0
 8005650:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005656:	4b63      	ldr	r3, [pc, #396]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 030c 	and.w	r3, r3, #12
 800565e:	2b04      	cmp	r3, #4
 8005660:	d007      	beq.n	8005672 <HAL_RCC_GetSysClockFreq+0x32>
 8005662:	2b08      	cmp	r3, #8
 8005664:	d008      	beq.n	8005678 <HAL_RCC_GetSysClockFreq+0x38>
 8005666:	2b00      	cmp	r3, #0
 8005668:	f040 80b4 	bne.w	80057d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800566c:	4b5e      	ldr	r3, [pc, #376]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800566e:	60bb      	str	r3, [r7, #8]
       break;
 8005670:	e0b3      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005672:	4b5e      	ldr	r3, [pc, #376]	; (80057ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005674:	60bb      	str	r3, [r7, #8]
      break;
 8005676:	e0b0      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005678:	4b5a      	ldr	r3, [pc, #360]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005680:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005682:	4b58      	ldr	r3, [pc, #352]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d04a      	beq.n	8005724 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800568e:	4b55      	ldr	r3, [pc, #340]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	099b      	lsrs	r3, r3, #6
 8005694:	f04f 0400 	mov.w	r4, #0
 8005698:	f240 11ff 	movw	r1, #511	; 0x1ff
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	ea03 0501 	and.w	r5, r3, r1
 80056a4:	ea04 0602 	and.w	r6, r4, r2
 80056a8:	4629      	mov	r1, r5
 80056aa:	4632      	mov	r2, r6
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	f04f 0400 	mov.w	r4, #0
 80056b4:	0154      	lsls	r4, r2, #5
 80056b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80056ba:	014b      	lsls	r3, r1, #5
 80056bc:	4619      	mov	r1, r3
 80056be:	4622      	mov	r2, r4
 80056c0:	1b49      	subs	r1, r1, r5
 80056c2:	eb62 0206 	sbc.w	r2, r2, r6
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	f04f 0400 	mov.w	r4, #0
 80056ce:	0194      	lsls	r4, r2, #6
 80056d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80056d4:	018b      	lsls	r3, r1, #6
 80056d6:	1a5b      	subs	r3, r3, r1
 80056d8:	eb64 0402 	sbc.w	r4, r4, r2
 80056dc:	f04f 0100 	mov.w	r1, #0
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	00e2      	lsls	r2, r4, #3
 80056e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80056ea:	00d9      	lsls	r1, r3, #3
 80056ec:	460b      	mov	r3, r1
 80056ee:	4614      	mov	r4, r2
 80056f0:	195b      	adds	r3, r3, r5
 80056f2:	eb44 0406 	adc.w	r4, r4, r6
 80056f6:	f04f 0100 	mov.w	r1, #0
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	0262      	lsls	r2, r4, #9
 8005700:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005704:	0259      	lsls	r1, r3, #9
 8005706:	460b      	mov	r3, r1
 8005708:	4614      	mov	r4, r2
 800570a:	4618      	mov	r0, r3
 800570c:	4621      	mov	r1, r4
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f04f 0400 	mov.w	r4, #0
 8005714:	461a      	mov	r2, r3
 8005716:	4623      	mov	r3, r4
 8005718:	f7fa fdb2 	bl	8000280 <__aeabi_uldivmod>
 800571c:	4603      	mov	r3, r0
 800571e:	460c      	mov	r4, r1
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e049      	b.n	80057b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005724:	4b2f      	ldr	r3, [pc, #188]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	099b      	lsrs	r3, r3, #6
 800572a:	f04f 0400 	mov.w	r4, #0
 800572e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	ea03 0501 	and.w	r5, r3, r1
 800573a:	ea04 0602 	and.w	r6, r4, r2
 800573e:	4629      	mov	r1, r5
 8005740:	4632      	mov	r2, r6
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	f04f 0400 	mov.w	r4, #0
 800574a:	0154      	lsls	r4, r2, #5
 800574c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005750:	014b      	lsls	r3, r1, #5
 8005752:	4619      	mov	r1, r3
 8005754:	4622      	mov	r2, r4
 8005756:	1b49      	subs	r1, r1, r5
 8005758:	eb62 0206 	sbc.w	r2, r2, r6
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	f04f 0400 	mov.w	r4, #0
 8005764:	0194      	lsls	r4, r2, #6
 8005766:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800576a:	018b      	lsls	r3, r1, #6
 800576c:	1a5b      	subs	r3, r3, r1
 800576e:	eb64 0402 	sbc.w	r4, r4, r2
 8005772:	f04f 0100 	mov.w	r1, #0
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	00e2      	lsls	r2, r4, #3
 800577c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005780:	00d9      	lsls	r1, r3, #3
 8005782:	460b      	mov	r3, r1
 8005784:	4614      	mov	r4, r2
 8005786:	195b      	adds	r3, r3, r5
 8005788:	eb44 0406 	adc.w	r4, r4, r6
 800578c:	f04f 0100 	mov.w	r1, #0
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	02a2      	lsls	r2, r4, #10
 8005796:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800579a:	0299      	lsls	r1, r3, #10
 800579c:	460b      	mov	r3, r1
 800579e:	4614      	mov	r4, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	4621      	mov	r1, r4
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f04f 0400 	mov.w	r4, #0
 80057aa:	461a      	mov	r2, r3
 80057ac:	4623      	mov	r3, r4
 80057ae:	f7fa fd67 	bl	8000280 <__aeabi_uldivmod>
 80057b2:	4603      	mov	r3, r0
 80057b4:	460c      	mov	r4, r1
 80057b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	3301      	adds	r3, #1
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d0:	60bb      	str	r3, [r7, #8]
      break;
 80057d2:	e002      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80057d6:	60bb      	str	r3, [r7, #8]
      break;
 80057d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057da:	68bb      	ldr	r3, [r7, #8]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e4:	40023800 	.word	0x40023800
 80057e8:	00f42400 	.word	0x00f42400
 80057ec:	007a1200 	.word	0x007a1200

080057f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057f4:	4b03      	ldr	r3, [pc, #12]	; (8005804 <HAL_RCC_GetHCLKFreq+0x14>)
 80057f6:	681b      	ldr	r3, [r3, #0]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	2000000c 	.word	0x2000000c

08005808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800580c:	f7ff fff0 	bl	80057f0 <HAL_RCC_GetHCLKFreq>
 8005810:	4601      	mov	r1, r0
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	0a9b      	lsrs	r3, r3, #10
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	4a03      	ldr	r2, [pc, #12]	; (800582c <HAL_RCC_GetPCLK1Freq+0x24>)
 800581e:	5cd3      	ldrb	r3, [r2, r3]
 8005820:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005824:	4618      	mov	r0, r3
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40023800 	.word	0x40023800
 800582c:	0800834c 	.word	0x0800834c

08005830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005834:	f7ff ffdc 	bl	80057f0 <HAL_RCC_GetHCLKFreq>
 8005838:	4601      	mov	r1, r0
 800583a:	4b05      	ldr	r3, [pc, #20]	; (8005850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	0b5b      	lsrs	r3, r3, #13
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	4a03      	ldr	r2, [pc, #12]	; (8005854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005846:	5cd3      	ldrb	r3, [r2, r3]
 8005848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800584c:	4618      	mov	r0, r3
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40023800 	.word	0x40023800
 8005854:	0800834c 	.word	0x0800834c

08005858 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e056      	b.n	8005918 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d106      	bne.n	800588a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7fd ffd3 	bl	8003830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2202      	movs	r2, #2
 800588e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	ea42 0103 	orr.w	r1, r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	0c1b      	lsrs	r3, r3, #16
 80058e8:	f003 0104 	and.w	r1, r3, #4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69da      	ldr	r2, [r3, #28]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005906:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_SPI_Transmit+0x22>
 800593e:	2302      	movs	r3, #2
 8005940:	e11e      	b.n	8005b80 <HAL_SPI_Transmit+0x260>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800594a:	f7fe fa43 	bl	8003dd4 <HAL_GetTick>
 800594e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d002      	beq.n	8005966 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005960:	2302      	movs	r3, #2
 8005962:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005964:	e103      	b.n	8005b6e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_SPI_Transmit+0x52>
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d102      	bne.n	8005978 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005976:	e0fa      	b.n	8005b6e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2203      	movs	r2, #3
 800597c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	88fa      	ldrh	r2, [r7, #6]
 8005990:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	88fa      	ldrh	r2, [r7, #6]
 8005996:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059be:	d107      	bne.n	80059d0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b40      	cmp	r3, #64	; 0x40
 80059dc:	d007      	beq.n	80059ee <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f6:	d14b      	bne.n	8005a90 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_SPI_Transmit+0xe6>
 8005a00:	8afb      	ldrh	r3, [r7, #22]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d13e      	bne.n	8005a84 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	881a      	ldrh	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	1c9a      	adds	r2, r3, #2
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a2a:	e02b      	b.n	8005a84 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d112      	bne.n	8005a60 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	881a      	ldrh	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	1c9a      	adds	r2, r3, #2
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a5e:	e011      	b.n	8005a84 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a60:	f7fe f9b8 	bl	8003dd4 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d803      	bhi.n	8005a78 <HAL_SPI_Transmit+0x158>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d102      	bne.n	8005a7e <HAL_SPI_Transmit+0x15e>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d102      	bne.n	8005a84 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a82:	e074      	b.n	8005b6e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1ce      	bne.n	8005a2c <HAL_SPI_Transmit+0x10c>
 8005a8e:	e04c      	b.n	8005b2a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <HAL_SPI_Transmit+0x17e>
 8005a98:	8afb      	ldrh	r3, [r7, #22]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d140      	bne.n	8005b20 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	7812      	ldrb	r2, [r2, #0]
 8005aaa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ac4:	e02c      	b.n	8005b20 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d113      	bne.n	8005afc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	330c      	adds	r3, #12
 8005ade:	7812      	ldrb	r2, [r2, #0]
 8005ae0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005afa:	e011      	b.n	8005b20 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005afc:	f7fe f96a 	bl	8003dd4 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d803      	bhi.n	8005b14 <HAL_SPI_Transmit+0x1f4>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b12:	d102      	bne.n	8005b1a <HAL_SPI_Transmit+0x1fa>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d102      	bne.n	8005b20 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b1e:	e026      	b.n	8005b6e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1cd      	bne.n	8005ac6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 fa44 	bl	8005fbc <SPI_EndRxTxTransaction>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	613b      	str	r3, [r7, #16]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	77fb      	strb	r3, [r7, #31]
 8005b6a:	e000      	b.n	8005b6e <HAL_SPI_Transmit+0x24e>
  }

error:
 8005b6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08c      	sub	sp, #48	; 0x30
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b96:	2301      	movs	r3, #1
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_SPI_TransmitReceive+0x26>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e18a      	b.n	8005ec4 <HAL_SPI_TransmitReceive+0x33c>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bb6:	f7fe f90d 	bl	8003dd4 <HAL_GetTick>
 8005bba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005bcc:	887b      	ldrh	r3, [r7, #2]
 8005bce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d00f      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0x70>
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bde:	d107      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d103      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x68>
 8005be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d003      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005bf6:	e15b      	b.n	8005eb0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <HAL_SPI_TransmitReceive+0x82>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_SPI_TransmitReceive+0x82>
 8005c04:	887b      	ldrh	r3, [r7, #2]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c10:	e14e      	b.n	8005eb0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d003      	beq.n	8005c26 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2205      	movs	r2, #5
 8005c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	887a      	ldrh	r2, [r7, #2]
 8005c36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	887a      	ldrh	r2, [r7, #2]
 8005c3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	887a      	ldrh	r2, [r7, #2]
 8005c48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	887a      	ldrh	r2, [r7, #2]
 8005c4e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c66:	2b40      	cmp	r3, #64	; 0x40
 8005c68:	d007      	beq.n	8005c7a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c82:	d178      	bne.n	8005d76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_SPI_TransmitReceive+0x10a>
 8005c8c:	8b7b      	ldrh	r3, [r7, #26]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d166      	bne.n	8005d60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	881a      	ldrh	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca2:	1c9a      	adds	r2, r3, #2
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cb6:	e053      	b.n	8005d60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d11b      	bne.n	8005cfe <HAL_SPI_TransmitReceive+0x176>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d016      	beq.n	8005cfe <HAL_SPI_TransmitReceive+0x176>
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d113      	bne.n	8005cfe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	881a      	ldrh	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	1c9a      	adds	r2, r3, #2
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d119      	bne.n	8005d40 <HAL_SPI_TransmitReceive+0x1b8>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d014      	beq.n	8005d40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	b292      	uxth	r2, r2
 8005d22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	1c9a      	adds	r2, r3, #2
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d40:	f7fe f848 	bl	8003dd4 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d807      	bhi.n	8005d60 <HAL_SPI_TransmitReceive+0x1d8>
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d003      	beq.n	8005d60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d5e:	e0a7      	b.n	8005eb0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1a6      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x130>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1a1      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x130>
 8005d74:	e07c      	b.n	8005e70 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <HAL_SPI_TransmitReceive+0x1fc>
 8005d7e:	8b7b      	ldrh	r3, [r7, #26]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d16b      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	7812      	ldrb	r2, [r2, #0]
 8005d90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005daa:	e057      	b.n	8005e5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d11c      	bne.n	8005df4 <HAL_SPI_TransmitReceive+0x26c>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d017      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x26c>
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d114      	bne.n	8005df4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	330c      	adds	r3, #12
 8005dd4:	7812      	ldrb	r2, [r2, #0]
 8005dd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d119      	bne.n	8005e36 <HAL_SPI_TransmitReceive+0x2ae>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d014      	beq.n	8005e36 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e32:	2301      	movs	r3, #1
 8005e34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e36:	f7fd ffcd 	bl	8003dd4 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d803      	bhi.n	8005e4e <HAL_SPI_TransmitReceive+0x2c6>
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d102      	bne.n	8005e54 <HAL_SPI_TransmitReceive+0x2cc>
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d103      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005e5a:	e029      	b.n	8005eb0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1a2      	bne.n	8005dac <HAL_SPI_TransmitReceive+0x224>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d19d      	bne.n	8005dac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f8a1 	bl	8005fbc <SPI_EndRxTxTransaction>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d006      	beq.n	8005e8e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005e8c:	e010      	b.n	8005eb0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10b      	bne.n	8005eae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e96:	2300      	movs	r3, #0
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	e000      	b.n	8005eb0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005eae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ec0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3730      	adds	r7, #48	; 0x30
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eda:	b2db      	uxtb	r3, r3
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ef8:	e04c      	b.n	8005f94 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	d048      	beq.n	8005f94 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005f02:	f7fd ff67 	bl	8003dd4 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d902      	bls.n	8005f18 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d13d      	bne.n	8005f94 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f30:	d111      	bne.n	8005f56 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f3a:	d004      	beq.n	8005f46 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f44:	d107      	bne.n	8005f56 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f5e:	d10f      	bne.n	8005f80 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e00f      	b.n	8005fb4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	bf0c      	ite	eq
 8005fa4:	2301      	moveq	r3, #1
 8005fa6:	2300      	movne	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d1a3      	bne.n	8005efa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005fc8:	4b1b      	ldr	r3, [pc, #108]	; (8006038 <SPI_EndRxTxTransaction+0x7c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1b      	ldr	r2, [pc, #108]	; (800603c <SPI_EndRxTxTransaction+0x80>)
 8005fce:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd2:	0d5b      	lsrs	r3, r3, #21
 8005fd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fd8:	fb02 f303 	mul.w	r3, r2, r3
 8005fdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fe6:	d112      	bne.n	800600e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2180      	movs	r1, #128	; 0x80
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff ff78 	bl	8005ee8 <SPI_WaitFlagStateUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d016      	beq.n	800602c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006002:	f043 0220 	orr.w	r2, r3, #32
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e00f      	b.n	800602e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	3b01      	subs	r3, #1
 8006018:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006024:	2b80      	cmp	r3, #128	; 0x80
 8006026:	d0f2      	beq.n	800600e <SPI_EndRxTxTransaction+0x52>
 8006028:	e000      	b.n	800602c <SPI_EndRxTxTransaction+0x70>
        break;
 800602a:	bf00      	nop
  }

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	2000000c 	.word	0x2000000c
 800603c:	165e9f81 	.word	0x165e9f81

08006040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e01d      	b.n	800608e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fd fc2a 	bl	80038c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3304      	adds	r3, #4
 800607c:	4619      	mov	r1, r3
 800607e:	4610      	mov	r0, r2
 8006080:	f000 fa40 	bl	8006504 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0201 	orr.w	r2, r2, #1
 80060ac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b06      	cmp	r3, #6
 80060be:	d007      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0201 	orr.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0201 	bic.w	r2, r2, #1
 80060f4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6a1a      	ldr	r2, [r3, #32]
 80060fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006100:	4013      	ands	r3, r2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10f      	bne.n	8006126 <HAL_TIM_Base_Stop_IT+0x48>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6a1a      	ldr	r2, [r3, #32]
 800610c:	f240 4344 	movw	r3, #1092	; 0x444
 8006110:	4013      	ands	r3, r2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d107      	bne.n	8006126 <HAL_TIM_Base_Stop_IT+0x48>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0201 	bic.w	r2, r2, #1
 8006124:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b02      	cmp	r3, #2
 8006148:	d122      	bne.n	8006190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b02      	cmp	r3, #2
 8006156:	d11b      	bne.n	8006190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0202 	mvn.w	r2, #2
 8006160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f9a5 	bl	80064c6 <HAL_TIM_IC_CaptureCallback>
 800617c:	e005      	b.n	800618a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f997 	bl	80064b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f9a8 	bl	80064da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b04      	cmp	r3, #4
 800619c:	d122      	bne.n	80061e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d11b      	bne.n	80061e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0204 	mvn.w	r2, #4
 80061b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2202      	movs	r2, #2
 80061ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f97b 	bl	80064c6 <HAL_TIM_IC_CaptureCallback>
 80061d0:	e005      	b.n	80061de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f96d 	bl	80064b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f97e 	bl	80064da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d122      	bne.n	8006238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d11b      	bne.n	8006238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0208 	mvn.w	r2, #8
 8006208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2204      	movs	r2, #4
 800620e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f951 	bl	80064c6 <HAL_TIM_IC_CaptureCallback>
 8006224:	e005      	b.n	8006232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f943 	bl	80064b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f954 	bl	80064da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0310 	and.w	r3, r3, #16
 8006242:	2b10      	cmp	r3, #16
 8006244:	d122      	bne.n	800628c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	2b10      	cmp	r3, #16
 8006252:	d11b      	bne.n	800628c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0210 	mvn.w	r2, #16
 800625c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2208      	movs	r2, #8
 8006262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f927 	bl	80064c6 <HAL_TIM_IC_CaptureCallback>
 8006278:	e005      	b.n	8006286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f919 	bl	80064b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f92a 	bl	80064da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b01      	cmp	r3, #1
 8006298:	d10e      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d107      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0201 	mvn.w	r2, #1
 80062b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fc fe1a 	bl	8002eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b80      	cmp	r3, #128	; 0x80
 80062c4:	d10e      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d0:	2b80      	cmp	r3, #128	; 0x80
 80062d2:	d107      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fa99 	bl	8006816 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d10e      	bne.n	8006310 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d107      	bne.n	8006310 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f8ef 	bl	80064ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b20      	cmp	r3, #32
 800631c:	d10e      	bne.n	800633c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b20      	cmp	r3, #32
 800632a:	d107      	bne.n	800633c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0220 	mvn.w	r2, #32
 8006334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fa63 	bl	8006802 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_TIM_ConfigClockSource+0x18>
 8006358:	2302      	movs	r3, #2
 800635a:	e0a6      	b.n	80064aa <HAL_TIM_ConfigClockSource+0x166>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800637a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006382:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	d067      	beq.n	8006464 <HAL_TIM_ConfigClockSource+0x120>
 8006394:	2b40      	cmp	r3, #64	; 0x40
 8006396:	d80b      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x6c>
 8006398:	2b10      	cmp	r3, #16
 800639a:	d073      	beq.n	8006484 <HAL_TIM_ConfigClockSource+0x140>
 800639c:	2b10      	cmp	r3, #16
 800639e:	d802      	bhi.n	80063a6 <HAL_TIM_ConfigClockSource+0x62>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d06f      	beq.n	8006484 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80063a4:	e078      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063a6:	2b20      	cmp	r3, #32
 80063a8:	d06c      	beq.n	8006484 <HAL_TIM_ConfigClockSource+0x140>
 80063aa:	2b30      	cmp	r3, #48	; 0x30
 80063ac:	d06a      	beq.n	8006484 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80063ae:	e073      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063b0:	2b70      	cmp	r3, #112	; 0x70
 80063b2:	d00d      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0x8c>
 80063b4:	2b70      	cmp	r3, #112	; 0x70
 80063b6:	d804      	bhi.n	80063c2 <HAL_TIM_ConfigClockSource+0x7e>
 80063b8:	2b50      	cmp	r3, #80	; 0x50
 80063ba:	d033      	beq.n	8006424 <HAL_TIM_ConfigClockSource+0xe0>
 80063bc:	2b60      	cmp	r3, #96	; 0x60
 80063be:	d041      	beq.n	8006444 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80063c0:	e06a      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c6:	d066      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x152>
 80063c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063cc:	d017      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80063ce:	e063      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	6899      	ldr	r1, [r3, #8]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f000 f9aa 	bl	8006738 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	609a      	str	r2, [r3, #8]
      break;
 80063fc:	e04c      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6899      	ldr	r1, [r3, #8]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f000 f993 	bl	8006738 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006420:	609a      	str	r2, [r3, #8]
      break;
 8006422:	e039      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	6859      	ldr	r1, [r3, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	461a      	mov	r2, r3
 8006432:	f000 f907 	bl	8006644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2150      	movs	r1, #80	; 0x50
 800643c:	4618      	mov	r0, r3
 800643e:	f000 f960 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 8006442:	e029      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	6859      	ldr	r1, [r3, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	461a      	mov	r2, r3
 8006452:	f000 f926 	bl	80066a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2160      	movs	r1, #96	; 0x60
 800645c:	4618      	mov	r0, r3
 800645e:	f000 f950 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 8006462:	e019      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6818      	ldr	r0, [r3, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	6859      	ldr	r1, [r3, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	461a      	mov	r2, r3
 8006472:	f000 f8e7 	bl	8006644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2140      	movs	r1, #64	; 0x40
 800647c:	4618      	mov	r0, r3
 800647e:	f000 f940 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 8006482:	e009      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4619      	mov	r1, r3
 800648e:	4610      	mov	r0, r2
 8006490:	f000 f937 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 8006494:	e000      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
	...

08006504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a40      	ldr	r2, [pc, #256]	; (8006618 <TIM_Base_SetConfig+0x114>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d013      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006522:	d00f      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a3d      	ldr	r2, [pc, #244]	; (800661c <TIM_Base_SetConfig+0x118>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00b      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a3c      	ldr	r2, [pc, #240]	; (8006620 <TIM_Base_SetConfig+0x11c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d007      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a3b      	ldr	r2, [pc, #236]	; (8006624 <TIM_Base_SetConfig+0x120>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a3a      	ldr	r2, [pc, #232]	; (8006628 <TIM_Base_SetConfig+0x124>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d108      	bne.n	8006556 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a2f      	ldr	r2, [pc, #188]	; (8006618 <TIM_Base_SetConfig+0x114>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d02b      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006564:	d027      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a2c      	ldr	r2, [pc, #176]	; (800661c <TIM_Base_SetConfig+0x118>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d023      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a2b      	ldr	r2, [pc, #172]	; (8006620 <TIM_Base_SetConfig+0x11c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d01f      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a2a      	ldr	r2, [pc, #168]	; (8006624 <TIM_Base_SetConfig+0x120>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01b      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a29      	ldr	r2, [pc, #164]	; (8006628 <TIM_Base_SetConfig+0x124>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d017      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a28      	ldr	r2, [pc, #160]	; (800662c <TIM_Base_SetConfig+0x128>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d013      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a27      	ldr	r2, [pc, #156]	; (8006630 <TIM_Base_SetConfig+0x12c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00f      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a26      	ldr	r2, [pc, #152]	; (8006634 <TIM_Base_SetConfig+0x130>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00b      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a25      	ldr	r2, [pc, #148]	; (8006638 <TIM_Base_SetConfig+0x134>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d007      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a24      	ldr	r2, [pc, #144]	; (800663c <TIM_Base_SetConfig+0x138>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d003      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a23      	ldr	r2, [pc, #140]	; (8006640 <TIM_Base_SetConfig+0x13c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d108      	bne.n	80065c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a0a      	ldr	r2, [pc, #40]	; (8006618 <TIM_Base_SetConfig+0x114>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_Base_SetConfig+0xf8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a0c      	ldr	r2, [pc, #48]	; (8006628 <TIM_Base_SetConfig+0x124>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d103      	bne.n	8006604 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	615a      	str	r2, [r3, #20]
}
 800660a:	bf00      	nop
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40010000 	.word	0x40010000
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800
 8006624:	40000c00 	.word	0x40000c00
 8006628:	40010400 	.word	0x40010400
 800662c:	40014000 	.word	0x40014000
 8006630:	40014400 	.word	0x40014400
 8006634:	40014800 	.word	0x40014800
 8006638:	40001800 	.word	0x40001800
 800663c:	40001c00 	.word	0x40001c00
 8006640:	40002000 	.word	0x40002000

08006644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f023 0201 	bic.w	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800666e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	4313      	orrs	r3, r2
 8006678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f023 030a 	bic.w	r3, r3, #10
 8006680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b087      	sub	sp, #28
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f023 0210 	bic.w	r2, r3, #16
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	031b      	lsls	r3, r3, #12
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	f043 0307 	orr.w	r3, r3, #7
 8006724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	609a      	str	r2, [r3, #8]
}
 800672c:	bf00      	nop
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	021a      	lsls	r2, r3, #8
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	431a      	orrs	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4313      	orrs	r3, r2
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	609a      	str	r2, [r3, #8]
}
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800678c:	2302      	movs	r3, #2
 800678e:	e032      	b.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067c8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e03f      	b.n	80068bc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7fd f891 	bl	8003978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2224      	movs	r2, #36	; 0x24
 800685a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800686c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fa5a 	bl	8006d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006882:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695a      	ldr	r2, [r3, #20]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006892:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10d      	bne.n	8006916 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b00      	cmp	r3, #0
 8006902:	d008      	beq.n	8006916 <HAL_UART_IRQHandler+0x52>
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f988 	bl	8006c24 <UART_Receive_IT>
      return;
 8006914:	e0cc      	b.n	8006ab0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 80ab 	beq.w	8006a74 <HAL_UART_IRQHandler+0x1b0>
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d105      	bne.n	8006934 <HAL_UART_IRQHandler+0x70>
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80a0 	beq.w	8006a74 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <HAL_UART_IRQHandler+0x90>
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006944:	2b00      	cmp	r3, #0
 8006946:	d005      	beq.n	8006954 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694c:	f043 0201 	orr.w	r2, r3, #1
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f003 0304 	and.w	r3, r3, #4
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <HAL_UART_IRQHandler+0xb0>
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d005      	beq.n	8006974 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696c:	f043 0202 	orr.w	r2, r3, #2
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <HAL_UART_IRQHandler+0xd0>
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d005      	beq.n	8006994 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698c:	f043 0204 	orr.w	r2, r3, #4
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	f003 0308 	and.w	r3, r3, #8
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <HAL_UART_IRQHandler+0xf0>
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ac:	f043 0208 	orr.w	r2, r3, #8
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d078      	beq.n	8006aae <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	f003 0320 	and.w	r3, r3, #32
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d007      	beq.n	80069d6 <HAL_UART_IRQHandler+0x112>
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	f003 0320 	and.w	r3, r3, #32
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f927 	bl	8006c24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e0:	2b40      	cmp	r3, #64	; 0x40
 80069e2:	bf0c      	ite	eq
 80069e4:	2301      	moveq	r3, #1
 80069e6:	2300      	movne	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f0:	f003 0308 	and.w	r3, r3, #8
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d102      	bne.n	80069fe <HAL_UART_IRQHandler+0x13a>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d031      	beq.n	8006a62 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f870 	bl	8006ae4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0e:	2b40      	cmp	r3, #64	; 0x40
 8006a10:	d123      	bne.n	8006a5a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695a      	ldr	r2, [r3, #20]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a20:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d013      	beq.n	8006a52 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2e:	4a22      	ldr	r2, [pc, #136]	; (8006ab8 <HAL_UART_IRQHandler+0x1f4>)
 8006a30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe f8a3 	bl	8004b82 <HAL_DMA_Abort_IT>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d016      	beq.n	8006a70 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	e00e      	b.n	8006a70 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f83c 	bl	8006ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a58:	e00a      	b.n	8006a70 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f838 	bl	8006ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a60:	e006      	b.n	8006a70 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f834 	bl	8006ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006a6e:	e01e      	b.n	8006aae <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a70:	bf00      	nop
    return;
 8006a72:	e01c      	b.n	8006aae <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d008      	beq.n	8006a90 <HAL_UART_IRQHandler+0x1cc>
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f85d 	bl	8006b48 <UART_Transmit_IT>
    return;
 8006a8e:	e00f      	b.n	8006ab0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <HAL_UART_IRQHandler+0x1ec>
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f8a5 	bl	8006bf4 <UART_EndTransmit_IT>
    return;
 8006aaa:	bf00      	nop
 8006aac:	e000      	b.n	8006ab0 <HAL_UART_IRQHandler+0x1ec>
    return;
 8006aae:	bf00      	nop
  }
}
 8006ab0:	3720      	adds	r7, #32
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	08006b21 	.word	0x08006b21

08006abc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006afa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	695a      	ldr	r2, [r3, #20]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0201 	bic.w	r2, r2, #1
 8006b0a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7ff ffc8 	bl	8006ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b21      	cmp	r3, #33	; 0x21
 8006b5a:	d144      	bne.n	8006be6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b64:	d11a      	bne.n	8006b9c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b7a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d105      	bne.n	8006b90 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	1c9a      	adds	r2, r3, #2
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	621a      	str	r2, [r3, #32]
 8006b8e:	e00e      	b.n	8006bae <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	621a      	str	r2, [r3, #32]
 8006b9a:	e008      	b.n	8006bae <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	1c59      	adds	r1, r3, #1
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6211      	str	r1, [r2, #32]
 8006ba6:	781a      	ldrb	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10f      	bne.n	8006be2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006be0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e000      	b.n	8006be8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006be6:	2302      	movs	r3, #2
  }
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff ff51 	bl	8006abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b22      	cmp	r3, #34	; 0x22
 8006c36:	d171      	bne.n	8006d1c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c40:	d123      	bne.n	8006c8a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10e      	bne.n	8006c6e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c66:	1c9a      	adds	r2, r3, #2
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c6c:	e029      	b.n	8006cc2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	629a      	str	r2, [r3, #40]	; 0x28
 8006c88:	e01b      	b.n	8006cc2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6858      	ldr	r0, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	1c59      	adds	r1, r3, #1
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6291      	str	r1, [r2, #40]	; 0x28
 8006ca2:	b2c2      	uxtb	r2, r0
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	e00c      	b.n	8006cc2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb4:	1c58      	adds	r0, r3, #1
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	6288      	str	r0, [r1, #40]	; 0x28
 8006cba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d120      	bne.n	8006d18 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0220 	bic.w	r2, r2, #32
 8006ce4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695a      	ldr	r2, [r3, #20]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0201 	bic.w	r2, r2, #1
 8006d04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fc f95a 	bl	8002fc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	e002      	b.n	8006d1e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e000      	b.n	8006d1e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006d1c:	2302      	movs	r3, #2
  }
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d28:	b5b0      	push	{r4, r5, r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	431a      	orrs	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006d68:	f023 030c 	bic.w	r3, r3, #12
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6812      	ldr	r2, [r2, #0]
 8006d70:	68f9      	ldr	r1, [r7, #12]
 8006d72:	430b      	orrs	r3, r1
 8006d74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699a      	ldr	r2, [r3, #24]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d94:	f040 80e4 	bne.w	8006f60 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4aab      	ldr	r2, [pc, #684]	; (800704c <UART_SetConfig+0x324>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d004      	beq.n	8006dac <UART_SetConfig+0x84>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4aaa      	ldr	r2, [pc, #680]	; (8007050 <UART_SetConfig+0x328>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d16c      	bne.n	8006e86 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006dac:	f7fe fd40 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 8006db0:	4602      	mov	r2, r0
 8006db2:	4613      	mov	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	009a      	lsls	r2, r3, #2
 8006dba:	441a      	add	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc6:	4aa3      	ldr	r2, [pc, #652]	; (8007054 <UART_SetConfig+0x32c>)
 8006dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	011c      	lsls	r4, r3, #4
 8006dd0:	f7fe fd2e 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	009a      	lsls	r2, r3, #2
 8006dde:	441a      	add	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	fbb2 f5f3 	udiv	r5, r2, r3
 8006dea:	f7fe fd21 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 8006dee:	4602      	mov	r2, r0
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	009a      	lsls	r2, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e04:	4a93      	ldr	r2, [pc, #588]	; (8007054 <UART_SetConfig+0x32c>)
 8006e06:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0a:	095b      	lsrs	r3, r3, #5
 8006e0c:	2264      	movs	r2, #100	; 0x64
 8006e0e:	fb02 f303 	mul.w	r3, r2, r3
 8006e12:	1aeb      	subs	r3, r5, r3
 8006e14:	00db      	lsls	r3, r3, #3
 8006e16:	3332      	adds	r3, #50	; 0x32
 8006e18:	4a8e      	ldr	r2, [pc, #568]	; (8007054 <UART_SetConfig+0x32c>)
 8006e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1e:	095b      	lsrs	r3, r3, #5
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e26:	441c      	add	r4, r3
 8006e28:	f7fe fd02 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009a      	lsls	r2, r3, #2
 8006e36:	441a      	add	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006e42:	f7fe fcf5 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 8006e46:	4602      	mov	r2, r0
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009a      	lsls	r2, r3, #2
 8006e50:	441a      	add	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5c:	4a7d      	ldr	r2, [pc, #500]	; (8007054 <UART_SetConfig+0x32c>)
 8006e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e62:	095b      	lsrs	r3, r3, #5
 8006e64:	2264      	movs	r2, #100	; 0x64
 8006e66:	fb02 f303 	mul.w	r3, r2, r3
 8006e6a:	1aeb      	subs	r3, r5, r3
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	3332      	adds	r3, #50	; 0x32
 8006e70:	4a78      	ldr	r2, [pc, #480]	; (8007054 <UART_SetConfig+0x32c>)
 8006e72:	fba2 2303 	umull	r2, r3, r2, r3
 8006e76:	095b      	lsrs	r3, r3, #5
 8006e78:	f003 0207 	and.w	r2, r3, #7
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4422      	add	r2, r4
 8006e82:	609a      	str	r2, [r3, #8]
 8006e84:	e154      	b.n	8007130 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006e86:	f7fe fcbf 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	009a      	lsls	r2, r3, #2
 8006e94:	441a      	add	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea0:	4a6c      	ldr	r2, [pc, #432]	; (8007054 <UART_SetConfig+0x32c>)
 8006ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	011c      	lsls	r4, r3, #4
 8006eaa:	f7fe fcad 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009a      	lsls	r2, r3, #2
 8006eb8:	441a      	add	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	fbb2 f5f3 	udiv	r5, r2, r3
 8006ec4:	f7fe fca0 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009a      	lsls	r2, r3, #2
 8006ed2:	441a      	add	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ede:	4a5d      	ldr	r2, [pc, #372]	; (8007054 <UART_SetConfig+0x32c>)
 8006ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	2264      	movs	r2, #100	; 0x64
 8006ee8:	fb02 f303 	mul.w	r3, r2, r3
 8006eec:	1aeb      	subs	r3, r5, r3
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	3332      	adds	r3, #50	; 0x32
 8006ef2:	4a58      	ldr	r2, [pc, #352]	; (8007054 <UART_SetConfig+0x32c>)
 8006ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef8:	095b      	lsrs	r3, r3, #5
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f00:	441c      	add	r4, r3
 8006f02:	f7fe fc81 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8006f06:	4602      	mov	r2, r0
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009a      	lsls	r2, r3, #2
 8006f10:	441a      	add	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	fbb2 f5f3 	udiv	r5, r2, r3
 8006f1c:	f7fe fc74 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8006f20:	4602      	mov	r2, r0
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	009a      	lsls	r2, r3, #2
 8006f2a:	441a      	add	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f36:	4a47      	ldr	r2, [pc, #284]	; (8007054 <UART_SetConfig+0x32c>)
 8006f38:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	2264      	movs	r2, #100	; 0x64
 8006f40:	fb02 f303 	mul.w	r3, r2, r3
 8006f44:	1aeb      	subs	r3, r5, r3
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	3332      	adds	r3, #50	; 0x32
 8006f4a:	4a42      	ldr	r2, [pc, #264]	; (8007054 <UART_SetConfig+0x32c>)
 8006f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	f003 0207 	and.w	r2, r3, #7
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4422      	add	r2, r4
 8006f5c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006f5e:	e0e7      	b.n	8007130 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a39      	ldr	r2, [pc, #228]	; (800704c <UART_SetConfig+0x324>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d004      	beq.n	8006f74 <UART_SetConfig+0x24c>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a38      	ldr	r2, [pc, #224]	; (8007050 <UART_SetConfig+0x328>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d171      	bne.n	8007058 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006f74:	f7fe fc5c 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009a      	lsls	r2, r3, #2
 8006f82:	441a      	add	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8e:	4a31      	ldr	r2, [pc, #196]	; (8007054 <UART_SetConfig+0x32c>)
 8006f90:	fba2 2303 	umull	r2, r3, r2, r3
 8006f94:	095b      	lsrs	r3, r3, #5
 8006f96:	011c      	lsls	r4, r3, #4
 8006f98:	f7fe fc4a 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009a      	lsls	r2, r3, #2
 8006fa6:	441a      	add	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	fbb2 f5f3 	udiv	r5, r2, r3
 8006fb2:	f7fe fc3d 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009a      	lsls	r2, r3, #2
 8006fc0:	441a      	add	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fcc:	4a21      	ldr	r2, [pc, #132]	; (8007054 <UART_SetConfig+0x32c>)
 8006fce:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd2:	095b      	lsrs	r3, r3, #5
 8006fd4:	2264      	movs	r2, #100	; 0x64
 8006fd6:	fb02 f303 	mul.w	r3, r2, r3
 8006fda:	1aeb      	subs	r3, r5, r3
 8006fdc:	011b      	lsls	r3, r3, #4
 8006fde:	3332      	adds	r3, #50	; 0x32
 8006fe0:	4a1c      	ldr	r2, [pc, #112]	; (8007054 <UART_SetConfig+0x32c>)
 8006fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fec:	441c      	add	r4, r3
 8006fee:	f7fe fc1f 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	009a      	lsls	r2, r3, #2
 8006ffc:	441a      	add	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	fbb2 f5f3 	udiv	r5, r2, r3
 8007008:	f7fe fc12 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 800700c:	4602      	mov	r2, r0
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009a      	lsls	r2, r3, #2
 8007016:	441a      	add	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007022:	4a0c      	ldr	r2, [pc, #48]	; (8007054 <UART_SetConfig+0x32c>)
 8007024:	fba2 2303 	umull	r2, r3, r2, r3
 8007028:	095b      	lsrs	r3, r3, #5
 800702a:	2264      	movs	r2, #100	; 0x64
 800702c:	fb02 f303 	mul.w	r3, r2, r3
 8007030:	1aeb      	subs	r3, r5, r3
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	3332      	adds	r3, #50	; 0x32
 8007036:	4a07      	ldr	r2, [pc, #28]	; (8007054 <UART_SetConfig+0x32c>)
 8007038:	fba2 2303 	umull	r2, r3, r2, r3
 800703c:	095b      	lsrs	r3, r3, #5
 800703e:	f003 020f 	and.w	r2, r3, #15
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4422      	add	r2, r4
 8007048:	609a      	str	r2, [r3, #8]
 800704a:	e071      	b.n	8007130 <UART_SetConfig+0x408>
 800704c:	40011000 	.word	0x40011000
 8007050:	40011400 	.word	0x40011400
 8007054:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007058:	f7fe fbd6 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 800705c:	4602      	mov	r2, r0
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	009a      	lsls	r2, r3, #2
 8007066:	441a      	add	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	4a31      	ldr	r2, [pc, #196]	; (8007138 <UART_SetConfig+0x410>)
 8007074:	fba2 2303 	umull	r2, r3, r2, r3
 8007078:	095b      	lsrs	r3, r3, #5
 800707a:	011c      	lsls	r4, r3, #4
 800707c:	f7fe fbc4 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8007080:	4602      	mov	r2, r0
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	009a      	lsls	r2, r3, #2
 800708a:	441a      	add	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	fbb2 f5f3 	udiv	r5, r2, r3
 8007096:	f7fe fbb7 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 800709a:	4602      	mov	r2, r0
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	009a      	lsls	r2, r3, #2
 80070a4:	441a      	add	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b0:	4a21      	ldr	r2, [pc, #132]	; (8007138 <UART_SetConfig+0x410>)
 80070b2:	fba2 2303 	umull	r2, r3, r2, r3
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	2264      	movs	r2, #100	; 0x64
 80070ba:	fb02 f303 	mul.w	r3, r2, r3
 80070be:	1aeb      	subs	r3, r5, r3
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	3332      	adds	r3, #50	; 0x32
 80070c4:	4a1c      	ldr	r2, [pc, #112]	; (8007138 <UART_SetConfig+0x410>)
 80070c6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070d0:	441c      	add	r4, r3
 80070d2:	f7fe fb99 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 80070d6:	4602      	mov	r2, r0
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009a      	lsls	r2, r3, #2
 80070e0:	441a      	add	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80070ec:	f7fe fb8c 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 80070f0:	4602      	mov	r2, r0
 80070f2:	4613      	mov	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	009a      	lsls	r2, r3, #2
 80070fa:	441a      	add	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	fbb2 f3f3 	udiv	r3, r2, r3
 8007106:	4a0c      	ldr	r2, [pc, #48]	; (8007138 <UART_SetConfig+0x410>)
 8007108:	fba2 2303 	umull	r2, r3, r2, r3
 800710c:	095b      	lsrs	r3, r3, #5
 800710e:	2264      	movs	r2, #100	; 0x64
 8007110:	fb02 f303 	mul.w	r3, r2, r3
 8007114:	1aeb      	subs	r3, r5, r3
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	3332      	adds	r3, #50	; 0x32
 800711a:	4a07      	ldr	r2, [pc, #28]	; (8007138 <UART_SetConfig+0x410>)
 800711c:	fba2 2303 	umull	r2, r3, r2, r3
 8007120:	095b      	lsrs	r3, r3, #5
 8007122:	f003 020f 	and.w	r2, r3, #15
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4422      	add	r2, r4
 800712c:	609a      	str	r2, [r3, #8]
}
 800712e:	e7ff      	b.n	8007130 <UART_SetConfig+0x408>
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bdb0      	pop	{r4, r5, r7, pc}
 8007138:	51eb851f 	.word	0x51eb851f

0800713c <__errno>:
 800713c:	4b01      	ldr	r3, [pc, #4]	; (8007144 <__errno+0x8>)
 800713e:	6818      	ldr	r0, [r3, #0]
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	20000018 	.word	0x20000018

08007148 <__libc_init_array>:
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	4e0d      	ldr	r6, [pc, #52]	; (8007180 <__libc_init_array+0x38>)
 800714c:	4c0d      	ldr	r4, [pc, #52]	; (8007184 <__libc_init_array+0x3c>)
 800714e:	1ba4      	subs	r4, r4, r6
 8007150:	10a4      	asrs	r4, r4, #2
 8007152:	2500      	movs	r5, #0
 8007154:	42a5      	cmp	r5, r4
 8007156:	d109      	bne.n	800716c <__libc_init_array+0x24>
 8007158:	4e0b      	ldr	r6, [pc, #44]	; (8007188 <__libc_init_array+0x40>)
 800715a:	4c0c      	ldr	r4, [pc, #48]	; (800718c <__libc_init_array+0x44>)
 800715c:	f001 f8c8 	bl	80082f0 <_init>
 8007160:	1ba4      	subs	r4, r4, r6
 8007162:	10a4      	asrs	r4, r4, #2
 8007164:	2500      	movs	r5, #0
 8007166:	42a5      	cmp	r5, r4
 8007168:	d105      	bne.n	8007176 <__libc_init_array+0x2e>
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007170:	4798      	blx	r3
 8007172:	3501      	adds	r5, #1
 8007174:	e7ee      	b.n	8007154 <__libc_init_array+0xc>
 8007176:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800717a:	4798      	blx	r3
 800717c:	3501      	adds	r5, #1
 800717e:	e7f2      	b.n	8007166 <__libc_init_array+0x1e>
 8007180:	080083f4 	.word	0x080083f4
 8007184:	080083f4 	.word	0x080083f4
 8007188:	080083f4 	.word	0x080083f4
 800718c:	080083f8 	.word	0x080083f8

08007190 <memset>:
 8007190:	4402      	add	r2, r0
 8007192:	4603      	mov	r3, r0
 8007194:	4293      	cmp	r3, r2
 8007196:	d100      	bne.n	800719a <memset+0xa>
 8007198:	4770      	bx	lr
 800719a:	f803 1b01 	strb.w	r1, [r3], #1
 800719e:	e7f9      	b.n	8007194 <memset+0x4>

080071a0 <iprintf>:
 80071a0:	b40f      	push	{r0, r1, r2, r3}
 80071a2:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <iprintf+0x2c>)
 80071a4:	b513      	push	{r0, r1, r4, lr}
 80071a6:	681c      	ldr	r4, [r3, #0]
 80071a8:	b124      	cbz	r4, 80071b4 <iprintf+0x14>
 80071aa:	69a3      	ldr	r3, [r4, #24]
 80071ac:	b913      	cbnz	r3, 80071b4 <iprintf+0x14>
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 f9de 	bl	8007570 <__sinit>
 80071b4:	ab05      	add	r3, sp, #20
 80071b6:	9a04      	ldr	r2, [sp, #16]
 80071b8:	68a1      	ldr	r1, [r4, #8]
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	4620      	mov	r0, r4
 80071be:	f000 fce9 	bl	8007b94 <_vfiprintf_r>
 80071c2:	b002      	add	sp, #8
 80071c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c8:	b004      	add	sp, #16
 80071ca:	4770      	bx	lr
 80071cc:	20000018 	.word	0x20000018

080071d0 <siprintf>:
 80071d0:	b40e      	push	{r1, r2, r3}
 80071d2:	b500      	push	{lr}
 80071d4:	b09c      	sub	sp, #112	; 0x70
 80071d6:	ab1d      	add	r3, sp, #116	; 0x74
 80071d8:	9002      	str	r0, [sp, #8]
 80071da:	9006      	str	r0, [sp, #24]
 80071dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071e0:	4809      	ldr	r0, [pc, #36]	; (8007208 <siprintf+0x38>)
 80071e2:	9107      	str	r1, [sp, #28]
 80071e4:	9104      	str	r1, [sp, #16]
 80071e6:	4909      	ldr	r1, [pc, #36]	; (800720c <siprintf+0x3c>)
 80071e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ec:	9105      	str	r1, [sp, #20]
 80071ee:	6800      	ldr	r0, [r0, #0]
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	a902      	add	r1, sp, #8
 80071f4:	f000 fbac 	bl	8007950 <_svfiprintf_r>
 80071f8:	9b02      	ldr	r3, [sp, #8]
 80071fa:	2200      	movs	r2, #0
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	b01c      	add	sp, #112	; 0x70
 8007200:	f85d eb04 	ldr.w	lr, [sp], #4
 8007204:	b003      	add	sp, #12
 8007206:	4770      	bx	lr
 8007208:	20000018 	.word	0x20000018
 800720c:	ffff0208 	.word	0xffff0208

08007210 <__swbuf_r>:
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	460e      	mov	r6, r1
 8007214:	4614      	mov	r4, r2
 8007216:	4605      	mov	r5, r0
 8007218:	b118      	cbz	r0, 8007222 <__swbuf_r+0x12>
 800721a:	6983      	ldr	r3, [r0, #24]
 800721c:	b90b      	cbnz	r3, 8007222 <__swbuf_r+0x12>
 800721e:	f000 f9a7 	bl	8007570 <__sinit>
 8007222:	4b21      	ldr	r3, [pc, #132]	; (80072a8 <__swbuf_r+0x98>)
 8007224:	429c      	cmp	r4, r3
 8007226:	d12a      	bne.n	800727e <__swbuf_r+0x6e>
 8007228:	686c      	ldr	r4, [r5, #4]
 800722a:	69a3      	ldr	r3, [r4, #24]
 800722c:	60a3      	str	r3, [r4, #8]
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	071a      	lsls	r2, r3, #28
 8007232:	d52e      	bpl.n	8007292 <__swbuf_r+0x82>
 8007234:	6923      	ldr	r3, [r4, #16]
 8007236:	b363      	cbz	r3, 8007292 <__swbuf_r+0x82>
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	6820      	ldr	r0, [r4, #0]
 800723c:	1ac0      	subs	r0, r0, r3
 800723e:	6963      	ldr	r3, [r4, #20]
 8007240:	b2f6      	uxtb	r6, r6
 8007242:	4283      	cmp	r3, r0
 8007244:	4637      	mov	r7, r6
 8007246:	dc04      	bgt.n	8007252 <__swbuf_r+0x42>
 8007248:	4621      	mov	r1, r4
 800724a:	4628      	mov	r0, r5
 800724c:	f000 f926 	bl	800749c <_fflush_r>
 8007250:	bb28      	cbnz	r0, 800729e <__swbuf_r+0x8e>
 8007252:	68a3      	ldr	r3, [r4, #8]
 8007254:	3b01      	subs	r3, #1
 8007256:	60a3      	str	r3, [r4, #8]
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	6022      	str	r2, [r4, #0]
 800725e:	701e      	strb	r6, [r3, #0]
 8007260:	6963      	ldr	r3, [r4, #20]
 8007262:	3001      	adds	r0, #1
 8007264:	4283      	cmp	r3, r0
 8007266:	d004      	beq.n	8007272 <__swbuf_r+0x62>
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	07db      	lsls	r3, r3, #31
 800726c:	d519      	bpl.n	80072a2 <__swbuf_r+0x92>
 800726e:	2e0a      	cmp	r6, #10
 8007270:	d117      	bne.n	80072a2 <__swbuf_r+0x92>
 8007272:	4621      	mov	r1, r4
 8007274:	4628      	mov	r0, r5
 8007276:	f000 f911 	bl	800749c <_fflush_r>
 800727a:	b190      	cbz	r0, 80072a2 <__swbuf_r+0x92>
 800727c:	e00f      	b.n	800729e <__swbuf_r+0x8e>
 800727e:	4b0b      	ldr	r3, [pc, #44]	; (80072ac <__swbuf_r+0x9c>)
 8007280:	429c      	cmp	r4, r3
 8007282:	d101      	bne.n	8007288 <__swbuf_r+0x78>
 8007284:	68ac      	ldr	r4, [r5, #8]
 8007286:	e7d0      	b.n	800722a <__swbuf_r+0x1a>
 8007288:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <__swbuf_r+0xa0>)
 800728a:	429c      	cmp	r4, r3
 800728c:	bf08      	it	eq
 800728e:	68ec      	ldreq	r4, [r5, #12]
 8007290:	e7cb      	b.n	800722a <__swbuf_r+0x1a>
 8007292:	4621      	mov	r1, r4
 8007294:	4628      	mov	r0, r5
 8007296:	f000 f80d 	bl	80072b4 <__swsetup_r>
 800729a:	2800      	cmp	r0, #0
 800729c:	d0cc      	beq.n	8007238 <__swbuf_r+0x28>
 800729e:	f04f 37ff 	mov.w	r7, #4294967295
 80072a2:	4638      	mov	r0, r7
 80072a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072a6:	bf00      	nop
 80072a8:	08008378 	.word	0x08008378
 80072ac:	08008398 	.word	0x08008398
 80072b0:	08008358 	.word	0x08008358

080072b4 <__swsetup_r>:
 80072b4:	4b32      	ldr	r3, [pc, #200]	; (8007380 <__swsetup_r+0xcc>)
 80072b6:	b570      	push	{r4, r5, r6, lr}
 80072b8:	681d      	ldr	r5, [r3, #0]
 80072ba:	4606      	mov	r6, r0
 80072bc:	460c      	mov	r4, r1
 80072be:	b125      	cbz	r5, 80072ca <__swsetup_r+0x16>
 80072c0:	69ab      	ldr	r3, [r5, #24]
 80072c2:	b913      	cbnz	r3, 80072ca <__swsetup_r+0x16>
 80072c4:	4628      	mov	r0, r5
 80072c6:	f000 f953 	bl	8007570 <__sinit>
 80072ca:	4b2e      	ldr	r3, [pc, #184]	; (8007384 <__swsetup_r+0xd0>)
 80072cc:	429c      	cmp	r4, r3
 80072ce:	d10f      	bne.n	80072f0 <__swsetup_r+0x3c>
 80072d0:	686c      	ldr	r4, [r5, #4]
 80072d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	0715      	lsls	r5, r2, #28
 80072da:	d42c      	bmi.n	8007336 <__swsetup_r+0x82>
 80072dc:	06d0      	lsls	r0, r2, #27
 80072de:	d411      	bmi.n	8007304 <__swsetup_r+0x50>
 80072e0:	2209      	movs	r2, #9
 80072e2:	6032      	str	r2, [r6, #0]
 80072e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e8:	81a3      	strh	r3, [r4, #12]
 80072ea:	f04f 30ff 	mov.w	r0, #4294967295
 80072ee:	e03e      	b.n	800736e <__swsetup_r+0xba>
 80072f0:	4b25      	ldr	r3, [pc, #148]	; (8007388 <__swsetup_r+0xd4>)
 80072f2:	429c      	cmp	r4, r3
 80072f4:	d101      	bne.n	80072fa <__swsetup_r+0x46>
 80072f6:	68ac      	ldr	r4, [r5, #8]
 80072f8:	e7eb      	b.n	80072d2 <__swsetup_r+0x1e>
 80072fa:	4b24      	ldr	r3, [pc, #144]	; (800738c <__swsetup_r+0xd8>)
 80072fc:	429c      	cmp	r4, r3
 80072fe:	bf08      	it	eq
 8007300:	68ec      	ldreq	r4, [r5, #12]
 8007302:	e7e6      	b.n	80072d2 <__swsetup_r+0x1e>
 8007304:	0751      	lsls	r1, r2, #29
 8007306:	d512      	bpl.n	800732e <__swsetup_r+0x7a>
 8007308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800730a:	b141      	cbz	r1, 800731e <__swsetup_r+0x6a>
 800730c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007310:	4299      	cmp	r1, r3
 8007312:	d002      	beq.n	800731a <__swsetup_r+0x66>
 8007314:	4630      	mov	r0, r6
 8007316:	f000 fa19 	bl	800774c <_free_r>
 800731a:	2300      	movs	r3, #0
 800731c:	6363      	str	r3, [r4, #52]	; 0x34
 800731e:	89a3      	ldrh	r3, [r4, #12]
 8007320:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007324:	81a3      	strh	r3, [r4, #12]
 8007326:	2300      	movs	r3, #0
 8007328:	6063      	str	r3, [r4, #4]
 800732a:	6923      	ldr	r3, [r4, #16]
 800732c:	6023      	str	r3, [r4, #0]
 800732e:	89a3      	ldrh	r3, [r4, #12]
 8007330:	f043 0308 	orr.w	r3, r3, #8
 8007334:	81a3      	strh	r3, [r4, #12]
 8007336:	6923      	ldr	r3, [r4, #16]
 8007338:	b94b      	cbnz	r3, 800734e <__swsetup_r+0x9a>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007344:	d003      	beq.n	800734e <__swsetup_r+0x9a>
 8007346:	4621      	mov	r1, r4
 8007348:	4630      	mov	r0, r6
 800734a:	f000 f9bf 	bl	80076cc <__smakebuf_r>
 800734e:	89a2      	ldrh	r2, [r4, #12]
 8007350:	f012 0301 	ands.w	r3, r2, #1
 8007354:	d00c      	beq.n	8007370 <__swsetup_r+0xbc>
 8007356:	2300      	movs	r3, #0
 8007358:	60a3      	str	r3, [r4, #8]
 800735a:	6963      	ldr	r3, [r4, #20]
 800735c:	425b      	negs	r3, r3
 800735e:	61a3      	str	r3, [r4, #24]
 8007360:	6923      	ldr	r3, [r4, #16]
 8007362:	b953      	cbnz	r3, 800737a <__swsetup_r+0xc6>
 8007364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007368:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800736c:	d1ba      	bne.n	80072e4 <__swsetup_r+0x30>
 800736e:	bd70      	pop	{r4, r5, r6, pc}
 8007370:	0792      	lsls	r2, r2, #30
 8007372:	bf58      	it	pl
 8007374:	6963      	ldrpl	r3, [r4, #20]
 8007376:	60a3      	str	r3, [r4, #8]
 8007378:	e7f2      	b.n	8007360 <__swsetup_r+0xac>
 800737a:	2000      	movs	r0, #0
 800737c:	e7f7      	b.n	800736e <__swsetup_r+0xba>
 800737e:	bf00      	nop
 8007380:	20000018 	.word	0x20000018
 8007384:	08008378 	.word	0x08008378
 8007388:	08008398 	.word	0x08008398
 800738c:	08008358 	.word	0x08008358

08007390 <__sflush_r>:
 8007390:	898a      	ldrh	r2, [r1, #12]
 8007392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007396:	4605      	mov	r5, r0
 8007398:	0710      	lsls	r0, r2, #28
 800739a:	460c      	mov	r4, r1
 800739c:	d458      	bmi.n	8007450 <__sflush_r+0xc0>
 800739e:	684b      	ldr	r3, [r1, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	dc05      	bgt.n	80073b0 <__sflush_r+0x20>
 80073a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	dc02      	bgt.n	80073b0 <__sflush_r+0x20>
 80073aa:	2000      	movs	r0, #0
 80073ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073b2:	2e00      	cmp	r6, #0
 80073b4:	d0f9      	beq.n	80073aa <__sflush_r+0x1a>
 80073b6:	2300      	movs	r3, #0
 80073b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073bc:	682f      	ldr	r7, [r5, #0]
 80073be:	6a21      	ldr	r1, [r4, #32]
 80073c0:	602b      	str	r3, [r5, #0]
 80073c2:	d032      	beq.n	800742a <__sflush_r+0x9a>
 80073c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073c6:	89a3      	ldrh	r3, [r4, #12]
 80073c8:	075a      	lsls	r2, r3, #29
 80073ca:	d505      	bpl.n	80073d8 <__sflush_r+0x48>
 80073cc:	6863      	ldr	r3, [r4, #4]
 80073ce:	1ac0      	subs	r0, r0, r3
 80073d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073d2:	b10b      	cbz	r3, 80073d8 <__sflush_r+0x48>
 80073d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073d6:	1ac0      	subs	r0, r0, r3
 80073d8:	2300      	movs	r3, #0
 80073da:	4602      	mov	r2, r0
 80073dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073de:	6a21      	ldr	r1, [r4, #32]
 80073e0:	4628      	mov	r0, r5
 80073e2:	47b0      	blx	r6
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	89a3      	ldrh	r3, [r4, #12]
 80073e8:	d106      	bne.n	80073f8 <__sflush_r+0x68>
 80073ea:	6829      	ldr	r1, [r5, #0]
 80073ec:	291d      	cmp	r1, #29
 80073ee:	d848      	bhi.n	8007482 <__sflush_r+0xf2>
 80073f0:	4a29      	ldr	r2, [pc, #164]	; (8007498 <__sflush_r+0x108>)
 80073f2:	40ca      	lsrs	r2, r1
 80073f4:	07d6      	lsls	r6, r2, #31
 80073f6:	d544      	bpl.n	8007482 <__sflush_r+0xf2>
 80073f8:	2200      	movs	r2, #0
 80073fa:	6062      	str	r2, [r4, #4]
 80073fc:	04d9      	lsls	r1, r3, #19
 80073fe:	6922      	ldr	r2, [r4, #16]
 8007400:	6022      	str	r2, [r4, #0]
 8007402:	d504      	bpl.n	800740e <__sflush_r+0x7e>
 8007404:	1c42      	adds	r2, r0, #1
 8007406:	d101      	bne.n	800740c <__sflush_r+0x7c>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	b903      	cbnz	r3, 800740e <__sflush_r+0x7e>
 800740c:	6560      	str	r0, [r4, #84]	; 0x54
 800740e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007410:	602f      	str	r7, [r5, #0]
 8007412:	2900      	cmp	r1, #0
 8007414:	d0c9      	beq.n	80073aa <__sflush_r+0x1a>
 8007416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800741a:	4299      	cmp	r1, r3
 800741c:	d002      	beq.n	8007424 <__sflush_r+0x94>
 800741e:	4628      	mov	r0, r5
 8007420:	f000 f994 	bl	800774c <_free_r>
 8007424:	2000      	movs	r0, #0
 8007426:	6360      	str	r0, [r4, #52]	; 0x34
 8007428:	e7c0      	b.n	80073ac <__sflush_r+0x1c>
 800742a:	2301      	movs	r3, #1
 800742c:	4628      	mov	r0, r5
 800742e:	47b0      	blx	r6
 8007430:	1c41      	adds	r1, r0, #1
 8007432:	d1c8      	bne.n	80073c6 <__sflush_r+0x36>
 8007434:	682b      	ldr	r3, [r5, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0c5      	beq.n	80073c6 <__sflush_r+0x36>
 800743a:	2b1d      	cmp	r3, #29
 800743c:	d001      	beq.n	8007442 <__sflush_r+0xb2>
 800743e:	2b16      	cmp	r3, #22
 8007440:	d101      	bne.n	8007446 <__sflush_r+0xb6>
 8007442:	602f      	str	r7, [r5, #0]
 8007444:	e7b1      	b.n	80073aa <__sflush_r+0x1a>
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800744c:	81a3      	strh	r3, [r4, #12]
 800744e:	e7ad      	b.n	80073ac <__sflush_r+0x1c>
 8007450:	690f      	ldr	r7, [r1, #16]
 8007452:	2f00      	cmp	r7, #0
 8007454:	d0a9      	beq.n	80073aa <__sflush_r+0x1a>
 8007456:	0793      	lsls	r3, r2, #30
 8007458:	680e      	ldr	r6, [r1, #0]
 800745a:	bf08      	it	eq
 800745c:	694b      	ldreq	r3, [r1, #20]
 800745e:	600f      	str	r7, [r1, #0]
 8007460:	bf18      	it	ne
 8007462:	2300      	movne	r3, #0
 8007464:	eba6 0807 	sub.w	r8, r6, r7
 8007468:	608b      	str	r3, [r1, #8]
 800746a:	f1b8 0f00 	cmp.w	r8, #0
 800746e:	dd9c      	ble.n	80073aa <__sflush_r+0x1a>
 8007470:	4643      	mov	r3, r8
 8007472:	463a      	mov	r2, r7
 8007474:	6a21      	ldr	r1, [r4, #32]
 8007476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007478:	4628      	mov	r0, r5
 800747a:	47b0      	blx	r6
 800747c:	2800      	cmp	r0, #0
 800747e:	dc06      	bgt.n	800748e <__sflush_r+0xfe>
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007486:	81a3      	strh	r3, [r4, #12]
 8007488:	f04f 30ff 	mov.w	r0, #4294967295
 800748c:	e78e      	b.n	80073ac <__sflush_r+0x1c>
 800748e:	4407      	add	r7, r0
 8007490:	eba8 0800 	sub.w	r8, r8, r0
 8007494:	e7e9      	b.n	800746a <__sflush_r+0xda>
 8007496:	bf00      	nop
 8007498:	20400001 	.word	0x20400001

0800749c <_fflush_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	690b      	ldr	r3, [r1, #16]
 80074a0:	4605      	mov	r5, r0
 80074a2:	460c      	mov	r4, r1
 80074a4:	b1db      	cbz	r3, 80074de <_fflush_r+0x42>
 80074a6:	b118      	cbz	r0, 80074b0 <_fflush_r+0x14>
 80074a8:	6983      	ldr	r3, [r0, #24]
 80074aa:	b90b      	cbnz	r3, 80074b0 <_fflush_r+0x14>
 80074ac:	f000 f860 	bl	8007570 <__sinit>
 80074b0:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <_fflush_r+0x48>)
 80074b2:	429c      	cmp	r4, r3
 80074b4:	d109      	bne.n	80074ca <_fflush_r+0x2e>
 80074b6:	686c      	ldr	r4, [r5, #4]
 80074b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074bc:	b17b      	cbz	r3, 80074de <_fflush_r+0x42>
 80074be:	4621      	mov	r1, r4
 80074c0:	4628      	mov	r0, r5
 80074c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074c6:	f7ff bf63 	b.w	8007390 <__sflush_r>
 80074ca:	4b07      	ldr	r3, [pc, #28]	; (80074e8 <_fflush_r+0x4c>)
 80074cc:	429c      	cmp	r4, r3
 80074ce:	d101      	bne.n	80074d4 <_fflush_r+0x38>
 80074d0:	68ac      	ldr	r4, [r5, #8]
 80074d2:	e7f1      	b.n	80074b8 <_fflush_r+0x1c>
 80074d4:	4b05      	ldr	r3, [pc, #20]	; (80074ec <_fflush_r+0x50>)
 80074d6:	429c      	cmp	r4, r3
 80074d8:	bf08      	it	eq
 80074da:	68ec      	ldreq	r4, [r5, #12]
 80074dc:	e7ec      	b.n	80074b8 <_fflush_r+0x1c>
 80074de:	2000      	movs	r0, #0
 80074e0:	bd38      	pop	{r3, r4, r5, pc}
 80074e2:	bf00      	nop
 80074e4:	08008378 	.word	0x08008378
 80074e8:	08008398 	.word	0x08008398
 80074ec:	08008358 	.word	0x08008358

080074f0 <std>:
 80074f0:	2300      	movs	r3, #0
 80074f2:	b510      	push	{r4, lr}
 80074f4:	4604      	mov	r4, r0
 80074f6:	e9c0 3300 	strd	r3, r3, [r0]
 80074fa:	6083      	str	r3, [r0, #8]
 80074fc:	8181      	strh	r1, [r0, #12]
 80074fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007500:	81c2      	strh	r2, [r0, #14]
 8007502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007506:	6183      	str	r3, [r0, #24]
 8007508:	4619      	mov	r1, r3
 800750a:	2208      	movs	r2, #8
 800750c:	305c      	adds	r0, #92	; 0x5c
 800750e:	f7ff fe3f 	bl	8007190 <memset>
 8007512:	4b05      	ldr	r3, [pc, #20]	; (8007528 <std+0x38>)
 8007514:	6263      	str	r3, [r4, #36]	; 0x24
 8007516:	4b05      	ldr	r3, [pc, #20]	; (800752c <std+0x3c>)
 8007518:	62a3      	str	r3, [r4, #40]	; 0x28
 800751a:	4b05      	ldr	r3, [pc, #20]	; (8007530 <std+0x40>)
 800751c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800751e:	4b05      	ldr	r3, [pc, #20]	; (8007534 <std+0x44>)
 8007520:	6224      	str	r4, [r4, #32]
 8007522:	6323      	str	r3, [r4, #48]	; 0x30
 8007524:	bd10      	pop	{r4, pc}
 8007526:	bf00      	nop
 8007528:	080080f1 	.word	0x080080f1
 800752c:	08008113 	.word	0x08008113
 8007530:	0800814b 	.word	0x0800814b
 8007534:	0800816f 	.word	0x0800816f

08007538 <_cleanup_r>:
 8007538:	4901      	ldr	r1, [pc, #4]	; (8007540 <_cleanup_r+0x8>)
 800753a:	f000 b885 	b.w	8007648 <_fwalk_reent>
 800753e:	bf00      	nop
 8007540:	0800749d 	.word	0x0800749d

08007544 <__sfmoreglue>:
 8007544:	b570      	push	{r4, r5, r6, lr}
 8007546:	1e4a      	subs	r2, r1, #1
 8007548:	2568      	movs	r5, #104	; 0x68
 800754a:	4355      	muls	r5, r2
 800754c:	460e      	mov	r6, r1
 800754e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007552:	f000 f949 	bl	80077e8 <_malloc_r>
 8007556:	4604      	mov	r4, r0
 8007558:	b140      	cbz	r0, 800756c <__sfmoreglue+0x28>
 800755a:	2100      	movs	r1, #0
 800755c:	e9c0 1600 	strd	r1, r6, [r0]
 8007560:	300c      	adds	r0, #12
 8007562:	60a0      	str	r0, [r4, #8]
 8007564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007568:	f7ff fe12 	bl	8007190 <memset>
 800756c:	4620      	mov	r0, r4
 800756e:	bd70      	pop	{r4, r5, r6, pc}

08007570 <__sinit>:
 8007570:	6983      	ldr	r3, [r0, #24]
 8007572:	b510      	push	{r4, lr}
 8007574:	4604      	mov	r4, r0
 8007576:	bb33      	cbnz	r3, 80075c6 <__sinit+0x56>
 8007578:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800757c:	6503      	str	r3, [r0, #80]	; 0x50
 800757e:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <__sinit+0x58>)
 8007580:	4a12      	ldr	r2, [pc, #72]	; (80075cc <__sinit+0x5c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6282      	str	r2, [r0, #40]	; 0x28
 8007586:	4298      	cmp	r0, r3
 8007588:	bf04      	itt	eq
 800758a:	2301      	moveq	r3, #1
 800758c:	6183      	streq	r3, [r0, #24]
 800758e:	f000 f81f 	bl	80075d0 <__sfp>
 8007592:	6060      	str	r0, [r4, #4]
 8007594:	4620      	mov	r0, r4
 8007596:	f000 f81b 	bl	80075d0 <__sfp>
 800759a:	60a0      	str	r0, [r4, #8]
 800759c:	4620      	mov	r0, r4
 800759e:	f000 f817 	bl	80075d0 <__sfp>
 80075a2:	2200      	movs	r2, #0
 80075a4:	60e0      	str	r0, [r4, #12]
 80075a6:	2104      	movs	r1, #4
 80075a8:	6860      	ldr	r0, [r4, #4]
 80075aa:	f7ff ffa1 	bl	80074f0 <std>
 80075ae:	2201      	movs	r2, #1
 80075b0:	2109      	movs	r1, #9
 80075b2:	68a0      	ldr	r0, [r4, #8]
 80075b4:	f7ff ff9c 	bl	80074f0 <std>
 80075b8:	2202      	movs	r2, #2
 80075ba:	2112      	movs	r1, #18
 80075bc:	68e0      	ldr	r0, [r4, #12]
 80075be:	f7ff ff97 	bl	80074f0 <std>
 80075c2:	2301      	movs	r3, #1
 80075c4:	61a3      	str	r3, [r4, #24]
 80075c6:	bd10      	pop	{r4, pc}
 80075c8:	08008354 	.word	0x08008354
 80075cc:	08007539 	.word	0x08007539

080075d0 <__sfp>:
 80075d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d2:	4b1b      	ldr	r3, [pc, #108]	; (8007640 <__sfp+0x70>)
 80075d4:	681e      	ldr	r6, [r3, #0]
 80075d6:	69b3      	ldr	r3, [r6, #24]
 80075d8:	4607      	mov	r7, r0
 80075da:	b913      	cbnz	r3, 80075e2 <__sfp+0x12>
 80075dc:	4630      	mov	r0, r6
 80075de:	f7ff ffc7 	bl	8007570 <__sinit>
 80075e2:	3648      	adds	r6, #72	; 0x48
 80075e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	d503      	bpl.n	80075f4 <__sfp+0x24>
 80075ec:	6833      	ldr	r3, [r6, #0]
 80075ee:	b133      	cbz	r3, 80075fe <__sfp+0x2e>
 80075f0:	6836      	ldr	r6, [r6, #0]
 80075f2:	e7f7      	b.n	80075e4 <__sfp+0x14>
 80075f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075f8:	b16d      	cbz	r5, 8007616 <__sfp+0x46>
 80075fa:	3468      	adds	r4, #104	; 0x68
 80075fc:	e7f4      	b.n	80075e8 <__sfp+0x18>
 80075fe:	2104      	movs	r1, #4
 8007600:	4638      	mov	r0, r7
 8007602:	f7ff ff9f 	bl	8007544 <__sfmoreglue>
 8007606:	6030      	str	r0, [r6, #0]
 8007608:	2800      	cmp	r0, #0
 800760a:	d1f1      	bne.n	80075f0 <__sfp+0x20>
 800760c:	230c      	movs	r3, #12
 800760e:	603b      	str	r3, [r7, #0]
 8007610:	4604      	mov	r4, r0
 8007612:	4620      	mov	r0, r4
 8007614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007616:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <__sfp+0x74>)
 8007618:	6665      	str	r5, [r4, #100]	; 0x64
 800761a:	e9c4 5500 	strd	r5, r5, [r4]
 800761e:	60a5      	str	r5, [r4, #8]
 8007620:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007624:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007628:	2208      	movs	r2, #8
 800762a:	4629      	mov	r1, r5
 800762c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007630:	f7ff fdae 	bl	8007190 <memset>
 8007634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800763c:	e7e9      	b.n	8007612 <__sfp+0x42>
 800763e:	bf00      	nop
 8007640:	08008354 	.word	0x08008354
 8007644:	ffff0001 	.word	0xffff0001

08007648 <_fwalk_reent>:
 8007648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800764c:	4680      	mov	r8, r0
 800764e:	4689      	mov	r9, r1
 8007650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007654:	2600      	movs	r6, #0
 8007656:	b914      	cbnz	r4, 800765e <_fwalk_reent+0x16>
 8007658:	4630      	mov	r0, r6
 800765a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800765e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007662:	3f01      	subs	r7, #1
 8007664:	d501      	bpl.n	800766a <_fwalk_reent+0x22>
 8007666:	6824      	ldr	r4, [r4, #0]
 8007668:	e7f5      	b.n	8007656 <_fwalk_reent+0xe>
 800766a:	89ab      	ldrh	r3, [r5, #12]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d907      	bls.n	8007680 <_fwalk_reent+0x38>
 8007670:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007674:	3301      	adds	r3, #1
 8007676:	d003      	beq.n	8007680 <_fwalk_reent+0x38>
 8007678:	4629      	mov	r1, r5
 800767a:	4640      	mov	r0, r8
 800767c:	47c8      	blx	r9
 800767e:	4306      	orrs	r6, r0
 8007680:	3568      	adds	r5, #104	; 0x68
 8007682:	e7ee      	b.n	8007662 <_fwalk_reent+0x1a>

08007684 <__swhatbuf_r>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	460e      	mov	r6, r1
 8007688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800768c:	2900      	cmp	r1, #0
 800768e:	b096      	sub	sp, #88	; 0x58
 8007690:	4614      	mov	r4, r2
 8007692:	461d      	mov	r5, r3
 8007694:	da07      	bge.n	80076a6 <__swhatbuf_r+0x22>
 8007696:	2300      	movs	r3, #0
 8007698:	602b      	str	r3, [r5, #0]
 800769a:	89b3      	ldrh	r3, [r6, #12]
 800769c:	061a      	lsls	r2, r3, #24
 800769e:	d410      	bmi.n	80076c2 <__swhatbuf_r+0x3e>
 80076a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076a4:	e00e      	b.n	80076c4 <__swhatbuf_r+0x40>
 80076a6:	466a      	mov	r2, sp
 80076a8:	f000 fd88 	bl	80081bc <_fstat_r>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	dbf2      	blt.n	8007696 <__swhatbuf_r+0x12>
 80076b0:	9a01      	ldr	r2, [sp, #4]
 80076b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80076b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80076ba:	425a      	negs	r2, r3
 80076bc:	415a      	adcs	r2, r3
 80076be:	602a      	str	r2, [r5, #0]
 80076c0:	e7ee      	b.n	80076a0 <__swhatbuf_r+0x1c>
 80076c2:	2340      	movs	r3, #64	; 0x40
 80076c4:	2000      	movs	r0, #0
 80076c6:	6023      	str	r3, [r4, #0]
 80076c8:	b016      	add	sp, #88	; 0x58
 80076ca:	bd70      	pop	{r4, r5, r6, pc}

080076cc <__smakebuf_r>:
 80076cc:	898b      	ldrh	r3, [r1, #12]
 80076ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076d0:	079d      	lsls	r5, r3, #30
 80076d2:	4606      	mov	r6, r0
 80076d4:	460c      	mov	r4, r1
 80076d6:	d507      	bpl.n	80076e8 <__smakebuf_r+0x1c>
 80076d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	6123      	str	r3, [r4, #16]
 80076e0:	2301      	movs	r3, #1
 80076e2:	6163      	str	r3, [r4, #20]
 80076e4:	b002      	add	sp, #8
 80076e6:	bd70      	pop	{r4, r5, r6, pc}
 80076e8:	ab01      	add	r3, sp, #4
 80076ea:	466a      	mov	r2, sp
 80076ec:	f7ff ffca 	bl	8007684 <__swhatbuf_r>
 80076f0:	9900      	ldr	r1, [sp, #0]
 80076f2:	4605      	mov	r5, r0
 80076f4:	4630      	mov	r0, r6
 80076f6:	f000 f877 	bl	80077e8 <_malloc_r>
 80076fa:	b948      	cbnz	r0, 8007710 <__smakebuf_r+0x44>
 80076fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007700:	059a      	lsls	r2, r3, #22
 8007702:	d4ef      	bmi.n	80076e4 <__smakebuf_r+0x18>
 8007704:	f023 0303 	bic.w	r3, r3, #3
 8007708:	f043 0302 	orr.w	r3, r3, #2
 800770c:	81a3      	strh	r3, [r4, #12]
 800770e:	e7e3      	b.n	80076d8 <__smakebuf_r+0xc>
 8007710:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <__smakebuf_r+0x7c>)
 8007712:	62b3      	str	r3, [r6, #40]	; 0x28
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	6020      	str	r0, [r4, #0]
 8007718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800771c:	81a3      	strh	r3, [r4, #12]
 800771e:	9b00      	ldr	r3, [sp, #0]
 8007720:	6163      	str	r3, [r4, #20]
 8007722:	9b01      	ldr	r3, [sp, #4]
 8007724:	6120      	str	r0, [r4, #16]
 8007726:	b15b      	cbz	r3, 8007740 <__smakebuf_r+0x74>
 8007728:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800772c:	4630      	mov	r0, r6
 800772e:	f000 fd57 	bl	80081e0 <_isatty_r>
 8007732:	b128      	cbz	r0, 8007740 <__smakebuf_r+0x74>
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	f023 0303 	bic.w	r3, r3, #3
 800773a:	f043 0301 	orr.w	r3, r3, #1
 800773e:	81a3      	strh	r3, [r4, #12]
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	431d      	orrs	r5, r3
 8007744:	81a5      	strh	r5, [r4, #12]
 8007746:	e7cd      	b.n	80076e4 <__smakebuf_r+0x18>
 8007748:	08007539 	.word	0x08007539

0800774c <_free_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	4605      	mov	r5, r0
 8007750:	2900      	cmp	r1, #0
 8007752:	d045      	beq.n	80077e0 <_free_r+0x94>
 8007754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007758:	1f0c      	subs	r4, r1, #4
 800775a:	2b00      	cmp	r3, #0
 800775c:	bfb8      	it	lt
 800775e:	18e4      	addlt	r4, r4, r3
 8007760:	f000 fd84 	bl	800826c <__malloc_lock>
 8007764:	4a1f      	ldr	r2, [pc, #124]	; (80077e4 <_free_r+0x98>)
 8007766:	6813      	ldr	r3, [r2, #0]
 8007768:	4610      	mov	r0, r2
 800776a:	b933      	cbnz	r3, 800777a <_free_r+0x2e>
 800776c:	6063      	str	r3, [r4, #4]
 800776e:	6014      	str	r4, [r2, #0]
 8007770:	4628      	mov	r0, r5
 8007772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007776:	f000 bd7a 	b.w	800826e <__malloc_unlock>
 800777a:	42a3      	cmp	r3, r4
 800777c:	d90c      	bls.n	8007798 <_free_r+0x4c>
 800777e:	6821      	ldr	r1, [r4, #0]
 8007780:	1862      	adds	r2, r4, r1
 8007782:	4293      	cmp	r3, r2
 8007784:	bf04      	itt	eq
 8007786:	681a      	ldreq	r2, [r3, #0]
 8007788:	685b      	ldreq	r3, [r3, #4]
 800778a:	6063      	str	r3, [r4, #4]
 800778c:	bf04      	itt	eq
 800778e:	1852      	addeq	r2, r2, r1
 8007790:	6022      	streq	r2, [r4, #0]
 8007792:	6004      	str	r4, [r0, #0]
 8007794:	e7ec      	b.n	8007770 <_free_r+0x24>
 8007796:	4613      	mov	r3, r2
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	b10a      	cbz	r2, 80077a0 <_free_r+0x54>
 800779c:	42a2      	cmp	r2, r4
 800779e:	d9fa      	bls.n	8007796 <_free_r+0x4a>
 80077a0:	6819      	ldr	r1, [r3, #0]
 80077a2:	1858      	adds	r0, r3, r1
 80077a4:	42a0      	cmp	r0, r4
 80077a6:	d10b      	bne.n	80077c0 <_free_r+0x74>
 80077a8:	6820      	ldr	r0, [r4, #0]
 80077aa:	4401      	add	r1, r0
 80077ac:	1858      	adds	r0, r3, r1
 80077ae:	4282      	cmp	r2, r0
 80077b0:	6019      	str	r1, [r3, #0]
 80077b2:	d1dd      	bne.n	8007770 <_free_r+0x24>
 80077b4:	6810      	ldr	r0, [r2, #0]
 80077b6:	6852      	ldr	r2, [r2, #4]
 80077b8:	605a      	str	r2, [r3, #4]
 80077ba:	4401      	add	r1, r0
 80077bc:	6019      	str	r1, [r3, #0]
 80077be:	e7d7      	b.n	8007770 <_free_r+0x24>
 80077c0:	d902      	bls.n	80077c8 <_free_r+0x7c>
 80077c2:	230c      	movs	r3, #12
 80077c4:	602b      	str	r3, [r5, #0]
 80077c6:	e7d3      	b.n	8007770 <_free_r+0x24>
 80077c8:	6820      	ldr	r0, [r4, #0]
 80077ca:	1821      	adds	r1, r4, r0
 80077cc:	428a      	cmp	r2, r1
 80077ce:	bf04      	itt	eq
 80077d0:	6811      	ldreq	r1, [r2, #0]
 80077d2:	6852      	ldreq	r2, [r2, #4]
 80077d4:	6062      	str	r2, [r4, #4]
 80077d6:	bf04      	itt	eq
 80077d8:	1809      	addeq	r1, r1, r0
 80077da:	6021      	streq	r1, [r4, #0]
 80077dc:	605c      	str	r4, [r3, #4]
 80077de:	e7c7      	b.n	8007770 <_free_r+0x24>
 80077e0:	bd38      	pop	{r3, r4, r5, pc}
 80077e2:	bf00      	nop
 80077e4:	200000d0 	.word	0x200000d0

080077e8 <_malloc_r>:
 80077e8:	b570      	push	{r4, r5, r6, lr}
 80077ea:	1ccd      	adds	r5, r1, #3
 80077ec:	f025 0503 	bic.w	r5, r5, #3
 80077f0:	3508      	adds	r5, #8
 80077f2:	2d0c      	cmp	r5, #12
 80077f4:	bf38      	it	cc
 80077f6:	250c      	movcc	r5, #12
 80077f8:	2d00      	cmp	r5, #0
 80077fa:	4606      	mov	r6, r0
 80077fc:	db01      	blt.n	8007802 <_malloc_r+0x1a>
 80077fe:	42a9      	cmp	r1, r5
 8007800:	d903      	bls.n	800780a <_malloc_r+0x22>
 8007802:	230c      	movs	r3, #12
 8007804:	6033      	str	r3, [r6, #0]
 8007806:	2000      	movs	r0, #0
 8007808:	bd70      	pop	{r4, r5, r6, pc}
 800780a:	f000 fd2f 	bl	800826c <__malloc_lock>
 800780e:	4a21      	ldr	r2, [pc, #132]	; (8007894 <_malloc_r+0xac>)
 8007810:	6814      	ldr	r4, [r2, #0]
 8007812:	4621      	mov	r1, r4
 8007814:	b991      	cbnz	r1, 800783c <_malloc_r+0x54>
 8007816:	4c20      	ldr	r4, [pc, #128]	; (8007898 <_malloc_r+0xb0>)
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	b91b      	cbnz	r3, 8007824 <_malloc_r+0x3c>
 800781c:	4630      	mov	r0, r6
 800781e:	f000 fc57 	bl	80080d0 <_sbrk_r>
 8007822:	6020      	str	r0, [r4, #0]
 8007824:	4629      	mov	r1, r5
 8007826:	4630      	mov	r0, r6
 8007828:	f000 fc52 	bl	80080d0 <_sbrk_r>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	d124      	bne.n	800787a <_malloc_r+0x92>
 8007830:	230c      	movs	r3, #12
 8007832:	6033      	str	r3, [r6, #0]
 8007834:	4630      	mov	r0, r6
 8007836:	f000 fd1a 	bl	800826e <__malloc_unlock>
 800783a:	e7e4      	b.n	8007806 <_malloc_r+0x1e>
 800783c:	680b      	ldr	r3, [r1, #0]
 800783e:	1b5b      	subs	r3, r3, r5
 8007840:	d418      	bmi.n	8007874 <_malloc_r+0x8c>
 8007842:	2b0b      	cmp	r3, #11
 8007844:	d90f      	bls.n	8007866 <_malloc_r+0x7e>
 8007846:	600b      	str	r3, [r1, #0]
 8007848:	50cd      	str	r5, [r1, r3]
 800784a:	18cc      	adds	r4, r1, r3
 800784c:	4630      	mov	r0, r6
 800784e:	f000 fd0e 	bl	800826e <__malloc_unlock>
 8007852:	f104 000b 	add.w	r0, r4, #11
 8007856:	1d23      	adds	r3, r4, #4
 8007858:	f020 0007 	bic.w	r0, r0, #7
 800785c:	1ac3      	subs	r3, r0, r3
 800785e:	d0d3      	beq.n	8007808 <_malloc_r+0x20>
 8007860:	425a      	negs	r2, r3
 8007862:	50e2      	str	r2, [r4, r3]
 8007864:	e7d0      	b.n	8007808 <_malloc_r+0x20>
 8007866:	428c      	cmp	r4, r1
 8007868:	684b      	ldr	r3, [r1, #4]
 800786a:	bf16      	itet	ne
 800786c:	6063      	strne	r3, [r4, #4]
 800786e:	6013      	streq	r3, [r2, #0]
 8007870:	460c      	movne	r4, r1
 8007872:	e7eb      	b.n	800784c <_malloc_r+0x64>
 8007874:	460c      	mov	r4, r1
 8007876:	6849      	ldr	r1, [r1, #4]
 8007878:	e7cc      	b.n	8007814 <_malloc_r+0x2c>
 800787a:	1cc4      	adds	r4, r0, #3
 800787c:	f024 0403 	bic.w	r4, r4, #3
 8007880:	42a0      	cmp	r0, r4
 8007882:	d005      	beq.n	8007890 <_malloc_r+0xa8>
 8007884:	1a21      	subs	r1, r4, r0
 8007886:	4630      	mov	r0, r6
 8007888:	f000 fc22 	bl	80080d0 <_sbrk_r>
 800788c:	3001      	adds	r0, #1
 800788e:	d0cf      	beq.n	8007830 <_malloc_r+0x48>
 8007890:	6025      	str	r5, [r4, #0]
 8007892:	e7db      	b.n	800784c <_malloc_r+0x64>
 8007894:	200000d0 	.word	0x200000d0
 8007898:	200000d4 	.word	0x200000d4

0800789c <__ssputs_r>:
 800789c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a0:	688e      	ldr	r6, [r1, #8]
 80078a2:	429e      	cmp	r6, r3
 80078a4:	4682      	mov	sl, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	4690      	mov	r8, r2
 80078aa:	4699      	mov	r9, r3
 80078ac:	d837      	bhi.n	800791e <__ssputs_r+0x82>
 80078ae:	898a      	ldrh	r2, [r1, #12]
 80078b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078b4:	d031      	beq.n	800791a <__ssputs_r+0x7e>
 80078b6:	6825      	ldr	r5, [r4, #0]
 80078b8:	6909      	ldr	r1, [r1, #16]
 80078ba:	1a6f      	subs	r7, r5, r1
 80078bc:	6965      	ldr	r5, [r4, #20]
 80078be:	2302      	movs	r3, #2
 80078c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80078c8:	f109 0301 	add.w	r3, r9, #1
 80078cc:	443b      	add	r3, r7
 80078ce:	429d      	cmp	r5, r3
 80078d0:	bf38      	it	cc
 80078d2:	461d      	movcc	r5, r3
 80078d4:	0553      	lsls	r3, r2, #21
 80078d6:	d530      	bpl.n	800793a <__ssputs_r+0x9e>
 80078d8:	4629      	mov	r1, r5
 80078da:	f7ff ff85 	bl	80077e8 <_malloc_r>
 80078de:	4606      	mov	r6, r0
 80078e0:	b950      	cbnz	r0, 80078f8 <__ssputs_r+0x5c>
 80078e2:	230c      	movs	r3, #12
 80078e4:	f8ca 3000 	str.w	r3, [sl]
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	f04f 30ff 	mov.w	r0, #4294967295
 80078f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f8:	463a      	mov	r2, r7
 80078fa:	6921      	ldr	r1, [r4, #16]
 80078fc:	f000 fc92 	bl	8008224 <memcpy>
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790a:	81a3      	strh	r3, [r4, #12]
 800790c:	6126      	str	r6, [r4, #16]
 800790e:	6165      	str	r5, [r4, #20]
 8007910:	443e      	add	r6, r7
 8007912:	1bed      	subs	r5, r5, r7
 8007914:	6026      	str	r6, [r4, #0]
 8007916:	60a5      	str	r5, [r4, #8]
 8007918:	464e      	mov	r6, r9
 800791a:	454e      	cmp	r6, r9
 800791c:	d900      	bls.n	8007920 <__ssputs_r+0x84>
 800791e:	464e      	mov	r6, r9
 8007920:	4632      	mov	r2, r6
 8007922:	4641      	mov	r1, r8
 8007924:	6820      	ldr	r0, [r4, #0]
 8007926:	f000 fc88 	bl	800823a <memmove>
 800792a:	68a3      	ldr	r3, [r4, #8]
 800792c:	1b9b      	subs	r3, r3, r6
 800792e:	60a3      	str	r3, [r4, #8]
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	441e      	add	r6, r3
 8007934:	6026      	str	r6, [r4, #0]
 8007936:	2000      	movs	r0, #0
 8007938:	e7dc      	b.n	80078f4 <__ssputs_r+0x58>
 800793a:	462a      	mov	r2, r5
 800793c:	f000 fc98 	bl	8008270 <_realloc_r>
 8007940:	4606      	mov	r6, r0
 8007942:	2800      	cmp	r0, #0
 8007944:	d1e2      	bne.n	800790c <__ssputs_r+0x70>
 8007946:	6921      	ldr	r1, [r4, #16]
 8007948:	4650      	mov	r0, sl
 800794a:	f7ff feff 	bl	800774c <_free_r>
 800794e:	e7c8      	b.n	80078e2 <__ssputs_r+0x46>

08007950 <_svfiprintf_r>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	461d      	mov	r5, r3
 8007956:	898b      	ldrh	r3, [r1, #12]
 8007958:	061f      	lsls	r7, r3, #24
 800795a:	b09d      	sub	sp, #116	; 0x74
 800795c:	4680      	mov	r8, r0
 800795e:	460c      	mov	r4, r1
 8007960:	4616      	mov	r6, r2
 8007962:	d50f      	bpl.n	8007984 <_svfiprintf_r+0x34>
 8007964:	690b      	ldr	r3, [r1, #16]
 8007966:	b96b      	cbnz	r3, 8007984 <_svfiprintf_r+0x34>
 8007968:	2140      	movs	r1, #64	; 0x40
 800796a:	f7ff ff3d 	bl	80077e8 <_malloc_r>
 800796e:	6020      	str	r0, [r4, #0]
 8007970:	6120      	str	r0, [r4, #16]
 8007972:	b928      	cbnz	r0, 8007980 <_svfiprintf_r+0x30>
 8007974:	230c      	movs	r3, #12
 8007976:	f8c8 3000 	str.w	r3, [r8]
 800797a:	f04f 30ff 	mov.w	r0, #4294967295
 800797e:	e0c8      	b.n	8007b12 <_svfiprintf_r+0x1c2>
 8007980:	2340      	movs	r3, #64	; 0x40
 8007982:	6163      	str	r3, [r4, #20]
 8007984:	2300      	movs	r3, #0
 8007986:	9309      	str	r3, [sp, #36]	; 0x24
 8007988:	2320      	movs	r3, #32
 800798a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800798e:	2330      	movs	r3, #48	; 0x30
 8007990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007994:	9503      	str	r5, [sp, #12]
 8007996:	f04f 0b01 	mov.w	fp, #1
 800799a:	4637      	mov	r7, r6
 800799c:	463d      	mov	r5, r7
 800799e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80079a2:	b10b      	cbz	r3, 80079a8 <_svfiprintf_r+0x58>
 80079a4:	2b25      	cmp	r3, #37	; 0x25
 80079a6:	d13e      	bne.n	8007a26 <_svfiprintf_r+0xd6>
 80079a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80079ac:	d00b      	beq.n	80079c6 <_svfiprintf_r+0x76>
 80079ae:	4653      	mov	r3, sl
 80079b0:	4632      	mov	r2, r6
 80079b2:	4621      	mov	r1, r4
 80079b4:	4640      	mov	r0, r8
 80079b6:	f7ff ff71 	bl	800789c <__ssputs_r>
 80079ba:	3001      	adds	r0, #1
 80079bc:	f000 80a4 	beq.w	8007b08 <_svfiprintf_r+0x1b8>
 80079c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c2:	4453      	add	r3, sl
 80079c4:	9309      	str	r3, [sp, #36]	; 0x24
 80079c6:	783b      	ldrb	r3, [r7, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 809d 	beq.w	8007b08 <_svfiprintf_r+0x1b8>
 80079ce:	2300      	movs	r3, #0
 80079d0:	f04f 32ff 	mov.w	r2, #4294967295
 80079d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079d8:	9304      	str	r3, [sp, #16]
 80079da:	9307      	str	r3, [sp, #28]
 80079dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079e0:	931a      	str	r3, [sp, #104]	; 0x68
 80079e2:	462f      	mov	r7, r5
 80079e4:	2205      	movs	r2, #5
 80079e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80079ea:	4850      	ldr	r0, [pc, #320]	; (8007b2c <_svfiprintf_r+0x1dc>)
 80079ec:	f7f8 fbf8 	bl	80001e0 <memchr>
 80079f0:	9b04      	ldr	r3, [sp, #16]
 80079f2:	b9d0      	cbnz	r0, 8007a2a <_svfiprintf_r+0xda>
 80079f4:	06d9      	lsls	r1, r3, #27
 80079f6:	bf44      	itt	mi
 80079f8:	2220      	movmi	r2, #32
 80079fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079fe:	071a      	lsls	r2, r3, #28
 8007a00:	bf44      	itt	mi
 8007a02:	222b      	movmi	r2, #43	; 0x2b
 8007a04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a08:	782a      	ldrb	r2, [r5, #0]
 8007a0a:	2a2a      	cmp	r2, #42	; 0x2a
 8007a0c:	d015      	beq.n	8007a3a <_svfiprintf_r+0xea>
 8007a0e:	9a07      	ldr	r2, [sp, #28]
 8007a10:	462f      	mov	r7, r5
 8007a12:	2000      	movs	r0, #0
 8007a14:	250a      	movs	r5, #10
 8007a16:	4639      	mov	r1, r7
 8007a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a1c:	3b30      	subs	r3, #48	; 0x30
 8007a1e:	2b09      	cmp	r3, #9
 8007a20:	d94d      	bls.n	8007abe <_svfiprintf_r+0x16e>
 8007a22:	b1b8      	cbz	r0, 8007a54 <_svfiprintf_r+0x104>
 8007a24:	e00f      	b.n	8007a46 <_svfiprintf_r+0xf6>
 8007a26:	462f      	mov	r7, r5
 8007a28:	e7b8      	b.n	800799c <_svfiprintf_r+0x4c>
 8007a2a:	4a40      	ldr	r2, [pc, #256]	; (8007b2c <_svfiprintf_r+0x1dc>)
 8007a2c:	1a80      	subs	r0, r0, r2
 8007a2e:	fa0b f000 	lsl.w	r0, fp, r0
 8007a32:	4318      	orrs	r0, r3
 8007a34:	9004      	str	r0, [sp, #16]
 8007a36:	463d      	mov	r5, r7
 8007a38:	e7d3      	b.n	80079e2 <_svfiprintf_r+0x92>
 8007a3a:	9a03      	ldr	r2, [sp, #12]
 8007a3c:	1d11      	adds	r1, r2, #4
 8007a3e:	6812      	ldr	r2, [r2, #0]
 8007a40:	9103      	str	r1, [sp, #12]
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	db01      	blt.n	8007a4a <_svfiprintf_r+0xfa>
 8007a46:	9207      	str	r2, [sp, #28]
 8007a48:	e004      	b.n	8007a54 <_svfiprintf_r+0x104>
 8007a4a:	4252      	negs	r2, r2
 8007a4c:	f043 0302 	orr.w	r3, r3, #2
 8007a50:	9207      	str	r2, [sp, #28]
 8007a52:	9304      	str	r3, [sp, #16]
 8007a54:	783b      	ldrb	r3, [r7, #0]
 8007a56:	2b2e      	cmp	r3, #46	; 0x2e
 8007a58:	d10c      	bne.n	8007a74 <_svfiprintf_r+0x124>
 8007a5a:	787b      	ldrb	r3, [r7, #1]
 8007a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a5e:	d133      	bne.n	8007ac8 <_svfiprintf_r+0x178>
 8007a60:	9b03      	ldr	r3, [sp, #12]
 8007a62:	1d1a      	adds	r2, r3, #4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	9203      	str	r2, [sp, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	bfb8      	it	lt
 8007a6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a70:	3702      	adds	r7, #2
 8007a72:	9305      	str	r3, [sp, #20]
 8007a74:	4d2e      	ldr	r5, [pc, #184]	; (8007b30 <_svfiprintf_r+0x1e0>)
 8007a76:	7839      	ldrb	r1, [r7, #0]
 8007a78:	2203      	movs	r2, #3
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f7f8 fbb0 	bl	80001e0 <memchr>
 8007a80:	b138      	cbz	r0, 8007a92 <_svfiprintf_r+0x142>
 8007a82:	2340      	movs	r3, #64	; 0x40
 8007a84:	1b40      	subs	r0, r0, r5
 8007a86:	fa03 f000 	lsl.w	r0, r3, r0
 8007a8a:	9b04      	ldr	r3, [sp, #16]
 8007a8c:	4303      	orrs	r3, r0
 8007a8e:	3701      	adds	r7, #1
 8007a90:	9304      	str	r3, [sp, #16]
 8007a92:	7839      	ldrb	r1, [r7, #0]
 8007a94:	4827      	ldr	r0, [pc, #156]	; (8007b34 <_svfiprintf_r+0x1e4>)
 8007a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a9a:	2206      	movs	r2, #6
 8007a9c:	1c7e      	adds	r6, r7, #1
 8007a9e:	f7f8 fb9f 	bl	80001e0 <memchr>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d038      	beq.n	8007b18 <_svfiprintf_r+0x1c8>
 8007aa6:	4b24      	ldr	r3, [pc, #144]	; (8007b38 <_svfiprintf_r+0x1e8>)
 8007aa8:	bb13      	cbnz	r3, 8007af0 <_svfiprintf_r+0x1a0>
 8007aaa:	9b03      	ldr	r3, [sp, #12]
 8007aac:	3307      	adds	r3, #7
 8007aae:	f023 0307 	bic.w	r3, r3, #7
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	9303      	str	r3, [sp, #12]
 8007ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab8:	444b      	add	r3, r9
 8007aba:	9309      	str	r3, [sp, #36]	; 0x24
 8007abc:	e76d      	b.n	800799a <_svfiprintf_r+0x4a>
 8007abe:	fb05 3202 	mla	r2, r5, r2, r3
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	460f      	mov	r7, r1
 8007ac6:	e7a6      	b.n	8007a16 <_svfiprintf_r+0xc6>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	3701      	adds	r7, #1
 8007acc:	9305      	str	r3, [sp, #20]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	250a      	movs	r5, #10
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ad8:	3a30      	subs	r2, #48	; 0x30
 8007ada:	2a09      	cmp	r2, #9
 8007adc:	d903      	bls.n	8007ae6 <_svfiprintf_r+0x196>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0c8      	beq.n	8007a74 <_svfiprintf_r+0x124>
 8007ae2:	9105      	str	r1, [sp, #20]
 8007ae4:	e7c6      	b.n	8007a74 <_svfiprintf_r+0x124>
 8007ae6:	fb05 2101 	mla	r1, r5, r1, r2
 8007aea:	2301      	movs	r3, #1
 8007aec:	4607      	mov	r7, r0
 8007aee:	e7f0      	b.n	8007ad2 <_svfiprintf_r+0x182>
 8007af0:	ab03      	add	r3, sp, #12
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	4622      	mov	r2, r4
 8007af6:	4b11      	ldr	r3, [pc, #68]	; (8007b3c <_svfiprintf_r+0x1ec>)
 8007af8:	a904      	add	r1, sp, #16
 8007afa:	4640      	mov	r0, r8
 8007afc:	f3af 8000 	nop.w
 8007b00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b04:	4681      	mov	r9, r0
 8007b06:	d1d6      	bne.n	8007ab6 <_svfiprintf_r+0x166>
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	065b      	lsls	r3, r3, #25
 8007b0c:	f53f af35 	bmi.w	800797a <_svfiprintf_r+0x2a>
 8007b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b12:	b01d      	add	sp, #116	; 0x74
 8007b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b18:	ab03      	add	r3, sp, #12
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	4622      	mov	r2, r4
 8007b1e:	4b07      	ldr	r3, [pc, #28]	; (8007b3c <_svfiprintf_r+0x1ec>)
 8007b20:	a904      	add	r1, sp, #16
 8007b22:	4640      	mov	r0, r8
 8007b24:	f000 f9c2 	bl	8007eac <_printf_i>
 8007b28:	e7ea      	b.n	8007b00 <_svfiprintf_r+0x1b0>
 8007b2a:	bf00      	nop
 8007b2c:	080083b8 	.word	0x080083b8
 8007b30:	080083be 	.word	0x080083be
 8007b34:	080083c2 	.word	0x080083c2
 8007b38:	00000000 	.word	0x00000000
 8007b3c:	0800789d 	.word	0x0800789d

08007b40 <__sfputc_r>:
 8007b40:	6893      	ldr	r3, [r2, #8]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	b410      	push	{r4}
 8007b48:	6093      	str	r3, [r2, #8]
 8007b4a:	da08      	bge.n	8007b5e <__sfputc_r+0x1e>
 8007b4c:	6994      	ldr	r4, [r2, #24]
 8007b4e:	42a3      	cmp	r3, r4
 8007b50:	db01      	blt.n	8007b56 <__sfputc_r+0x16>
 8007b52:	290a      	cmp	r1, #10
 8007b54:	d103      	bne.n	8007b5e <__sfputc_r+0x1e>
 8007b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b5a:	f7ff bb59 	b.w	8007210 <__swbuf_r>
 8007b5e:	6813      	ldr	r3, [r2, #0]
 8007b60:	1c58      	adds	r0, r3, #1
 8007b62:	6010      	str	r0, [r2, #0]
 8007b64:	7019      	strb	r1, [r3, #0]
 8007b66:	4608      	mov	r0, r1
 8007b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <__sfputs_r>:
 8007b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b70:	4606      	mov	r6, r0
 8007b72:	460f      	mov	r7, r1
 8007b74:	4614      	mov	r4, r2
 8007b76:	18d5      	adds	r5, r2, r3
 8007b78:	42ac      	cmp	r4, r5
 8007b7a:	d101      	bne.n	8007b80 <__sfputs_r+0x12>
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	e007      	b.n	8007b90 <__sfputs_r+0x22>
 8007b80:	463a      	mov	r2, r7
 8007b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b86:	4630      	mov	r0, r6
 8007b88:	f7ff ffda 	bl	8007b40 <__sfputc_r>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d1f3      	bne.n	8007b78 <__sfputs_r+0xa>
 8007b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b94 <_vfiprintf_r>:
 8007b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b98:	460c      	mov	r4, r1
 8007b9a:	b09d      	sub	sp, #116	; 0x74
 8007b9c:	4617      	mov	r7, r2
 8007b9e:	461d      	mov	r5, r3
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	b118      	cbz	r0, 8007bac <_vfiprintf_r+0x18>
 8007ba4:	6983      	ldr	r3, [r0, #24]
 8007ba6:	b90b      	cbnz	r3, 8007bac <_vfiprintf_r+0x18>
 8007ba8:	f7ff fce2 	bl	8007570 <__sinit>
 8007bac:	4b7c      	ldr	r3, [pc, #496]	; (8007da0 <_vfiprintf_r+0x20c>)
 8007bae:	429c      	cmp	r4, r3
 8007bb0:	d158      	bne.n	8007c64 <_vfiprintf_r+0xd0>
 8007bb2:	6874      	ldr	r4, [r6, #4]
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	0718      	lsls	r0, r3, #28
 8007bb8:	d55e      	bpl.n	8007c78 <_vfiprintf_r+0xe4>
 8007bba:	6923      	ldr	r3, [r4, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d05b      	beq.n	8007c78 <_vfiprintf_r+0xe4>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8007bc4:	2320      	movs	r3, #32
 8007bc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bca:	2330      	movs	r3, #48	; 0x30
 8007bcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bd0:	9503      	str	r5, [sp, #12]
 8007bd2:	f04f 0b01 	mov.w	fp, #1
 8007bd6:	46b8      	mov	r8, r7
 8007bd8:	4645      	mov	r5, r8
 8007bda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007bde:	b10b      	cbz	r3, 8007be4 <_vfiprintf_r+0x50>
 8007be0:	2b25      	cmp	r3, #37	; 0x25
 8007be2:	d154      	bne.n	8007c8e <_vfiprintf_r+0xfa>
 8007be4:	ebb8 0a07 	subs.w	sl, r8, r7
 8007be8:	d00b      	beq.n	8007c02 <_vfiprintf_r+0x6e>
 8007bea:	4653      	mov	r3, sl
 8007bec:	463a      	mov	r2, r7
 8007bee:	4621      	mov	r1, r4
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f7ff ffbc 	bl	8007b6e <__sfputs_r>
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	f000 80c2 	beq.w	8007d80 <_vfiprintf_r+0x1ec>
 8007bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfe:	4453      	add	r3, sl
 8007c00:	9309      	str	r3, [sp, #36]	; 0x24
 8007c02:	f898 3000 	ldrb.w	r3, [r8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 80ba 	beq.w	8007d80 <_vfiprintf_r+0x1ec>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c16:	9304      	str	r3, [sp, #16]
 8007c18:	9307      	str	r3, [sp, #28]
 8007c1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c1e:	931a      	str	r3, [sp, #104]	; 0x68
 8007c20:	46a8      	mov	r8, r5
 8007c22:	2205      	movs	r2, #5
 8007c24:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007c28:	485e      	ldr	r0, [pc, #376]	; (8007da4 <_vfiprintf_r+0x210>)
 8007c2a:	f7f8 fad9 	bl	80001e0 <memchr>
 8007c2e:	9b04      	ldr	r3, [sp, #16]
 8007c30:	bb78      	cbnz	r0, 8007c92 <_vfiprintf_r+0xfe>
 8007c32:	06d9      	lsls	r1, r3, #27
 8007c34:	bf44      	itt	mi
 8007c36:	2220      	movmi	r2, #32
 8007c38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c3c:	071a      	lsls	r2, r3, #28
 8007c3e:	bf44      	itt	mi
 8007c40:	222b      	movmi	r2, #43	; 0x2b
 8007c42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c46:	782a      	ldrb	r2, [r5, #0]
 8007c48:	2a2a      	cmp	r2, #42	; 0x2a
 8007c4a:	d02a      	beq.n	8007ca2 <_vfiprintf_r+0x10e>
 8007c4c:	9a07      	ldr	r2, [sp, #28]
 8007c4e:	46a8      	mov	r8, r5
 8007c50:	2000      	movs	r0, #0
 8007c52:	250a      	movs	r5, #10
 8007c54:	4641      	mov	r1, r8
 8007c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c5a:	3b30      	subs	r3, #48	; 0x30
 8007c5c:	2b09      	cmp	r3, #9
 8007c5e:	d969      	bls.n	8007d34 <_vfiprintf_r+0x1a0>
 8007c60:	b360      	cbz	r0, 8007cbc <_vfiprintf_r+0x128>
 8007c62:	e024      	b.n	8007cae <_vfiprintf_r+0x11a>
 8007c64:	4b50      	ldr	r3, [pc, #320]	; (8007da8 <_vfiprintf_r+0x214>)
 8007c66:	429c      	cmp	r4, r3
 8007c68:	d101      	bne.n	8007c6e <_vfiprintf_r+0xda>
 8007c6a:	68b4      	ldr	r4, [r6, #8]
 8007c6c:	e7a2      	b.n	8007bb4 <_vfiprintf_r+0x20>
 8007c6e:	4b4f      	ldr	r3, [pc, #316]	; (8007dac <_vfiprintf_r+0x218>)
 8007c70:	429c      	cmp	r4, r3
 8007c72:	bf08      	it	eq
 8007c74:	68f4      	ldreq	r4, [r6, #12]
 8007c76:	e79d      	b.n	8007bb4 <_vfiprintf_r+0x20>
 8007c78:	4621      	mov	r1, r4
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f7ff fb1a 	bl	80072b4 <__swsetup_r>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d09d      	beq.n	8007bc0 <_vfiprintf_r+0x2c>
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295
 8007c88:	b01d      	add	sp, #116	; 0x74
 8007c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c8e:	46a8      	mov	r8, r5
 8007c90:	e7a2      	b.n	8007bd8 <_vfiprintf_r+0x44>
 8007c92:	4a44      	ldr	r2, [pc, #272]	; (8007da4 <_vfiprintf_r+0x210>)
 8007c94:	1a80      	subs	r0, r0, r2
 8007c96:	fa0b f000 	lsl.w	r0, fp, r0
 8007c9a:	4318      	orrs	r0, r3
 8007c9c:	9004      	str	r0, [sp, #16]
 8007c9e:	4645      	mov	r5, r8
 8007ca0:	e7be      	b.n	8007c20 <_vfiprintf_r+0x8c>
 8007ca2:	9a03      	ldr	r2, [sp, #12]
 8007ca4:	1d11      	adds	r1, r2, #4
 8007ca6:	6812      	ldr	r2, [r2, #0]
 8007ca8:	9103      	str	r1, [sp, #12]
 8007caa:	2a00      	cmp	r2, #0
 8007cac:	db01      	blt.n	8007cb2 <_vfiprintf_r+0x11e>
 8007cae:	9207      	str	r2, [sp, #28]
 8007cb0:	e004      	b.n	8007cbc <_vfiprintf_r+0x128>
 8007cb2:	4252      	negs	r2, r2
 8007cb4:	f043 0302 	orr.w	r3, r3, #2
 8007cb8:	9207      	str	r2, [sp, #28]
 8007cba:	9304      	str	r3, [sp, #16]
 8007cbc:	f898 3000 	ldrb.w	r3, [r8]
 8007cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8007cc2:	d10e      	bne.n	8007ce2 <_vfiprintf_r+0x14e>
 8007cc4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cca:	d138      	bne.n	8007d3e <_vfiprintf_r+0x1aa>
 8007ccc:	9b03      	ldr	r3, [sp, #12]
 8007cce:	1d1a      	adds	r2, r3, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	9203      	str	r2, [sp, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	bfb8      	it	lt
 8007cd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cdc:	f108 0802 	add.w	r8, r8, #2
 8007ce0:	9305      	str	r3, [sp, #20]
 8007ce2:	4d33      	ldr	r5, [pc, #204]	; (8007db0 <_vfiprintf_r+0x21c>)
 8007ce4:	f898 1000 	ldrb.w	r1, [r8]
 8007ce8:	2203      	movs	r2, #3
 8007cea:	4628      	mov	r0, r5
 8007cec:	f7f8 fa78 	bl	80001e0 <memchr>
 8007cf0:	b140      	cbz	r0, 8007d04 <_vfiprintf_r+0x170>
 8007cf2:	2340      	movs	r3, #64	; 0x40
 8007cf4:	1b40      	subs	r0, r0, r5
 8007cf6:	fa03 f000 	lsl.w	r0, r3, r0
 8007cfa:	9b04      	ldr	r3, [sp, #16]
 8007cfc:	4303      	orrs	r3, r0
 8007cfe:	f108 0801 	add.w	r8, r8, #1
 8007d02:	9304      	str	r3, [sp, #16]
 8007d04:	f898 1000 	ldrb.w	r1, [r8]
 8007d08:	482a      	ldr	r0, [pc, #168]	; (8007db4 <_vfiprintf_r+0x220>)
 8007d0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d0e:	2206      	movs	r2, #6
 8007d10:	f108 0701 	add.w	r7, r8, #1
 8007d14:	f7f8 fa64 	bl	80001e0 <memchr>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d037      	beq.n	8007d8c <_vfiprintf_r+0x1f8>
 8007d1c:	4b26      	ldr	r3, [pc, #152]	; (8007db8 <_vfiprintf_r+0x224>)
 8007d1e:	bb1b      	cbnz	r3, 8007d68 <_vfiprintf_r+0x1d4>
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	3307      	adds	r3, #7
 8007d24:	f023 0307 	bic.w	r3, r3, #7
 8007d28:	3308      	adds	r3, #8
 8007d2a:	9303      	str	r3, [sp, #12]
 8007d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2e:	444b      	add	r3, r9
 8007d30:	9309      	str	r3, [sp, #36]	; 0x24
 8007d32:	e750      	b.n	8007bd6 <_vfiprintf_r+0x42>
 8007d34:	fb05 3202 	mla	r2, r5, r2, r3
 8007d38:	2001      	movs	r0, #1
 8007d3a:	4688      	mov	r8, r1
 8007d3c:	e78a      	b.n	8007c54 <_vfiprintf_r+0xc0>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f108 0801 	add.w	r8, r8, #1
 8007d44:	9305      	str	r3, [sp, #20]
 8007d46:	4619      	mov	r1, r3
 8007d48:	250a      	movs	r5, #10
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d50:	3a30      	subs	r2, #48	; 0x30
 8007d52:	2a09      	cmp	r2, #9
 8007d54:	d903      	bls.n	8007d5e <_vfiprintf_r+0x1ca>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0c3      	beq.n	8007ce2 <_vfiprintf_r+0x14e>
 8007d5a:	9105      	str	r1, [sp, #20]
 8007d5c:	e7c1      	b.n	8007ce2 <_vfiprintf_r+0x14e>
 8007d5e:	fb05 2101 	mla	r1, r5, r1, r2
 8007d62:	2301      	movs	r3, #1
 8007d64:	4680      	mov	r8, r0
 8007d66:	e7f0      	b.n	8007d4a <_vfiprintf_r+0x1b6>
 8007d68:	ab03      	add	r3, sp, #12
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <_vfiprintf_r+0x228>)
 8007d70:	a904      	add	r1, sp, #16
 8007d72:	4630      	mov	r0, r6
 8007d74:	f3af 8000 	nop.w
 8007d78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d7c:	4681      	mov	r9, r0
 8007d7e:	d1d5      	bne.n	8007d2c <_vfiprintf_r+0x198>
 8007d80:	89a3      	ldrh	r3, [r4, #12]
 8007d82:	065b      	lsls	r3, r3, #25
 8007d84:	f53f af7e 	bmi.w	8007c84 <_vfiprintf_r+0xf0>
 8007d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d8a:	e77d      	b.n	8007c88 <_vfiprintf_r+0xf4>
 8007d8c:	ab03      	add	r3, sp, #12
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	4622      	mov	r2, r4
 8007d92:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <_vfiprintf_r+0x228>)
 8007d94:	a904      	add	r1, sp, #16
 8007d96:	4630      	mov	r0, r6
 8007d98:	f000 f888 	bl	8007eac <_printf_i>
 8007d9c:	e7ec      	b.n	8007d78 <_vfiprintf_r+0x1e4>
 8007d9e:	bf00      	nop
 8007da0:	08008378 	.word	0x08008378
 8007da4:	080083b8 	.word	0x080083b8
 8007da8:	08008398 	.word	0x08008398
 8007dac:	08008358 	.word	0x08008358
 8007db0:	080083be 	.word	0x080083be
 8007db4:	080083c2 	.word	0x080083c2
 8007db8:	00000000 	.word	0x00000000
 8007dbc:	08007b6f 	.word	0x08007b6f

08007dc0 <_printf_common>:
 8007dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc4:	4691      	mov	r9, r2
 8007dc6:	461f      	mov	r7, r3
 8007dc8:	688a      	ldr	r2, [r1, #8]
 8007dca:	690b      	ldr	r3, [r1, #16]
 8007dcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	bfb8      	it	lt
 8007dd4:	4613      	movlt	r3, r2
 8007dd6:	f8c9 3000 	str.w	r3, [r9]
 8007dda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dde:	4606      	mov	r6, r0
 8007de0:	460c      	mov	r4, r1
 8007de2:	b112      	cbz	r2, 8007dea <_printf_common+0x2a>
 8007de4:	3301      	adds	r3, #1
 8007de6:	f8c9 3000 	str.w	r3, [r9]
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	0699      	lsls	r1, r3, #26
 8007dee:	bf42      	ittt	mi
 8007df0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007df4:	3302      	addmi	r3, #2
 8007df6:	f8c9 3000 	strmi.w	r3, [r9]
 8007dfa:	6825      	ldr	r5, [r4, #0]
 8007dfc:	f015 0506 	ands.w	r5, r5, #6
 8007e00:	d107      	bne.n	8007e12 <_printf_common+0x52>
 8007e02:	f104 0a19 	add.w	sl, r4, #25
 8007e06:	68e3      	ldr	r3, [r4, #12]
 8007e08:	f8d9 2000 	ldr.w	r2, [r9]
 8007e0c:	1a9b      	subs	r3, r3, r2
 8007e0e:	42ab      	cmp	r3, r5
 8007e10:	dc28      	bgt.n	8007e64 <_printf_common+0xa4>
 8007e12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e16:	6822      	ldr	r2, [r4, #0]
 8007e18:	3300      	adds	r3, #0
 8007e1a:	bf18      	it	ne
 8007e1c:	2301      	movne	r3, #1
 8007e1e:	0692      	lsls	r2, r2, #26
 8007e20:	d42d      	bmi.n	8007e7e <_printf_common+0xbe>
 8007e22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e26:	4639      	mov	r1, r7
 8007e28:	4630      	mov	r0, r6
 8007e2a:	47c0      	blx	r8
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d020      	beq.n	8007e72 <_printf_common+0xb2>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	68e5      	ldr	r5, [r4, #12]
 8007e34:	f8d9 2000 	ldr.w	r2, [r9]
 8007e38:	f003 0306 	and.w	r3, r3, #6
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	bf08      	it	eq
 8007e40:	1aad      	subeq	r5, r5, r2
 8007e42:	68a3      	ldr	r3, [r4, #8]
 8007e44:	6922      	ldr	r2, [r4, #16]
 8007e46:	bf0c      	ite	eq
 8007e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e4c:	2500      	movne	r5, #0
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	bfc4      	itt	gt
 8007e52:	1a9b      	subgt	r3, r3, r2
 8007e54:	18ed      	addgt	r5, r5, r3
 8007e56:	f04f 0900 	mov.w	r9, #0
 8007e5a:	341a      	adds	r4, #26
 8007e5c:	454d      	cmp	r5, r9
 8007e5e:	d11a      	bne.n	8007e96 <_printf_common+0xd6>
 8007e60:	2000      	movs	r0, #0
 8007e62:	e008      	b.n	8007e76 <_printf_common+0xb6>
 8007e64:	2301      	movs	r3, #1
 8007e66:	4652      	mov	r2, sl
 8007e68:	4639      	mov	r1, r7
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	47c0      	blx	r8
 8007e6e:	3001      	adds	r0, #1
 8007e70:	d103      	bne.n	8007e7a <_printf_common+0xba>
 8007e72:	f04f 30ff 	mov.w	r0, #4294967295
 8007e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7a:	3501      	adds	r5, #1
 8007e7c:	e7c3      	b.n	8007e06 <_printf_common+0x46>
 8007e7e:	18e1      	adds	r1, r4, r3
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	2030      	movs	r0, #48	; 0x30
 8007e84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e88:	4422      	add	r2, r4
 8007e8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e92:	3302      	adds	r3, #2
 8007e94:	e7c5      	b.n	8007e22 <_printf_common+0x62>
 8007e96:	2301      	movs	r3, #1
 8007e98:	4622      	mov	r2, r4
 8007e9a:	4639      	mov	r1, r7
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	47c0      	blx	r8
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d0e6      	beq.n	8007e72 <_printf_common+0xb2>
 8007ea4:	f109 0901 	add.w	r9, r9, #1
 8007ea8:	e7d8      	b.n	8007e5c <_printf_common+0x9c>
	...

08007eac <_printf_i>:
 8007eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007eb0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	7e09      	ldrb	r1, [r1, #24]
 8007eb8:	b085      	sub	sp, #20
 8007eba:	296e      	cmp	r1, #110	; 0x6e
 8007ebc:	4617      	mov	r7, r2
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	4698      	mov	r8, r3
 8007ec2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ec4:	f000 80b3 	beq.w	800802e <_printf_i+0x182>
 8007ec8:	d822      	bhi.n	8007f10 <_printf_i+0x64>
 8007eca:	2963      	cmp	r1, #99	; 0x63
 8007ecc:	d036      	beq.n	8007f3c <_printf_i+0x90>
 8007ece:	d80a      	bhi.n	8007ee6 <_printf_i+0x3a>
 8007ed0:	2900      	cmp	r1, #0
 8007ed2:	f000 80b9 	beq.w	8008048 <_printf_i+0x19c>
 8007ed6:	2958      	cmp	r1, #88	; 0x58
 8007ed8:	f000 8083 	beq.w	8007fe2 <_printf_i+0x136>
 8007edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ee0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007ee4:	e032      	b.n	8007f4c <_printf_i+0xa0>
 8007ee6:	2964      	cmp	r1, #100	; 0x64
 8007ee8:	d001      	beq.n	8007eee <_printf_i+0x42>
 8007eea:	2969      	cmp	r1, #105	; 0x69
 8007eec:	d1f6      	bne.n	8007edc <_printf_i+0x30>
 8007eee:	6820      	ldr	r0, [r4, #0]
 8007ef0:	6813      	ldr	r3, [r2, #0]
 8007ef2:	0605      	lsls	r5, r0, #24
 8007ef4:	f103 0104 	add.w	r1, r3, #4
 8007ef8:	d52a      	bpl.n	8007f50 <_printf_i+0xa4>
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6011      	str	r1, [r2, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	da03      	bge.n	8007f0a <_printf_i+0x5e>
 8007f02:	222d      	movs	r2, #45	; 0x2d
 8007f04:	425b      	negs	r3, r3
 8007f06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f0a:	486f      	ldr	r0, [pc, #444]	; (80080c8 <_printf_i+0x21c>)
 8007f0c:	220a      	movs	r2, #10
 8007f0e:	e039      	b.n	8007f84 <_printf_i+0xd8>
 8007f10:	2973      	cmp	r1, #115	; 0x73
 8007f12:	f000 809d 	beq.w	8008050 <_printf_i+0x1a4>
 8007f16:	d808      	bhi.n	8007f2a <_printf_i+0x7e>
 8007f18:	296f      	cmp	r1, #111	; 0x6f
 8007f1a:	d020      	beq.n	8007f5e <_printf_i+0xb2>
 8007f1c:	2970      	cmp	r1, #112	; 0x70
 8007f1e:	d1dd      	bne.n	8007edc <_printf_i+0x30>
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	f043 0320 	orr.w	r3, r3, #32
 8007f26:	6023      	str	r3, [r4, #0]
 8007f28:	e003      	b.n	8007f32 <_printf_i+0x86>
 8007f2a:	2975      	cmp	r1, #117	; 0x75
 8007f2c:	d017      	beq.n	8007f5e <_printf_i+0xb2>
 8007f2e:	2978      	cmp	r1, #120	; 0x78
 8007f30:	d1d4      	bne.n	8007edc <_printf_i+0x30>
 8007f32:	2378      	movs	r3, #120	; 0x78
 8007f34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f38:	4864      	ldr	r0, [pc, #400]	; (80080cc <_printf_i+0x220>)
 8007f3a:	e055      	b.n	8007fe8 <_printf_i+0x13c>
 8007f3c:	6813      	ldr	r3, [r2, #0]
 8007f3e:	1d19      	adds	r1, r3, #4
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6011      	str	r1, [r2, #0]
 8007f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e08c      	b.n	800806a <_printf_i+0x1be>
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6011      	str	r1, [r2, #0]
 8007f54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f58:	bf18      	it	ne
 8007f5a:	b21b      	sxthne	r3, r3
 8007f5c:	e7cf      	b.n	8007efe <_printf_i+0x52>
 8007f5e:	6813      	ldr	r3, [r2, #0]
 8007f60:	6825      	ldr	r5, [r4, #0]
 8007f62:	1d18      	adds	r0, r3, #4
 8007f64:	6010      	str	r0, [r2, #0]
 8007f66:	0628      	lsls	r0, r5, #24
 8007f68:	d501      	bpl.n	8007f6e <_printf_i+0xc2>
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	e002      	b.n	8007f74 <_printf_i+0xc8>
 8007f6e:	0668      	lsls	r0, r5, #25
 8007f70:	d5fb      	bpl.n	8007f6a <_printf_i+0xbe>
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	4854      	ldr	r0, [pc, #336]	; (80080c8 <_printf_i+0x21c>)
 8007f76:	296f      	cmp	r1, #111	; 0x6f
 8007f78:	bf14      	ite	ne
 8007f7a:	220a      	movne	r2, #10
 8007f7c:	2208      	moveq	r2, #8
 8007f7e:	2100      	movs	r1, #0
 8007f80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f84:	6865      	ldr	r5, [r4, #4]
 8007f86:	60a5      	str	r5, [r4, #8]
 8007f88:	2d00      	cmp	r5, #0
 8007f8a:	f2c0 8095 	blt.w	80080b8 <_printf_i+0x20c>
 8007f8e:	6821      	ldr	r1, [r4, #0]
 8007f90:	f021 0104 	bic.w	r1, r1, #4
 8007f94:	6021      	str	r1, [r4, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d13d      	bne.n	8008016 <_printf_i+0x16a>
 8007f9a:	2d00      	cmp	r5, #0
 8007f9c:	f040 808e 	bne.w	80080bc <_printf_i+0x210>
 8007fa0:	4665      	mov	r5, ip
 8007fa2:	2a08      	cmp	r2, #8
 8007fa4:	d10b      	bne.n	8007fbe <_printf_i+0x112>
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	07db      	lsls	r3, r3, #31
 8007faa:	d508      	bpl.n	8007fbe <_printf_i+0x112>
 8007fac:	6923      	ldr	r3, [r4, #16]
 8007fae:	6862      	ldr	r2, [r4, #4]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	bfde      	ittt	le
 8007fb4:	2330      	movle	r3, #48	; 0x30
 8007fb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fbe:	ebac 0305 	sub.w	r3, ip, r5
 8007fc2:	6123      	str	r3, [r4, #16]
 8007fc4:	f8cd 8000 	str.w	r8, [sp]
 8007fc8:	463b      	mov	r3, r7
 8007fca:	aa03      	add	r2, sp, #12
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f7ff fef6 	bl	8007dc0 <_printf_common>
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	d14d      	bne.n	8008074 <_printf_i+0x1c8>
 8007fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fdc:	b005      	add	sp, #20
 8007fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fe2:	4839      	ldr	r0, [pc, #228]	; (80080c8 <_printf_i+0x21c>)
 8007fe4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007fe8:	6813      	ldr	r3, [r2, #0]
 8007fea:	6821      	ldr	r1, [r4, #0]
 8007fec:	1d1d      	adds	r5, r3, #4
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6015      	str	r5, [r2, #0]
 8007ff2:	060a      	lsls	r2, r1, #24
 8007ff4:	d50b      	bpl.n	800800e <_printf_i+0x162>
 8007ff6:	07ca      	lsls	r2, r1, #31
 8007ff8:	bf44      	itt	mi
 8007ffa:	f041 0120 	orrmi.w	r1, r1, #32
 8007ffe:	6021      	strmi	r1, [r4, #0]
 8008000:	b91b      	cbnz	r3, 800800a <_printf_i+0x15e>
 8008002:	6822      	ldr	r2, [r4, #0]
 8008004:	f022 0220 	bic.w	r2, r2, #32
 8008008:	6022      	str	r2, [r4, #0]
 800800a:	2210      	movs	r2, #16
 800800c:	e7b7      	b.n	8007f7e <_printf_i+0xd2>
 800800e:	064d      	lsls	r5, r1, #25
 8008010:	bf48      	it	mi
 8008012:	b29b      	uxthmi	r3, r3
 8008014:	e7ef      	b.n	8007ff6 <_printf_i+0x14a>
 8008016:	4665      	mov	r5, ip
 8008018:	fbb3 f1f2 	udiv	r1, r3, r2
 800801c:	fb02 3311 	mls	r3, r2, r1, r3
 8008020:	5cc3      	ldrb	r3, [r0, r3]
 8008022:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008026:	460b      	mov	r3, r1
 8008028:	2900      	cmp	r1, #0
 800802a:	d1f5      	bne.n	8008018 <_printf_i+0x16c>
 800802c:	e7b9      	b.n	8007fa2 <_printf_i+0xf6>
 800802e:	6813      	ldr	r3, [r2, #0]
 8008030:	6825      	ldr	r5, [r4, #0]
 8008032:	6961      	ldr	r1, [r4, #20]
 8008034:	1d18      	adds	r0, r3, #4
 8008036:	6010      	str	r0, [r2, #0]
 8008038:	0628      	lsls	r0, r5, #24
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	d501      	bpl.n	8008042 <_printf_i+0x196>
 800803e:	6019      	str	r1, [r3, #0]
 8008040:	e002      	b.n	8008048 <_printf_i+0x19c>
 8008042:	066a      	lsls	r2, r5, #25
 8008044:	d5fb      	bpl.n	800803e <_printf_i+0x192>
 8008046:	8019      	strh	r1, [r3, #0]
 8008048:	2300      	movs	r3, #0
 800804a:	6123      	str	r3, [r4, #16]
 800804c:	4665      	mov	r5, ip
 800804e:	e7b9      	b.n	8007fc4 <_printf_i+0x118>
 8008050:	6813      	ldr	r3, [r2, #0]
 8008052:	1d19      	adds	r1, r3, #4
 8008054:	6011      	str	r1, [r2, #0]
 8008056:	681d      	ldr	r5, [r3, #0]
 8008058:	6862      	ldr	r2, [r4, #4]
 800805a:	2100      	movs	r1, #0
 800805c:	4628      	mov	r0, r5
 800805e:	f7f8 f8bf 	bl	80001e0 <memchr>
 8008062:	b108      	cbz	r0, 8008068 <_printf_i+0x1bc>
 8008064:	1b40      	subs	r0, r0, r5
 8008066:	6060      	str	r0, [r4, #4]
 8008068:	6863      	ldr	r3, [r4, #4]
 800806a:	6123      	str	r3, [r4, #16]
 800806c:	2300      	movs	r3, #0
 800806e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008072:	e7a7      	b.n	8007fc4 <_printf_i+0x118>
 8008074:	6923      	ldr	r3, [r4, #16]
 8008076:	462a      	mov	r2, r5
 8008078:	4639      	mov	r1, r7
 800807a:	4630      	mov	r0, r6
 800807c:	47c0      	blx	r8
 800807e:	3001      	adds	r0, #1
 8008080:	d0aa      	beq.n	8007fd8 <_printf_i+0x12c>
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	079b      	lsls	r3, r3, #30
 8008086:	d413      	bmi.n	80080b0 <_printf_i+0x204>
 8008088:	68e0      	ldr	r0, [r4, #12]
 800808a:	9b03      	ldr	r3, [sp, #12]
 800808c:	4298      	cmp	r0, r3
 800808e:	bfb8      	it	lt
 8008090:	4618      	movlt	r0, r3
 8008092:	e7a3      	b.n	8007fdc <_printf_i+0x130>
 8008094:	2301      	movs	r3, #1
 8008096:	464a      	mov	r2, r9
 8008098:	4639      	mov	r1, r7
 800809a:	4630      	mov	r0, r6
 800809c:	47c0      	blx	r8
 800809e:	3001      	adds	r0, #1
 80080a0:	d09a      	beq.n	8007fd8 <_printf_i+0x12c>
 80080a2:	3501      	adds	r5, #1
 80080a4:	68e3      	ldr	r3, [r4, #12]
 80080a6:	9a03      	ldr	r2, [sp, #12]
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	42ab      	cmp	r3, r5
 80080ac:	dcf2      	bgt.n	8008094 <_printf_i+0x1e8>
 80080ae:	e7eb      	b.n	8008088 <_printf_i+0x1dc>
 80080b0:	2500      	movs	r5, #0
 80080b2:	f104 0919 	add.w	r9, r4, #25
 80080b6:	e7f5      	b.n	80080a4 <_printf_i+0x1f8>
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1ac      	bne.n	8008016 <_printf_i+0x16a>
 80080bc:	7803      	ldrb	r3, [r0, #0]
 80080be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080c6:	e76c      	b.n	8007fa2 <_printf_i+0xf6>
 80080c8:	080083c9 	.word	0x080083c9
 80080cc:	080083da 	.word	0x080083da

080080d0 <_sbrk_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4c06      	ldr	r4, [pc, #24]	; (80080ec <_sbrk_r+0x1c>)
 80080d4:	2300      	movs	r3, #0
 80080d6:	4605      	mov	r5, r0
 80080d8:	4608      	mov	r0, r1
 80080da:	6023      	str	r3, [r4, #0]
 80080dc:	f7fb fd88 	bl	8003bf0 <_sbrk>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_sbrk_r+0x1a>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_sbrk_r+0x1a>
 80080e8:	602b      	str	r3, [r5, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	20008308 	.word	0x20008308

080080f0 <__sread>:
 80080f0:	b510      	push	{r4, lr}
 80080f2:	460c      	mov	r4, r1
 80080f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f8:	f000 f8e0 	bl	80082bc <_read_r>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	bfab      	itete	ge
 8008100:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008102:	89a3      	ldrhlt	r3, [r4, #12]
 8008104:	181b      	addge	r3, r3, r0
 8008106:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800810a:	bfac      	ite	ge
 800810c:	6563      	strge	r3, [r4, #84]	; 0x54
 800810e:	81a3      	strhlt	r3, [r4, #12]
 8008110:	bd10      	pop	{r4, pc}

08008112 <__swrite>:
 8008112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008116:	461f      	mov	r7, r3
 8008118:	898b      	ldrh	r3, [r1, #12]
 800811a:	05db      	lsls	r3, r3, #23
 800811c:	4605      	mov	r5, r0
 800811e:	460c      	mov	r4, r1
 8008120:	4616      	mov	r6, r2
 8008122:	d505      	bpl.n	8008130 <__swrite+0x1e>
 8008124:	2302      	movs	r3, #2
 8008126:	2200      	movs	r2, #0
 8008128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800812c:	f000 f868 	bl	8008200 <_lseek_r>
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800813a:	81a3      	strh	r3, [r4, #12]
 800813c:	4632      	mov	r2, r6
 800813e:	463b      	mov	r3, r7
 8008140:	4628      	mov	r0, r5
 8008142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008146:	f000 b817 	b.w	8008178 <_write_r>

0800814a <__sseek>:
 800814a:	b510      	push	{r4, lr}
 800814c:	460c      	mov	r4, r1
 800814e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008152:	f000 f855 	bl	8008200 <_lseek_r>
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	bf15      	itete	ne
 800815c:	6560      	strne	r0, [r4, #84]	; 0x54
 800815e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008162:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008166:	81a3      	strheq	r3, [r4, #12]
 8008168:	bf18      	it	ne
 800816a:	81a3      	strhne	r3, [r4, #12]
 800816c:	bd10      	pop	{r4, pc}

0800816e <__sclose>:
 800816e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008172:	f000 b813 	b.w	800819c <_close_r>
	...

08008178 <_write_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4c07      	ldr	r4, [pc, #28]	; (8008198 <_write_r+0x20>)
 800817c:	4605      	mov	r5, r0
 800817e:	4608      	mov	r0, r1
 8008180:	4611      	mov	r1, r2
 8008182:	2200      	movs	r2, #0
 8008184:	6022      	str	r2, [r4, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	f7fb fce1 	bl	8003b4e <_write>
 800818c:	1c43      	adds	r3, r0, #1
 800818e:	d102      	bne.n	8008196 <_write_r+0x1e>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	b103      	cbz	r3, 8008196 <_write_r+0x1e>
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	20008308 	.word	0x20008308

0800819c <_close_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4c06      	ldr	r4, [pc, #24]	; (80081b8 <_close_r+0x1c>)
 80081a0:	2300      	movs	r3, #0
 80081a2:	4605      	mov	r5, r0
 80081a4:	4608      	mov	r0, r1
 80081a6:	6023      	str	r3, [r4, #0]
 80081a8:	f7fb fced 	bl	8003b86 <_close>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_close_r+0x1a>
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_close_r+0x1a>
 80081b4:	602b      	str	r3, [r5, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	20008308 	.word	0x20008308

080081bc <_fstat_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4c07      	ldr	r4, [pc, #28]	; (80081dc <_fstat_r+0x20>)
 80081c0:	2300      	movs	r3, #0
 80081c2:	4605      	mov	r5, r0
 80081c4:	4608      	mov	r0, r1
 80081c6:	4611      	mov	r1, r2
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	f7fb fce8 	bl	8003b9e <_fstat>
 80081ce:	1c43      	adds	r3, r0, #1
 80081d0:	d102      	bne.n	80081d8 <_fstat_r+0x1c>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	b103      	cbz	r3, 80081d8 <_fstat_r+0x1c>
 80081d6:	602b      	str	r3, [r5, #0]
 80081d8:	bd38      	pop	{r3, r4, r5, pc}
 80081da:	bf00      	nop
 80081dc:	20008308 	.word	0x20008308

080081e0 <_isatty_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4c06      	ldr	r4, [pc, #24]	; (80081fc <_isatty_r+0x1c>)
 80081e4:	2300      	movs	r3, #0
 80081e6:	4605      	mov	r5, r0
 80081e8:	4608      	mov	r0, r1
 80081ea:	6023      	str	r3, [r4, #0]
 80081ec:	f7fb fce7 	bl	8003bbe <_isatty>
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d102      	bne.n	80081fa <_isatty_r+0x1a>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	b103      	cbz	r3, 80081fa <_isatty_r+0x1a>
 80081f8:	602b      	str	r3, [r5, #0]
 80081fa:	bd38      	pop	{r3, r4, r5, pc}
 80081fc:	20008308 	.word	0x20008308

08008200 <_lseek_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4c07      	ldr	r4, [pc, #28]	; (8008220 <_lseek_r+0x20>)
 8008204:	4605      	mov	r5, r0
 8008206:	4608      	mov	r0, r1
 8008208:	4611      	mov	r1, r2
 800820a:	2200      	movs	r2, #0
 800820c:	6022      	str	r2, [r4, #0]
 800820e:	461a      	mov	r2, r3
 8008210:	f7fb fce0 	bl	8003bd4 <_lseek>
 8008214:	1c43      	adds	r3, r0, #1
 8008216:	d102      	bne.n	800821e <_lseek_r+0x1e>
 8008218:	6823      	ldr	r3, [r4, #0]
 800821a:	b103      	cbz	r3, 800821e <_lseek_r+0x1e>
 800821c:	602b      	str	r3, [r5, #0]
 800821e:	bd38      	pop	{r3, r4, r5, pc}
 8008220:	20008308 	.word	0x20008308

08008224 <memcpy>:
 8008224:	b510      	push	{r4, lr}
 8008226:	1e43      	subs	r3, r0, #1
 8008228:	440a      	add	r2, r1
 800822a:	4291      	cmp	r1, r2
 800822c:	d100      	bne.n	8008230 <memcpy+0xc>
 800822e:	bd10      	pop	{r4, pc}
 8008230:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008234:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008238:	e7f7      	b.n	800822a <memcpy+0x6>

0800823a <memmove>:
 800823a:	4288      	cmp	r0, r1
 800823c:	b510      	push	{r4, lr}
 800823e:	eb01 0302 	add.w	r3, r1, r2
 8008242:	d807      	bhi.n	8008254 <memmove+0x1a>
 8008244:	1e42      	subs	r2, r0, #1
 8008246:	4299      	cmp	r1, r3
 8008248:	d00a      	beq.n	8008260 <memmove+0x26>
 800824a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800824e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008252:	e7f8      	b.n	8008246 <memmove+0xc>
 8008254:	4283      	cmp	r3, r0
 8008256:	d9f5      	bls.n	8008244 <memmove+0xa>
 8008258:	1881      	adds	r1, r0, r2
 800825a:	1ad2      	subs	r2, r2, r3
 800825c:	42d3      	cmn	r3, r2
 800825e:	d100      	bne.n	8008262 <memmove+0x28>
 8008260:	bd10      	pop	{r4, pc}
 8008262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008266:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800826a:	e7f7      	b.n	800825c <memmove+0x22>

0800826c <__malloc_lock>:
 800826c:	4770      	bx	lr

0800826e <__malloc_unlock>:
 800826e:	4770      	bx	lr

08008270 <_realloc_r>:
 8008270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008272:	4607      	mov	r7, r0
 8008274:	4614      	mov	r4, r2
 8008276:	460e      	mov	r6, r1
 8008278:	b921      	cbnz	r1, 8008284 <_realloc_r+0x14>
 800827a:	4611      	mov	r1, r2
 800827c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008280:	f7ff bab2 	b.w	80077e8 <_malloc_r>
 8008284:	b922      	cbnz	r2, 8008290 <_realloc_r+0x20>
 8008286:	f7ff fa61 	bl	800774c <_free_r>
 800828a:	4625      	mov	r5, r4
 800828c:	4628      	mov	r0, r5
 800828e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008290:	f000 f826 	bl	80082e0 <_malloc_usable_size_r>
 8008294:	42a0      	cmp	r0, r4
 8008296:	d20f      	bcs.n	80082b8 <_realloc_r+0x48>
 8008298:	4621      	mov	r1, r4
 800829a:	4638      	mov	r0, r7
 800829c:	f7ff faa4 	bl	80077e8 <_malloc_r>
 80082a0:	4605      	mov	r5, r0
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d0f2      	beq.n	800828c <_realloc_r+0x1c>
 80082a6:	4631      	mov	r1, r6
 80082a8:	4622      	mov	r2, r4
 80082aa:	f7ff ffbb 	bl	8008224 <memcpy>
 80082ae:	4631      	mov	r1, r6
 80082b0:	4638      	mov	r0, r7
 80082b2:	f7ff fa4b 	bl	800774c <_free_r>
 80082b6:	e7e9      	b.n	800828c <_realloc_r+0x1c>
 80082b8:	4635      	mov	r5, r6
 80082ba:	e7e7      	b.n	800828c <_realloc_r+0x1c>

080082bc <_read_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4c07      	ldr	r4, [pc, #28]	; (80082dc <_read_r+0x20>)
 80082c0:	4605      	mov	r5, r0
 80082c2:	4608      	mov	r0, r1
 80082c4:	4611      	mov	r1, r2
 80082c6:	2200      	movs	r2, #0
 80082c8:	6022      	str	r2, [r4, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	f7fb fc22 	bl	8003b14 <_read>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_read_r+0x1e>
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	b103      	cbz	r3, 80082da <_read_r+0x1e>
 80082d8:	602b      	str	r3, [r5, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	20008308 	.word	0x20008308

080082e0 <_malloc_usable_size_r>:
 80082e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e4:	1f18      	subs	r0, r3, #4
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	bfbc      	itt	lt
 80082ea:	580b      	ldrlt	r3, [r1, r0]
 80082ec:	18c0      	addlt	r0, r0, r3
 80082ee:	4770      	bx	lr

080082f0 <_init>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr

080082fc <_fini>:
 80082fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fe:	bf00      	nop
 8008300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008302:	bc08      	pop	{r3}
 8008304:	469e      	mov	lr, r3
 8008306:	4770      	bx	lr
