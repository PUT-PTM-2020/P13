
MP3_PLAYER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006894  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001e184  08006a1c  08006a1c  00016a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024ba0  08024ba0  00040010  2**0
                  CONTENTS
  4 .ARM          00000008  08024ba0  08024ba0  00034ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024ba8  08024ba8  00040010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024ba8  08024ba8  00034ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024bac  08024bac  00034bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08024bb0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  20000010  08024bc0  00040010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  08024bc0  00040774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110ac  00000000  00000000  00040040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000252b  00000000  00000000  000510ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a8  00000000  00000000  00053618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00022066  00000000  00000000  000548c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000db47  00000000  00000000  00076926  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d10db  00000000  00000000  0008446d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00155548  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001168  00000000  00000000  001555c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00004eac  00000000  00000000  00156730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006a04 	.word	0x08006a04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006a04 	.word	0x08006a04

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <DESELECT>:

static
inline void DESELECT(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80004ee:	bf00      	nop
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <xmit_spi+0x30>)
 80004f2:	f005 f94f 	bl	8005794 <HAL_SPI_GetState>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d1f9      	bne.n	80004f0 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 80004fc:	1df9      	adds	r1, r7, #7
 80004fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8000502:	2201      	movs	r2, #1
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <xmit_spi+0x30>)
 8000506:	f004 fe6f 	bl	80051e8 <HAL_SPI_Transmit>
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000714 	.word	0x20000714

08000518 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 800051e:	23ff      	movs	r3, #255	; 0xff
 8000520:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000526:	bf00      	nop
 8000528:	4809      	ldr	r0, [pc, #36]	; (8000550 <rcvr_spi+0x38>)
 800052a:	f005 f933 	bl	8005794 <HAL_SPI_GetState>
 800052e:	4603      	mov	r3, r0
 8000530:	2b01      	cmp	r3, #1
 8000532:	d1f9      	bne.n	8000528 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8000534:	1dba      	adds	r2, r7, #6
 8000536:	1df9      	adds	r1, r7, #7
 8000538:	f241 3388 	movw	r3, #5000	; 0x1388
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2301      	movs	r3, #1
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <rcvr_spi+0x38>)
 8000542:	f004 ff85 	bl	8005450 <HAL_SPI_TransmitReceive>

	return Data;
 8000546:	79bb      	ldrb	r3, [r7, #6]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000714 	.word	0x20000714

08000554 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 800055c:	f7ff ffdc 	bl	8000518 <rcvr_spi>
 8000560:	4603      	mov	r3, r0
 8000562:	461a      	mov	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	701a      	strb	r2, [r3, #0]
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <wait_ready+0x34>)
 8000578:	2232      	movs	r2, #50	; 0x32
 800057a:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 800057c:	f7ff ffcc 	bl	8000518 <rcvr_spi>
	do
		res = rcvr_spi();
 8000580:	f7ff ffca 	bl	8000518 <rcvr_spi>
 8000584:	4603      	mov	r3, r0
 8000586:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2bff      	cmp	r3, #255	; 0xff
 800058c:	d004      	beq.n	8000598 <wait_ready+0x28>
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <wait_ready+0x34>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1f3      	bne.n	8000580 <wait_ready+0x10>

	return res;
 8000598:	79fb      	ldrb	r3, [r7, #7]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000002d 	.word	0x2000002d

080005a8 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 80005ae:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005b2:	60bb      	str	r3, [r7, #8]

	DESELECT();
 80005b4:	f7ff ff8f 	bl	80004d6 <DESELECT>

	for (i = 0; i < 10; i++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
 80005bc:	e005      	b.n	80005ca <power_on+0x22>
		xmit_spi(0xFF);
 80005be:	20ff      	movs	r0, #255	; 0xff
 80005c0:	f7ff ff90 	bl	80004e4 <xmit_spi>
	for (i = 0; i < 10; i++)
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	3301      	adds	r3, #1
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	2b09      	cmp	r3, #9
 80005ce:	d9f6      	bls.n	80005be <power_on+0x16>

	SELECT();
 80005d0:	f7ff ff7a 	bl	80004c8 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 80005d4:	2340      	movs	r3, #64	; 0x40
 80005d6:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 80005e8:	2395      	movs	r3, #149	; 0x95
 80005ea:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 80005ec:	2300      	movs	r3, #0
 80005ee:	73fb      	strb	r3, [r7, #15]
 80005f0:	e00b      	b.n	800060a <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	f107 0210 	add.w	r2, r7, #16
 80005f8:	4413      	add	r3, r2
 80005fa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ff70 	bl	80004e4 <xmit_spi>
	for (i = 0; i < 6; i++)
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	3301      	adds	r3, #1
 8000608:	73fb      	strb	r3, [r7, #15]
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b05      	cmp	r3, #5
 800060e:	d9f0      	bls.n	80005f2 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000610:	e002      	b.n	8000618 <power_on+0x70>
		Count--;
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	3b01      	subs	r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000618:	f7ff ff7e 	bl	8000518 <rcvr_spi>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d002      	beq.n	8000628 <power_on+0x80>
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1f4      	bne.n	8000612 <power_on+0x6a>

	DESELECT();
 8000628:	f7ff ff55 	bl	80004d6 <DESELECT>
	xmit_spi(0XFF);
 800062c:	20ff      	movs	r0, #255	; 0xff
 800062e:	f7ff ff59 	bl	80004e4 <xmit_spi>

	PowerFlag = 1;
 8000632:	4b03      	ldr	r3, [pc, #12]	; (8000640 <power_on+0x98>)
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000002f 	.word	0x2000002f

08000644 <power_off>:

static
void power_off(void) {
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <power_off+0x14>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	2000002f 	.word	0x2000002f

0800065c <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <chk_power+0x14>)
 8000662:	781b      	ldrb	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2000002f 	.word	0x2000002f

08000674 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <rcvr_datablock+0x68>)
 8000680:	220a      	movs	r2, #10
 8000682:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000684:	f7ff ff48 	bl	8000518 <rcvr_spi>
 8000688:	4603      	mov	r3, r0
 800068a:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2bff      	cmp	r3, #255	; 0xff
 8000690:	d104      	bne.n	800069c <rcvr_datablock+0x28>
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <rcvr_datablock+0x68>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1f3      	bne.n	8000684 <rcvr_datablock+0x10>
	if (token != 0xFE)
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	2bfe      	cmp	r3, #254	; 0xfe
 80006a0:	d001      	beq.n	80006a6 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 80006a2:	2300      	movs	r3, #0
 80006a4:	e016      	b.n	80006d4 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff51 	bl	8000554 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff4b 	bl	8000554 <rcvr_spi_m>
	} while (btr -= 2);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	3b02      	subs	r3, #2
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1ed      	bne.n	80006a6 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 80006ca:	f7ff ff25 	bl	8000518 <rcvr_spi>
	rcvr_spi();
 80006ce:	f7ff ff23 	bl	8000518 <rcvr_spi>

	return TRUE; /* Return with success */
 80006d2:	2301      	movs	r3, #1
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000002c 	.word	0x2000002c

080006e0 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 80006f0:	f7ff ff3e 	bl	8000570 <wait_ready>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2bff      	cmp	r3, #255	; 0xff
 80006f8:	d001      	beq.n	80006fe <xmit_datablock+0x1e>
		return FALSE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e040      	b.n	8000780 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff feef 	bl	80004e4 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000706:	78fb      	ldrb	r3, [r7, #3]
 8000708:	2bfd      	cmp	r3, #253	; 0xfd
 800070a:	d031      	beq.n	8000770 <xmit_datablock+0x90>
		wc = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fee3 	bl	80004e4 <xmit_spi>
			xmit_spi(*buff++);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fedc 	bl	80004e4 <xmit_spi>
		} while (--wc);
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	3b01      	subs	r3, #1
 8000730:	73bb      	strb	r3, [r7, #14]
 8000732:	7bbb      	ldrb	r3, [r7, #14]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1eb      	bne.n	8000710 <xmit_datablock+0x30>

		rcvr_spi();
 8000738:	f7ff feee 	bl	8000518 <rcvr_spi>
		rcvr_spi();
 800073c:	f7ff feec 	bl	8000518 <rcvr_spi>

		while (i <= 64) {
 8000740:	e00b      	b.n	800075a <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000742:	f7ff fee9 	bl	8000518 <rcvr_spi>
 8000746:	4603      	mov	r3, r0
 8000748:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	f003 031f 	and.w	r3, r3, #31
 8000750:	2b05      	cmp	r3, #5
 8000752:	d006      	beq.n	8000762 <xmit_datablock+0x82>
				break;
			i++;
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	3301      	adds	r3, #1
 8000758:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	2b40      	cmp	r3, #64	; 0x40
 800075e:	d9f0      	bls.n	8000742 <xmit_datablock+0x62>
 8000760:	e000      	b.n	8000764 <xmit_datablock+0x84>
				break;
 8000762:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000764:	bf00      	nop
 8000766:	f7ff fed7 	bl	8000518 <rcvr_spi>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d0fa      	beq.n	8000766 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	f003 031f 	and.w	r3, r3, #31
 8000776:	2b05      	cmp	r3, #5
 8000778:	d101      	bne.n	800077e <xmit_datablock+0x9e>
		return TRUE;
 800077a:	2301      	movs	r3, #1
 800077c:	e000      	b.n	8000780 <xmit_datablock+0xa0>
	else
		return FALSE;
 800077e:	2300      	movs	r3, #0
}
 8000780:	4618      	mov	r0, r3
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8000794:	f7ff feec 	bl	8000570 <wait_ready>
 8000798:	4603      	mov	r3, r0
 800079a:	2bff      	cmp	r3, #255	; 0xff
 800079c:	d001      	beq.n	80007a2 <send_cmd+0x1a>
		return 0xFF;
 800079e:	23ff      	movs	r3, #255	; 0xff
 80007a0:	e040      	b.n	8000824 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fe9d 	bl	80004e4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	0e1b      	lsrs	r3, r3, #24
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fe97 	bl	80004e4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	0c1b      	lsrs	r3, r3, #16
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fe91 	bl	80004e4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fe8b 	bl	80004e4 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fe86 	bl	80004e4 <xmit_spi>
	n = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b40      	cmp	r3, #64	; 0x40
 80007e0:	d101      	bne.n	80007e6 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 80007e2:	2395      	movs	r3, #149	; 0x95
 80007e4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b48      	cmp	r3, #72	; 0x48
 80007ea:	d101      	bne.n	80007f0 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 80007ec:	2387      	movs	r3, #135	; 0x87
 80007ee:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fe76 	bl	80004e4 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b4c      	cmp	r3, #76	; 0x4c
 80007fc:	d101      	bne.n	8000802 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 80007fe:	f7ff fe8b 	bl	8000518 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8000802:	230a      	movs	r3, #10
 8000804:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8000806:	f7ff fe87 	bl	8000518 <rcvr_spi>
 800080a:	4603      	mov	r3, r0
 800080c:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 800080e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da05      	bge.n	8000822 <send_cmd+0x9a>
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	3b01      	subs	r3, #1
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d1f1      	bne.n	8000806 <send_cmd+0x7e>

	return res; /* Return with the response value */
 8000822:	7bbb      	ldrb	r3, [r7, #14]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 800083c:	2301      	movs	r3, #1
 800083e:	e0d5      	b.n	80009ec <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8000840:	4b6c      	ldr	r3, [pc, #432]	; (80009f4 <disk_initialize+0x1c8>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	2b00      	cmp	r3, #0
 800084c:	d003      	beq.n	8000856 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 800084e:	4b69      	ldr	r3, [pc, #420]	; (80009f4 <disk_initialize+0x1c8>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	e0ca      	b.n	80009ec <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8000856:	f7ff fea7 	bl	80005a8 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 800085a:	f7ff fe35 	bl	80004c8 <SELECT>
	ty = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8000862:	2100      	movs	r1, #0
 8000864:	2040      	movs	r0, #64	; 0x40
 8000866:	f7ff ff8f 	bl	8000788 <send_cmd>
 800086a:	4603      	mov	r3, r0
 800086c:	2b01      	cmp	r3, #1
 800086e:	f040 80a5 	bne.w	80009bc <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8000872:	4b61      	ldr	r3, [pc, #388]	; (80009f8 <disk_initialize+0x1cc>)
 8000874:	2264      	movs	r2, #100	; 0x64
 8000876:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8000878:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800087c:	2048      	movs	r0, #72	; 0x48
 800087e:	f7ff ff83 	bl	8000788 <send_cmd>
 8000882:	4603      	mov	r3, r0
 8000884:	2b01      	cmp	r3, #1
 8000886:	d158      	bne.n	800093a <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e00c      	b.n	80008a8 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800088e:	7bfc      	ldrb	r4, [r7, #15]
 8000890:	f7ff fe42 	bl	8000518 <rcvr_spi>
 8000894:	4603      	mov	r3, r0
 8000896:	461a      	mov	r2, r3
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4423      	add	r3, r4
 800089e:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	3301      	adds	r3, #1
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d9ef      	bls.n	800088e <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 80008ae:	7abb      	ldrb	r3, [r7, #10]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	f040 8083 	bne.w	80009bc <disk_initialize+0x190>
 80008b6:	7afb      	ldrb	r3, [r7, #11]
 80008b8:	2baa      	cmp	r3, #170	; 0xaa
 80008ba:	d17f      	bne.n	80009bc <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 80008bc:	2100      	movs	r1, #0
 80008be:	2077      	movs	r0, #119	; 0x77
 80008c0:	f7ff ff62 	bl	8000788 <send_cmd>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d807      	bhi.n	80008da <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80008ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008ce:	2069      	movs	r0, #105	; 0x69
 80008d0:	f7ff ff5a 	bl	8000788 <send_cmd>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d005      	beq.n	80008e6 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80008da:	4b47      	ldr	r3, [pc, #284]	; (80009f8 <disk_initialize+0x1cc>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1eb      	bne.n	80008bc <disk_initialize+0x90>
 80008e4:	e000      	b.n	80008e8 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80008e6:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80008e8:	4b43      	ldr	r3, [pc, #268]	; (80009f8 <disk_initialize+0x1cc>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d064      	beq.n	80009bc <disk_initialize+0x190>
 80008f2:	2100      	movs	r1, #0
 80008f4:	207a      	movs	r0, #122	; 0x7a
 80008f6:	f7ff ff47 	bl	8000788 <send_cmd>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d15d      	bne.n	80009bc <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e00c      	b.n	8000920 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8000906:	7bfc      	ldrb	r4, [r7, #15]
 8000908:	f7ff fe06 	bl	8000518 <rcvr_spi>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	4423      	add	r3, r4
 8000916:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	3301      	adds	r3, #1
 800091e:	73fb      	strb	r3, [r7, #15]
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	2b03      	cmp	r3, #3
 8000924:	d9ef      	bls.n	8000906 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8000926:	7a3b      	ldrb	r3, [r7, #8]
 8000928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <disk_initialize+0x108>
 8000930:	2306      	movs	r3, #6
 8000932:	e000      	b.n	8000936 <disk_initialize+0x10a>
 8000934:	2302      	movs	r3, #2
 8000936:	73bb      	strb	r3, [r7, #14]
 8000938:	e040      	b.n	80009bc <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800093a:	2100      	movs	r1, #0
 800093c:	2077      	movs	r0, #119	; 0x77
 800093e:	f7ff ff23 	bl	8000788 <send_cmd>
 8000942:	4603      	mov	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	d808      	bhi.n	800095a <disk_initialize+0x12e>
 8000948:	2100      	movs	r1, #0
 800094a:	2069      	movs	r0, #105	; 0x69
 800094c:	f7ff ff1c 	bl	8000788 <send_cmd>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d801      	bhi.n	800095a <disk_initialize+0x12e>
 8000956:	2302      	movs	r3, #2
 8000958:	e000      	b.n	800095c <disk_initialize+0x130>
 800095a:	2301      	movs	r3, #1
 800095c:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d10e      	bne.n	8000982 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8000964:	2100      	movs	r1, #0
 8000966:	2077      	movs	r0, #119	; 0x77
 8000968:	f7ff ff0e 	bl	8000788 <send_cmd>
 800096c:	4603      	mov	r3, r0
 800096e:	2b01      	cmp	r3, #1
 8000970:	d80e      	bhi.n	8000990 <disk_initialize+0x164>
 8000972:	2100      	movs	r1, #0
 8000974:	2069      	movs	r0, #105	; 0x69
 8000976:	f7ff ff07 	bl	8000788 <send_cmd>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d107      	bne.n	8000990 <disk_initialize+0x164>
						break; /* ACMD41 */
 8000980:	e00d      	b.n	800099e <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8000982:	2100      	movs	r1, #0
 8000984:	2041      	movs	r0, #65	; 0x41
 8000986:	f7ff feff 	bl	8000788 <send_cmd>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d005      	beq.n	800099c <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <disk_initialize+0x1cc>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1e1      	bne.n	800095e <disk_initialize+0x132>
 800099a:	e000      	b.n	800099e <disk_initialize+0x172>
						break; /* CMD1 */
 800099c:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <disk_initialize+0x1cc>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d007      	beq.n	80009b8 <disk_initialize+0x18c>
 80009a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ac:	2050      	movs	r0, #80	; 0x50
 80009ae:	f7ff feeb 	bl	8000788 <send_cmd>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <disk_initialize+0x190>
				ty = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 80009bc:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <disk_initialize+0x1d0>)
 80009be:	7bbb      	ldrb	r3, [r7, #14]
 80009c0:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80009c2:	f7ff fd88 	bl	80004d6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80009c6:	f7ff fda7 	bl	8000518 <rcvr_spi>

	if (ty) /* Initialization succeded */
 80009ca:	7bbb      	ldrb	r3, [r7, #14]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d008      	beq.n	80009e2 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <disk_initialize+0x1c8>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f023 0301 	bic.w	r3, r3, #1
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <disk_initialize+0x1c8>)
 80009de:	701a      	strb	r2, [r3, #0]
 80009e0:	e001      	b.n	80009e6 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80009e2:	f7ff fe2f 	bl	8000644 <power_off>

	return Stat;
 80009e6:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <disk_initialize+0x1c8>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	2000002c 	.word	0x2000002c
 80009fc:	2000002e 	.word	0x2000002e

08000a00 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000a10:	2301      	movs	r3, #1
 8000a12:	e002      	b.n	8000a1a <disk_status+0x1a>
	return Stat;
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <disk_status+0x28>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b2db      	uxtb	r3, r3
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000000 	.word	0x20000000

08000a2c <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	4603      	mov	r3, r0
 8000a3a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d102      	bne.n	8000a48 <disk_read+0x1c>
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <disk_read+0x20>
		return RES_PARERR;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	e051      	b.n	8000af0 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <disk_read+0xcc>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <disk_read+0x32>
		return RES_NOTRDY;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	e048      	b.n	8000af0 <disk_read+0xc4>

	if (!(CardType & 4))
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <disk_read+0xd0>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d102      	bne.n	8000a70 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	025b      	lsls	r3, r3, #9
 8000a6e:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000a70:	f7ff fd2a 	bl	80004c8 <SELECT>

	if (count == 1) { /* Single block read */
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d111      	bne.n	8000a9e <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	2051      	movs	r0, #81	; 0x51
 8000a7e:	f7ff fe83 	bl	8000788 <send_cmd>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d129      	bne.n	8000adc <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8000a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8c:	68b8      	ldr	r0, [r7, #8]
 8000a8e:	f7ff fdf1 	bl	8000674 <rcvr_datablock>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d021      	beq.n	8000adc <disk_read+0xb0>
			count = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	e01e      	b.n	8000adc <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	2052      	movs	r0, #82	; 0x52
 8000aa2:	f7ff fe71 	bl	8000788 <send_cmd>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d117      	bne.n	8000adc <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8000aac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab0:	68b8      	ldr	r0, [r7, #8]
 8000ab2:	f7ff fddf 	bl	8000674 <rcvr_datablock>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00a      	beq.n	8000ad2 <disk_read+0xa6>
					break;
				buff += 512;
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ac2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1ed      	bne.n	8000aac <disk_read+0x80>
 8000ad0:	e000      	b.n	8000ad4 <disk_read+0xa8>
					break;
 8000ad2:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	204c      	movs	r0, #76	; 0x4c
 8000ad8:	f7ff fe56 	bl	8000788 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8000adc:	f7ff fcfb 	bl	80004d6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000ae0:	f7ff fd1a 	bl	8000518 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf14      	ite	ne
 8000aea:	2301      	movne	r3, #1
 8000aec:	2300      	moveq	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000000 	.word	0x20000000
 8000afc:	2000002e 	.word	0x2000002e

08000b00 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <disk_write+0x1c>
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <disk_write+0x20>
		return RES_PARERR;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	e06b      	b.n	8000bf8 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8000b20:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <disk_write+0x100>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <disk_write+0x32>
		return RES_NOTRDY;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e062      	b.n	8000bf8 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8000b32:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <disk_write+0x100>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <disk_write+0x44>
		return RES_WRPRT;
 8000b40:	2302      	movs	r3, #2
 8000b42:	e059      	b.n	8000bf8 <disk_write+0xf8>

	if (!(CardType & 4))
 8000b44:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <disk_write+0x104>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	025b      	lsls	r3, r3, #9
 8000b54:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000b56:	f7ff fcb7 	bl	80004c8 <SELECT>

	if (count == 1) { /* Single block write */
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d110      	bne.n	8000b82 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8000b60:	6879      	ldr	r1, [r7, #4]
 8000b62:	2058      	movs	r0, #88	; 0x58
 8000b64:	f7ff fe10 	bl	8000788 <send_cmd>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d13a      	bne.n	8000be4 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8000b6e:	21fe      	movs	r1, #254	; 0xfe
 8000b70:	68b8      	ldr	r0, [r7, #8]
 8000b72:	f7ff fdb5 	bl	80006e0 <xmit_datablock>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d033      	beq.n	8000be4 <disk_write+0xe4>
			count = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	e030      	b.n	8000be4 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <disk_write+0x104>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d007      	beq.n	8000b9e <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2077      	movs	r0, #119	; 0x77
 8000b92:	f7ff fdf9 	bl	8000788 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8000b96:	6839      	ldr	r1, [r7, #0]
 8000b98:	2057      	movs	r0, #87	; 0x57
 8000b9a:	f7ff fdf5 	bl	8000788 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	2059      	movs	r0, #89	; 0x59
 8000ba2:	f7ff fdf1 	bl	8000788 <send_cmd>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d11b      	bne.n	8000be4 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8000bac:	21fc      	movs	r1, #252	; 0xfc
 8000bae:	68b8      	ldr	r0, [r7, #8]
 8000bb0:	f7ff fd96 	bl	80006e0 <xmit_datablock>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00a      	beq.n	8000bd0 <disk_write+0xd0>
					break;
				buff += 512;
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1ee      	bne.n	8000bac <disk_write+0xac>
 8000bce:	e000      	b.n	8000bd2 <disk_write+0xd2>
					break;
 8000bd0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8000bd2:	21fd      	movs	r1, #253	; 0xfd
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f7ff fd83 	bl	80006e0 <xmit_datablock>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d101      	bne.n	8000be4 <disk_write+0xe4>
				count = 1;
 8000be0:	2301      	movs	r3, #1
 8000be2:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8000be4:	f7ff fc77 	bl	80004d6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000be8:	f7ff fc96 	bl	8000518 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bf14      	ite	ne
 8000bf2:	2301      	movne	r3, #1
 8000bf4:	2300      	moveq	r3, #0
 8000bf6:	b2db      	uxtb	r3, r3
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	2000002e 	.word	0x2000002e

08000c08 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b08b      	sub	sp, #44	; 0x2c
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	603a      	str	r2, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	460b      	mov	r3, r1
 8000c16:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <disk_ioctl+0x1e>
		return RES_PARERR;
 8000c22:	2304      	movs	r3, #4
 8000c24:	e16a      	b.n	8000efc <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b07      	cmp	r3, #7
 8000c30:	d127      	bne.n	8000c82 <disk_ioctl+0x7a>
		switch (*ptr) {
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d00e      	beq.n	8000c58 <disk_ioctl+0x50>
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d012      	beq.n	8000c64 <disk_ioctl+0x5c>
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d11b      	bne.n	8000c7a <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 8000c42:	f7ff fd0b 	bl	800065c <chk_power>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <disk_ioctl+0x48>
				power_off(); /* Power off */
 8000c4c:	f7ff fcfa 	bl	8000644 <power_off>
			res = RES_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c56:	e14f      	b.n	8000ef8 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8000c58:	f7ff fca6 	bl	80005a8 <power_on>
			res = RES_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c62:	e149      	b.n	8000ef8 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8000c64:	f7ff fcfa 	bl	800065c <chk_power>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c78:	e13e      	b.n	8000ef8 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c80:	e13a      	b.n	8000ef8 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8000c82:	4ba0      	ldr	r3, [pc, #640]	; (8000f04 <disk_ioctl+0x2fc>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8000c90:	2303      	movs	r3, #3
 8000c92:	e133      	b.n	8000efc <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8000c94:	f7ff fc18 	bl	80004c8 <SELECT>

		switch (ctrl) {
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	2b35      	cmp	r3, #53	; 0x35
 8000c9c:	f200 811d 	bhi.w	8000eda <disk_ioctl+0x2d2>
 8000ca0:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <disk_ioctl+0xa0>)
 8000ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca6:	bf00      	nop
 8000ca8:	08000e43 	.word	0x08000e43
 8000cac:	08000d81 	.word	0x08000d81
 8000cb0:	08000e33 	.word	0x08000e33
 8000cb4:	08000edb 	.word	0x08000edb
 8000cb8:	08000edb 	.word	0x08000edb
 8000cbc:	08000edb 	.word	0x08000edb
 8000cc0:	08000edb 	.word	0x08000edb
 8000cc4:	08000edb 	.word	0x08000edb
 8000cc8:	08000edb 	.word	0x08000edb
 8000ccc:	08000edb 	.word	0x08000edb
 8000cd0:	08000edb 	.word	0x08000edb
 8000cd4:	08000edb 	.word	0x08000edb
 8000cd8:	08000edb 	.word	0x08000edb
 8000cdc:	08000edb 	.word	0x08000edb
 8000ce0:	08000edb 	.word	0x08000edb
 8000ce4:	08000edb 	.word	0x08000edb
 8000ce8:	08000edb 	.word	0x08000edb
 8000cec:	08000edb 	.word	0x08000edb
 8000cf0:	08000edb 	.word	0x08000edb
 8000cf4:	08000edb 	.word	0x08000edb
 8000cf8:	08000edb 	.word	0x08000edb
 8000cfc:	08000edb 	.word	0x08000edb
 8000d00:	08000edb 	.word	0x08000edb
 8000d04:	08000edb 	.word	0x08000edb
 8000d08:	08000edb 	.word	0x08000edb
 8000d0c:	08000edb 	.word	0x08000edb
 8000d10:	08000edb 	.word	0x08000edb
 8000d14:	08000edb 	.word	0x08000edb
 8000d18:	08000edb 	.word	0x08000edb
 8000d1c:	08000edb 	.word	0x08000edb
 8000d20:	08000edb 	.word	0x08000edb
 8000d24:	08000edb 	.word	0x08000edb
 8000d28:	08000edb 	.word	0x08000edb
 8000d2c:	08000edb 	.word	0x08000edb
 8000d30:	08000edb 	.word	0x08000edb
 8000d34:	08000edb 	.word	0x08000edb
 8000d38:	08000edb 	.word	0x08000edb
 8000d3c:	08000edb 	.word	0x08000edb
 8000d40:	08000edb 	.word	0x08000edb
 8000d44:	08000edb 	.word	0x08000edb
 8000d48:	08000edb 	.word	0x08000edb
 8000d4c:	08000edb 	.word	0x08000edb
 8000d50:	08000edb 	.word	0x08000edb
 8000d54:	08000edb 	.word	0x08000edb
 8000d58:	08000edb 	.word	0x08000edb
 8000d5c:	08000edb 	.word	0x08000edb
 8000d60:	08000edb 	.word	0x08000edb
 8000d64:	08000edb 	.word	0x08000edb
 8000d68:	08000edb 	.word	0x08000edb
 8000d6c:	08000edb 	.word	0x08000edb
 8000d70:	08000edb 	.word	0x08000edb
 8000d74:	08000e55 	.word	0x08000e55
 8000d78:	08000e79 	.word	0x08000e79
 8000d7c:	08000e9d 	.word	0x08000e9d
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8000d80:	2100      	movs	r1, #0
 8000d82:	2049      	movs	r0, #73	; 0x49
 8000d84:	f7ff fd00 	bl	8000788 <send_cmd>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 80a9 	bne.w	8000ee2 <disk_ioctl+0x2da>
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2110      	movs	r1, #16
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fc6c 	bl	8000674 <rcvr_datablock>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 809f 	beq.w	8000ee2 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8000da4:	7b3b      	ldrb	r3, [r7, #12]
 8000da6:	099b      	lsrs	r3, r3, #6
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d10e      	bne.n	8000dcc <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dae:	7d7b      	ldrb	r3, [r7, #21]
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	7d3b      	ldrb	r3, [r7, #20]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4413      	add	r3, r2
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dc2:	8bfb      	ldrh	r3, [r7, #30]
 8000dc4:	029a      	lsls	r2, r3, #10
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	e02e      	b.n	8000e2a <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000dcc:	7c7b      	ldrb	r3, [r7, #17]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	7dbb      	ldrb	r3, [r7, #22]
 8000dd6:	09db      	lsrs	r3, r3, #7
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8000dde:	7d7b      	ldrb	r3, [r7, #21]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f003 0306 	and.w	r3, r3, #6
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000dee:	3302      	adds	r3, #2
 8000df0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000df4:	7d3b      	ldrb	r3, [r7, #20]
 8000df6:	099b      	lsrs	r3, r3, #6
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	7cfb      	ldrb	r3, [r7, #19]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	4413      	add	r3, r2
 8000e06:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8000e08:	7cbb      	ldrb	r3, [r7, #18]
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000e18:	3301      	adds	r3, #1
 8000e1a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e1c:	8bfa      	ldrh	r2, [r7, #30]
 8000e1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e22:	3b09      	subs	r3, #9
 8000e24:	409a      	lsls	r2, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e30:	e057      	b.n	8000ee2 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e38:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e40:	e056      	b.n	8000ef0 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8000e42:	f7ff fb95 	bl	8000570 <wait_ready>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d14c      	bne.n	8000ee6 <disk_ioctl+0x2de>
				res = RES_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e52:	e048      	b.n	8000ee6 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8000e54:	2100      	movs	r1, #0
 8000e56:	2049      	movs	r0, #73	; 0x49
 8000e58:	f7ff fc96 	bl	8000788 <send_cmd>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d143      	bne.n	8000eea <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8000e62:	2110      	movs	r1, #16
 8000e64:	6a38      	ldr	r0, [r7, #32]
 8000e66:	f7ff fc05 	bl	8000674 <rcvr_datablock>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d03c      	beq.n	8000eea <disk_ioctl+0x2e2>
				res = RES_OK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e76:	e038      	b.n	8000eea <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8000e78:	2100      	movs	r1, #0
 8000e7a:	204a      	movs	r0, #74	; 0x4a
 8000e7c:	f7ff fc84 	bl	8000788 <send_cmd>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d133      	bne.n	8000eee <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8000e86:	2110      	movs	r1, #16
 8000e88:	6a38      	ldr	r0, [r7, #32]
 8000e8a:	f7ff fbf3 	bl	8000674 <rcvr_datablock>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d02c      	beq.n	8000eee <disk_ioctl+0x2e6>
				res = RES_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e9a:	e028      	b.n	8000eee <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	207a      	movs	r0, #122	; 0x7a
 8000ea0:	f7ff fc72 	bl	8000788 <send_cmd>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d117      	bne.n	8000eda <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eb0:	e00b      	b.n	8000eca <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8000eb2:	6a3c      	ldr	r4, [r7, #32]
 8000eb4:	1c63      	adds	r3, r4, #1
 8000eb6:	623b      	str	r3, [r7, #32]
 8000eb8:	f7ff fb2e 	bl	8000518 <rcvr_spi>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d9ef      	bls.n	8000eb2 <disk_ioctl+0x2aa>
				res = RES_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000ed8:	e00a      	b.n	8000ef0 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8000eda:	2304      	movs	r3, #4
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ee0:	e006      	b.n	8000ef0 <disk_ioctl+0x2e8>
			break;
 8000ee2:	bf00      	nop
 8000ee4:	e004      	b.n	8000ef0 <disk_ioctl+0x2e8>
			break;
 8000ee6:	bf00      	nop
 8000ee8:	e002      	b.n	8000ef0 <disk_ioctl+0x2e8>
			break;
 8000eea:	bf00      	nop
 8000eec:	e000      	b.n	8000ef0 <disk_ioctl+0x2e8>
			break;
 8000eee:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8000ef0:	f7ff faf1 	bl	80004d6 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8000ef4:	f7ff fb10 	bl	8000518 <rcvr_spi>
	}

	return res;
 8000ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	372c      	adds	r7, #44	; 0x2c
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	20000000 	.word	0x20000000

08000f08 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <disk_timerproc+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d005      	beq.n	8000f26 <disk_timerproc+0x1e>
		Timer1 = --n;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <disk_timerproc+0x44>)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <disk_timerproc+0x48>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <disk_timerproc+0x36>
		Timer2 = --n;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <disk_timerproc+0x48>)
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	7013      	strb	r3, [r2, #0]

}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2000002c 	.word	0x2000002c
 8000f50:	2000002d 	.word	0x2000002d

08000f54 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <sdcard_systick_timerproc+0x2c>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <sdcard_systick_timerproc+0x2c>)
 8000f64:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <sdcard_systick_timerproc+0x2c>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	2b09      	cmp	r3, #9
 8000f6e:	d904      	bls.n	8000f7a <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <sdcard_systick_timerproc+0x2c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8000f76:	f7ff ffc7 	bl	8000f08 <disk_timerproc>
	}
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000026c 	.word	0x2000026c

08000f84 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8000f88:	4b02      	ldr	r3, [pc, #8]	; (8000f94 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	36c55cc0 	.word	0x36c55cc0

08000f98 <ld_word>:
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	81fb      	strh	r3, [r7, #14]
 8000fa8:	89fb      	ldrh	r3, [r7, #14]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	81fb      	strh	r3, [r7, #14]
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <ld_dword>:
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3303      	adds	r3, #3
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	3202      	adds	r2, #2
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	3201      	adds	r2, #1
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	7812      	ldrb	r2, [r2, #0]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <st_word>:
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	460b      	mov	r3, r1
 8001018:	807b      	strh	r3, [r7, #2]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	887a      	ldrh	r2, [r7, #2]
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <st_dword>:
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <mem_cpy>:
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00d      	beq.n	80010d2 <mem_cpy+0x36>
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	1c53      	adds	r3, r2, #1
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	1c59      	adds	r1, r3, #1
 80010c0:	6179      	str	r1, [r7, #20]
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f1      	bne.n	80010b6 <mem_cpy+0x1a>
 80010d2:	bf00      	nop
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <mem_set>:
 80010de:	b480      	push	{r7}
 80010e0:	b087      	sub	sp, #28
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	617a      	str	r2, [r7, #20]
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f3      	bne.n	80010ee <mem_set+0x10>
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <mem_cmp>:
 8001112:	b480      	push	{r7}
 8001114:	b089      	sub	sp, #36	; 0x24
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	61fa      	str	r2, [r7, #28]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4619      	mov	r1, r3
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	61ba      	str	r2, [r7, #24]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	1acb      	subs	r3, r1, r3
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <mem_cmp+0x40>
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0eb      	beq.n	800112a <mem_cmp+0x18>
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	4618      	mov	r0, r3
 8001156:	3724      	adds	r7, #36	; 0x24
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <chk_chr>:
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	e002      	b.n	8001172 <chk_chr+0x12>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3301      	adds	r3, #1
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d005      	beq.n	8001186 <chk_chr+0x26>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	4293      	cmp	r3, r2
 8001184:	d1f2      	bne.n	800116c <chk_chr+0xc>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <dbc_1st>:
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	2281      	movs	r2, #129	; 0x81
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d30f      	bcc.n	80011c8 <dbc_1st+0x32>
 80011a8:	229f      	movs	r2, #159	; 0x9f
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d801      	bhi.n	80011b4 <dbc_1st+0x1e>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e00a      	b.n	80011ca <dbc_1st+0x34>
 80011b4:	22e0      	movs	r2, #224	; 0xe0
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d305      	bcc.n	80011c8 <dbc_1st+0x32>
 80011bc:	22fc      	movs	r2, #252	; 0xfc
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d801      	bhi.n	80011c8 <dbc_1st+0x32>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <dbc_1st+0x34>
 80011c8:	2300      	movs	r3, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <dbc_2nd>:
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	2240      	movs	r2, #64	; 0x40
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d319      	bcc.n	800121c <dbc_2nd+0x46>
 80011e8:	227e      	movs	r2, #126	; 0x7e
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d801      	bhi.n	80011f4 <dbc_2nd+0x1e>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e014      	b.n	800121e <dbc_2nd+0x48>
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d305      	bcc.n	8001208 <dbc_2nd+0x32>
 80011fc:	22fc      	movs	r2, #252	; 0xfc
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4293      	cmp	r3, r2
 8001202:	d801      	bhi.n	8001208 <dbc_2nd+0x32>
 8001204:	2301      	movs	r3, #1
 8001206:	e00a      	b.n	800121e <dbc_2nd+0x48>
 8001208:	2200      	movs	r2, #0
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4293      	cmp	r3, r2
 800120e:	d305      	bcc.n	800121c <dbc_2nd+0x46>
 8001210:	2200      	movs	r2, #0
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4293      	cmp	r3, r2
 8001216:	d801      	bhi.n	800121c <dbc_2nd+0x46>
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <dbc_2nd+0x48>
 800121c:	2300      	movs	r3, #0
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <sync_window>:
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	78db      	ldrb	r3, [r3, #3]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d02c      	beq.n	8001298 <sync_window+0x6e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7858      	ldrb	r0, [r3, #1]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800124c:	2301      	movs	r3, #1
 800124e:	f7ff fc57 	bl	8000b00 <disk_write>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d11d      	bne.n	8001294 <sync_window+0x6a>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	70da      	strb	r2, [r3, #3]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	1ad2      	subs	r2, r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	429a      	cmp	r2, r3
 800126e:	d213      	bcs.n	8001298 <sync_window+0x6e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	789b      	ldrb	r3, [r3, #2]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d10f      	bne.n	8001298 <sync_window+0x6e>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7858      	ldrb	r0, [r3, #1]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	441a      	add	r2, r3
 800128c:	2301      	movs	r3, #1
 800128e:	f7ff fc37 	bl	8000b00 <disk_write>
 8001292:	e001      	b.n	8001298 <sync_window+0x6e>
 8001294:	2301      	movs	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <move_window>:
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d01b      	beq.n	80012f2 <move_window+0x50>
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffb5 	bl	800122a <sync_window>
 80012c0:	4603      	mov	r3, r0
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d113      	bne.n	80012f2 <move_window+0x50>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7858      	ldrb	r0, [r3, #1]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80012d4:	2301      	movs	r3, #1
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	f7ff fba8 	bl	8000a2c <disk_read>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d004      	beq.n	80012ec <move_window+0x4a>
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <sync_fs>:
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff90 	bl	800122a <sync_window>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d158      	bne.n	80013c6 <sync_fs+0xca>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b03      	cmp	r3, #3
 800131a:	d148      	bne.n	80013ae <sync_fs+0xb2>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	791b      	ldrb	r3, [r3, #4]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d144      	bne.n	80013ae <sync_fs+0xb2>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3330      	adds	r3, #48	; 0x30
 8001328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fed5 	bl	80010de <mem_set>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3330      	adds	r3, #48	; 0x30
 8001338:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800133c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fe64 	bl	800100e <st_word>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3330      	adds	r3, #48	; 0x30
 800134a:	4921      	ldr	r1, [pc, #132]	; (80013d0 <sync_fs+0xd4>)
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe79 	bl	8001044 <st_dword>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3330      	adds	r3, #48	; 0x30
 8001356:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800135a:	491e      	ldr	r1, [pc, #120]	; (80013d4 <sync_fs+0xd8>)
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe71 	bl	8001044 <st_dword>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3330      	adds	r3, #48	; 0x30
 8001366:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	4619      	mov	r1, r3
 8001370:	4610      	mov	r0, r2
 8001372:	f7ff fe67 	bl	8001044 <st_dword>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3330      	adds	r3, #48	; 0x30
 800137a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	4619      	mov	r1, r3
 8001384:	4610      	mov	r0, r2
 8001386:	f7ff fe5d 	bl	8001044 <st_dword>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7858      	ldrb	r0, [r3, #1]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a2:	2301      	movs	r3, #1
 80013a4:	f7ff fbac 	bl	8000b00 <disk_write>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	711a      	strb	r2, [r3, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	785b      	ldrb	r3, [r3, #1]
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fc26 	bl	8000c08 <disk_ioctl>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <sync_fs+0xca>
 80013c2:	2301      	movs	r3, #1
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	41615252 	.word	0x41615252
 80013d4:	61417272 	.word	0x61417272

080013d8 <clst2sect>:
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3b02      	subs	r3, #2
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	3b02      	subs	r3, #2
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d301      	bcc.n	80013f8 <clst2sect+0x20>
 80013f4:	2300      	movs	r3, #0
 80013f6:	e008      	b.n	800140a <clst2sect+0x32>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	895b      	ldrh	r3, [r3, #10]
 8001400:	4619      	mov	r1, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	fb03 f301 	mul.w	r3, r3, r1
 8001408:	4413      	add	r3, r2
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <get_fat>:
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d904      	bls.n	8001436 <get_fat+0x20>
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d302      	bcc.n	800143c <get_fat+0x26>
 8001436:	2301      	movs	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	e08c      	b.n	8001556 <get_fat+0x140>
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d045      	beq.n	80014d6 <get_fat+0xc0>
 800144a:	2b03      	cmp	r3, #3
 800144c:	d05d      	beq.n	800150a <get_fat+0xf4>
 800144e:	2b01      	cmp	r3, #1
 8001450:	d177      	bne.n	8001542 <get_fat+0x12c>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	085b      	lsrs	r3, r3, #1
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	4413      	add	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	6a1a      	ldr	r2, [r3, #32]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	0a5b      	lsrs	r3, r3, #9
 8001468:	4413      	add	r3, r2
 800146a:	4619      	mov	r1, r3
 800146c:	6938      	ldr	r0, [r7, #16]
 800146e:	f7ff ff18 	bl	80012a2 <move_window>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d167      	bne.n	8001548 <get_fat+0x132>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	60fa      	str	r2, [r7, #12]
 800147e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4413      	add	r3, r2
 8001486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	6a1a      	ldr	r2, [r3, #32]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	0a5b      	lsrs	r3, r3, #9
 8001494:	4413      	add	r3, r2
 8001496:	4619      	mov	r1, r3
 8001498:	6938      	ldr	r0, [r7, #16]
 800149a:	f7ff ff02 	bl	80012a2 <move_window>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d153      	bne.n	800154c <get_fat+0x136>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4413      	add	r3, r2
 80014ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	461a      	mov	r2, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <get_fat+0xb6>
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	e002      	b.n	80014d2 <get_fat+0xbc>
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e03f      	b.n	8001556 <get_fat+0x140>
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	6a1a      	ldr	r2, [r3, #32]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	4413      	add	r3, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	6938      	ldr	r0, [r7, #16]
 80014e4:	f7ff fedd 	bl	80012a2 <move_window>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d130      	bne.n	8001550 <get_fat+0x13a>
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80014fc:	4413      	add	r3, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fd4a 	bl	8000f98 <ld_word>
 8001504:	4603      	mov	r3, r0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e025      	b.n	8001556 <get_fat+0x140>
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	6a1a      	ldr	r2, [r3, #32]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	09db      	lsrs	r3, r3, #7
 8001512:	4413      	add	r3, r2
 8001514:	4619      	mov	r1, r3
 8001516:	6938      	ldr	r0, [r7, #16]
 8001518:	f7ff fec3 	bl	80012a2 <move_window>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d118      	bne.n	8001554 <get_fat+0x13e>
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001530:	4413      	add	r3, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fd48 	bl	8000fc8 <ld_dword>
 8001538:	4603      	mov	r3, r0
 800153a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	e009      	b.n	8001556 <get_fat+0x140>
 8001542:	2301      	movs	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e006      	b.n	8001556 <get_fat+0x140>
 8001548:	bf00      	nop
 800154a:	e004      	b.n	8001556 <get_fat+0x140>
 800154c:	bf00      	nop
 800154e:	e002      	b.n	8001556 <get_fat+0x140>
 8001550:	bf00      	nop
 8001552:	e000      	b.n	8001556 <get_fat+0x140>
 8001554:	bf00      	nop
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <put_fat>:
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	2302      	movs	r3, #2
 800156e:	77fb      	strb	r3, [r7, #31]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b01      	cmp	r3, #1
 8001574:	f240 80d6 	bls.w	8001724 <put_fat+0x1c4>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	429a      	cmp	r2, r3
 8001580:	f080 80d0 	bcs.w	8001724 <put_fat+0x1c4>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d073      	beq.n	8001674 <put_fat+0x114>
 800158c:	2b03      	cmp	r3, #3
 800158e:	f000 8091 	beq.w	80016b4 <put_fat+0x154>
 8001592:	2b01      	cmp	r3, #1
 8001594:	f040 80c6 	bne.w	8001724 <put_fat+0x1c4>
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	085b      	lsrs	r3, r3, #1
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4413      	add	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6a1a      	ldr	r2, [r3, #32]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	0a5b      	lsrs	r3, r3, #9
 80015ae:	4413      	add	r3, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f7ff fe75 	bl	80012a2 <move_window>
 80015b8:	4603      	mov	r3, r0
 80015ba:	77fb      	strb	r3, [r7, #31]
 80015bc:	7ffb      	ldrb	r3, [r7, #31]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f040 80a9 	bne.w	8001716 <put_fat+0x1b6>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	1c59      	adds	r1, r3, #1
 80015ce:	61b9      	str	r1, [r7, #24]
 80015d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015d4:	4413      	add	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00d      	beq.n	80015fe <put_fat+0x9e>
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	e001      	b.n	8001602 <put_fat+0xa2>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	7013      	strb	r3, [r2, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2201      	movs	r2, #1
 800160a:	70da      	strb	r2, [r3, #3]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a1a      	ldr	r2, [r3, #32]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	0a5b      	lsrs	r3, r3, #9
 8001614:	4413      	add	r3, r2
 8001616:	4619      	mov	r1, r3
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f7ff fe42 	bl	80012a2 <move_window>
 800161e:	4603      	mov	r3, r0
 8001620:	77fb      	strb	r3, [r7, #31]
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d178      	bne.n	800171a <put_fat+0x1ba>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001634:	4413      	add	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <put_fat+0xea>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	b2db      	uxtb	r3, r3
 8001648:	e00e      	b.n	8001668 <put_fat+0x108>
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b25b      	sxtb	r3, r3
 8001650:	f023 030f 	bic.w	r3, r3, #15
 8001654:	b25a      	sxtb	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	b25b      	sxtb	r3, r3
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	b25b      	sxtb	r3, r3
 8001662:	4313      	orrs	r3, r2
 8001664:	b25b      	sxtb	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	7013      	strb	r3, [r2, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2201      	movs	r2, #1
 8001670:	70da      	strb	r2, [r3, #3]
 8001672:	e057      	b.n	8001724 <put_fat+0x1c4>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a1a      	ldr	r2, [r3, #32]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	4413      	add	r3, r2
 800167e:	4619      	mov	r1, r3
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f7ff fe0e 	bl	80012a2 <move_window>
 8001686:	4603      	mov	r3, r0
 8001688:	77fb      	strb	r3, [r7, #31]
 800168a:	7ffb      	ldrb	r3, [r7, #31]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d146      	bne.n	800171e <put_fat+0x1be>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800169e:	4413      	add	r3, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	b292      	uxth	r2, r2
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fcb1 	bl	800100e <st_word>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	70da      	strb	r2, [r3, #3]
 80016b2:	e037      	b.n	8001724 <put_fat+0x1c4>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6a1a      	ldr	r2, [r3, #32]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	09db      	lsrs	r3, r3, #7
 80016bc:	4413      	add	r3, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f7ff fdee 	bl	80012a2 <move_window>
 80016c6:	4603      	mov	r3, r0
 80016c8:	77fb      	strb	r3, [r7, #31]
 80016ca:	7ffb      	ldrb	r3, [r7, #31]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d128      	bne.n	8001722 <put_fat+0x1c2>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80016e4:	4413      	add	r3, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fc6e 	bl	8000fc8 <ld_dword>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80016f2:	4323      	orrs	r3, r4
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001704:	4413      	add	r3, r2
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fc9b 	bl	8001044 <st_dword>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2201      	movs	r2, #1
 8001712:	70da      	strb	r2, [r3, #3]
 8001714:	e006      	b.n	8001724 <put_fat+0x1c4>
 8001716:	bf00      	nop
 8001718:	e004      	b.n	8001724 <put_fat+0x1c4>
 800171a:	bf00      	nop
 800171c:	e002      	b.n	8001724 <put_fat+0x1c4>
 800171e:	bf00      	nop
 8001720:	e000      	b.n	8001724 <put_fat+0x1c4>
 8001722:	bf00      	nop
 8001724:	7ffb      	ldrb	r3, [r7, #31]
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd90      	pop	{r4, r7, pc}

0800172e <remove_chain>:
 800172e:	b580      	push	{r7, lr}
 8001730:	b088      	sub	sp, #32
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	2300      	movs	r3, #0
 800173c:	77fb      	strb	r3, [r7, #31]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d904      	bls.n	8001754 <remove_chain+0x26>
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	429a      	cmp	r2, r3
 8001752:	d301      	bcc.n	8001758 <remove_chain+0x2a>
 8001754:	2302      	movs	r3, #2
 8001756:	e04b      	b.n	80017f0 <remove_chain+0xc2>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00c      	beq.n	8001778 <remove_chain+0x4a>
 800175e:	f04f 32ff 	mov.w	r2, #4294967295
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	69b8      	ldr	r0, [r7, #24]
 8001766:	f7ff fefb 	bl	8001560 <put_fat>
 800176a:	4603      	mov	r3, r0
 800176c:	77fb      	strb	r3, [r7, #31]
 800176e:	7ffb      	ldrb	r3, [r7, #31]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <remove_chain+0x4a>
 8001774:	7ffb      	ldrb	r3, [r7, #31]
 8001776:	e03b      	b.n	80017f0 <remove_chain+0xc2>
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f7ff fe4b 	bl	8001416 <get_fat>
 8001780:	6178      	str	r0, [r7, #20]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d031      	beq.n	80017ec <remove_chain+0xbe>
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d101      	bne.n	8001792 <remove_chain+0x64>
 800178e:	2302      	movs	r3, #2
 8001790:	e02e      	b.n	80017f0 <remove_chain+0xc2>
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d101      	bne.n	800179e <remove_chain+0x70>
 800179a:	2301      	movs	r3, #1
 800179c:	e028      	b.n	80017f0 <remove_chain+0xc2>
 800179e:	2200      	movs	r2, #0
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	69b8      	ldr	r0, [r7, #24]
 80017a4:	f7ff fedc 	bl	8001560 <put_fat>
 80017a8:	4603      	mov	r3, r0
 80017aa:	77fb      	strb	r3, [r7, #31]
 80017ac:	7ffb      	ldrb	r3, [r7, #31]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <remove_chain+0x88>
 80017b2:	7ffb      	ldrb	r3, [r7, #31]
 80017b4:	e01c      	b.n	80017f0 <remove_chain+0xc2>
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	3b02      	subs	r3, #2
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d20b      	bcs.n	80017dc <remove_chain+0xae>
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	791b      	ldrb	r3, [r3, #4]
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	711a      	strb	r2, [r3, #4]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d3c6      	bcc.n	8001778 <remove_chain+0x4a>
 80017ea:	e000      	b.n	80017ee <remove_chain+0xc0>
 80017ec:	bf00      	nop
 80017ee:	2300      	movs	r3, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <create_chain>:
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10d      	bne.n	800182a <create_chain+0x32>
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d004      	beq.n	8001824 <create_chain+0x2c>
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	429a      	cmp	r2, r3
 8001822:	d31b      	bcc.n	800185c <create_chain+0x64>
 8001824:	2301      	movs	r3, #1
 8001826:	61bb      	str	r3, [r7, #24]
 8001828:	e018      	b.n	800185c <create_chain+0x64>
 800182a:	6839      	ldr	r1, [r7, #0]
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fdf2 	bl	8001416 <get_fat>
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d801      	bhi.n	800183e <create_chain+0x46>
 800183a:	2301      	movs	r3, #1
 800183c:	e0a9      	b.n	8001992 <create_chain+0x19a>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d101      	bne.n	800184a <create_chain+0x52>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	e0a3      	b.n	8001992 <create_chain+0x19a>
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d201      	bcs.n	8001858 <create_chain+0x60>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	e09c      	b.n	8001992 <create_chain+0x19a>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <create_chain+0x70>
 8001864:	2300      	movs	r3, #0
 8001866:	e094      	b.n	8001992 <create_chain+0x19a>
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d129      	bne.n	80018c8 <create_chain+0xd0>
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	3301      	adds	r3, #1
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	429a      	cmp	r2, r3
 8001882:	d301      	bcc.n	8001888 <create_chain+0x90>
 8001884:	2302      	movs	r3, #2
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	69f9      	ldr	r1, [r7, #28]
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fdc3 	bl	8001416 <get_fat>
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d003      	beq.n	80018a0 <create_chain+0xa8>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189e:	d101      	bne.n	80018a4 <create_chain+0xac>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	e076      	b.n	8001992 <create_chain+0x19a>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00e      	beq.n	80018c8 <create_chain+0xd0>
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d906      	bls.n	80018c4 <create_chain+0xcc>
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d201      	bcs.n	80018c4 <create_chain+0xcc>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d129      	bne.n	8001922 <create_chain+0x12a>
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d307      	bcc.n	80018f2 <create_chain+0xfa>
 80018e2:	2302      	movs	r3, #2
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d901      	bls.n	80018f2 <create_chain+0xfa>
 80018ee:	2300      	movs	r3, #0
 80018f0:	e04f      	b.n	8001992 <create_chain+0x19a>
 80018f2:	69f9      	ldr	r1, [r7, #28]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fd8e 	bl	8001416 <get_fat>
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00e      	beq.n	8001920 <create_chain+0x128>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d003      	beq.n	8001910 <create_chain+0x118>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190e:	d101      	bne.n	8001914 <create_chain+0x11c>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	e03e      	b.n	8001992 <create_chain+0x19a>
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	429a      	cmp	r2, r3
 800191a:	d1da      	bne.n	80018d2 <create_chain+0xda>
 800191c:	2300      	movs	r3, #0
 800191e:	e038      	b.n	8001992 <create_chain+0x19a>
 8001920:	bf00      	nop
 8001922:	f04f 32ff 	mov.w	r2, #4294967295
 8001926:	69f9      	ldr	r1, [r7, #28]
 8001928:	6938      	ldr	r0, [r7, #16]
 800192a:	f7ff fe19 	bl	8001560 <put_fat>
 800192e:	4603      	mov	r3, r0
 8001930:	75fb      	strb	r3, [r7, #23]
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <create_chain+0x154>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d006      	beq.n	800194c <create_chain+0x154>
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	6839      	ldr	r1, [r7, #0]
 8001942:	6938      	ldr	r0, [r7, #16]
 8001944:	f7ff fe0c 	bl	8001560 <put_fat>
 8001948:	4603      	mov	r3, r0
 800194a:	75fb      	strb	r3, [r7, #23]
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <create_chain+0x188>
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	3b02      	subs	r3, #2
 8001962:	429a      	cmp	r2, r3
 8001964:	d804      	bhi.n	8001970 <create_chain+0x178>
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	1e5a      	subs	r2, r3, #1
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	791b      	ldrb	r3, [r3, #4]
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	b2da      	uxtb	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	711a      	strb	r2, [r3, #4]
 800197e:	e007      	b.n	8001990 <create_chain+0x198>
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d102      	bne.n	800198c <create_chain+0x194>
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e000      	b.n	800198e <create_chain+0x196>
 800198c:	2301      	movs	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	4618      	mov	r0, r3
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <dir_clear>:
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff fc40 	bl	800122a <sync_window>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <dir_clear+0x1a>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e036      	b.n	8001a22 <dir_clear+0x88>
 80019b4:	6839      	ldr	r1, [r7, #0]
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff fd0e 	bl	80013d8 <clst2sect>
 80019bc:	6138      	str	r0, [r7, #16]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3330      	adds	r3, #48	; 0x30
 80019c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fb85 	bl	80010de <mem_set>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3330      	adds	r3, #48	; 0x30
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	2301      	movs	r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e003      	b.n	80019ec <dir_clear+0x52>
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	4413      	add	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	895b      	ldrh	r3, [r3, #10]
 80019f0:	461a      	mov	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d20b      	bcs.n	8001a10 <dir_clear+0x76>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7858      	ldrb	r0, [r3, #1]
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	441a      	add	r2, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	f7ff f87b 	bl	8000b00 <disk_write>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0e9      	beq.n	80019e4 <dir_clear+0x4a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	895b      	ldrh	r3, [r3, #10]
 8001a14:	461a      	mov	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	bf14      	ite	ne
 8001a1c:	2301      	movne	r3, #1
 8001a1e:	2300      	moveq	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <dir_sdi>:
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a40:	d204      	bcs.n	8001a4c <dir_sdi+0x22>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <dir_sdi+0x26>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e063      	b.n	8001b18 <dir_sdi+0xee>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	611a      	str	r2, [r3, #16]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <dir_sdi+0x46>
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d902      	bls.n	8001a70 <dir_sdi+0x46>
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10c      	bne.n	8001a90 <dir_sdi+0x66>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	095b      	lsrs	r3, r3, #5
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	8912      	ldrh	r2, [r2, #8]
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d301      	bcc.n	8001a86 <dir_sdi+0x5c>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e048      	b.n	8001b18 <dir_sdi+0xee>
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	619a      	str	r2, [r3, #24]
 8001a8e:	e029      	b.n	8001ae4 <dir_sdi+0xba>
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	895b      	ldrh	r3, [r3, #10]
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e019      	b.n	8001ace <dir_sdi+0xa4>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6979      	ldr	r1, [r7, #20]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fcb9 	bl	8001416 <get_fat>
 8001aa4:	6178      	str	r0, [r7, #20]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d101      	bne.n	8001ab2 <dir_sdi+0x88>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e032      	b.n	8001b18 <dir_sdi+0xee>
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d904      	bls.n	8001ac2 <dir_sdi+0x98>
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d301      	bcc.n	8001ac6 <dir_sdi+0x9c>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e028      	b.n	8001b18 <dir_sdi+0xee>
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d2e1      	bcs.n	8001a9a <dir_sdi+0x70>
 8001ad6:	6979      	ldr	r1, [r7, #20]
 8001ad8:	6938      	ldr	r0, [r7, #16]
 8001ada:	f7ff fc7d 	bl	80013d8 <clst2sect>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	615a      	str	r2, [r3, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <dir_sdi+0xcc>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e010      	b.n	8001b18 <dir_sdi+0xee>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	0a5b      	lsrs	r3, r3, #9
 8001afe:	441a      	add	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	619a      	str	r2, [r3, #24]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b10:	441a      	add	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	61da      	str	r2, [r3, #28]
 8001b16:	2300      	movs	r3, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <dir_next>:
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	3320      	adds	r3, #32
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b3e:	d302      	bcc.n	8001b46 <dir_next+0x26>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <dir_next+0x32>
 8001b4e:	2304      	movs	r3, #4
 8001b50:	e078      	b.n	8001c44 <dir_next+0x124>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d166      	bne.n	8001c2a <dir_next+0x10a>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	619a      	str	r2, [r3, #24]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10a      	bne.n	8001b84 <dir_next+0x64>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	095b      	lsrs	r3, r3, #5
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	8912      	ldrh	r2, [r2, #8]
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d357      	bcc.n	8001c2a <dir_next+0x10a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
 8001b80:	2304      	movs	r3, #4
 8001b82:	e05f      	b.n	8001c44 <dir_next+0x124>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	0a5b      	lsrs	r3, r3, #9
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	8952      	ldrh	r2, [r2, #10]
 8001b8c:	3a01      	subs	r2, #1
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d14a      	bne.n	8001c2a <dir_next+0x10a>
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	f7ff fc3a 	bl	8001416 <get_fat>
 8001ba2:	6178      	str	r0, [r7, #20]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d801      	bhi.n	8001bae <dir_next+0x8e>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e04a      	b.n	8001c44 <dir_next+0x124>
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d101      	bne.n	8001bba <dir_next+0x9a>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e044      	b.n	8001c44 <dir_next+0x124>
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d328      	bcc.n	8001c16 <dir_next+0xf6>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d104      	bne.n	8001bd4 <dir_next+0xb4>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	e037      	b.n	8001c44 <dir_next+0x124>
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4610      	mov	r0, r2
 8001bde:	f7ff fe0b 	bl	80017f8 <create_chain>
 8001be2:	6178      	str	r0, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <dir_next+0xce>
 8001bea:	2307      	movs	r3, #7
 8001bec:	e02a      	b.n	8001c44 <dir_next+0x124>
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <dir_next+0xd8>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e025      	b.n	8001c44 <dir_next+0x124>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfe:	d101      	bne.n	8001c04 <dir_next+0xe4>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e01f      	b.n	8001c44 <dir_next+0x124>
 8001c04:	6979      	ldr	r1, [r7, #20]
 8001c06:	6938      	ldr	r0, [r7, #16]
 8001c08:	f7ff fec7 	bl	800199a <dir_clear>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <dir_next+0xf6>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e016      	b.n	8001c44 <dir_next+0x124>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	615a      	str	r2, [r3, #20]
 8001c1c:	6979      	ldr	r1, [r7, #20]
 8001c1e:	6938      	ldr	r0, [r7, #16]
 8001c20:	f7ff fbda 	bl	80013d8 <clst2sect>
 8001c24:	4602      	mov	r2, r0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	619a      	str	r2, [r3, #24]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c3c:	441a      	add	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	61da      	str	r2, [r3, #28]
 8001c42:	2300      	movs	r3, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <dir_alloc>:
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fee3 	bl	8001a2a <dir_sdi>
 8001c64:	4603      	mov	r3, r0
 8001c66:	75fb      	strb	r3, [r7, #23]
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d12b      	bne.n	8001cc6 <dir_alloc+0x7a>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	4619      	mov	r1, r3
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f7ff fb12 	bl	80012a2 <move_window>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	75fb      	strb	r3, [r7, #23]
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d11d      	bne.n	8001cc4 <dir_alloc+0x78>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2be5      	cmp	r3, #229	; 0xe5
 8001c90:	d004      	beq.n	8001c9c <dir_alloc+0x50>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d107      	bne.n	8001cac <dir_alloc+0x60>
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d102      	bne.n	8001cb0 <dir_alloc+0x64>
 8001caa:	e00c      	b.n	8001cc6 <dir_alloc+0x7a>
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ff34 	bl	8001b20 <dir_next>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	75fb      	strb	r3, [r7, #23]
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0d7      	beq.n	8001c72 <dir_alloc+0x26>
 8001cc2:	e000      	b.n	8001cc6 <dir_alloc+0x7a>
 8001cc4:	bf00      	nop
 8001cc6:	7dfb      	ldrb	r3, [r7, #23]
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d101      	bne.n	8001cd0 <dir_alloc+0x84>
 8001ccc:	2307      	movs	r3, #7
 8001cce:	75fb      	strb	r3, [r7, #23]
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <ld_clust>:
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	331a      	adds	r3, #26
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff f955 	bl	8000f98 <ld_word>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d109      	bne.n	8001d0e <ld_clust+0x34>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	3314      	adds	r3, #20
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f94a 	bl	8000f98 <ld_word>
 8001d04:	4603      	mov	r3, r0
 8001d06:	041b      	lsls	r3, r3, #16
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <st_clust>:
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	331a      	adds	r3, #26
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	b292      	uxth	r2, r2
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f96d 	bl	800100e <st_word>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d109      	bne.n	8001d50 <st_clust+0x38>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f103 0214 	add.w	r2, r3, #20
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f7ff f95f 	bl	800100e <st_word>
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <dir_find>:
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	2100      	movs	r1, #0
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff fe5e 	bl	8001a2a <dir_sdi>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	75fb      	strb	r3, [r7, #23]
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <dir_find+0x24>
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	e03e      	b.n	8001dfa <dir_find+0xa2>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4619      	mov	r1, r3
 8001d82:	6938      	ldr	r0, [r7, #16]
 8001d84:	f7ff fa8d 	bl	80012a2 <move_window>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	75fb      	strb	r3, [r7, #23]
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d12f      	bne.n	8001df2 <dir_find+0x9a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <dir_find+0x4e>
 8001da0:	2304      	movs	r3, #4
 8001da2:	75fb      	strb	r3, [r7, #23]
 8001da4:	e028      	b.n	8001df8 <dir_find+0xa0>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	330b      	adds	r3, #11
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	719a      	strb	r2, [r3, #6]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	330b      	adds	r3, #11
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10a      	bne.n	8001dde <dir_find+0x86>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69d8      	ldr	r0, [r3, #28]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3320      	adds	r3, #32
 8001dd0:	220b      	movs	r2, #11
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7ff f99d 	bl	8001112 <mem_cmp>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <dir_find+0x9e>
 8001dde:	2100      	movs	r1, #0
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff fe9d 	bl	8001b20 <dir_next>
 8001de6:	4603      	mov	r3, r0
 8001de8:	75fb      	strb	r3, [r7, #23]
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0c5      	beq.n	8001d7c <dir_find+0x24>
 8001df0:	e002      	b.n	8001df8 <dir_find+0xa0>
 8001df2:	bf00      	nop
 8001df4:	e000      	b.n	8001df8 <dir_find+0xa0>
 8001df6:	bf00      	nop
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <dir_register>:
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	2101      	movs	r1, #1
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff1a 	bl	8001c4c <dir_alloc>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	73fb      	strb	r3, [r7, #15]
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d11c      	bne.n	8001e5c <dir_register+0x5a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	4619      	mov	r1, r3
 8001e28:	68b8      	ldr	r0, [r7, #8]
 8001e2a:	f7ff fa3a 	bl	80012a2 <move_window>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	73fb      	strb	r3, [r7, #15]
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d111      	bne.n	8001e5c <dir_register+0x5a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f94c 	bl	80010de <mem_set>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69d8      	ldr	r0, [r3, #28]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3320      	adds	r3, #32
 8001e4e:	220b      	movs	r2, #11
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7ff f923 	bl	800109c <mem_cpy>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	70da      	strb	r2, [r3, #3]
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <create_name>:
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3320      	adds	r3, #32
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	220b      	movs	r2, #11
 8001e80:	2120      	movs	r1, #32
 8001e82:	6938      	ldr	r0, [r7, #16]
 8001e84:	f7ff f92b 	bl	80010de <mem_set>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	2308      	movs	r3, #8
 8001e92:	623b      	str	r3, [r7, #32]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	61fa      	str	r2, [r7, #28]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d97c      	bls.n	8001fa6 <create_name+0x13e>
 8001eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eb0:	2b2f      	cmp	r3, #47	; 0x2f
 8001eb2:	d007      	beq.n	8001ec4 <create_name+0x5c>
 8001eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eb8:	2b5c      	cmp	r3, #92	; 0x5c
 8001eba:	d110      	bne.n	8001ede <create_name+0x76>
 8001ebc:	e002      	b.n	8001ec4 <create_name+0x5c>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	4413      	add	r3, r2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b2f      	cmp	r3, #47	; 0x2f
 8001ece:	d0f6      	beq.n	8001ebe <create_name+0x56>
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b5c      	cmp	r3, #92	; 0x5c
 8001eda:	d0f0      	beq.n	8001ebe <create_name+0x56>
 8001edc:	e064      	b.n	8001fa8 <create_name+0x140>
 8001ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8001ee4:	d003      	beq.n	8001eee <create_name+0x86>
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d30d      	bcc.n	8001f0a <create_name+0xa2>
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	2b0b      	cmp	r3, #11
 8001ef2:	d003      	beq.n	8001efc <create_name+0x94>
 8001ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8001efa:	d001      	beq.n	8001f00 <create_name+0x98>
 8001efc:	2306      	movs	r3, #6
 8001efe:	e06f      	b.n	8001fe0 <create_name+0x178>
 8001f00:	2308      	movs	r3, #8
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	230b      	movs	r3, #11
 8001f06:	623b      	str	r3, [r7, #32]
 8001f08:	e04c      	b.n	8001fa4 <create_name+0x13c>
 8001f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f941 	bl	8001196 <dbc_1st>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d024      	beq.n	8001f64 <create_name+0xfc>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	61fa      	str	r2, [r7, #28]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f953 	bl	80011d6 <dbc_2nd>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <create_name+0xd8>
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d301      	bcc.n	8001f44 <create_name+0xdc>
 8001f40:	2306      	movs	r3, #6
 8001f42:	e04d      	b.n	8001fe0 <create_name+0x178>
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	61ba      	str	r2, [r7, #24]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	61ba      	str	r2, [r7, #24]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	e797      	b.n	8001e94 <create_name+0x2c>
 8001f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f68:	4619      	mov	r1, r3
 8001f6a:	481f      	ldr	r0, [pc, #124]	; (8001fe8 <create_name+0x180>)
 8001f6c:	f7ff f8f8 	bl	8001160 <chk_chr>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <create_name+0x112>
 8001f76:	2306      	movs	r3, #6
 8001f78:	e032      	b.n	8001fe0 <create_name+0x178>
 8001f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f7e:	2b60      	cmp	r3, #96	; 0x60
 8001f80:	d908      	bls.n	8001f94 <create_name+0x12c>
 8001f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f86:	2b7a      	cmp	r3, #122	; 0x7a
 8001f88:	d804      	bhi.n	8001f94 <create_name+0x12c>
 8001f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f8e:	3b20      	subs	r3, #32
 8001f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	61ba      	str	r2, [r7, #24]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e776      	b.n	8001e94 <create_name+0x2c>
 8001fa6:	bf00      	nop
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	441a      	add	r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <create_name+0x154>
 8001fb8:	2306      	movs	r3, #6
 8001fba:	e011      	b.n	8001fe0 <create_name+0x178>
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2be5      	cmp	r3, #229	; 0xe5
 8001fc2:	d102      	bne.n	8001fca <create_name+0x162>
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2205      	movs	r2, #5
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d801      	bhi.n	8001fd6 <create_name+0x16e>
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	e000      	b.n	8001fd8 <create_name+0x170>
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	330b      	adds	r3, #11
 8001fdc:	701a      	strb	r2, [r3, #0]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	08006a1c 	.word	0x08006a1c

08001fec <follow_path>:
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	e002      	b.n	8002004 <follow_path+0x18>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b2f      	cmp	r3, #47	; 0x2f
 800200a:	d0f8      	beq.n	8001ffe <follow_path+0x12>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b5c      	cmp	r3, #92	; 0x5c
 8002012:	d0f4      	beq.n	8001ffe <follow_path+0x12>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b1f      	cmp	r3, #31
 8002020:	d80a      	bhi.n	8002038 <follow_path+0x4c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800202a:	2100      	movs	r1, #0
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fcfc 	bl	8001a2a <dir_sdi>
 8002032:	4603      	mov	r3, r0
 8002034:	75fb      	strb	r3, [r7, #23]
 8002036:	e043      	b.n	80020c0 <follow_path+0xd4>
 8002038:	463b      	mov	r3, r7
 800203a:	4619      	mov	r1, r3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff13 	bl	8001e68 <create_name>
 8002042:	4603      	mov	r3, r0
 8002044:	75fb      	strb	r3, [r7, #23]
 8002046:	7dfb      	ldrb	r3, [r7, #23]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d134      	bne.n	80020b6 <follow_path+0xca>
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff fe83 	bl	8001d58 <dir_find>
 8002052:	4603      	mov	r3, r0
 8002054:	75fb      	strb	r3, [r7, #23]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800205c:	73fb      	strb	r3, [r7, #15]
 800205e:	7dfb      	ldrb	r3, [r7, #23]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <follow_path+0x8e>
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d127      	bne.n	80020ba <follow_path+0xce>
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d122      	bne.n	80020ba <follow_path+0xce>
 8002074:	2305      	movs	r3, #5
 8002076:	75fb      	strb	r3, [r7, #23]
 8002078:	e01f      	b.n	80020ba <follow_path+0xce>
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d11c      	bne.n	80020be <follow_path+0xd2>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	799b      	ldrb	r3, [r3, #6]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <follow_path+0xaa>
 8002090:	2305      	movs	r3, #5
 8002092:	75fb      	strb	r3, [r7, #23]
 8002094:	e014      	b.n	80020c0 <follow_path+0xd4>
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a4:	4413      	add	r3, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	6938      	ldr	r0, [r7, #16]
 80020aa:	f7ff fe16 	bl	8001cda <ld_clust>
 80020ae:	4602      	mov	r2, r0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	e7c0      	b.n	8002038 <follow_path+0x4c>
 80020b6:	bf00      	nop
 80020b8:	e002      	b.n	80020c0 <follow_path+0xd4>
 80020ba:	bf00      	nop
 80020bc:	e000      	b.n	80020c0 <follow_path+0xd4>
 80020be:	bf00      	nop
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <get_ldnumber>:
 80020ca:	b480      	push	{r7}
 80020cc:	b089      	sub	sp, #36	; 0x24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <get_ldnumber+0x22>
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	e02d      	b.n	8002148 <get_ldnumber+0x7e>
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	61fa      	str	r2, [r7, #28]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	2b20      	cmp	r3, #32
 80020fa:	d902      	bls.n	8002102 <get_ldnumber+0x38>
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b3a      	cmp	r3, #58	; 0x3a
 8002100:	d1f4      	bne.n	80020ec <get_ldnumber+0x22>
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	2b3a      	cmp	r3, #58	; 0x3a
 8002106:	d11c      	bne.n	8002142 <get_ldnumber+0x78>
 8002108:	2301      	movs	r3, #1
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b2f      	cmp	r3, #47	; 0x2f
 8002112:	d90c      	bls.n	800212e <get_ldnumber+0x64>
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b39      	cmp	r3, #57	; 0x39
 800211a:	d808      	bhi.n	800212e <get_ldnumber+0x64>
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	3302      	adds	r3, #2
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	429a      	cmp	r2, r3
 8002124:	d103      	bne.n	800212e <get_ldnumber+0x64>
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	3b30      	subs	r3, #48	; 0x30
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	dc04      	bgt.n	800213e <get_ldnumber+0x74>
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	e002      	b.n	8002148 <get_ldnumber+0x7e>
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	4618      	mov	r0, r3
 800214a:	3724      	adds	r7, #36	; 0x24
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <check_fs>:
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	70da      	strb	r2, [r3, #3]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f04f 32ff 	mov.w	r2, #4294967295
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
 800216c:	6839      	ldr	r1, [r7, #0]
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff f897 	bl	80012a2 <move_window>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <check_fs+0x2a>
 800217a:	2304      	movs	r3, #4
 800217c:	e038      	b.n	80021f0 <check_fs+0x9c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3330      	adds	r3, #48	; 0x30
 8002182:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe ff06 	bl	8000f98 <ld_word>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <check_fs+0x48>
 8002198:	2303      	movs	r3, #3
 800219a:	e029      	b.n	80021f0 <check_fs+0x9c>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021a2:	2be9      	cmp	r3, #233	; 0xe9
 80021a4:	d009      	beq.n	80021ba <check_fs+0x66>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ac:	2beb      	cmp	r3, #235	; 0xeb
 80021ae:	d004      	beq.n	80021ba <check_fs+0x66>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021b6:	2be8      	cmp	r3, #232	; 0xe8
 80021b8:	d119      	bne.n	80021ee <check_fs+0x9a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3330      	adds	r3, #48	; 0x30
 80021be:	3336      	adds	r3, #54	; 0x36
 80021c0:	2203      	movs	r2, #3
 80021c2:	490d      	ldr	r1, [pc, #52]	; (80021f8 <check_fs+0xa4>)
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe ffa4 	bl	8001112 <mem_cmp>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <check_fs+0x80>
 80021d0:	2300      	movs	r3, #0
 80021d2:	e00d      	b.n	80021f0 <check_fs+0x9c>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3330      	adds	r3, #48	; 0x30
 80021d8:	3352      	adds	r3, #82	; 0x52
 80021da:	2205      	movs	r2, #5
 80021dc:	4907      	ldr	r1, [pc, #28]	; (80021fc <check_fs+0xa8>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe ff97 	bl	8001112 <mem_cmp>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <check_fs+0x9a>
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <check_fs+0x9c>
 80021ee:	2302      	movs	r3, #2
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	08006a2c 	.word	0x08006a2c
 80021fc:	08006a30 	.word	0x08006a30

08002200 <find_volume>:
 8002200:	b580      	push	{r7, lr}
 8002202:	b096      	sub	sp, #88	; 0x58
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	4613      	mov	r3, r2
 800220c:	71fb      	strb	r3, [r7, #7]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff ff58 	bl	80020ca <get_ldnumber>
 800221a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800221c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800221e:	2b00      	cmp	r3, #0
 8002220:	da01      	bge.n	8002226 <find_volume+0x26>
 8002222:	230b      	movs	r3, #11
 8002224:	e238      	b.n	8002698 <find_volume+0x498>
 8002226:	4aa8      	ldr	r2, [pc, #672]	; (80024c8 <find_volume+0x2c8>)
 8002228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800222a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <find_volume+0x3a>
 8002236:	230c      	movs	r3, #12
 8002238:	e22e      	b.n	8002698 <find_volume+0x498>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	71fb      	strb	r3, [r7, #7]
 8002248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d01a      	beq.n	8002286 <find_volume+0x86>
 8002250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002252:	785b      	ldrb	r3, [r3, #1]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fbd3 	bl	8000a00 <disk_status>
 800225a:	4603      	mov	r3, r0
 800225c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002260:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10c      	bne.n	8002286 <find_volume+0x86>
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <find_volume+0x82>
 8002272:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <find_volume+0x82>
 800227e:	230a      	movs	r3, #10
 8002280:	e20a      	b.n	8002698 <find_volume+0x498>
 8002282:	2300      	movs	r3, #0
 8002284:	e208      	b.n	8002698 <find_volume+0x498>
 8002286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
 800228c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800228e:	b2da      	uxtb	r2, r3
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	705a      	strb	r2, [r3, #1]
 8002294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002296:	785b      	ldrb	r3, [r3, #1]
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe fac7 	bl	800082c <disk_initialize>
 800229e:	4603      	mov	r3, r0
 80022a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80022a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <find_volume+0xb4>
 80022b0:	2303      	movs	r3, #3
 80022b2:	e1f1      	b.n	8002698 <find_volume+0x498>
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <find_volume+0xca>
 80022ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <find_volume+0xca>
 80022c6:	230a      	movs	r3, #10
 80022c8:	e1e6      	b.n	8002698 <find_volume+0x498>
 80022ca:	2300      	movs	r3, #0
 80022cc:	653b      	str	r3, [r7, #80]	; 0x50
 80022ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80022d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80022d2:	f7ff ff3f 	bl	8002154 <check_fs>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80022dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d14b      	bne.n	800237c <find_volume+0x17c>
 80022e4:	2300      	movs	r3, #0
 80022e6:	643b      	str	r3, [r7, #64]	; 0x40
 80022e8:	e01f      	b.n	800232a <find_volume+0x12a>
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80022f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80022f8:	4413      	add	r3, r2
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	3304      	adds	r3, #4
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d006      	beq.n	8002314 <find_volume+0x114>
 8002306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002308:	3308      	adds	r3, #8
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fe5c 	bl	8000fc8 <ld_dword>
 8002310:	4602      	mov	r2, r0
 8002312:	e000      	b.n	8002316 <find_volume+0x116>
 8002314:	2200      	movs	r2, #0
 8002316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800231e:	440b      	add	r3, r1
 8002320:	f843 2c44 	str.w	r2, [r3, #-68]
 8002324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002326:	3301      	adds	r3, #1
 8002328:	643b      	str	r3, [r7, #64]	; 0x40
 800232a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232c:	2b03      	cmp	r3, #3
 800232e:	d9dc      	bls.n	80022ea <find_volume+0xea>
 8002330:	2300      	movs	r3, #0
 8002332:	643b      	str	r3, [r7, #64]	; 0x40
 8002334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <find_volume+0x140>
 800233a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233c:	3b01      	subs	r3, #1
 800233e:	643b      	str	r3, [r7, #64]	; 0x40
 8002340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002348:	4413      	add	r3, r2
 800234a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800234e:	653b      	str	r3, [r7, #80]	; 0x50
 8002350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <find_volume+0x162>
 8002356:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002358:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800235a:	f7ff fefb 	bl	8002154 <check_fs>
 800235e:	4603      	mov	r3, r0
 8002360:	e000      	b.n	8002364 <find_volume+0x164>
 8002362:	2303      	movs	r3, #3
 8002364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800236c:	2b01      	cmp	r3, #1
 800236e:	d905      	bls.n	800237c <find_volume+0x17c>
 8002370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002372:	3301      	adds	r3, #1
 8002374:	643b      	str	r3, [r7, #64]	; 0x40
 8002376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002378:	2b03      	cmp	r3, #3
 800237a:	d9e1      	bls.n	8002340 <find_volume+0x140>
 800237c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002380:	2b04      	cmp	r3, #4
 8002382:	d101      	bne.n	8002388 <find_volume+0x188>
 8002384:	2301      	movs	r3, #1
 8002386:	e187      	b.n	8002698 <find_volume+0x498>
 8002388:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800238c:	2b01      	cmp	r3, #1
 800238e:	d901      	bls.n	8002394 <find_volume+0x194>
 8002390:	230d      	movs	r3, #13
 8002392:	e181      	b.n	8002698 <find_volume+0x498>
 8002394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002396:	3330      	adds	r3, #48	; 0x30
 8002398:	330b      	adds	r3, #11
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fdfc 	bl	8000f98 <ld_word>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023a6:	d001      	beq.n	80023ac <find_volume+0x1ac>
 80023a8:	230d      	movs	r3, #13
 80023aa:	e175      	b.n	8002698 <find_volume+0x498>
 80023ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ae:	3330      	adds	r3, #48	; 0x30
 80023b0:	3316      	adds	r3, #22
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fdf0 	bl	8000f98 <ld_word>
 80023b8:	4603      	mov	r3, r0
 80023ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <find_volume+0x1d0>
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c4:	3330      	adds	r3, #48	; 0x30
 80023c6:	3324      	adds	r3, #36	; 0x24
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fdfd 	bl	8000fc8 <ld_dword>
 80023ce:	64f8      	str	r0, [r7, #76]	; 0x4c
 80023d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023d4:	619a      	str	r2, [r3, #24]
 80023d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80023dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023de:	709a      	strb	r2, [r3, #2]
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	789b      	ldrb	r3, [r3, #2]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d005      	beq.n	80023f4 <find_volume+0x1f4>
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	789b      	ldrb	r3, [r3, #2]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d001      	beq.n	80023f4 <find_volume+0x1f4>
 80023f0:	230d      	movs	r3, #13
 80023f2:	e151      	b.n	8002698 <find_volume+0x498>
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	789b      	ldrb	r3, [r3, #2]
 80023f8:	461a      	mov	r2, r3
 80023fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023fc:	fb02 f303 	mul.w	r3, r2, r3
 8002400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b29a      	uxth	r2, r3
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	815a      	strh	r2, [r3, #10]
 800240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002410:	895b      	ldrh	r3, [r3, #10]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <find_volume+0x228>
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	895b      	ldrh	r3, [r3, #10]
 800241a:	461a      	mov	r2, r3
 800241c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241e:	895b      	ldrh	r3, [r3, #10]
 8002420:	3b01      	subs	r3, #1
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <find_volume+0x22c>
 8002428:	230d      	movs	r3, #13
 800242a:	e135      	b.n	8002698 <find_volume+0x498>
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	3330      	adds	r3, #48	; 0x30
 8002430:	3311      	adds	r3, #17
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fdb0 	bl	8000f98 <ld_word>
 8002438:	4603      	mov	r3, r0
 800243a:	461a      	mov	r2, r3
 800243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243e:	811a      	strh	r2, [r3, #8]
 8002440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002442:	891b      	ldrh	r3, [r3, #8]
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <find_volume+0x252>
 800244e:	230d      	movs	r3, #13
 8002450:	e122      	b.n	8002698 <find_volume+0x498>
 8002452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002454:	3330      	adds	r3, #48	; 0x30
 8002456:	3313      	adds	r3, #19
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe fd9d 	bl	8000f98 <ld_word>
 800245e:	4603      	mov	r3, r0
 8002460:	64bb      	str	r3, [r7, #72]	; 0x48
 8002462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <find_volume+0x276>
 8002468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246a:	3330      	adds	r3, #48	; 0x30
 800246c:	3320      	adds	r3, #32
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fdaa 	bl	8000fc8 <ld_dword>
 8002474:	64b8      	str	r0, [r7, #72]	; 0x48
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	3330      	adds	r3, #48	; 0x30
 800247a:	330e      	adds	r3, #14
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fd8b 	bl	8000f98 <ld_word>
 8002482:	4603      	mov	r3, r0
 8002484:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002486:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <find_volume+0x290>
 800248c:	230d      	movs	r3, #13
 800248e:	e103      	b.n	8002698 <find_volume+0x498>
 8002490:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002494:	4413      	add	r3, r2
 8002496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002498:	8912      	ldrh	r2, [r2, #8]
 800249a:	0912      	lsrs	r2, r2, #4
 800249c:	b292      	uxth	r2, r2
 800249e:	4413      	add	r3, r2
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d201      	bcs.n	80024ae <find_volume+0x2ae>
 80024aa:	230d      	movs	r3, #13
 80024ac:	e0f4      	b.n	8002698 <find_volume+0x498>
 80024ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024b6:	8952      	ldrh	r2, [r2, #10]
 80024b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d103      	bne.n	80024cc <find_volume+0x2cc>
 80024c4:	230d      	movs	r3, #13
 80024c6:	e0e7      	b.n	8002698 <find_volume+0x498>
 80024c8:	20000030 	.word	0x20000030
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	4a72      	ldr	r2, [pc, #456]	; (80026a0 <find_volume+0x4a0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d802      	bhi.n	80024e0 <find_volume+0x2e0>
 80024da:	2303      	movs	r3, #3
 80024dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d802      	bhi.n	80024f0 <find_volume+0x2f0>
 80024ea:	2302      	movs	r3, #2
 80024ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d802      	bhi.n	8002500 <find_volume+0x300>
 80024fa:	2301      	movs	r3, #1
 80024fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <find_volume+0x30c>
 8002508:	230d      	movs	r3, #13
 800250a:	e0c5      	b.n	8002698 <find_volume+0x498>
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	1c9a      	adds	r2, r3, #2
 8002510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002512:	615a      	str	r2, [r3, #20]
 8002514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002516:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002518:	61da      	str	r2, [r3, #28]
 800251a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800251c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800251e:	441a      	add	r2, r3
 8002520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002522:	621a      	str	r2, [r3, #32]
 8002524:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	441a      	add	r2, r3
 800252a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
 800252e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002532:	2b03      	cmp	r3, #3
 8002534:	d11e      	bne.n	8002574 <find_volume+0x374>
 8002536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002538:	3330      	adds	r3, #48	; 0x30
 800253a:	332a      	adds	r3, #42	; 0x2a
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fd2b 	bl	8000f98 <ld_word>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <find_volume+0x34c>
 8002548:	230d      	movs	r3, #13
 800254a:	e0a5      	b.n	8002698 <find_volume+0x498>
 800254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254e:	891b      	ldrh	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <find_volume+0x358>
 8002554:	230d      	movs	r3, #13
 8002556:	e09f      	b.n	8002698 <find_volume+0x498>
 8002558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255a:	3330      	adds	r3, #48	; 0x30
 800255c:	332c      	adds	r3, #44	; 0x2c
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fd32 	bl	8000fc8 <ld_dword>
 8002564:	4602      	mov	r2, r0
 8002566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	647b      	str	r3, [r7, #68]	; 0x44
 8002572:	e01f      	b.n	80025b4 <find_volume+0x3b4>
 8002574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002576:	891b      	ldrh	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <find_volume+0x380>
 800257c:	230d      	movs	r3, #13
 800257e:	e08b      	b.n	8002698 <find_volume+0x498>
 8002580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002582:	6a1a      	ldr	r2, [r3, #32]
 8002584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002586:	441a      	add	r2, r3
 8002588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258a:	625a      	str	r2, [r3, #36]	; 0x24
 800258c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002590:	2b02      	cmp	r3, #2
 8002592:	d103      	bne.n	800259c <find_volume+0x39c>
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	e00a      	b.n	80025b2 <find_volume+0x3b2>
 800259c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	085a      	lsrs	r2, r3, #1
 80025a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	647b      	str	r3, [r7, #68]	; 0x44
 80025b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b6:	699a      	ldr	r2, [r3, #24]
 80025b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80025be:	0a5b      	lsrs	r3, r3, #9
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d201      	bcs.n	80025c8 <find_volume+0x3c8>
 80025c4:	230d      	movs	r3, #13
 80025c6:	e067      	b.n	8002698 <find_volume+0x498>
 80025c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ca:	f04f 32ff 	mov.w	r2, #4294967295
 80025ce:	611a      	str	r2, [r3, #16]
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025da:	2280      	movs	r2, #128	; 0x80
 80025dc:	711a      	strb	r2, [r3, #4]
 80025de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d149      	bne.n	800267a <find_volume+0x47a>
 80025e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e8:	3330      	adds	r3, #48	; 0x30
 80025ea:	3330      	adds	r3, #48	; 0x30
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fcd3 	bl	8000f98 <ld_word>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d140      	bne.n	800267a <find_volume+0x47a>
 80025f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fa:	3301      	adds	r3, #1
 80025fc:	4619      	mov	r1, r3
 80025fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002600:	f7fe fe4f 	bl	80012a2 <move_window>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d137      	bne.n	800267a <find_volume+0x47a>
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	2200      	movs	r2, #0
 800260e:	711a      	strb	r2, [r3, #4]
 8002610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002612:	3330      	adds	r3, #48	; 0x30
 8002614:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fcbd 	bl	8000f98 <ld_word>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002626:	429a      	cmp	r2, r3
 8002628:	d127      	bne.n	800267a <find_volume+0x47a>
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	3330      	adds	r3, #48	; 0x30
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fcca 	bl	8000fc8 <ld_dword>
 8002634:	4602      	mov	r2, r0
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <find_volume+0x4a4>)
 8002638:	429a      	cmp	r2, r3
 800263a:	d11e      	bne.n	800267a <find_volume+0x47a>
 800263c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263e:	3330      	adds	r3, #48	; 0x30
 8002640:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fcbf 	bl	8000fc8 <ld_dword>
 800264a:	4602      	mov	r2, r0
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <find_volume+0x4a8>)
 800264e:	429a      	cmp	r2, r3
 8002650:	d113      	bne.n	800267a <find_volume+0x47a>
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	3330      	adds	r3, #48	; 0x30
 8002656:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fcb4 	bl	8000fc8 <ld_dword>
 8002660:	4602      	mov	r2, r0
 8002662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002664:	611a      	str	r2, [r3, #16]
 8002666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002668:	3330      	adds	r3, #48	; 0x30
 800266a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fcaa 	bl	8000fc8 <ld_dword>
 8002674:	4602      	mov	r2, r0
 8002676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <find_volume+0x4ac>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <find_volume+0x4ac>)
 800268c:	801a      	strh	r2, [r3, #0]
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <find_volume+0x4ac>)
 8002690:	881a      	ldrh	r2, [r3, #0]
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	80da      	strh	r2, [r3, #6]
 8002696:	2300      	movs	r3, #0
 8002698:	4618      	mov	r0, r3
 800269a:	3758      	adds	r7, #88	; 0x58
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	0ffffff5 	.word	0x0ffffff5
 80026a4:	41615252 	.word	0x41615252
 80026a8:	61417272 	.word	0x61417272
 80026ac:	20000034 	.word	0x20000034

080026b0 <validate>:
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	2309      	movs	r3, #9
 80026bc:	73fb      	strb	r3, [r7, #15]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01c      	beq.n	80026fe <validate+0x4e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d018      	beq.n	80026fe <validate+0x4e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d013      	beq.n	80026fe <validate+0x4e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	889a      	ldrh	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	88db      	ldrh	r3, [r3, #6]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d10c      	bne.n	80026fe <validate+0x4e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	785b      	ldrb	r3, [r3, #1]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe f988 	bl	8000a00 <disk_status>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <validate+0x4e>
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <validate+0x5a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	e000      	b.n	800270c <validate+0x5c>
 800270a:	2300      	movs	r3, #0
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <f_mount>:
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	f107 0310 	add.w	r3, r7, #16
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fcc9 	bl	80020ca <get_ldnumber>
 8002738:	61f8      	str	r0, [r7, #28]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2b00      	cmp	r3, #0
 800273e:	da01      	bge.n	8002744 <f_mount+0x28>
 8002740:	230b      	movs	r3, #11
 8002742:	e025      	b.n	8002790 <f_mount+0x74>
 8002744:	4a14      	ldr	r2, [pc, #80]	; (8002798 <f_mount+0x7c>)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <f_mount+0x3e>
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <f_mount+0x4a>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	490b      	ldr	r1, [pc, #44]	; (8002798 <f_mount+0x7c>)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <f_mount+0x5e>
 8002776:	2300      	movs	r3, #0
 8002778:	e00a      	b.n	8002790 <f_mount+0x74>
 800277a:	f107 010c 	add.w	r1, r7, #12
 800277e:	f107 0308 	add.w	r3, r7, #8
 8002782:	2200      	movs	r2, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fd3b 	bl	8002200 <find_volume>
 800278a:	4603      	mov	r3, r0
 800278c:	75fb      	strb	r3, [r7, #23]
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	4618      	mov	r0, r3
 8002792:	3720      	adds	r7, #32
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000030 	.word	0x20000030

0800279c <f_open>:
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b099      	sub	sp, #100	; 0x64
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	4613      	mov	r3, r2
 80027a8:	71fb      	strb	r3, [r7, #7]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <f_open+0x18>
 80027b0:	2309      	movs	r3, #9
 80027b2:	e172      	b.n	8002a9a <f_open+0x2fe>
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ba:	71fb      	strb	r3, [r7, #7]
 80027bc:	79fa      	ldrb	r2, [r7, #7]
 80027be:	f107 0114 	add.w	r1, r7, #20
 80027c2:	f107 0308 	add.w	r3, r7, #8
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fd1a 	bl	8002200 <find_volume>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80027d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f040 8156 	bne.w	8002a88 <f_open+0x2ec>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	61bb      	str	r3, [r7, #24]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	f107 0318 	add.w	r3, r7, #24
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fbff 	bl	8001fec <follow_path>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80027f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <f_open+0x70>
 80027fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002800:	b25b      	sxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	da02      	bge.n	800280c <f_open+0x70>
 8002806:	2306      	movs	r3, #6
 8002808:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	f003 031c 	and.w	r3, r3, #28
 8002812:	2b00      	cmp	r3, #0
 8002814:	d073      	beq.n	80028fe <f_open+0x162>
 8002816:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800281a:	2b00      	cmp	r3, #0
 800281c:	d010      	beq.n	8002840 <f_open+0xa4>
 800281e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002822:	2b04      	cmp	r3, #4
 8002824:	d107      	bne.n	8002836 <f_open+0x9a>
 8002826:	f107 0318 	add.w	r3, r7, #24
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fae9 	bl	8001e02 <dir_register>
 8002830:	4603      	mov	r3, r0
 8002832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	f043 0308 	orr.w	r3, r3, #8
 800283c:	71fb      	strb	r3, [r7, #7]
 800283e:	e010      	b.n	8002862 <f_open+0xc6>
 8002840:	7fbb      	ldrb	r3, [r7, #30]
 8002842:	f003 0311 	and.w	r3, r3, #17
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <f_open+0xb6>
 800284a:	2307      	movs	r3, #7
 800284c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002850:	e007      	b.n	8002862 <f_open+0xc6>
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <f_open+0xc6>
 800285c:	2308      	movs	r3, #8
 800285e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002862:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002866:	2b00      	cmp	r3, #0
 8002868:	d163      	bne.n	8002932 <f_open+0x196>
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d05e      	beq.n	8002932 <f_open+0x196>
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fa2d 	bl	8001cda <ld_clust>
 8002880:	6538      	str	r0, [r7, #80]	; 0x50
 8002882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002884:	f103 040e 	add.w	r4, r3, #14
 8002888:	f7fe fb7c 	bl	8000f84 <get_fattime>
 800288c:	4603      	mov	r3, r0
 800288e:	4619      	mov	r1, r3
 8002890:	4620      	mov	r0, r4
 8002892:	f7fe fbd7 	bl	8001044 <st_dword>
 8002896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002898:	330b      	adds	r3, #11
 800289a:	2220      	movs	r2, #32
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028a2:	2200      	movs	r2, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fa37 	bl	8001d18 <st_clust>
 80028aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ac:	331c      	adds	r3, #28
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe fbc7 	bl	8001044 <st_dword>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2201      	movs	r2, #1
 80028ba:	70da      	strb	r2, [r3, #3]
 80028bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d037      	beq.n	8002932 <f_open+0x196>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028c8:	f107 0318 	add.w	r3, r7, #24
 80028cc:	2200      	movs	r2, #0
 80028ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe ff2c 	bl	800172e <remove_chain>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80028dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d126      	bne.n	8002932 <f_open+0x196>
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe fcda 	bl	80012a2 <move_window>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028f8:	3a01      	subs	r2, #1
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	e019      	b.n	8002932 <f_open+0x196>
 80028fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002902:	2b00      	cmp	r3, #0
 8002904:	d115      	bne.n	8002932 <f_open+0x196>
 8002906:	7fbb      	ldrb	r3, [r7, #30]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <f_open+0x17c>
 8002910:	2304      	movs	r3, #4
 8002912:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002916:	e00c      	b.n	8002932 <f_open+0x196>
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <f_open+0x196>
 8002922:	7fbb      	ldrb	r3, [r7, #30]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <f_open+0x196>
 800292c:	2307      	movs	r3, #7
 800292e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002932:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10f      	bne.n	800295a <f_open+0x1be>
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <f_open+0x1b0>
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	621a      	str	r2, [r3, #32]
 8002954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
 800295a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 8092 	bne.w	8002a88 <f_open+0x2ec>
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff f9b5 	bl	8001cda <ld_clust>
 8002970:	4602      	mov	r2, r0
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002978:	331c      	adds	r3, #28
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fb24 	bl	8000fc8 <ld_dword>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	88da      	ldrh	r2, [r3, #6]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	809a      	strh	r2, [r3, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	79fa      	ldrb	r2, [r7, #7]
 8002998:	741a      	strb	r2, [r3, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	745a      	strb	r2, [r3, #17]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	615a      	str	r2, [r3, #20]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3328      	adds	r3, #40	; 0x28
 80029b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe fb91 	bl	80010de <mem_set>
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d060      	beq.n	8002a88 <f_open+0x2ec>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d05c      	beq.n	8002a88 <f_open+0x2ec>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	615a      	str	r2, [r3, #20]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	895b      	ldrh	r3, [r3, #10]
 80029da:	025b      	lsls	r3, r3, #9
 80029dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	657b      	str	r3, [r7, #84]	; 0x54
 80029ea:	e016      	b.n	8002a1a <f_open+0x27e>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe fd10 	bl	8001416 <get_fat>
 80029f6:	65b8      	str	r0, [r7, #88]	; 0x58
 80029f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d802      	bhi.n	8002a04 <f_open+0x268>
 80029fe:	2302      	movs	r3, #2
 8002a00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0a:	d102      	bne.n	8002a12 <f_open+0x276>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	657b      	str	r3, [r7, #84]	; 0x54
 8002a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <f_open+0x28e>
 8002a22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d8e0      	bhi.n	80029ec <f_open+0x250>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a2e:	619a      	str	r2, [r3, #24]
 8002a30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d127      	bne.n	8002a88 <f_open+0x2ec>
 8002a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d022      	beq.n	8002a88 <f_open+0x2ec>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fcc6 	bl	80013d8 <clst2sect>
 8002a4c:	6478      	str	r0, [r7, #68]	; 0x44
 8002a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d103      	bne.n	8002a5c <f_open+0x2c0>
 8002a54:	2302      	movs	r3, #2
 8002a56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a5a:	e015      	b.n	8002a88 <f_open+0x2ec>
 8002a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5e:	0a5a      	lsrs	r2, r3, #9
 8002a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a62:	441a      	add	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	61da      	str	r2, [r3, #28]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	7858      	ldrb	r0, [r3, #1]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	69da      	ldr	r2, [r3, #28]
 8002a76:	2301      	movs	r3, #1
 8002a78:	f7fd ffd8 	bl	8000a2c <disk_read>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <f_open+0x2ec>
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <f_open+0x2fa>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3764      	adds	r7, #100	; 0x64
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd90      	pop	{r4, r7, pc}

08002aa2 <f_read>:
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b08e      	sub	sp, #56	; 0x38
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f107 0214 	add.w	r2, r7, #20
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fdf4 	bl	80026b0 <validate>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002ace:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d107      	bne.n	8002ae6 <f_read+0x44>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	7c5b      	ldrb	r3, [r3, #17]
 8002ada:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002ade:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <f_read+0x4a>
 8002ae6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002aea:	e109      	b.n	8002d00 <f_read+0x25e>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	7c1b      	ldrb	r3, [r3, #16]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <f_read+0x5a>
 8002af8:	2307      	movs	r3, #7
 8002afa:	e101      	b.n	8002d00 <f_read+0x25e>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	623b      	str	r3, [r7, #32]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f240 80f2 	bls.w	8002cf6 <f_read+0x254>
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	e0ee      	b.n	8002cf6 <f_read+0x254>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f040 80ba 	bne.w	8002c9a <f_read+0x1f8>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	0a5b      	lsrs	r3, r3, #9
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	8952      	ldrh	r2, [r2, #10]
 8002b30:	3a01      	subs	r2, #1
 8002b32:	4013      	ands	r3, r2
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d123      	bne.n	8002b84 <f_read+0xe2>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d103      	bne.n	8002b4c <f_read+0xaa>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
 8002b4a:	e007      	b.n	8002b5c <f_read+0xba>
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f7fe fc5e 	bl	8001416 <get_fat>
 8002b5a:	6338      	str	r0, [r7, #48]	; 0x30
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d804      	bhi.n	8002b6c <f_read+0xca>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2202      	movs	r2, #2
 8002b66:	745a      	strb	r2, [r3, #17]
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e0c9      	b.n	8002d00 <f_read+0x25e>
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d104      	bne.n	8002b7e <f_read+0xdc>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	745a      	strb	r2, [r3, #17]
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0c0      	b.n	8002d00 <f_read+0x25e>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b82:	619a      	str	r2, [r3, #24]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f7fe fc23 	bl	80013d8 <clst2sect>
 8002b92:	61b8      	str	r0, [r7, #24]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d104      	bne.n	8002ba4 <f_read+0x102>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	745a      	strb	r2, [r3, #17]
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e0ad      	b.n	8002d00 <f_read+0x25e>
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4413      	add	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	0a5b      	lsrs	r3, r3, #9
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d039      	beq.n	8002c2c <f_read+0x18a>
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	4413      	add	r3, r2
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	8952      	ldrh	r2, [r2, #10]
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d905      	bls.n	8002bd2 <f_read+0x130>
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	895b      	ldrh	r3, [r3, #10]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	7858      	ldrb	r0, [r3, #1]
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bdc:	f7fd ff26 	bl	8000a2c <disk_read>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d004      	beq.n	8002bf0 <f_read+0x14e>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	745a      	strb	r2, [r3, #17]
 8002bec:	2301      	movs	r3, #1
 8002bee:	e087      	b.n	8002d00 <f_read+0x25e>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	7c1b      	ldrb	r3, [r3, #16]
 8002bf4:	b25b      	sxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	da14      	bge.n	8002c24 <f_read+0x182>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	69da      	ldr	r2, [r3, #28]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d90d      	bls.n	8002c24 <f_read+0x182>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	69da      	ldr	r2, [r3, #28]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	025b      	lsls	r3, r3, #9
 8002c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c14:	18d0      	adds	r0, r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3328      	adds	r3, #40	; 0x28
 8002c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f7fe fa3c 	bl	800109c <mem_cpy>
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	025b      	lsls	r3, r3, #9
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2a:	e050      	b.n	8002cce <f_read+0x22c>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d02e      	beq.n	8002c94 <f_read+0x1f2>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	7c1b      	ldrb	r3, [r3, #16]
 8002c3a:	b25b      	sxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	da18      	bge.n	8002c72 <f_read+0x1d0>
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	7858      	ldrb	r0, [r3, #1]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	69da      	ldr	r2, [r3, #28]
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f7fd ff56 	bl	8000b00 <disk_write>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d004      	beq.n	8002c64 <f_read+0x1c2>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	745a      	strb	r2, [r3, #17]
 8002c60:	2301      	movs	r3, #1
 8002c62:	e04d      	b.n	8002d00 <f_read+0x25e>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	7c1b      	ldrb	r3, [r3, #16]
 8002c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	741a      	strb	r2, [r3, #16]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	7858      	ldrb	r0, [r3, #1]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	f7fd fed4 	bl	8000a2c <disk_read>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d004      	beq.n	8002c94 <f_read+0x1f2>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	745a      	strb	r2, [r3, #17]
 8002c90:	2301      	movs	r3, #1
 8002c92:	e035      	b.n	8002d00 <f_read+0x25e>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	61da      	str	r2, [r3, #28]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d901      	bls.n	8002cb4 <f_read+0x212>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc2:	4413      	add	r3, r2
 8002cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cca:	f7fe f9e7 	bl	800109c <mem_cpy>
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	441a      	add	r2, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	4413      	add	r3, r2
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	441a      	add	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	615a      	str	r2, [r3, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f47f af0d 	bne.w	8002b18 <f_read+0x76>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	3738      	adds	r7, #56	; 0x38
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <f_sync>:
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f107 0208 	add.w	r2, r7, #8
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fcc9 	bl	80026b0 <validate>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	75fb      	strb	r3, [r7, #23]
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d168      	bne.n	8002dfa <f_sync+0xf2>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	7c1b      	ldrb	r3, [r3, #16]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d062      	beq.n	8002dfa <f_sync+0xf2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7c1b      	ldrb	r3, [r3, #16]
 8002d38:	b25b      	sxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	da15      	bge.n	8002d6a <f_sync+0x62>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	7858      	ldrb	r0, [r3, #1]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f7fd fed7 	bl	8000b00 <disk_write>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <f_sync+0x54>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e04f      	b.n	8002dfc <f_sync+0xf4>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7c1b      	ldrb	r3, [r3, #16]
 8002d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	741a      	strb	r2, [r3, #16]
 8002d6a:	f7fe f90b 	bl	8000f84 <get_fattime>
 8002d6e:	6138      	str	r0, [r7, #16]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4619      	mov	r1, r3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	f7fe fa92 	bl	80012a2 <move_window>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	75fb      	strb	r3, [r7, #23]
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d138      	bne.n	8002dfa <f_sync+0xf2>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	330b      	adds	r3, #11
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	330b      	adds	r3, #11
 8002d98:	f042 0220 	orr.w	r2, r2, #32
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	461a      	mov	r2, r3
 8002daa:	68f9      	ldr	r1, [r7, #12]
 8002dac:	f7fe ffb4 	bl	8001d18 <st_clust>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f103 021c 	add.w	r2, r3, #28
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f7fe f941 	bl	8001044 <st_dword>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3316      	adds	r3, #22
 8002dc6:	6939      	ldr	r1, [r7, #16]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fe f93b 	bl	8001044 <st_dword>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3312      	adds	r3, #18
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe f91a 	bl	800100e <st_word>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	70da      	strb	r2, [r3, #3]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe fa8a 	bl	80012fc <sync_fs>
 8002de8:	4603      	mov	r3, r0
 8002dea:	75fb      	strb	r3, [r7, #23]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7c1b      	ldrb	r3, [r3, #16]
 8002df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	741a      	strb	r2, [r3, #16]
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <f_close>:
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ff7b 	bl	8002d08 <f_sync>
 8002e12:	4603      	mov	r3, r0
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10e      	bne.n	8002e3a <f_close+0x36>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f107 0208 	add.w	r2, r7, #8
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fc43 	bl	80026b0 <validate>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	73fb      	strb	r3, [r7, #15]
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <f_close+0x36>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_GPIO_EXTI_Callback>:
static void MX_TIM6_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	80fb      	strh	r3, [r7, #6]
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET){
 8002e4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e52:	4823      	ldr	r0, [pc, #140]	; (8002ee0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002e54:	f001 fcb6 	bl	80047c4 <HAL_GPIO_ReadPin>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d104      	bne.n	8002e68 <HAL_GPIO_EXTI_Callback+0x24>
		  		//next song
		  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002e5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e62:	4820      	ldr	r0, [pc, #128]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002e64:	f001 fcdf 	bl	8004826 <HAL_GPIO_TogglePin>

		  	}

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 8002e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e6c:	481c      	ldr	r0, [pc, #112]	; (8002ee0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002e6e:	f001 fca9 	bl	80047c4 <HAL_GPIO_ReadPin>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d104      	bne.n	8002e82 <HAL_GPIO_EXTI_Callback+0x3e>
			  		//prev song
			  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002e78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e7c:	4819      	ldr	r0, [pc, #100]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002e7e:	f001 fcd2 	bl	8004826 <HAL_GPIO_TogglePin>

			}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 8002e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e86:	4816      	ldr	r0, [pc, #88]	; (8002ee0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002e88:	f001 fc9c 	bl	80047c4 <HAL_GPIO_ReadPin>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d104      	bne.n	8002e9c <HAL_GPIO_EXTI_Callback+0x58>
		 //pause/start
	 			  	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002e92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e96:	4813      	ldr	r0, [pc, #76]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002e98:	f001 fcc5 	bl	8004826 <HAL_GPIO_TogglePin>

	 		}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET){
 8002e9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ea0:	480f      	ldr	r0, [pc, #60]	; (8002ee0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002ea2:	f001 fc8f 	bl	80047c4 <HAL_GPIO_ReadPin>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d104      	bne.n	8002eb6 <HAL_GPIO_EXTI_Callback+0x72>
		 //volume up
		 		 	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002eac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002eb2:	f001 fcb8 	bl	8004826 <HAL_GPIO_TogglePin>

		 	}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 8002eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eba:	4809      	ldr	r0, [pc, #36]	; (8002ee0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002ebc:	f001 fc82 	bl	80047c4 <HAL_GPIO_ReadPin>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <HAL_GPIO_EXTI_Callback+0x8e>
		 HAL_TIM_Base_Start_IT(&htim4);
 8002ec6:	4808      	ldr	r0, [pc, #32]	; (8002ee8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002ec8:	f002 fd49 	bl	800595e <HAL_TIM_Base_Start_IT>
		 i=0;
 8002ecc:	4b07      	ldr	r3, [pc, #28]	; (8002eec <HAL_GPIO_EXTI_Callback+0xa8>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
			 	}
	 HAL_Delay(200);
 8002ed2:	20c8      	movs	r0, #200	; 0xc8
 8002ed4:	f000 fe2a 	bl	8003b2c <HAL_Delay>

}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40020400 	.word	0x40020400
 8002ee4:	40020c00 	.word	0x40020c00
 8002ee8:	20000270 	.word	0x20000270
 8002eec:	20000268 	.word	0x20000268

08002ef0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
if(htim->Instance == TIM4)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d10d      	bne.n	8002f1e <HAL_TIM_PeriodElapsedCallback+0x2e>
{
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,rawAudio[i]);
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002f08:	5cd3      	ldrb	r3, [r2, r3]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4809      	ldr	r0, [pc, #36]	; (8002f34 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002f10:	f001 fa76 	bl	8004400 <HAL_DAC_SetValue>
	i++;
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002f1c:	6013      	str	r3, [r2, #0]
}
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40000800 	.word	0x40000800
 8002f2c:	20000268 	.word	0x20000268
 8002f30:	08006a48 	.word	0x08006a48
 8002f34:	200005bc 	.word	0x200005bc

08002f38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
	{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
			{

			// tutaj umieszczamy kod wykonywany w zależności od odebranej inf

			}
	}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f50:	f000 fd7a 	bl	8003a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f54:	f000 f848 	bl	8002fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f58:	f000 fa42 	bl	80033e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002f5c:	f000 f8ae 	bl	80030bc <MX_ADC1_Init>
  MX_DAC_Init();
 8002f60:	f000 f8fe 	bl	8003160 <MX_DAC_Init>
  MX_SPI1_Init();
 8002f64:	f000 f926 	bl	80031b4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002f68:	f000 f95a 	bl	8003220 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8002f6c:	f000 fa0e 	bl	800338c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8002f70:	f000 f9d8 	bl	8003324 <MX_TIM6_Init>
  MX_TIM4_Init();
 8002f74:	f000 f98a 	bl	800328c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  fresult = f_mount(&FatFs, "", 0);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4913      	ldr	r1, [pc, #76]	; (8002fc8 <main+0x7c>)
 8002f7c:	4813      	ldr	r0, [pc, #76]	; (8002fcc <main+0x80>)
 8002f7e:	f7ff fbcd 	bl	800271c <f_mount>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <main+0x84>)
 8002f88:	701a      	strb	r2, [r3, #0]
  fresult = f_open(&file, "read.txt", FA_READ);
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4911      	ldr	r1, [pc, #68]	; (8002fd4 <main+0x88>)
 8002f8e:	4812      	ldr	r0, [pc, #72]	; (8002fd8 <main+0x8c>)
 8002f90:	f7ff fc04 	bl	800279c <f_open>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <main+0x84>)
 8002f9a:	701a      	strb	r2, [r3, #0]
  fresult = f_read(&file, buffer, 16, &bytes_read);
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <main+0x90>)
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	490f      	ldr	r1, [pc, #60]	; (8002fe0 <main+0x94>)
 8002fa2:	480d      	ldr	r0, [pc, #52]	; (8002fd8 <main+0x8c>)
 8002fa4:	f7ff fd7d 	bl	8002aa2 <f_read>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <main+0x84>)
 8002fae:	701a      	strb	r2, [r3, #0]
  fresult = f_close(&file);
 8002fb0:	4809      	ldr	r0, [pc, #36]	; (8002fd8 <main+0x8c>)
 8002fb2:	f7ff ff27 	bl	8002e04 <f_close>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <main+0x84>)
 8002fbc:	701a      	strb	r2, [r3, #0]
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4808      	ldr	r0, [pc, #32]	; (8002fe4 <main+0x98>)
 8002fc2:	f001 f96a 	bl	800429a <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002fc6:	e7fe      	b.n	8002fc6 <main+0x7a>
 8002fc8:	08006a38 	.word	0x08006a38
 8002fcc:	20000038 	.word	0x20000038
 8002fd0:	20000711 	.word	0x20000711
 8002fd4:	08006a3c 	.word	0x08006a3c
 8002fd8:	20000348 	.word	0x20000348
 8002fdc:	200005b8 	.word	0x200005b8
 8002fe0:	200005d0 	.word	0x200005d0
 8002fe4:	200005bc 	.word	0x200005bc

08002fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b094      	sub	sp, #80	; 0x50
 8002fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fee:	f107 0320 	add.w	r3, r7, #32
 8002ff2:	2230      	movs	r2, #48	; 0x30
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f003 fcfc 	bl	80069f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ffc:	f107 030c 	add.w	r3, r7, #12
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	2300      	movs	r3, #0
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	4b28      	ldr	r3, [pc, #160]	; (80030b4 <SystemClock_Config+0xcc>)
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	4a27      	ldr	r2, [pc, #156]	; (80030b4 <SystemClock_Config+0xcc>)
 8003016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301a:	6413      	str	r3, [r2, #64]	; 0x40
 800301c:	4b25      	ldr	r3, [pc, #148]	; (80030b4 <SystemClock_Config+0xcc>)
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003028:	2300      	movs	r3, #0
 800302a:	607b      	str	r3, [r7, #4]
 800302c:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <SystemClock_Config+0xd0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a21      	ldr	r2, [pc, #132]	; (80030b8 <SystemClock_Config+0xd0>)
 8003032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <SystemClock_Config+0xd0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003044:	2301      	movs	r3, #1
 8003046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800304e:	2302      	movs	r3, #2
 8003050:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003058:	2304      	movs	r3, #4
 800305a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800305c:	23a8      	movs	r3, #168	; 0xa8
 800305e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003060:	2302      	movs	r3, #2
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003064:	2304      	movs	r3, #4
 8003066:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003068:	f107 0320 	add.w	r3, r7, #32
 800306c:	4618      	mov	r0, r3
 800306e:	f001 fc27 	bl	80048c0 <HAL_RCC_OscConfig>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003078:	f000 fa52 	bl	8003520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800307c:	230f      	movs	r3, #15
 800307e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003080:	2302      	movs	r3, #2
 8003082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003088:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800308c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800308e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003092:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003094:	f107 030c 	add.w	r3, r7, #12
 8003098:	2105      	movs	r1, #5
 800309a:	4618      	mov	r0, r3
 800309c:	f001 fe52 	bl	8004d44 <HAL_RCC_ClockConfig>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80030a6:	f000 fa3b 	bl	8003520 <Error_Handler>
  }
}
 80030aa:	bf00      	nop
 80030ac:	3750      	adds	r7, #80	; 0x50
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40007000 	.word	0x40007000

080030bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80030c2:	463b      	mov	r3, r7
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80030ce:	4b21      	ldr	r3, [pc, #132]	; (8003154 <MX_ADC1_Init+0x98>)
 80030d0:	4a21      	ldr	r2, [pc, #132]	; (8003158 <MX_ADC1_Init+0x9c>)
 80030d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80030d4:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <MX_ADC1_Init+0x98>)
 80030d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80030dc:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <MX_ADC1_Init+0x98>)
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <MX_ADC1_Init+0x98>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80030e8:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <MX_ADC1_Init+0x98>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030ee:	4b19      	ldr	r3, [pc, #100]	; (8003154 <MX_ADC1_Init+0x98>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030f6:	4b17      	ldr	r3, [pc, #92]	; (8003154 <MX_ADC1_Init+0x98>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030fc:	4b15      	ldr	r3, [pc, #84]	; (8003154 <MX_ADC1_Init+0x98>)
 80030fe:	4a17      	ldr	r2, [pc, #92]	; (800315c <MX_ADC1_Init+0xa0>)
 8003100:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <MX_ADC1_Init+0x98>)
 8003104:	2200      	movs	r2, #0
 8003106:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <MX_ADC1_Init+0x98>)
 800310a:	2201      	movs	r2, #1
 800310c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <MX_ADC1_Init+0x98>)
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <MX_ADC1_Init+0x98>)
 8003118:	2201      	movs	r2, #1
 800311a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800311c:	480d      	ldr	r0, [pc, #52]	; (8003154 <MX_ADC1_Init+0x98>)
 800311e:	f000 fd27 	bl	8003b70 <HAL_ADC_Init>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003128:	f000 f9fa 	bl	8003520 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800312c:	2303      	movs	r3, #3
 800312e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003130:	2301      	movs	r3, #1
 8003132:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003134:	2300      	movs	r3, #0
 8003136:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003138:	463b      	mov	r3, r7
 800313a:	4619      	mov	r1, r3
 800313c:	4805      	ldr	r0, [pc, #20]	; (8003154 <MX_ADC1_Init+0x98>)
 800313e:	f000 fd5b 	bl	8003bf8 <HAL_ADC_ConfigChannel>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003148:	f000 f9ea 	bl	8003520 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000570 	.word	0x20000570
 8003158:	40012000 	.word	0x40012000
 800315c:	0f000001 	.word	0x0f000001

08003160 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003166:	463b      	mov	r3, r7
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <MX_DAC_Init+0x4c>)
 8003170:	4a0f      	ldr	r2, [pc, #60]	; (80031b0 <MX_DAC_Init+0x50>)
 8003172:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003174:	480d      	ldr	r0, [pc, #52]	; (80031ac <MX_DAC_Init+0x4c>)
 8003176:	f001 f86e 	bl	8004256 <HAL_DAC_Init>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003180:	f000 f9ce 	bl	8003520 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003184:	2300      	movs	r3, #0
 8003186:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003188:	2300      	movs	r3, #0
 800318a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800318c:	463b      	mov	r3, r7
 800318e:	2200      	movs	r2, #0
 8003190:	4619      	mov	r1, r3
 8003192:	4806      	ldr	r0, [pc, #24]	; (80031ac <MX_DAC_Init+0x4c>)
 8003194:	f001 f8e7 	bl	8004366 <HAL_DAC_ConfigChannel>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800319e:	f000 f9bf 	bl	8003520 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	200005bc 	.word	0x200005bc
 80031b0:	40007400 	.word	0x40007400

080031b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80031b8:	4b17      	ldr	r3, [pc, #92]	; (8003218 <MX_SPI1_Init+0x64>)
 80031ba:	4a18      	ldr	r2, [pc, #96]	; (800321c <MX_SPI1_Init+0x68>)
 80031bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031be:	4b16      	ldr	r3, [pc, #88]	; (8003218 <MX_SPI1_Init+0x64>)
 80031c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031c6:	4b14      	ldr	r3, [pc, #80]	; (8003218 <MX_SPI1_Init+0x64>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031cc:	4b12      	ldr	r3, [pc, #72]	; (8003218 <MX_SPI1_Init+0x64>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031d2:	4b11      	ldr	r3, [pc, #68]	; (8003218 <MX_SPI1_Init+0x64>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <MX_SPI1_Init+0x64>)
 80031da:	2200      	movs	r2, #0
 80031dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031de:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <MX_SPI1_Init+0x64>)
 80031e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <MX_SPI1_Init+0x64>)
 80031e8:	2220      	movs	r2, #32
 80031ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <MX_SPI1_Init+0x64>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031f2:	4b09      	ldr	r3, [pc, #36]	; (8003218 <MX_SPI1_Init+0x64>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031f8:	4b07      	ldr	r3, [pc, #28]	; (8003218 <MX_SPI1_Init+0x64>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <MX_SPI1_Init+0x64>)
 8003200:	220a      	movs	r2, #10
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003204:	4804      	ldr	r0, [pc, #16]	; (8003218 <MX_SPI1_Init+0x64>)
 8003206:	f001 ff8b 	bl	8005120 <HAL_SPI_Init>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003210:	f000 f986 	bl	8003520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000714 	.word	0x20000714
 800321c:	40013000 	.word	0x40013000

08003220 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003224:	4b17      	ldr	r3, [pc, #92]	; (8003284 <MX_SPI3_Init+0x64>)
 8003226:	4a18      	ldr	r2, [pc, #96]	; (8003288 <MX_SPI3_Init+0x68>)
 8003228:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800322a:	4b16      	ldr	r3, [pc, #88]	; (8003284 <MX_SPI3_Init+0x64>)
 800322c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003230:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <MX_SPI3_Init+0x64>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <MX_SPI3_Init+0x64>)
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <MX_SPI3_Init+0x64>)
 8003240:	2200      	movs	r2, #0
 8003242:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <MX_SPI3_Init+0x64>)
 8003246:	2200      	movs	r2, #0
 8003248:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <MX_SPI3_Init+0x64>)
 800324c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003250:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <MX_SPI3_Init+0x64>)
 8003254:	2218      	movs	r2, #24
 8003256:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <MX_SPI3_Init+0x64>)
 800325a:	2200      	movs	r2, #0
 800325c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800325e:	4b09      	ldr	r3, [pc, #36]	; (8003284 <MX_SPI3_Init+0x64>)
 8003260:	2200      	movs	r2, #0
 8003262:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003264:	4b07      	ldr	r3, [pc, #28]	; (8003284 <MX_SPI3_Init+0x64>)
 8003266:	2200      	movs	r2, #0
 8003268:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800326a:	4b06      	ldr	r3, [pc, #24]	; (8003284 <MX_SPI3_Init+0x64>)
 800326c:	220a      	movs	r2, #10
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003270:	4804      	ldr	r0, [pc, #16]	; (8003284 <MX_SPI3_Init+0x64>)
 8003272:	f001 ff55 	bl	8005120 <HAL_SPI_Init>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800327c:	f000 f950 	bl	8003520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003280:	bf00      	nop
 8003282:	bd80      	pop	{r7, pc}
 8003284:	200002f0 	.word	0x200002f0
 8003288:	40003c00 	.word	0x40003c00

0800328c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003292:	f107 0308 	add.w	r3, r7, #8
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032a0:	463b      	mov	r3, r7
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80032a8:	4b1c      	ldr	r3, [pc, #112]	; (800331c <MX_TIM4_Init+0x90>)
 80032aa:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <MX_TIM4_Init+0x94>)
 80032ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 249;
 80032ae:	4b1b      	ldr	r3, [pc, #108]	; (800331c <MX_TIM4_Init+0x90>)
 80032b0:	22f9      	movs	r2, #249	; 0xf9
 80032b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <MX_TIM4_Init+0x90>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 80032ba:	4b18      	ldr	r3, [pc, #96]	; (800331c <MX_TIM4_Init+0x90>)
 80032bc:	2214      	movs	r2, #20
 80032be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032c0:	4b16      	ldr	r3, [pc, #88]	; (800331c <MX_TIM4_Init+0x90>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <MX_TIM4_Init+0x90>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80032cc:	4813      	ldr	r0, [pc, #76]	; (800331c <MX_TIM4_Init+0x90>)
 80032ce:	f002 fb1b 	bl	8005908 <HAL_TIM_Base_Init>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80032d8:	f000 f922 	bl	8003520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80032e2:	f107 0308 	add.w	r3, r7, #8
 80032e6:	4619      	mov	r1, r3
 80032e8:	480c      	ldr	r0, [pc, #48]	; (800331c <MX_TIM4_Init+0x90>)
 80032ea:	f002 fc64 	bl	8005bb6 <HAL_TIM_ConfigClockSource>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80032f4:	f000 f914 	bl	8003520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032f8:	2300      	movs	r3, #0
 80032fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032fc:	2300      	movs	r3, #0
 80032fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003300:	463b      	mov	r3, r7
 8003302:	4619      	mov	r1, r3
 8003304:	4805      	ldr	r0, [pc, #20]	; (800331c <MX_TIM4_Init+0x90>)
 8003306:	f002 fe6f 	bl	8005fe8 <HAL_TIMEx_MasterConfigSynchronization>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003310:	f000 f906 	bl	8003520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003314:	bf00      	nop
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000270 	.word	0x20000270
 8003320:	40000800 	.word	0x40000800

08003324 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800332a:	463b      	mov	r3, r7
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003332:	4b14      	ldr	r3, [pc, #80]	; (8003384 <MX_TIM6_Init+0x60>)
 8003334:	4a14      	ldr	r2, [pc, #80]	; (8003388 <MX_TIM6_Init+0x64>)
 8003336:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 249;
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <MX_TIM6_Init+0x60>)
 800333a:	22f9      	movs	r2, #249	; 0xf9
 800333c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800333e:	4b11      	ldr	r3, [pc, #68]	; (8003384 <MX_TIM6_Init+0x60>)
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20;
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <MX_TIM6_Init+0x60>)
 8003346:	2214      	movs	r2, #20
 8003348:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <MX_TIM6_Init+0x60>)
 800334c:	2200      	movs	r2, #0
 800334e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003350:	480c      	ldr	r0, [pc, #48]	; (8003384 <MX_TIM6_Init+0x60>)
 8003352:	f002 fad9 	bl	8005908 <HAL_TIM_Base_Init>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 800335c:	f000 f8e0 	bl	8003520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003360:	2300      	movs	r3, #0
 8003362:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003364:	2300      	movs	r3, #0
 8003366:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003368:	463b      	mov	r3, r7
 800336a:	4619      	mov	r1, r3
 800336c:	4805      	ldr	r0, [pc, #20]	; (8003384 <MX_TIM6_Init+0x60>)
 800336e:	f002 fe3b 	bl	8005fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8003378:	f000 f8d2 	bl	8003520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	200006d0 	.word	0x200006d0
 8003388:	40001000 	.word	0x40001000

0800338c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <MX_USART3_UART_Init+0x4c>)
 8003392:	4a12      	ldr	r2, [pc, #72]	; (80033dc <MX_USART3_UART_Init+0x50>)
 8003394:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <MX_USART3_UART_Init+0x4c>)
 8003398:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800339c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <MX_USART3_UART_Init+0x4c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <MX_USART3_UART_Init+0x4c>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <MX_USART3_UART_Init+0x4c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <MX_USART3_UART_Init+0x4c>)
 80033b2:	220c      	movs	r2, #12
 80033b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033b6:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <MX_USART3_UART_Init+0x4c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <MX_USART3_UART_Init+0x4c>)
 80033be:	2200      	movs	r2, #0
 80033c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033c2:	4805      	ldr	r0, [pc, #20]	; (80033d8 <MX_USART3_UART_Init+0x4c>)
 80033c4:	f002 fe69 	bl	800609a <HAL_UART_Init>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80033ce:	f000 f8a7 	bl	8003520 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200002b0 	.word	0x200002b0
 80033dc:	40004800 	.word	0x40004800

080033e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	; 0x28
 80033e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e6:	f107 0314 	add.w	r3, r7, #20
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	609a      	str	r2, [r3, #8]
 80033f2:	60da      	str	r2, [r3, #12]
 80033f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	4b43      	ldr	r3, [pc, #268]	; (8003508 <MX_GPIO_Init+0x128>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a42      	ldr	r2, [pc, #264]	; (8003508 <MX_GPIO_Init+0x128>)
 8003400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b40      	ldr	r3, [pc, #256]	; (8003508 <MX_GPIO_Init+0x128>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b3c      	ldr	r3, [pc, #240]	; (8003508 <MX_GPIO_Init+0x128>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a3b      	ldr	r2, [pc, #236]	; (8003508 <MX_GPIO_Init+0x128>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b39      	ldr	r3, [pc, #228]	; (8003508 <MX_GPIO_Init+0x128>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	4b35      	ldr	r3, [pc, #212]	; (8003508 <MX_GPIO_Init+0x128>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a34      	ldr	r2, [pc, #208]	; (8003508 <MX_GPIO_Init+0x128>)
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b32      	ldr	r3, [pc, #200]	; (8003508 <MX_GPIO_Init+0x128>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <MX_GPIO_Init+0x128>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4a2d      	ldr	r2, [pc, #180]	; (8003508 <MX_GPIO_Init+0x128>)
 8003454:	f043 0308 	orr.w	r3, r3, #8
 8003458:	6313      	str	r3, [r2, #48]	; 0x30
 800345a:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <MX_GPIO_Init+0x128>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4b27      	ldr	r3, [pc, #156]	; (8003508 <MX_GPIO_Init+0x128>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a26      	ldr	r2, [pc, #152]	; (8003508 <MX_GPIO_Init+0x128>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <MX_GPIO_Init+0x128>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003482:	2200      	movs	r2, #0
 8003484:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003488:	4820      	ldr	r0, [pc, #128]	; (800350c <MX_GPIO_Init+0x12c>)
 800348a:	f001 f9b3 	bl	80047f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800348e:	2301      	movs	r3, #1
 8003490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <MX_GPIO_Init+0x130>)
 8003494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003496:	2302      	movs	r3, #2
 8003498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349a:	f107 0314 	add.w	r3, r7, #20
 800349e:	4619      	mov	r1, r3
 80034a0:	481c      	ldr	r0, [pc, #112]	; (8003514 <MX_GPIO_Init+0x134>)
 80034a2:	f000 fff5 	bl	8004490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 80034a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034aa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <MX_GPIO_Init+0x138>)
 80034ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034b0:	2301      	movs	r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b4:	f107 0314 	add.w	r3, r7, #20
 80034b8:	4619      	mov	r1, r3
 80034ba:	4818      	ldr	r0, [pc, #96]	; (800351c <MX_GPIO_Init+0x13c>)
 80034bc:	f000 ffe8 	bl	8004490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80034c0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80034c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c6:	2301      	movs	r3, #1
 80034c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ce:	2300      	movs	r3, #0
 80034d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034d2:	f107 0314 	add.w	r3, r7, #20
 80034d6:	4619      	mov	r1, r3
 80034d8:	480c      	ldr	r0, [pc, #48]	; (800350c <MX_GPIO_Init+0x12c>)
 80034da:	f000 ffd9 	bl	8004490 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	2101      	movs	r1, #1
 80034e2:	2006      	movs	r0, #6
 80034e4:	f000 fe81 	bl	80041ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80034e8:	2006      	movs	r0, #6
 80034ea:	f000 fe9a 	bl	8004222 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2101      	movs	r1, #1
 80034f2:	2028      	movs	r0, #40	; 0x28
 80034f4:	f000 fe79 	bl	80041ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80034f8:	2028      	movs	r0, #40	; 0x28
 80034fa:	f000 fe92 	bl	8004222 <HAL_NVIC_EnableIRQ>

}
 80034fe:	bf00      	nop
 8003500:	3728      	adds	r7, #40	; 0x28
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800
 800350c:	40020c00 	.word	0x40020c00
 8003510:	10110000 	.word	0x10110000
 8003514:	40020000 	.word	0x40020000
 8003518:	10310000 	.word	0x10310000
 800351c:	40020400 	.word	0x40020400

08003520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <HAL_MspInit+0x58>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	4a12      	ldr	r2, [pc, #72]	; (8003588 <HAL_MspInit+0x58>)
 8003540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003544:	6453      	str	r3, [r2, #68]	; 0x44
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <HAL_MspInit+0x58>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <HAL_MspInit+0x58>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <HAL_MspInit+0x58>)
 800355c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003560:	6413      	str	r3, [r2, #64]	; 0x40
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_MspInit+0x58>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800356e:	2200      	movs	r2, #0
 8003570:	2100      	movs	r1, #0
 8003572:	2001      	movs	r0, #1
 8003574:	f000 fe39 	bl	80041ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003578:	2001      	movs	r0, #1
 800357a:	f000 fe52 	bl	8004222 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a17      	ldr	r2, [pc, #92]	; (8003608 <HAL_ADC_MspInit+0x7c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d127      	bne.n	80035fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	4b16      	ldr	r3, [pc, #88]	; (800360c <HAL_ADC_MspInit+0x80>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	4a15      	ldr	r2, [pc, #84]	; (800360c <HAL_ADC_MspInit+0x80>)
 80035b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035bc:	6453      	str	r3, [r2, #68]	; 0x44
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <HAL_ADC_MspInit+0x80>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	4b0f      	ldr	r3, [pc, #60]	; (800360c <HAL_ADC_MspInit+0x80>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a0e      	ldr	r2, [pc, #56]	; (800360c <HAL_ADC_MspInit+0x80>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b0c      	ldr	r3, [pc, #48]	; (800360c <HAL_ADC_MspInit+0x80>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035e6:	2308      	movs	r3, #8
 80035e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ea:	2303      	movs	r3, #3
 80035ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	4619      	mov	r1, r3
 80035f8:	4805      	ldr	r0, [pc, #20]	; (8003610 <HAL_ADC_MspInit+0x84>)
 80035fa:	f000 ff49 	bl	8004490 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035fe:	bf00      	nop
 8003600:	3728      	adds	r7, #40	; 0x28
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40012000 	.word	0x40012000
 800360c:	40023800 	.word	0x40023800
 8003610:	40020000 	.word	0x40020000

08003614 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a17      	ldr	r2, [pc, #92]	; (8003690 <HAL_DAC_MspInit+0x7c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d127      	bne.n	8003686 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	4b16      	ldr	r3, [pc, #88]	; (8003694 <HAL_DAC_MspInit+0x80>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	4a15      	ldr	r2, [pc, #84]	; (8003694 <HAL_DAC_MspInit+0x80>)
 8003640:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003644:	6413      	str	r3, [r2, #64]	; 0x40
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <HAL_DAC_MspInit+0x80>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <HAL_DAC_MspInit+0x80>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4a0e      	ldr	r2, [pc, #56]	; (8003694 <HAL_DAC_MspInit+0x80>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6313      	str	r3, [r2, #48]	; 0x30
 8003662:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <HAL_DAC_MspInit+0x80>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800366e:	2310      	movs	r3, #16
 8003670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003672:	2303      	movs	r3, #3
 8003674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367a:	f107 0314 	add.w	r3, r7, #20
 800367e:	4619      	mov	r1, r3
 8003680:	4805      	ldr	r0, [pc, #20]	; (8003698 <HAL_DAC_MspInit+0x84>)
 8003682:	f000 ff05 	bl	8004490 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003686:	bf00      	nop
 8003688:	3728      	adds	r7, #40	; 0x28
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40007400 	.word	0x40007400
 8003694:	40023800 	.word	0x40023800
 8003698:	40020000 	.word	0x40020000

0800369c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08c      	sub	sp, #48	; 0x30
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	f107 031c 	add.w	r3, r7, #28
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a32      	ldr	r2, [pc, #200]	; (8003784 <HAL_SPI_MspInit+0xe8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d12c      	bne.n	8003718 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	4b31      	ldr	r3, [pc, #196]	; (8003788 <HAL_SPI_MspInit+0xec>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	4a30      	ldr	r2, [pc, #192]	; (8003788 <HAL_SPI_MspInit+0xec>)
 80036c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036cc:	6453      	str	r3, [r2, #68]	; 0x44
 80036ce:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <HAL_SPI_MspInit+0xec>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <HAL_SPI_MspInit+0xec>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	4a29      	ldr	r2, [pc, #164]	; (8003788 <HAL_SPI_MspInit+0xec>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ea:	4b27      	ldr	r3, [pc, #156]	; (8003788 <HAL_SPI_MspInit+0xec>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80036f6:	23e0      	movs	r3, #224	; 0xe0
 80036f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fa:	2302      	movs	r3, #2
 80036fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003702:	2303      	movs	r3, #3
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003706:	2305      	movs	r3, #5
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370a:	f107 031c 	add.w	r3, r7, #28
 800370e:	4619      	mov	r1, r3
 8003710:	481e      	ldr	r0, [pc, #120]	; (800378c <HAL_SPI_MspInit+0xf0>)
 8003712:	f000 febd 	bl	8004490 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003716:	e030      	b.n	800377a <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <HAL_SPI_MspInit+0xf4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d12b      	bne.n	800377a <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	4b18      	ldr	r3, [pc, #96]	; (8003788 <HAL_SPI_MspInit+0xec>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	4a17      	ldr	r2, [pc, #92]	; (8003788 <HAL_SPI_MspInit+0xec>)
 800372c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003730:	6413      	str	r3, [r2, #64]	; 0x40
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <HAL_SPI_MspInit+0xec>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	4b11      	ldr	r3, [pc, #68]	; (8003788 <HAL_SPI_MspInit+0xec>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a10      	ldr	r2, [pc, #64]	; (8003788 <HAL_SPI_MspInit+0xec>)
 8003748:	f043 0302 	orr.w	r3, r3, #2
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <HAL_SPI_MspInit+0xec>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800375a:	2338      	movs	r3, #56	; 0x38
 800375c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375e:	2302      	movs	r3, #2
 8003760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003766:	2303      	movs	r3, #3
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800376a:	2306      	movs	r3, #6
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800376e:	f107 031c 	add.w	r3, r7, #28
 8003772:	4619      	mov	r1, r3
 8003774:	4807      	ldr	r0, [pc, #28]	; (8003794 <HAL_SPI_MspInit+0xf8>)
 8003776:	f000 fe8b 	bl	8004490 <HAL_GPIO_Init>
}
 800377a:	bf00      	nop
 800377c:	3730      	adds	r7, #48	; 0x30
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40013000 	.word	0x40013000
 8003788:	40023800 	.word	0x40023800
 800378c:	40020000 	.word	0x40020000
 8003790:	40003c00 	.word	0x40003c00
 8003794:	40020400 	.word	0x40020400

08003798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a18      	ldr	r2, [pc, #96]	; (8003808 <HAL_TIM_Base_MspInit+0x70>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d116      	bne.n	80037d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_TIM_Base_MspInit+0x74>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a16      	ldr	r2, [pc, #88]	; (800380c <HAL_TIM_Base_MspInit+0x74>)
 80037b4:	f043 0304 	orr.w	r3, r3, #4
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ba:	4b14      	ldr	r3, [pc, #80]	; (800380c <HAL_TIM_Base_MspInit+0x74>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2100      	movs	r1, #0
 80037ca:	201e      	movs	r0, #30
 80037cc:	f000 fd0d 	bl	80041ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037d0:	201e      	movs	r0, #30
 80037d2:	f000 fd26 	bl	8004222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80037d6:	e012      	b.n	80037fe <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a0c      	ldr	r2, [pc, #48]	; (8003810 <HAL_TIM_Base_MspInit+0x78>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d10d      	bne.n	80037fe <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_TIM_Base_MspInit+0x74>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	4a08      	ldr	r2, [pc, #32]	; (800380c <HAL_TIM_Base_MspInit+0x74>)
 80037ec:	f043 0310 	orr.w	r3, r3, #16
 80037f0:	6413      	str	r3, [r2, #64]	; 0x40
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_TIM_Base_MspInit+0x74>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	68bb      	ldr	r3, [r7, #8]
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40000800 	.word	0x40000800
 800380c:	40023800 	.word	0x40023800
 8003810:	40001000 	.word	0x40001000

08003814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800381c:	f107 0314 	add.w	r3, r7, #20
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <HAL_UART_MspInit+0x94>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d134      	bne.n	80038a0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	4b1c      	ldr	r3, [pc, #112]	; (80038ac <HAL_UART_MspInit+0x98>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <HAL_UART_MspInit+0x98>)
 8003840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003844:	6413      	str	r3, [r2, #64]	; 0x40
 8003846:	4b19      	ldr	r3, [pc, #100]	; (80038ac <HAL_UART_MspInit+0x98>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	4b15      	ldr	r3, [pc, #84]	; (80038ac <HAL_UART_MspInit+0x98>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4a14      	ldr	r2, [pc, #80]	; (80038ac <HAL_UART_MspInit+0x98>)
 800385c:	f043 0304 	orr.w	r3, r3, #4
 8003860:	6313      	str	r3, [r2, #48]	; 0x30
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_UART_MspInit+0x98>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800386e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	2302      	movs	r3, #2
 8003876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003878:	2301      	movs	r3, #1
 800387a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387c:	2303      	movs	r3, #3
 800387e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003880:	2307      	movs	r3, #7
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003884:	f107 0314 	add.w	r3, r7, #20
 8003888:	4619      	mov	r1, r3
 800388a:	4809      	ldr	r0, [pc, #36]	; (80038b0 <HAL_UART_MspInit+0x9c>)
 800388c:	f000 fe00 	bl	8004490 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003890:	2200      	movs	r2, #0
 8003892:	2100      	movs	r1, #0
 8003894:	2027      	movs	r0, #39	; 0x27
 8003896:	f000 fca8 	bl	80041ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800389a:	2027      	movs	r0, #39	; 0x27
 800389c:	f000 fcc1 	bl	8004222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80038a0:	bf00      	nop
 80038a2:	3728      	adds	r7, #40	; 0x28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40004800 	.word	0x40004800
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40020800 	.word	0x40020800

080038b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038c6:	e7fe      	b.n	80038c6 <HardFault_Handler+0x4>

080038c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038cc:	e7fe      	b.n	80038cc <MemManage_Handler+0x4>

080038ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ce:	b480      	push	{r7}
 80038d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038d2:	e7fe      	b.n	80038d2 <BusFault_Handler+0x4>

080038d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038d8:	e7fe      	b.n	80038d8 <UsageFault_Handler+0x4>

080038da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038da:	b480      	push	{r7}
 80038dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8003908:	f7fd fb24 	bl	8000f54 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800390c:	f000 f8ee 	bl	8003aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003910:	bf00      	nop
 8003912:	bd80      	pop	{r7, pc}

08003914 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003918:	f000 ffb8 	bl	800488c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800391c:	bf00      	nop
 800391e:	bd80      	pop	{r7, pc}

08003920 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003924:	2001      	movs	r0, #1
 8003926:	f000 ff99 	bl	800485c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003934:	4802      	ldr	r0, [pc, #8]	; (8003940 <TIM4_IRQHandler+0x10>)
 8003936:	f002 f836 	bl	80059a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000270 	.word	0x20000270

08003944 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003948:	4802      	ldr	r0, [pc, #8]	; (8003954 <USART3_IRQHandler+0x10>)
 800394a:	f002 fbf3 	bl	8006134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200002b0 	.word	0x200002b0

08003958 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800395c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003960:	f000 ff7c 	bl	800485c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003964:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003968:	f000 ff78 	bl	800485c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800396c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003970:	f000 ff74 	bl	800485c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003974:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003978:	f000 ff70 	bl	800485c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800397c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003980:	f000 ff6c 	bl	800485c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}

08003988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800398c:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <SystemInit+0x60>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <SystemInit+0x60>)
 8003994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800399c:	4b13      	ldr	r3, [pc, #76]	; (80039ec <SystemInit+0x64>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a12      	ldr	r2, [pc, #72]	; (80039ec <SystemInit+0x64>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80039a8:	4b10      	ldr	r3, [pc, #64]	; (80039ec <SystemInit+0x64>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80039ae:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <SystemInit+0x64>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <SystemInit+0x64>)
 80039b4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80039b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <SystemInit+0x64>)
 80039c0:	4a0b      	ldr	r2, [pc, #44]	; (80039f0 <SystemInit+0x68>)
 80039c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <SystemInit+0x64>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a08      	ldr	r2, [pc, #32]	; (80039ec <SystemInit+0x64>)
 80039ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <SystemInit+0x64>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039d6:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <SystemInit+0x60>)
 80039d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039dc:	609a      	str	r2, [r3, #8]
#endif
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000ed00 	.word	0xe000ed00
 80039ec:	40023800 	.word	0x40023800
 80039f0:	24003010 	.word	0x24003010

080039f4 <Reset_Handler>:
 80039f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a2c <LoopFillZerobss+0x14>
 80039f8:	2100      	movs	r1, #0
 80039fa:	e003      	b.n	8003a04 <LoopCopyDataInit>

080039fc <CopyDataInit>:
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <LoopFillZerobss+0x18>)
 80039fe:	585b      	ldr	r3, [r3, r1]
 8003a00:	5043      	str	r3, [r0, r1]
 8003a02:	3104      	adds	r1, #4

08003a04 <LoopCopyDataInit>:
 8003a04:	480b      	ldr	r0, [pc, #44]	; (8003a34 <LoopFillZerobss+0x1c>)
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <LoopFillZerobss+0x20>)
 8003a08:	1842      	adds	r2, r0, r1
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d3f6      	bcc.n	80039fc <CopyDataInit>
 8003a0e:	4a0b      	ldr	r2, [pc, #44]	; (8003a3c <LoopFillZerobss+0x24>)
 8003a10:	e002      	b.n	8003a18 <LoopFillZerobss>

08003a12 <FillZerobss>:
 8003a12:	2300      	movs	r3, #0
 8003a14:	f842 3b04 	str.w	r3, [r2], #4

08003a18 <LoopFillZerobss>:
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <LoopFillZerobss+0x28>)
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d3f9      	bcc.n	8003a12 <FillZerobss>
 8003a1e:	f7ff ffb3 	bl	8003988 <SystemInit>
 8003a22:	f002 ffc3 	bl	80069ac <__libc_init_array>
 8003a26:	f7ff fa91 	bl	8002f4c <main>
 8003a2a:	4770      	bx	lr
 8003a2c:	20020000 	.word	0x20020000
 8003a30:	08024bb0 	.word	0x08024bb0
 8003a34:	20000000 	.word	0x20000000
 8003a38:	20000010 	.word	0x20000010
 8003a3c:	20000010 	.word	0x20000010
 8003a40:	20000774 	.word	0x20000774

08003a44 <ADC_IRQHandler>:
 8003a44:	e7fe      	b.n	8003a44 <ADC_IRQHandler>
	...

08003a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a4c:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <HAL_Init+0x40>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <HAL_Init+0x40>)
 8003a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_Init+0x40>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <HAL_Init+0x40>)
 8003a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <HAL_Init+0x40>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a07      	ldr	r2, [pc, #28]	; (8003a88 <HAL_Init+0x40>)
 8003a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a70:	2003      	movs	r0, #3
 8003a72:	f000 fbaf 	bl	80041d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a76:	2000      	movs	r0, #0
 8003a78:	f000 f808 	bl	8003a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a7c:	f7ff fd58 	bl	8003530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40023c00 	.word	0x40023c00

08003a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_InitTick+0x54>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <HAL_InitTick+0x58>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fbc7 	bl	800423e <HAL_SYSTICK_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e00e      	b.n	8003ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b0f      	cmp	r3, #15
 8003abe:	d80a      	bhi.n	8003ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac8:	f000 fb8f 	bl	80041ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003acc:	4a06      	ldr	r2, [pc, #24]	; (8003ae8 <HAL_InitTick+0x5c>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e000      	b.n	8003ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000004 	.word	0x20000004
 8003ae4:	2000000c 	.word	0x2000000c
 8003ae8:	20000008 	.word	0x20000008

08003aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_IncTick+0x20>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_IncTick+0x24>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4413      	add	r3, r2
 8003afc:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <HAL_IncTick+0x24>)
 8003afe:	6013      	str	r3, [r2, #0]
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	2000000c 	.word	0x2000000c
 8003b10:	20000770 	.word	0x20000770

08003b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return uwTick;
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <HAL_GetTick+0x14>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	20000770 	.word	0x20000770

08003b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b34:	f7ff ffee 	bl	8003b14 <HAL_GetTick>
 8003b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b44:	d005      	beq.n	8003b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HAL_Delay+0x40>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b52:	bf00      	nop
 8003b54:	f7ff ffde 	bl	8003b14 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d8f7      	bhi.n	8003b54 <HAL_Delay+0x28>
  {
  }
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	2000000c 	.word	0x2000000c

08003b70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e033      	b.n	8003bee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff fcfc 	bl	800358c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d118      	bne.n	8003be0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bb6:	f023 0302 	bic.w	r3, r3, #2
 8003bba:	f043 0202 	orr.w	r2, r3, #2
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f93a 	bl	8003e3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f023 0303 	bic.w	r3, r3, #3
 8003bd6:	f043 0201 	orr.w	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
 8003bde:	e001      	b.n	8003be4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x1c>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e105      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x228>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b09      	cmp	r3, #9
 8003c22:	d925      	bls.n	8003c70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68d9      	ldr	r1, [r3, #12]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	4613      	mov	r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	4413      	add	r3, r2
 8003c38:	3b1e      	subs	r3, #30
 8003c3a:	2207      	movs	r2, #7
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43da      	mvns	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	400a      	ands	r2, r1
 8003c48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68d9      	ldr	r1, [r3, #12]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4403      	add	r3, r0
 8003c62:	3b1e      	subs	r3, #30
 8003c64:	409a      	lsls	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	e022      	b.n	8003cb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6919      	ldr	r1, [r3, #16]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4613      	mov	r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4413      	add	r3, r2
 8003c84:	2207      	movs	r2, #7
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	400a      	ands	r2, r1
 8003c92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6919      	ldr	r1, [r3, #16]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	4403      	add	r3, r0
 8003cac:	409a      	lsls	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d824      	bhi.n	8003d08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	3b05      	subs	r3, #5
 8003cd0:	221f      	movs	r2, #31
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43da      	mvns	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	400a      	ands	r2, r1
 8003cde:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	4618      	mov	r0, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3b05      	subs	r3, #5
 8003cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	635a      	str	r2, [r3, #52]	; 0x34
 8003d06:	e04c      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b0c      	cmp	r3, #12
 8003d0e:	d824      	bhi.n	8003d5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	3b23      	subs	r3, #35	; 0x23
 8003d22:	221f      	movs	r2, #31
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43da      	mvns	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	400a      	ands	r2, r1
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	4618      	mov	r0, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	3b23      	subs	r3, #35	; 0x23
 8003d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
 8003d58:	e023      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	3b41      	subs	r3, #65	; 0x41
 8003d6c:	221f      	movs	r2, #31
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43da      	mvns	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	400a      	ands	r2, r1
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	4618      	mov	r0, r3
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	3b41      	subs	r3, #65	; 0x41
 8003d96:	fa00 f203 	lsl.w	r2, r0, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003da2:	4b22      	ldr	r3, [pc, #136]	; (8003e2c <HAL_ADC_ConfigChannel+0x234>)
 8003da4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a21      	ldr	r2, [pc, #132]	; (8003e30 <HAL_ADC_ConfigChannel+0x238>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d109      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x1cc>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b12      	cmp	r3, #18
 8003db6:	d105      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <HAL_ADC_ConfigChannel+0x238>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d123      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x21e>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d003      	beq.n	8003dde <HAL_ADC_ConfigChannel+0x1e6>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b11      	cmp	r3, #17
 8003ddc:	d11b      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d111      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <HAL_ADC_ConfigChannel+0x23c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <HAL_ADC_ConfigChannel+0x240>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	0c9a      	lsrs	r2, r3, #18
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e08:	e002      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f9      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40012300 	.word	0x40012300
 8003e30:	40012000 	.word	0x40012000
 8003e34:	20000004 	.word	0x20000004
 8003e38:	431bde83 	.word	0x431bde83

08003e3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e44:	4b79      	ldr	r3, [pc, #484]	; (800402c <ADC_Init+0x1f0>)
 8003e46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6859      	ldr	r1, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	021a      	lsls	r2, r3, #8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6859      	ldr	r1, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6899      	ldr	r1, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ece:	4a58      	ldr	r2, [pc, #352]	; (8004030 <ADC_Init+0x1f4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d022      	beq.n	8003f1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ee2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6899      	ldr	r1, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6899      	ldr	r1, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	e00f      	b.n	8003f3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0202 	bic.w	r2, r2, #2
 8003f48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6899      	ldr	r1, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7e1b      	ldrb	r3, [r3, #24]
 8003f54:	005a      	lsls	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01b      	beq.n	8003fa0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6859      	ldr	r1, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	3b01      	subs	r3, #1
 8003f94:	035a      	lsls	r2, r3, #13
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	e007      	b.n	8003fb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	051a      	lsls	r2, r3, #20
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6899      	ldr	r1, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ff2:	025a      	lsls	r2, r3, #9
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6899      	ldr	r1, [r3, #8]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	029a      	lsls	r2, r3, #10
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	609a      	str	r2, [r3, #8]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40012300 	.word	0x40012300
 8004030:	0f000001 	.word	0x0f000001

08004034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <__NVIC_SetPriorityGrouping+0x44>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004050:	4013      	ands	r3, r2
 8004052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800405c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004066:	4a04      	ldr	r2, [pc, #16]	; (8004078 <__NVIC_SetPriorityGrouping+0x44>)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	60d3      	str	r3, [r2, #12]
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	e000ed00 	.word	0xe000ed00

0800407c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <__NVIC_GetPriorityGrouping+0x18>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	0a1b      	lsrs	r3, r3, #8
 8004086:	f003 0307 	and.w	r3, r3, #7
}
 800408a:	4618      	mov	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	db0b      	blt.n	80040c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	f003 021f 	and.w	r2, r3, #31
 80040b0:	4907      	ldr	r1, [pc, #28]	; (80040d0 <__NVIC_EnableIRQ+0x38>)
 80040b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	2001      	movs	r0, #1
 80040ba:	fa00 f202 	lsl.w	r2, r0, r2
 80040be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	e000e100 	.word	0xe000e100

080040d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	6039      	str	r1, [r7, #0]
 80040de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	db0a      	blt.n	80040fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	490c      	ldr	r1, [pc, #48]	; (8004120 <__NVIC_SetPriority+0x4c>)
 80040ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f2:	0112      	lsls	r2, r2, #4
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	440b      	add	r3, r1
 80040f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040fc:	e00a      	b.n	8004114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	b2da      	uxtb	r2, r3
 8004102:	4908      	ldr	r1, [pc, #32]	; (8004124 <__NVIC_SetPriority+0x50>)
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	3b04      	subs	r3, #4
 800410c:	0112      	lsls	r2, r2, #4
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	440b      	add	r3, r1
 8004112:	761a      	strb	r2, [r3, #24]
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	e000e100 	.word	0xe000e100
 8004124:	e000ed00 	.word	0xe000ed00

08004128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004128:	b480      	push	{r7}
 800412a:	b089      	sub	sp, #36	; 0x24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f1c3 0307 	rsb	r3, r3, #7
 8004142:	2b04      	cmp	r3, #4
 8004144:	bf28      	it	cs
 8004146:	2304      	movcs	r3, #4
 8004148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	3304      	adds	r3, #4
 800414e:	2b06      	cmp	r3, #6
 8004150:	d902      	bls.n	8004158 <NVIC_EncodePriority+0x30>
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3b03      	subs	r3, #3
 8004156:	e000      	b.n	800415a <NVIC_EncodePriority+0x32>
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800415c:	f04f 32ff 	mov.w	r2, #4294967295
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43da      	mvns	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	401a      	ands	r2, r3
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004170:	f04f 31ff 	mov.w	r1, #4294967295
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	fa01 f303 	lsl.w	r3, r1, r3
 800417a:	43d9      	mvns	r1, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004180:	4313      	orrs	r3, r2
         );
}
 8004182:	4618      	mov	r0, r3
 8004184:	3724      	adds	r7, #36	; 0x24
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3b01      	subs	r3, #1
 800419c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041a0:	d301      	bcc.n	80041a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041a2:	2301      	movs	r3, #1
 80041a4:	e00f      	b.n	80041c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041a6:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <SysTick_Config+0x40>)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041ae:	210f      	movs	r1, #15
 80041b0:	f04f 30ff 	mov.w	r0, #4294967295
 80041b4:	f7ff ff8e 	bl	80040d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <SysTick_Config+0x40>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <SysTick_Config+0x40>)
 80041c0:	2207      	movs	r2, #7
 80041c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	e000e010 	.word	0xe000e010

080041d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff ff29 	bl	8004034 <__NVIC_SetPriorityGrouping>
}
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b086      	sub	sp, #24
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	4603      	mov	r3, r0
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	607a      	str	r2, [r7, #4]
 80041f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041fc:	f7ff ff3e 	bl	800407c <__NVIC_GetPriorityGrouping>
 8004200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	6978      	ldr	r0, [r7, #20]
 8004208:	f7ff ff8e 	bl	8004128 <NVIC_EncodePriority>
 800420c:	4602      	mov	r2, r0
 800420e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004212:	4611      	mov	r1, r2
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff ff5d 	bl	80040d4 <__NVIC_SetPriority>
}
 800421a:	bf00      	nop
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	4603      	mov	r3, r0
 800422a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800422c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ff31 	bl	8004098 <__NVIC_EnableIRQ>
}
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff ffa2 	bl	8004190 <SysTick_Config>
 800424c:	4603      	mov	r3, r0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e014      	b.n	8004292 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	791b      	ldrb	r3, [r3, #4]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d105      	bne.n	800427e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff f9cb 	bl	8003614 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2202      	movs	r2, #2
 8004282:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	2300      	movs	r3, #0
 80042aa:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	795b      	ldrb	r3, [r3, #5]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_DAC_Start+0x1e>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e050      	b.n	800435a <HAL_DAC_Start+0xc0>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6819      	ldr	r1, [r3, #0]
 80042ca:	2201      	movs	r2, #1
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	409a      	lsls	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d11a      	bne.n	8004314 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042f4:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d127      	bne.n	800434c <HAL_DAC_Start+0xb2>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b38      	cmp	r3, #56	; 0x38
 8004300:	d124      	bne.n	800434c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	605a      	str	r2, [r3, #4]
 8004312:	e01b      	b.n	800434c <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800431e:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800432a:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004332:	d10b      	bne.n	800434c <HAL_DAC_Start+0xb2>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800433a:	d107      	bne.n	800434c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0202 	orr.w	r2, r2, #2
 800434a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004366:	b480      	push	{r7}
 8004368:	b087      	sub	sp, #28
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	795b      	ldrb	r3, [r3, #5]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_DAC_ConfigChannel+0x20>
 8004382:	2302      	movs	r3, #2
 8004384:	e036      	b.n	80043f4 <HAL_DAC_ConfigChannel+0x8e>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2202      	movs	r2, #2
 8004390:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800439a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4013      	ands	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	22c0      	movs	r2, #192	; 0xc0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43da      	mvns	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	400a      	ands	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d105      	bne.n	800442a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	3308      	adds	r3, #8
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	e004      	b.n	8004434 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4413      	add	r3, r2
 8004430:	3314      	adds	r3, #20
 8004432:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	461a      	mov	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d004      	beq.n	8004468 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2280      	movs	r2, #128	; 0x80
 8004462:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e00c      	b.n	8004482 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2205      	movs	r2, #5
 800446c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004490:	b480      	push	{r7}
 8004492:	b089      	sub	sp, #36	; 0x24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800449e:	2300      	movs	r3, #0
 80044a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	e16b      	b.n	8004784 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044ac:	2201      	movs	r2, #1
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4013      	ands	r3, r2
 80044be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	f040 815a 	bne.w	800477e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d003      	beq.n	80044da <HAL_GPIO_Init+0x4a>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b12      	cmp	r3, #18
 80044d8:	d123      	bne.n	8004522 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	08da      	lsrs	r2, r3, #3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3208      	adds	r2, #8
 80044e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	220f      	movs	r2, #15
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4313      	orrs	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	08da      	lsrs	r2, r3, #3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3208      	adds	r2, #8
 800451c:	69b9      	ldr	r1, [r7, #24]
 800451e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	2203      	movs	r2, #3
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 0203 	and.w	r2, r3, #3
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d00b      	beq.n	8004576 <HAL_GPIO_Init+0xe6>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d007      	beq.n	8004576 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800456a:	2b11      	cmp	r3, #17
 800456c:	d003      	beq.n	8004576 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b12      	cmp	r3, #18
 8004574:	d130      	bne.n	80045d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	2203      	movs	r2, #3
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4013      	ands	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4313      	orrs	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045ac:	2201      	movs	r2, #1
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 0201 	and.w	r2, r3, #1
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	2203      	movs	r2, #3
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4313      	orrs	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80b4 	beq.w	800477e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	4b5f      	ldr	r3, [pc, #380]	; (8004798 <HAL_GPIO_Init+0x308>)
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	4a5e      	ldr	r2, [pc, #376]	; (8004798 <HAL_GPIO_Init+0x308>)
 8004620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004624:	6453      	str	r3, [r2, #68]	; 0x44
 8004626:	4b5c      	ldr	r3, [pc, #368]	; (8004798 <HAL_GPIO_Init+0x308>)
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004632:	4a5a      	ldr	r2, [pc, #360]	; (800479c <HAL_GPIO_Init+0x30c>)
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	089b      	lsrs	r3, r3, #2
 8004638:	3302      	adds	r3, #2
 800463a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	220f      	movs	r2, #15
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	43db      	mvns	r3, r3
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	4013      	ands	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a51      	ldr	r2, [pc, #324]	; (80047a0 <HAL_GPIO_Init+0x310>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d02b      	beq.n	80046b6 <HAL_GPIO_Init+0x226>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a50      	ldr	r2, [pc, #320]	; (80047a4 <HAL_GPIO_Init+0x314>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d025      	beq.n	80046b2 <HAL_GPIO_Init+0x222>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a4f      	ldr	r2, [pc, #316]	; (80047a8 <HAL_GPIO_Init+0x318>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01f      	beq.n	80046ae <HAL_GPIO_Init+0x21e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a4e      	ldr	r2, [pc, #312]	; (80047ac <HAL_GPIO_Init+0x31c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d019      	beq.n	80046aa <HAL_GPIO_Init+0x21a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a4d      	ldr	r2, [pc, #308]	; (80047b0 <HAL_GPIO_Init+0x320>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <HAL_GPIO_Init+0x216>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a4c      	ldr	r2, [pc, #304]	; (80047b4 <HAL_GPIO_Init+0x324>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00d      	beq.n	80046a2 <HAL_GPIO_Init+0x212>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a4b      	ldr	r2, [pc, #300]	; (80047b8 <HAL_GPIO_Init+0x328>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d007      	beq.n	800469e <HAL_GPIO_Init+0x20e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a4a      	ldr	r2, [pc, #296]	; (80047bc <HAL_GPIO_Init+0x32c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d101      	bne.n	800469a <HAL_GPIO_Init+0x20a>
 8004696:	2307      	movs	r3, #7
 8004698:	e00e      	b.n	80046b8 <HAL_GPIO_Init+0x228>
 800469a:	2308      	movs	r3, #8
 800469c:	e00c      	b.n	80046b8 <HAL_GPIO_Init+0x228>
 800469e:	2306      	movs	r3, #6
 80046a0:	e00a      	b.n	80046b8 <HAL_GPIO_Init+0x228>
 80046a2:	2305      	movs	r3, #5
 80046a4:	e008      	b.n	80046b8 <HAL_GPIO_Init+0x228>
 80046a6:	2304      	movs	r3, #4
 80046a8:	e006      	b.n	80046b8 <HAL_GPIO_Init+0x228>
 80046aa:	2303      	movs	r3, #3
 80046ac:	e004      	b.n	80046b8 <HAL_GPIO_Init+0x228>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e002      	b.n	80046b8 <HAL_GPIO_Init+0x228>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <HAL_GPIO_Init+0x228>
 80046b6:	2300      	movs	r3, #0
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	f002 0203 	and.w	r2, r2, #3
 80046be:	0092      	lsls	r2, r2, #2
 80046c0:	4093      	lsls	r3, r2
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046c8:	4934      	ldr	r1, [pc, #208]	; (800479c <HAL_GPIO_Init+0x30c>)
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	089b      	lsrs	r3, r3, #2
 80046ce:	3302      	adds	r3, #2
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046d6:	4b3a      	ldr	r3, [pc, #232]	; (80047c0 <HAL_GPIO_Init+0x330>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046fa:	4a31      	ldr	r2, [pc, #196]	; (80047c0 <HAL_GPIO_Init+0x330>)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004700:	4b2f      	ldr	r3, [pc, #188]	; (80047c0 <HAL_GPIO_Init+0x330>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004724:	4a26      	ldr	r2, [pc, #152]	; (80047c0 <HAL_GPIO_Init+0x330>)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800472a:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <HAL_GPIO_Init+0x330>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	43db      	mvns	r3, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800474e:	4a1c      	ldr	r2, [pc, #112]	; (80047c0 <HAL_GPIO_Init+0x330>)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004754:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <HAL_GPIO_Init+0x330>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	43db      	mvns	r3, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004778:	4a11      	ldr	r2, [pc, #68]	; (80047c0 <HAL_GPIO_Init+0x330>)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3301      	adds	r3, #1
 8004782:	61fb      	str	r3, [r7, #28]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b0f      	cmp	r3, #15
 8004788:	f67f ae90 	bls.w	80044ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800478c:	bf00      	nop
 800478e:	3724      	adds	r7, #36	; 0x24
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	40023800 	.word	0x40023800
 800479c:	40013800 	.word	0x40013800
 80047a0:	40020000 	.word	0x40020000
 80047a4:	40020400 	.word	0x40020400
 80047a8:	40020800 	.word	0x40020800
 80047ac:	40020c00 	.word	0x40020c00
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40021400 	.word	0x40021400
 80047b8:	40021800 	.word	0x40021800
 80047bc:	40021c00 	.word	0x40021c00
 80047c0:	40013c00 	.word	0x40013c00

080047c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	887b      	ldrh	r3, [r7, #2]
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047dc:	2301      	movs	r3, #1
 80047de:	73fb      	strb	r3, [r7, #15]
 80047e0:	e001      	b.n	80047e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	807b      	strh	r3, [r7, #2]
 8004800:	4613      	mov	r3, r2
 8004802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004804:	787b      	ldrb	r3, [r7, #1]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800480a:	887a      	ldrh	r2, [r7, #2]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004810:	e003      	b.n	800481a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004812:	887b      	ldrh	r3, [r7, #2]
 8004814:	041a      	lsls	r2, r3, #16
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	619a      	str	r2, [r3, #24]
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695a      	ldr	r2, [r3, #20]
 8004836:	887b      	ldrh	r3, [r7, #2]
 8004838:	401a      	ands	r2, r3
 800483a:	887b      	ldrh	r3, [r7, #2]
 800483c:	429a      	cmp	r2, r3
 800483e:	d104      	bne.n	800484a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004840:	887b      	ldrh	r3, [r7, #2]
 8004842:	041a      	lsls	r2, r3, #16
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004848:	e002      	b.n	8004850 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800484a:	887a      	ldrh	r2, [r7, #2]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	619a      	str	r2, [r3, #24]
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004868:	695a      	ldr	r2, [r3, #20]
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	4013      	ands	r3, r2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d006      	beq.n	8004880 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004872:	4a05      	ldr	r2, [pc, #20]	; (8004888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	4618      	mov	r0, r3
 800487c:	f7fe fae2 	bl	8002e44 <HAL_GPIO_EXTI_Callback>
  }
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40013c00 	.word	0x40013c00

0800488c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_PWR_PVD_IRQHandler+0x20>)
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800489c:	f000 f808 	bl	80048b0 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80048a0:	4b02      	ldr	r3, [pc, #8]	; (80048ac <HAL_PWR_PVD_IRQHandler+0x20>)
 80048a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80048a6:	615a      	str	r2, [r3, #20]
  }
}
 80048a8:	bf00      	nop
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40013c00 	.word	0x40013c00

080048b0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80048b4:	bf00      	nop
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e22d      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d075      	beq.n	80049ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048de:	4ba3      	ldr	r3, [pc, #652]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d00c      	beq.n	8004904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ea:	4ba0      	ldr	r3, [pc, #640]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d112      	bne.n	800491c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f6:	4b9d      	ldr	r3, [pc, #628]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004902:	d10b      	bne.n	800491c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004904:	4b99      	ldr	r3, [pc, #612]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d05b      	beq.n	80049c8 <HAL_RCC_OscConfig+0x108>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d157      	bne.n	80049c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e208      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004924:	d106      	bne.n	8004934 <HAL_RCC_OscConfig+0x74>
 8004926:	4b91      	ldr	r3, [pc, #580]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a90      	ldr	r2, [pc, #576]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e01d      	b.n	8004970 <HAL_RCC_OscConfig+0xb0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800493c:	d10c      	bne.n	8004958 <HAL_RCC_OscConfig+0x98>
 800493e:	4b8b      	ldr	r3, [pc, #556]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a8a      	ldr	r2, [pc, #552]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	4b88      	ldr	r3, [pc, #544]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a87      	ldr	r2, [pc, #540]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e00b      	b.n	8004970 <HAL_RCC_OscConfig+0xb0>
 8004958:	4b84      	ldr	r3, [pc, #528]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a83      	ldr	r2, [pc, #524]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800495e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	4b81      	ldr	r3, [pc, #516]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a80      	ldr	r2, [pc, #512]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800496a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d013      	beq.n	80049a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7ff f8cc 	bl	8003b14 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004980:	f7ff f8c8 	bl	8003b14 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e1cd      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004992:	4b76      	ldr	r3, [pc, #472]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0xc0>
 800499e:	e014      	b.n	80049ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7ff f8b8 	bl	8003b14 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049a8:	f7ff f8b4 	bl	8003b14 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e1b9      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ba:	4b6c      	ldr	r3, [pc, #432]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0xe8>
 80049c6:	e000      	b.n	80049ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d063      	beq.n	8004a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049d6:	4b65      	ldr	r3, [pc, #404]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e2:	4b62      	ldr	r3, [pc, #392]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d11c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ee:	4b5f      	ldr	r3, [pc, #380]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d116      	bne.n	8004a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fa:	4b5c      	ldr	r3, [pc, #368]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_RCC_OscConfig+0x152>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e18d      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a12:	4b56      	ldr	r3, [pc, #344]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4952      	ldr	r1, [pc, #328]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a26:	e03a      	b.n	8004a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d020      	beq.n	8004a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a30:	4b4f      	ldr	r3, [pc, #316]	; (8004b70 <HAL_RCC_OscConfig+0x2b0>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a36:	f7ff f86d 	bl	8003b14 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a3e:	f7ff f869 	bl	8003b14 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e16e      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a50:	4b46      	ldr	r3, [pc, #280]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5c:	4b43      	ldr	r3, [pc, #268]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4940      	ldr	r1, [pc, #256]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	600b      	str	r3, [r1, #0]
 8004a70:	e015      	b.n	8004a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a72:	4b3f      	ldr	r3, [pc, #252]	; (8004b70 <HAL_RCC_OscConfig+0x2b0>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7ff f84c 	bl	8003b14 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a80:	f7ff f848 	bl	8003b14 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e14d      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a92:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d030      	beq.n	8004b0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d016      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ab2:	4b30      	ldr	r3, [pc, #192]	; (8004b74 <HAL_RCC_OscConfig+0x2b4>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab8:	f7ff f82c 	bl	8003b14 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac0:	f7ff f828 	bl	8003b14 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e12d      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad2:	4b26      	ldr	r3, [pc, #152]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x200>
 8004ade:	e015      	b.n	8004b0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae0:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <HAL_RCC_OscConfig+0x2b4>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae6:	f7ff f815 	bl	8003b14 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aee:	f7ff f811 	bl	8003b14 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e116      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f0      	bne.n	8004aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80a0 	beq.w	8004c5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	4a0e      	ldr	r2, [pc, #56]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3a:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_RCC_OscConfig+0x2b8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d121      	bne.n	8004b9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b56:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <HAL_RCC_OscConfig+0x2b8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a07      	ldr	r2, [pc, #28]	; (8004b78 <HAL_RCC_OscConfig+0x2b8>)
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b62:	f7fe ffd7 	bl	8003b14 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	e011      	b.n	8004b8e <HAL_RCC_OscConfig+0x2ce>
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	42470000 	.word	0x42470000
 8004b74:	42470e80 	.word	0x42470e80
 8004b78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7c:	f7fe ffca 	bl	8003b14 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e0cf      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8e:	4b6a      	ldr	r3, [pc, #424]	; (8004d38 <HAL_RCC_OscConfig+0x478>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d106      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x2f0>
 8004ba2:	4b66      	ldr	r3, [pc, #408]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	4a65      	ldr	r2, [pc, #404]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004ba8:	f043 0301 	orr.w	r3, r3, #1
 8004bac:	6713      	str	r3, [r2, #112]	; 0x70
 8004bae:	e01c      	b.n	8004bea <HAL_RCC_OscConfig+0x32a>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2b05      	cmp	r3, #5
 8004bb6:	d10c      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x312>
 8004bb8:	4b60      	ldr	r3, [pc, #384]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbc:	4a5f      	ldr	r2, [pc, #380]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004bbe:	f043 0304 	orr.w	r3, r3, #4
 8004bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc4:	4b5d      	ldr	r3, [pc, #372]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc8:	4a5c      	ldr	r2, [pc, #368]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd0:	e00b      	b.n	8004bea <HAL_RCC_OscConfig+0x32a>
 8004bd2:	4b5a      	ldr	r3, [pc, #360]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd6:	4a59      	ldr	r2, [pc, #356]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bde:	4b57      	ldr	r3, [pc, #348]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	4a56      	ldr	r2, [pc, #344]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004be4:	f023 0304 	bic.w	r3, r3, #4
 8004be8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d015      	beq.n	8004c1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf2:	f7fe ff8f 	bl	8003b14 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fe ff8b 	bl	8003b14 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e08e      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c10:	4b4a      	ldr	r3, [pc, #296]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0ee      	beq.n	8004bfa <HAL_RCC_OscConfig+0x33a>
 8004c1c:	e014      	b.n	8004c48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c1e:	f7fe ff79 	bl	8003b14 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c24:	e00a      	b.n	8004c3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c26:	f7fe ff75 	bl	8003b14 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e078      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3c:	4b3f      	ldr	r3, [pc, #252]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1ee      	bne.n	8004c26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d105      	bne.n	8004c5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c4e:	4b3b      	ldr	r3, [pc, #236]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	4a3a      	ldr	r2, [pc, #232]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d064      	beq.n	8004d2c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c62:	4b36      	ldr	r3, [pc, #216]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d05c      	beq.n	8004d28 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d141      	bne.n	8004cfa <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c76:	4b32      	ldr	r3, [pc, #200]	; (8004d40 <HAL_RCC_OscConfig+0x480>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7c:	f7fe ff4a 	bl	8003b14 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c84:	f7fe ff46 	bl	8003b14 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e04b      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c96:	4b29      	ldr	r3, [pc, #164]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	019b      	lsls	r3, r3, #6
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	041b      	lsls	r3, r3, #16
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	061b      	lsls	r3, r3, #24
 8004cc6:	491d      	ldr	r1, [pc, #116]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ccc:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <HAL_RCC_OscConfig+0x480>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd2:	f7fe ff1f 	bl	8003b14 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cda:	f7fe ff1b 	bl	8003b14 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e020      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x41a>
 8004cf8:	e018      	b.n	8004d2c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfa:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <HAL_RCC_OscConfig+0x480>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d00:	f7fe ff08 	bl	8003b14 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fe ff04 	bl	8003b14 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e009      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1a:	4b08      	ldr	r3, [pc, #32]	; (8004d3c <HAL_RCC_OscConfig+0x47c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x448>
 8004d26:	e001      	b.n	8004d2c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40007000 	.word	0x40007000
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	42470060 	.word	0x42470060

08004d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0ca      	b.n	8004eee <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d58:	4b67      	ldr	r3, [pc, #412]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d90c      	bls.n	8004d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d66:	4b64      	ldr	r3, [pc, #400]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6e:	4b62      	ldr	r3, [pc, #392]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0b6      	b.n	8004eee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d020      	beq.n	8004dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d98:	4b58      	ldr	r3, [pc, #352]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	4a57      	ldr	r2, [pc, #348]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004db0:	4b52      	ldr	r3, [pc, #328]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	4a51      	ldr	r2, [pc, #324]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dbc:	4b4f      	ldr	r3, [pc, #316]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	494c      	ldr	r1, [pc, #304]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d044      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d107      	bne.n	8004df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de2:	4b46      	ldr	r3, [pc, #280]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d119      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e07d      	b.n	8004eee <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d003      	beq.n	8004e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d107      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e02:	4b3e      	ldr	r3, [pc, #248]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e06d      	b.n	8004eee <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e12:	4b3a      	ldr	r3, [pc, #232]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e065      	b.n	8004eee <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e22:	4b36      	ldr	r3, [pc, #216]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f023 0203 	bic.w	r2, r3, #3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	4933      	ldr	r1, [pc, #204]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e34:	f7fe fe6e 	bl	8003b14 <HAL_GetTick>
 8004e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3a:	e00a      	b.n	8004e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e3c:	f7fe fe6a 	bl	8003b14 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e04d      	b.n	8004eee <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e52:	4b2a      	ldr	r3, [pc, #168]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 020c 	and.w	r2, r3, #12
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d1eb      	bne.n	8004e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e64:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d20c      	bcs.n	8004e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e72:	4b21      	ldr	r3, [pc, #132]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d001      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e030      	b.n	8004eee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e98:	4b18      	ldr	r3, [pc, #96]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4915      	ldr	r1, [pc, #84]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eb6:	4b11      	ldr	r3, [pc, #68]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	490d      	ldr	r1, [pc, #52]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eca:	f000 f81d 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8004ece:	4601      	mov	r1, r0
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	5cd3      	ldrb	r3, [r2, r3]
 8004ede:	fa21 f303 	lsr.w	r3, r1, r3
 8004ee2:	4a08      	ldr	r2, [pc, #32]	; (8004f04 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f7fe fdd0 	bl	8003a8c <HAL_InitTick>

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40023c00 	.word	0x40023c00
 8004efc:	40023800 	.word	0x40023800
 8004f00:	08024b88 	.word	0x08024b88
 8004f04:	20000004 	.word	0x20000004

08004f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	2300      	movs	r3, #0
 8004f18:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f1e:	4b63      	ldr	r3, [pc, #396]	; (80050ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d007      	beq.n	8004f3a <HAL_RCC_GetSysClockFreq+0x32>
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d008      	beq.n	8004f40 <HAL_RCC_GetSysClockFreq+0x38>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f040 80b4 	bne.w	800509c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f34:	4b5e      	ldr	r3, [pc, #376]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f36:	60bb      	str	r3, [r7, #8]
       break;
 8004f38:	e0b3      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f3a:	4b5e      	ldr	r3, [pc, #376]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004f3c:	60bb      	str	r3, [r7, #8]
      break;
 8004f3e:	e0b0      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f40:	4b5a      	ldr	r3, [pc, #360]	; (80050ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f4a:	4b58      	ldr	r3, [pc, #352]	; (80050ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d04a      	beq.n	8004fec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f56:	4b55      	ldr	r3, [pc, #340]	; (80050ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	099b      	lsrs	r3, r3, #6
 8004f5c:	f04f 0400 	mov.w	r4, #0
 8004f60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	ea03 0501 	and.w	r5, r3, r1
 8004f6c:	ea04 0602 	and.w	r6, r4, r2
 8004f70:	4629      	mov	r1, r5
 8004f72:	4632      	mov	r2, r6
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	f04f 0400 	mov.w	r4, #0
 8004f7c:	0154      	lsls	r4, r2, #5
 8004f7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f82:	014b      	lsls	r3, r1, #5
 8004f84:	4619      	mov	r1, r3
 8004f86:	4622      	mov	r2, r4
 8004f88:	1b49      	subs	r1, r1, r5
 8004f8a:	eb62 0206 	sbc.w	r2, r2, r6
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	f04f 0400 	mov.w	r4, #0
 8004f96:	0194      	lsls	r4, r2, #6
 8004f98:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f9c:	018b      	lsls	r3, r1, #6
 8004f9e:	1a5b      	subs	r3, r3, r1
 8004fa0:	eb64 0402 	sbc.w	r4, r4, r2
 8004fa4:	f04f 0100 	mov.w	r1, #0
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	00e2      	lsls	r2, r4, #3
 8004fae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fb2:	00d9      	lsls	r1, r3, #3
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4614      	mov	r4, r2
 8004fb8:	195b      	adds	r3, r3, r5
 8004fba:	eb44 0406 	adc.w	r4, r4, r6
 8004fbe:	f04f 0100 	mov.w	r1, #0
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	0262      	lsls	r2, r4, #9
 8004fc8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004fcc:	0259      	lsls	r1, r3, #9
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4614      	mov	r4, r2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f04f 0400 	mov.w	r4, #0
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4623      	mov	r3, r4
 8004fe0:	f7fb f8f2 	bl	80001c8 <__aeabi_uldivmod>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	e049      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fec:	4b2f      	ldr	r3, [pc, #188]	; (80050ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	099b      	lsrs	r3, r3, #6
 8004ff2:	f04f 0400 	mov.w	r4, #0
 8004ff6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	ea03 0501 	and.w	r5, r3, r1
 8005002:	ea04 0602 	and.w	r6, r4, r2
 8005006:	4629      	mov	r1, r5
 8005008:	4632      	mov	r2, r6
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	f04f 0400 	mov.w	r4, #0
 8005012:	0154      	lsls	r4, r2, #5
 8005014:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005018:	014b      	lsls	r3, r1, #5
 800501a:	4619      	mov	r1, r3
 800501c:	4622      	mov	r2, r4
 800501e:	1b49      	subs	r1, r1, r5
 8005020:	eb62 0206 	sbc.w	r2, r2, r6
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	f04f 0400 	mov.w	r4, #0
 800502c:	0194      	lsls	r4, r2, #6
 800502e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005032:	018b      	lsls	r3, r1, #6
 8005034:	1a5b      	subs	r3, r3, r1
 8005036:	eb64 0402 	sbc.w	r4, r4, r2
 800503a:	f04f 0100 	mov.w	r1, #0
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	00e2      	lsls	r2, r4, #3
 8005044:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005048:	00d9      	lsls	r1, r3, #3
 800504a:	460b      	mov	r3, r1
 800504c:	4614      	mov	r4, r2
 800504e:	195b      	adds	r3, r3, r5
 8005050:	eb44 0406 	adc.w	r4, r4, r6
 8005054:	f04f 0100 	mov.w	r1, #0
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	02a2      	lsls	r2, r4, #10
 800505e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005062:	0299      	lsls	r1, r3, #10
 8005064:	460b      	mov	r3, r1
 8005066:	4614      	mov	r4, r2
 8005068:	4618      	mov	r0, r3
 800506a:	4621      	mov	r1, r4
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f04f 0400 	mov.w	r4, #0
 8005072:	461a      	mov	r2, r3
 8005074:	4623      	mov	r3, r4
 8005076:	f7fb f8a7 	bl	80001c8 <__aeabi_uldivmod>
 800507a:	4603      	mov	r3, r0
 800507c:	460c      	mov	r4, r1
 800507e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	0c1b      	lsrs	r3, r3, #16
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	3301      	adds	r3, #1
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	fbb2 f3f3 	udiv	r3, r2, r3
 8005098:	60bb      	str	r3, [r7, #8]
      break;
 800509a:	e002      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800509c:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800509e:	60bb      	str	r3, [r7, #8]
      break;
 80050a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050a2:	68bb      	ldr	r3, [r7, #8]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ac:	40023800 	.word	0x40023800
 80050b0:	00f42400 	.word	0x00f42400
 80050b4:	007a1200 	.word	0x007a1200

080050b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <HAL_RCC_GetHCLKFreq+0x14>)
 80050be:	681b      	ldr	r3, [r3, #0]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	20000004 	.word	0x20000004

080050d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050d4:	f7ff fff0 	bl	80050b8 <HAL_RCC_GetHCLKFreq>
 80050d8:	4601      	mov	r1, r0
 80050da:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	0a9b      	lsrs	r3, r3, #10
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	4a03      	ldr	r2, [pc, #12]	; (80050f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050e6:	5cd3      	ldrb	r3, [r2, r3]
 80050e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40023800 	.word	0x40023800
 80050f4:	08024b98 	.word	0x08024b98

080050f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050fc:	f7ff ffdc 	bl	80050b8 <HAL_RCC_GetHCLKFreq>
 8005100:	4601      	mov	r1, r0
 8005102:	4b05      	ldr	r3, [pc, #20]	; (8005118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	0b5b      	lsrs	r3, r3, #13
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	4a03      	ldr	r2, [pc, #12]	; (800511c <HAL_RCC_GetPCLK2Freq+0x24>)
 800510e:	5cd3      	ldrb	r3, [r2, r3]
 8005110:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005114:	4618      	mov	r0, r3
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40023800 	.word	0x40023800
 800511c:	08024b98 	.word	0x08024b98

08005120 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e056      	b.n	80051e0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d106      	bne.n	8005152 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7fe faa5 	bl	800369c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005168:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	ea42 0103 	orr.w	r1, r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	0c1b      	lsrs	r3, r3, #16
 80051b0:	f003 0104 	and.w	r1, r3, #4
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	4613      	mov	r3, r2
 80051f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_SPI_Transmit+0x22>
 8005206:	2302      	movs	r3, #2
 8005208:	e11e      	b.n	8005448 <HAL_SPI_Transmit+0x260>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005212:	f7fe fc7f 	bl	8003b14 <HAL_GetTick>
 8005216:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	d002      	beq.n	800522e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005228:	2302      	movs	r3, #2
 800522a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800522c:	e103      	b.n	8005436 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_SPI_Transmit+0x52>
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d102      	bne.n	8005240 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800523e:	e0fa      	b.n	8005436 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2203      	movs	r2, #3
 8005244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	88fa      	ldrh	r2, [r7, #6]
 8005258:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	88fa      	ldrh	r2, [r7, #6]
 800525e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005286:	d107      	bne.n	8005298 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005296:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b40      	cmp	r3, #64	; 0x40
 80052a4:	d007      	beq.n	80052b6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052be:	d14b      	bne.n	8005358 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <HAL_SPI_Transmit+0xe6>
 80052c8:	8afb      	ldrh	r3, [r7, #22]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d13e      	bne.n	800534c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	881a      	ldrh	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	1c9a      	adds	r2, r3, #2
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052f2:	e02b      	b.n	800534c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d112      	bne.n	8005328 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	881a      	ldrh	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	1c9a      	adds	r2, r3, #2
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	86da      	strh	r2, [r3, #54]	; 0x36
 8005326:	e011      	b.n	800534c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005328:	f7fe fbf4 	bl	8003b14 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d803      	bhi.n	8005340 <HAL_SPI_Transmit+0x158>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	d102      	bne.n	8005346 <HAL_SPI_Transmit+0x15e>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	77fb      	strb	r3, [r7, #31]
          goto error;
 800534a:	e074      	b.n	8005436 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1ce      	bne.n	80052f4 <HAL_SPI_Transmit+0x10c>
 8005356:	e04c      	b.n	80053f2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <HAL_SPI_Transmit+0x17e>
 8005360:	8afb      	ldrh	r3, [r7, #22]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d140      	bne.n	80053e8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	330c      	adds	r3, #12
 8005370:	7812      	ldrb	r2, [r2, #0]
 8005372:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800538c:	e02c      	b.n	80053e8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b02      	cmp	r3, #2
 800539a:	d113      	bne.n	80053c4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	330c      	adds	r3, #12
 80053a6:	7812      	ldrb	r2, [r2, #0]
 80053a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80053c2:	e011      	b.n	80053e8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053c4:	f7fe fba6 	bl	8003b14 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d803      	bhi.n	80053dc <HAL_SPI_Transmit+0x1f4>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053da:	d102      	bne.n	80053e2 <HAL_SPI_Transmit+0x1fa>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d102      	bne.n	80053e8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053e6:	e026      	b.n	8005436 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1cd      	bne.n	800538e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 fa44 	bl	8005884 <SPI_EndRxTxTransaction>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2220      	movs	r2, #32
 8005406:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005410:	2300      	movs	r3, #0
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	77fb      	strb	r3, [r7, #31]
 8005432:	e000      	b.n	8005436 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005434:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005446:	7ffb      	ldrb	r3, [r7, #31]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08c      	sub	sp, #48	; 0x30
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800545e:	2301      	movs	r3, #1
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x26>
 8005472:	2302      	movs	r3, #2
 8005474:	e18a      	b.n	800578c <HAL_SPI_TransmitReceive+0x33c>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800547e:	f7fe fb49 	bl	8003b14 <HAL_GetTick>
 8005482:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005494:	887b      	ldrh	r3, [r7, #2]
 8005496:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005498:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800549c:	2b01      	cmp	r3, #1
 800549e:	d00f      	beq.n	80054c0 <HAL_SPI_TransmitReceive+0x70>
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a6:	d107      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d103      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x68>
 80054b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d003      	beq.n	80054c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
 80054ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054be:	e15b      	b.n	8005778 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <HAL_SPI_TransmitReceive+0x82>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_SPI_TransmitReceive+0x82>
 80054cc:	887b      	ldrh	r3, [r7, #2]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d103      	bne.n	80054da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054d8:	e14e      	b.n	8005778 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d003      	beq.n	80054ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2205      	movs	r2, #5
 80054ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	887a      	ldrh	r2, [r7, #2]
 80054fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	887a      	ldrh	r2, [r7, #2]
 8005504:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	887a      	ldrh	r2, [r7, #2]
 8005510:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	887a      	ldrh	r2, [r7, #2]
 8005516:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d007      	beq.n	8005542 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005540:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800554a:	d178      	bne.n	800563e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <HAL_SPI_TransmitReceive+0x10a>
 8005554:	8b7b      	ldrh	r3, [r7, #26]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d166      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	881a      	ldrh	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	1c9a      	adds	r2, r3, #2
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800557e:	e053      	b.n	8005628 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b02      	cmp	r3, #2
 800558c:	d11b      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x176>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d016      	beq.n	80055c6 <HAL_SPI_TransmitReceive+0x176>
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	2b01      	cmp	r3, #1
 800559c:	d113      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	881a      	ldrh	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	1c9a      	adds	r2, r3, #2
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d119      	bne.n	8005608 <HAL_SPI_TransmitReceive+0x1b8>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d014      	beq.n	8005608 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	b292      	uxth	r2, r2
 80055ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	1c9a      	adds	r2, r3, #2
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005604:	2301      	movs	r3, #1
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005608:	f7fe fa84 	bl	8003b14 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005614:	429a      	cmp	r2, r3
 8005616:	d807      	bhi.n	8005628 <HAL_SPI_TransmitReceive+0x1d8>
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d003      	beq.n	8005628 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005626:	e0a7      	b.n	8005778 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1a6      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x130>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1a1      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x130>
 800563c:	e07c      	b.n	8005738 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <HAL_SPI_TransmitReceive+0x1fc>
 8005646:	8b7b      	ldrh	r3, [r7, #26]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d16b      	bne.n	8005724 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	7812      	ldrb	r2, [r2, #0]
 8005658:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005672:	e057      	b.n	8005724 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b02      	cmp	r3, #2
 8005680:	d11c      	bne.n	80056bc <HAL_SPI_TransmitReceive+0x26c>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d017      	beq.n	80056bc <HAL_SPI_TransmitReceive+0x26c>
 800568c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568e:	2b01      	cmp	r3, #1
 8005690:	d114      	bne.n	80056bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	330c      	adds	r3, #12
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d119      	bne.n	80056fe <HAL_SPI_TransmitReceive+0x2ae>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d014      	beq.n	80056fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056fa:	2301      	movs	r3, #1
 80056fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056fe:	f7fe fa09 	bl	8003b14 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800570a:	429a      	cmp	r2, r3
 800570c:	d803      	bhi.n	8005716 <HAL_SPI_TransmitReceive+0x2c6>
 800570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d102      	bne.n	800571c <HAL_SPI_TransmitReceive+0x2cc>
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	2b00      	cmp	r3, #0
 800571a:	d103      	bne.n	8005724 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005722:	e029      	b.n	8005778 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1a2      	bne.n	8005674 <HAL_SPI_TransmitReceive+0x224>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d19d      	bne.n	8005674 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f8a1 	bl	8005884 <SPI_EndRxTxTransaction>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d006      	beq.n	8005756 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005754:	e010      	b.n	8005778 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	e000      	b.n	8005778 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005776:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005788:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800578c:	4618      	mov	r0, r3
 800578e:	3730      	adds	r7, #48	; 0x30
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057a2:	b2db      	uxtb	r3, r3
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	4613      	mov	r3, r2
 80057be:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057c0:	e04c      	b.n	800585c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c8:	d048      	beq.n	800585c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80057ca:	f7fe f9a3 	bl	8003b14 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d902      	bls.n	80057e0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d13d      	bne.n	800585c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f8:	d111      	bne.n	800581e <SPI_WaitFlagStateUntilTimeout+0x6e>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005802:	d004      	beq.n	800580e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580c:	d107      	bne.n	800581e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800581c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005826:	d10f      	bne.n	8005848 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005846:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e00f      	b.n	800587c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	4013      	ands	r3, r2
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	429a      	cmp	r2, r3
 800586a:	bf0c      	ite	eq
 800586c:	2301      	moveq	r3, #1
 800586e:	2300      	movne	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	429a      	cmp	r2, r3
 8005878:	d1a3      	bne.n	80057c2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005890:	4b1b      	ldr	r3, [pc, #108]	; (8005900 <SPI_EndRxTxTransaction+0x7c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a1b      	ldr	r2, [pc, #108]	; (8005904 <SPI_EndRxTxTransaction+0x80>)
 8005896:	fba2 2303 	umull	r2, r3, r2, r3
 800589a:	0d5b      	lsrs	r3, r3, #21
 800589c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058a0:	fb02 f303 	mul.w	r3, r2, r3
 80058a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ae:	d112      	bne.n	80058d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2200      	movs	r2, #0
 80058b8:	2180      	movs	r1, #128	; 0x80
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f7ff ff78 	bl	80057b0 <SPI_WaitFlagStateUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d016      	beq.n	80058f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ca:	f043 0220 	orr.w	r2, r3, #32
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e00f      	b.n	80058f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	3b01      	subs	r3, #1
 80058e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ec:	2b80      	cmp	r3, #128	; 0x80
 80058ee:	d0f2      	beq.n	80058d6 <SPI_EndRxTxTransaction+0x52>
 80058f0:	e000      	b.n	80058f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80058f2:	bf00      	nop
  }

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000004 	.word	0x20000004
 8005904:	165e9f81 	.word	0x165e9f81

08005908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e01d      	b.n	8005956 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fd ff32 	bl	8003798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3304      	adds	r3, #4
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f000 fa14 	bl	8005d74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800595e:	b480      	push	{r7}
 8005960:	b085      	sub	sp, #20
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0201 	orr.w	r2, r2, #1
 8005974:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b06      	cmp	r3, #6
 8005986:	d007      	beq.n	8005998 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d122      	bne.n	8005a02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d11b      	bne.n	8005a02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f06f 0202 	mvn.w	r2, #2
 80059d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f9a5 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 80059ee:	e005      	b.n	80059fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f997 	bl	8005d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f9a8 	bl	8005d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d122      	bne.n	8005a56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d11b      	bne.n	8005a56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f06f 0204 	mvn.w	r2, #4
 8005a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f97b 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 8005a42:	e005      	b.n	8005a50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f96d 	bl	8005d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f97e 	bl	8005d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d122      	bne.n	8005aaa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d11b      	bne.n	8005aaa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f06f 0208 	mvn.w	r2, #8
 8005a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2204      	movs	r2, #4
 8005a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f951 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 8005a96:	e005      	b.n	8005aa4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f943 	bl	8005d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f954 	bl	8005d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d122      	bne.n	8005afe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f003 0310 	and.w	r3, r3, #16
 8005ac2:	2b10      	cmp	r3, #16
 8005ac4:	d11b      	bne.n	8005afe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f06f 0210 	mvn.w	r2, #16
 8005ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2208      	movs	r2, #8
 8005ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f927 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 8005aea:	e005      	b.n	8005af8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f919 	bl	8005d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f92a 	bl	8005d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d10e      	bne.n	8005b2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d107      	bne.n	8005b2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f06f 0201 	mvn.w	r2, #1
 8005b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7fd f9e3 	bl	8002ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b34:	2b80      	cmp	r3, #128	; 0x80
 8005b36:	d10e      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b42:	2b80      	cmp	r3, #128	; 0x80
 8005b44:	d107      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa98 	bl	8006086 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b60:	2b40      	cmp	r3, #64	; 0x40
 8005b62:	d10e      	bne.n	8005b82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6e:	2b40      	cmp	r3, #64	; 0x40
 8005b70:	d107      	bne.n	8005b82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f8ef 	bl	8005d60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d10e      	bne.n	8005bae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d107      	bne.n	8005bae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f06f 0220 	mvn.w	r2, #32
 8005ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fa62 	bl	8006072 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_TIM_ConfigClockSource+0x18>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e0a6      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x166>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bf4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b40      	cmp	r3, #64	; 0x40
 8005c04:	d067      	beq.n	8005cd6 <HAL_TIM_ConfigClockSource+0x120>
 8005c06:	2b40      	cmp	r3, #64	; 0x40
 8005c08:	d80b      	bhi.n	8005c22 <HAL_TIM_ConfigClockSource+0x6c>
 8005c0a:	2b10      	cmp	r3, #16
 8005c0c:	d073      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0x140>
 8005c0e:	2b10      	cmp	r3, #16
 8005c10:	d802      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x62>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d06f      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c16:	e078      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d06c      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0x140>
 8005c1c:	2b30      	cmp	r3, #48	; 0x30
 8005c1e:	d06a      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005c20:	e073      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c22:	2b70      	cmp	r3, #112	; 0x70
 8005c24:	d00d      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x8c>
 8005c26:	2b70      	cmp	r3, #112	; 0x70
 8005c28:	d804      	bhi.n	8005c34 <HAL_TIM_ConfigClockSource+0x7e>
 8005c2a:	2b50      	cmp	r3, #80	; 0x50
 8005c2c:	d033      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0xe0>
 8005c2e:	2b60      	cmp	r3, #96	; 0x60
 8005c30:	d041      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005c32:	e06a      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c38:	d066      	beq.n	8005d08 <HAL_TIM_ConfigClockSource+0x152>
 8005c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3e:	d017      	beq.n	8005c70 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005c40:	e063      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6899      	ldr	r1, [r3, #8]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f000 f9a9 	bl	8005fa8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	609a      	str	r2, [r3, #8]
      break;
 8005c6e:	e04c      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6818      	ldr	r0, [r3, #0]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	6899      	ldr	r1, [r3, #8]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f000 f992 	bl	8005fa8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c92:	609a      	str	r2, [r3, #8]
      break;
 8005c94:	e039      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	6859      	ldr	r1, [r3, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f000 f906 	bl	8005eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2150      	movs	r1, #80	; 0x50
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 f95f 	bl	8005f72 <TIM_ITRx_SetConfig>
      break;
 8005cb4:	e029      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	6859      	ldr	r1, [r3, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f000 f925 	bl	8005f12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2160      	movs	r1, #96	; 0x60
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f94f 	bl	8005f72 <TIM_ITRx_SetConfig>
      break;
 8005cd4:	e019      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6859      	ldr	r1, [r3, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f000 f8e6 	bl	8005eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2140      	movs	r1, #64	; 0x40
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 f93f 	bl	8005f72 <TIM_ITRx_SetConfig>
      break;
 8005cf4:	e009      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4619      	mov	r1, r3
 8005d00:	4610      	mov	r0, r2
 8005d02:	f000 f936 	bl	8005f72 <TIM_ITRx_SetConfig>
      break;
 8005d06:	e000      	b.n	8005d0a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005d08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a40      	ldr	r2, [pc, #256]	; (8005e88 <TIM_Base_SetConfig+0x114>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d013      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d92:	d00f      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a3d      	ldr	r2, [pc, #244]	; (8005e8c <TIM_Base_SetConfig+0x118>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00b      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a3c      	ldr	r2, [pc, #240]	; (8005e90 <TIM_Base_SetConfig+0x11c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a3b      	ldr	r2, [pc, #236]	; (8005e94 <TIM_Base_SetConfig+0x120>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_Base_SetConfig+0x40>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a3a      	ldr	r2, [pc, #232]	; (8005e98 <TIM_Base_SetConfig+0x124>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d108      	bne.n	8005dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2f      	ldr	r2, [pc, #188]	; (8005e88 <TIM_Base_SetConfig+0x114>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d02b      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd4:	d027      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a2c      	ldr	r2, [pc, #176]	; (8005e8c <TIM_Base_SetConfig+0x118>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d023      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2b      	ldr	r2, [pc, #172]	; (8005e90 <TIM_Base_SetConfig+0x11c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d01f      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2a      	ldr	r2, [pc, #168]	; (8005e94 <TIM_Base_SetConfig+0x120>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01b      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a29      	ldr	r2, [pc, #164]	; (8005e98 <TIM_Base_SetConfig+0x124>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d017      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a28      	ldr	r2, [pc, #160]	; (8005e9c <TIM_Base_SetConfig+0x128>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a27      	ldr	r2, [pc, #156]	; (8005ea0 <TIM_Base_SetConfig+0x12c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00f      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a26      	ldr	r2, [pc, #152]	; (8005ea4 <TIM_Base_SetConfig+0x130>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00b      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a25      	ldr	r2, [pc, #148]	; (8005ea8 <TIM_Base_SetConfig+0x134>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d007      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a24      	ldr	r2, [pc, #144]	; (8005eac <TIM_Base_SetConfig+0x138>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d003      	beq.n	8005e26 <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a23      	ldr	r2, [pc, #140]	; (8005eb0 <TIM_Base_SetConfig+0x13c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d108      	bne.n	8005e38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <TIM_Base_SetConfig+0x114>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d003      	beq.n	8005e6c <TIM_Base_SetConfig+0xf8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a0c      	ldr	r2, [pc, #48]	; (8005e98 <TIM_Base_SetConfig+0x124>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d103      	bne.n	8005e74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	615a      	str	r2, [r3, #20]
}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40010000 	.word	0x40010000
 8005e8c:	40000400 	.word	0x40000400
 8005e90:	40000800 	.word	0x40000800
 8005e94:	40000c00 	.word	0x40000c00
 8005e98:	40010400 	.word	0x40010400
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	40014400 	.word	0x40014400
 8005ea4:	40014800 	.word	0x40014800
 8005ea8:	40001800 	.word	0x40001800
 8005eac:	40001c00 	.word	0x40001c00
 8005eb0:	40002000 	.word	0x40002000

08005eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	f023 0201 	bic.w	r2, r3, #1
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f023 030a 	bic.w	r3, r3, #10
 8005ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b087      	sub	sp, #28
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	f023 0210 	bic.w	r2, r3, #16
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	031b      	lsls	r3, r3, #12
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b085      	sub	sp, #20
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f043 0307 	orr.w	r3, r3, #7
 8005f94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	609a      	str	r2, [r3, #8]
}
 8005f9c:	bf00      	nop
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	021a      	lsls	r2, r3, #8
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	609a      	str	r2, [r3, #8]
}
 8005fdc:	bf00      	nop
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e032      	b.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006038:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	4313      	orrs	r3, r2
 8006042:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b082      	sub	sp, #8
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e03f      	b.n	800612c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d106      	bne.n	80060c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7fd fba7 	bl	8003814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2224      	movs	r2, #36	; 0x24
 80060ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fa5a 	bl	8006598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691a      	ldr	r2, [r3, #16]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006102:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006112:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2220      	movs	r2, #32
 800611e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006154:	2300      	movs	r3, #0
 8006156:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10d      	bne.n	8006186 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	f003 0320 	and.w	r3, r3, #32
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <HAL_UART_IRQHandler+0x52>
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f988 	bl	8006494 <UART_Receive_IT>
      return;
 8006184:	e0cc      	b.n	8006320 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 80ab 	beq.w	80062e4 <HAL_UART_IRQHandler+0x1b0>
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d105      	bne.n	80061a4 <HAL_UART_IRQHandler+0x70>
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 80a0 	beq.w	80062e4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <HAL_UART_IRQHandler+0x90>
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061bc:	f043 0201 	orr.w	r2, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <HAL_UART_IRQHandler+0xb0>
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061dc:	f043 0202 	orr.w	r2, r3, #2
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <HAL_UART_IRQHandler+0xd0>
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fc:	f043 0204 	orr.w	r2, r3, #4
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <HAL_UART_IRQHandler+0xf0>
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d005      	beq.n	8006224 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621c:	f043 0208 	orr.w	r2, r3, #8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d078      	beq.n	800631e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d007      	beq.n	8006246 <HAL_UART_IRQHandler+0x112>
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f003 0320 	and.w	r3, r3, #32
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f927 	bl	8006494 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006250:	2b40      	cmp	r3, #64	; 0x40
 8006252:	bf0c      	ite	eq
 8006254:	2301      	moveq	r3, #1
 8006256:	2300      	movne	r3, #0
 8006258:	b2db      	uxtb	r3, r3
 800625a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006260:	f003 0308 	and.w	r3, r3, #8
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <HAL_UART_IRQHandler+0x13a>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d031      	beq.n	80062d2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f870 	bl	8006354 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d123      	bne.n	80062ca <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695a      	ldr	r2, [r3, #20]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006290:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006296:	2b00      	cmp	r3, #0
 8006298:	d013      	beq.n	80062c2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629e:	4a22      	ldr	r2, [pc, #136]	; (8006328 <HAL_UART_IRQHandler+0x1f4>)
 80062a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe f8cf 	bl	800444a <HAL_DMA_Abort_IT>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d016      	beq.n	80062e0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062bc:	4610      	mov	r0, r2
 80062be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	e00e      	b.n	80062e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f83c 	bl	8006340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c8:	e00a      	b.n	80062e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f838 	bl	8006340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d0:	e006      	b.n	80062e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f834 	bl	8006340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80062de:	e01e      	b.n	800631e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	bf00      	nop
    return;
 80062e2:	e01c      	b.n	800631e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d008      	beq.n	8006300 <HAL_UART_IRQHandler+0x1cc>
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f85d 	bl	80063b8 <UART_Transmit_IT>
    return;
 80062fe:	e00f      	b.n	8006320 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_UART_IRQHandler+0x1ec>
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f8a5 	bl	8006464 <UART_EndTransmit_IT>
    return;
 800631a:	bf00      	nop
 800631c:	e000      	b.n	8006320 <HAL_UART_IRQHandler+0x1ec>
    return;
 800631e:	bf00      	nop
  }
}
 8006320:	3720      	adds	r7, #32
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	08006391 	.word	0x08006391

0800632c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800636a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0201 	bic.w	r2, r2, #1
 800637a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff ffc8 	bl	8006340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b21      	cmp	r3, #33	; 0x21
 80063ca:	d144      	bne.n	8006456 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d4:	d11a      	bne.n	800640c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	461a      	mov	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063ea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d105      	bne.n	8006400 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	1c9a      	adds	r2, r3, #2
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	621a      	str	r2, [r3, #32]
 80063fe:	e00e      	b.n	800641e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	621a      	str	r2, [r3, #32]
 800640a:	e008      	b.n	800641e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	1c59      	adds	r1, r3, #1
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6211      	str	r1, [r2, #32]
 8006416:	781a      	ldrb	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006422:	b29b      	uxth	r3, r3
 8006424:	3b01      	subs	r3, #1
 8006426:	b29b      	uxth	r3, r3
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	4619      	mov	r1, r3
 800642c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10f      	bne.n	8006452 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006440:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006450:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	e000      	b.n	8006458 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006456:	2302      	movs	r3, #2
  }
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800647a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff ff51 	bl	800632c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b22      	cmp	r3, #34	; 0x22
 80064a6:	d171      	bne.n	800658c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b0:	d123      	bne.n	80064fa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10e      	bne.n	80064de <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	1c9a      	adds	r2, r3, #2
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	629a      	str	r2, [r3, #40]	; 0x28
 80064dc:	e029      	b.n	8006532 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	629a      	str	r2, [r3, #40]	; 0x28
 80064f8:	e01b      	b.n	8006532 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6858      	ldr	r0, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650c:	1c59      	adds	r1, r3, #1
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6291      	str	r1, [r2, #40]	; 0x28
 8006512:	b2c2      	uxtb	r2, r0
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	e00c      	b.n	8006532 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	b2da      	uxtb	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006524:	1c58      	adds	r0, r3, #1
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	6288      	str	r0, [r1, #40]	; 0x28
 800652a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	b29b      	uxth	r3, r3
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	4619      	mov	r1, r3
 8006540:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006542:	2b00      	cmp	r3, #0
 8006544:	d120      	bne.n	8006588 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0220 	bic.w	r2, r2, #32
 8006554:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006564:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695a      	ldr	r2, [r3, #20]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0201 	bic.w	r2, r2, #1
 8006574:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7fc fcda 	bl	8002f38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	e002      	b.n	800658e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	e000      	b.n	800658e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800658c:	2302      	movs	r3, #2
  }
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006598:	b5b0      	push	{r4, r5, r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80065d8:	f023 030c 	bic.w	r3, r3, #12
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6812      	ldr	r2, [r2, #0]
 80065e0:	68f9      	ldr	r1, [r7, #12]
 80065e2:	430b      	orrs	r3, r1
 80065e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006604:	f040 80e4 	bne.w	80067d0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4aab      	ldr	r2, [pc, #684]	; (80068bc <UART_SetConfig+0x324>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d004      	beq.n	800661c <UART_SetConfig+0x84>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4aaa      	ldr	r2, [pc, #680]	; (80068c0 <UART_SetConfig+0x328>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d16c      	bne.n	80066f6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800661c:	f7fe fd6c 	bl	80050f8 <HAL_RCC_GetPCLK2Freq>
 8006620:	4602      	mov	r2, r0
 8006622:	4613      	mov	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	009a      	lsls	r2, r3, #2
 800662a:	441a      	add	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	fbb2 f3f3 	udiv	r3, r2, r3
 8006636:	4aa3      	ldr	r2, [pc, #652]	; (80068c4 <UART_SetConfig+0x32c>)
 8006638:	fba2 2303 	umull	r2, r3, r2, r3
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	011c      	lsls	r4, r3, #4
 8006640:	f7fe fd5a 	bl	80050f8 <HAL_RCC_GetPCLK2Freq>
 8006644:	4602      	mov	r2, r0
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	009a      	lsls	r2, r3, #2
 800664e:	441a      	add	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	fbb2 f5f3 	udiv	r5, r2, r3
 800665a:	f7fe fd4d 	bl	80050f8 <HAL_RCC_GetPCLK2Freq>
 800665e:	4602      	mov	r2, r0
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	009a      	lsls	r2, r3, #2
 8006668:	441a      	add	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	fbb2 f3f3 	udiv	r3, r2, r3
 8006674:	4a93      	ldr	r2, [pc, #588]	; (80068c4 <UART_SetConfig+0x32c>)
 8006676:	fba2 2303 	umull	r2, r3, r2, r3
 800667a:	095b      	lsrs	r3, r3, #5
 800667c:	2264      	movs	r2, #100	; 0x64
 800667e:	fb02 f303 	mul.w	r3, r2, r3
 8006682:	1aeb      	subs	r3, r5, r3
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	3332      	adds	r3, #50	; 0x32
 8006688:	4a8e      	ldr	r2, [pc, #568]	; (80068c4 <UART_SetConfig+0x32c>)
 800668a:	fba2 2303 	umull	r2, r3, r2, r3
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006696:	441c      	add	r4, r3
 8006698:	f7fe fd2e 	bl	80050f8 <HAL_RCC_GetPCLK2Freq>
 800669c:	4602      	mov	r2, r0
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	009a      	lsls	r2, r3, #2
 80066a6:	441a      	add	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	fbb2 f5f3 	udiv	r5, r2, r3
 80066b2:	f7fe fd21 	bl	80050f8 <HAL_RCC_GetPCLK2Freq>
 80066b6:	4602      	mov	r2, r0
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009a      	lsls	r2, r3, #2
 80066c0:	441a      	add	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066cc:	4a7d      	ldr	r2, [pc, #500]	; (80068c4 <UART_SetConfig+0x32c>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	2264      	movs	r2, #100	; 0x64
 80066d6:	fb02 f303 	mul.w	r3, r2, r3
 80066da:	1aeb      	subs	r3, r5, r3
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	3332      	adds	r3, #50	; 0x32
 80066e0:	4a78      	ldr	r2, [pc, #480]	; (80068c4 <UART_SetConfig+0x32c>)
 80066e2:	fba2 2303 	umull	r2, r3, r2, r3
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	f003 0207 	and.w	r2, r3, #7
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4422      	add	r2, r4
 80066f2:	609a      	str	r2, [r3, #8]
 80066f4:	e154      	b.n	80069a0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80066f6:	f7fe fceb 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 80066fa:	4602      	mov	r2, r0
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	009a      	lsls	r2, r3, #2
 8006704:	441a      	add	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006710:	4a6c      	ldr	r2, [pc, #432]	; (80068c4 <UART_SetConfig+0x32c>)
 8006712:	fba2 2303 	umull	r2, r3, r2, r3
 8006716:	095b      	lsrs	r3, r3, #5
 8006718:	011c      	lsls	r4, r3, #4
 800671a:	f7fe fcd9 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 800671e:	4602      	mov	r2, r0
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	009a      	lsls	r2, r3, #2
 8006728:	441a      	add	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	fbb2 f5f3 	udiv	r5, r2, r3
 8006734:	f7fe fccc 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 8006738:	4602      	mov	r2, r0
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009a      	lsls	r2, r3, #2
 8006742:	441a      	add	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	fbb2 f3f3 	udiv	r3, r2, r3
 800674e:	4a5d      	ldr	r2, [pc, #372]	; (80068c4 <UART_SetConfig+0x32c>)
 8006750:	fba2 2303 	umull	r2, r3, r2, r3
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	2264      	movs	r2, #100	; 0x64
 8006758:	fb02 f303 	mul.w	r3, r2, r3
 800675c:	1aeb      	subs	r3, r5, r3
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	3332      	adds	r3, #50	; 0x32
 8006762:	4a58      	ldr	r2, [pc, #352]	; (80068c4 <UART_SetConfig+0x32c>)
 8006764:	fba2 2303 	umull	r2, r3, r2, r3
 8006768:	095b      	lsrs	r3, r3, #5
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006770:	441c      	add	r4, r3
 8006772:	f7fe fcad 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 8006776:	4602      	mov	r2, r0
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	009a      	lsls	r2, r3, #2
 8006780:	441a      	add	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	fbb2 f5f3 	udiv	r5, r2, r3
 800678c:	f7fe fca0 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 8006790:	4602      	mov	r2, r0
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	009a      	lsls	r2, r3, #2
 800679a:	441a      	add	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a6:	4a47      	ldr	r2, [pc, #284]	; (80068c4 <UART_SetConfig+0x32c>)
 80067a8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	2264      	movs	r2, #100	; 0x64
 80067b0:	fb02 f303 	mul.w	r3, r2, r3
 80067b4:	1aeb      	subs	r3, r5, r3
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	3332      	adds	r3, #50	; 0x32
 80067ba:	4a42      	ldr	r2, [pc, #264]	; (80068c4 <UART_SetConfig+0x32c>)
 80067bc:	fba2 2303 	umull	r2, r3, r2, r3
 80067c0:	095b      	lsrs	r3, r3, #5
 80067c2:	f003 0207 	and.w	r2, r3, #7
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4422      	add	r2, r4
 80067cc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80067ce:	e0e7      	b.n	80069a0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a39      	ldr	r2, [pc, #228]	; (80068bc <UART_SetConfig+0x324>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <UART_SetConfig+0x24c>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a38      	ldr	r2, [pc, #224]	; (80068c0 <UART_SetConfig+0x328>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d171      	bne.n	80068c8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80067e4:	f7fe fc88 	bl	80050f8 <HAL_RCC_GetPCLK2Freq>
 80067e8:	4602      	mov	r2, r0
 80067ea:	4613      	mov	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	009a      	lsls	r2, r3, #2
 80067f2:	441a      	add	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fe:	4a31      	ldr	r2, [pc, #196]	; (80068c4 <UART_SetConfig+0x32c>)
 8006800:	fba2 2303 	umull	r2, r3, r2, r3
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	011c      	lsls	r4, r3, #4
 8006808:	f7fe fc76 	bl	80050f8 <HAL_RCC_GetPCLK2Freq>
 800680c:	4602      	mov	r2, r0
 800680e:	4613      	mov	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	009a      	lsls	r2, r3, #2
 8006816:	441a      	add	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006822:	f7fe fc69 	bl	80050f8 <HAL_RCC_GetPCLK2Freq>
 8006826:	4602      	mov	r2, r0
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009a      	lsls	r2, r3, #2
 8006830:	441a      	add	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	fbb2 f3f3 	udiv	r3, r2, r3
 800683c:	4a21      	ldr	r2, [pc, #132]	; (80068c4 <UART_SetConfig+0x32c>)
 800683e:	fba2 2303 	umull	r2, r3, r2, r3
 8006842:	095b      	lsrs	r3, r3, #5
 8006844:	2264      	movs	r2, #100	; 0x64
 8006846:	fb02 f303 	mul.w	r3, r2, r3
 800684a:	1aeb      	subs	r3, r5, r3
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	3332      	adds	r3, #50	; 0x32
 8006850:	4a1c      	ldr	r2, [pc, #112]	; (80068c4 <UART_SetConfig+0x32c>)
 8006852:	fba2 2303 	umull	r2, r3, r2, r3
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800685c:	441c      	add	r4, r3
 800685e:	f7fe fc4b 	bl	80050f8 <HAL_RCC_GetPCLK2Freq>
 8006862:	4602      	mov	r2, r0
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	009a      	lsls	r2, r3, #2
 800686c:	441a      	add	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	fbb2 f5f3 	udiv	r5, r2, r3
 8006878:	f7fe fc3e 	bl	80050f8 <HAL_RCC_GetPCLK2Freq>
 800687c:	4602      	mov	r2, r0
 800687e:	4613      	mov	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	009a      	lsls	r2, r3, #2
 8006886:	441a      	add	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006892:	4a0c      	ldr	r2, [pc, #48]	; (80068c4 <UART_SetConfig+0x32c>)
 8006894:	fba2 2303 	umull	r2, r3, r2, r3
 8006898:	095b      	lsrs	r3, r3, #5
 800689a:	2264      	movs	r2, #100	; 0x64
 800689c:	fb02 f303 	mul.w	r3, r2, r3
 80068a0:	1aeb      	subs	r3, r5, r3
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	3332      	adds	r3, #50	; 0x32
 80068a6:	4a07      	ldr	r2, [pc, #28]	; (80068c4 <UART_SetConfig+0x32c>)
 80068a8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	f003 020f 	and.w	r2, r3, #15
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4422      	add	r2, r4
 80068b8:	609a      	str	r2, [r3, #8]
 80068ba:	e071      	b.n	80069a0 <UART_SetConfig+0x408>
 80068bc:	40011000 	.word	0x40011000
 80068c0:	40011400 	.word	0x40011400
 80068c4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80068c8:	f7fe fc02 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 80068cc:	4602      	mov	r2, r0
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	009a      	lsls	r2, r3, #2
 80068d6:	441a      	add	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e2:	4a31      	ldr	r2, [pc, #196]	; (80069a8 <UART_SetConfig+0x410>)
 80068e4:	fba2 2303 	umull	r2, r3, r2, r3
 80068e8:	095b      	lsrs	r3, r3, #5
 80068ea:	011c      	lsls	r4, r3, #4
 80068ec:	f7fe fbf0 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 80068f0:	4602      	mov	r2, r0
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009a      	lsls	r2, r3, #2
 80068fa:	441a      	add	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	fbb2 f5f3 	udiv	r5, r2, r3
 8006906:	f7fe fbe3 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 800690a:	4602      	mov	r2, r0
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	009a      	lsls	r2, r3, #2
 8006914:	441a      	add	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006920:	4a21      	ldr	r2, [pc, #132]	; (80069a8 <UART_SetConfig+0x410>)
 8006922:	fba2 2303 	umull	r2, r3, r2, r3
 8006926:	095b      	lsrs	r3, r3, #5
 8006928:	2264      	movs	r2, #100	; 0x64
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	1aeb      	subs	r3, r5, r3
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	3332      	adds	r3, #50	; 0x32
 8006934:	4a1c      	ldr	r2, [pc, #112]	; (80069a8 <UART_SetConfig+0x410>)
 8006936:	fba2 2303 	umull	r2, r3, r2, r3
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006940:	441c      	add	r4, r3
 8006942:	f7fe fbc5 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 8006946:	4602      	mov	r2, r0
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009a      	lsls	r2, r3, #2
 8006950:	441a      	add	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	fbb2 f5f3 	udiv	r5, r2, r3
 800695c:	f7fe fbb8 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 8006960:	4602      	mov	r2, r0
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009a      	lsls	r2, r3, #2
 800696a:	441a      	add	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	fbb2 f3f3 	udiv	r3, r2, r3
 8006976:	4a0c      	ldr	r2, [pc, #48]	; (80069a8 <UART_SetConfig+0x410>)
 8006978:	fba2 2303 	umull	r2, r3, r2, r3
 800697c:	095b      	lsrs	r3, r3, #5
 800697e:	2264      	movs	r2, #100	; 0x64
 8006980:	fb02 f303 	mul.w	r3, r2, r3
 8006984:	1aeb      	subs	r3, r5, r3
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	3332      	adds	r3, #50	; 0x32
 800698a:	4a07      	ldr	r2, [pc, #28]	; (80069a8 <UART_SetConfig+0x410>)
 800698c:	fba2 2303 	umull	r2, r3, r2, r3
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	f003 020f 	and.w	r2, r3, #15
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4422      	add	r2, r4
 800699c:	609a      	str	r2, [r3, #8]
}
 800699e:	e7ff      	b.n	80069a0 <UART_SetConfig+0x408>
 80069a0:	bf00      	nop
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bdb0      	pop	{r4, r5, r7, pc}
 80069a8:	51eb851f 	.word	0x51eb851f

080069ac <__libc_init_array>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	4e0d      	ldr	r6, [pc, #52]	; (80069e4 <__libc_init_array+0x38>)
 80069b0:	4c0d      	ldr	r4, [pc, #52]	; (80069e8 <__libc_init_array+0x3c>)
 80069b2:	1ba4      	subs	r4, r4, r6
 80069b4:	10a4      	asrs	r4, r4, #2
 80069b6:	2500      	movs	r5, #0
 80069b8:	42a5      	cmp	r5, r4
 80069ba:	d109      	bne.n	80069d0 <__libc_init_array+0x24>
 80069bc:	4e0b      	ldr	r6, [pc, #44]	; (80069ec <__libc_init_array+0x40>)
 80069be:	4c0c      	ldr	r4, [pc, #48]	; (80069f0 <__libc_init_array+0x44>)
 80069c0:	f000 f820 	bl	8006a04 <_init>
 80069c4:	1ba4      	subs	r4, r4, r6
 80069c6:	10a4      	asrs	r4, r4, #2
 80069c8:	2500      	movs	r5, #0
 80069ca:	42a5      	cmp	r5, r4
 80069cc:	d105      	bne.n	80069da <__libc_init_array+0x2e>
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069d4:	4798      	blx	r3
 80069d6:	3501      	adds	r5, #1
 80069d8:	e7ee      	b.n	80069b8 <__libc_init_array+0xc>
 80069da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069de:	4798      	blx	r3
 80069e0:	3501      	adds	r5, #1
 80069e2:	e7f2      	b.n	80069ca <__libc_init_array+0x1e>
 80069e4:	08024ba8 	.word	0x08024ba8
 80069e8:	08024ba8 	.word	0x08024ba8
 80069ec:	08024ba8 	.word	0x08024ba8
 80069f0:	08024bac 	.word	0x08024bac

080069f4 <memset>:
 80069f4:	4402      	add	r2, r0
 80069f6:	4603      	mov	r3, r0
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d100      	bne.n	80069fe <memset+0xa>
 80069fc:	4770      	bx	lr
 80069fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006a02:	e7f9      	b.n	80069f8 <memset+0x4>

08006a04 <_init>:
 8006a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a06:	bf00      	nop
 8006a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0a:	bc08      	pop	{r3}
 8006a0c:	469e      	mov	lr, r3
 8006a0e:	4770      	bx	lr

08006a10 <_fini>:
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	bf00      	nop
 8006a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a16:	bc08      	pop	{r3}
 8006a18:	469e      	mov	lr, r3
 8006a1a:	4770      	bx	lr
