
MP3_PLAYER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007200  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007388  08007388  00017388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073d8  080073d8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080073d8  080073d8  000173d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073e0  080073e0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073e0  080073e0  000173e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073e4  080073e4  000173e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080073e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005548  2000006c  08007454  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200055b4  08007454  000255b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126e2  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000273b  00000000  00000000  0003277e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  00034ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  000361f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003c68  00000000  00000000  000373e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e152  00000000  00000000  0003b050  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5460  00000000  00000000  000491a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e602  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005268  00000000  00000000  0011e680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007370 	.word	0x08007370

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	08007370 	.word	0x08007370

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b972 	b.w	8000ca0 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	4688      	mov	r8, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14b      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4615      	mov	r5, r2
 80009e6:	d967      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0720 	rsb	r7, r2, #32
 80009f2:	fa01 f302 	lsl.w	r3, r1, r2
 80009f6:	fa20 f707 	lsr.w	r7, r0, r7
 80009fa:	4095      	lsls	r5, r2
 80009fc:	ea47 0803 	orr.w	r8, r7, r3
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a0c:	fa1f fc85 	uxth.w	ip, r5
 8000a10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a18:	fb07 f10c 	mul.w	r1, r7, ip
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18eb      	adds	r3, r5, r3
 8000a22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a26:	f080 811b 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8118 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a30:	3f02      	subs	r7, #2
 8000a32:	442b      	add	r3, r5
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a48:	45a4      	cmp	ip, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	192c      	adds	r4, r5, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8107 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a56:	45a4      	cmp	ip, r4
 8000a58:	f240 8104 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	442c      	add	r4, r5
 8000a60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a64:	eba4 040c 	sub.w	r4, r4, ip
 8000a68:	2700      	movs	r7, #0
 8000a6a:	b11e      	cbz	r6, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c6 4300 	strd	r4, r3, [r6]
 8000a74:	4639      	mov	r1, r7
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0xbe>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80eb 	beq.w	8000c5a <__udivmoddi4+0x286>
 8000a84:	2700      	movs	r7, #0
 8000a86:	e9c6 0100 	strd	r0, r1, [r6]
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	fab3 f783 	clz	r7, r3
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d147      	bne.n	8000b2a <__udivmoddi4+0x156>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xd0>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 80fa 	bhi.w	8000c98 <__udivmoddi4+0x2c4>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	4698      	mov	r8, r3
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d0e0      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000ab2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ab6:	e7dd      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000ab8:	b902      	cbnz	r2, 8000abc <__udivmoddi4+0xe8>
 8000aba:	deff      	udf	#255	; 0xff
 8000abc:	fab2 f282 	clz	r2, r2
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	f040 808f 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac6:	1b49      	subs	r1, r1, r5
 8000ac8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000acc:	fa1f f885 	uxth.w	r8, r5
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ad6:	0c23      	lsrs	r3, r4, #16
 8000ad8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	f200 80cd 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000af6:	4684      	mov	ip, r0
 8000af8:	1a59      	subs	r1, r3, r1
 8000afa:	b2a3      	uxth	r3, r4
 8000afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b08:	fb08 f800 	mul.w	r8, r8, r0
 8000b0c:	45a0      	cmp	r8, r4
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x14c>
 8000b10:	192c      	adds	r4, r5, r4
 8000b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x14a>
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	f200 80b6 	bhi.w	8000c8a <__udivmoddi4+0x2b6>
 8000b1e:	4618      	mov	r0, r3
 8000b20:	eba4 0408 	sub.w	r4, r4, r8
 8000b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b28:	e79f      	b.n	8000a6a <__udivmoddi4+0x96>
 8000b2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b2e:	40bb      	lsls	r3, r7
 8000b30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b38:	fa01 f407 	lsl.w	r4, r1, r7
 8000b3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b48:	4325      	orrs	r5, r4
 8000b4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b4e:	0c2c      	lsrs	r4, r5, #16
 8000b50:	fb08 3319 	mls	r3, r8, r9, r3
 8000b54:	fa1f fa8e 	uxth.w	sl, lr
 8000b58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b60:	429c      	cmp	r4, r3
 8000b62:	fa02 f207 	lsl.w	r2, r2, r7
 8000b66:	fa00 f107 	lsl.w	r1, r0, r7
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b74:	f080 8087 	bcs.w	8000c86 <__udivmoddi4+0x2b2>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f240 8084 	bls.w	8000c86 <__udivmoddi4+0x2b2>
 8000b7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b82:	4473      	add	r3, lr
 8000b84:	1b1b      	subs	r3, r3, r4
 8000b86:	b2ad      	uxth	r5, r5
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b98:	45a2      	cmp	sl, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba4:	d26b      	bcs.n	8000c7e <__udivmoddi4+0x2aa>
 8000ba6:	45a2      	cmp	sl, r4
 8000ba8:	d969      	bls.n	8000c7e <__udivmoddi4+0x2aa>
 8000baa:	3802      	subs	r0, #2
 8000bac:	4474      	add	r4, lr
 8000bae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bb6:	eba4 040a 	sub.w	r4, r4, sl
 8000bba:	454c      	cmp	r4, r9
 8000bbc:	46c2      	mov	sl, r8
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	d354      	bcc.n	8000c6c <__udivmoddi4+0x298>
 8000bc2:	d051      	beq.n	8000c68 <__udivmoddi4+0x294>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d069      	beq.n	8000c9c <__udivmoddi4+0x2c8>
 8000bc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000bd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	40fc      	lsrs	r4, r7
 8000bd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bdc:	e9c6 5400 	strd	r5, r4, [r6]
 8000be0:	2700      	movs	r7, #0
 8000be2:	e747      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000be4:	f1c2 0320 	rsb	r3, r2, #32
 8000be8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bec:	4095      	lsls	r5, r2
 8000bee:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	4338      	orrs	r0, r7
 8000bfc:	0c01      	lsrs	r1, r0, #16
 8000bfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c02:	fa1f f885 	uxth.w	r8, r5
 8000c06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c0e:	fb07 f308 	mul.w	r3, r7, r8
 8000c12:	428b      	cmp	r3, r1
 8000c14:	fa04 f402 	lsl.w	r4, r4, r2
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x256>
 8000c1a:	1869      	adds	r1, r5, r1
 8000c1c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c20:	d22f      	bcs.n	8000c82 <__udivmoddi4+0x2ae>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d92d      	bls.n	8000c82 <__udivmoddi4+0x2ae>
 8000c26:	3f02      	subs	r7, #2
 8000c28:	4429      	add	r1, r5
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	b281      	uxth	r1, r0
 8000c2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3a:	fb00 f308 	mul.w	r3, r0, r8
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x27e>
 8000c42:	1869      	adds	r1, r5, r1
 8000c44:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c48:	d217      	bcs.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d915      	bls.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	4429      	add	r1, r5
 8000c52:	1ac9      	subs	r1, r1, r3
 8000c54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c58:	e73b      	b.n	8000ad2 <__udivmoddi4+0xfe>
 8000c5a:	4637      	mov	r7, r6
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	e709      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c60:	4607      	mov	r7, r0
 8000c62:	e6e7      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c64:	4618      	mov	r0, r3
 8000c66:	e6fb      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c68:	4541      	cmp	r1, r8
 8000c6a:	d2ab      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c70:	eb69 020e 	sbc.w	r2, r9, lr
 8000c74:	3801      	subs	r0, #1
 8000c76:	4613      	mov	r3, r2
 8000c78:	e7a4      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7a:	4660      	mov	r0, ip
 8000c7c:	e7e9      	b.n	8000c52 <__udivmoddi4+0x27e>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e795      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c82:	4667      	mov	r7, ip
 8000c84:	e7d1      	b.n	8000c2a <__udivmoddi4+0x256>
 8000c86:	4681      	mov	r9, r0
 8000c88:	e77c      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	442c      	add	r4, r5
 8000c8e:	e747      	b.n	8000b20 <__udivmoddi4+0x14c>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	442b      	add	r3, r5
 8000c96:	e72f      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c98:	4638      	mov	r0, r7
 8000c9a:	e708      	b.n	8000aae <__udivmoddi4+0xda>
 8000c9c:	4637      	mov	r7, r6
 8000c9e:	e6e9      	b.n	8000a74 <__udivmoddi4+0xa0>

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <DESELECT>:

static
inline void DESELECT(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <xmit_spi>:

extern SPI_HandleTypeDef hspi3;

static
void xmit_spi(BYTE Data)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8000cca:	bf00      	nop
 8000ccc:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <xmit_spi+0x30>)
 8000cce:	f005 f9eb 	bl	80060a8 <HAL_SPI_GetState>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d1f9      	bne.n	8000ccc <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi3, &Data, 1, 5000);
 8000cd8:	1df9      	adds	r1, r7, #7
 8000cda:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <xmit_spi+0x30>)
 8000ce2:	f004 ff0b 	bl	8005afc <HAL_SPI_Transmit>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000368 	.word	0x20000368

08000cf4 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8000cfa:	23ff      	movs	r3, #255	; 0xff
 8000cfc:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8000d02:	bf00      	nop
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <rcvr_spi+0x38>)
 8000d06:	f005 f9cf 	bl	80060a8 <HAL_SPI_GetState>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d1f9      	bne.n	8000d04 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi3, &Dummy, &Data, 1, 5000);
 8000d10:	1dba      	adds	r2, r7, #6
 8000d12:	1df9      	adds	r1, r7, #7
 8000d14:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <rcvr_spi+0x38>)
 8000d1e:	f005 f821 	bl	8005d64 <HAL_SPI_TransmitReceive>

	return Data;
 8000d22:	79bb      	ldrb	r3, [r7, #6]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000368 	.word	0x20000368

08000d30 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8000d38:	f7ff ffdc 	bl	8000cf4 <rcvr_spi>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	701a      	strb	r2, [r3, #0]
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <wait_ready+0x34>)
 8000d54:	2232      	movs	r2, #50	; 0x32
 8000d56:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8000d58:	f7ff ffcc 	bl	8000cf4 <rcvr_spi>
	do
		res = rcvr_spi();
 8000d5c:	f7ff ffca 	bl	8000cf4 <rcvr_spi>
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2bff      	cmp	r3, #255	; 0xff
 8000d68:	d004      	beq.n	8000d74 <wait_ready+0x28>
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <wait_ready+0x34>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1f3      	bne.n	8000d5c <wait_ready+0x10>

	return res;
 8000d74:	79fb      	ldrb	r3, [r7, #7]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000089 	.word	0x20000089

08000d84 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8000d8a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d8e:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8000d90:	f7ff ff8f 	bl	8000cb2 <DESELECT>

	for (i = 0; i < 10; i++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e005      	b.n	8000da6 <power_on+0x22>
		xmit_spi(0xFF);
 8000d9a:	20ff      	movs	r0, #255	; 0xff
 8000d9c:	f7ff ff90 	bl	8000cc0 <xmit_spi>
	for (i = 0; i < 10; i++)
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	3301      	adds	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	2b09      	cmp	r3, #9
 8000daa:	d9f6      	bls.n	8000d9a <power_on+0x16>

	SELECT();
 8000dac:	f7ff ff7a 	bl	8000ca4 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8000dc4:	2395      	movs	r3, #149	; 0x95
 8000dc6:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e00b      	b.n	8000de6 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	f107 0210 	add.w	r2, r7, #16
 8000dd4:	4413      	add	r3, r2
 8000dd6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff70 	bl	8000cc0 <xmit_spi>
	for (i = 0; i < 6; i++)
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	3301      	adds	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	d9f0      	bls.n	8000dce <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000dec:	e002      	b.n	8000df4 <power_on+0x70>
		Count--;
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000df4:	f7ff ff7e 	bl	8000cf4 <rcvr_spi>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d002      	beq.n	8000e04 <power_on+0x80>
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f4      	bne.n	8000dee <power_on+0x6a>

	DESELECT();
 8000e04:	f7ff ff55 	bl	8000cb2 <DESELECT>
	xmit_spi(0XFF);
 8000e08:	20ff      	movs	r0, #255	; 0xff
 8000e0a:	f7ff ff59 	bl	8000cc0 <xmit_spi>

	PowerFlag = 1;
 8000e0e:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <power_on+0x98>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000008b 	.word	0x2000008b

08000e20 <power_off>:

static
void power_off(void) {
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <power_off+0x14>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	2000008b 	.word	0x2000008b

08000e38 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <rcvr_datablock+0x68>)
 8000e44:	220a      	movs	r2, #10
 8000e46:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000e48:	f7ff ff54 	bl	8000cf4 <rcvr_spi>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	2bff      	cmp	r3, #255	; 0xff
 8000e54:	d104      	bne.n	8000e60 <rcvr_datablock+0x28>
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <rcvr_datablock+0x68>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1f3      	bne.n	8000e48 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	2bfe      	cmp	r3, #254	; 0xfe
 8000e64:	d001      	beq.n	8000e6a <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8000e66:	2300      	movs	r3, #0
 8000e68:	e016      	b.n	8000e98 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff5d 	bl	8000d30 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff57 	bl	8000d30 <rcvr_spi_m>
	} while (btr -= 2);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	3b02      	subs	r3, #2
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1ed      	bne.n	8000e6a <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8000e8e:	f7ff ff31 	bl	8000cf4 <rcvr_spi>
	rcvr_spi();
 8000e92:	f7ff ff2f 	bl	8000cf4 <rcvr_spi>

	return TRUE; /* Return with success */
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000088 	.word	0x20000088

08000ea4 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000eb4:	f7ff ff4a 	bl	8000d4c <wait_ready>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2bff      	cmp	r3, #255	; 0xff
 8000ebc:	d001      	beq.n	8000ec2 <xmit_datablock+0x1e>
		return FALSE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e040      	b.n	8000f44 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fefb 	bl	8000cc0 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	2bfd      	cmp	r3, #253	; 0xfd
 8000ece:	d031      	beq.n	8000f34 <xmit_datablock+0x90>
		wc = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff feef 	bl	8000cc0 <xmit_spi>
			xmit_spi(*buff++);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	1c5a      	adds	r2, r3, #1
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fee8 	bl	8000cc0 <xmit_spi>
		} while (--wc);
 8000ef0:	7bbb      	ldrb	r3, [r7, #14]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	73bb      	strb	r3, [r7, #14]
 8000ef6:	7bbb      	ldrb	r3, [r7, #14]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1eb      	bne.n	8000ed4 <xmit_datablock+0x30>

		rcvr_spi();
 8000efc:	f7ff fefa 	bl	8000cf4 <rcvr_spi>
		rcvr_spi();
 8000f00:	f7ff fef8 	bl	8000cf4 <rcvr_spi>

		while (i <= 64) {
 8000f04:	e00b      	b.n	8000f1e <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000f06:	f7ff fef5 	bl	8000cf4 <rcvr_spi>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f003 031f 	and.w	r3, r3, #31
 8000f14:	2b05      	cmp	r3, #5
 8000f16:	d006      	beq.n	8000f26 <xmit_datablock+0x82>
				break;
			i++;
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	2b40      	cmp	r3, #64	; 0x40
 8000f22:	d9f0      	bls.n	8000f06 <xmit_datablock+0x62>
 8000f24:	e000      	b.n	8000f28 <xmit_datablock+0x84>
				break;
 8000f26:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000f28:	bf00      	nop
 8000f2a:	f7ff fee3 	bl	8000cf4 <rcvr_spi>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0fa      	beq.n	8000f2a <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f003 031f 	and.w	r3, r3, #31
 8000f3a:	2b05      	cmp	r3, #5
 8000f3c:	d101      	bne.n	8000f42 <xmit_datablock+0x9e>
		return TRUE;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <xmit_datablock+0xa0>
	else
		return FALSE;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8000f58:	f7ff fef8 	bl	8000d4c <wait_ready>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2bff      	cmp	r3, #255	; 0xff
 8000f60:	d001      	beq.n	8000f66 <send_cmd+0x1a>
		return 0xFF;
 8000f62:	23ff      	movs	r3, #255	; 0xff
 8000f64:	e040      	b.n	8000fe8 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fea9 	bl	8000cc0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	0e1b      	lsrs	r3, r3, #24
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fea3 	bl	8000cc0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	0c1b      	lsrs	r3, r3, #16
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fe9d 	bl	8000cc0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fe97 	bl	8000cc0 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fe92 	bl	8000cc0 <xmit_spi>
	n = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b40      	cmp	r3, #64	; 0x40
 8000fa4:	d101      	bne.n	8000faa <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8000fa6:	2395      	movs	r3, #149	; 0x95
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b48      	cmp	r3, #72	; 0x48
 8000fae:	d101      	bne.n	8000fb4 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8000fb0:	2387      	movs	r3, #135	; 0x87
 8000fb2:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fe82 	bl	8000cc0 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b4c      	cmp	r3, #76	; 0x4c
 8000fc0:	d101      	bne.n	8000fc6 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8000fc2:	f7ff fe97 	bl	8000cf4 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8000fca:	f7ff fe93 	bl	8000cf4 <rcvr_spi>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8000fd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	da05      	bge.n	8000fe6 <send_cmd+0x9a>
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f1      	bne.n	8000fca <send_cmd+0x7e>

	return res; /* Return with the response value */
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8001000:	2301      	movs	r3, #1
 8001002:	e0d5      	b.n	80011b0 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8001004:	4b6c      	ldr	r3, [pc, #432]	; (80011b8 <disk_initialize+0x1c8>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 8001012:	4b69      	ldr	r3, [pc, #420]	; (80011b8 <disk_initialize+0x1c8>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	e0ca      	b.n	80011b0 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 800101a:	f7ff feb3 	bl	8000d84 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 800101e:	f7ff fe41 	bl	8000ca4 <SELECT>
	ty = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8001026:	2100      	movs	r1, #0
 8001028:	2040      	movs	r0, #64	; 0x40
 800102a:	f7ff ff8f 	bl	8000f4c <send_cmd>
 800102e:	4603      	mov	r3, r0
 8001030:	2b01      	cmp	r3, #1
 8001032:	f040 80a5 	bne.w	8001180 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8001036:	4b61      	ldr	r3, [pc, #388]	; (80011bc <disk_initialize+0x1cc>)
 8001038:	2264      	movs	r2, #100	; 0x64
 800103a:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 800103c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001040:	2048      	movs	r0, #72	; 0x48
 8001042:	f7ff ff83 	bl	8000f4c <send_cmd>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d158      	bne.n	80010fe <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e00c      	b.n	800106c <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8001052:	7bfc      	ldrb	r4, [r7, #15]
 8001054:	f7ff fe4e 	bl	8000cf4 <rcvr_spi>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4423      	add	r3, r4
 8001062:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	3301      	adds	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d9ef      	bls.n	8001052 <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8001072:	7abb      	ldrb	r3, [r7, #10]
 8001074:	2b01      	cmp	r3, #1
 8001076:	f040 8083 	bne.w	8001180 <disk_initialize+0x190>
 800107a:	7afb      	ldrb	r3, [r7, #11]
 800107c:	2baa      	cmp	r3, #170	; 0xaa
 800107e:	d17f      	bne.n	8001180 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8001080:	2100      	movs	r1, #0
 8001082:	2077      	movs	r0, #119	; 0x77
 8001084:	f7ff ff62 	bl	8000f4c <send_cmd>
 8001088:	4603      	mov	r3, r0
 800108a:	2b01      	cmp	r3, #1
 800108c:	d807      	bhi.n	800109e <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 800108e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001092:	2069      	movs	r0, #105	; 0x69
 8001094:	f7ff ff5a 	bl	8000f4c <send_cmd>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 800109e:	4b47      	ldr	r3, [pc, #284]	; (80011bc <disk_initialize+0x1cc>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1eb      	bne.n	8001080 <disk_initialize+0x90>
 80010a8:	e000      	b.n	80010ac <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80010aa:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80010ac:	4b43      	ldr	r3, [pc, #268]	; (80011bc <disk_initialize+0x1cc>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d064      	beq.n	8001180 <disk_initialize+0x190>
 80010b6:	2100      	movs	r1, #0
 80010b8:	207a      	movs	r0, #122	; 0x7a
 80010ba:	f7ff ff47 	bl	8000f4c <send_cmd>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d15d      	bne.n	8001180 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e00c      	b.n	80010e4 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 80010ca:	7bfc      	ldrb	r4, [r7, #15]
 80010cc:	f7ff fe12 	bl	8000cf4 <rcvr_spi>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4423      	add	r3, r4
 80010da:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	3301      	adds	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d9ef      	bls.n	80010ca <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 80010ea:	7a3b      	ldrb	r3, [r7, #8]
 80010ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <disk_initialize+0x108>
 80010f4:	2306      	movs	r3, #6
 80010f6:	e000      	b.n	80010fa <disk_initialize+0x10a>
 80010f8:	2302      	movs	r3, #2
 80010fa:	73bb      	strb	r3, [r7, #14]
 80010fc:	e040      	b.n	8001180 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80010fe:	2100      	movs	r1, #0
 8001100:	2077      	movs	r0, #119	; 0x77
 8001102:	f7ff ff23 	bl	8000f4c <send_cmd>
 8001106:	4603      	mov	r3, r0
 8001108:	2b01      	cmp	r3, #1
 800110a:	d808      	bhi.n	800111e <disk_initialize+0x12e>
 800110c:	2100      	movs	r1, #0
 800110e:	2069      	movs	r0, #105	; 0x69
 8001110:	f7ff ff1c 	bl	8000f4c <send_cmd>
 8001114:	4603      	mov	r3, r0
 8001116:	2b01      	cmp	r3, #1
 8001118:	d801      	bhi.n	800111e <disk_initialize+0x12e>
 800111a:	2302      	movs	r3, #2
 800111c:	e000      	b.n	8001120 <disk_initialize+0x130>
 800111e:	2301      	movs	r3, #1
 8001120:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d10e      	bne.n	8001146 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8001128:	2100      	movs	r1, #0
 800112a:	2077      	movs	r0, #119	; 0x77
 800112c:	f7ff ff0e 	bl	8000f4c <send_cmd>
 8001130:	4603      	mov	r3, r0
 8001132:	2b01      	cmp	r3, #1
 8001134:	d80e      	bhi.n	8001154 <disk_initialize+0x164>
 8001136:	2100      	movs	r1, #0
 8001138:	2069      	movs	r0, #105	; 0x69
 800113a:	f7ff ff07 	bl	8000f4c <send_cmd>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d107      	bne.n	8001154 <disk_initialize+0x164>
						break; /* ACMD41 */
 8001144:	e00d      	b.n	8001162 <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8001146:	2100      	movs	r1, #0
 8001148:	2041      	movs	r0, #65	; 0x41
 800114a:	f7ff feff 	bl	8000f4c <send_cmd>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <disk_initialize+0x1cc>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1e1      	bne.n	8001122 <disk_initialize+0x132>
 800115e:	e000      	b.n	8001162 <disk_initialize+0x172>
						break; /* CMD1 */
 8001160:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <disk_initialize+0x1cc>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d007      	beq.n	800117c <disk_initialize+0x18c>
 800116c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001170:	2050      	movs	r0, #80	; 0x50
 8001172:	f7ff feeb 	bl	8000f4c <send_cmd>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <disk_initialize+0x190>
				ty = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8001180:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <disk_initialize+0x1d0>)
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 8001186:	f7ff fd94 	bl	8000cb2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800118a:	f7ff fdb3 	bl	8000cf4 <rcvr_spi>

	if (ty) /* Initialization succeded */
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d008      	beq.n	80011a6 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <disk_initialize+0x1c8>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f023 0301 	bic.w	r3, r3, #1
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <disk_initialize+0x1c8>)
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	e001      	b.n	80011aa <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80011a6:	f7ff fe3b 	bl	8000e20 <power_off>

	return Stat;
 80011aa:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <disk_initialize+0x1c8>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b2db      	uxtb	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd90      	pop	{r4, r7, pc}
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000088 	.word	0x20000088
 80011c0:	2000008a 	.word	0x2000008a

080011c4 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	if (drv)
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80011d4:	2301      	movs	r3, #1
 80011d6:	e002      	b.n	80011de <disk_status+0x1a>
	return Stat;
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <disk_status+0x28>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b2db      	uxtb	r3, r3
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000000 	.word	0x20000000

080011f0 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	4603      	mov	r3, r0
 80011fe:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <disk_read+0x1c>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <disk_read+0x20>
		return RES_PARERR;
 800120c:	2304      	movs	r3, #4
 800120e:	e051      	b.n	80012b4 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <disk_read+0xcc>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <disk_read+0x32>
		return RES_NOTRDY;
 800121e:	2303      	movs	r3, #3
 8001220:	e048      	b.n	80012b4 <disk_read+0xc4>

	if (!(CardType & 4))
 8001222:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <disk_read+0xd0>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	025b      	lsls	r3, r3, #9
 8001232:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8001234:	f7ff fd36 	bl	8000ca4 <SELECT>

	if (count == 1) { /* Single block read */
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d111      	bne.n	8001262 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	2051      	movs	r0, #81	; 0x51
 8001242:	f7ff fe83 	bl	8000f4c <send_cmd>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d129      	bne.n	80012a0 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 800124c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001250:	68b8      	ldr	r0, [r7, #8]
 8001252:	f7ff fdf1 	bl	8000e38 <rcvr_datablock>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d021      	beq.n	80012a0 <disk_read+0xb0>
			count = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	e01e      	b.n	80012a0 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	2052      	movs	r0, #82	; 0x52
 8001266:	f7ff fe71 	bl	8000f4c <send_cmd>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d117      	bne.n	80012a0 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8001270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001274:	68b8      	ldr	r0, [r7, #8]
 8001276:	f7ff fddf 	bl	8000e38 <rcvr_datablock>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00a      	beq.n	8001296 <disk_read+0xa6>
					break;
				buff += 512;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001286:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3b01      	subs	r3, #1
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1ed      	bne.n	8001270 <disk_read+0x80>
 8001294:	e000      	b.n	8001298 <disk_read+0xa8>
					break;
 8001296:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8001298:	2100      	movs	r1, #0
 800129a:	204c      	movs	r0, #76	; 0x4c
 800129c:	f7ff fe56 	bl	8000f4c <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 80012a0:	f7ff fd07 	bl	8000cb2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80012a4:	f7ff fd26 	bl	8000cf4 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	bf14      	ite	ne
 80012ae:	2301      	movne	r3, #1
 80012b0:	2300      	moveq	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000000 	.word	0x20000000
 80012c0:	2000008a 	.word	0x2000008a

080012c4 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <disk_write+0x1c>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <disk_write+0x20>
		return RES_PARERR;
 80012e0:	2304      	movs	r3, #4
 80012e2:	e06b      	b.n	80013bc <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 80012e4:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <disk_write+0x100>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <disk_write+0x32>
		return RES_NOTRDY;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e062      	b.n	80013bc <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 80012f6:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <disk_write+0x100>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <disk_write+0x44>
		return RES_WRPRT;
 8001304:	2302      	movs	r3, #2
 8001306:	e059      	b.n	80013bc <disk_write+0xf8>

	if (!(CardType & 4))
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <disk_write+0x104>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	025b      	lsls	r3, r3, #9
 8001318:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 800131a:	f7ff fcc3 	bl	8000ca4 <SELECT>

	if (count == 1) { /* Single block write */
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d110      	bne.n	8001346 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	2058      	movs	r0, #88	; 0x58
 8001328:	f7ff fe10 	bl	8000f4c <send_cmd>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d13a      	bne.n	80013a8 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8001332:	21fe      	movs	r1, #254	; 0xfe
 8001334:	68b8      	ldr	r0, [r7, #8]
 8001336:	f7ff fdb5 	bl	8000ea4 <xmit_datablock>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d033      	beq.n	80013a8 <disk_write+0xe4>
			count = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	e030      	b.n	80013a8 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <disk_write+0x104>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d007      	beq.n	8001362 <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8001352:	2100      	movs	r1, #0
 8001354:	2077      	movs	r0, #119	; 0x77
 8001356:	f7ff fdf9 	bl	8000f4c <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 800135a:	6839      	ldr	r1, [r7, #0]
 800135c:	2057      	movs	r0, #87	; 0x57
 800135e:	f7ff fdf5 	bl	8000f4c <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	2059      	movs	r0, #89	; 0x59
 8001366:	f7ff fdf1 	bl	8000f4c <send_cmd>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d11b      	bne.n	80013a8 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8001370:	21fc      	movs	r1, #252	; 0xfc
 8001372:	68b8      	ldr	r0, [r7, #8]
 8001374:	f7ff fd96 	bl	8000ea4 <xmit_datablock>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00a      	beq.n	8001394 <disk_write+0xd0>
					break;
				buff += 512;
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001384:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	3b01      	subs	r3, #1
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1ee      	bne.n	8001370 <disk_write+0xac>
 8001392:	e000      	b.n	8001396 <disk_write+0xd2>
					break;
 8001394:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8001396:	21fd      	movs	r1, #253	; 0xfd
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff fd83 	bl	8000ea4 <xmit_datablock>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <disk_write+0xe4>
				count = 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 80013a8:	f7ff fc83 	bl	8000cb2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80013ac:	f7ff fca2 	bl	8000cf4 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bf14      	ite	ne
 80013b6:	2301      	movne	r3, #1
 80013b8:	2300      	moveq	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000000 	.word	0x20000000
 80013c8:	2000008a 	.word	0x2000008a

080013cc <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <disk_timerproc+0x44>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
	if (n)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <disk_timerproc+0x1e>
		Timer1 = --n;
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <disk_timerproc+0x44>)
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <disk_timerproc+0x48>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
	if (n)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <disk_timerproc+0x36>
		Timer2 = --n;
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	71fb      	strb	r3, [r7, #7]
 80013fc:	4a05      	ldr	r2, [pc, #20]	; (8001414 <disk_timerproc+0x48>)
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	7013      	strb	r3, [r2, #0]

}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000088 	.word	0x20000088
 8001414:	20000089 	.word	0x20000089

08001418 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	++sdcard_timer;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <sdcard_systick_timerproc+0x2c>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	3301      	adds	r3, #1
 8001424:	b29a      	uxth	r2, r3
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <sdcard_systick_timerproc+0x2c>)
 8001428:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <sdcard_systick_timerproc+0x2c>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	2b09      	cmp	r3, #9
 8001432:	d904      	bls.n	800143e <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <sdcard_systick_timerproc+0x2c>)
 8001436:	2200      	movs	r2, #0
 8001438:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 800143a:	f7ff ffc7 	bl	80013cc <disk_timerproc>
	}
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200002d0 	.word	0x200002d0

08001448 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 800144c:	4b02      	ldr	r3, [pc, #8]	; (8001458 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	36c55cc0 	.word	0x36c55cc0

0800145c <ld_word>:
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3301      	adds	r3, #1
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	81fb      	strh	r3, [r7, #14]
 800146c:	89fb      	ldrh	r3, [r7, #14]
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	b21a      	sxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b21b      	sxth	r3, r3
 800147c:	81fb      	strh	r3, [r7, #14]
 800147e:	89fb      	ldrh	r3, [r7, #14]
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <ld_dword>:
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3303      	adds	r3, #3
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	3202      	adds	r2, #2
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	3201      	adds	r2, #1
 80014b2:	7812      	ldrb	r2, [r2, #0]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	7812      	ldrb	r2, [r2, #0]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <st_word>:
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	807b      	strh	r3, [r7, #2]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	887a      	ldrh	r2, [r7, #2]
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <st_dword>:
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <mem_cpy>:
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00d      	beq.n	8001596 <mem_cpy+0x36>
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	1c53      	adds	r3, r2, #1
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	1c59      	adds	r1, r3, #1
 8001584:	6179      	str	r1, [r7, #20]
 8001586:	7812      	ldrb	r2, [r2, #0]
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3b01      	subs	r3, #1
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f1      	bne.n	800157a <mem_cpy+0x1a>
 8001596:	bf00      	nop
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <mem_set>:
 80015a2:	b480      	push	{r7}
 80015a4:	b087      	sub	sp, #28
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	617a      	str	r2, [r7, #20]
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f3      	bne.n	80015b2 <mem_set+0x10>
 80015ca:	bf00      	nop
 80015cc:	371c      	adds	r7, #28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <mem_cmp>:
 80015d6:	b480      	push	{r7}
 80015d8:	b089      	sub	sp, #36	; 0x24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	61fa      	str	r2, [r7, #28]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	61ba      	str	r2, [r7, #24]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	1acb      	subs	r3, r1, r3
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <mem_cmp+0x40>
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0eb      	beq.n	80015ee <mem_cmp+0x18>
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	4618      	mov	r0, r3
 800161a:	3724      	adds	r7, #36	; 0x24
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <chk_chr>:
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	e002      	b.n	8001636 <chk_chr+0x12>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3301      	adds	r3, #1
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <chk_chr+0x26>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	4293      	cmp	r3, r2
 8001648:	d1f2      	bne.n	8001630 <chk_chr+0xc>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <dbc_1st>:
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	2281      	movs	r2, #129	; 0x81
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	4293      	cmp	r3, r2
 800166a:	d30f      	bcc.n	800168c <dbc_1st+0x32>
 800166c:	229f      	movs	r2, #159	; 0x9f
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	4293      	cmp	r3, r2
 8001672:	d801      	bhi.n	8001678 <dbc_1st+0x1e>
 8001674:	2301      	movs	r3, #1
 8001676:	e00a      	b.n	800168e <dbc_1st+0x34>
 8001678:	22e0      	movs	r2, #224	; 0xe0
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	4293      	cmp	r3, r2
 800167e:	d305      	bcc.n	800168c <dbc_1st+0x32>
 8001680:	22fc      	movs	r2, #252	; 0xfc
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	4293      	cmp	r3, r2
 8001686:	d801      	bhi.n	800168c <dbc_1st+0x32>
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <dbc_1st+0x34>
 800168c:	2300      	movs	r3, #0
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <dbc_2nd>:
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	2240      	movs	r2, #64	; 0x40
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d319      	bcc.n	80016e0 <dbc_2nd+0x46>
 80016ac:	227e      	movs	r2, #126	; 0x7e
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d801      	bhi.n	80016b8 <dbc_2nd+0x1e>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e014      	b.n	80016e2 <dbc_2nd+0x48>
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	4293      	cmp	r3, r2
 80016be:	d305      	bcc.n	80016cc <dbc_2nd+0x32>
 80016c0:	22fc      	movs	r2, #252	; 0xfc
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d801      	bhi.n	80016cc <dbc_2nd+0x32>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e00a      	b.n	80016e2 <dbc_2nd+0x48>
 80016cc:	2200      	movs	r2, #0
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d305      	bcc.n	80016e0 <dbc_2nd+0x46>
 80016d4:	2200      	movs	r2, #0
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	4293      	cmp	r3, r2
 80016da:	d801      	bhi.n	80016e0 <dbc_2nd+0x46>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <dbc_2nd+0x48>
 80016e0:	2300      	movs	r3, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <sync_window>:
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	78db      	ldrb	r3, [r3, #3]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d02c      	beq.n	800175c <sync_window+0x6e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7858      	ldrb	r0, [r3, #1]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001710:	2301      	movs	r3, #1
 8001712:	f7ff fdd7 	bl	80012c4 <disk_write>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d11d      	bne.n	8001758 <sync_window+0x6a>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	70da      	strb	r2, [r3, #3]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	1ad2      	subs	r2, r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	429a      	cmp	r2, r3
 8001732:	d213      	bcs.n	800175c <sync_window+0x6e>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	789b      	ldrb	r3, [r3, #2]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d10f      	bne.n	800175c <sync_window+0x6e>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7858      	ldrb	r0, [r3, #1]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	441a      	add	r2, r3
 8001750:	2301      	movs	r3, #1
 8001752:	f7ff fdb7 	bl	80012c4 <disk_write>
 8001756:	e001      	b.n	800175c <sync_window+0x6e>
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <move_window>:
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d01b      	beq.n	80017b6 <move_window+0x50>
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffb5 	bl	80016ee <sync_window>
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d113      	bne.n	80017b6 <move_window+0x50>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7858      	ldrb	r0, [r3, #1]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001798:	2301      	movs	r3, #1
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	f7ff fd28 	bl	80011f0 <disk_read>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d004      	beq.n	80017b0 <move_window+0x4a>
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <clst2sect>:
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	3b02      	subs	r3, #2
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	3b02      	subs	r3, #2
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d301      	bcc.n	80017e0 <clst2sect+0x20>
 80017dc:	2300      	movs	r3, #0
 80017de:	e008      	b.n	80017f2 <clst2sect+0x32>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	895b      	ldrh	r3, [r3, #10]
 80017e8:	4619      	mov	r1, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	fb03 f301 	mul.w	r3, r3, r1
 80017f0:	4413      	add	r3, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <get_fat>:
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d904      	bls.n	800181e <get_fat+0x20>
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d302      	bcc.n	8001824 <get_fat+0x26>
 800181e:	2301      	movs	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e08c      	b.n	800193e <get_fat+0x140>
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d045      	beq.n	80018be <get_fat+0xc0>
 8001832:	2b03      	cmp	r3, #3
 8001834:	d05d      	beq.n	80018f2 <get_fat+0xf4>
 8001836:	2b01      	cmp	r3, #1
 8001838:	d177      	bne.n	800192a <get_fat+0x12c>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	085b      	lsrs	r3, r3, #1
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	6a1a      	ldr	r2, [r3, #32]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	0a5b      	lsrs	r3, r3, #9
 8001850:	4413      	add	r3, r2
 8001852:	4619      	mov	r1, r3
 8001854:	6938      	ldr	r0, [r7, #16]
 8001856:	f7ff ff86 	bl	8001766 <move_window>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d167      	bne.n	8001930 <get_fat+0x132>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60fa      	str	r2, [r7, #12]
 8001866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4413      	add	r3, r2
 800186e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	6a1a      	ldr	r2, [r3, #32]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	0a5b      	lsrs	r3, r3, #9
 800187c:	4413      	add	r3, r2
 800187e:	4619      	mov	r1, r3
 8001880:	6938      	ldr	r0, [r7, #16]
 8001882:	f7ff ff70 	bl	8001766 <move_window>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d153      	bne.n	8001934 <get_fat+0x136>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4413      	add	r3, r2
 8001896:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	461a      	mov	r2, r3
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <get_fat+0xb6>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	e002      	b.n	80018ba <get_fat+0xbc>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e03f      	b.n	800193e <get_fat+0x140>
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6a1a      	ldr	r2, [r3, #32]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	4413      	add	r3, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	6938      	ldr	r0, [r7, #16]
 80018cc:	f7ff ff4b 	bl	8001766 <move_window>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d130      	bne.n	8001938 <get_fat+0x13a>
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80018e4:	4413      	add	r3, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fdb8 	bl	800145c <ld_word>
 80018ec:	4603      	mov	r3, r0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e025      	b.n	800193e <get_fat+0x140>
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	6a1a      	ldr	r2, [r3, #32]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	09db      	lsrs	r3, r3, #7
 80018fa:	4413      	add	r3, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	6938      	ldr	r0, [r7, #16]
 8001900:	f7ff ff31 	bl	8001766 <move_window>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d118      	bne.n	800193c <get_fat+0x13e>
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001918:	4413      	add	r3, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fdb6 	bl	800148c <ld_dword>
 8001920:	4603      	mov	r3, r0
 8001922:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e009      	b.n	800193e <get_fat+0x140>
 800192a:	2301      	movs	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e006      	b.n	800193e <get_fat+0x140>
 8001930:	bf00      	nop
 8001932:	e004      	b.n	800193e <get_fat+0x140>
 8001934:	bf00      	nop
 8001936:	e002      	b.n	800193e <get_fat+0x140>
 8001938:	bf00      	nop
 800193a:	e000      	b.n	800193e <get_fat+0x140>
 800193c:	bf00      	nop
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <put_fat>:
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	2302      	movs	r3, #2
 8001956:	77fb      	strb	r3, [r7, #31]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b01      	cmp	r3, #1
 800195c:	f240 80d6 	bls.w	8001b0c <put_fat+0x1c4>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	429a      	cmp	r2, r3
 8001968:	f080 80d0 	bcs.w	8001b0c <put_fat+0x1c4>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d073      	beq.n	8001a5c <put_fat+0x114>
 8001974:	2b03      	cmp	r3, #3
 8001976:	f000 8091 	beq.w	8001a9c <put_fat+0x154>
 800197a:	2b01      	cmp	r3, #1
 800197c:	f040 80c6 	bne.w	8001b0c <put_fat+0x1c4>
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	085b      	lsrs	r3, r3, #1
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4413      	add	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a1a      	ldr	r2, [r3, #32]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	0a5b      	lsrs	r3, r3, #9
 8001996:	4413      	add	r3, r2
 8001998:	4619      	mov	r1, r3
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f7ff fee3 	bl	8001766 <move_window>
 80019a0:	4603      	mov	r3, r0
 80019a2:	77fb      	strb	r3, [r7, #31]
 80019a4:	7ffb      	ldrb	r3, [r7, #31]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f040 80a9 	bne.w	8001afe <put_fat+0x1b6>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	1c59      	adds	r1, r3, #1
 80019b6:	61b9      	str	r1, [r7, #24]
 80019b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019bc:	4413      	add	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00d      	beq.n	80019e6 <put_fat+0x9e>
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b25b      	sxtb	r3, r3
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	b25a      	sxtb	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	4313      	orrs	r3, r2
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	e001      	b.n	80019ea <put_fat+0xa2>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	7013      	strb	r3, [r2, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2201      	movs	r2, #1
 80019f2:	70da      	strb	r2, [r3, #3]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a1a      	ldr	r2, [r3, #32]
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	0a5b      	lsrs	r3, r3, #9
 80019fc:	4413      	add	r3, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f7ff feb0 	bl	8001766 <move_window>
 8001a06:	4603      	mov	r3, r0
 8001a08:	77fb      	strb	r3, [r7, #31]
 8001a0a:	7ffb      	ldrb	r3, [r7, #31]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d178      	bne.n	8001b02 <put_fat+0x1ba>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a1c:	4413      	add	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <put_fat+0xea>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	e00e      	b.n	8001a50 <put_fat+0x108>
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	f023 030f 	bic.w	r3, r3, #15
 8001a3c:	b25a      	sxtb	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b25b      	sxtb	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	7013      	strb	r3, [r2, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2201      	movs	r2, #1
 8001a58:	70da      	strb	r2, [r3, #3]
 8001a5a:	e057      	b.n	8001b0c <put_fat+0x1c4>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a1a      	ldr	r2, [r3, #32]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	4413      	add	r3, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7ff fe7c 	bl	8001766 <move_window>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	77fb      	strb	r3, [r7, #31]
 8001a72:	7ffb      	ldrb	r3, [r7, #31]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d146      	bne.n	8001b06 <put_fat+0x1be>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001a86:	4413      	add	r3, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	b292      	uxth	r2, r2
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fd1f 	bl	80014d2 <st_word>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	70da      	strb	r2, [r3, #3]
 8001a9a:	e037      	b.n	8001b0c <put_fat+0x1c4>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	09db      	lsrs	r3, r3, #7
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f7ff fe5c 	bl	8001766 <move_window>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	77fb      	strb	r3, [r7, #31]
 8001ab2:	7ffb      	ldrb	r3, [r7, #31]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d128      	bne.n	8001b0a <put_fat+0x1c2>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001acc:	4413      	add	r3, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fcdc 	bl	800148c <ld_dword>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001ada:	4323      	orrs	r3, r4
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001aec:	4413      	add	r3, r2
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fd09 	bl	8001508 <st_dword>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	70da      	strb	r2, [r3, #3]
 8001afc:	e006      	b.n	8001b0c <put_fat+0x1c4>
 8001afe:	bf00      	nop
 8001b00:	e004      	b.n	8001b0c <put_fat+0x1c4>
 8001b02:	bf00      	nop
 8001b04:	e002      	b.n	8001b0c <put_fat+0x1c4>
 8001b06:	bf00      	nop
 8001b08:	e000      	b.n	8001b0c <put_fat+0x1c4>
 8001b0a:	bf00      	nop
 8001b0c:	7ffb      	ldrb	r3, [r7, #31]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd90      	pop	{r4, r7, pc}

08001b16 <remove_chain>:
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b088      	sub	sp, #32
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	2300      	movs	r3, #0
 8001b24:	77fb      	strb	r3, [r7, #31]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d904      	bls.n	8001b3c <remove_chain+0x26>
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d301      	bcc.n	8001b40 <remove_chain+0x2a>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e04b      	b.n	8001bd8 <remove_chain+0xc2>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00c      	beq.n	8001b60 <remove_chain+0x4a>
 8001b46:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	69b8      	ldr	r0, [r7, #24]
 8001b4e:	f7ff fefb 	bl	8001948 <put_fat>
 8001b52:	4603      	mov	r3, r0
 8001b54:	77fb      	strb	r3, [r7, #31]
 8001b56:	7ffb      	ldrb	r3, [r7, #31]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <remove_chain+0x4a>
 8001b5c:	7ffb      	ldrb	r3, [r7, #31]
 8001b5e:	e03b      	b.n	8001bd8 <remove_chain+0xc2>
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f7ff fe4b 	bl	80017fe <get_fat>
 8001b68:	6178      	str	r0, [r7, #20]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d031      	beq.n	8001bd4 <remove_chain+0xbe>
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <remove_chain+0x64>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e02e      	b.n	8001bd8 <remove_chain+0xc2>
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d101      	bne.n	8001b86 <remove_chain+0x70>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e028      	b.n	8001bd8 <remove_chain+0xc2>
 8001b86:	2200      	movs	r2, #0
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	69b8      	ldr	r0, [r7, #24]
 8001b8c:	f7ff fedc 	bl	8001948 <put_fat>
 8001b90:	4603      	mov	r3, r0
 8001b92:	77fb      	strb	r3, [r7, #31]
 8001b94:	7ffb      	ldrb	r3, [r7, #31]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <remove_chain+0x88>
 8001b9a:	7ffb      	ldrb	r3, [r7, #31]
 8001b9c:	e01c      	b.n	8001bd8 <remove_chain+0xc2>
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	3b02      	subs	r3, #2
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d20b      	bcs.n	8001bc4 <remove_chain+0xae>
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	611a      	str	r2, [r3, #16]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	791b      	ldrb	r3, [r3, #4]
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	711a      	strb	r2, [r3, #4]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d3c6      	bcc.n	8001b60 <remove_chain+0x4a>
 8001bd2:	e000      	b.n	8001bd6 <remove_chain+0xc0>
 8001bd4:	bf00      	nop
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <create_chain>:
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10d      	bne.n	8001c12 <create_chain+0x32>
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <create_chain+0x2c>
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d31b      	bcc.n	8001c44 <create_chain+0x64>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	e018      	b.n	8001c44 <create_chain+0x64>
 8001c12:	6839      	ldr	r1, [r7, #0]
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff fdf2 	bl	80017fe <get_fat>
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d801      	bhi.n	8001c26 <create_chain+0x46>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0a9      	b.n	8001d7a <create_chain+0x19a>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d101      	bne.n	8001c32 <create_chain+0x52>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	e0a3      	b.n	8001d7a <create_chain+0x19a>
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d201      	bcs.n	8001c40 <create_chain+0x60>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	e09c      	b.n	8001d7a <create_chain+0x19a>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <create_chain+0x70>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e094      	b.n	8001d7a <create_chain+0x19a>
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d129      	bne.n	8001cb0 <create_chain+0xd0>
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d301      	bcc.n	8001c70 <create_chain+0x90>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	69f9      	ldr	r1, [r7, #28]
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fdc3 	bl	80017fe <get_fat>
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d003      	beq.n	8001c88 <create_chain+0xa8>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c86:	d101      	bne.n	8001c8c <create_chain+0xac>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	e076      	b.n	8001d7a <create_chain+0x19a>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00e      	beq.n	8001cb0 <create_chain+0xd0>
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d906      	bls.n	8001cac <create_chain+0xcc>
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d201      	bcs.n	8001cac <create_chain+0xcc>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d129      	bne.n	8001d0a <create_chain+0x12a>
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d307      	bcc.n	8001cda <create_chain+0xfa>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d901      	bls.n	8001cda <create_chain+0xfa>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e04f      	b.n	8001d7a <create_chain+0x19a>
 8001cda:	69f9      	ldr	r1, [r7, #28]
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fd8e 	bl	80017fe <get_fat>
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00e      	beq.n	8001d08 <create_chain+0x128>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d003      	beq.n	8001cf8 <create_chain+0x118>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf6:	d101      	bne.n	8001cfc <create_chain+0x11c>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	e03e      	b.n	8001d7a <create_chain+0x19a>
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1da      	bne.n	8001cba <create_chain+0xda>
 8001d04:	2300      	movs	r3, #0
 8001d06:	e038      	b.n	8001d7a <create_chain+0x19a>
 8001d08:	bf00      	nop
 8001d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0e:	69f9      	ldr	r1, [r7, #28]
 8001d10:	6938      	ldr	r0, [r7, #16]
 8001d12:	f7ff fe19 	bl	8001948 <put_fat>
 8001d16:	4603      	mov	r3, r0
 8001d18:	75fb      	strb	r3, [r7, #23]
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d109      	bne.n	8001d34 <create_chain+0x154>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <create_chain+0x154>
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	6839      	ldr	r1, [r7, #0]
 8001d2a:	6938      	ldr	r0, [r7, #16]
 8001d2c:	f7ff fe0c 	bl	8001948 <put_fat>
 8001d30:	4603      	mov	r3, r0
 8001d32:	75fb      	strb	r3, [r7, #23]
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d116      	bne.n	8001d68 <create_chain+0x188>
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	3b02      	subs	r3, #2
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d804      	bhi.n	8001d58 <create_chain+0x178>
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	1e5a      	subs	r2, r3, #1
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	611a      	str	r2, [r3, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	791b      	ldrb	r3, [r3, #4]
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	711a      	strb	r2, [r3, #4]
 8001d66:	e007      	b.n	8001d78 <create_chain+0x198>
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d102      	bne.n	8001d74 <create_chain+0x194>
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d72:	e000      	b.n	8001d76 <create_chain+0x196>
 8001d74:	2301      	movs	r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <dir_clear>:
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff fcae 	bl	80016ee <sync_window>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <dir_clear+0x1a>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e036      	b.n	8001e0a <dir_clear+0x88>
 8001d9c:	6839      	ldr	r1, [r7, #0]
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff fd0e 	bl	80017c0 <clst2sect>
 8001da4:	6138      	str	r0, [r7, #16]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3330      	adds	r3, #48	; 0x30
 8001db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fbf3 	bl	80015a2 <mem_set>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3330      	adds	r3, #48	; 0x30
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e003      	b.n	8001dd4 <dir_clear+0x52>
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	895b      	ldrh	r3, [r3, #10]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d20b      	bcs.n	8001df8 <dir_clear+0x76>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7858      	ldrb	r0, [r3, #1]
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	441a      	add	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	68f9      	ldr	r1, [r7, #12]
 8001dee:	f7ff fa69 	bl	80012c4 <disk_write>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0e9      	beq.n	8001dcc <dir_clear+0x4a>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	895b      	ldrh	r3, [r3, #10]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	4293      	cmp	r3, r2
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <dir_sdi>:
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e28:	d204      	bcs.n	8001e34 <dir_sdi+0x22>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <dir_sdi+0x26>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e063      	b.n	8001f00 <dir_sdi+0xee>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	611a      	str	r2, [r3, #16]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <dir_sdi+0x46>
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d902      	bls.n	8001e58 <dir_sdi+0x46>
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <dir_sdi+0x66>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	8912      	ldrh	r2, [r2, #8]
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d301      	bcc.n	8001e6e <dir_sdi+0x5c>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e048      	b.n	8001f00 <dir_sdi+0xee>
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	619a      	str	r2, [r3, #24]
 8001e76:	e029      	b.n	8001ecc <dir_sdi+0xba>
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	895b      	ldrh	r3, [r3, #10]
 8001e7c:	025b      	lsls	r3, r3, #9
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	e019      	b.n	8001eb6 <dir_sdi+0xa4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6979      	ldr	r1, [r7, #20]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fcb9 	bl	80017fe <get_fat>
 8001e8c:	6178      	str	r0, [r7, #20]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d101      	bne.n	8001e9a <dir_sdi+0x88>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e032      	b.n	8001f00 <dir_sdi+0xee>
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d904      	bls.n	8001eaa <dir_sdi+0x98>
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d301      	bcc.n	8001eae <dir_sdi+0x9c>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e028      	b.n	8001f00 <dir_sdi+0xee>
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d2e1      	bcs.n	8001e82 <dir_sdi+0x70>
 8001ebe:	6979      	ldr	r1, [r7, #20]
 8001ec0:	6938      	ldr	r0, [r7, #16]
 8001ec2:	f7ff fc7d 	bl	80017c0 <clst2sect>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	615a      	str	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <dir_sdi+0xcc>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e010      	b.n	8001f00 <dir_sdi+0xee>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	0a5b      	lsrs	r3, r3, #9
 8001ee6:	441a      	add	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	619a      	str	r2, [r3, #24]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef8:	441a      	add	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	61da      	str	r2, [r3, #28]
 8001efe:	2300      	movs	r3, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <dir_next>:
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	3320      	adds	r3, #32
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f26:	d302      	bcc.n	8001f2e <dir_next+0x26>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <dir_next+0x32>
 8001f36:	2304      	movs	r3, #4
 8001f38:	e078      	b.n	800202c <dir_next+0x124>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d166      	bne.n	8002012 <dir_next+0x10a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	619a      	str	r2, [r3, #24]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10a      	bne.n	8001f6c <dir_next+0x64>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	8912      	ldrh	r2, [r2, #8]
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d357      	bcc.n	8002012 <dir_next+0x10a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
 8001f68:	2304      	movs	r3, #4
 8001f6a:	e05f      	b.n	800202c <dir_next+0x124>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	0a5b      	lsrs	r3, r3, #9
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	8952      	ldrh	r2, [r2, #10]
 8001f74:	3a01      	subs	r2, #1
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d14a      	bne.n	8002012 <dir_next+0x10a>
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f7ff fc3a 	bl	80017fe <get_fat>
 8001f8a:	6178      	str	r0, [r7, #20]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d801      	bhi.n	8001f96 <dir_next+0x8e>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e04a      	b.n	800202c <dir_next+0x124>
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d101      	bne.n	8001fa2 <dir_next+0x9a>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e044      	b.n	800202c <dir_next+0x124>
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d328      	bcc.n	8001ffe <dir_next+0xf6>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d104      	bne.n	8001fbc <dir_next+0xb4>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
 8001fb8:	2304      	movs	r3, #4
 8001fba:	e037      	b.n	800202c <dir_next+0x124>
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	f7ff fe0b 	bl	8001be0 <create_chain>
 8001fca:	6178      	str	r0, [r7, #20]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <dir_next+0xce>
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	e02a      	b.n	800202c <dir_next+0x124>
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <dir_next+0xd8>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e025      	b.n	800202c <dir_next+0x124>
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe6:	d101      	bne.n	8001fec <dir_next+0xe4>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e01f      	b.n	800202c <dir_next+0x124>
 8001fec:	6979      	ldr	r1, [r7, #20]
 8001fee:	6938      	ldr	r0, [r7, #16]
 8001ff0:	f7ff fec7 	bl	8001d82 <dir_clear>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <dir_next+0xf6>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e016      	b.n	800202c <dir_next+0x124>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	615a      	str	r2, [r3, #20]
 8002004:	6979      	ldr	r1, [r7, #20]
 8002006:	6938      	ldr	r0, [r7, #16]
 8002008:	f7ff fbda 	bl	80017c0 <clst2sect>
 800200c:	4602      	mov	r2, r0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	619a      	str	r2, [r3, #24]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	611a      	str	r2, [r3, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002024:	441a      	add	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	61da      	str	r2, [r3, #28]
 800202a:	2300      	movs	r3, #0
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <dir_alloc>:
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	2100      	movs	r1, #0
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fee3 	bl	8001e12 <dir_sdi>
 800204c:	4603      	mov	r3, r0
 800204e:	75fb      	strb	r3, [r7, #23]
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d12b      	bne.n	80020ae <dir_alloc+0x7a>
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	4619      	mov	r1, r3
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f7ff fb80 	bl	8001766 <move_window>
 8002066:	4603      	mov	r3, r0
 8002068:	75fb      	strb	r3, [r7, #23]
 800206a:	7dfb      	ldrb	r3, [r7, #23]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d11d      	bne.n	80020ac <dir_alloc+0x78>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2be5      	cmp	r3, #229	; 0xe5
 8002078:	d004      	beq.n	8002084 <dir_alloc+0x50>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <dir_alloc+0x60>
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	3301      	adds	r3, #1
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d102      	bne.n	8002098 <dir_alloc+0x64>
 8002092:	e00c      	b.n	80020ae <dir_alloc+0x7a>
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	2101      	movs	r1, #1
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ff34 	bl	8001f08 <dir_next>
 80020a0:	4603      	mov	r3, r0
 80020a2:	75fb      	strb	r3, [r7, #23]
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0d7      	beq.n	800205a <dir_alloc+0x26>
 80020aa:	e000      	b.n	80020ae <dir_alloc+0x7a>
 80020ac:	bf00      	nop
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d101      	bne.n	80020b8 <dir_alloc+0x84>
 80020b4:	2307      	movs	r3, #7
 80020b6:	75fb      	strb	r3, [r7, #23]
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <ld_clust>:
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	331a      	adds	r3, #26
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff f9c3 	bl	800145c <ld_word>
 80020d6:	4603      	mov	r3, r0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d109      	bne.n	80020f6 <ld_clust+0x34>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	3314      	adds	r3, #20
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff f9b8 	bl	800145c <ld_word>
 80020ec:	4603      	mov	r3, r0
 80020ee:	041b      	lsls	r3, r3, #16
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <st_clust>:
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	331a      	adds	r3, #26
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	b292      	uxth	r2, r2
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff f9db 	bl	80014d2 <st_word>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d109      	bne.n	8002138 <st_clust+0x38>
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f103 0214 	add.w	r2, r3, #20
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	0c1b      	lsrs	r3, r3, #16
 800212e:	b29b      	uxth	r3, r3
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f7ff f9cd 	bl	80014d2 <st_word>
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <dir_find>:
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	2100      	movs	r1, #0
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fe5e 	bl	8001e12 <dir_sdi>
 8002156:	4603      	mov	r3, r0
 8002158:	75fb      	strb	r3, [r7, #23]
 800215a:	7dfb      	ldrb	r3, [r7, #23]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <dir_find+0x24>
 8002160:	7dfb      	ldrb	r3, [r7, #23]
 8002162:	e03e      	b.n	80021e2 <dir_find+0xa2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4619      	mov	r1, r3
 800216a:	6938      	ldr	r0, [r7, #16]
 800216c:	f7ff fafb 	bl	8001766 <move_window>
 8002170:	4603      	mov	r3, r0
 8002172:	75fb      	strb	r3, [r7, #23]
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d12f      	bne.n	80021da <dir_find+0x9a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <dir_find+0x4e>
 8002188:	2304      	movs	r3, #4
 800218a:	75fb      	strb	r3, [r7, #23]
 800218c:	e028      	b.n	80021e0 <dir_find+0xa0>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	330b      	adds	r3, #11
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800219a:	b2da      	uxtb	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	719a      	strb	r2, [r3, #6]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	330b      	adds	r3, #11
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <dir_find+0x86>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69d8      	ldr	r0, [r3, #28]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3320      	adds	r3, #32
 80021b8:	220b      	movs	r2, #11
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7ff fa0b 	bl	80015d6 <mem_cmp>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <dir_find+0x9e>
 80021c6:	2100      	movs	r1, #0
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff fe9d 	bl	8001f08 <dir_next>
 80021ce:	4603      	mov	r3, r0
 80021d0:	75fb      	strb	r3, [r7, #23]
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0c5      	beq.n	8002164 <dir_find+0x24>
 80021d8:	e002      	b.n	80021e0 <dir_find+0xa0>
 80021da:	bf00      	nop
 80021dc:	e000      	b.n	80021e0 <dir_find+0xa0>
 80021de:	bf00      	nop
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <dir_register>:
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	2101      	movs	r1, #1
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ff1a 	bl	8002034 <dir_alloc>
 8002200:	4603      	mov	r3, r0
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d11c      	bne.n	8002244 <dir_register+0x5a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	4619      	mov	r1, r3
 8002210:	68b8      	ldr	r0, [r7, #8]
 8002212:	f7ff faa8 	bl	8001766 <move_window>
 8002216:	4603      	mov	r3, r0
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d111      	bne.n	8002244 <dir_register+0x5a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	2220      	movs	r2, #32
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f9ba 	bl	80015a2 <mem_set>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69d8      	ldr	r0, [r3, #28]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3320      	adds	r3, #32
 8002236:	220b      	movs	r2, #11
 8002238:	4619      	mov	r1, r3
 800223a:	f7ff f991 	bl	8001560 <mem_cpy>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2201      	movs	r2, #1
 8002242:	70da      	strb	r2, [r3, #3]
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <create_name>:
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3320      	adds	r3, #32
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	220b      	movs	r2, #11
 8002268:	2120      	movs	r1, #32
 800226a:	6938      	ldr	r0, [r7, #16]
 800226c:	f7ff f999 	bl	80015a2 <mem_set>
 8002270:	2300      	movs	r3, #0
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	2308      	movs	r3, #8
 800227a:	623b      	str	r3, [r7, #32]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	61fa      	str	r2, [r7, #28]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4413      	add	r3, r2
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800228c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002290:	2b20      	cmp	r3, #32
 8002292:	d97c      	bls.n	800238e <create_name+0x13e>
 8002294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002298:	2b2f      	cmp	r3, #47	; 0x2f
 800229a:	d007      	beq.n	80022ac <create_name+0x5c>
 800229c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022a0:	2b5c      	cmp	r3, #92	; 0x5c
 80022a2:	d110      	bne.n	80022c6 <create_name+0x76>
 80022a4:	e002      	b.n	80022ac <create_name+0x5c>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3301      	adds	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b2f      	cmp	r3, #47	; 0x2f
 80022b6:	d0f6      	beq.n	80022a6 <create_name+0x56>
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	4413      	add	r3, r2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b5c      	cmp	r3, #92	; 0x5c
 80022c2:	d0f0      	beq.n	80022a6 <create_name+0x56>
 80022c4:	e064      	b.n	8002390 <create_name+0x140>
 80022c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022ca:	2b2e      	cmp	r3, #46	; 0x2e
 80022cc:	d003      	beq.n	80022d6 <create_name+0x86>
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d30d      	bcc.n	80022f2 <create_name+0xa2>
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	2b0b      	cmp	r3, #11
 80022da:	d003      	beq.n	80022e4 <create_name+0x94>
 80022dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022e0:	2b2e      	cmp	r3, #46	; 0x2e
 80022e2:	d001      	beq.n	80022e8 <create_name+0x98>
 80022e4:	2306      	movs	r3, #6
 80022e6:	e06f      	b.n	80023c8 <create_name+0x178>
 80022e8:	2308      	movs	r3, #8
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	230b      	movs	r3, #11
 80022ee:	623b      	str	r3, [r7, #32]
 80022f0:	e04c      	b.n	800238c <create_name+0x13c>
 80022f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff f9af 	bl	800165a <dbc_1st>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d024      	beq.n	800234c <create_name+0xfc>
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	61fa      	str	r2, [r7, #28]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4413      	add	r3, r2
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff f9c1 	bl	800169a <dbc_2nd>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <create_name+0xd8>
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	3b01      	subs	r3, #1
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	429a      	cmp	r2, r3
 8002326:	d301      	bcc.n	800232c <create_name+0xdc>
 8002328:	2306      	movs	r3, #6
 800232a:	e04d      	b.n	80023c8 <create_name+0x178>
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	61ba      	str	r2, [r7, #24]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800233a:	701a      	strb	r2, [r3, #0]
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	61ba      	str	r2, [r7, #24]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	e797      	b.n	800227c <create_name+0x2c>
 800234c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002350:	4619      	mov	r1, r3
 8002352:	481f      	ldr	r0, [pc, #124]	; (80023d0 <create_name+0x180>)
 8002354:	f7ff f966 	bl	8001624 <chk_chr>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <create_name+0x112>
 800235e:	2306      	movs	r3, #6
 8002360:	e032      	b.n	80023c8 <create_name+0x178>
 8002362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002366:	2b60      	cmp	r3, #96	; 0x60
 8002368:	d908      	bls.n	800237c <create_name+0x12c>
 800236a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800236e:	2b7a      	cmp	r3, #122	; 0x7a
 8002370:	d804      	bhi.n	800237c <create_name+0x12c>
 8002372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002376:	3b20      	subs	r3, #32
 8002378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	61ba      	str	r2, [r7, #24]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800238a:	701a      	strb	r2, [r3, #0]
 800238c:	e776      	b.n	800227c <create_name+0x2c>
 800238e:	bf00      	nop
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	441a      	add	r2, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <create_name+0x154>
 80023a0:	2306      	movs	r3, #6
 80023a2:	e011      	b.n	80023c8 <create_name+0x178>
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2be5      	cmp	r3, #229	; 0xe5
 80023aa:	d102      	bne.n	80023b2 <create_name+0x162>
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2205      	movs	r2, #5
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d801      	bhi.n	80023be <create_name+0x16e>
 80023ba:	2204      	movs	r2, #4
 80023bc:	e000      	b.n	80023c0 <create_name+0x170>
 80023be:	2200      	movs	r2, #0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	330b      	adds	r3, #11
 80023c4:	701a      	strb	r2, [r3, #0]
 80023c6:	2300      	movs	r3, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	08007388 	.word	0x08007388

080023d4 <follow_path>:
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	e002      	b.n	80023ec <follow_path+0x18>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	3301      	adds	r3, #1
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b2f      	cmp	r3, #47	; 0x2f
 80023f2:	d0f8      	beq.n	80023e6 <follow_path+0x12>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b5c      	cmp	r3, #92	; 0x5c
 80023fa:	d0f4      	beq.n	80023e6 <follow_path+0x12>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b1f      	cmp	r3, #31
 8002408:	d80a      	bhi.n	8002420 <follow_path+0x4c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2280      	movs	r2, #128	; 0x80
 800240e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8002412:	2100      	movs	r1, #0
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff fcfc 	bl	8001e12 <dir_sdi>
 800241a:	4603      	mov	r3, r0
 800241c:	75fb      	strb	r3, [r7, #23]
 800241e:	e043      	b.n	80024a8 <follow_path+0xd4>
 8002420:	463b      	mov	r3, r7
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ff13 	bl	8002250 <create_name>
 800242a:	4603      	mov	r3, r0
 800242c:	75fb      	strb	r3, [r7, #23]
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d134      	bne.n	800249e <follow_path+0xca>
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff fe83 	bl	8002140 <dir_find>
 800243a:	4603      	mov	r3, r0
 800243c:	75fb      	strb	r3, [r7, #23]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <follow_path+0x8e>
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b04      	cmp	r3, #4
 8002450:	d127      	bne.n	80024a2 <follow_path+0xce>
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d122      	bne.n	80024a2 <follow_path+0xce>
 800245c:	2305      	movs	r3, #5
 800245e:	75fb      	strb	r3, [r7, #23]
 8002460:	e01f      	b.n	80024a2 <follow_path+0xce>
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d11c      	bne.n	80024a6 <follow_path+0xd2>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	799b      	ldrb	r3, [r3, #6]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <follow_path+0xaa>
 8002478:	2305      	movs	r3, #5
 800247a:	75fb      	strb	r3, [r7, #23]
 800247c:	e014      	b.n	80024a8 <follow_path+0xd4>
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248c:	4413      	add	r3, r2
 800248e:	4619      	mov	r1, r3
 8002490:	6938      	ldr	r0, [r7, #16]
 8002492:	f7ff fe16 	bl	80020c2 <ld_clust>
 8002496:	4602      	mov	r2, r0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	e7c0      	b.n	8002420 <follow_path+0x4c>
 800249e:	bf00      	nop
 80024a0:	e002      	b.n	80024a8 <follow_path+0xd4>
 80024a2:	bf00      	nop
 80024a4:	e000      	b.n	80024a8 <follow_path+0xd4>
 80024a6:	bf00      	nop
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <get_ldnumber>:
 80024b2:	b480      	push	{r7}
 80024b4:	b089      	sub	sp, #36	; 0x24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <get_ldnumber+0x22>
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	e02d      	b.n	8002530 <get_ldnumber+0x7e>
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	61fa      	str	r2, [r7, #28]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d902      	bls.n	80024ea <get_ldnumber+0x38>
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2b3a      	cmp	r3, #58	; 0x3a
 80024e8:	d1f4      	bne.n	80024d4 <get_ldnumber+0x22>
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	2b3a      	cmp	r3, #58	; 0x3a
 80024ee:	d11c      	bne.n	800252a <get_ldnumber+0x78>
 80024f0:	2301      	movs	r3, #1
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b2f      	cmp	r3, #47	; 0x2f
 80024fa:	d90c      	bls.n	8002516 <get_ldnumber+0x64>
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b39      	cmp	r3, #57	; 0x39
 8002502:	d808      	bhi.n	8002516 <get_ldnumber+0x64>
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	3302      	adds	r3, #2
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	429a      	cmp	r2, r3
 800250c:	d103      	bne.n	8002516 <get_ldnumber+0x64>
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	3b30      	subs	r3, #48	; 0x30
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	dc04      	bgt.n	8002526 <get_ldnumber+0x74>
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	e002      	b.n	8002530 <get_ldnumber+0x7e>
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	4618      	mov	r0, r3
 8002532:	3724      	adds	r7, #36	; 0x24
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <check_fs>:
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	70da      	strb	r2, [r3, #3]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f04f 32ff 	mov.w	r2, #4294967295
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c
 8002554:	6839      	ldr	r1, [r7, #0]
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff f905 	bl	8001766 <move_window>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <check_fs+0x2a>
 8002562:	2304      	movs	r3, #4
 8002564:	e038      	b.n	80025d8 <check_fs+0x9c>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3330      	adds	r3, #48	; 0x30
 800256a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe ff74 	bl	800145c <ld_word>
 8002574:	4603      	mov	r3, r0
 8002576:	461a      	mov	r2, r3
 8002578:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <check_fs+0x48>
 8002580:	2303      	movs	r3, #3
 8002582:	e029      	b.n	80025d8 <check_fs+0x9c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800258a:	2be9      	cmp	r3, #233	; 0xe9
 800258c:	d009      	beq.n	80025a2 <check_fs+0x66>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002594:	2beb      	cmp	r3, #235	; 0xeb
 8002596:	d004      	beq.n	80025a2 <check_fs+0x66>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800259e:	2be8      	cmp	r3, #232	; 0xe8
 80025a0:	d119      	bne.n	80025d6 <check_fs+0x9a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3330      	adds	r3, #48	; 0x30
 80025a6:	3336      	adds	r3, #54	; 0x36
 80025a8:	2203      	movs	r2, #3
 80025aa:	490d      	ldr	r1, [pc, #52]	; (80025e0 <check_fs+0xa4>)
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff f812 	bl	80015d6 <mem_cmp>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <check_fs+0x80>
 80025b8:	2300      	movs	r3, #0
 80025ba:	e00d      	b.n	80025d8 <check_fs+0x9c>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3330      	adds	r3, #48	; 0x30
 80025c0:	3352      	adds	r3, #82	; 0x52
 80025c2:	2205      	movs	r2, #5
 80025c4:	4907      	ldr	r1, [pc, #28]	; (80025e4 <check_fs+0xa8>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff f805 	bl	80015d6 <mem_cmp>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <check_fs+0x9a>
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <check_fs+0x9c>
 80025d6:	2302      	movs	r3, #2
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	08007398 	.word	0x08007398
 80025e4:	0800739c 	.word	0x0800739c

080025e8 <find_volume>:
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b096      	sub	sp, #88	; 0x58
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	4613      	mov	r3, r2
 80025f4:	71fb      	strb	r3, [r7, #7]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff ff58 	bl	80024b2 <get_ldnumber>
 8002602:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002606:	2b00      	cmp	r3, #0
 8002608:	da01      	bge.n	800260e <find_volume+0x26>
 800260a:	230b      	movs	r3, #11
 800260c:	e238      	b.n	8002a80 <find_volume+0x498>
 800260e:	4aa8      	ldr	r2, [pc, #672]	; (80028b0 <find_volume+0x2c8>)
 8002610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002616:	63bb      	str	r3, [r7, #56]	; 0x38
 8002618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <find_volume+0x3a>
 800261e:	230c      	movs	r3, #12
 8002620:	e22e      	b.n	8002a80 <find_volume+0x498>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	71fb      	strb	r3, [r7, #7]
 8002630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01a      	beq.n	800266e <find_volume+0x86>
 8002638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fdc1 	bl	80011c4 <disk_status>
 8002642:	4603      	mov	r3, r0
 8002644:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002648:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10c      	bne.n	800266e <find_volume+0x86>
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <find_volume+0x82>
 800265a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <find_volume+0x82>
 8002666:	230a      	movs	r3, #10
 8002668:	e20a      	b.n	8002a80 <find_volume+0x498>
 800266a:	2300      	movs	r3, #0
 800266c:	e208      	b.n	8002a80 <find_volume+0x498>
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002676:	b2da      	uxtb	r2, r3
 8002678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267a:	705a      	strb	r2, [r3, #1]
 800267c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267e:	785b      	ldrb	r3, [r3, #1]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fcb5 	bl	8000ff0 <disk_initialize>
 8002686:	4603      	mov	r3, r0
 8002688:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800268c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <find_volume+0xb4>
 8002698:	2303      	movs	r3, #3
 800269a:	e1f1      	b.n	8002a80 <find_volume+0x498>
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <find_volume+0xca>
 80026a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <find_volume+0xca>
 80026ae:	230a      	movs	r3, #10
 80026b0:	e1e6      	b.n	8002a80 <find_volume+0x498>
 80026b2:	2300      	movs	r3, #0
 80026b4:	653b      	str	r3, [r7, #80]	; 0x50
 80026b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80026b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026ba:	f7ff ff3f 	bl	800253c <check_fs>
 80026be:	4603      	mov	r3, r0
 80026c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80026c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d14b      	bne.n	8002764 <find_volume+0x17c>
 80026cc:	2300      	movs	r3, #0
 80026ce:	643b      	str	r3, [r7, #64]	; 0x40
 80026d0:	e01f      	b.n	8002712 <find_volume+0x12a>
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80026d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80026e0:	4413      	add	r3, r2
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	3304      	adds	r3, #4
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <find_volume+0x114>
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	3308      	adds	r3, #8
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe feca 	bl	800148c <ld_dword>
 80026f8:	4602      	mov	r2, r0
 80026fa:	e000      	b.n	80026fe <find_volume+0x116>
 80026fc:	2200      	movs	r2, #0
 80026fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002706:	440b      	add	r3, r1
 8002708:	f843 2c44 	str.w	r2, [r3, #-68]
 800270c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270e:	3301      	adds	r3, #1
 8002710:	643b      	str	r3, [r7, #64]	; 0x40
 8002712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002714:	2b03      	cmp	r3, #3
 8002716:	d9dc      	bls.n	80026d2 <find_volume+0xea>
 8002718:	2300      	movs	r3, #0
 800271a:	643b      	str	r3, [r7, #64]	; 0x40
 800271c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <find_volume+0x140>
 8002722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002724:	3b01      	subs	r3, #1
 8002726:	643b      	str	r3, [r7, #64]	; 0x40
 8002728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002730:	4413      	add	r3, r2
 8002732:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002736:	653b      	str	r3, [r7, #80]	; 0x50
 8002738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <find_volume+0x162>
 800273e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002740:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002742:	f7ff fefb 	bl	800253c <check_fs>
 8002746:	4603      	mov	r3, r0
 8002748:	e000      	b.n	800274c <find_volume+0x164>
 800274a:	2303      	movs	r3, #3
 800274c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002750:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002754:	2b01      	cmp	r3, #1
 8002756:	d905      	bls.n	8002764 <find_volume+0x17c>
 8002758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800275a:	3301      	adds	r3, #1
 800275c:	643b      	str	r3, [r7, #64]	; 0x40
 800275e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002760:	2b03      	cmp	r3, #3
 8002762:	d9e1      	bls.n	8002728 <find_volume+0x140>
 8002764:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002768:	2b04      	cmp	r3, #4
 800276a:	d101      	bne.n	8002770 <find_volume+0x188>
 800276c:	2301      	movs	r3, #1
 800276e:	e187      	b.n	8002a80 <find_volume+0x498>
 8002770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002774:	2b01      	cmp	r3, #1
 8002776:	d901      	bls.n	800277c <find_volume+0x194>
 8002778:	230d      	movs	r3, #13
 800277a:	e181      	b.n	8002a80 <find_volume+0x498>
 800277c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277e:	3330      	adds	r3, #48	; 0x30
 8002780:	330b      	adds	r3, #11
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fe6a 	bl	800145c <ld_word>
 8002788:	4603      	mov	r3, r0
 800278a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800278e:	d001      	beq.n	8002794 <find_volume+0x1ac>
 8002790:	230d      	movs	r3, #13
 8002792:	e175      	b.n	8002a80 <find_volume+0x498>
 8002794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002796:	3330      	adds	r3, #48	; 0x30
 8002798:	3316      	adds	r3, #22
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fe5e 	bl	800145c <ld_word>
 80027a0:	4603      	mov	r3, r0
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <find_volume+0x1d0>
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	3330      	adds	r3, #48	; 0x30
 80027ae:	3324      	adds	r3, #36	; 0x24
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fe6b 	bl	800148c <ld_dword>
 80027b6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80027b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027bc:	619a      	str	r2, [r3, #24]
 80027be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80027c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c6:	709a      	strb	r2, [r3, #2]
 80027c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ca:	789b      	ldrb	r3, [r3, #2]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d005      	beq.n	80027dc <find_volume+0x1f4>
 80027d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d2:	789b      	ldrb	r3, [r3, #2]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d001      	beq.n	80027dc <find_volume+0x1f4>
 80027d8:	230d      	movs	r3, #13
 80027da:	e151      	b.n	8002a80 <find_volume+0x498>
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	789b      	ldrb	r3, [r3, #2]
 80027e0:	461a      	mov	r2, r3
 80027e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	815a      	strh	r2, [r3, #10]
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f8:	895b      	ldrh	r3, [r3, #10]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <find_volume+0x228>
 80027fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002800:	895b      	ldrh	r3, [r3, #10]
 8002802:	461a      	mov	r2, r3
 8002804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002806:	895b      	ldrh	r3, [r3, #10]
 8002808:	3b01      	subs	r3, #1
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <find_volume+0x22c>
 8002810:	230d      	movs	r3, #13
 8002812:	e135      	b.n	8002a80 <find_volume+0x498>
 8002814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002816:	3330      	adds	r3, #48	; 0x30
 8002818:	3311      	adds	r3, #17
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fe1e 	bl	800145c <ld_word>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002826:	811a      	strh	r2, [r3, #8]
 8002828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282a:	891b      	ldrh	r3, [r3, #8]
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <find_volume+0x252>
 8002836:	230d      	movs	r3, #13
 8002838:	e122      	b.n	8002a80 <find_volume+0x498>
 800283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283c:	3330      	adds	r3, #48	; 0x30
 800283e:	3313      	adds	r3, #19
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fe0b 	bl	800145c <ld_word>
 8002846:	4603      	mov	r3, r0
 8002848:	64bb      	str	r3, [r7, #72]	; 0x48
 800284a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284c:	2b00      	cmp	r3, #0
 800284e:	d106      	bne.n	800285e <find_volume+0x276>
 8002850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002852:	3330      	adds	r3, #48	; 0x30
 8002854:	3320      	adds	r3, #32
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fe18 	bl	800148c <ld_dword>
 800285c:	64b8      	str	r0, [r7, #72]	; 0x48
 800285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002860:	3330      	adds	r3, #48	; 0x30
 8002862:	330e      	adds	r3, #14
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe fdf9 	bl	800145c <ld_word>
 800286a:	4603      	mov	r3, r0
 800286c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800286e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <find_volume+0x290>
 8002874:	230d      	movs	r3, #13
 8002876:	e103      	b.n	8002a80 <find_volume+0x498>
 8002878:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800287a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287c:	4413      	add	r3, r2
 800287e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002880:	8912      	ldrh	r2, [r2, #8]
 8002882:	0912      	lsrs	r2, r2, #4
 8002884:	b292      	uxth	r2, r2
 8002886:	4413      	add	r3, r2
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
 800288a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	429a      	cmp	r2, r3
 8002890:	d201      	bcs.n	8002896 <find_volume+0x2ae>
 8002892:	230d      	movs	r3, #13
 8002894:	e0f4      	b.n	8002a80 <find_volume+0x498>
 8002896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800289e:	8952      	ldrh	r2, [r2, #10]
 80028a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d103      	bne.n	80028b4 <find_volume+0x2cc>
 80028ac:	230d      	movs	r3, #13
 80028ae:	e0e7      	b.n	8002a80 <find_volume+0x498>
 80028b0:	2000008c 	.word	0x2000008c
 80028b4:	2300      	movs	r3, #0
 80028b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	4a72      	ldr	r2, [pc, #456]	; (8002a88 <find_volume+0x4a0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d802      	bhi.n	80028c8 <find_volume+0x2e0>
 80028c2:	2303      	movs	r3, #3
 80028c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d802      	bhi.n	80028d8 <find_volume+0x2f0>
 80028d2:	2302      	movs	r3, #2
 80028d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	f640 72f5 	movw	r2, #4085	; 0xff5
 80028de:	4293      	cmp	r3, r2
 80028e0:	d802      	bhi.n	80028e8 <find_volume+0x300>
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80028e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <find_volume+0x30c>
 80028f0:	230d      	movs	r3, #13
 80028f2:	e0c5      	b.n	8002a80 <find_volume+0x498>
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	1c9a      	adds	r2, r3, #2
 80028f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fa:	615a      	str	r2, [r3, #20]
 80028fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002900:	61da      	str	r2, [r3, #28]
 8002902:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002906:	441a      	add	r2, r3
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	621a      	str	r2, [r3, #32]
 800290c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	441a      	add	r2, r3
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	629a      	str	r2, [r3, #40]	; 0x28
 8002916:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800291a:	2b03      	cmp	r3, #3
 800291c:	d11e      	bne.n	800295c <find_volume+0x374>
 800291e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002920:	3330      	adds	r3, #48	; 0x30
 8002922:	332a      	adds	r3, #42	; 0x2a
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe fd99 	bl	800145c <ld_word>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <find_volume+0x34c>
 8002930:	230d      	movs	r3, #13
 8002932:	e0a5      	b.n	8002a80 <find_volume+0x498>
 8002934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002936:	891b      	ldrh	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <find_volume+0x358>
 800293c:	230d      	movs	r3, #13
 800293e:	e09f      	b.n	8002a80 <find_volume+0x498>
 8002940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002942:	3330      	adds	r3, #48	; 0x30
 8002944:	332c      	adds	r3, #44	; 0x2c
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fda0 	bl	800148c <ld_dword>
 800294c:	4602      	mov	r2, r0
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002950:	625a      	str	r2, [r3, #36]	; 0x24
 8002952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	647b      	str	r3, [r7, #68]	; 0x44
 800295a:	e01f      	b.n	800299c <find_volume+0x3b4>
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	891b      	ldrh	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <find_volume+0x380>
 8002964:	230d      	movs	r3, #13
 8002966:	e08b      	b.n	8002a80 <find_volume+0x498>
 8002968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296e:	441a      	add	r2, r3
 8002970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002972:	625a      	str	r2, [r3, #36]	; 0x24
 8002974:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002978:	2b02      	cmp	r3, #2
 800297a:	d103      	bne.n	8002984 <find_volume+0x39c>
 800297c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	e00a      	b.n	800299a <find_volume+0x3b2>
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	085a      	lsrs	r2, r3, #1
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	647b      	str	r3, [r7, #68]	; 0x44
 800299c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299e:	699a      	ldr	r2, [r3, #24]
 80029a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80029a6:	0a5b      	lsrs	r3, r3, #9
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d201      	bcs.n	80029b0 <find_volume+0x3c8>
 80029ac:	230d      	movs	r3, #13
 80029ae:	e067      	b.n	8002a80 <find_volume+0x498>
 80029b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b2:	f04f 32ff 	mov.w	r2, #4294967295
 80029b6:	611a      	str	r2, [r3, #16]
 80029b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	2280      	movs	r2, #128	; 0x80
 80029c4:	711a      	strb	r2, [r3, #4]
 80029c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d149      	bne.n	8002a62 <find_volume+0x47a>
 80029ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d0:	3330      	adds	r3, #48	; 0x30
 80029d2:	3330      	adds	r3, #48	; 0x30
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fd41 	bl	800145c <ld_word>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d140      	bne.n	8002a62 <find_volume+0x47a>
 80029e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e2:	3301      	adds	r3, #1
 80029e4:	4619      	mov	r1, r3
 80029e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80029e8:	f7fe febd 	bl	8001766 <move_window>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d137      	bne.n	8002a62 <find_volume+0x47a>
 80029f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f4:	2200      	movs	r2, #0
 80029f6:	711a      	strb	r2, [r3, #4]
 80029f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fa:	3330      	adds	r3, #48	; 0x30
 80029fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe fd2b 	bl	800145c <ld_word>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d127      	bne.n	8002a62 <find_volume+0x47a>
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	3330      	adds	r3, #48	; 0x30
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fd38 	bl	800148c <ld_dword>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <find_volume+0x4a4>)
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d11e      	bne.n	8002a62 <find_volume+0x47a>
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	3330      	adds	r3, #48	; 0x30
 8002a28:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe fd2d 	bl	800148c <ld_dword>
 8002a32:	4602      	mov	r2, r0
 8002a34:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <find_volume+0x4a8>)
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d113      	bne.n	8002a62 <find_volume+0x47a>
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3c:	3330      	adds	r3, #48	; 0x30
 8002a3e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fd22 	bl	800148c <ld_dword>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	611a      	str	r2, [r3, #16]
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a50:	3330      	adds	r3, #48	; 0x30
 8002a52:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fd18 	bl	800148c <ld_dword>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a64:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <find_volume+0x4ac>)
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <find_volume+0x4ac>)
 8002a74:	801a      	strh	r2, [r3, #0]
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <find_volume+0x4ac>)
 8002a78:	881a      	ldrh	r2, [r3, #0]
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7c:	80da      	strh	r2, [r3, #6]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	3758      	adds	r7, #88	; 0x58
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	0ffffff5 	.word	0x0ffffff5
 8002a8c:	41615252 	.word	0x41615252
 8002a90:	61417272 	.word	0x61417272
 8002a94:	20000090 	.word	0x20000090

08002a98 <validate>:
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	2309      	movs	r3, #9
 8002aa4:	73fb      	strb	r3, [r7, #15]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01c      	beq.n	8002ae6 <validate+0x4e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d018      	beq.n	8002ae6 <validate+0x4e>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d013      	beq.n	8002ae6 <validate+0x4e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	889a      	ldrh	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	88db      	ldrh	r3, [r3, #6]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d10c      	bne.n	8002ae6 <validate+0x4e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	785b      	ldrb	r3, [r3, #1]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fb76 	bl	80011c4 <disk_status>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <validate+0x4e>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <validate+0x5a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	e000      	b.n	8002af4 <validate+0x5c>
 8002af2:	2300      	movs	r3, #0
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <f_mount>:
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	71fb      	strb	r3, [r7, #7]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	f107 0310 	add.w	r3, r7, #16
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fcc9 	bl	80024b2 <get_ldnumber>
 8002b20:	61f8      	str	r0, [r7, #28]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	da01      	bge.n	8002b2c <f_mount+0x28>
 8002b28:	230b      	movs	r3, #11
 8002b2a:	e025      	b.n	8002b78 <f_mount+0x74>
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <f_mount+0x7c>)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <f_mount+0x3e>
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <f_mount+0x4a>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	490b      	ldr	r1, [pc, #44]	; (8002b80 <f_mount+0x7c>)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <f_mount+0x5e>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e00a      	b.n	8002b78 <f_mount+0x74>
 8002b62:	f107 010c 	add.w	r1, r7, #12
 8002b66:	f107 0308 	add.w	r3, r7, #8
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fd3b 	bl	80025e8 <find_volume>
 8002b72:	4603      	mov	r3, r0
 8002b74:	75fb      	strb	r3, [r7, #23]
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	2000008c 	.word	0x2000008c

08002b84 <f_open>:
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b099      	sub	sp, #100	; 0x64
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	71fb      	strb	r3, [r7, #7]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <f_open+0x18>
 8002b98:	2309      	movs	r3, #9
 8002b9a:	e172      	b.n	8002e82 <f_open+0x2fe>
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba2:	71fb      	strb	r3, [r7, #7]
 8002ba4:	79fa      	ldrb	r2, [r7, #7]
 8002ba6:	f107 0114 	add.w	r1, r7, #20
 8002baa:	f107 0308 	add.w	r3, r7, #8
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fd1a 	bl	80025e8 <find_volume>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002bba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 8156 	bne.w	8002e70 <f_open+0x2ec>
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	f107 0318 	add.w	r3, r7, #24
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fbff 	bl	80023d4 <follow_path>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002bdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d107      	bne.n	8002bf4 <f_open+0x70>
 8002be4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	da02      	bge.n	8002bf4 <f_open+0x70>
 8002bee:	2306      	movs	r3, #6
 8002bf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	f003 031c 	and.w	r3, r3, #28
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d073      	beq.n	8002ce6 <f_open+0x162>
 8002bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d010      	beq.n	8002c28 <f_open+0xa4>
 8002c06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d107      	bne.n	8002c1e <f_open+0x9a>
 8002c0e:	f107 0318 	add.w	r3, r7, #24
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fae9 	bl	80021ea <dir_register>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	f043 0308 	orr.w	r3, r3, #8
 8002c24:	71fb      	strb	r3, [r7, #7]
 8002c26:	e010      	b.n	8002c4a <f_open+0xc6>
 8002c28:	7fbb      	ldrb	r3, [r7, #30]
 8002c2a:	f003 0311 	and.w	r3, r3, #17
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <f_open+0xb6>
 8002c32:	2307      	movs	r3, #7
 8002c34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c38:	e007      	b.n	8002c4a <f_open+0xc6>
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <f_open+0xc6>
 8002c44:	2308      	movs	r3, #8
 8002c46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d163      	bne.n	8002d1a <f_open+0x196>
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d05e      	beq.n	8002d1a <f_open+0x196>
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fa2d 	bl	80020c2 <ld_clust>
 8002c68:	6538      	str	r0, [r7, #80]	; 0x50
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	f103 040e 	add.w	r4, r3, #14
 8002c70:	f7fe fbea 	bl	8001448 <get_fattime>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4619      	mov	r1, r3
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f7fe fc45 	bl	8001508 <st_dword>
 8002c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c80:	330b      	adds	r3, #11
 8002c82:	2220      	movs	r2, #32
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fa37 	bl	8002100 <st_clust>
 8002c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c94:	331c      	adds	r3, #28
 8002c96:	2100      	movs	r1, #0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe fc35 	bl	8001508 <st_dword>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	70da      	strb	r2, [r3, #3]
 8002ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d037      	beq.n	8002d1a <f_open+0x196>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cb0:	f107 0318 	add.w	r3, r7, #24
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe ff2c 	bl	8001b16 <remove_chain>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002cc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d126      	bne.n	8002d1a <f_open+0x196>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe fd48 	bl	8001766 <move_window>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ce0:	3a01      	subs	r2, #1
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	e019      	b.n	8002d1a <f_open+0x196>
 8002ce6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d115      	bne.n	8002d1a <f_open+0x196>
 8002cee:	7fbb      	ldrb	r3, [r7, #30]
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <f_open+0x17c>
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002cfe:	e00c      	b.n	8002d1a <f_open+0x196>
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <f_open+0x196>
 8002d0a:	7fbb      	ldrb	r3, [r7, #30]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <f_open+0x196>
 8002d14:	2307      	movs	r3, #7
 8002d16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002d1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10f      	bne.n	8002d42 <f_open+0x1be>
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <f_open+0x1b0>
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d32:	71fb      	strb	r3, [r7, #7]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	621a      	str	r2, [r3, #32]
 8002d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
 8002d42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f040 8092 	bne.w	8002e70 <f_open+0x2ec>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f9b5 	bl	80020c2 <ld_clust>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d60:	331c      	adds	r3, #28
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fb92 	bl	800148c <ld_dword>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	88da      	ldrh	r2, [r3, #6]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	809a      	strh	r2, [r3, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	79fa      	ldrb	r2, [r7, #7]
 8002d80:	741a      	strb	r2, [r3, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	745a      	strb	r2, [r3, #17]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	61da      	str	r2, [r3, #28]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	615a      	str	r2, [r3, #20]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3328      	adds	r3, #40	; 0x28
 8002d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fbff 	bl	80015a2 <mem_set>
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d060      	beq.n	8002e70 <f_open+0x2ec>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d05c      	beq.n	8002e70 <f_open+0x2ec>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	615a      	str	r2, [r3, #20]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	895b      	ldrh	r3, [r3, #10]
 8002dc2:	025b      	lsls	r3, r3, #9
 8002dc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	657b      	str	r3, [r7, #84]	; 0x54
 8002dd2:	e016      	b.n	8002e02 <f_open+0x27e>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fd10 	bl	80017fe <get_fat>
 8002dde:	65b8      	str	r0, [r7, #88]	; 0x58
 8002de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d802      	bhi.n	8002dec <f_open+0x268>
 8002de6:	2302      	movs	r3, #2
 8002de8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002dec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d102      	bne.n	8002dfa <f_open+0x276>
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002dfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	657b      	str	r3, [r7, #84]	; 0x54
 8002e02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d103      	bne.n	8002e12 <f_open+0x28e>
 8002e0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d8e0      	bhi.n	8002dd4 <f_open+0x250>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e16:	619a      	str	r2, [r3, #24]
 8002e18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d127      	bne.n	8002e70 <f_open+0x2ec>
 8002e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d022      	beq.n	8002e70 <f_open+0x2ec>
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fcc6 	bl	80017c0 <clst2sect>
 8002e34:	6478      	str	r0, [r7, #68]	; 0x44
 8002e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d103      	bne.n	8002e44 <f_open+0x2c0>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002e42:	e015      	b.n	8002e70 <f_open+0x2ec>
 8002e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e46:	0a5a      	lsrs	r2, r3, #9
 8002e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4a:	441a      	add	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	61da      	str	r2, [r3, #28]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	7858      	ldrb	r0, [r3, #1]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	69da      	ldr	r2, [r3, #28]
 8002e5e:	2301      	movs	r3, #1
 8002e60:	f7fe f9c6 	bl	80011f0 <disk_read>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <f_open+0x2ec>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002e70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <f_open+0x2fa>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002e82:	4618      	mov	r0, r3
 8002e84:	3764      	adds	r7, #100	; 0x64
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd90      	pop	{r4, r7, pc}

08002e8a <f_read>:
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b08e      	sub	sp, #56	; 0x38
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f107 0214 	add.w	r2, r7, #20
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fdf4 	bl	8002a98 <validate>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002eb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d107      	bne.n	8002ece <f_read+0x44>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	7c5b      	ldrb	r3, [r3, #17]
 8002ec2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002ec6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <f_read+0x4a>
 8002ece:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ed2:	e109      	b.n	80030e8 <f_read+0x25e>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	7c1b      	ldrb	r3, [r3, #16]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <f_read+0x5a>
 8002ee0:	2307      	movs	r3, #7
 8002ee2:	e101      	b.n	80030e8 <f_read+0x25e>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	623b      	str	r3, [r7, #32]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	f240 80f2 	bls.w	80030de <f_read+0x254>
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	e0ee      	b.n	80030de <f_read+0x254>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f040 80ba 	bne.w	8003082 <f_read+0x1f8>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	0a5b      	lsrs	r3, r3, #9
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	8952      	ldrh	r2, [r2, #10]
 8002f18:	3a01      	subs	r2, #1
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d123      	bne.n	8002f6c <f_read+0xe2>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d103      	bne.n	8002f34 <f_read+0xaa>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	633b      	str	r3, [r7, #48]	; 0x30
 8002f32:	e007      	b.n	8002f44 <f_read+0xba>
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	f7fe fc5e 	bl	80017fe <get_fat>
 8002f42:	6338      	str	r0, [r7, #48]	; 0x30
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d804      	bhi.n	8002f54 <f_read+0xca>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	745a      	strb	r2, [r3, #17]
 8002f50:	2302      	movs	r3, #2
 8002f52:	e0c9      	b.n	80030e8 <f_read+0x25e>
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d104      	bne.n	8002f66 <f_read+0xdc>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	745a      	strb	r2, [r3, #17]
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0c0      	b.n	80030e8 <f_read+0x25e>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6a:	619a      	str	r2, [r3, #24]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	4619      	mov	r1, r3
 8002f74:	4610      	mov	r0, r2
 8002f76:	f7fe fc23 	bl	80017c0 <clst2sect>
 8002f7a:	61b8      	str	r0, [r7, #24]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d104      	bne.n	8002f8c <f_read+0x102>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2202      	movs	r2, #2
 8002f86:	745a      	strb	r2, [r3, #17]
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e0ad      	b.n	80030e8 <f_read+0x25e>
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	4413      	add	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	0a5b      	lsrs	r3, r3, #9
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d039      	beq.n	8003014 <f_read+0x18a>
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	4413      	add	r3, r2
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	8952      	ldrh	r2, [r2, #10]
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d905      	bls.n	8002fba <f_read+0x130>
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	895b      	ldrh	r3, [r3, #10]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	7858      	ldrb	r0, [r3, #1]
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fc4:	f7fe f914 	bl	80011f0 <disk_read>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d004      	beq.n	8002fd8 <f_read+0x14e>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	745a      	strb	r2, [r3, #17]
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e087      	b.n	80030e8 <f_read+0x25e>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	7c1b      	ldrb	r3, [r3, #16]
 8002fdc:	b25b      	sxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	da14      	bge.n	800300c <f_read+0x182>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d90d      	bls.n	800300c <f_read+0x182>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	025b      	lsls	r3, r3, #9
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffc:	18d0      	adds	r0, r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3328      	adds	r3, #40	; 0x28
 8003002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003006:	4619      	mov	r1, r3
 8003008:	f7fe faaa 	bl	8001560 <mem_cpy>
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	025b      	lsls	r3, r3, #9
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003012:	e050      	b.n	80030b6 <f_read+0x22c>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	429a      	cmp	r2, r3
 800301c:	d02e      	beq.n	800307c <f_read+0x1f2>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	7c1b      	ldrb	r3, [r3, #16]
 8003022:	b25b      	sxtb	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	da18      	bge.n	800305a <f_read+0x1d0>
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	7858      	ldrb	r0, [r3, #1]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	2301      	movs	r3, #1
 8003038:	f7fe f944 	bl	80012c4 <disk_write>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d004      	beq.n	800304c <f_read+0x1c2>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	745a      	strb	r2, [r3, #17]
 8003048:	2301      	movs	r3, #1
 800304a:	e04d      	b.n	80030e8 <f_read+0x25e>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	7c1b      	ldrb	r3, [r3, #16]
 8003050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	741a      	strb	r2, [r3, #16]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	7858      	ldrb	r0, [r3, #1]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003064:	2301      	movs	r3, #1
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	f7fe f8c2 	bl	80011f0 <disk_read>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d004      	beq.n	800307c <f_read+0x1f2>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	745a      	strb	r2, [r3, #17]
 8003078:	2301      	movs	r3, #1
 800307a:	e035      	b.n	80030e8 <f_read+0x25e>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	61da      	str	r2, [r3, #28]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	d901      	bls.n	800309c <f_read+0x212>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030aa:	4413      	add	r3, r2
 80030ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ae:	4619      	mov	r1, r3
 80030b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030b2:	f7fe fa55 	bl	8001560 <mem_cpy>
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c4:	441a      	add	r2, r3
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	4413      	add	r3, r2
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	441a      	add	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	615a      	str	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f47f af0d 	bne.w	8002f00 <f_read+0x76>
 80030e6:	2300      	movs	r3, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	3738      	adds	r7, #56	; 0x38
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_ADC_ConvCpltCallback>:
static void MX_USART3_UART_Init(void);
static void MX_TIM6_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]


		  		  value = HAL_ADC_GetValue(&hadc1);
 80030f8:	4851      	ldr	r0, [pc, #324]	; (8003240 <HAL_ADC_ConvCpltCallback+0x150>)
 80030fa:	f001 f9dc 	bl	80044b6 <HAL_ADC_GetValue>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	4b50      	ldr	r3, [pc, #320]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 8003104:	601a      	str	r2, [r3, #0]

//za pierwszym ustawieniem potencjometru działa ale potem się nie zmienia
		  	  if(value>0 && value <= 410) indeks_glosnosci = 0;
 8003106:	4b4f      	ldr	r3, [pc, #316]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	dd08      	ble.n	8003120 <HAL_ADC_ConvCpltCallback+0x30>
 800310e:	4b4d      	ldr	r3, [pc, #308]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8003116:	dc03      	bgt.n	8003120 <HAL_ADC_ConvCpltCallback+0x30>
 8003118:	4b4b      	ldr	r3, [pc, #300]	; (8003248 <HAL_ADC_ConvCpltCallback+0x158>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e088      	b.n	8003232 <HAL_ADC_ConvCpltCallback+0x142>
		  	  else if(value>410 && value <= 819) indeks_glosnosci = 1;
 8003120:	4b48      	ldr	r3, [pc, #288]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8003128:	dd08      	ble.n	800313c <HAL_ADC_ConvCpltCallback+0x4c>
 800312a:	4b46      	ldr	r3, [pc, #280]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003132:	da03      	bge.n	800313c <HAL_ADC_ConvCpltCallback+0x4c>
 8003134:	4b44      	ldr	r3, [pc, #272]	; (8003248 <HAL_ADC_ConvCpltCallback+0x158>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e07a      	b.n	8003232 <HAL_ADC_ConvCpltCallback+0x142>
		  	  else if(value>819 && value <= 1228) indeks_glosnosci = 2;
 800313c:	4b41      	ldr	r3, [pc, #260]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003144:	db09      	blt.n	800315a <HAL_ADC_ConvCpltCallback+0x6a>
 8003146:	4b3f      	ldr	r3, [pc, #252]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800314e:	4293      	cmp	r3, r2
 8003150:	dc03      	bgt.n	800315a <HAL_ADC_ConvCpltCallback+0x6a>
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_ADC_ConvCpltCallback+0x158>)
 8003154:	2202      	movs	r2, #2
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	e06b      	b.n	8003232 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>1228 && value <= 1647) indeks_glosnosci = 3;
 800315a:	4b3a      	ldr	r3, [pc, #232]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8003162:	4293      	cmp	r3, r2
 8003164:	dd08      	ble.n	8003178 <HAL_ADC_ConvCpltCallback+0x88>
 8003166:	4b37      	ldr	r3, [pc, #220]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 800316e:	da03      	bge.n	8003178 <HAL_ADC_ConvCpltCallback+0x88>
 8003170:	4b35      	ldr	r3, [pc, #212]	; (8003248 <HAL_ADC_ConvCpltCallback+0x158>)
 8003172:	2203      	movs	r2, #3
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e05c      	b.n	8003232 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>1647 && value <= 2058) indeks_glosnosci = 4;
 8003178:	4b32      	ldr	r3, [pc, #200]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8003180:	db09      	blt.n	8003196 <HAL_ADC_ConvCpltCallback+0xa6>
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f640 020a 	movw	r2, #2058	; 0x80a
 800318a:	4293      	cmp	r3, r2
 800318c:	dc03      	bgt.n	8003196 <HAL_ADC_ConvCpltCallback+0xa6>
 800318e:	4b2e      	ldr	r3, [pc, #184]	; (8003248 <HAL_ADC_ConvCpltCallback+0x158>)
 8003190:	2204      	movs	r2, #4
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	e04d      	b.n	8003232 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2058 && value <= 2467) indeks_glosnosci = 5;
 8003196:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f640 020a 	movw	r2, #2058	; 0x80a
 800319e:	4293      	cmp	r3, r2
 80031a0:	dd09      	ble.n	80031b6 <HAL_ADC_ConvCpltCallback+0xc6>
 80031a2:	4b28      	ldr	r3, [pc, #160]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f640 12a3 	movw	r2, #2467	; 0x9a3
 80031aa:	4293      	cmp	r3, r2
 80031ac:	dc03      	bgt.n	80031b6 <HAL_ADC_ConvCpltCallback+0xc6>
 80031ae:	4b26      	ldr	r3, [pc, #152]	; (8003248 <HAL_ADC_ConvCpltCallback+0x158>)
 80031b0:	2205      	movs	r2, #5
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e03d      	b.n	8003232 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2467 && value <= 2876) indeks_glosnosci = 6;
 80031b6:	4b23      	ldr	r3, [pc, #140]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f640 12a3 	movw	r2, #2467	; 0x9a3
 80031be:	4293      	cmp	r3, r2
 80031c0:	dd09      	ble.n	80031d6 <HAL_ADC_ConvCpltCallback+0xe6>
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f640 323c 	movw	r2, #2876	; 0xb3c
 80031ca:	4293      	cmp	r3, r2
 80031cc:	dc03      	bgt.n	80031d6 <HAL_ADC_ConvCpltCallback+0xe6>
 80031ce:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <HAL_ADC_ConvCpltCallback+0x158>)
 80031d0:	2206      	movs	r2, #6
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e02d      	b.n	8003232 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2876 && value <= 3285) indeks_glosnosci = 7;
 80031d6:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f640 323c 	movw	r2, #2876	; 0xb3c
 80031de:	4293      	cmp	r3, r2
 80031e0:	dd09      	ble.n	80031f6 <HAL_ADC_ConvCpltCallback+0x106>
 80031e2:	4b18      	ldr	r3, [pc, #96]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f640 42d5 	movw	r2, #3285	; 0xcd5
 80031ea:	4293      	cmp	r3, r2
 80031ec:	dc03      	bgt.n	80031f6 <HAL_ADC_ConvCpltCallback+0x106>
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_ADC_ConvCpltCallback+0x158>)
 80031f0:	2207      	movs	r2, #7
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e01d      	b.n	8003232 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>3285 && value <= 3692) indeks_glosnosci = 8;
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f640 42d5 	movw	r2, #3285	; 0xcd5
 80031fe:	4293      	cmp	r3, r2
 8003200:	dd09      	ble.n	8003216 <HAL_ADC_ConvCpltCallback+0x126>
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f640 626c 	movw	r2, #3692	; 0xe6c
 800320a:	4293      	cmp	r3, r2
 800320c:	dc03      	bgt.n	8003216 <HAL_ADC_ConvCpltCallback+0x126>
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <HAL_ADC_ConvCpltCallback+0x158>)
 8003210:	2208      	movs	r2, #8
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e00d      	b.n	8003232 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>3692 && value <= 4095) indeks_glosnosci = 9;
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f640 626c 	movw	r2, #3692	; 0xe6c
 800321e:	4293      	cmp	r3, r2
 8003220:	dd07      	ble.n	8003232 <HAL_ADC_ConvCpltCallback+0x142>
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <HAL_ADC_ConvCpltCallback+0x154>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322a:	da02      	bge.n	8003232 <HAL_ADC_ConvCpltCallback+0x142>
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_ADC_ConvCpltCallback+0x158>)
 800322e:	2209      	movs	r2, #9
 8003230:	601a      	str	r2, [r3, #0]
		  	HAL_ADC_Start_IT(&hadc1);
 8003232:	4803      	ldr	r0, [pc, #12]	; (8003240 <HAL_ADC_ConvCpltCallback+0x150>)
 8003234:	f000 ff2e 	bl	8004094 <HAL_ADC_Start_IT>
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	200005e8 	.word	0x200005e8
 8003244:	200002c8 	.word	0x200002c8
 8003248:	200002c4 	.word	0x200002c4

0800324c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	80fb      	strh	r3, [r7, #6]

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET){
 8003256:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800325a:	4831      	ldr	r0, [pc, #196]	; (8003320 <HAL_GPIO_EXTI_Callback+0xd4>)
 800325c:	f001 ff3c 	bl	80050d8 <HAL_GPIO_ReadPin>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10c      	bne.n	8003280 <HAL_GPIO_EXTI_Callback+0x34>

		 //ciszej

		 if(indeks_glosnosci>0 && indeks_glosnosci<=9) indeks_glosnosci--;
 8003266:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	dd08      	ble.n	8003280 <HAL_GPIO_EXTI_Callback+0x34>
 800326e:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b09      	cmp	r3, #9
 8003274:	dc04      	bgt.n	8003280 <HAL_GPIO_EXTI_Callback+0x34>
 8003276:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3b01      	subs	r3, #1
 800327c:	4a29      	ldr	r2, [pc, #164]	; (8003324 <HAL_GPIO_EXTI_Callback+0xd8>)
 800327e:	6013      	str	r3, [r2, #0]

		  	}

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 8003280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003284:	4826      	ldr	r0, [pc, #152]	; (8003320 <HAL_GPIO_EXTI_Callback+0xd4>)
 8003286:	f001 ff27 	bl	80050d8 <HAL_GPIO_ReadPin>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <HAL_GPIO_EXTI_Callback+0x4e>
			  		//prev song
			  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8003290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003294:	4824      	ldr	r0, [pc, #144]	; (8003328 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003296:	f001 ff50 	bl	800513a <HAL_GPIO_TogglePin>

			}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 800329a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800329e:	4820      	ldr	r0, [pc, #128]	; (8003320 <HAL_GPIO_EXTI_Callback+0xd4>)
 80032a0:	f001 ff1a 	bl	80050d8 <HAL_GPIO_ReadPin>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d110      	bne.n	80032cc <HAL_GPIO_EXTI_Callback+0x80>

		 //pause/start
		 //na razie tylko startuje
		 if(stan==1){
 80032aa:	4b20      	ldr	r3, [pc, #128]	; (800332c <HAL_GPIO_EXTI_Callback+0xe0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d106      	bne.n	80032c0 <HAL_GPIO_EXTI_Callback+0x74>

		 HAL_TIM_Base_Start_IT(&htim4);
 80032b2:	481f      	ldr	r0, [pc, #124]	; (8003330 <HAL_GPIO_EXTI_Callback+0xe4>)
 80032b4:	f002 ffdd 	bl	8006272 <HAL_TIM_Base_Start_IT>
		 stan = 0;
 80032b8:	4b1c      	ldr	r3, [pc, #112]	; (800332c <HAL_GPIO_EXTI_Callback+0xe0>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e005      	b.n	80032cc <HAL_GPIO_EXTI_Callback+0x80>
		 }
		 else
		 {
			 HAL_TIM_Base_Stop_IT(&htim4);
 80032c0:	481b      	ldr	r0, [pc, #108]	; (8003330 <HAL_GPIO_EXTI_Callback+0xe4>)
 80032c2:	f002 fffa 	bl	80062ba <HAL_TIM_Base_Stop_IT>
			 stan=1;
 80032c6:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_GPIO_EXTI_Callback+0xe0>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	601a      	str	r2, [r3, #0]
		 }

	 		}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET){
 80032cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032d0:	4813      	ldr	r0, [pc, #76]	; (8003320 <HAL_GPIO_EXTI_Callback+0xd4>)
 80032d2:	f001 ff01 	bl	80050d8 <HAL_GPIO_ReadPin>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d104      	bne.n	80032e6 <HAL_GPIO_EXTI_Callback+0x9a>
		 //volume up
		 		 	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80032dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032e0:	4811      	ldr	r0, [pc, #68]	; (8003328 <HAL_GPIO_EXTI_Callback+0xdc>)
 80032e2:	f001 ff2a 	bl	800513a <HAL_GPIO_TogglePin>

		 	}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 80032e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032ea:	480d      	ldr	r0, [pc, #52]	; (8003320 <HAL_GPIO_EXTI_Callback+0xd4>)
 80032ec:	f001 fef4 	bl	80050d8 <HAL_GPIO_ReadPin>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10c      	bne.n	8003310 <HAL_GPIO_EXTI_Callback+0xc4>

		 //glosniej

		 if(indeks_glosnosci>=0 && indeks_glosnosci<9)
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_GPIO_EXTI_Callback+0xd8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	db08      	blt.n	8003310 <HAL_GPIO_EXTI_Callback+0xc4>
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b08      	cmp	r3, #8
 8003304:	dc04      	bgt.n	8003310 <HAL_GPIO_EXTI_Callback+0xc4>
			 indeks_glosnosci++;
 8003306:	4b07      	ldr	r3, [pc, #28]	; (8003324 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3301      	adds	r3, #1
 800330c:	4a05      	ldr	r2, [pc, #20]	; (8003324 <HAL_GPIO_EXTI_Callback+0xd8>)
 800330e:	6013      	str	r3, [r2, #0]
			 	}
	 HAL_Delay(200);
 8003310:	20c8      	movs	r0, #200	; 0xc8
 8003312:	f000 fe59 	bl	8003fc8 <HAL_Delay>

}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40020400 	.word	0x40020400
 8003324:	200002c4 	.word	0x200002c4
 8003328:	40020c00 	.word	0x40020c00
 800332c:	200002cc 	.word	0x200002cc
 8003330:	200002e8 	.word	0x200002e8

08003334 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
if(htim->Instance == TIM4)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a45      	ldr	r2, [pc, #276]	; (8003458 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003342:	4293      	cmp	r3, r2
 8003344:	f040 8084 	bne.w	8003450 <HAL_TIM_PeriodElapsedCallback+0x11c>
{
	if(j==-1){
 8003348:	4b44      	ldr	r3, [pc, #272]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d12b      	bne.n	80033aa <HAL_TIM_PeriodElapsedCallback+0x76>
			HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,buf[i]*glosnosc_guziczki[indeks_glosnosci]);
 8003352:	4b43      	ldr	r3, [pc, #268]	; (8003460 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a43      	ldr	r2, [pc, #268]	; (8003464 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003358:	5cd3      	ldrb	r3, [r2, r3]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd f886 	bl	800046c <__aeabi_i2d>
 8003360:	4b41      	ldr	r3, [pc, #260]	; (8003468 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a41      	ldr	r2, [pc, #260]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800336e:	461a      	mov	r2, r3
 8003370:	4623      	mov	r3, r4
 8003372:	f7fd f8e5 	bl	8000540 <__aeabi_dmul>
 8003376:	4603      	mov	r3, r0
 8003378:	460c      	mov	r4, r1
 800337a:	4618      	mov	r0, r3
 800337c:	4621      	mov	r1, r4
 800337e:	f7fd faf1 	bl	8000964 <__aeabi_d2uiz>
 8003382:	4603      	mov	r3, r0
 8003384:	2200      	movs	r2, #0
 8003386:	2100      	movs	r1, #0
 8003388:	4839      	ldr	r0, [pc, #228]	; (8003470 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800338a:	f001 fcc3 	bl	8004d14 <HAL_DAC_SetValue>
			i++;
 800338e:	4b34      	ldr	r3, [pc, #208]	; (8003460 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3301      	adds	r3, #1
 8003394:	4a32      	ldr	r2, [pc, #200]	; (8003460 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003396:	6013      	str	r3, [r2, #0]
			if(i==10000)j=0;
 8003398:	4b31      	ldr	r3, [pc, #196]	; (8003460 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f242 7210 	movw	r2, #10000	; 0x2710
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d102      	bne.n	80033aa <HAL_TIM_PeriodElapsedCallback+0x76>
 80033a4:	4b2d      	ldr	r3, [pc, #180]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
		}
	if(i==10000){
 80033aa:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d10a      	bne.n	80033cc <HAL_TIM_PeriodElapsedCallback+0x98>
		i=-1;
 80033b6:	4b2a      	ldr	r3, [pc, #168]	; (8003460 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80033b8:	f04f 32ff 	mov.w	r2, #4294967295
 80033bc:	601a      	str	r2, [r3, #0]
		f_read(&file, buf, 10000, &bytes_read);
 80033be:	4b2d      	ldr	r3, [pc, #180]	; (8003474 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80033c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80033c4:	4927      	ldr	r1, [pc, #156]	; (8003464 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80033c6:	482c      	ldr	r0, [pc, #176]	; (8003478 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80033c8:	f7ff fd5f 	bl	8002e8a <f_read>
	}
	if(i==-1){
 80033cc:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d12b      	bne.n	800342e <HAL_TIM_PeriodElapsedCallback+0xfa>
		HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,buf2[j]*glosnosc_guziczki[indeks_glosnosci]);
 80033d6:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a28      	ldr	r2, [pc, #160]	; (800347c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80033dc:	5cd3      	ldrb	r3, [r2, r3]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd f844 	bl	800046c <__aeabi_i2d>
 80033e4:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a20      	ldr	r2, [pc, #128]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033f2:	461a      	mov	r2, r3
 80033f4:	4623      	mov	r3, r4
 80033f6:	f7fd f8a3 	bl	8000540 <__aeabi_dmul>
 80033fa:	4603      	mov	r3, r0
 80033fc:	460c      	mov	r4, r1
 80033fe:	4618      	mov	r0, r3
 8003400:	4621      	mov	r1, r4
 8003402:	f7fd faaf 	bl	8000964 <__aeabi_d2uiz>
 8003406:	4603      	mov	r3, r0
 8003408:	2200      	movs	r2, #0
 800340a:	2100      	movs	r1, #0
 800340c:	4818      	ldr	r0, [pc, #96]	; (8003470 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800340e:	f001 fc81 	bl	8004d14 <HAL_DAC_SetValue>
		j++;
 8003412:	4b12      	ldr	r3, [pc, #72]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3301      	adds	r3, #1
 8003418:	4a10      	ldr	r2, [pc, #64]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800341a:	6013      	str	r3, [r2, #0]
		if(j==10000)i=0;
 800341c:	4b0f      	ldr	r3, [pc, #60]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f242 7210 	movw	r2, #10000	; 0x2710
 8003424:	4293      	cmp	r3, r2
 8003426:	d102      	bne.n	800342e <HAL_TIM_PeriodElapsedCallback+0xfa>
 8003428:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
	}
	if(j==10000){
 800342e:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f242 7210 	movw	r2, #10000	; 0x2710
 8003436:	4293      	cmp	r3, r2
 8003438:	d10a      	bne.n	8003450 <HAL_TIM_PeriodElapsedCallback+0x11c>
		j=-1;
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x128>)
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	601a      	str	r2, [r3, #0]
		f_read(&file, buf2,10000, &bytes_read);
 8003442:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003444:	f242 7210 	movw	r2, #10000	; 0x2710
 8003448:	490c      	ldr	r1, [pc, #48]	; (800347c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800344a:	480b      	ldr	r0, [pc, #44]	; (8003478 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800344c:	f7ff fd1d 	bl	8002e8a <f_read>

	//Utwór testowy 1
	//HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,rawAudio[i]*glosnosc_guziczki[indeks_glosnosci]);
	//i++;
}
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bd90      	pop	{r4, r7, pc}
 8003458:	40000800 	.word	0x40000800
 800345c:	20000008 	.word	0x20000008
 8003460:	20000004 	.word	0x20000004
 8003464:	20002e9c 	.word	0x20002e9c
 8003468:	200002c4 	.word	0x200002c4
 800346c:	20000010 	.word	0x20000010
 8003470:	20002d44 	.word	0x20002d44
 8003474:	20000630 	.word	0x20000630
 8003478:	200003c0 	.word	0x200003c0
 800347c:	20000634 	.word	0x20000634

08003480 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
	{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
			{

			// tutaj umieszczamy kod wykonywany w zależności od odebranej inf

			}
	}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003498:	f000 fd24 	bl	8003ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800349c:	f000 f84a 	bl	8003534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034a0:	f000 fa10 	bl	80038c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80034a4:	f000 f8b0 	bl	8003608 <MX_ADC1_Init>
  MX_DAC_Init();
 80034a8:	f000 f900 	bl	80036ac <MX_DAC_Init>
  MX_SPI3_Init();
 80034ac:	f000 f928 	bl	8003700 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 80034b0:	f000 f9de 	bl	8003870 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80034b4:	f000 f9a8 	bl	8003808 <MX_TIM6_Init>
  MX_TIM4_Init();
 80034b8:	f000 f958 	bl	800376c <MX_TIM4_Init>
         strcpy(buff, "/");
         res = scan_files(buff);
     }

*/
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 80034bc:	2100      	movs	r1, #0
 80034be:	4813      	ldr	r0, [pc, #76]	; (800350c <main+0x78>)
 80034c0:	f001 fb75 	bl	8004bae <HAL_DAC_Start>
  HAL_ADC_Start_IT(&hadc1);
 80034c4:	4812      	ldr	r0, [pc, #72]	; (8003510 <main+0x7c>)
 80034c6:	f000 fde5 	bl	8004094 <HAL_ADC_Start_IT>

  fresult = f_mount(&FatFs, "", 1);
 80034ca:	2201      	movs	r2, #1
 80034cc:	4911      	ldr	r1, [pc, #68]	; (8003514 <main+0x80>)
 80034ce:	4812      	ldr	r0, [pc, #72]	; (8003518 <main+0x84>)
 80034d0:	f7ff fb18 	bl	8002b04 <f_mount>
 80034d4:	4603      	mov	r3, r0
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b10      	ldr	r3, [pc, #64]	; (800351c <main+0x88>)
 80034da:	701a      	strb	r2, [r3, #0]
  fresult = f_open(&file, "wotakoi.wav", FA_READ|FA_OPEN_EXISTING);
 80034dc:	2201      	movs	r2, #1
 80034de:	4910      	ldr	r1, [pc, #64]	; (8003520 <main+0x8c>)
 80034e0:	4810      	ldr	r0, [pc, #64]	; (8003524 <main+0x90>)
 80034e2:	f7ff fb4f 	bl	8002b84 <f_open>
 80034e6:	4603      	mov	r3, r0
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b0c      	ldr	r3, [pc, #48]	; (800351c <main+0x88>)
 80034ec:	701a      	strb	r2, [r3, #0]
  f_read(&file, buf, 10000, &bytes_read);
 80034ee:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <main+0x94>)
 80034f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80034f4:	490d      	ldr	r1, [pc, #52]	; (800352c <main+0x98>)
 80034f6:	480b      	ldr	r0, [pc, #44]	; (8003524 <main+0x90>)
 80034f8:	f7ff fcc7 	bl	8002e8a <f_read>
  f_read(&file, buf2, 10000, &bytes_read);
 80034fc:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <main+0x94>)
 80034fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8003502:	490b      	ldr	r1, [pc, #44]	; (8003530 <main+0x9c>)
 8003504:	4807      	ldr	r0, [pc, #28]	; (8003524 <main+0x90>)
 8003506:	f7ff fcc0 	bl	8002e8a <f_read>
  //read_song();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800350a:	e7fe      	b.n	800350a <main+0x76>
 800350c:	20002d44 	.word	0x20002d44
 8003510:	200005e8 	.word	0x200005e8
 8003514:	080073b0 	.word	0x080073b0
 8003518:	20000094 	.word	0x20000094
 800351c:	200055ac 	.word	0x200055ac
 8003520:	080073b4 	.word	0x080073b4
 8003524:	200003c0 	.word	0x200003c0
 8003528:	20000630 	.word	0x20000630
 800352c:	20002e9c 	.word	0x20002e9c
 8003530:	20000634 	.word	0x20000634

08003534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b094      	sub	sp, #80	; 0x50
 8003538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800353a:	f107 0320 	add.w	r3, r7, #32
 800353e:	2230      	movs	r2, #48	; 0x30
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f003 ff0c 	bl	8007360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003548:	f107 030c 	add.w	r3, r7, #12
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003558:	2300      	movs	r3, #0
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	4b28      	ldr	r3, [pc, #160]	; (8003600 <SystemClock_Config+0xcc>)
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <SystemClock_Config+0xcc>)
 8003562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003566:	6413      	str	r3, [r2, #64]	; 0x40
 8003568:	4b25      	ldr	r3, [pc, #148]	; (8003600 <SystemClock_Config+0xcc>)
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003574:	2300      	movs	r3, #0
 8003576:	607b      	str	r3, [r7, #4]
 8003578:	4b22      	ldr	r3, [pc, #136]	; (8003604 <SystemClock_Config+0xd0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a21      	ldr	r2, [pc, #132]	; (8003604 <SystemClock_Config+0xd0>)
 800357e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <SystemClock_Config+0xd0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003590:	2301      	movs	r3, #1
 8003592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800359a:	2302      	movs	r3, #2
 800359c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800359e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80035a4:	2304      	movs	r3, #4
 80035a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80035a8:	23a8      	movs	r3, #168	; 0xa8
 80035aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035ac:	2302      	movs	r3, #2
 80035ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80035b0:	2304      	movs	r3, #4
 80035b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035b4:	f107 0320 	add.w	r3, r7, #32
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 fe0b 	bl	80051d4 <HAL_RCC_OscConfig>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80035c4:	f000 fa1e 	bl	8003a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035c8:	230f      	movs	r3, #15
 80035ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035cc:	2302      	movs	r3, #2
 80035ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80035e0:	f107 030c 	add.w	r3, r7, #12
 80035e4:	2105      	movs	r1, #5
 80035e6:	4618      	mov	r0, r3
 80035e8:	f002 f836 	bl	8005658 <HAL_RCC_ClockConfig>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80035f2:	f000 fa07 	bl	8003a04 <Error_Handler>
  }
}
 80035f6:	bf00      	nop
 80035f8:	3750      	adds	r7, #80	; 0x50
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	40007000 	.word	0x40007000

08003608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800360e:	463b      	mov	r3, r7
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800361a:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <MX_ADC1_Init+0x98>)
 800361c:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <MX_ADC1_Init+0x9c>)
 800361e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003620:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <MX_ADC1_Init+0x98>)
 8003622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003626:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <MX_ADC1_Init+0x98>)
 800362a:	2200      	movs	r2, #0
 800362c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800362e:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <MX_ADC1_Init+0x98>)
 8003630:	2200      	movs	r2, #0
 8003632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003634:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <MX_ADC1_Init+0x98>)
 8003636:	2200      	movs	r2, #0
 8003638:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800363a:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <MX_ADC1_Init+0x98>)
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003642:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <MX_ADC1_Init+0x98>)
 8003644:	2200      	movs	r2, #0
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003648:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <MX_ADC1_Init+0x98>)
 800364a:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <MX_ADC1_Init+0xa0>)
 800364c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800364e:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <MX_ADC1_Init+0x98>)
 8003650:	2200      	movs	r2, #0
 8003652:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <MX_ADC1_Init+0x98>)
 8003656:	2201      	movs	r2, #1
 8003658:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800365a:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <MX_ADC1_Init+0x98>)
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003662:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <MX_ADC1_Init+0x98>)
 8003664:	2201      	movs	r2, #1
 8003666:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003668:	480d      	ldr	r0, [pc, #52]	; (80036a0 <MX_ADC1_Init+0x98>)
 800366a:	f000 fccf 	bl	800400c <HAL_ADC_Init>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003674:	f000 f9c6 	bl	8003a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003678:	2303      	movs	r3, #3
 800367a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800367c:	2301      	movs	r3, #1
 800367e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003684:	463b      	mov	r3, r7
 8003686:	4619      	mov	r1, r3
 8003688:	4805      	ldr	r0, [pc, #20]	; (80036a0 <MX_ADC1_Init+0x98>)
 800368a:	f000 ff35 	bl	80044f8 <HAL_ADC_ConfigChannel>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003694:	f000 f9b6 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	200005e8 	.word	0x200005e8
 80036a4:	40012000 	.word	0x40012000
 80036a8:	0f000001 	.word	0x0f000001

080036ac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80036b2:	463b      	mov	r3, r7
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <MX_DAC_Init+0x4c>)
 80036bc:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <MX_DAC_Init+0x50>)
 80036be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80036c0:	480d      	ldr	r0, [pc, #52]	; (80036f8 <MX_DAC_Init+0x4c>)
 80036c2:	f001 fa52 	bl	8004b6a <HAL_DAC_Init>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80036cc:	f000 f99a 	bl	8003a04 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80036d8:	463b      	mov	r3, r7
 80036da:	2200      	movs	r2, #0
 80036dc:	4619      	mov	r1, r3
 80036de:	4806      	ldr	r0, [pc, #24]	; (80036f8 <MX_DAC_Init+0x4c>)
 80036e0:	f001 facb 	bl	8004c7a <HAL_DAC_ConfigChannel>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80036ea:	f000 f98b 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20002d44 	.word	0x20002d44
 80036fc:	40007400 	.word	0x40007400

08003700 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003704:	4b17      	ldr	r3, [pc, #92]	; (8003764 <MX_SPI3_Init+0x64>)
 8003706:	4a18      	ldr	r2, [pc, #96]	; (8003768 <MX_SPI3_Init+0x68>)
 8003708:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800370a:	4b16      	ldr	r3, [pc, #88]	; (8003764 <MX_SPI3_Init+0x64>)
 800370c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003710:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003712:	4b14      	ldr	r3, [pc, #80]	; (8003764 <MX_SPI3_Init+0x64>)
 8003714:	2200      	movs	r2, #0
 8003716:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <MX_SPI3_Init+0x64>)
 800371a:	2200      	movs	r2, #0
 800371c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <MX_SPI3_Init+0x64>)
 8003720:	2200      	movs	r2, #0
 8003722:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003724:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <MX_SPI3_Init+0x64>)
 8003726:	2200      	movs	r2, #0
 8003728:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <MX_SPI3_Init+0x64>)
 800372c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003730:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <MX_SPI3_Init+0x64>)
 8003734:	2218      	movs	r2, #24
 8003736:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <MX_SPI3_Init+0x64>)
 800373a:	2200      	movs	r2, #0
 800373c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <MX_SPI3_Init+0x64>)
 8003740:	2200      	movs	r2, #0
 8003742:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003744:	4b07      	ldr	r3, [pc, #28]	; (8003764 <MX_SPI3_Init+0x64>)
 8003746:	2200      	movs	r2, #0
 8003748:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <MX_SPI3_Init+0x64>)
 800374c:	220a      	movs	r2, #10
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003750:	4804      	ldr	r0, [pc, #16]	; (8003764 <MX_SPI3_Init+0x64>)
 8003752:	f002 f96f 	bl	8005a34 <HAL_SPI_Init>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800375c:	f000 f952 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003760:	bf00      	nop
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000368 	.word	0x20000368
 8003768:	40003c00 	.word	0x40003c00

0800376c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003772:	f107 0308 	add.w	r3, r7, #8
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003780:	463b      	mov	r3, r7
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003788:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <MX_TIM4_Init+0x94>)
 800378a:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <MX_TIM4_Init+0x98>)
 800378c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 800378e:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <MX_TIM4_Init+0x94>)
 8003790:	2204      	movs	r2, #4
 8003792:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003794:	4b1a      	ldr	r3, [pc, #104]	; (8003800 <MX_TIM4_Init+0x94>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 380;
 800379a:	4b19      	ldr	r3, [pc, #100]	; (8003800 <MX_TIM4_Init+0x94>)
 800379c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80037a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a2:	4b17      	ldr	r3, [pc, #92]	; (8003800 <MX_TIM4_Init+0x94>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037a8:	4b15      	ldr	r3, [pc, #84]	; (8003800 <MX_TIM4_Init+0x94>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80037ae:	4814      	ldr	r0, [pc, #80]	; (8003800 <MX_TIM4_Init+0x94>)
 80037b0:	f002 fd34 	bl	800621c <HAL_TIM_Base_Init>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80037ba:	f000 f923 	bl	8003a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80037c4:	f107 0308 	add.w	r3, r7, #8
 80037c8:	4619      	mov	r1, r3
 80037ca:	480d      	ldr	r0, [pc, #52]	; (8003800 <MX_TIM4_Init+0x94>)
 80037cc:	f002 fea8 	bl	8006520 <HAL_TIM_ConfigClockSource>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80037d6:	f000 f915 	bl	8003a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80037e2:	463b      	mov	r3, r7
 80037e4:	4619      	mov	r1, r3
 80037e6:	4806      	ldr	r0, [pc, #24]	; (8003800 <MX_TIM4_Init+0x94>)
 80037e8:	f003 f8b4 	bl	8006954 <HAL_TIMEx_MasterConfigSynchronization>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80037f2:	f000 f907 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80037f6:	bf00      	nop
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200002e8 	.word	0x200002e8
 8003804:	40000800 	.word	0x40000800

08003808 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800380e:	463b      	mov	r3, r7
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <MX_TIM6_Init+0x60>)
 8003818:	4a14      	ldr	r2, [pc, #80]	; (800386c <MX_TIM6_Init+0x64>)
 800381a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 249;
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <MX_TIM6_Init+0x60>)
 800381e:	22f9      	movs	r2, #249	; 0xf9
 8003820:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003822:	4b11      	ldr	r3, [pc, #68]	; (8003868 <MX_TIM6_Init+0x60>)
 8003824:	2200      	movs	r2, #0
 8003826:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20;
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <MX_TIM6_Init+0x60>)
 800382a:	2214      	movs	r2, #20
 800382c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800382e:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <MX_TIM6_Init+0x60>)
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003834:	480c      	ldr	r0, [pc, #48]	; (8003868 <MX_TIM6_Init+0x60>)
 8003836:	f002 fcf1 	bl	800621c <HAL_TIM_Base_Init>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8003840:	f000 f8e0 	bl	8003a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003844:	2300      	movs	r3, #0
 8003846:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003848:	2300      	movs	r3, #0
 800384a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800384c:	463b      	mov	r3, r7
 800384e:	4619      	mov	r1, r3
 8003850:	4805      	ldr	r0, [pc, #20]	; (8003868 <MX_TIM6_Init+0x60>)
 8003852:	f003 f87f 	bl	8006954 <HAL_TIMEx_MasterConfigSynchronization>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 800385c:	f000 f8d2 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20002e58 	.word	0x20002e58
 800386c:	40001000 	.word	0x40001000

08003870 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <MX_USART3_UART_Init+0x4c>)
 8003876:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <MX_USART3_UART_Init+0x50>)
 8003878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <MX_USART3_UART_Init+0x4c>)
 800387c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <MX_USART3_UART_Init+0x4c>)
 8003884:	2200      	movs	r2, #0
 8003886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <MX_USART3_UART_Init+0x4c>)
 800388a:	2200      	movs	r2, #0
 800388c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800388e:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <MX_USART3_UART_Init+0x4c>)
 8003890:	2200      	movs	r2, #0
 8003892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003894:	4b09      	ldr	r3, [pc, #36]	; (80038bc <MX_USART3_UART_Init+0x4c>)
 8003896:	220c      	movs	r2, #12
 8003898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <MX_USART3_UART_Init+0x4c>)
 800389c:	2200      	movs	r2, #0
 800389e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <MX_USART3_UART_Init+0x4c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038a6:	4805      	ldr	r0, [pc, #20]	; (80038bc <MX_USART3_UART_Init+0x4c>)
 80038a8:	f003 f8ad 	bl	8006a06 <HAL_UART_Init>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80038b2:	f000 f8a7 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000328 	.word	0x20000328
 80038c0:	40004800 	.word	0x40004800

080038c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ca:	f107 0314 	add.w	r3, r7, #20
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
 80038d4:	609a      	str	r2, [r3, #8]
 80038d6:	60da      	str	r2, [r3, #12]
 80038d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	4b43      	ldr	r3, [pc, #268]	; (80039ec <MX_GPIO_Init+0x128>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	4a42      	ldr	r2, [pc, #264]	; (80039ec <MX_GPIO_Init+0x128>)
 80038e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ea:	4b40      	ldr	r3, [pc, #256]	; (80039ec <MX_GPIO_Init+0x128>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	4b3c      	ldr	r3, [pc, #240]	; (80039ec <MX_GPIO_Init+0x128>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	4a3b      	ldr	r2, [pc, #236]	; (80039ec <MX_GPIO_Init+0x128>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6313      	str	r3, [r2, #48]	; 0x30
 8003906:	4b39      	ldr	r3, [pc, #228]	; (80039ec <MX_GPIO_Init+0x128>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	4b35      	ldr	r3, [pc, #212]	; (80039ec <MX_GPIO_Init+0x128>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	4a34      	ldr	r2, [pc, #208]	; (80039ec <MX_GPIO_Init+0x128>)
 800391c:	f043 0302 	orr.w	r3, r3, #2
 8003920:	6313      	str	r3, [r2, #48]	; 0x30
 8003922:	4b32      	ldr	r3, [pc, #200]	; (80039ec <MX_GPIO_Init+0x128>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	607b      	str	r3, [r7, #4]
 8003932:	4b2e      	ldr	r3, [pc, #184]	; (80039ec <MX_GPIO_Init+0x128>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	4a2d      	ldr	r2, [pc, #180]	; (80039ec <MX_GPIO_Init+0x128>)
 8003938:	f043 0308 	orr.w	r3, r3, #8
 800393c:	6313      	str	r3, [r2, #48]	; 0x30
 800393e:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <MX_GPIO_Init+0x128>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	607b      	str	r3, [r7, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	4b27      	ldr	r3, [pc, #156]	; (80039ec <MX_GPIO_Init+0x128>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a26      	ldr	r2, [pc, #152]	; (80039ec <MX_GPIO_Init+0x128>)
 8003954:	f043 0304 	orr.w	r3, r3, #4
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <MX_GPIO_Init+0x128>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003966:	2200      	movs	r2, #0
 8003968:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800396c:	4820      	ldr	r0, [pc, #128]	; (80039f0 <MX_GPIO_Init+0x12c>)
 800396e:	f001 fbcb 	bl	8005108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003972:	2301      	movs	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003976:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <MX_GPIO_Init+0x130>)
 8003978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800397a:	2302      	movs	r3, #2
 800397c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397e:	f107 0314 	add.w	r3, r7, #20
 8003982:	4619      	mov	r1, r3
 8003984:	481c      	ldr	r0, [pc, #112]	; (80039f8 <MX_GPIO_Init+0x134>)
 8003986:	f001 fa0d 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 800398a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800398e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003990:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <MX_GPIO_Init+0x138>)
 8003992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003994:	2301      	movs	r3, #1
 8003996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	4619      	mov	r1, r3
 800399e:	4818      	ldr	r0, [pc, #96]	; (8003a00 <MX_GPIO_Init+0x13c>)
 80039a0:	f001 fa00 	bl	8004da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80039a4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80039a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039aa:	2301      	movs	r3, #1
 80039ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b2:	2300      	movs	r3, #0
 80039b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039b6:	f107 0314 	add.w	r3, r7, #20
 80039ba:	4619      	mov	r1, r3
 80039bc:	480c      	ldr	r0, [pc, #48]	; (80039f0 <MX_GPIO_Init+0x12c>)
 80039be:	f001 f9f1 	bl	8004da4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80039c2:	2200      	movs	r2, #0
 80039c4:	2101      	movs	r1, #1
 80039c6:	2006      	movs	r0, #6
 80039c8:	f001 f899 	bl	8004afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80039cc:	2006      	movs	r0, #6
 80039ce:	f001 f8b2 	bl	8004b36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80039d2:	2200      	movs	r2, #0
 80039d4:	2101      	movs	r1, #1
 80039d6:	2028      	movs	r0, #40	; 0x28
 80039d8:	f001 f891 	bl	8004afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80039dc:	2028      	movs	r0, #40	; 0x28
 80039de:	f001 f8aa 	bl	8004b36 <HAL_NVIC_EnableIRQ>

}
 80039e2:	bf00      	nop
 80039e4:	3728      	adds	r7, #40	; 0x28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40020c00 	.word	0x40020c00
 80039f4:	10110000 	.word	0x10110000
 80039f8:	40020000 	.word	0x40020000
 80039fc:	10310000 	.word	0x10310000
 8003a00:	40020400 	.word	0x40020400

08003a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <HAL_MspInit+0x58>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <HAL_MspInit+0x58>)
 8003a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a28:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <HAL_MspInit+0x58>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	603b      	str	r3, [r7, #0]
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <HAL_MspInit+0x58>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	4a0b      	ldr	r2, [pc, #44]	; (8003a6c <HAL_MspInit+0x58>)
 8003a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6413      	str	r3, [r2, #64]	; 0x40
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_MspInit+0x58>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003a52:	2200      	movs	r2, #0
 8003a54:	2100      	movs	r1, #0
 8003a56:	2001      	movs	r0, #1
 8003a58:	f001 f851 	bl	8004afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	f001 f86a 	bl	8004b36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800

08003a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08a      	sub	sp, #40	; 0x28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1b      	ldr	r2, [pc, #108]	; (8003afc <HAL_ADC_MspInit+0x8c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d12f      	bne.n	8003af2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <HAL_ADC_MspInit+0x90>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	4a19      	ldr	r2, [pc, #100]	; (8003b00 <HAL_ADC_MspInit+0x90>)
 8003a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa2:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <HAL_ADC_MspInit+0x90>)
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <HAL_ADC_MspInit+0x90>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	4a12      	ldr	r2, [pc, #72]	; (8003b00 <HAL_ADC_MspInit+0x90>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6313      	str	r3, [r2, #48]	; 0x30
 8003abe:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <HAL_ADC_MspInit+0x90>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003aca:	2308      	movs	r3, #8
 8003acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad6:	f107 0314 	add.w	r3, r7, #20
 8003ada:	4619      	mov	r1, r3
 8003adc:	4809      	ldr	r0, [pc, #36]	; (8003b04 <HAL_ADC_MspInit+0x94>)
 8003ade:	f001 f961 	bl	8004da4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	2012      	movs	r0, #18
 8003ae8:	f001 f809 	bl	8004afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003aec:	2012      	movs	r0, #18
 8003aee:	f001 f822 	bl	8004b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003af2:	bf00      	nop
 8003af4:	3728      	adds	r7, #40	; 0x28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40012000 	.word	0x40012000
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40020000 	.word	0x40020000

08003b08 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a17      	ldr	r2, [pc, #92]	; (8003b84 <HAL_DAC_MspInit+0x7c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d127      	bne.n	8003b7a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <HAL_DAC_MspInit+0x80>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <HAL_DAC_MspInit+0x80>)
 8003b34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b38:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3a:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <HAL_DAC_MspInit+0x80>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <HAL_DAC_MspInit+0x80>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <HAL_DAC_MspInit+0x80>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <HAL_DAC_MspInit+0x80>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b62:	2310      	movs	r3, #16
 8003b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b66:	2303      	movs	r3, #3
 8003b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6e:	f107 0314 	add.w	r3, r7, #20
 8003b72:	4619      	mov	r1, r3
 8003b74:	4805      	ldr	r0, [pc, #20]	; (8003b8c <HAL_DAC_MspInit+0x84>)
 8003b76:	f001 f915 	bl	8004da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003b7a:	bf00      	nop
 8003b7c:	3728      	adds	r7, #40	; 0x28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40007400 	.word	0x40007400
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40020000 	.word	0x40020000

08003b90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	; 0x28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b98:	f107 0314 	add.w	r3, r7, #20
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a19      	ldr	r2, [pc, #100]	; (8003c14 <HAL_SPI_MspInit+0x84>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d12b      	bne.n	8003c0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <HAL_SPI_MspInit+0x88>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	4a17      	ldr	r2, [pc, #92]	; (8003c18 <HAL_SPI_MspInit+0x88>)
 8003bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc2:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <HAL_SPI_MspInit+0x88>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <HAL_SPI_MspInit+0x88>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <HAL_SPI_MspInit+0x88>)
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bde:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <HAL_SPI_MspInit+0x88>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003bea:	2338      	movs	r3, #56	; 0x38
 8003bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003bfa:	2306      	movs	r3, #6
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfe:	f107 0314 	add.w	r3, r7, #20
 8003c02:	4619      	mov	r1, r3
 8003c04:	4805      	ldr	r0, [pc, #20]	; (8003c1c <HAL_SPI_MspInit+0x8c>)
 8003c06:	f001 f8cd 	bl	8004da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003c0a:	bf00      	nop
 8003c0c:	3728      	adds	r7, #40	; 0x28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40003c00 	.word	0x40003c00
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40020400 	.word	0x40020400

08003c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a18      	ldr	r2, [pc, #96]	; (8003c90 <HAL_TIM_Base_MspInit+0x70>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d116      	bne.n	8003c60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	4b17      	ldr	r3, [pc, #92]	; (8003c94 <HAL_TIM_Base_MspInit+0x74>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	4a16      	ldr	r2, [pc, #88]	; (8003c94 <HAL_TIM_Base_MspInit+0x74>)
 8003c3c:	f043 0304 	orr.w	r3, r3, #4
 8003c40:	6413      	str	r3, [r2, #64]	; 0x40
 8003c42:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <HAL_TIM_Base_MspInit+0x74>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2100      	movs	r1, #0
 8003c52:	201e      	movs	r0, #30
 8003c54:	f000 ff53 	bl	8004afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003c58:	201e      	movs	r0, #30
 8003c5a:	f000 ff6c 	bl	8004b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003c5e:	e012      	b.n	8003c86 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0c      	ldr	r2, [pc, #48]	; (8003c98 <HAL_TIM_Base_MspInit+0x78>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10d      	bne.n	8003c86 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <HAL_TIM_Base_MspInit+0x74>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <HAL_TIM_Base_MspInit+0x74>)
 8003c74:	f043 0310 	orr.w	r3, r3, #16
 8003c78:	6413      	str	r3, [r2, #64]	; 0x40
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_TIM_Base_MspInit+0x74>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	68bb      	ldr	r3, [r7, #8]
}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40001000 	.word	0x40001000

08003c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	60da      	str	r2, [r3, #12]
 8003cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <HAL_UART_MspInit+0x94>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d134      	bne.n	8003d28 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <HAL_UART_MspInit+0x98>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <HAL_UART_MspInit+0x98>)
 8003cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cce:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <HAL_UART_MspInit+0x98>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <HAL_UART_MspInit+0x98>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <HAL_UART_MspInit+0x98>)
 8003ce4:	f043 0304 	orr.w	r3, r3, #4
 8003ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cea:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <HAL_UART_MspInit+0x98>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003cf6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d00:	2301      	movs	r3, #1
 8003d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d04:	2303      	movs	r3, #3
 8003d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d08:	2307      	movs	r3, #7
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	4619      	mov	r1, r3
 8003d12:	4809      	ldr	r0, [pc, #36]	; (8003d38 <HAL_UART_MspInit+0x9c>)
 8003d14:	f001 f846 	bl	8004da4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	2027      	movs	r0, #39	; 0x27
 8003d1e:	f000 feee 	bl	8004afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003d22:	2027      	movs	r0, #39	; 0x27
 8003d24:	f000 ff07 	bl	8004b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003d28:	bf00      	nop
 8003d2a:	3728      	adds	r7, #40	; 0x28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40004800 	.word	0x40004800
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40020800 	.word	0x40020800

08003d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d4e:	e7fe      	b.n	8003d4e <HardFault_Handler+0x4>

08003d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d54:	e7fe      	b.n	8003d54 <MemManage_Handler+0x4>

08003d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d56:	b480      	push	{r7}
 8003d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d5a:	e7fe      	b.n	8003d5a <BusFault_Handler+0x4>

08003d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d60:	e7fe      	b.n	8003d60 <UsageFault_Handler+0x4>

08003d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d62:	b480      	push	{r7}
 8003d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8003d90:	f7fd fb42 	bl	8001418 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d94:	f000 f8f8 	bl	8003f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d98:	bf00      	nop
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003da0:	f001 f9fe 	bl	80051a0 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003da4:	bf00      	nop
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003dac:	2001      	movs	r0, #1
 8003dae:	f001 f9df 	bl	8005170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003dbc:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <ADC_IRQHandler+0x10>)
 8003dbe:	f000 fa39 	bl	8004234 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	200005e8 	.word	0x200005e8

08003dcc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003dd0:	4802      	ldr	r0, [pc, #8]	; (8003ddc <TIM4_IRQHandler+0x10>)
 8003dd2:	f002 fa9d 	bl	8006310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	200002e8 	.word	0x200002e8

08003de0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003de4:	4802      	ldr	r0, [pc, #8]	; (8003df0 <USART3_IRQHandler+0x10>)
 8003de6:	f002 fe5b 	bl	8006aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20000328 	.word	0x20000328

08003df4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003df8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003dfc:	f001 f9b8 	bl	8005170 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003e00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003e04:	f001 f9b4 	bl	8005170 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003e08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e0c:	f001 f9b0 	bl	8005170 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003e10:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003e14:	f001 f9ac 	bl	8005170 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003e18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003e1c:	f001 f9a8 	bl	8005170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e20:	bf00      	nop
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e28:	4b16      	ldr	r3, [pc, #88]	; (8003e84 <SystemInit+0x60>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <SystemInit+0x60>)
 8003e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003e38:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <SystemInit+0x64>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <SystemInit+0x64>)
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e44:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <SystemInit+0x64>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <SystemInit+0x64>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a0e      	ldr	r2, [pc, #56]	; (8003e88 <SystemInit+0x64>)
 8003e50:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <SystemInit+0x64>)
 8003e5c:	4a0b      	ldr	r2, [pc, #44]	; (8003e8c <SystemInit+0x68>)
 8003e5e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <SystemInit+0x64>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a08      	ldr	r2, [pc, #32]	; (8003e88 <SystemInit+0x64>)
 8003e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <SystemInit+0x64>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e72:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <SystemInit+0x60>)
 8003e74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e78:	609a      	str	r2, [r3, #8]
#endif
}
 8003e7a:	bf00      	nop
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	e000ed00 	.word	0xe000ed00
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	24003010 	.word	0x24003010

08003e90 <Reset_Handler>:
 8003e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ec8 <LoopFillZerobss+0x14>
 8003e94:	2100      	movs	r1, #0
 8003e96:	e003      	b.n	8003ea0 <LoopCopyDataInit>

08003e98 <CopyDataInit>:
 8003e98:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <LoopFillZerobss+0x18>)
 8003e9a:	585b      	ldr	r3, [r3, r1]
 8003e9c:	5043      	str	r3, [r0, r1]
 8003e9e:	3104      	adds	r1, #4

08003ea0 <LoopCopyDataInit>:
 8003ea0:	480b      	ldr	r0, [pc, #44]	; (8003ed0 <LoopFillZerobss+0x1c>)
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <LoopFillZerobss+0x20>)
 8003ea4:	1842      	adds	r2, r0, r1
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d3f6      	bcc.n	8003e98 <CopyDataInit>
 8003eaa:	4a0b      	ldr	r2, [pc, #44]	; (8003ed8 <LoopFillZerobss+0x24>)
 8003eac:	e002      	b.n	8003eb4 <LoopFillZerobss>

08003eae <FillZerobss>:
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f842 3b04 	str.w	r3, [r2], #4

08003eb4 <LoopFillZerobss>:
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <LoopFillZerobss+0x28>)
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d3f9      	bcc.n	8003eae <FillZerobss>
 8003eba:	f7ff ffb3 	bl	8003e24 <SystemInit>
 8003ebe:	f003 fa2b 	bl	8007318 <__libc_init_array>
 8003ec2:	f7ff fae7 	bl	8003494 <main>
 8003ec6:	4770      	bx	lr
 8003ec8:	20020000 	.word	0x20020000
 8003ecc:	080073e8 	.word	0x080073e8
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	2000006c 	.word	0x2000006c
 8003ed8:	2000006c 	.word	0x2000006c
 8003edc:	200055b4 	.word	0x200055b4

08003ee0 <CAN1_RX0_IRQHandler>:
 8003ee0:	e7fe      	b.n	8003ee0 <CAN1_RX0_IRQHandler>
	...

08003ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <HAL_Init+0x40>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a0d      	ldr	r2, [pc, #52]	; (8003f24 <HAL_Init+0x40>)
 8003eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_Init+0x40>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <HAL_Init+0x40>)
 8003efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f00:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <HAL_Init+0x40>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a07      	ldr	r2, [pc, #28]	; (8003f24 <HAL_Init+0x40>)
 8003f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f0c:	2003      	movs	r0, #3
 8003f0e:	f000 fdeb 	bl	8004ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f12:	2000      	movs	r0, #0
 8003f14:	f000 f808 	bl	8003f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f18:	f7ff fd7c 	bl	8003a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40023c00 	.word	0x40023c00

08003f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f30:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_InitTick+0x54>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <HAL_InitTick+0x58>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fe03 	bl	8004b52 <HAL_SYSTICK_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e00e      	b.n	8003f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b0f      	cmp	r3, #15
 8003f5a:	d80a      	bhi.n	8003f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	f04f 30ff 	mov.w	r0, #4294967295
 8003f64:	f000 fdcb 	bl	8004afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f68:	4a06      	ldr	r2, [pc, #24]	; (8003f84 <HAL_InitTick+0x5c>)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e000      	b.n	8003f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000060 	.word	0x20000060
 8003f80:	20000068 	.word	0x20000068
 8003f84:	20000064 	.word	0x20000064

08003f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_IncTick+0x20>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <HAL_IncTick+0x24>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4413      	add	r3, r2
 8003f98:	4a04      	ldr	r2, [pc, #16]	; (8003fac <HAL_IncTick+0x24>)
 8003f9a:	6013      	str	r3, [r2, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000068 	.word	0x20000068
 8003fac:	200055b0 	.word	0x200055b0

08003fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <HAL_GetTick+0x14>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	200055b0 	.word	0x200055b0

08003fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fd0:	f7ff ffee 	bl	8003fb0 <HAL_GetTick>
 8003fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d005      	beq.n	8003fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <HAL_Delay+0x40>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fee:	bf00      	nop
 8003ff0:	f7ff ffde 	bl	8003fb0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d8f7      	bhi.n	8003ff0 <HAL_Delay+0x28>
  {
  }
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20000068 	.word	0x20000068

0800400c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e033      	b.n	800408a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fd20 	bl	8003a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	2b00      	cmp	r3, #0
 8004048:	d118      	bne.n	800407c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004052:	f023 0302 	bic.w	r3, r3, #2
 8004056:	f043 0202 	orr.w	r2, r3, #2
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fb6c 	bl	800473c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
 800407a:	e001      	b.n	8004080 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004088:	7bfb      	ldrb	r3, [r7, #15]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_ADC_Start_IT+0x1a>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e0b0      	b.n	8004210 <HAL_ADC_Start_IT+0x17c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d018      	beq.n	80040f6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040d4:	4b51      	ldr	r3, [pc, #324]	; (800421c <HAL_ADC_Start_IT+0x188>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a51      	ldr	r2, [pc, #324]	; (8004220 <HAL_ADC_Start_IT+0x18c>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	0c9a      	lsrs	r2, r3, #18
 80040e0:	4613      	mov	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	4413      	add	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80040e8:	e002      	b.n	80040f0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f9      	bne.n	80040ea <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	f040 8084 	bne.w	800420e <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004130:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004144:	d106      	bne.n	8004154 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	f023 0206 	bic.w	r2, r3, #6
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
 8004152:	e002      	b.n	800415a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004162:	4b30      	ldr	r3, [pc, #192]	; (8004224 <HAL_ADC_Start_IT+0x190>)
 8004164:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800416e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800417e:	f043 0320 	orr.w	r3, r3, #32
 8004182:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2b00      	cmp	r3, #0
 800418e:	d12a      	bne.n	80041e6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a24      	ldr	r2, [pc, #144]	; (8004228 <HAL_ADC_Start_IT+0x194>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d015      	beq.n	80041c6 <HAL_ADC_Start_IT+0x132>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a23      	ldr	r2, [pc, #140]	; (800422c <HAL_ADC_Start_IT+0x198>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d105      	bne.n	80041b0 <HAL_ADC_Start_IT+0x11c>
 80041a4:	4b1f      	ldr	r3, [pc, #124]	; (8004224 <HAL_ADC_Start_IT+0x190>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1e      	ldr	r2, [pc, #120]	; (8004230 <HAL_ADC_Start_IT+0x19c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d129      	bne.n	800420e <HAL_ADC_Start_IT+0x17a>
 80041ba:	4b1a      	ldr	r3, [pc, #104]	; (8004224 <HAL_ADC_Start_IT+0x190>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	2b0f      	cmp	r3, #15
 80041c4:	d823      	bhi.n	800420e <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d11c      	bne.n	800420e <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	e013      	b.n	800420e <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a0f      	ldr	r2, [pc, #60]	; (8004228 <HAL_ADC_Start_IT+0x194>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10e      	bne.n	800420e <HAL_ADC_Start_IT+0x17a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d107      	bne.n	800420e <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800420c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	20000060 	.word	0x20000060
 8004220:	431bde83 	.word	0x431bde83
 8004224:	40012300 	.word	0x40012300
 8004228:	40012000 	.word	0x40012000
 800422c:	40012100 	.word	0x40012100
 8004230:	40012200 	.word	0x40012200

08004234 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	2300      	movs	r3, #0
 8004242:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b02      	cmp	r3, #2
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b20      	cmp	r3, #32
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d049      	beq.n	800430a <HAL_ADC_IRQHandler+0xd6>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d046      	beq.n	800430a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d105      	bne.n	8004294 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d12b      	bne.n	80042fa <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d127      	bne.n	80042fa <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d006      	beq.n	80042c6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d119      	bne.n	80042fa <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0220 	bic.w	r2, r2, #32
 80042d4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d105      	bne.n	80042fa <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f043 0201 	orr.w	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fe fef8 	bl	80030f0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0212 	mvn.w	r2, #18
 8004308:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b04      	cmp	r3, #4
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432a:	2b80      	cmp	r3, #128	; 0x80
 800432c:	bf0c      	ite	eq
 800432e:	2301      	moveq	r3, #1
 8004330:	2300      	movne	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d057      	beq.n	80043ec <HAL_ADC_IRQHandler+0x1b8>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d054      	beq.n	80043ec <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b00      	cmp	r3, #0
 800434c:	d105      	bne.n	800435a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d139      	bne.n	80043dc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004380:	2b00      	cmp	r3, #0
 8004382:	d12b      	bne.n	80043dc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800438e:	2b00      	cmp	r3, #0
 8004390:	d124      	bne.n	80043dc <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11d      	bne.n	80043dc <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d119      	bne.n	80043dc <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d105      	bne.n	80043dc <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	f043 0201 	orr.w	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 faa9 	bl	8004934 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f06f 020c 	mvn.w	r2, #12
 80043ea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	bf0c      	ite	eq
 80043fa:	2301      	moveq	r3, #1
 80043fc:	2300      	movne	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	bf0c      	ite	eq
 8004410:	2301      	moveq	r3, #1
 8004412:	2300      	movne	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d017      	beq.n	800444e <HAL_ADC_IRQHandler+0x21a>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d014      	beq.n	800444e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d10d      	bne.n	800444e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f846 	bl	80044d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0201 	mvn.w	r2, #1
 800444c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b20      	cmp	r3, #32
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800446e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004472:	bf0c      	ite	eq
 8004474:	2301      	moveq	r3, #1
 8004476:	2300      	movne	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d015      	beq.n	80044ae <HAL_ADC_IRQHandler+0x27a>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d012      	beq.n	80044ae <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f043 0202 	orr.w	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0220 	mvn.w	r2, #32
 800449c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f820 	bl	80044e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0220 	mvn.w	r2, #32
 80044ac:	601a      	str	r2, [r3, #0]
  }
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x1c>
 8004510:	2302      	movs	r3, #2
 8004512:	e105      	b.n	8004720 <HAL_ADC_ConfigChannel+0x228>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b09      	cmp	r3, #9
 8004522:	d925      	bls.n	8004570 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68d9      	ldr	r1, [r3, #12]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	b29b      	uxth	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	4613      	mov	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4413      	add	r3, r2
 8004538:	3b1e      	subs	r3, #30
 800453a:	2207      	movs	r2, #7
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43da      	mvns	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	400a      	ands	r2, r1
 8004548:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68d9      	ldr	r1, [r3, #12]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	b29b      	uxth	r3, r3
 800455a:	4618      	mov	r0, r3
 800455c:	4603      	mov	r3, r0
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	4403      	add	r3, r0
 8004562:	3b1e      	subs	r3, #30
 8004564:	409a      	lsls	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	60da      	str	r2, [r3, #12]
 800456e:	e022      	b.n	80045b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6919      	ldr	r1, [r3, #16]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	4613      	mov	r3, r2
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	4413      	add	r3, r2
 8004584:	2207      	movs	r2, #7
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43da      	mvns	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	400a      	ands	r2, r1
 8004592:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6919      	ldr	r1, [r3, #16]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	4618      	mov	r0, r3
 80045a6:	4603      	mov	r3, r0
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	4403      	add	r3, r0
 80045ac:	409a      	lsls	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b06      	cmp	r3, #6
 80045bc:	d824      	bhi.n	8004608 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	3b05      	subs	r3, #5
 80045d0:	221f      	movs	r2, #31
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43da      	mvns	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	400a      	ands	r2, r1
 80045de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	4618      	mov	r0, r3
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	3b05      	subs	r3, #5
 80045fa:	fa00 f203 	lsl.w	r2, r0, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	635a      	str	r2, [r3, #52]	; 0x34
 8004606:	e04c      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b0c      	cmp	r3, #12
 800460e:	d824      	bhi.n	800465a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	3b23      	subs	r3, #35	; 0x23
 8004622:	221f      	movs	r2, #31
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43da      	mvns	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	400a      	ands	r2, r1
 8004630:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	4618      	mov	r0, r3
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	3b23      	subs	r3, #35	; 0x23
 800464c:	fa00 f203 	lsl.w	r2, r0, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
 8004658:	e023      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	3b41      	subs	r3, #65	; 0x41
 800466c:	221f      	movs	r2, #31
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43da      	mvns	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	400a      	ands	r2, r1
 800467a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	4618      	mov	r0, r3
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	3b41      	subs	r3, #65	; 0x41
 8004696:	fa00 f203 	lsl.w	r2, r0, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046a2:	4b22      	ldr	r3, [pc, #136]	; (800472c <HAL_ADC_ConfigChannel+0x234>)
 80046a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a21      	ldr	r2, [pc, #132]	; (8004730 <HAL_ADC_ConfigChannel+0x238>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d109      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x1cc>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b12      	cmp	r3, #18
 80046b6:	d105      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a19      	ldr	r2, [pc, #100]	; (8004730 <HAL_ADC_ConfigChannel+0x238>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d123      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x21e>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b10      	cmp	r3, #16
 80046d4:	d003      	beq.n	80046de <HAL_ADC_ConfigChannel+0x1e6>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b11      	cmp	r3, #17
 80046dc:	d11b      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b10      	cmp	r3, #16
 80046f0:	d111      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_ADC_ConfigChannel+0x23c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a10      	ldr	r2, [pc, #64]	; (8004738 <HAL_ADC_ConfigChannel+0x240>)
 80046f8:	fba2 2303 	umull	r2, r3, r2, r3
 80046fc:	0c9a      	lsrs	r2, r3, #18
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004708:	e002      	b.n	8004710 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	3b01      	subs	r3, #1
 800470e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f9      	bne.n	800470a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	40012300 	.word	0x40012300
 8004730:	40012000 	.word	0x40012000
 8004734:	20000060 	.word	0x20000060
 8004738:	431bde83 	.word	0x431bde83

0800473c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004744:	4b79      	ldr	r3, [pc, #484]	; (800492c <ADC_Init+0x1f0>)
 8004746:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	431a      	orrs	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004770:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6859      	ldr	r1, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	021a      	lsls	r2, r3, #8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004794:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6899      	ldr	r1, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	4a58      	ldr	r2, [pc, #352]	; (8004930 <ADC_Init+0x1f4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d022      	beq.n	800481a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6899      	ldr	r1, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004804:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6899      	ldr	r1, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]
 8004818:	e00f      	b.n	800483a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004828:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004838:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0202 	bic.w	r2, r2, #2
 8004848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6899      	ldr	r1, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	7e1b      	ldrb	r3, [r3, #24]
 8004854:	005a      	lsls	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01b      	beq.n	80048a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004876:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004886:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6859      	ldr	r1, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	3b01      	subs	r3, #1
 8004894:	035a      	lsls	r2, r3, #13
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	e007      	b.n	80048b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	051a      	lsls	r2, r3, #20
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6899      	ldr	r1, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048f2:	025a      	lsls	r2, r3, #9
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6899      	ldr	r1, [r3, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	029a      	lsls	r2, r3, #10
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	609a      	str	r2, [r3, #8]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	40012300 	.word	0x40012300
 8004930:	0f000001 	.word	0x0f000001

08004934 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <__NVIC_SetPriorityGrouping+0x44>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004964:	4013      	ands	r3, r2
 8004966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800497a:	4a04      	ldr	r2, [pc, #16]	; (800498c <__NVIC_SetPriorityGrouping+0x44>)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	60d3      	str	r3, [r2, #12]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	e000ed00 	.word	0xe000ed00

08004990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004994:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	0a1b      	lsrs	r3, r3, #8
 800499a:	f003 0307 	and.w	r3, r3, #7
}
 800499e:	4618      	mov	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	e000ed00 	.word	0xe000ed00

080049ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	db0b      	blt.n	80049d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	f003 021f 	and.w	r2, r3, #31
 80049c4:	4907      	ldr	r1, [pc, #28]	; (80049e4 <__NVIC_EnableIRQ+0x38>)
 80049c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	2001      	movs	r0, #1
 80049ce:	fa00 f202 	lsl.w	r2, r0, r2
 80049d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	e000e100 	.word	0xe000e100

080049e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	6039      	str	r1, [r7, #0]
 80049f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	db0a      	blt.n	8004a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	490c      	ldr	r1, [pc, #48]	; (8004a34 <__NVIC_SetPriority+0x4c>)
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	0112      	lsls	r2, r2, #4
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a10:	e00a      	b.n	8004a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	4908      	ldr	r1, [pc, #32]	; (8004a38 <__NVIC_SetPriority+0x50>)
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	3b04      	subs	r3, #4
 8004a20:	0112      	lsls	r2, r2, #4
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	440b      	add	r3, r1
 8004a26:	761a      	strb	r2, [r3, #24]
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	e000e100 	.word	0xe000e100
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b089      	sub	sp, #36	; 0x24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f1c3 0307 	rsb	r3, r3, #7
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	bf28      	it	cs
 8004a5a:	2304      	movcs	r3, #4
 8004a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	3304      	adds	r3, #4
 8004a62:	2b06      	cmp	r3, #6
 8004a64:	d902      	bls.n	8004a6c <NVIC_EncodePriority+0x30>
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	3b03      	subs	r3, #3
 8004a6a:	e000      	b.n	8004a6e <NVIC_EncodePriority+0x32>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a70:	f04f 32ff 	mov.w	r2, #4294967295
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	401a      	ands	r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a84:	f04f 31ff 	mov.w	r1, #4294967295
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8e:	43d9      	mvns	r1, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a94:	4313      	orrs	r3, r2
         );
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3724      	adds	r7, #36	; 0x24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ab4:	d301      	bcc.n	8004aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e00f      	b.n	8004ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aba:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <SysTick_Config+0x40>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ac2:	210f      	movs	r1, #15
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	f7ff ff8e 	bl	80049e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <SysTick_Config+0x40>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ad2:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <SysTick_Config+0x40>)
 8004ad4:	2207      	movs	r2, #7
 8004ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	e000e010 	.word	0xe000e010

08004ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff ff29 	bl	8004948 <__NVIC_SetPriorityGrouping>
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	4603      	mov	r3, r0
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b10:	f7ff ff3e 	bl	8004990 <__NVIC_GetPriorityGrouping>
 8004b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	6978      	ldr	r0, [r7, #20]
 8004b1c:	f7ff ff8e 	bl	8004a3c <NVIC_EncodePriority>
 8004b20:	4602      	mov	r2, r0
 8004b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b26:	4611      	mov	r1, r2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff ff5d 	bl	80049e8 <__NVIC_SetPriority>
}
 8004b2e:	bf00      	nop
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff31 	bl	80049ac <__NVIC_EnableIRQ>
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff ffa2 	bl	8004aa4 <SysTick_Config>
 8004b60:	4603      	mov	r3, r0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e014      	b.n	8004ba6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	791b      	ldrb	r3, [r3, #4]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d105      	bne.n	8004b92 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7fe ffbb 	bl	8003b08 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	795b      	ldrb	r3, [r3, #5]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_DAC_Start+0x1e>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e050      	b.n	8004c6e <HAL_DAC_Start+0xc0>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6819      	ldr	r1, [r3, #0]
 8004bde:	2201      	movs	r2, #1
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	409a      	lsls	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d11a      	bne.n	8004c28 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c08:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d127      	bne.n	8004c60 <HAL_DAC_Start+0xb2>
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b38      	cmp	r3, #56	; 0x38
 8004c14:	d124      	bne.n	8004c60 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0201 	orr.w	r2, r2, #1
 8004c24:	605a      	str	r2, [r3, #4]
 8004c26:	e01b      	b.n	8004c60 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c32:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8004c3e:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c46:	d10b      	bne.n	8004c60 <HAL_DAC_Start+0xb2>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004c4e:	d107      	bne.n	8004c60 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0202 	orr.w	r2, r2, #2
 8004c5e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b087      	sub	sp, #28
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	795b      	ldrb	r3, [r3, #5]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_DAC_ConfigChannel+0x20>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e036      	b.n	8004d08 <HAL_DAC_ConfigChannel+0x8e>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004cae:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6819      	ldr	r1, [r3, #0]
 8004ce8:	22c0      	movs	r2, #192	; 0xc0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	43da      	mvns	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	400a      	ands	r2, r1
 8004cf8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d105      	bne.n	8004d3e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4413      	add	r3, r2
 8004d38:	3308      	adds	r3, #8
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	e004      	b.n	8004d48 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4413      	add	r3, r2
 8004d44:	3314      	adds	r3, #20
 8004d46:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d004      	beq.n	8004d7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2280      	movs	r2, #128	; 0x80
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e00c      	b.n	8004d96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2205      	movs	r2, #5
 8004d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
	...

08004da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b089      	sub	sp, #36	; 0x24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	e16b      	b.n	8005098 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	f040 815a 	bne.w	8005092 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_Init+0x4a>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b12      	cmp	r3, #18
 8004dec:	d123      	bne.n	8004e36 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	08da      	lsrs	r2, r3, #3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3208      	adds	r2, #8
 8004df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	220f      	movs	r2, #15
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	08da      	lsrs	r2, r3, #3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3208      	adds	r2, #8
 8004e30:	69b9      	ldr	r1, [r7, #24]
 8004e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	2203      	movs	r2, #3
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	43db      	mvns	r3, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 0203 	and.w	r2, r3, #3
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d00b      	beq.n	8004e8a <HAL_GPIO_Init+0xe6>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d007      	beq.n	8004e8a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e7e:	2b11      	cmp	r3, #17
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b12      	cmp	r3, #18
 8004e88:	d130      	bne.n	8004eec <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	2203      	movs	r2, #3
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f003 0201 	and.w	r2, r3, #1
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80b4 	beq.w	8005092 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	4b5f      	ldr	r3, [pc, #380]	; (80050ac <HAL_GPIO_Init+0x308>)
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	4a5e      	ldr	r2, [pc, #376]	; (80050ac <HAL_GPIO_Init+0x308>)
 8004f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f38:	6453      	str	r3, [r2, #68]	; 0x44
 8004f3a:	4b5c      	ldr	r3, [pc, #368]	; (80050ac <HAL_GPIO_Init+0x308>)
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f46:	4a5a      	ldr	r2, [pc, #360]	; (80050b0 <HAL_GPIO_Init+0x30c>)
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	089b      	lsrs	r3, r3, #2
 8004f4c:	3302      	adds	r3, #2
 8004f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	220f      	movs	r2, #15
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	43db      	mvns	r3, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4013      	ands	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a51      	ldr	r2, [pc, #324]	; (80050b4 <HAL_GPIO_Init+0x310>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d02b      	beq.n	8004fca <HAL_GPIO_Init+0x226>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a50      	ldr	r2, [pc, #320]	; (80050b8 <HAL_GPIO_Init+0x314>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d025      	beq.n	8004fc6 <HAL_GPIO_Init+0x222>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a4f      	ldr	r2, [pc, #316]	; (80050bc <HAL_GPIO_Init+0x318>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d01f      	beq.n	8004fc2 <HAL_GPIO_Init+0x21e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a4e      	ldr	r2, [pc, #312]	; (80050c0 <HAL_GPIO_Init+0x31c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d019      	beq.n	8004fbe <HAL_GPIO_Init+0x21a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a4d      	ldr	r2, [pc, #308]	; (80050c4 <HAL_GPIO_Init+0x320>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <HAL_GPIO_Init+0x216>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a4c      	ldr	r2, [pc, #304]	; (80050c8 <HAL_GPIO_Init+0x324>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00d      	beq.n	8004fb6 <HAL_GPIO_Init+0x212>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a4b      	ldr	r2, [pc, #300]	; (80050cc <HAL_GPIO_Init+0x328>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d007      	beq.n	8004fb2 <HAL_GPIO_Init+0x20e>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a4a      	ldr	r2, [pc, #296]	; (80050d0 <HAL_GPIO_Init+0x32c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d101      	bne.n	8004fae <HAL_GPIO_Init+0x20a>
 8004faa:	2307      	movs	r3, #7
 8004fac:	e00e      	b.n	8004fcc <HAL_GPIO_Init+0x228>
 8004fae:	2308      	movs	r3, #8
 8004fb0:	e00c      	b.n	8004fcc <HAL_GPIO_Init+0x228>
 8004fb2:	2306      	movs	r3, #6
 8004fb4:	e00a      	b.n	8004fcc <HAL_GPIO_Init+0x228>
 8004fb6:	2305      	movs	r3, #5
 8004fb8:	e008      	b.n	8004fcc <HAL_GPIO_Init+0x228>
 8004fba:	2304      	movs	r3, #4
 8004fbc:	e006      	b.n	8004fcc <HAL_GPIO_Init+0x228>
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e004      	b.n	8004fcc <HAL_GPIO_Init+0x228>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e002      	b.n	8004fcc <HAL_GPIO_Init+0x228>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <HAL_GPIO_Init+0x228>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	f002 0203 	and.w	r2, r2, #3
 8004fd2:	0092      	lsls	r2, r2, #2
 8004fd4:	4093      	lsls	r3, r2
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fdc:	4934      	ldr	r1, [pc, #208]	; (80050b0 <HAL_GPIO_Init+0x30c>)
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	089b      	lsrs	r3, r3, #2
 8004fe2:	3302      	adds	r3, #2
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fea:	4b3a      	ldr	r3, [pc, #232]	; (80050d4 <HAL_GPIO_Init+0x330>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800500e:	4a31      	ldr	r2, [pc, #196]	; (80050d4 <HAL_GPIO_Init+0x330>)
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005014:	4b2f      	ldr	r3, [pc, #188]	; (80050d4 <HAL_GPIO_Init+0x330>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	43db      	mvns	r3, r3
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	4013      	ands	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005038:	4a26      	ldr	r2, [pc, #152]	; (80050d4 <HAL_GPIO_Init+0x330>)
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800503e:	4b25      	ldr	r3, [pc, #148]	; (80050d4 <HAL_GPIO_Init+0x330>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	43db      	mvns	r3, r3
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	4013      	ands	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005062:	4a1c      	ldr	r2, [pc, #112]	; (80050d4 <HAL_GPIO_Init+0x330>)
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005068:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <HAL_GPIO_Init+0x330>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	43db      	mvns	r3, r3
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	4013      	ands	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800508c:	4a11      	ldr	r2, [pc, #68]	; (80050d4 <HAL_GPIO_Init+0x330>)
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	3301      	adds	r3, #1
 8005096:	61fb      	str	r3, [r7, #28]
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b0f      	cmp	r3, #15
 800509c:	f67f ae90 	bls.w	8004dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050a0:	bf00      	nop
 80050a2:	3724      	adds	r7, #36	; 0x24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	40023800 	.word	0x40023800
 80050b0:	40013800 	.word	0x40013800
 80050b4:	40020000 	.word	0x40020000
 80050b8:	40020400 	.word	0x40020400
 80050bc:	40020800 	.word	0x40020800
 80050c0:	40020c00 	.word	0x40020c00
 80050c4:	40021000 	.word	0x40021000
 80050c8:	40021400 	.word	0x40021400
 80050cc:	40021800 	.word	0x40021800
 80050d0:	40021c00 	.word	0x40021c00
 80050d4:	40013c00 	.word	0x40013c00

080050d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	887b      	ldrh	r3, [r7, #2]
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
 80050f4:	e001      	b.n	80050fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	807b      	strh	r3, [r7, #2]
 8005114:	4613      	mov	r3, r2
 8005116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005118:	787b      	ldrb	r3, [r7, #1]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800511e:	887a      	ldrh	r2, [r7, #2]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005124:	e003      	b.n	800512e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005126:	887b      	ldrh	r3, [r7, #2]
 8005128:	041a      	lsls	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	619a      	str	r2, [r3, #24]
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	460b      	mov	r3, r1
 8005144:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	887b      	ldrh	r3, [r7, #2]
 800514c:	401a      	ands	r2, r3
 800514e:	887b      	ldrh	r3, [r7, #2]
 8005150:	429a      	cmp	r2, r3
 8005152:	d104      	bne.n	800515e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005154:	887b      	ldrh	r3, [r7, #2]
 8005156:	041a      	lsls	r2, r3, #16
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800515c:	e002      	b.n	8005164 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800515e:	887a      	ldrh	r2, [r7, #2]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	619a      	str	r2, [r3, #24]
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	4603      	mov	r3, r0
 8005178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800517a:	4b08      	ldr	r3, [pc, #32]	; (800519c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800517c:	695a      	ldr	r2, [r3, #20]
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	4013      	ands	r3, r2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d006      	beq.n	8005194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005186:	4a05      	ldr	r2, [pc, #20]	; (800519c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005188:	88fb      	ldrh	r3, [r7, #6]
 800518a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	4618      	mov	r0, r3
 8005190:	f7fe f85c 	bl	800324c <HAL_GPIO_EXTI_Callback>
  }
}
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40013c00 	.word	0x40013c00

080051a0 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80051a4:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <HAL_PWR_PVD_IRQHandler+0x20>)
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80051b0:	f000 f808 	bl	80051c4 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80051b4:	4b02      	ldr	r3, [pc, #8]	; (80051c0 <HAL_PWR_PVD_IRQHandler+0x20>)
 80051b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051ba:	615a      	str	r2, [r3, #20]
  }
}
 80051bc:	bf00      	nop
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40013c00 	.word	0x40013c00

080051c4 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e22d      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d075      	beq.n	80052de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051f2:	4ba3      	ldr	r3, [pc, #652]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 030c 	and.w	r3, r3, #12
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d00c      	beq.n	8005218 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051fe:	4ba0      	ldr	r3, [pc, #640]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005206:	2b08      	cmp	r3, #8
 8005208:	d112      	bne.n	8005230 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800520a:	4b9d      	ldr	r3, [pc, #628]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005216:	d10b      	bne.n	8005230 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005218:	4b99      	ldr	r3, [pc, #612]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d05b      	beq.n	80052dc <HAL_RCC_OscConfig+0x108>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d157      	bne.n	80052dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e208      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005238:	d106      	bne.n	8005248 <HAL_RCC_OscConfig+0x74>
 800523a:	4b91      	ldr	r3, [pc, #580]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a90      	ldr	r2, [pc, #576]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	e01d      	b.n	8005284 <HAL_RCC_OscConfig+0xb0>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005250:	d10c      	bne.n	800526c <HAL_RCC_OscConfig+0x98>
 8005252:	4b8b      	ldr	r3, [pc, #556]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a8a      	ldr	r2, [pc, #552]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	4b88      	ldr	r3, [pc, #544]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a87      	ldr	r2, [pc, #540]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e00b      	b.n	8005284 <HAL_RCC_OscConfig+0xb0>
 800526c:	4b84      	ldr	r3, [pc, #528]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a83      	ldr	r2, [pc, #524]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	4b81      	ldr	r3, [pc, #516]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a80      	ldr	r2, [pc, #512]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 800527e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d013      	beq.n	80052b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528c:	f7fe fe90 	bl	8003fb0 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005294:	f7fe fe8c 	bl	8003fb0 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b64      	cmp	r3, #100	; 0x64
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e1cd      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052a6:	4b76      	ldr	r3, [pc, #472]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0xc0>
 80052b2:	e014      	b.n	80052de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b4:	f7fe fe7c 	bl	8003fb0 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052bc:	f7fe fe78 	bl	8003fb0 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b64      	cmp	r3, #100	; 0x64
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e1b9      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ce:	4b6c      	ldr	r3, [pc, #432]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0xe8>
 80052da:	e000      	b.n	80052de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d063      	beq.n	80053b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052ea:	4b65      	ldr	r3, [pc, #404]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00b      	beq.n	800530e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052f6:	4b62      	ldr	r3, [pc, #392]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d11c      	bne.n	800533c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005302:	4b5f      	ldr	r3, [pc, #380]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d116      	bne.n	800533c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800530e:	4b5c      	ldr	r3, [pc, #368]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <HAL_RCC_OscConfig+0x152>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d001      	beq.n	8005326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e18d      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005326:	4b56      	ldr	r3, [pc, #344]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4952      	ldr	r1, [pc, #328]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005336:	4313      	orrs	r3, r2
 8005338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800533a:	e03a      	b.n	80053b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d020      	beq.n	8005386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005344:	4b4f      	ldr	r3, [pc, #316]	; (8005484 <HAL_RCC_OscConfig+0x2b0>)
 8005346:	2201      	movs	r2, #1
 8005348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534a:	f7fe fe31 	bl	8003fb0 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005352:	f7fe fe2d 	bl	8003fb0 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e16e      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005364:	4b46      	ldr	r3, [pc, #280]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0f0      	beq.n	8005352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005370:	4b43      	ldr	r3, [pc, #268]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4940      	ldr	r1, [pc, #256]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005380:	4313      	orrs	r3, r2
 8005382:	600b      	str	r3, [r1, #0]
 8005384:	e015      	b.n	80053b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005386:	4b3f      	ldr	r3, [pc, #252]	; (8005484 <HAL_RCC_OscConfig+0x2b0>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538c:	f7fe fe10 	bl	8003fb0 <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005394:	f7fe fe0c 	bl	8003fb0 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e14d      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053a6:	4b36      	ldr	r3, [pc, #216]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1f0      	bne.n	8005394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d030      	beq.n	8005420 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d016      	beq.n	80053f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053c6:	4b30      	ldr	r3, [pc, #192]	; (8005488 <HAL_RCC_OscConfig+0x2b4>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053cc:	f7fe fdf0 	bl	8003fb0 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053d4:	f7fe fdec 	bl	8003fb0 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e12d      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053e6:	4b26      	ldr	r3, [pc, #152]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 80053e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0f0      	beq.n	80053d4 <HAL_RCC_OscConfig+0x200>
 80053f2:	e015      	b.n	8005420 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053f4:	4b24      	ldr	r3, [pc, #144]	; (8005488 <HAL_RCC_OscConfig+0x2b4>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053fa:	f7fe fdd9 	bl	8003fb0 <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005402:	f7fe fdd5 	bl	8003fb0 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e116      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005414:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1f0      	bne.n	8005402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80a0 	beq.w	800556e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800542e:	2300      	movs	r3, #0
 8005430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005432:	4b13      	ldr	r3, [pc, #76]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10f      	bne.n	800545e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	4a0e      	ldr	r2, [pc, #56]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544c:	6413      	str	r3, [r2, #64]	; 0x40
 800544e:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <HAL_RCC_OscConfig+0x2ac>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800545a:	2301      	movs	r3, #1
 800545c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <HAL_RCC_OscConfig+0x2b8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005466:	2b00      	cmp	r3, #0
 8005468:	d121      	bne.n	80054ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800546a:	4b08      	ldr	r3, [pc, #32]	; (800548c <HAL_RCC_OscConfig+0x2b8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a07      	ldr	r2, [pc, #28]	; (800548c <HAL_RCC_OscConfig+0x2b8>)
 8005470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005476:	f7fe fd9b 	bl	8003fb0 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547c:	e011      	b.n	80054a2 <HAL_RCC_OscConfig+0x2ce>
 800547e:	bf00      	nop
 8005480:	40023800 	.word	0x40023800
 8005484:	42470000 	.word	0x42470000
 8005488:	42470e80 	.word	0x42470e80
 800548c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005490:	f7fe fd8e 	bl	8003fb0 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e0cf      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a2:	4b6a      	ldr	r3, [pc, #424]	; (800564c <HAL_RCC_OscConfig+0x478>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0f0      	beq.n	8005490 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d106      	bne.n	80054c4 <HAL_RCC_OscConfig+0x2f0>
 80054b6:	4b66      	ldr	r3, [pc, #408]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 80054b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ba:	4a65      	ldr	r2, [pc, #404]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	6713      	str	r3, [r2, #112]	; 0x70
 80054c2:	e01c      	b.n	80054fe <HAL_RCC_OscConfig+0x32a>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b05      	cmp	r3, #5
 80054ca:	d10c      	bne.n	80054e6 <HAL_RCC_OscConfig+0x312>
 80054cc:	4b60      	ldr	r3, [pc, #384]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	4a5f      	ldr	r2, [pc, #380]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 80054d2:	f043 0304 	orr.w	r3, r3, #4
 80054d6:	6713      	str	r3, [r2, #112]	; 0x70
 80054d8:	4b5d      	ldr	r3, [pc, #372]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	4a5c      	ldr	r2, [pc, #368]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	6713      	str	r3, [r2, #112]	; 0x70
 80054e4:	e00b      	b.n	80054fe <HAL_RCC_OscConfig+0x32a>
 80054e6:	4b5a      	ldr	r3, [pc, #360]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	4a59      	ldr	r2, [pc, #356]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 80054ec:	f023 0301 	bic.w	r3, r3, #1
 80054f0:	6713      	str	r3, [r2, #112]	; 0x70
 80054f2:	4b57      	ldr	r3, [pc, #348]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	4a56      	ldr	r2, [pc, #344]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 80054f8:	f023 0304 	bic.w	r3, r3, #4
 80054fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d015      	beq.n	8005532 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005506:	f7fe fd53 	bl	8003fb0 <HAL_GetTick>
 800550a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800550c:	e00a      	b.n	8005524 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800550e:	f7fe fd4f 	bl	8003fb0 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	f241 3288 	movw	r2, #5000	; 0x1388
 800551c:	4293      	cmp	r3, r2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e08e      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005524:	4b4a      	ldr	r3, [pc, #296]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0ee      	beq.n	800550e <HAL_RCC_OscConfig+0x33a>
 8005530:	e014      	b.n	800555c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005532:	f7fe fd3d 	bl	8003fb0 <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005538:	e00a      	b.n	8005550 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800553a:	f7fe fd39 	bl	8003fb0 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	f241 3288 	movw	r2, #5000	; 0x1388
 8005548:	4293      	cmp	r3, r2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e078      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005550:	4b3f      	ldr	r3, [pc, #252]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 8005552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1ee      	bne.n	800553a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d105      	bne.n	800556e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005562:	4b3b      	ldr	r3, [pc, #236]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	4a3a      	ldr	r2, [pc, #232]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 8005568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800556c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d064      	beq.n	8005640 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005576:	4b36      	ldr	r3, [pc, #216]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 030c 	and.w	r3, r3, #12
 800557e:	2b08      	cmp	r3, #8
 8005580:	d05c      	beq.n	800563c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d141      	bne.n	800560e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800558a:	4b32      	ldr	r3, [pc, #200]	; (8005654 <HAL_RCC_OscConfig+0x480>)
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005590:	f7fe fd0e 	bl	8003fb0 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005598:	f7fe fd0a 	bl	8003fb0 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e04b      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055aa:	4b29      	ldr	r3, [pc, #164]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69da      	ldr	r2, [r3, #28]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	019b      	lsls	r3, r3, #6
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	085b      	lsrs	r3, r3, #1
 80055ce:	3b01      	subs	r3, #1
 80055d0:	041b      	lsls	r3, r3, #16
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	061b      	lsls	r3, r3, #24
 80055da:	491d      	ldr	r1, [pc, #116]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e0:	4b1c      	ldr	r3, [pc, #112]	; (8005654 <HAL_RCC_OscConfig+0x480>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e6:	f7fe fce3 	bl	8003fb0 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ee:	f7fe fcdf 	bl	8003fb0 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e020      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005600:	4b13      	ldr	r3, [pc, #76]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0x41a>
 800560c:	e018      	b.n	8005640 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560e:	4b11      	ldr	r3, [pc, #68]	; (8005654 <HAL_RCC_OscConfig+0x480>)
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005614:	f7fe fccc 	bl	8003fb0 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800561c:	f7fe fcc8 	bl	8003fb0 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e009      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562e:	4b08      	ldr	r3, [pc, #32]	; (8005650 <HAL_RCC_OscConfig+0x47c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCC_OscConfig+0x448>
 800563a:	e001      	b.n	8005640 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40007000 	.word	0x40007000
 8005650:	40023800 	.word	0x40023800
 8005654:	42470060 	.word	0x42470060

08005658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e0ca      	b.n	8005802 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800566c:	4b67      	ldr	r3, [pc, #412]	; (800580c <HAL_RCC_ClockConfig+0x1b4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d90c      	bls.n	8005694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567a:	4b64      	ldr	r3, [pc, #400]	; (800580c <HAL_RCC_ClockConfig+0x1b4>)
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005682:	4b62      	ldr	r3, [pc, #392]	; (800580c <HAL_RCC_ClockConfig+0x1b4>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d001      	beq.n	8005694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0b6      	b.n	8005802 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d020      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056ac:	4b58      	ldr	r3, [pc, #352]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	4a57      	ldr	r2, [pc, #348]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 80056b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056c4:	4b52      	ldr	r3, [pc, #328]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4a51      	ldr	r2, [pc, #324]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 80056ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056d0:	4b4f      	ldr	r3, [pc, #316]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	494c      	ldr	r1, [pc, #304]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d044      	beq.n	8005778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d107      	bne.n	8005706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f6:	4b46      	ldr	r3, [pc, #280]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d119      	bne.n	8005736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e07d      	b.n	8005802 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d003      	beq.n	8005716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005712:	2b03      	cmp	r3, #3
 8005714:	d107      	bne.n	8005726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005716:	4b3e      	ldr	r3, [pc, #248]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e06d      	b.n	8005802 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005726:	4b3a      	ldr	r3, [pc, #232]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e065      	b.n	8005802 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005736:	4b36      	ldr	r3, [pc, #216]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f023 0203 	bic.w	r2, r3, #3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	4933      	ldr	r1, [pc, #204]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 8005744:	4313      	orrs	r3, r2
 8005746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005748:	f7fe fc32 	bl	8003fb0 <HAL_GetTick>
 800574c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800574e:	e00a      	b.n	8005766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005750:	f7fe fc2e 	bl	8003fb0 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f241 3288 	movw	r2, #5000	; 0x1388
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e04d      	b.n	8005802 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005766:	4b2a      	ldr	r3, [pc, #168]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 020c 	and.w	r2, r3, #12
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	429a      	cmp	r2, r3
 8005776:	d1eb      	bne.n	8005750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005778:	4b24      	ldr	r3, [pc, #144]	; (800580c <HAL_RCC_ClockConfig+0x1b4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d20c      	bcs.n	80057a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005786:	4b21      	ldr	r3, [pc, #132]	; (800580c <HAL_RCC_ClockConfig+0x1b4>)
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800578e:	4b1f      	ldr	r3, [pc, #124]	; (800580c <HAL_RCC_ClockConfig+0x1b4>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d001      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e030      	b.n	8005802 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057ac:	4b18      	ldr	r3, [pc, #96]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	4915      	ldr	r1, [pc, #84]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d009      	beq.n	80057de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057ca:	4b11      	ldr	r3, [pc, #68]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	490d      	ldr	r1, [pc, #52]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057de:	f000 f81d 	bl	800581c <HAL_RCC_GetSysClockFreq>
 80057e2:	4601      	mov	r1, r0
 80057e4:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <HAL_RCC_ClockConfig+0x1b8>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	091b      	lsrs	r3, r3, #4
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	4a09      	ldr	r2, [pc, #36]	; (8005814 <HAL_RCC_ClockConfig+0x1bc>)
 80057f0:	5cd3      	ldrb	r3, [r2, r3]
 80057f2:	fa21 f303 	lsr.w	r3, r1, r3
 80057f6:	4a08      	ldr	r2, [pc, #32]	; (8005818 <HAL_RCC_ClockConfig+0x1c0>)
 80057f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80057fa:	2000      	movs	r0, #0
 80057fc:	f7fe fb94 	bl	8003f28 <HAL_InitTick>

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40023c00 	.word	0x40023c00
 8005810:	40023800 	.word	0x40023800
 8005814:	080073c0 	.word	0x080073c0
 8005818:	20000060 	.word	0x20000060

0800581c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800581c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	607b      	str	r3, [r7, #4]
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	2300      	movs	r3, #0
 800582c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005832:	4b63      	ldr	r3, [pc, #396]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 030c 	and.w	r3, r3, #12
 800583a:	2b04      	cmp	r3, #4
 800583c:	d007      	beq.n	800584e <HAL_RCC_GetSysClockFreq+0x32>
 800583e:	2b08      	cmp	r3, #8
 8005840:	d008      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0x38>
 8005842:	2b00      	cmp	r3, #0
 8005844:	f040 80b4 	bne.w	80059b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005848:	4b5e      	ldr	r3, [pc, #376]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800584a:	60bb      	str	r3, [r7, #8]
       break;
 800584c:	e0b3      	b.n	80059b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800584e:	4b5e      	ldr	r3, [pc, #376]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005850:	60bb      	str	r3, [r7, #8]
      break;
 8005852:	e0b0      	b.n	80059b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005854:	4b5a      	ldr	r3, [pc, #360]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800585c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800585e:	4b58      	ldr	r3, [pc, #352]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d04a      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800586a:	4b55      	ldr	r3, [pc, #340]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	099b      	lsrs	r3, r3, #6
 8005870:	f04f 0400 	mov.w	r4, #0
 8005874:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	ea03 0501 	and.w	r5, r3, r1
 8005880:	ea04 0602 	and.w	r6, r4, r2
 8005884:	4629      	mov	r1, r5
 8005886:	4632      	mov	r2, r6
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	f04f 0400 	mov.w	r4, #0
 8005890:	0154      	lsls	r4, r2, #5
 8005892:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005896:	014b      	lsls	r3, r1, #5
 8005898:	4619      	mov	r1, r3
 800589a:	4622      	mov	r2, r4
 800589c:	1b49      	subs	r1, r1, r5
 800589e:	eb62 0206 	sbc.w	r2, r2, r6
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	f04f 0400 	mov.w	r4, #0
 80058aa:	0194      	lsls	r4, r2, #6
 80058ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80058b0:	018b      	lsls	r3, r1, #6
 80058b2:	1a5b      	subs	r3, r3, r1
 80058b4:	eb64 0402 	sbc.w	r4, r4, r2
 80058b8:	f04f 0100 	mov.w	r1, #0
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	00e2      	lsls	r2, r4, #3
 80058c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80058c6:	00d9      	lsls	r1, r3, #3
 80058c8:	460b      	mov	r3, r1
 80058ca:	4614      	mov	r4, r2
 80058cc:	195b      	adds	r3, r3, r5
 80058ce:	eb44 0406 	adc.w	r4, r4, r6
 80058d2:	f04f 0100 	mov.w	r1, #0
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	0262      	lsls	r2, r4, #9
 80058dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80058e0:	0259      	lsls	r1, r3, #9
 80058e2:	460b      	mov	r3, r1
 80058e4:	4614      	mov	r4, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	4621      	mov	r1, r4
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f04f 0400 	mov.w	r4, #0
 80058f0:	461a      	mov	r2, r3
 80058f2:	4623      	mov	r3, r4
 80058f4:	f7fb f856 	bl	80009a4 <__aeabi_uldivmod>
 80058f8:	4603      	mov	r3, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	e049      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005900:	4b2f      	ldr	r3, [pc, #188]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	099b      	lsrs	r3, r3, #6
 8005906:	f04f 0400 	mov.w	r4, #0
 800590a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	ea03 0501 	and.w	r5, r3, r1
 8005916:	ea04 0602 	and.w	r6, r4, r2
 800591a:	4629      	mov	r1, r5
 800591c:	4632      	mov	r2, r6
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	f04f 0400 	mov.w	r4, #0
 8005926:	0154      	lsls	r4, r2, #5
 8005928:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800592c:	014b      	lsls	r3, r1, #5
 800592e:	4619      	mov	r1, r3
 8005930:	4622      	mov	r2, r4
 8005932:	1b49      	subs	r1, r1, r5
 8005934:	eb62 0206 	sbc.w	r2, r2, r6
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	f04f 0400 	mov.w	r4, #0
 8005940:	0194      	lsls	r4, r2, #6
 8005942:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005946:	018b      	lsls	r3, r1, #6
 8005948:	1a5b      	subs	r3, r3, r1
 800594a:	eb64 0402 	sbc.w	r4, r4, r2
 800594e:	f04f 0100 	mov.w	r1, #0
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	00e2      	lsls	r2, r4, #3
 8005958:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800595c:	00d9      	lsls	r1, r3, #3
 800595e:	460b      	mov	r3, r1
 8005960:	4614      	mov	r4, r2
 8005962:	195b      	adds	r3, r3, r5
 8005964:	eb44 0406 	adc.w	r4, r4, r6
 8005968:	f04f 0100 	mov.w	r1, #0
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	02a2      	lsls	r2, r4, #10
 8005972:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005976:	0299      	lsls	r1, r3, #10
 8005978:	460b      	mov	r3, r1
 800597a:	4614      	mov	r4, r2
 800597c:	4618      	mov	r0, r3
 800597e:	4621      	mov	r1, r4
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f04f 0400 	mov.w	r4, #0
 8005986:	461a      	mov	r2, r3
 8005988:	4623      	mov	r3, r4
 800598a:	f7fb f80b 	bl	80009a4 <__aeabi_uldivmod>
 800598e:	4603      	mov	r3, r0
 8005990:	460c      	mov	r4, r1
 8005992:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005994:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	0c1b      	lsrs	r3, r3, #16
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	3301      	adds	r3, #1
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ac:	60bb      	str	r3, [r7, #8]
      break;
 80059ae:	e002      	b.n	80059b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059b0:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80059b2:	60bb      	str	r3, [r7, #8]
      break;
 80059b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059b6:	68bb      	ldr	r3, [r7, #8]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c0:	40023800 	.word	0x40023800
 80059c4:	00f42400 	.word	0x00f42400
 80059c8:	007a1200 	.word	0x007a1200

080059cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059d0:	4b03      	ldr	r3, [pc, #12]	; (80059e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059d2:	681b      	ldr	r3, [r3, #0]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000060 	.word	0x20000060

080059e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059e8:	f7ff fff0 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 80059ec:	4601      	mov	r1, r0
 80059ee:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	0a9b      	lsrs	r3, r3, #10
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	4a03      	ldr	r2, [pc, #12]	; (8005a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059fa:	5cd3      	ldrb	r3, [r2, r3]
 80059fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40023800 	.word	0x40023800
 8005a08:	080073d0 	.word	0x080073d0

08005a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a10:	f7ff ffdc 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 8005a14:	4601      	mov	r1, r0
 8005a16:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	0b5b      	lsrs	r3, r3, #13
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	4a03      	ldr	r2, [pc, #12]	; (8005a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a22:	5cd3      	ldrb	r3, [r2, r3]
 8005a24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	080073d0 	.word	0x080073d0

08005a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e056      	b.n	8005af4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d106      	bne.n	8005a66 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7fe f895 	bl	8003b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a7c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	ea42 0103 	orr.w	r1, r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	0c1b      	lsrs	r3, r3, #16
 8005ac4:	f003 0104 	and.w	r1, r3, #4
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69da      	ldr	r2, [r3, #28]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b088      	sub	sp, #32
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_SPI_Transmit+0x22>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e11e      	b.n	8005d5c <HAL_SPI_Transmit+0x260>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b26:	f7fe fa43 	bl	8003fb0 <HAL_GetTick>
 8005b2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d002      	beq.n	8005b42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b40:	e103      	b.n	8005d4a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_SPI_Transmit+0x52>
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b52:	e0fa      	b.n	8005d4a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2203      	movs	r2, #3
 8005b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	88fa      	ldrh	r2, [r7, #6]
 8005b6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	88fa      	ldrh	r2, [r7, #6]
 8005b72:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9a:	d107      	bne.n	8005bac <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005baa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d007      	beq.n	8005bca <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd2:	d14b      	bne.n	8005c6c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_SPI_Transmit+0xe6>
 8005bdc:	8afb      	ldrh	r3, [r7, #22]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d13e      	bne.n	8005c60 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	881a      	ldrh	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	1c9a      	adds	r2, r3, #2
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c06:	e02b      	b.n	8005c60 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d112      	bne.n	8005c3c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1a:	881a      	ldrh	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	1c9a      	adds	r2, r3, #2
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c3a:	e011      	b.n	8005c60 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c3c:	f7fe f9b8 	bl	8003fb0 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d803      	bhi.n	8005c54 <HAL_SPI_Transmit+0x158>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	d102      	bne.n	8005c5a <HAL_SPI_Transmit+0x15e>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d102      	bne.n	8005c60 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c5e:	e074      	b.n	8005d4a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1ce      	bne.n	8005c08 <HAL_SPI_Transmit+0x10c>
 8005c6a:	e04c      	b.n	8005d06 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <HAL_SPI_Transmit+0x17e>
 8005c74:	8afb      	ldrh	r3, [r7, #22]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d140      	bne.n	8005cfc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	330c      	adds	r3, #12
 8005c84:	7812      	ldrb	r2, [r2, #0]
 8005c86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ca0:	e02c      	b.n	8005cfc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d113      	bne.n	8005cd8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	330c      	adds	r3, #12
 8005cba:	7812      	ldrb	r2, [r2, #0]
 8005cbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cd6:	e011      	b.n	8005cfc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cd8:	f7fe f96a 	bl	8003fb0 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d803      	bhi.n	8005cf0 <HAL_SPI_Transmit+0x1f4>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cee:	d102      	bne.n	8005cf6 <HAL_SPI_Transmit+0x1fa>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cfa:	e026      	b.n	8005d4a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1cd      	bne.n	8005ca2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 fa44 	bl	8006198 <SPI_EndRxTxTransaction>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10a      	bne.n	8005d3a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d24:	2300      	movs	r3, #0
 8005d26:	613b      	str	r3, [r7, #16]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	613b      	str	r3, [r7, #16]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	613b      	str	r3, [r7, #16]
 8005d38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	77fb      	strb	r3, [r7, #31]
 8005d46:	e000      	b.n	8005d4a <HAL_SPI_Transmit+0x24e>
  }

error:
 8005d48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3720      	adds	r7, #32
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08c      	sub	sp, #48	; 0x30
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d72:	2301      	movs	r3, #1
 8005d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_SPI_TransmitReceive+0x26>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e18a      	b.n	80060a0 <HAL_SPI_TransmitReceive+0x33c>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d92:	f7fe f90d 	bl	8003fb0 <HAL_GetTick>
 8005d96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005da8:	887b      	ldrh	r3, [r7, #2]
 8005daa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d00f      	beq.n	8005dd4 <HAL_SPI_TransmitReceive+0x70>
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dba:	d107      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d103      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0x68>
 8005dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d003      	beq.n	8005dd4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005dcc:	2302      	movs	r3, #2
 8005dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005dd2:	e15b      	b.n	800608c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <HAL_SPI_TransmitReceive+0x82>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <HAL_SPI_TransmitReceive+0x82>
 8005de0:	887b      	ldrh	r3, [r7, #2]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d103      	bne.n	8005dee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005dec:	e14e      	b.n	800608c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d003      	beq.n	8005e02 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2205      	movs	r2, #5
 8005dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	887a      	ldrh	r2, [r7, #2]
 8005e12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	887a      	ldrh	r2, [r7, #2]
 8005e18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	887a      	ldrh	r2, [r7, #2]
 8005e24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	887a      	ldrh	r2, [r7, #2]
 8005e2a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b40      	cmp	r3, #64	; 0x40
 8005e44:	d007      	beq.n	8005e56 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e5e:	d178      	bne.n	8005f52 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <HAL_SPI_TransmitReceive+0x10a>
 8005e68:	8b7b      	ldrh	r3, [r7, #26]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d166      	bne.n	8005f3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	881a      	ldrh	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	1c9a      	adds	r2, r3, #2
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e92:	e053      	b.n	8005f3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d11b      	bne.n	8005eda <HAL_SPI_TransmitReceive+0x176>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d016      	beq.n	8005eda <HAL_SPI_TransmitReceive+0x176>
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d113      	bne.n	8005eda <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	881a      	ldrh	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec2:	1c9a      	adds	r2, r3, #2
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d119      	bne.n	8005f1c <HAL_SPI_TransmitReceive+0x1b8>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d014      	beq.n	8005f1c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	b292      	uxth	r2, r2
 8005efe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	1c9a      	adds	r2, r3, #2
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f1c:	f7fe f848 	bl	8003fb0 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d807      	bhi.n	8005f3c <HAL_SPI_TransmitReceive+0x1d8>
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f32:	d003      	beq.n	8005f3c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005f3a:	e0a7      	b.n	800608c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1a6      	bne.n	8005e94 <HAL_SPI_TransmitReceive+0x130>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1a1      	bne.n	8005e94 <HAL_SPI_TransmitReceive+0x130>
 8005f50:	e07c      	b.n	800604c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_SPI_TransmitReceive+0x1fc>
 8005f5a:	8b7b      	ldrh	r3, [r7, #26]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d16b      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	7812      	ldrb	r2, [r2, #0]
 8005f6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f86:	e057      	b.n	8006038 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d11c      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x26c>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d017      	beq.n	8005fd0 <HAL_SPI_TransmitReceive+0x26c>
 8005fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d114      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	7812      	ldrb	r2, [r2, #0]
 8005fb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d119      	bne.n	8006012 <HAL_SPI_TransmitReceive+0x2ae>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d014      	beq.n	8006012 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800600e:	2301      	movs	r3, #1
 8006010:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006012:	f7fd ffcd 	bl	8003fb0 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800601e:	429a      	cmp	r2, r3
 8006020:	d803      	bhi.n	800602a <HAL_SPI_TransmitReceive+0x2c6>
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d102      	bne.n	8006030 <HAL_SPI_TransmitReceive+0x2cc>
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	2b00      	cmp	r3, #0
 800602e:	d103      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006036:	e029      	b.n	800608c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1a2      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x224>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d19d      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800604c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f8a1 	bl	8006198 <SPI_EndRxTxTransaction>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d006      	beq.n	800606a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006068:	e010      	b.n	800608c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10b      	bne.n	800608a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	e000      	b.n	800608c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800608a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800609c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3730      	adds	r7, #48	; 0x30
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060b6:	b2db      	uxtb	r3, r3
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	4613      	mov	r3, r2
 80060d2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060d4:	e04c      	b.n	8006170 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d048      	beq.n	8006170 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80060de:	f7fd ff67 	bl	8003fb0 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d902      	bls.n	80060f4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d13d      	bne.n	8006170 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006102:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800610c:	d111      	bne.n	8006132 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006116:	d004      	beq.n	8006122 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006120:	d107      	bne.n	8006132 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006130:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800613a:	d10f      	bne.n	800615c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800615a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e00f      	b.n	8006190 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4013      	ands	r3, r2
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	429a      	cmp	r2, r3
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	429a      	cmp	r2, r3
 800618c:	d1a3      	bne.n	80060d6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061a4:	4b1b      	ldr	r3, [pc, #108]	; (8006214 <SPI_EndRxTxTransaction+0x7c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a1b      	ldr	r2, [pc, #108]	; (8006218 <SPI_EndRxTxTransaction+0x80>)
 80061aa:	fba2 2303 	umull	r2, r3, r2, r3
 80061ae:	0d5b      	lsrs	r3, r3, #21
 80061b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061b4:	fb02 f303 	mul.w	r3, r2, r3
 80061b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061c2:	d112      	bne.n	80061ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2200      	movs	r2, #0
 80061cc:	2180      	movs	r1, #128	; 0x80
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f7ff ff78 	bl	80060c4 <SPI_WaitFlagStateUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d016      	beq.n	8006208 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061de:	f043 0220 	orr.w	r2, r3, #32
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e00f      	b.n	800620a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006200:	2b80      	cmp	r3, #128	; 0x80
 8006202:	d0f2      	beq.n	80061ea <SPI_EndRxTxTransaction+0x52>
 8006204:	e000      	b.n	8006208 <SPI_EndRxTxTransaction+0x70>
        break;
 8006206:	bf00      	nop
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000060 	.word	0x20000060
 8006218:	165e9f81 	.word	0x165e9f81

0800621c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e01d      	b.n	800626a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fd fcec 	bl	8003c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f000 fa40 	bl	80066e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006272:	b480      	push	{r7}
 8006274:	b085      	sub	sp, #20
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0201 	orr.w	r2, r2, #1
 8006288:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b06      	cmp	r3, #6
 800629a:	d007      	beq.n	80062ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0201 	bic.w	r2, r2, #1
 80062d0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6a1a      	ldr	r2, [r3, #32]
 80062d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80062dc:	4013      	ands	r3, r2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10f      	bne.n	8006302 <HAL_TIM_Base_Stop_IT+0x48>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	f240 4344 	movw	r3, #1092	; 0x444
 80062ec:	4013      	ands	r3, r2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d107      	bne.n	8006302 <HAL_TIM_Base_Stop_IT+0x48>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0201 	bic.w	r2, r2, #1
 8006300:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b02      	cmp	r3, #2
 8006324:	d122      	bne.n	800636c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b02      	cmp	r3, #2
 8006332:	d11b      	bne.n	800636c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0202 	mvn.w	r2, #2
 800633c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f9a5 	bl	80066a2 <HAL_TIM_IC_CaptureCallback>
 8006358:	e005      	b.n	8006366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f997 	bl	800668e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f9a8 	bl	80066b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b04      	cmp	r3, #4
 8006378:	d122      	bne.n	80063c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d11b      	bne.n	80063c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0204 	mvn.w	r2, #4
 8006390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2202      	movs	r2, #2
 8006396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f97b 	bl	80066a2 <HAL_TIM_IC_CaptureCallback>
 80063ac:	e005      	b.n	80063ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f96d 	bl	800668e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f97e 	bl	80066b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b08      	cmp	r3, #8
 80063cc:	d122      	bne.n	8006414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d11b      	bne.n	8006414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0208 	mvn.w	r2, #8
 80063e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2204      	movs	r2, #4
 80063ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f951 	bl	80066a2 <HAL_TIM_IC_CaptureCallback>
 8006400:	e005      	b.n	800640e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f943 	bl	800668e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f954 	bl	80066b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	2b10      	cmp	r3, #16
 8006420:	d122      	bne.n	8006468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	2b10      	cmp	r3, #16
 800642e:	d11b      	bne.n	8006468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0210 	mvn.w	r2, #16
 8006438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2208      	movs	r2, #8
 800643e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f927 	bl	80066a2 <HAL_TIM_IC_CaptureCallback>
 8006454:	e005      	b.n	8006462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f919 	bl	800668e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f92a 	bl	80066b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b01      	cmp	r3, #1
 8006474:	d10e      	bne.n	8006494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b01      	cmp	r3, #1
 8006482:	d107      	bne.n	8006494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0201 	mvn.w	r2, #1
 800648c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7fc ff50 	bl	8003334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649e:	2b80      	cmp	r3, #128	; 0x80
 80064a0:	d10e      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ac:	2b80      	cmp	r3, #128	; 0x80
 80064ae:	d107      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa99 	bl	80069f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ca:	2b40      	cmp	r3, #64	; 0x40
 80064cc:	d10e      	bne.n	80064ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d8:	2b40      	cmp	r3, #64	; 0x40
 80064da:	d107      	bne.n	80064ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f8ef 	bl	80066ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d10e      	bne.n	8006518 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b20      	cmp	r3, #32
 8006506:	d107      	bne.n	8006518 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f06f 0220 	mvn.w	r2, #32
 8006510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fa63 	bl	80069de <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_TIM_ConfigClockSource+0x18>
 8006534:	2302      	movs	r3, #2
 8006536:	e0a6      	b.n	8006686 <HAL_TIM_ConfigClockSource+0x166>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006556:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800655e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b40      	cmp	r3, #64	; 0x40
 800656e:	d067      	beq.n	8006640 <HAL_TIM_ConfigClockSource+0x120>
 8006570:	2b40      	cmp	r3, #64	; 0x40
 8006572:	d80b      	bhi.n	800658c <HAL_TIM_ConfigClockSource+0x6c>
 8006574:	2b10      	cmp	r3, #16
 8006576:	d073      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x140>
 8006578:	2b10      	cmp	r3, #16
 800657a:	d802      	bhi.n	8006582 <HAL_TIM_ConfigClockSource+0x62>
 800657c:	2b00      	cmp	r3, #0
 800657e:	d06f      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006580:	e078      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006582:	2b20      	cmp	r3, #32
 8006584:	d06c      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x140>
 8006586:	2b30      	cmp	r3, #48	; 0x30
 8006588:	d06a      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800658a:	e073      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800658c:	2b70      	cmp	r3, #112	; 0x70
 800658e:	d00d      	beq.n	80065ac <HAL_TIM_ConfigClockSource+0x8c>
 8006590:	2b70      	cmp	r3, #112	; 0x70
 8006592:	d804      	bhi.n	800659e <HAL_TIM_ConfigClockSource+0x7e>
 8006594:	2b50      	cmp	r3, #80	; 0x50
 8006596:	d033      	beq.n	8006600 <HAL_TIM_ConfigClockSource+0xe0>
 8006598:	2b60      	cmp	r3, #96	; 0x60
 800659a:	d041      	beq.n	8006620 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800659c:	e06a      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800659e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a2:	d066      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x152>
 80065a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a8:	d017      	beq.n	80065da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80065aa:	e063      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	6899      	ldr	r1, [r3, #8]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f000 f9aa 	bl	8006914 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	609a      	str	r2, [r3, #8]
      break;
 80065d8:	e04c      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6899      	ldr	r1, [r3, #8]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f000 f993 	bl	8006914 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065fc:	609a      	str	r2, [r3, #8]
      break;
 80065fe:	e039      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6818      	ldr	r0, [r3, #0]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	6859      	ldr	r1, [r3, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	461a      	mov	r2, r3
 800660e:	f000 f907 	bl	8006820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2150      	movs	r1, #80	; 0x50
 8006618:	4618      	mov	r0, r3
 800661a:	f000 f960 	bl	80068de <TIM_ITRx_SetConfig>
      break;
 800661e:	e029      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	6859      	ldr	r1, [r3, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	461a      	mov	r2, r3
 800662e:	f000 f926 	bl	800687e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2160      	movs	r1, #96	; 0x60
 8006638:	4618      	mov	r0, r3
 800663a:	f000 f950 	bl	80068de <TIM_ITRx_SetConfig>
      break;
 800663e:	e019      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6818      	ldr	r0, [r3, #0]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	6859      	ldr	r1, [r3, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	461a      	mov	r2, r3
 800664e:	f000 f8e7 	bl	8006820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2140      	movs	r1, #64	; 0x40
 8006658:	4618      	mov	r0, r3
 800665a:	f000 f940 	bl	80068de <TIM_ITRx_SetConfig>
      break;
 800665e:	e009      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4619      	mov	r1, r3
 800666a:	4610      	mov	r0, r2
 800666c:	f000 f937 	bl	80068de <TIM_ITRx_SetConfig>
      break;
 8006670:	e000      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
	...

080066e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a40      	ldr	r2, [pc, #256]	; (80067f4 <TIM_Base_SetConfig+0x114>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d013      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066fe:	d00f      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a3d      	ldr	r2, [pc, #244]	; (80067f8 <TIM_Base_SetConfig+0x118>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00b      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a3c      	ldr	r2, [pc, #240]	; (80067fc <TIM_Base_SetConfig+0x11c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d007      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a3b      	ldr	r2, [pc, #236]	; (8006800 <TIM_Base_SetConfig+0x120>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d003      	beq.n	8006720 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a3a      	ldr	r2, [pc, #232]	; (8006804 <TIM_Base_SetConfig+0x124>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d108      	bne.n	8006732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a2f      	ldr	r2, [pc, #188]	; (80067f4 <TIM_Base_SetConfig+0x114>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d02b      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006740:	d027      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a2c      	ldr	r2, [pc, #176]	; (80067f8 <TIM_Base_SetConfig+0x118>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d023      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a2b      	ldr	r2, [pc, #172]	; (80067fc <TIM_Base_SetConfig+0x11c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d01f      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a2a      	ldr	r2, [pc, #168]	; (8006800 <TIM_Base_SetConfig+0x120>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01b      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a29      	ldr	r2, [pc, #164]	; (8006804 <TIM_Base_SetConfig+0x124>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d017      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a28      	ldr	r2, [pc, #160]	; (8006808 <TIM_Base_SetConfig+0x128>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d013      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a27      	ldr	r2, [pc, #156]	; (800680c <TIM_Base_SetConfig+0x12c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00f      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a26      	ldr	r2, [pc, #152]	; (8006810 <TIM_Base_SetConfig+0x130>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00b      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a25      	ldr	r2, [pc, #148]	; (8006814 <TIM_Base_SetConfig+0x134>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d007      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a24      	ldr	r2, [pc, #144]	; (8006818 <TIM_Base_SetConfig+0x138>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a23      	ldr	r2, [pc, #140]	; (800681c <TIM_Base_SetConfig+0x13c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d108      	bne.n	80067a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a0a      	ldr	r2, [pc, #40]	; (80067f4 <TIM_Base_SetConfig+0x114>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d003      	beq.n	80067d8 <TIM_Base_SetConfig+0xf8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a0c      	ldr	r2, [pc, #48]	; (8006804 <TIM_Base_SetConfig+0x124>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d103      	bne.n	80067e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	615a      	str	r2, [r3, #20]
}
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40000400 	.word	0x40000400
 80067fc:	40000800 	.word	0x40000800
 8006800:	40000c00 	.word	0x40000c00
 8006804:	40010400 	.word	0x40010400
 8006808:	40014000 	.word	0x40014000
 800680c:	40014400 	.word	0x40014400
 8006810:	40014800 	.word	0x40014800
 8006814:	40001800 	.word	0x40001800
 8006818:	40001c00 	.word	0x40001c00
 800681c:	40002000 	.word	0x40002000

08006820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f023 0201 	bic.w	r2, r3, #1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800684a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f023 030a 	bic.w	r3, r3, #10
 800685c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4313      	orrs	r3, r2
 8006864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	621a      	str	r2, [r3, #32]
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800687e:	b480      	push	{r7}
 8006880:	b087      	sub	sp, #28
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f023 0210 	bic.w	r2, r3, #16
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	031b      	lsls	r3, r3, #12
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068de:	b480      	push	{r7}
 80068e0:	b085      	sub	sp, #20
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	f043 0307 	orr.w	r3, r3, #7
 8006900:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	609a      	str	r2, [r3, #8]
}
 8006908:	bf00      	nop
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800692e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	021a      	lsls	r2, r3, #8
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	431a      	orrs	r2, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4313      	orrs	r3, r2
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	609a      	str	r2, [r3, #8]
}
 8006948:	bf00      	nop
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006964:	2b01      	cmp	r3, #1
 8006966:	d101      	bne.n	800696c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006968:	2302      	movs	r3, #2
 800696a:	e032      	b.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069a4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b082      	sub	sp, #8
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e03f      	b.n	8006a98 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7fd f935 	bl	8003c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2224      	movs	r2, #36	; 0x24
 8006a36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a48:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fa5a 	bl	8006f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695a      	ldr	r2, [r3, #20]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a6e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a7e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10d      	bne.n	8006af2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f003 0320 	and.w	r3, r3, #32
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d008      	beq.n	8006af2 <HAL_UART_IRQHandler+0x52>
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	f003 0320 	and.w	r3, r3, #32
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f988 	bl	8006e00 <UART_Receive_IT>
      return;
 8006af0:	e0cc      	b.n	8006c8c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 80ab 	beq.w	8006c50 <HAL_UART_IRQHandler+0x1b0>
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d105      	bne.n	8006b10 <HAL_UART_IRQHandler+0x70>
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 80a0 	beq.w	8006c50 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00a      	beq.n	8006b30 <HAL_UART_IRQHandler+0x90>
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b28:	f043 0201 	orr.w	r2, r3, #1
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <HAL_UART_IRQHandler+0xb0>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b48:	f043 0202 	orr.w	r2, r3, #2
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <HAL_UART_IRQHandler+0xd0>
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b68:	f043 0204 	orr.w	r2, r3, #4
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	f003 0308 	and.w	r3, r3, #8
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <HAL_UART_IRQHandler+0xf0>
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	f043 0208 	orr.w	r2, r3, #8
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d078      	beq.n	8006c8a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d007      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x112>
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f927 	bl	8006e00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbc:	2b40      	cmp	r3, #64	; 0x40
 8006bbe:	bf0c      	ite	eq
 8006bc0:	2301      	moveq	r3, #1
 8006bc2:	2300      	movne	r3, #0
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d102      	bne.n	8006bda <HAL_UART_IRQHandler+0x13a>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d031      	beq.n	8006c3e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f870 	bl	8006cc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bea:	2b40      	cmp	r3, #64	; 0x40
 8006bec:	d123      	bne.n	8006c36 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695a      	ldr	r2, [r3, #20]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bfc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d013      	beq.n	8006c2e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0a:	4a22      	ldr	r2, [pc, #136]	; (8006c94 <HAL_UART_IRQHandler+0x1f4>)
 8006c0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fe f8a3 	bl	8004d5e <HAL_DMA_Abort_IT>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d016      	beq.n	8006c4c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c2c:	e00e      	b.n	8006c4c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f83c 	bl	8006cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c34:	e00a      	b.n	8006c4c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f838 	bl	8006cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c3c:	e006      	b.n	8006c4c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f834 	bl	8006cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006c4a:	e01e      	b.n	8006c8a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c4c:	bf00      	nop
    return;
 8006c4e:	e01c      	b.n	8006c8a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d008      	beq.n	8006c6c <HAL_UART_IRQHandler+0x1cc>
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f85d 	bl	8006d24 <UART_Transmit_IT>
    return;
 8006c6a:	e00f      	b.n	8006c8c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <HAL_UART_IRQHandler+0x1ec>
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f8a5 	bl	8006dd0 <UART_EndTransmit_IT>
    return;
 8006c86:	bf00      	nop
 8006c88:	e000      	b.n	8006c8c <HAL_UART_IRQHandler+0x1ec>
    return;
 8006c8a:	bf00      	nop
  }
}
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	08006cfd 	.word	0x08006cfd

08006c98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cd6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	695a      	ldr	r2, [r3, #20]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0201 	bic.w	r2, r2, #1
 8006ce6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f7ff ffc8 	bl	8006cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d1c:	bf00      	nop
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b21      	cmp	r3, #33	; 0x21
 8006d36:	d144      	bne.n	8006dc2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d40:	d11a      	bne.n	8006d78 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d56:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d105      	bne.n	8006d6c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	1c9a      	adds	r2, r3, #2
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	621a      	str	r2, [r3, #32]
 8006d6a:	e00e      	b.n	8006d8a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	621a      	str	r2, [r3, #32]
 8006d76:	e008      	b.n	8006d8a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	1c59      	adds	r1, r3, #1
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	6211      	str	r1, [r2, #32]
 8006d82:	781a      	ldrb	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	4619      	mov	r1, r3
 8006d98:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10f      	bne.n	8006dbe <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e000      	b.n	8006dc4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006dc2:	2302      	movs	r3, #2
  }
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff ff51 	bl	8006c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b22      	cmp	r3, #34	; 0x22
 8006e12:	d171      	bne.n	8006ef8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e1c:	d123      	bne.n	8006e66 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10e      	bne.n	8006e4a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	1c9a      	adds	r2, r3, #2
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	629a      	str	r2, [r3, #40]	; 0x28
 8006e48:	e029      	b.n	8006e9e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	629a      	str	r2, [r3, #40]	; 0x28
 8006e64:	e01b      	b.n	8006e9e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6858      	ldr	r0, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	1c59      	adds	r1, r3, #1
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6291      	str	r1, [r2, #40]	; 0x28
 8006e7e:	b2c2      	uxtb	r2, r0
 8006e80:	701a      	strb	r2, [r3, #0]
 8006e82:	e00c      	b.n	8006e9e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e90:	1c58      	adds	r0, r3, #1
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	6288      	str	r0, [r1, #40]	; 0x28
 8006e96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d120      	bne.n	8006ef4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0220 	bic.w	r2, r2, #32
 8006ec0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ed0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	695a      	ldr	r2, [r3, #20]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0201 	bic.w	r2, r2, #1
 8006ee0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fc fac8 	bl	8003480 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e002      	b.n	8006efa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e000      	b.n	8006efa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006ef8:	2302      	movs	r3, #2
  }
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f04:	b5b0      	push	{r4, r5, r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68da      	ldr	r2, [r3, #12]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	431a      	orrs	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006f44:	f023 030c 	bic.w	r3, r3, #12
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6812      	ldr	r2, [r2, #0]
 8006f4c:	68f9      	ldr	r1, [r7, #12]
 8006f4e:	430b      	orrs	r3, r1
 8006f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699a      	ldr	r2, [r3, #24]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f70:	f040 80e4 	bne.w	800713c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4aab      	ldr	r2, [pc, #684]	; (8007228 <UART_SetConfig+0x324>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d004      	beq.n	8006f88 <UART_SetConfig+0x84>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4aaa      	ldr	r2, [pc, #680]	; (800722c <UART_SetConfig+0x328>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d16c      	bne.n	8007062 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006f88:	f7fe fd40 	bl	8005a0c <HAL_RCC_GetPCLK2Freq>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009a      	lsls	r2, r3, #2
 8006f96:	441a      	add	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa2:	4aa3      	ldr	r2, [pc, #652]	; (8007230 <UART_SetConfig+0x32c>)
 8006fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa8:	095b      	lsrs	r3, r3, #5
 8006faa:	011c      	lsls	r4, r3, #4
 8006fac:	f7fe fd2e 	bl	8005a0c <HAL_RCC_GetPCLK2Freq>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	009a      	lsls	r2, r3, #2
 8006fba:	441a      	add	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	fbb2 f5f3 	udiv	r5, r2, r3
 8006fc6:	f7fe fd21 	bl	8005a0c <HAL_RCC_GetPCLK2Freq>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	4613      	mov	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	009a      	lsls	r2, r3, #2
 8006fd4:	441a      	add	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe0:	4a93      	ldr	r2, [pc, #588]	; (8007230 <UART_SetConfig+0x32c>)
 8006fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	2264      	movs	r2, #100	; 0x64
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	1aeb      	subs	r3, r5, r3
 8006ff0:	00db      	lsls	r3, r3, #3
 8006ff2:	3332      	adds	r3, #50	; 0x32
 8006ff4:	4a8e      	ldr	r2, [pc, #568]	; (8007230 <UART_SetConfig+0x32c>)
 8006ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007002:	441c      	add	r4, r3
 8007004:	f7fe fd02 	bl	8005a0c <HAL_RCC_GetPCLK2Freq>
 8007008:	4602      	mov	r2, r0
 800700a:	4613      	mov	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	009a      	lsls	r2, r3, #2
 8007012:	441a      	add	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	fbb2 f5f3 	udiv	r5, r2, r3
 800701e:	f7fe fcf5 	bl	8005a0c <HAL_RCC_GetPCLK2Freq>
 8007022:	4602      	mov	r2, r0
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009a      	lsls	r2, r3, #2
 800702c:	441a      	add	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	fbb2 f3f3 	udiv	r3, r2, r3
 8007038:	4a7d      	ldr	r2, [pc, #500]	; (8007230 <UART_SetConfig+0x32c>)
 800703a:	fba2 2303 	umull	r2, r3, r2, r3
 800703e:	095b      	lsrs	r3, r3, #5
 8007040:	2264      	movs	r2, #100	; 0x64
 8007042:	fb02 f303 	mul.w	r3, r2, r3
 8007046:	1aeb      	subs	r3, r5, r3
 8007048:	00db      	lsls	r3, r3, #3
 800704a:	3332      	adds	r3, #50	; 0x32
 800704c:	4a78      	ldr	r2, [pc, #480]	; (8007230 <UART_SetConfig+0x32c>)
 800704e:	fba2 2303 	umull	r2, r3, r2, r3
 8007052:	095b      	lsrs	r3, r3, #5
 8007054:	f003 0207 	and.w	r2, r3, #7
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4422      	add	r2, r4
 800705e:	609a      	str	r2, [r3, #8]
 8007060:	e154      	b.n	800730c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007062:	f7fe fcbf 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8007066:	4602      	mov	r2, r0
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	009a      	lsls	r2, r3, #2
 8007070:	441a      	add	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	fbb2 f3f3 	udiv	r3, r2, r3
 800707c:	4a6c      	ldr	r2, [pc, #432]	; (8007230 <UART_SetConfig+0x32c>)
 800707e:	fba2 2303 	umull	r2, r3, r2, r3
 8007082:	095b      	lsrs	r3, r3, #5
 8007084:	011c      	lsls	r4, r3, #4
 8007086:	f7fe fcad 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 800708a:	4602      	mov	r2, r0
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009a      	lsls	r2, r3, #2
 8007094:	441a      	add	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	fbb2 f5f3 	udiv	r5, r2, r3
 80070a0:	f7fe fca0 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 80070a4:	4602      	mov	r2, r0
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	009a      	lsls	r2, r3, #2
 80070ae:	441a      	add	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ba:	4a5d      	ldr	r2, [pc, #372]	; (8007230 <UART_SetConfig+0x32c>)
 80070bc:	fba2 2303 	umull	r2, r3, r2, r3
 80070c0:	095b      	lsrs	r3, r3, #5
 80070c2:	2264      	movs	r2, #100	; 0x64
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
 80070c8:	1aeb      	subs	r3, r5, r3
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	3332      	adds	r3, #50	; 0x32
 80070ce:	4a58      	ldr	r2, [pc, #352]	; (8007230 <UART_SetConfig+0x32c>)
 80070d0:	fba2 2303 	umull	r2, r3, r2, r3
 80070d4:	095b      	lsrs	r3, r3, #5
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070dc:	441c      	add	r4, r3
 80070de:	f7fe fc81 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 80070e2:	4602      	mov	r2, r0
 80070e4:	4613      	mov	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	009a      	lsls	r2, r3, #2
 80070ec:	441a      	add	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80070f8:	f7fe fc74 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 80070fc:	4602      	mov	r2, r0
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009a      	lsls	r2, r3, #2
 8007106:	441a      	add	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007112:	4a47      	ldr	r2, [pc, #284]	; (8007230 <UART_SetConfig+0x32c>)
 8007114:	fba2 2303 	umull	r2, r3, r2, r3
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	2264      	movs	r2, #100	; 0x64
 800711c:	fb02 f303 	mul.w	r3, r2, r3
 8007120:	1aeb      	subs	r3, r5, r3
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	3332      	adds	r3, #50	; 0x32
 8007126:	4a42      	ldr	r2, [pc, #264]	; (8007230 <UART_SetConfig+0x32c>)
 8007128:	fba2 2303 	umull	r2, r3, r2, r3
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	f003 0207 	and.w	r2, r3, #7
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4422      	add	r2, r4
 8007138:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800713a:	e0e7      	b.n	800730c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a39      	ldr	r2, [pc, #228]	; (8007228 <UART_SetConfig+0x324>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d004      	beq.n	8007150 <UART_SetConfig+0x24c>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a38      	ldr	r2, [pc, #224]	; (800722c <UART_SetConfig+0x328>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d171      	bne.n	8007234 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007150:	f7fe fc5c 	bl	8005a0c <HAL_RCC_GetPCLK2Freq>
 8007154:	4602      	mov	r2, r0
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	009a      	lsls	r2, r3, #2
 800715e:	441a      	add	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	fbb2 f3f3 	udiv	r3, r2, r3
 800716a:	4a31      	ldr	r2, [pc, #196]	; (8007230 <UART_SetConfig+0x32c>)
 800716c:	fba2 2303 	umull	r2, r3, r2, r3
 8007170:	095b      	lsrs	r3, r3, #5
 8007172:	011c      	lsls	r4, r3, #4
 8007174:	f7fe fc4a 	bl	8005a0c <HAL_RCC_GetPCLK2Freq>
 8007178:	4602      	mov	r2, r0
 800717a:	4613      	mov	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	009a      	lsls	r2, r3, #2
 8007182:	441a      	add	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	fbb2 f5f3 	udiv	r5, r2, r3
 800718e:	f7fe fc3d 	bl	8005a0c <HAL_RCC_GetPCLK2Freq>
 8007192:	4602      	mov	r2, r0
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	009a      	lsls	r2, r3, #2
 800719c:	441a      	add	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a8:	4a21      	ldr	r2, [pc, #132]	; (8007230 <UART_SetConfig+0x32c>)
 80071aa:	fba2 2303 	umull	r2, r3, r2, r3
 80071ae:	095b      	lsrs	r3, r3, #5
 80071b0:	2264      	movs	r2, #100	; 0x64
 80071b2:	fb02 f303 	mul.w	r3, r2, r3
 80071b6:	1aeb      	subs	r3, r5, r3
 80071b8:	011b      	lsls	r3, r3, #4
 80071ba:	3332      	adds	r3, #50	; 0x32
 80071bc:	4a1c      	ldr	r2, [pc, #112]	; (8007230 <UART_SetConfig+0x32c>)
 80071be:	fba2 2303 	umull	r2, r3, r2, r3
 80071c2:	095b      	lsrs	r3, r3, #5
 80071c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071c8:	441c      	add	r4, r3
 80071ca:	f7fe fc1f 	bl	8005a0c <HAL_RCC_GetPCLK2Freq>
 80071ce:	4602      	mov	r2, r0
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	009a      	lsls	r2, r3, #2
 80071d8:	441a      	add	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80071e4:	f7fe fc12 	bl	8005a0c <HAL_RCC_GetPCLK2Freq>
 80071e8:	4602      	mov	r2, r0
 80071ea:	4613      	mov	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	009a      	lsls	r2, r3, #2
 80071f2:	441a      	add	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fe:	4a0c      	ldr	r2, [pc, #48]	; (8007230 <UART_SetConfig+0x32c>)
 8007200:	fba2 2303 	umull	r2, r3, r2, r3
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	2264      	movs	r2, #100	; 0x64
 8007208:	fb02 f303 	mul.w	r3, r2, r3
 800720c:	1aeb      	subs	r3, r5, r3
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	3332      	adds	r3, #50	; 0x32
 8007212:	4a07      	ldr	r2, [pc, #28]	; (8007230 <UART_SetConfig+0x32c>)
 8007214:	fba2 2303 	umull	r2, r3, r2, r3
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	f003 020f 	and.w	r2, r3, #15
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4422      	add	r2, r4
 8007224:	609a      	str	r2, [r3, #8]
 8007226:	e071      	b.n	800730c <UART_SetConfig+0x408>
 8007228:	40011000 	.word	0x40011000
 800722c:	40011400 	.word	0x40011400
 8007230:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007234:	f7fe fbd6 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8007238:	4602      	mov	r2, r0
 800723a:	4613      	mov	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	009a      	lsls	r2, r3, #2
 8007242:	441a      	add	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	fbb2 f3f3 	udiv	r3, r2, r3
 800724e:	4a31      	ldr	r2, [pc, #196]	; (8007314 <UART_SetConfig+0x410>)
 8007250:	fba2 2303 	umull	r2, r3, r2, r3
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	011c      	lsls	r4, r3, #4
 8007258:	f7fe fbc4 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 800725c:	4602      	mov	r2, r0
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	009a      	lsls	r2, r3, #2
 8007266:	441a      	add	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	fbb2 f5f3 	udiv	r5, r2, r3
 8007272:	f7fe fbb7 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8007276:	4602      	mov	r2, r0
 8007278:	4613      	mov	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	009a      	lsls	r2, r3, #2
 8007280:	441a      	add	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	fbb2 f3f3 	udiv	r3, r2, r3
 800728c:	4a21      	ldr	r2, [pc, #132]	; (8007314 <UART_SetConfig+0x410>)
 800728e:	fba2 2303 	umull	r2, r3, r2, r3
 8007292:	095b      	lsrs	r3, r3, #5
 8007294:	2264      	movs	r2, #100	; 0x64
 8007296:	fb02 f303 	mul.w	r3, r2, r3
 800729a:	1aeb      	subs	r3, r5, r3
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	3332      	adds	r3, #50	; 0x32
 80072a0:	4a1c      	ldr	r2, [pc, #112]	; (8007314 <UART_SetConfig+0x410>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	095b      	lsrs	r3, r3, #5
 80072a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072ac:	441c      	add	r4, r3
 80072ae:	f7fe fb99 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4613      	mov	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	009a      	lsls	r2, r3, #2
 80072bc:	441a      	add	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	fbb2 f5f3 	udiv	r5, r2, r3
 80072c8:	f7fe fb8c 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 80072cc:	4602      	mov	r2, r0
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009a      	lsls	r2, r3, #2
 80072d6:	441a      	add	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e2:	4a0c      	ldr	r2, [pc, #48]	; (8007314 <UART_SetConfig+0x410>)
 80072e4:	fba2 2303 	umull	r2, r3, r2, r3
 80072e8:	095b      	lsrs	r3, r3, #5
 80072ea:	2264      	movs	r2, #100	; 0x64
 80072ec:	fb02 f303 	mul.w	r3, r2, r3
 80072f0:	1aeb      	subs	r3, r5, r3
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	3332      	adds	r3, #50	; 0x32
 80072f6:	4a07      	ldr	r2, [pc, #28]	; (8007314 <UART_SetConfig+0x410>)
 80072f8:	fba2 2303 	umull	r2, r3, r2, r3
 80072fc:	095b      	lsrs	r3, r3, #5
 80072fe:	f003 020f 	and.w	r2, r3, #15
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4422      	add	r2, r4
 8007308:	609a      	str	r2, [r3, #8]
}
 800730a:	e7ff      	b.n	800730c <UART_SetConfig+0x408>
 800730c:	bf00      	nop
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bdb0      	pop	{r4, r5, r7, pc}
 8007314:	51eb851f 	.word	0x51eb851f

08007318 <__libc_init_array>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	4e0d      	ldr	r6, [pc, #52]	; (8007350 <__libc_init_array+0x38>)
 800731c:	4c0d      	ldr	r4, [pc, #52]	; (8007354 <__libc_init_array+0x3c>)
 800731e:	1ba4      	subs	r4, r4, r6
 8007320:	10a4      	asrs	r4, r4, #2
 8007322:	2500      	movs	r5, #0
 8007324:	42a5      	cmp	r5, r4
 8007326:	d109      	bne.n	800733c <__libc_init_array+0x24>
 8007328:	4e0b      	ldr	r6, [pc, #44]	; (8007358 <__libc_init_array+0x40>)
 800732a:	4c0c      	ldr	r4, [pc, #48]	; (800735c <__libc_init_array+0x44>)
 800732c:	f000 f820 	bl	8007370 <_init>
 8007330:	1ba4      	subs	r4, r4, r6
 8007332:	10a4      	asrs	r4, r4, #2
 8007334:	2500      	movs	r5, #0
 8007336:	42a5      	cmp	r5, r4
 8007338:	d105      	bne.n	8007346 <__libc_init_array+0x2e>
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007340:	4798      	blx	r3
 8007342:	3501      	adds	r5, #1
 8007344:	e7ee      	b.n	8007324 <__libc_init_array+0xc>
 8007346:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800734a:	4798      	blx	r3
 800734c:	3501      	adds	r5, #1
 800734e:	e7f2      	b.n	8007336 <__libc_init_array+0x1e>
 8007350:	080073e0 	.word	0x080073e0
 8007354:	080073e0 	.word	0x080073e0
 8007358:	080073e0 	.word	0x080073e0
 800735c:	080073e4 	.word	0x080073e4

08007360 <memset>:
 8007360:	4402      	add	r2, r0
 8007362:	4603      	mov	r3, r0
 8007364:	4293      	cmp	r3, r2
 8007366:	d100      	bne.n	800736a <memset+0xa>
 8007368:	4770      	bx	lr
 800736a:	f803 1b01 	strb.w	r1, [r3], #1
 800736e:	e7f9      	b.n	8007364 <memset+0x4>

08007370 <_init>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	bf00      	nop
 8007374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007376:	bc08      	pop	{r3}
 8007378:	469e      	mov	lr, r3
 800737a:	4770      	bx	lr

0800737c <_fini>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	bf00      	nop
 8007380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007382:	bc08      	pop	{r3}
 8007384:	469e      	mov	lr, r3
 8007386:	4770      	bx	lr
