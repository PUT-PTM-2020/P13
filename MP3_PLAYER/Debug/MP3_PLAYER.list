
MP3_PLAYER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008018  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001e21c  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080263c4  080263c4  000400c8  2**0
                  CONTENTS
  4 .ARM          00000008  080263c4  080263c4  000363c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080263cc  080263cc  000400c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080263cc  080263cc  000363cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080263d0  080263d0  000363d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080263d4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  200000c8  0802649c  000400c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  0802649c  000405e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fc5  00000000  00000000  000400f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bde  00000000  00000000  000540bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001410  00000000  00000000  00056ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002407e  00000000  00000000  000580b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000f4ec  00000000  00000000  0007c12e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d6645  00000000  00000000  0008b61a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00161c5f  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000012a0  00000000  00000000  00161ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00005ddc  00000000  00000000  00162f80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008190 	.word	0x08008190

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	08008190 	.word	0x08008190

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <DESELECT>:

static
inline void DESELECT(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <xmit_spi>:

extern SPI_HandleTypeDef hspi3;

static
void xmit_spi(BYTE Data)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8000d82:	bf00      	nop
 8000d84:	4808      	ldr	r0, [pc, #32]	; (8000da8 <xmit_spi+0x30>)
 8000d86:	f004 fff1 	bl	8005d6c <HAL_SPI_GetState>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d1f9      	bne.n	8000d84 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi3, &Data, 1, 5000);
 8000d90:	1df9      	adds	r1, r7, #7
 8000d92:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d96:	2201      	movs	r2, #1
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <xmit_spi+0x30>)
 8000d9a:	f004 fd11 	bl	80057c0 <HAL_SPI_Transmit>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200001bc 	.word	0x200001bc

08000dac <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8000db2:	23ff      	movs	r3, #255	; 0xff
 8000db4:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8000dba:	bf00      	nop
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <rcvr_spi+0x38>)
 8000dbe:	f004 ffd5 	bl	8005d6c <HAL_SPI_GetState>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d1f9      	bne.n	8000dbc <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi3, &Dummy, &Data, 1, 5000);
 8000dc8:	1dba      	adds	r2, r7, #6
 8000dca:	1df9      	adds	r1, r7, #7
 8000dcc:	f241 3388 	movw	r3, #5000	; 0x1388
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <rcvr_spi+0x38>)
 8000dd6:	f004 fe27 	bl	8005a28 <HAL_SPI_TransmitReceive>

	return Data;
 8000dda:	79bb      	ldrb	r3, [r7, #6]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200001bc 	.word	0x200001bc

08000de8 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8000df0:	f7ff ffdc 	bl	8000dac <rcvr_spi>
 8000df4:	4603      	mov	r3, r0
 8000df6:	461a      	mov	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	701a      	strb	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <wait_ready+0x34>)
 8000e0c:	2232      	movs	r2, #50	; 0x32
 8000e0e:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8000e10:	f7ff ffcc 	bl	8000dac <rcvr_spi>
	do
		res = rcvr_spi();
 8000e14:	f7ff ffca 	bl	8000dac <rcvr_spi>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2bff      	cmp	r3, #255	; 0xff
 8000e20:	d004      	beq.n	8000e2c <wait_ready+0x28>
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <wait_ready+0x34>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1f3      	bne.n	8000e14 <wait_ready+0x10>

	return res;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000e5 	.word	0x200000e5

08000e3c <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8000e42:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e46:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8000e48:	f7ff ff8f 	bl	8000d6a <DESELECT>

	for (i = 0; i < 10; i++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e005      	b.n	8000e5e <power_on+0x22>
		xmit_spi(0xFF);
 8000e52:	20ff      	movs	r0, #255	; 0xff
 8000e54:	f7ff ff90 	bl	8000d78 <xmit_spi>
	for (i = 0; i < 10; i++)
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	2b09      	cmp	r3, #9
 8000e62:	d9f6      	bls.n	8000e52 <power_on+0x16>

	SELECT();
 8000e64:	f7ff ff7a 	bl	8000d5c <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8000e68:	2340      	movs	r3, #64	; 0x40
 8000e6a:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8000e7c:	2395      	movs	r3, #149	; 0x95
 8000e7e:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e00b      	b.n	8000e9e <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	f107 0210 	add.w	r2, r7, #16
 8000e8c:	4413      	add	r3, r2
 8000e8e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff70 	bl	8000d78 <xmit_spi>
	for (i = 0; i < 6; i++)
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	2b05      	cmp	r3, #5
 8000ea2:	d9f0      	bls.n	8000e86 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000ea4:	e002      	b.n	8000eac <power_on+0x70>
		Count--;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000eac:	f7ff ff7e 	bl	8000dac <rcvr_spi>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d002      	beq.n	8000ebc <power_on+0x80>
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1f4      	bne.n	8000ea6 <power_on+0x6a>

	DESELECT();
 8000ebc:	f7ff ff55 	bl	8000d6a <DESELECT>
	xmit_spi(0XFF);
 8000ec0:	20ff      	movs	r0, #255	; 0xff
 8000ec2:	f7ff ff59 	bl	8000d78 <xmit_spi>

	PowerFlag = 1;
 8000ec6:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <power_on+0x98>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	701a      	strb	r2, [r3, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200000e7 	.word	0x200000e7

08000ed8 <power_off>:

static
void power_off(void) {
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <power_off+0x14>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	200000e7 	.word	0x200000e7

08000ef0 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <rcvr_datablock+0x68>)
 8000efc:	220a      	movs	r2, #10
 8000efe:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000f00:	f7ff ff54 	bl	8000dac <rcvr_spi>
 8000f04:	4603      	mov	r3, r0
 8000f06:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	2bff      	cmp	r3, #255	; 0xff
 8000f0c:	d104      	bne.n	8000f18 <rcvr_datablock+0x28>
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <rcvr_datablock+0x68>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f3      	bne.n	8000f00 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	2bfe      	cmp	r3, #254	; 0xfe
 8000f1c:	d001      	beq.n	8000f22 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e016      	b.n	8000f50 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5d 	bl	8000de8 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff57 	bl	8000de8 <rcvr_spi_m>
	} while (btr -= 2);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	3b02      	subs	r3, #2
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1ed      	bne.n	8000f22 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8000f46:	f7ff ff31 	bl	8000dac <rcvr_spi>
	rcvr_spi();
 8000f4a:	f7ff ff2f 	bl	8000dac <rcvr_spi>

	return TRUE; /* Return with success */
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200000e4 	.word	0x200000e4

08000f5c <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000f6c:	f7ff ff4a 	bl	8000e04 <wait_ready>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2bff      	cmp	r3, #255	; 0xff
 8000f74:	d001      	beq.n	8000f7a <xmit_datablock+0x1e>
		return FALSE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e040      	b.n	8000ffc <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fefb 	bl	8000d78 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000f82:	78fb      	ldrb	r3, [r7, #3]
 8000f84:	2bfd      	cmp	r3, #253	; 0xfd
 8000f86:	d031      	beq.n	8000fec <xmit_datablock+0x90>
		wc = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff feef 	bl	8000d78 <xmit_spi>
			xmit_spi(*buff++);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fee8 	bl	8000d78 <xmit_spi>
		} while (--wc);
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	73bb      	strb	r3, [r7, #14]
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1eb      	bne.n	8000f8c <xmit_datablock+0x30>

		rcvr_spi();
 8000fb4:	f7ff fefa 	bl	8000dac <rcvr_spi>
		rcvr_spi();
 8000fb8:	f7ff fef8 	bl	8000dac <rcvr_spi>

		while (i <= 64) {
 8000fbc:	e00b      	b.n	8000fd6 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000fbe:	f7ff fef5 	bl	8000dac <rcvr_spi>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	f003 031f 	and.w	r3, r3, #31
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d006      	beq.n	8000fde <xmit_datablock+0x82>
				break;
			i++;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	2b40      	cmp	r3, #64	; 0x40
 8000fda:	d9f0      	bls.n	8000fbe <xmit_datablock+0x62>
 8000fdc:	e000      	b.n	8000fe0 <xmit_datablock+0x84>
				break;
 8000fde:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000fe0:	bf00      	nop
 8000fe2:	f7ff fee3 	bl	8000dac <rcvr_spi>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0fa      	beq.n	8000fe2 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	d101      	bne.n	8000ffa <xmit_datablock+0x9e>
		return TRUE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <xmit_datablock+0xa0>
	else
		return FALSE;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8001010:	f7ff fef8 	bl	8000e04 <wait_ready>
 8001014:	4603      	mov	r3, r0
 8001016:	2bff      	cmp	r3, #255	; 0xff
 8001018:	d001      	beq.n	800101e <send_cmd+0x1a>
		return 0xFF;
 800101a:	23ff      	movs	r3, #255	; 0xff
 800101c:	e040      	b.n	80010a0 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fea9 	bl	8000d78 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	0e1b      	lsrs	r3, r3, #24
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fea3 	bl	8000d78 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	0c1b      	lsrs	r3, r3, #16
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fe9d 	bl	8000d78 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fe97 	bl	8000d78 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe92 	bl	8000d78 <xmit_spi>
	n = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b40      	cmp	r3, #64	; 0x40
 800105c:	d101      	bne.n	8001062 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 800105e:	2395      	movs	r3, #149	; 0x95
 8001060:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b48      	cmp	r3, #72	; 0x48
 8001066:	d101      	bne.n	800106c <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8001068:	2387      	movs	r3, #135	; 0x87
 800106a:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fe82 	bl	8000d78 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	2b4c      	cmp	r3, #76	; 0x4c
 8001078:	d101      	bne.n	800107e <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 800107a:	f7ff fe97 	bl	8000dac <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 800107e:	230a      	movs	r3, #10
 8001080:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8001082:	f7ff fe93 	bl	8000dac <rcvr_spi>
 8001086:	4603      	mov	r3, r0
 8001088:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 800108a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800108e:	2b00      	cmp	r3, #0
 8001090:	da05      	bge.n	800109e <send_cmd+0x9a>
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	3b01      	subs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f1      	bne.n	8001082 <send_cmd+0x7e>

	return res; /* Return with the response value */
 800109e:	7bbb      	ldrb	r3, [r7, #14]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80010b8:	2301      	movs	r3, #1
 80010ba:	e0d5      	b.n	8001268 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 80010bc:	4b6c      	ldr	r3, [pc, #432]	; (8001270 <disk_initialize+0x1c8>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 80010ca:	4b69      	ldr	r3, [pc, #420]	; (8001270 <disk_initialize+0x1c8>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	e0ca      	b.n	8001268 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 80010d2:	f7ff feb3 	bl	8000e3c <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 80010d6:	f7ff fe41 	bl	8000d5c <SELECT>
	ty = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 80010de:	2100      	movs	r1, #0
 80010e0:	2040      	movs	r0, #64	; 0x40
 80010e2:	f7ff ff8f 	bl	8001004 <send_cmd>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	f040 80a5 	bne.w	8001238 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 80010ee:	4b61      	ldr	r3, [pc, #388]	; (8001274 <disk_initialize+0x1cc>)
 80010f0:	2264      	movs	r2, #100	; 0x64
 80010f2:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 80010f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010f8:	2048      	movs	r0, #72	; 0x48
 80010fa:	f7ff ff83 	bl	8001004 <send_cmd>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b01      	cmp	r3, #1
 8001102:	d158      	bne.n	80011b6 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e00c      	b.n	8001124 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800110a:	7bfc      	ldrb	r4, [r7, #15]
 800110c:	f7ff fe4e 	bl	8000dac <rcvr_spi>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4423      	add	r3, r4
 800111a:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	3301      	adds	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d9ef      	bls.n	800110a <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 800112a:	7abb      	ldrb	r3, [r7, #10]
 800112c:	2b01      	cmp	r3, #1
 800112e:	f040 8083 	bne.w	8001238 <disk_initialize+0x190>
 8001132:	7afb      	ldrb	r3, [r7, #11]
 8001134:	2baa      	cmp	r3, #170	; 0xaa
 8001136:	d17f      	bne.n	8001238 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8001138:	2100      	movs	r1, #0
 800113a:	2077      	movs	r0, #119	; 0x77
 800113c:	f7ff ff62 	bl	8001004 <send_cmd>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d807      	bhi.n	8001156 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8001146:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800114a:	2069      	movs	r0, #105	; 0x69
 800114c:	f7ff ff5a 	bl	8001004 <send_cmd>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d005      	beq.n	8001162 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8001156:	4b47      	ldr	r3, [pc, #284]	; (8001274 <disk_initialize+0x1cc>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1eb      	bne.n	8001138 <disk_initialize+0x90>
 8001160:	e000      	b.n	8001164 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8001162:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8001164:	4b43      	ldr	r3, [pc, #268]	; (8001274 <disk_initialize+0x1cc>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d064      	beq.n	8001238 <disk_initialize+0x190>
 800116e:	2100      	movs	r1, #0
 8001170:	207a      	movs	r0, #122	; 0x7a
 8001172:	f7ff ff47 	bl	8001004 <send_cmd>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d15d      	bne.n	8001238 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	e00c      	b.n	800119c <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8001182:	7bfc      	ldrb	r4, [r7, #15]
 8001184:	f7ff fe12 	bl	8000dac <rcvr_spi>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4423      	add	r3, r4
 8001192:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	3301      	adds	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d9ef      	bls.n	8001182 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 80011a2:	7a3b      	ldrb	r3, [r7, #8]
 80011a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <disk_initialize+0x108>
 80011ac:	2306      	movs	r3, #6
 80011ae:	e000      	b.n	80011b2 <disk_initialize+0x10a>
 80011b0:	2302      	movs	r3, #2
 80011b2:	73bb      	strb	r3, [r7, #14]
 80011b4:	e040      	b.n	8001238 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80011b6:	2100      	movs	r1, #0
 80011b8:	2077      	movs	r0, #119	; 0x77
 80011ba:	f7ff ff23 	bl	8001004 <send_cmd>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d808      	bhi.n	80011d6 <disk_initialize+0x12e>
 80011c4:	2100      	movs	r1, #0
 80011c6:	2069      	movs	r0, #105	; 0x69
 80011c8:	f7ff ff1c 	bl	8001004 <send_cmd>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d801      	bhi.n	80011d6 <disk_initialize+0x12e>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e000      	b.n	80011d8 <disk_initialize+0x130>
 80011d6:	2301      	movs	r3, #1
 80011d8:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 80011da:	7bbb      	ldrb	r3, [r7, #14]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d10e      	bne.n	80011fe <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 80011e0:	2100      	movs	r1, #0
 80011e2:	2077      	movs	r0, #119	; 0x77
 80011e4:	f7ff ff0e 	bl	8001004 <send_cmd>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d80e      	bhi.n	800120c <disk_initialize+0x164>
 80011ee:	2100      	movs	r1, #0
 80011f0:	2069      	movs	r0, #105	; 0x69
 80011f2:	f7ff ff07 	bl	8001004 <send_cmd>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d107      	bne.n	800120c <disk_initialize+0x164>
						break; /* ACMD41 */
 80011fc:	e00d      	b.n	800121a <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 80011fe:	2100      	movs	r1, #0
 8001200:	2041      	movs	r0, #65	; 0x41
 8001202:	f7ff feff 	bl	8001004 <send_cmd>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <disk_initialize+0x1cc>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1e1      	bne.n	80011da <disk_initialize+0x132>
 8001216:	e000      	b.n	800121a <disk_initialize+0x172>
						break; /* CMD1 */
 8001218:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <disk_initialize+0x1cc>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d007      	beq.n	8001234 <disk_initialize+0x18c>
 8001224:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001228:	2050      	movs	r0, #80	; 0x50
 800122a:	f7ff feeb 	bl	8001004 <send_cmd>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <disk_initialize+0x190>
				ty = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8001238:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <disk_initialize+0x1d0>)
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 800123e:	f7ff fd94 	bl	8000d6a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8001242:	f7ff fdb3 	bl	8000dac <rcvr_spi>

	if (ty) /* Initialization succeded */
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d008      	beq.n	800125e <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <disk_initialize+0x1c8>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f023 0301 	bic.w	r3, r3, #1
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <disk_initialize+0x1c8>)
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	e001      	b.n	8001262 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 800125e:	f7ff fe3b 	bl	8000ed8 <power_off>

	return Stat;
 8001262:	4b03      	ldr	r3, [pc, #12]	; (8001270 <disk_initialize+0x1c8>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	20000000 	.word	0x20000000
 8001274:	200000e4 	.word	0x200000e4
 8001278:	200000e6 	.word	0x200000e6

0800127c <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 800128c:	2301      	movs	r3, #1
 800128e:	e002      	b.n	8001296 <disk_status+0x1a>
	return Stat;
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <disk_status+0x28>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b2db      	uxtb	r3, r3
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000000 	.word	0x20000000

080012a8 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <disk_read+0x1c>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <disk_read+0x20>
		return RES_PARERR;
 80012c4:	2304      	movs	r3, #4
 80012c6:	e051      	b.n	800136c <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <disk_read+0xcc>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <disk_read+0x32>
		return RES_NOTRDY;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e048      	b.n	800136c <disk_read+0xc4>

	if (!(CardType & 4))
 80012da:	4b27      	ldr	r3, [pc, #156]	; (8001378 <disk_read+0xd0>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	025b      	lsls	r3, r3, #9
 80012ea:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80012ec:	f7ff fd36 	bl	8000d5c <SELECT>

	if (count == 1) { /* Single block read */
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d111      	bne.n	800131a <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	2051      	movs	r0, #81	; 0x51
 80012fa:	f7ff fe83 	bl	8001004 <send_cmd>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d129      	bne.n	8001358 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8001304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	f7ff fdf1 	bl	8000ef0 <rcvr_datablock>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d021      	beq.n	8001358 <disk_read+0xb0>
			count = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	e01e      	b.n	8001358 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	2052      	movs	r0, #82	; 0x52
 800131e:	f7ff fe71 	bl	8001004 <send_cmd>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d117      	bne.n	8001358 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8001328:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132c:	68b8      	ldr	r0, [r7, #8]
 800132e:	f7ff fddf 	bl	8000ef0 <rcvr_datablock>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00a      	beq.n	800134e <disk_read+0xa6>
					break;
				buff += 512;
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800133e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1ed      	bne.n	8001328 <disk_read+0x80>
 800134c:	e000      	b.n	8001350 <disk_read+0xa8>
					break;
 800134e:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8001350:	2100      	movs	r1, #0
 8001352:	204c      	movs	r0, #76	; 0x4c
 8001354:	f7ff fe56 	bl	8001004 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8001358:	f7ff fd07 	bl	8000d6a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800135c:	f7ff fd26 	bl	8000dac <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf14      	ite	ne
 8001366:	2301      	movne	r3, #1
 8001368:	2300      	moveq	r3, #0
 800136a:	b2db      	uxtb	r3, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000000 	.word	0x20000000
 8001378:	200000e6 	.word	0x200000e6

0800137c <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	4603      	mov	r3, r0
 800138a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <disk_write+0x1c>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <disk_write+0x20>
		return RES_PARERR;
 8001398:	2304      	movs	r3, #4
 800139a:	e06b      	b.n	8001474 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 800139c:	4b37      	ldr	r3, [pc, #220]	; (800147c <disk_write+0x100>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <disk_write+0x32>
		return RES_NOTRDY;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e062      	b.n	8001474 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 80013ae:	4b33      	ldr	r3, [pc, #204]	; (800147c <disk_write+0x100>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <disk_write+0x44>
		return RES_WRPRT;
 80013bc:	2302      	movs	r3, #2
 80013be:	e059      	b.n	8001474 <disk_write+0xf8>

	if (!(CardType & 4))
 80013c0:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <disk_write+0x104>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	025b      	lsls	r3, r3, #9
 80013d0:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80013d2:	f7ff fcc3 	bl	8000d5c <SELECT>

	if (count == 1) { /* Single block write */
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d110      	bne.n	80013fe <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	2058      	movs	r0, #88	; 0x58
 80013e0:	f7ff fe10 	bl	8001004 <send_cmd>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d13a      	bne.n	8001460 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 80013ea:	21fe      	movs	r1, #254	; 0xfe
 80013ec:	68b8      	ldr	r0, [r7, #8]
 80013ee:	f7ff fdb5 	bl	8000f5c <xmit_datablock>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d033      	beq.n	8001460 <disk_write+0xe4>
			count = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	e030      	b.n	8001460 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <disk_write+0x104>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <disk_write+0x9e>
			send_cmd(CMD55, 0);
 800140a:	2100      	movs	r1, #0
 800140c:	2077      	movs	r0, #119	; 0x77
 800140e:	f7ff fdf9 	bl	8001004 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8001412:	6839      	ldr	r1, [r7, #0]
 8001414:	2057      	movs	r0, #87	; 0x57
 8001416:	f7ff fdf5 	bl	8001004 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	2059      	movs	r0, #89	; 0x59
 800141e:	f7ff fdf1 	bl	8001004 <send_cmd>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d11b      	bne.n	8001460 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8001428:	21fc      	movs	r1, #252	; 0xfc
 800142a:	68b8      	ldr	r0, [r7, #8]
 800142c:	f7ff fd96 	bl	8000f5c <xmit_datablock>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00a      	beq.n	800144c <disk_write+0xd0>
					break;
				buff += 512;
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800143c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	3b01      	subs	r3, #1
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1ee      	bne.n	8001428 <disk_write+0xac>
 800144a:	e000      	b.n	800144e <disk_write+0xd2>
					break;
 800144c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 800144e:	21fd      	movs	r1, #253	; 0xfd
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff fd83 	bl	8000f5c <xmit_datablock>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <disk_write+0xe4>
				count = 1;
 800145c:	2301      	movs	r3, #1
 800145e:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8001460:	f7ff fc83 	bl	8000d6a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8001464:	f7ff fca2 	bl	8000dac <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	bf14      	ite	ne
 800146e:	2301      	movne	r3, #1
 8001470:	2300      	moveq	r3, #0
 8001472:	b2db      	uxtb	r3, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000000 	.word	0x20000000
 8001480:	200000e6 	.word	0x200000e6

08001484 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <disk_timerproc+0x44>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
	if (n)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d005      	beq.n	80014a2 <disk_timerproc+0x1e>
		Timer1 = --n;
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	3b01      	subs	r3, #1
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <disk_timerproc+0x44>)
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <disk_timerproc+0x48>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
	if (n)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <disk_timerproc+0x36>
		Timer2 = --n;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	71fb      	strb	r3, [r7, #7]
 80014b4:	4a05      	ldr	r2, [pc, #20]	; (80014cc <disk_timerproc+0x48>)
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	7013      	strb	r3, [r2, #0]

}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	200000e4 	.word	0x200000e4
 80014cc:	200000e5 	.word	0x200000e5

080014d0 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	++sdcard_timer;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <sdcard_systick_timerproc+0x2c>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	3301      	adds	r3, #1
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <sdcard_systick_timerproc+0x2c>)
 80014e0:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <sdcard_systick_timerproc+0x2c>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d904      	bls.n	80014f6 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <sdcard_systick_timerproc+0x2c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 80014f2:	f7ff ffc7 	bl	8001484 <disk_timerproc>
	}
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000124 	.word	0x20000124

08001500 <ld_word>:
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3301      	adds	r3, #1
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	81fb      	strh	r3, [r7, #14]
 8001510:	89fb      	ldrh	r3, [r7, #14]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	b21a      	sxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21b      	sxth	r3, r3
 8001520:	81fb      	strh	r3, [r7, #14]
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <ld_dword>:
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3303      	adds	r3, #3
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	3202      	adds	r2, #2
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	3201      	adds	r2, #1
 8001556:	7812      	ldrb	r2, [r2, #0]
 8001558:	4313      	orrs	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	7812      	ldrb	r2, [r2, #0]
 8001564:	4313      	orrs	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <st_word>:
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	807b      	strh	r3, [r7, #2]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	887a      	ldrh	r2, [r7, #2]
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <st_dword>:
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	701a      	strb	r2, [r3, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	0a1b      	lsrs	r3, r3, #8
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <mem_set>:
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	617a      	str	r2, [r7, #20]
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f3      	bne.n	8001614 <mem_set+0x10>
 800162c:	bf00      	nop
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <mem_cmp>:
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	61fa      	str	r2, [r7, #28]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	61ba      	str	r2, [r7, #24]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	1acb      	subs	r3, r1, r3
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3b01      	subs	r3, #1
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <mem_cmp+0x40>
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0eb      	beq.n	8001650 <mem_cmp+0x18>
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <chk_chr>:
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
 8001690:	e002      	b.n	8001698 <chk_chr+0x12>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3301      	adds	r3, #1
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <chk_chr+0x26>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d1f2      	bne.n	8001692 <chk_chr+0xc>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <dbc_1st>:
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	2281      	movs	r2, #129	; 0x81
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d30f      	bcc.n	80016ee <dbc_1st+0x32>
 80016ce:	229f      	movs	r2, #159	; 0x9f
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d801      	bhi.n	80016da <dbc_1st+0x1e>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00a      	b.n	80016f0 <dbc_1st+0x34>
 80016da:	22e0      	movs	r2, #224	; 0xe0
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4293      	cmp	r3, r2
 80016e0:	d305      	bcc.n	80016ee <dbc_1st+0x32>
 80016e2:	22fc      	movs	r2, #252	; 0xfc
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d801      	bhi.n	80016ee <dbc_1st+0x32>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <dbc_1st+0x34>
 80016ee:	2300      	movs	r3, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <dbc_2nd>:
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	2240      	movs	r2, #64	; 0x40
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	4293      	cmp	r3, r2
 800170c:	d319      	bcc.n	8001742 <dbc_2nd+0x46>
 800170e:	227e      	movs	r2, #126	; 0x7e
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	4293      	cmp	r3, r2
 8001714:	d801      	bhi.n	800171a <dbc_2nd+0x1e>
 8001716:	2301      	movs	r3, #1
 8001718:	e014      	b.n	8001744 <dbc_2nd+0x48>
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	4293      	cmp	r3, r2
 8001720:	d305      	bcc.n	800172e <dbc_2nd+0x32>
 8001722:	22fc      	movs	r2, #252	; 0xfc
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	4293      	cmp	r3, r2
 8001728:	d801      	bhi.n	800172e <dbc_2nd+0x32>
 800172a:	2301      	movs	r3, #1
 800172c:	e00a      	b.n	8001744 <dbc_2nd+0x48>
 800172e:	2200      	movs	r2, #0
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	4293      	cmp	r3, r2
 8001734:	d305      	bcc.n	8001742 <dbc_2nd+0x46>
 8001736:	2200      	movs	r2, #0
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4293      	cmp	r3, r2
 800173c:	d801      	bhi.n	8001742 <dbc_2nd+0x46>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <dbc_2nd+0x48>
 8001742:	2300      	movs	r3, #0
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <sync_window>:
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	78db      	ldrb	r3, [r3, #3]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d02c      	beq.n	80017be <sync_window+0x6e>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7858      	ldrb	r0, [r3, #1]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001772:	2301      	movs	r3, #1
 8001774:	f7ff fe02 	bl	800137c <disk_write>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d11d      	bne.n	80017ba <sync_window+0x6a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	70da      	strb	r2, [r3, #3]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	1ad2      	subs	r2, r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	429a      	cmp	r2, r3
 8001794:	d213      	bcs.n	80017be <sync_window+0x6e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	789b      	ldrb	r3, [r3, #2]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d10f      	bne.n	80017be <sync_window+0x6e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7858      	ldrb	r0, [r3, #1]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	441a      	add	r2, r3
 80017b2:	2301      	movs	r3, #1
 80017b4:	f7ff fde2 	bl	800137c <disk_write>
 80017b8:	e001      	b.n	80017be <sync_window+0x6e>
 80017ba:	2301      	movs	r3, #1
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <move_window>:
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d01b      	beq.n	8001818 <move_window+0x50>
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ffb5 	bl	8001750 <sync_window>
 80017e6:	4603      	mov	r3, r0
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d113      	bne.n	8001818 <move_window+0x50>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7858      	ldrb	r0, [r3, #1]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80017fa:	2301      	movs	r3, #1
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	f7ff fd53 	bl	80012a8 <disk_read>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <move_window+0x4a>
 8001808:	f04f 33ff 	mov.w	r3, #4294967295
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <clst2sect>:
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	3b02      	subs	r3, #2
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	3b02      	subs	r3, #2
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d301      	bcc.n	8001842 <clst2sect+0x20>
 800183e:	2300      	movs	r3, #0
 8001840:	e008      	b.n	8001854 <clst2sect+0x32>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	895b      	ldrh	r3, [r3, #10]
 800184a:	4619      	mov	r1, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	fb03 f301 	mul.w	r3, r3, r1
 8001852:	4413      	add	r3, r2
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <get_fat>:
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d904      	bls.n	8001880 <get_fat+0x20>
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d302      	bcc.n	8001886 <get_fat+0x26>
 8001880:	2301      	movs	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e08c      	b.n	80019a0 <get_fat+0x140>
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d045      	beq.n	8001920 <get_fat+0xc0>
 8001894:	2b03      	cmp	r3, #3
 8001896:	d05d      	beq.n	8001954 <get_fat+0xf4>
 8001898:	2b01      	cmp	r3, #1
 800189a:	d177      	bne.n	800198c <get_fat+0x12c>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	085b      	lsrs	r3, r3, #1
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	6a1a      	ldr	r2, [r3, #32]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	0a5b      	lsrs	r3, r3, #9
 80018b2:	4413      	add	r3, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	6938      	ldr	r0, [r7, #16]
 80018b8:	f7ff ff86 	bl	80017c8 <move_window>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d167      	bne.n	8001992 <get_fat+0x132>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	60fa      	str	r2, [r7, #12]
 80018c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4413      	add	r3, r2
 80018d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	6a1a      	ldr	r2, [r3, #32]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	0a5b      	lsrs	r3, r3, #9
 80018de:	4413      	add	r3, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	6938      	ldr	r0, [r7, #16]
 80018e4:	f7ff ff70 	bl	80017c8 <move_window>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d153      	bne.n	8001996 <get_fat+0x136>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4413      	add	r3, r2
 80018f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	461a      	mov	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <get_fat+0xb6>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	e002      	b.n	800191c <get_fat+0xbc>
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	e03f      	b.n	80019a0 <get_fat+0x140>
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	6a1a      	ldr	r2, [r3, #32]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	4413      	add	r3, r2
 800192a:	4619      	mov	r1, r3
 800192c:	6938      	ldr	r0, [r7, #16]
 800192e:	f7ff ff4b 	bl	80017c8 <move_window>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d130      	bne.n	800199a <get_fat+0x13a>
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001946:	4413      	add	r3, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fdd9 	bl	8001500 <ld_word>
 800194e:	4603      	mov	r3, r0
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e025      	b.n	80019a0 <get_fat+0x140>
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	6a1a      	ldr	r2, [r3, #32]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	09db      	lsrs	r3, r3, #7
 800195c:	4413      	add	r3, r2
 800195e:	4619      	mov	r1, r3
 8001960:	6938      	ldr	r0, [r7, #16]
 8001962:	f7ff ff31 	bl	80017c8 <move_window>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d118      	bne.n	800199e <get_fat+0x13e>
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800197a:	4413      	add	r3, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fdd7 	bl	8001530 <ld_dword>
 8001982:	4603      	mov	r3, r0
 8001984:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e009      	b.n	80019a0 <get_fat+0x140>
 800198c:	2301      	movs	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e006      	b.n	80019a0 <get_fat+0x140>
 8001992:	bf00      	nop
 8001994:	e004      	b.n	80019a0 <get_fat+0x140>
 8001996:	bf00      	nop
 8001998:	e002      	b.n	80019a0 <get_fat+0x140>
 800199a:	bf00      	nop
 800199c:	e000      	b.n	80019a0 <get_fat+0x140>
 800199e:	bf00      	nop
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <put_fat>:
 80019aa:	b590      	push	{r4, r7, lr}
 80019ac:	b089      	sub	sp, #36	; 0x24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	2302      	movs	r3, #2
 80019b8:	77fb      	strb	r3, [r7, #31]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	f240 80d6 	bls.w	8001b6e <put_fat+0x1c4>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	f080 80d0 	bcs.w	8001b6e <put_fat+0x1c4>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d073      	beq.n	8001abe <put_fat+0x114>
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	f000 8091 	beq.w	8001afe <put_fat+0x154>
 80019dc:	2b01      	cmp	r3, #1
 80019de:	f040 80c6 	bne.w	8001b6e <put_fat+0x1c4>
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4413      	add	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a1a      	ldr	r2, [r3, #32]
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	0a5b      	lsrs	r3, r3, #9
 80019f8:	4413      	add	r3, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff fee3 	bl	80017c8 <move_window>
 8001a02:	4603      	mov	r3, r0
 8001a04:	77fb      	strb	r3, [r7, #31]
 8001a06:	7ffb      	ldrb	r3, [r7, #31]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f040 80a9 	bne.w	8001b60 <put_fat+0x1b6>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1c59      	adds	r1, r3, #1
 8001a18:	61b9      	str	r1, [r7, #24]
 8001a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a1e:	4413      	add	r3, r2
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00d      	beq.n	8001a48 <put_fat+0x9e>
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	b25a      	sxtb	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	b25b      	sxtb	r3, r3
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	e001      	b.n	8001a4c <put_fat+0xa2>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	7013      	strb	r3, [r2, #0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2201      	movs	r2, #1
 8001a54:	70da      	strb	r2, [r3, #3]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6a1a      	ldr	r2, [r3, #32]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	0a5b      	lsrs	r3, r3, #9
 8001a5e:	4413      	add	r3, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f7ff feb0 	bl	80017c8 <move_window>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	77fb      	strb	r3, [r7, #31]
 8001a6c:	7ffb      	ldrb	r3, [r7, #31]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d178      	bne.n	8001b64 <put_fat+0x1ba>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a7e:	4413      	add	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <put_fat+0xea>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	e00e      	b.n	8001ab2 <put_fat+0x108>
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b25b      	sxtb	r3, r3
 8001a9a:	f023 030f 	bic.w	r3, r3, #15
 8001a9e:	b25a      	sxtb	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	b25b      	sxtb	r3, r3
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	b25b      	sxtb	r3, r3
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b25b      	sxtb	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	7013      	strb	r3, [r2, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	70da      	strb	r2, [r3, #3]
 8001abc:	e057      	b.n	8001b6e <put_fat+0x1c4>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6a1a      	ldr	r2, [r3, #32]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff fe7c 	bl	80017c8 <move_window>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	77fb      	strb	r3, [r7, #31]
 8001ad4:	7ffb      	ldrb	r3, [r7, #31]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d146      	bne.n	8001b68 <put_fat+0x1be>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001ae8:	4413      	add	r3, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	b292      	uxth	r2, r2
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fd40 	bl	8001576 <st_word>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	70da      	strb	r2, [r3, #3]
 8001afc:	e037      	b.n	8001b6e <put_fat+0x1c4>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a1a      	ldr	r2, [r3, #32]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	09db      	lsrs	r3, r3, #7
 8001b06:	4413      	add	r3, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff fe5c 	bl	80017c8 <move_window>
 8001b10:	4603      	mov	r3, r0
 8001b12:	77fb      	strb	r3, [r7, #31]
 8001b14:	7ffb      	ldrb	r3, [r7, #31]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d128      	bne.n	8001b6c <put_fat+0x1c2>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001b2e:	4413      	add	r3, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fcfd 	bl	8001530 <ld_dword>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001b3c:	4323      	orrs	r3, r4
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001b4e:	4413      	add	r3, r2
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fd2a 	bl	80015ac <st_dword>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	70da      	strb	r2, [r3, #3]
 8001b5e:	e006      	b.n	8001b6e <put_fat+0x1c4>
 8001b60:	bf00      	nop
 8001b62:	e004      	b.n	8001b6e <put_fat+0x1c4>
 8001b64:	bf00      	nop
 8001b66:	e002      	b.n	8001b6e <put_fat+0x1c4>
 8001b68:	bf00      	nop
 8001b6a:	e000      	b.n	8001b6e <put_fat+0x1c4>
 8001b6c:	bf00      	nop
 8001b6e:	7ffb      	ldrb	r3, [r7, #31]
 8001b70:	4618      	mov	r0, r3
 8001b72:	3724      	adds	r7, #36	; 0x24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd90      	pop	{r4, r7, pc}

08001b78 <create_chain>:
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10d      	bne.n	8001baa <create_chain+0x32>
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	61bb      	str	r3, [r7, #24]
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <create_chain+0x2c>
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d31b      	bcc.n	8001bdc <create_chain+0x64>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	e018      	b.n	8001bdc <create_chain+0x64>
 8001baa:	6839      	ldr	r1, [r7, #0]
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff fe57 	bl	8001860 <get_fat>
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d801      	bhi.n	8001bbe <create_chain+0x46>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e0a9      	b.n	8001d12 <create_chain+0x19a>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d101      	bne.n	8001bca <create_chain+0x52>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	e0a3      	b.n	8001d12 <create_chain+0x19a>
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d201      	bcs.n	8001bd8 <create_chain+0x60>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	e09c      	b.n	8001d12 <create_chain+0x19a>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <create_chain+0x70>
 8001be4:	2300      	movs	r3, #0
 8001be6:	e094      	b.n	8001d12 <create_chain+0x19a>
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d129      	bne.n	8001c48 <create_chain+0xd0>
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d301      	bcc.n	8001c08 <create_chain+0x90>
 8001c04:	2302      	movs	r3, #2
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	69f9      	ldr	r1, [r7, #28]
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fe28 	bl	8001860 <get_fat>
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d003      	beq.n	8001c20 <create_chain+0xa8>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1e:	d101      	bne.n	8001c24 <create_chain+0xac>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	e076      	b.n	8001d12 <create_chain+0x19a>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00e      	beq.n	8001c48 <create_chain+0xd0>
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d906      	bls.n	8001c44 <create_chain+0xcc>
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d201      	bcs.n	8001c44 <create_chain+0xcc>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d129      	bne.n	8001ca2 <create_chain+0x12a>
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d307      	bcc.n	8001c72 <create_chain+0xfa>
 8001c62:	2302      	movs	r3, #2
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d901      	bls.n	8001c72 <create_chain+0xfa>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e04f      	b.n	8001d12 <create_chain+0x19a>
 8001c72:	69f9      	ldr	r1, [r7, #28]
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fdf3 	bl	8001860 <get_fat>
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00e      	beq.n	8001ca0 <create_chain+0x128>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d003      	beq.n	8001c90 <create_chain+0x118>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8e:	d101      	bne.n	8001c94 <create_chain+0x11c>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	e03e      	b.n	8001d12 <create_chain+0x19a>
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d1da      	bne.n	8001c52 <create_chain+0xda>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e038      	b.n	8001d12 <create_chain+0x19a>
 8001ca0:	bf00      	nop
 8001ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca6:	69f9      	ldr	r1, [r7, #28]
 8001ca8:	6938      	ldr	r0, [r7, #16]
 8001caa:	f7ff fe7e 	bl	80019aa <put_fat>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	75fb      	strb	r3, [r7, #23]
 8001cb2:	7dfb      	ldrb	r3, [r7, #23]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <create_chain+0x154>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <create_chain+0x154>
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	6839      	ldr	r1, [r7, #0]
 8001cc2:	6938      	ldr	r0, [r7, #16]
 8001cc4:	f7ff fe71 	bl	80019aa <put_fat>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	75fb      	strb	r3, [r7, #23]
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d116      	bne.n	8001d00 <create_chain+0x188>
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	3b02      	subs	r3, #2
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d804      	bhi.n	8001cf0 <create_chain+0x178>
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	611a      	str	r2, [r3, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	791b      	ldrb	r3, [r3, #4]
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	711a      	strb	r2, [r3, #4]
 8001cfe:	e007      	b.n	8001d10 <create_chain+0x198>
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d102      	bne.n	8001d0c <create_chain+0x194>
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	e000      	b.n	8001d0e <create_chain+0x196>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	4618      	mov	r0, r3
 8001d14:	3720      	adds	r7, #32
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <dir_clear>:
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fd13 	bl	8001750 <sync_window>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <dir_clear+0x1a>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e036      	b.n	8001da2 <dir_clear+0x88>
 8001d34:	6839      	ldr	r1, [r7, #0]
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fd73 	bl	8001822 <clst2sect>
 8001d3c:	6138      	str	r0, [r7, #16]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3330      	adds	r3, #48	; 0x30
 8001d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fc58 	bl	8001604 <mem_set>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3330      	adds	r3, #48	; 0x30
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	e003      	b.n	8001d6c <dir_clear+0x52>
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	4413      	add	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	895b      	ldrh	r3, [r3, #10]
 8001d70:	461a      	mov	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d20b      	bcs.n	8001d90 <dir_clear+0x76>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7858      	ldrb	r0, [r3, #1]
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	441a      	add	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	68f9      	ldr	r1, [r7, #12]
 8001d86:	f7ff faf9 	bl	800137c <disk_write>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0e9      	beq.n	8001d64 <dir_clear+0x4a>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	895b      	ldrh	r3, [r3, #10]
 8001d94:	461a      	mov	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	bf14      	ite	ne
 8001d9c:	2301      	movne	r3, #1
 8001d9e:	2300      	moveq	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <dir_sdi>:
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dc0:	d204      	bcs.n	8001dcc <dir_sdi+0x22>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <dir_sdi+0x26>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e063      	b.n	8001e98 <dir_sdi+0xee>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	611a      	str	r2, [r3, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <dir_sdi+0x46>
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d902      	bls.n	8001df0 <dir_sdi+0x46>
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <dir_sdi+0x66>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	8912      	ldrh	r2, [r2, #8]
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d301      	bcc.n	8001e06 <dir_sdi+0x5c>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e048      	b.n	8001e98 <dir_sdi+0xee>
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	619a      	str	r2, [r3, #24]
 8001e0e:	e029      	b.n	8001e64 <dir_sdi+0xba>
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	895b      	ldrh	r3, [r3, #10]
 8001e14:	025b      	lsls	r3, r3, #9
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	e019      	b.n	8001e4e <dir_sdi+0xa4>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6979      	ldr	r1, [r7, #20]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fd1e 	bl	8001860 <get_fat>
 8001e24:	6178      	str	r0, [r7, #20]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d101      	bne.n	8001e32 <dir_sdi+0x88>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e032      	b.n	8001e98 <dir_sdi+0xee>
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d904      	bls.n	8001e42 <dir_sdi+0x98>
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d301      	bcc.n	8001e46 <dir_sdi+0x9c>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e028      	b.n	8001e98 <dir_sdi+0xee>
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d2e1      	bcs.n	8001e1a <dir_sdi+0x70>
 8001e56:	6979      	ldr	r1, [r7, #20]
 8001e58:	6938      	ldr	r0, [r7, #16]
 8001e5a:	f7ff fce2 	bl	8001822 <clst2sect>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	615a      	str	r2, [r3, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <dir_sdi+0xcc>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e010      	b.n	8001e98 <dir_sdi+0xee>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	0a5b      	lsrs	r3, r3, #9
 8001e7e:	441a      	add	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e90:	441a      	add	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	61da      	str	r2, [r3, #28]
 8001e96:	2300      	movs	r3, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <dir_next>:
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	3320      	adds	r3, #32
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ebe:	d302      	bcc.n	8001ec6 <dir_next+0x26>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <dir_next+0x32>
 8001ece:	2304      	movs	r3, #4
 8001ed0:	e078      	b.n	8001fc4 <dir_next+0x124>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d166      	bne.n	8001faa <dir_next+0x10a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	619a      	str	r2, [r3, #24]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10a      	bne.n	8001f04 <dir_next+0x64>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	095b      	lsrs	r3, r3, #5
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	8912      	ldrh	r2, [r2, #8]
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d357      	bcc.n	8001faa <dir_next+0x10a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
 8001f00:	2304      	movs	r3, #4
 8001f02:	e05f      	b.n	8001fc4 <dir_next+0x124>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	0a5b      	lsrs	r3, r3, #9
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	8952      	ldrh	r2, [r2, #10]
 8001f0c:	3a01      	subs	r2, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d14a      	bne.n	8001faa <dir_next+0x10a>
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	f7ff fc9f 	bl	8001860 <get_fat>
 8001f22:	6178      	str	r0, [r7, #20]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d801      	bhi.n	8001f2e <dir_next+0x8e>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e04a      	b.n	8001fc4 <dir_next+0x124>
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d101      	bne.n	8001f3a <dir_next+0x9a>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e044      	b.n	8001fc4 <dir_next+0x124>
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d328      	bcc.n	8001f96 <dir_next+0xf6>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d104      	bne.n	8001f54 <dir_next+0xb4>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
 8001f50:	2304      	movs	r3, #4
 8001f52:	e037      	b.n	8001fc4 <dir_next+0x124>
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	f7ff fe0b 	bl	8001b78 <create_chain>
 8001f62:	6178      	str	r0, [r7, #20]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <dir_next+0xce>
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	e02a      	b.n	8001fc4 <dir_next+0x124>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <dir_next+0xd8>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e025      	b.n	8001fc4 <dir_next+0x124>
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7e:	d101      	bne.n	8001f84 <dir_next+0xe4>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e01f      	b.n	8001fc4 <dir_next+0x124>
 8001f84:	6979      	ldr	r1, [r7, #20]
 8001f86:	6938      	ldr	r0, [r7, #16]
 8001f88:	f7ff fec7 	bl	8001d1a <dir_clear>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <dir_next+0xf6>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e016      	b.n	8001fc4 <dir_next+0x124>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	615a      	str	r2, [r3, #20]
 8001f9c:	6979      	ldr	r1, [r7, #20]
 8001f9e:	6938      	ldr	r0, [r7, #16]
 8001fa0:	f7ff fc3f 	bl	8001822 <clst2sect>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	611a      	str	r2, [r3, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fbc:	441a      	add	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	61da      	str	r2, [r3, #28]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <ld_clust>:
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	331a      	adds	r3, #26
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fa90 	bl	8001500 <ld_word>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d109      	bne.n	8002000 <ld_clust+0x34>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	3314      	adds	r3, #20
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fa85 	bl	8001500 <ld_word>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <dir_read>:
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
 8002014:	2304      	movs	r3, #4
 8002016:	75fb      	strb	r3, [r7, #23]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	e03c      	b.n	800209a <dir_read+0x90>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4619      	mov	r1, r3
 8002026:	6938      	ldr	r0, [r7, #16]
 8002028:	f7ff fbce 	bl	80017c8 <move_window>
 800202c:	4603      	mov	r3, r0
 800202e:	75fb      	strb	r3, [r7, #23]
 8002030:	7dfb      	ldrb	r3, [r7, #23]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d136      	bne.n	80020a4 <dir_read+0x9a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	73fb      	strb	r3, [r7, #15]
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <dir_read+0x40>
 8002044:	2304      	movs	r3, #4
 8002046:	75fb      	strb	r3, [r7, #23]
 8002048:	e031      	b.n	80020ae <dir_read+0xa4>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	330b      	adds	r3, #11
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002056:	73bb      	strb	r3, [r7, #14]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7bba      	ldrb	r2, [r7, #14]
 800205c:	719a      	strb	r2, [r3, #6]
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2be5      	cmp	r3, #229	; 0xe5
 8002062:	d011      	beq.n	8002088 <dir_read+0x7e>
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b2e      	cmp	r3, #46	; 0x2e
 8002068:	d00e      	beq.n	8002088 <dir_read+0x7e>
 800206a:	7bbb      	ldrb	r3, [r7, #14]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d00b      	beq.n	8002088 <dir_read+0x7e>
 8002070:	7bbb      	ldrb	r3, [r7, #14]
 8002072:	f023 0320 	bic.w	r3, r3, #32
 8002076:	2b08      	cmp	r3, #8
 8002078:	bf0c      	ite	eq
 800207a:	2301      	moveq	r3, #1
 800207c:	2300      	movne	r3, #0
 800207e:	b2db      	uxtb	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	4293      	cmp	r3, r2
 8002086:	d00f      	beq.n	80020a8 <dir_read+0x9e>
 8002088:	2100      	movs	r1, #0
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ff08 	bl	8001ea0 <dir_next>
 8002090:	4603      	mov	r3, r0
 8002092:	75fb      	strb	r3, [r7, #23]
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d108      	bne.n	80020ac <dir_read+0xa2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1be      	bne.n	8002020 <dir_read+0x16>
 80020a2:	e004      	b.n	80020ae <dir_read+0xa4>
 80020a4:	bf00      	nop
 80020a6:	e002      	b.n	80020ae <dir_read+0xa4>
 80020a8:	bf00      	nop
 80020aa:	e000      	b.n	80020ae <dir_read+0xa4>
 80020ac:	bf00      	nop
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <dir_read+0xb0>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <dir_find>:
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	2100      	movs	r1, #0
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff fe68 	bl	8001daa <dir_sdi>
 80020da:	4603      	mov	r3, r0
 80020dc:	75fb      	strb	r3, [r7, #23]
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <dir_find+0x24>
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
 80020e6:	e03e      	b.n	8002166 <dir_find+0xa2>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4619      	mov	r1, r3
 80020ee:	6938      	ldr	r0, [r7, #16]
 80020f0:	f7ff fb6a 	bl	80017c8 <move_window>
 80020f4:	4603      	mov	r3, r0
 80020f6:	75fb      	strb	r3, [r7, #23]
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d12f      	bne.n	800215e <dir_find+0x9a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	73fb      	strb	r3, [r7, #15]
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <dir_find+0x4e>
 800210c:	2304      	movs	r3, #4
 800210e:	75fb      	strb	r3, [r7, #23]
 8002110:	e028      	b.n	8002164 <dir_find+0xa0>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	330b      	adds	r3, #11
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800211e:	b2da      	uxtb	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	719a      	strb	r2, [r3, #6]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	330b      	adds	r3, #11
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10a      	bne.n	800214a <dir_find+0x86>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69d8      	ldr	r0, [r3, #28]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3320      	adds	r3, #32
 800213c:	220b      	movs	r2, #11
 800213e:	4619      	mov	r1, r3
 8002140:	f7ff fa7a 	bl	8001638 <mem_cmp>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <dir_find+0x9e>
 800214a:	2100      	movs	r1, #0
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff fea7 	bl	8001ea0 <dir_next>
 8002152:	4603      	mov	r3, r0
 8002154:	75fb      	strb	r3, [r7, #23]
 8002156:	7dfb      	ldrb	r3, [r7, #23]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0c5      	beq.n	80020e8 <dir_find+0x24>
 800215c:	e002      	b.n	8002164 <dir_find+0xa0>
 800215e:	bf00      	nop
 8002160:	e000      	b.n	8002164 <dir_find+0xa0>
 8002162:	bf00      	nop
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <get_fileinfo>:
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2200      	movs	r2, #0
 800217c:	725a      	strb	r2, [r3, #9]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d052      	beq.n	800222c <get_fileinfo+0xbe>
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e021      	b.n	80021d4 <get_fileinfo+0x66>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69da      	ldr	r2, [r3, #28]
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	1c59      	adds	r1, r3, #1
 8002198:	6179      	str	r1, [r7, #20]
 800219a:	4413      	add	r3, r2
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d100      	bne.n	80021a8 <get_fileinfo+0x3a>
 80021a6:	e015      	b.n	80021d4 <get_fileinfo+0x66>
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d101      	bne.n	80021b2 <get_fileinfo+0x44>
 80021ae:	23e5      	movs	r3, #229	; 0xe5
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b09      	cmp	r3, #9
 80021b6:	d106      	bne.n	80021c6 <get_fileinfo+0x58>
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	613a      	str	r2, [r7, #16]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	222e      	movs	r2, #46	; 0x2e
 80021c4:	725a      	strb	r2, [r3, #9]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	613a      	str	r2, [r7, #16]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	725a      	strb	r2, [r3, #9]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2b0a      	cmp	r3, #10
 80021d8:	d9da      	bls.n	8002190 <get_fileinfo+0x22>
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	3309      	adds	r3, #9
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	7ada      	ldrb	r2, [r3, #11]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	721a      	strb	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	331c      	adds	r3, #28
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff f99a 	bl	8001530 <ld_dword>
 80021fc:	4602      	mov	r2, r0
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	3316      	adds	r3, #22
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff f979 	bl	8001500 <ld_word>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	80da      	strh	r2, [r3, #6]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	3318      	adds	r3, #24
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff f96f 	bl	8001500 <ld_word>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	809a      	strh	r2, [r3, #4]
 800222a:	e000      	b.n	800222e <get_fileinfo+0xc0>
 800222c:	bf00      	nop
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <create_name>:
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3320      	adds	r3, #32
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	220b      	movs	r2, #11
 800224c:	2120      	movs	r1, #32
 800224e:	6938      	ldr	r0, [r7, #16]
 8002250:	f7ff f9d8 	bl	8001604 <mem_set>
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	2308      	movs	r3, #8
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	61fa      	str	r2, [r7, #28]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4413      	add	r3, r2
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002274:	2b20      	cmp	r3, #32
 8002276:	d97c      	bls.n	8002372 <create_name+0x13e>
 8002278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800227c:	2b2f      	cmp	r3, #47	; 0x2f
 800227e:	d007      	beq.n	8002290 <create_name+0x5c>
 8002280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002284:	2b5c      	cmp	r3, #92	; 0x5c
 8002286:	d110      	bne.n	80022aa <create_name+0x76>
 8002288:	e002      	b.n	8002290 <create_name+0x5c>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b2f      	cmp	r3, #47	; 0x2f
 800229a:	d0f6      	beq.n	800228a <create_name+0x56>
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	4413      	add	r3, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b5c      	cmp	r3, #92	; 0x5c
 80022a6:	d0f0      	beq.n	800228a <create_name+0x56>
 80022a8:	e064      	b.n	8002374 <create_name+0x140>
 80022aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022ae:	2b2e      	cmp	r3, #46	; 0x2e
 80022b0:	d003      	beq.n	80022ba <create_name+0x86>
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d30d      	bcc.n	80022d6 <create_name+0xa2>
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	2b0b      	cmp	r3, #11
 80022be:	d003      	beq.n	80022c8 <create_name+0x94>
 80022c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022c4:	2b2e      	cmp	r3, #46	; 0x2e
 80022c6:	d001      	beq.n	80022cc <create_name+0x98>
 80022c8:	2306      	movs	r3, #6
 80022ca:	e06f      	b.n	80023ac <create_name+0x178>
 80022cc:	2308      	movs	r3, #8
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	230b      	movs	r3, #11
 80022d2:	623b      	str	r3, [r7, #32]
 80022d4:	e04c      	b.n	8002370 <create_name+0x13c>
 80022d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff f9ee 	bl	80016bc <dbc_1st>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d024      	beq.n	8002330 <create_name+0xfc>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	61fa      	str	r2, [r7, #28]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fa00 	bl	80016fc <dbc_2nd>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <create_name+0xd8>
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	3b01      	subs	r3, #1
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	429a      	cmp	r2, r3
 800230a:	d301      	bcc.n	8002310 <create_name+0xdc>
 800230c:	2306      	movs	r3, #6
 800230e:	e04d      	b.n	80023ac <create_name+0x178>
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	61ba      	str	r2, [r7, #24]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800231e:	701a      	strb	r2, [r3, #0]
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	61ba      	str	r2, [r7, #24]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	7bfa      	ldrb	r2, [r7, #15]
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	e797      	b.n	8002260 <create_name+0x2c>
 8002330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002334:	4619      	mov	r1, r3
 8002336:	481f      	ldr	r0, [pc, #124]	; (80023b4 <create_name+0x180>)
 8002338:	f7ff f9a5 	bl	8001686 <chk_chr>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <create_name+0x112>
 8002342:	2306      	movs	r3, #6
 8002344:	e032      	b.n	80023ac <create_name+0x178>
 8002346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800234a:	2b60      	cmp	r3, #96	; 0x60
 800234c:	d908      	bls.n	8002360 <create_name+0x12c>
 800234e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002352:	2b7a      	cmp	r3, #122	; 0x7a
 8002354:	d804      	bhi.n	8002360 <create_name+0x12c>
 8002356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800235a:	3b20      	subs	r3, #32
 800235c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	61ba      	str	r2, [r7, #24]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	e776      	b.n	8002260 <create_name+0x2c>
 8002372:	bf00      	nop
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	441a      	add	r2, r3
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <create_name+0x154>
 8002384:	2306      	movs	r3, #6
 8002386:	e011      	b.n	80023ac <create_name+0x178>
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2be5      	cmp	r3, #229	; 0xe5
 800238e:	d102      	bne.n	8002396 <create_name+0x162>
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2205      	movs	r2, #5
 8002394:	701a      	strb	r2, [r3, #0]
 8002396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800239a:	2b20      	cmp	r3, #32
 800239c:	d801      	bhi.n	80023a2 <create_name+0x16e>
 800239e:	2204      	movs	r2, #4
 80023a0:	e000      	b.n	80023a4 <create_name+0x170>
 80023a2:	2200      	movs	r2, #0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	330b      	adds	r3, #11
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	2300      	movs	r3, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	3728      	adds	r7, #40	; 0x28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	080081a8 	.word	0x080081a8

080023b8 <follow_path>:
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	e002      	b.n	80023d0 <follow_path+0x18>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b2f      	cmp	r3, #47	; 0x2f
 80023d6:	d0f8      	beq.n	80023ca <follow_path+0x12>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b5c      	cmp	r3, #92	; 0x5c
 80023de:	d0f4      	beq.n	80023ca <follow_path+0x12>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b1f      	cmp	r3, #31
 80023ec:	d80a      	bhi.n	8002404 <follow_path+0x4c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 80023f6:	2100      	movs	r1, #0
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff fcd6 	bl	8001daa <dir_sdi>
 80023fe:	4603      	mov	r3, r0
 8002400:	75fb      	strb	r3, [r7, #23]
 8002402:	e043      	b.n	800248c <follow_path+0xd4>
 8002404:	463b      	mov	r3, r7
 8002406:	4619      	mov	r1, r3
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff13 	bl	8002234 <create_name>
 800240e:	4603      	mov	r3, r0
 8002410:	75fb      	strb	r3, [r7, #23]
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d134      	bne.n	8002482 <follow_path+0xca>
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fe53 	bl	80020c4 <dir_find>
 800241e:	4603      	mov	r3, r0
 8002420:	75fb      	strb	r3, [r7, #23]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002428:	73fb      	strb	r3, [r7, #15]
 800242a:	7dfb      	ldrb	r3, [r7, #23]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <follow_path+0x8e>
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b04      	cmp	r3, #4
 8002434:	d127      	bne.n	8002486 <follow_path+0xce>
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d122      	bne.n	8002486 <follow_path+0xce>
 8002440:	2305      	movs	r3, #5
 8002442:	75fb      	strb	r3, [r7, #23]
 8002444:	e01f      	b.n	8002486 <follow_path+0xce>
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d11c      	bne.n	800248a <follow_path+0xd2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	799b      	ldrb	r3, [r3, #6]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <follow_path+0xaa>
 800245c:	2305      	movs	r3, #5
 800245e:	75fb      	strb	r3, [r7, #23]
 8002460:	e014      	b.n	800248c <follow_path+0xd4>
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002470:	4413      	add	r3, r2
 8002472:	4619      	mov	r1, r3
 8002474:	6938      	ldr	r0, [r7, #16]
 8002476:	f7ff fda9 	bl	8001fcc <ld_clust>
 800247a:	4602      	mov	r2, r0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	e7c0      	b.n	8002404 <follow_path+0x4c>
 8002482:	bf00      	nop
 8002484:	e002      	b.n	800248c <follow_path+0xd4>
 8002486:	bf00      	nop
 8002488:	e000      	b.n	800248c <follow_path+0xd4>
 800248a:	bf00      	nop
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <get_ldnumber>:
 8002496:	b480      	push	{r7}
 8002498:	b089      	sub	sp, #36	; 0x24
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <get_ldnumber+0x22>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	e02d      	b.n	8002514 <get_ldnumber+0x7e>
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	61fa      	str	r2, [r7, #28]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	73fb      	strb	r3, [r7, #15]
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d902      	bls.n	80024ce <get_ldnumber+0x38>
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b3a      	cmp	r3, #58	; 0x3a
 80024cc:	d1f4      	bne.n	80024b8 <get_ldnumber+0x22>
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	2b3a      	cmp	r3, #58	; 0x3a
 80024d2:	d11c      	bne.n	800250e <get_ldnumber+0x78>
 80024d4:	2301      	movs	r3, #1
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b2f      	cmp	r3, #47	; 0x2f
 80024de:	d90c      	bls.n	80024fa <get_ldnumber+0x64>
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b39      	cmp	r3, #57	; 0x39
 80024e6:	d808      	bhi.n	80024fa <get_ldnumber+0x64>
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	3302      	adds	r3, #2
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d103      	bne.n	80024fa <get_ldnumber+0x64>
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	3b30      	subs	r3, #48	; 0x30
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	dc04      	bgt.n	800250a <get_ldnumber+0x74>
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	e002      	b.n	8002514 <get_ldnumber+0x7e>
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	4618      	mov	r0, r3
 8002516:	3724      	adds	r7, #36	; 0x24
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <check_fs>:
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	70da      	strb	r2, [r3, #3]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f04f 32ff 	mov.w	r2, #4294967295
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff f944 	bl	80017c8 <move_window>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <check_fs+0x2a>
 8002546:	2304      	movs	r3, #4
 8002548:	e038      	b.n	80025bc <check_fs+0x9c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3330      	adds	r3, #48	; 0x30
 800254e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe ffd4 	bl	8001500 <ld_word>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <check_fs+0x48>
 8002564:	2303      	movs	r3, #3
 8002566:	e029      	b.n	80025bc <check_fs+0x9c>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800256e:	2be9      	cmp	r3, #233	; 0xe9
 8002570:	d009      	beq.n	8002586 <check_fs+0x66>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002578:	2beb      	cmp	r3, #235	; 0xeb
 800257a:	d004      	beq.n	8002586 <check_fs+0x66>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002582:	2be8      	cmp	r3, #232	; 0xe8
 8002584:	d119      	bne.n	80025ba <check_fs+0x9a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3330      	adds	r3, #48	; 0x30
 800258a:	3336      	adds	r3, #54	; 0x36
 800258c:	2203      	movs	r2, #3
 800258e:	490d      	ldr	r1, [pc, #52]	; (80025c4 <check_fs+0xa4>)
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff f851 	bl	8001638 <mem_cmp>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <check_fs+0x80>
 800259c:	2300      	movs	r3, #0
 800259e:	e00d      	b.n	80025bc <check_fs+0x9c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3330      	adds	r3, #48	; 0x30
 80025a4:	3352      	adds	r3, #82	; 0x52
 80025a6:	2205      	movs	r2, #5
 80025a8:	4907      	ldr	r1, [pc, #28]	; (80025c8 <check_fs+0xa8>)
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff f844 	bl	8001638 <mem_cmp>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <check_fs+0x9a>
 80025b6:	2300      	movs	r3, #0
 80025b8:	e000      	b.n	80025bc <check_fs+0x9c>
 80025ba:	2302      	movs	r3, #2
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	080081b8 	.word	0x080081b8
 80025c8:	080081bc 	.word	0x080081bc

080025cc <find_volume>:
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b096      	sub	sp, #88	; 0x58
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	4613      	mov	r3, r2
 80025d8:	71fb      	strb	r3, [r7, #7]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f7ff ff58 	bl	8002496 <get_ldnumber>
 80025e6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80025e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	da01      	bge.n	80025f2 <find_volume+0x26>
 80025ee:	230b      	movs	r3, #11
 80025f0:	e238      	b.n	8002a64 <find_volume+0x498>
 80025f2:	4aa8      	ldr	r2, [pc, #672]	; (8002894 <find_volume+0x2c8>)
 80025f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <find_volume+0x3a>
 8002602:	230c      	movs	r3, #12
 8002604:	e22e      	b.n	8002a64 <find_volume+0x498>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	71fb      	strb	r3, [r7, #7]
 8002614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01a      	beq.n	8002652 <find_volume+0x86>
 800261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261e:	785b      	ldrb	r3, [r3, #1]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fe2b 	bl	800127c <disk_status>
 8002626:	4603      	mov	r3, r0
 8002628:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800262c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10c      	bne.n	8002652 <find_volume+0x86>
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d007      	beq.n	800264e <find_volume+0x82>
 800263e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <find_volume+0x82>
 800264a:	230a      	movs	r3, #10
 800264c:	e20a      	b.n	8002a64 <find_volume+0x498>
 800264e:	2300      	movs	r3, #0
 8002650:	e208      	b.n	8002a64 <find_volume+0x498>
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265a:	b2da      	uxtb	r2, r3
 800265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265e:	705a      	strb	r2, [r3, #1]
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fe fd1f 	bl	80010a8 <disk_initialize>
 800266a:	4603      	mov	r3, r0
 800266c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002670:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <find_volume+0xb4>
 800267c:	2303      	movs	r3, #3
 800267e:	e1f1      	b.n	8002a64 <find_volume+0x498>
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <find_volume+0xca>
 8002686:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <find_volume+0xca>
 8002692:	230a      	movs	r3, #10
 8002694:	e1e6      	b.n	8002a64 <find_volume+0x498>
 8002696:	2300      	movs	r3, #0
 8002698:	653b      	str	r3, [r7, #80]	; 0x50
 800269a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800269c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800269e:	f7ff ff3f 	bl	8002520 <check_fs>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80026a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d14b      	bne.n	8002748 <find_volume+0x17c>
 80026b0:	2300      	movs	r3, #0
 80026b2:	643b      	str	r3, [r7, #64]	; 0x40
 80026b4:	e01f      	b.n	80026f6 <find_volume+0x12a>
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80026bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80026c4:	4413      	add	r3, r2
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	3304      	adds	r3, #4
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d006      	beq.n	80026e0 <find_volume+0x114>
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	3308      	adds	r3, #8
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe ff2a 	bl	8001530 <ld_dword>
 80026dc:	4602      	mov	r2, r0
 80026de:	e000      	b.n	80026e2 <find_volume+0x116>
 80026e0:	2200      	movs	r2, #0
 80026e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80026ea:	440b      	add	r3, r1
 80026ec:	f843 2c44 	str.w	r2, [r3, #-68]
 80026f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f2:	3301      	adds	r3, #1
 80026f4:	643b      	str	r3, [r7, #64]	; 0x40
 80026f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d9dc      	bls.n	80026b6 <find_volume+0xea>
 80026fc:	2300      	movs	r3, #0
 80026fe:	643b      	str	r3, [r7, #64]	; 0x40
 8002700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <find_volume+0x140>
 8002706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002708:	3b01      	subs	r3, #1
 800270a:	643b      	str	r3, [r7, #64]	; 0x40
 800270c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002714:	4413      	add	r3, r2
 8002716:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800271a:	653b      	str	r3, [r7, #80]	; 0x50
 800271c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <find_volume+0x162>
 8002722:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002726:	f7ff fefb 	bl	8002520 <check_fs>
 800272a:	4603      	mov	r3, r0
 800272c:	e000      	b.n	8002730 <find_volume+0x164>
 800272e:	2303      	movs	r3, #3
 8002730:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002734:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002738:	2b01      	cmp	r3, #1
 800273a:	d905      	bls.n	8002748 <find_volume+0x17c>
 800273c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273e:	3301      	adds	r3, #1
 8002740:	643b      	str	r3, [r7, #64]	; 0x40
 8002742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002744:	2b03      	cmp	r3, #3
 8002746:	d9e1      	bls.n	800270c <find_volume+0x140>
 8002748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800274c:	2b04      	cmp	r3, #4
 800274e:	d101      	bne.n	8002754 <find_volume+0x188>
 8002750:	2301      	movs	r3, #1
 8002752:	e187      	b.n	8002a64 <find_volume+0x498>
 8002754:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002758:	2b01      	cmp	r3, #1
 800275a:	d901      	bls.n	8002760 <find_volume+0x194>
 800275c:	230d      	movs	r3, #13
 800275e:	e181      	b.n	8002a64 <find_volume+0x498>
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	3330      	adds	r3, #48	; 0x30
 8002764:	330b      	adds	r3, #11
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe feca 	bl	8001500 <ld_word>
 800276c:	4603      	mov	r3, r0
 800276e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002772:	d001      	beq.n	8002778 <find_volume+0x1ac>
 8002774:	230d      	movs	r3, #13
 8002776:	e175      	b.n	8002a64 <find_volume+0x498>
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	3330      	adds	r3, #48	; 0x30
 800277c:	3316      	adds	r3, #22
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe febe 	bl	8001500 <ld_word>
 8002784:	4603      	mov	r3, r0
 8002786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <find_volume+0x1d0>
 800278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002790:	3330      	adds	r3, #48	; 0x30
 8002792:	3324      	adds	r3, #36	; 0x24
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe fecb 	bl	8001530 <ld_dword>
 800279a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800279c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027a0:	619a      	str	r2, [r3, #24]
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80027a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027aa:	709a      	strb	r2, [r3, #2]
 80027ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ae:	789b      	ldrb	r3, [r3, #2]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d005      	beq.n	80027c0 <find_volume+0x1f4>
 80027b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b6:	789b      	ldrb	r3, [r3, #2]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d001      	beq.n	80027c0 <find_volume+0x1f4>
 80027bc:	230d      	movs	r3, #13
 80027be:	e151      	b.n	8002a64 <find_volume+0x498>
 80027c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c2:	789b      	ldrb	r3, [r3, #2]
 80027c4:	461a      	mov	r2, r3
 80027c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	815a      	strh	r2, [r3, #10]
 80027da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027dc:	895b      	ldrh	r3, [r3, #10]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <find_volume+0x228>
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	895b      	ldrh	r3, [r3, #10]
 80027e6:	461a      	mov	r2, r3
 80027e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ea:	895b      	ldrh	r3, [r3, #10]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <find_volume+0x22c>
 80027f4:	230d      	movs	r3, #13
 80027f6:	e135      	b.n	8002a64 <find_volume+0x498>
 80027f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fa:	3330      	adds	r3, #48	; 0x30
 80027fc:	3311      	adds	r3, #17
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fe7e 	bl	8001500 <ld_word>
 8002804:	4603      	mov	r3, r0
 8002806:	461a      	mov	r2, r3
 8002808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280a:	811a      	strh	r2, [r3, #8]
 800280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280e:	891b      	ldrh	r3, [r3, #8]
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <find_volume+0x252>
 800281a:	230d      	movs	r3, #13
 800281c:	e122      	b.n	8002a64 <find_volume+0x498>
 800281e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002820:	3330      	adds	r3, #48	; 0x30
 8002822:	3313      	adds	r3, #19
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fe6b 	bl	8001500 <ld_word>
 800282a:	4603      	mov	r3, r0
 800282c:	64bb      	str	r3, [r7, #72]	; 0x48
 800282e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <find_volume+0x276>
 8002834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002836:	3330      	adds	r3, #48	; 0x30
 8002838:	3320      	adds	r3, #32
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fe78 	bl	8001530 <ld_dword>
 8002840:	64b8      	str	r0, [r7, #72]	; 0x48
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	3330      	adds	r3, #48	; 0x30
 8002846:	330e      	adds	r3, #14
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fe59 	bl	8001500 <ld_word>
 800284e:	4603      	mov	r3, r0
 8002850:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002852:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <find_volume+0x290>
 8002858:	230d      	movs	r3, #13
 800285a:	e103      	b.n	8002a64 <find_volume+0x498>
 800285c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800285e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002860:	4413      	add	r3, r2
 8002862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002864:	8912      	ldrh	r2, [r2, #8]
 8002866:	0912      	lsrs	r2, r2, #4
 8002868:	b292      	uxth	r2, r2
 800286a:	4413      	add	r3, r2
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
 800286e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	429a      	cmp	r2, r3
 8002874:	d201      	bcs.n	800287a <find_volume+0x2ae>
 8002876:	230d      	movs	r3, #13
 8002878:	e0f4      	b.n	8002a64 <find_volume+0x498>
 800287a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002882:	8952      	ldrh	r2, [r2, #10]
 8002884:	fbb3 f3f2 	udiv	r3, r3, r2
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	2b00      	cmp	r3, #0
 800288e:	d103      	bne.n	8002898 <find_volume+0x2cc>
 8002890:	230d      	movs	r3, #13
 8002892:	e0e7      	b.n	8002a64 <find_volume+0x498>
 8002894:	200000e8 	.word	0x200000e8
 8002898:	2300      	movs	r3, #0
 800289a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	4a72      	ldr	r2, [pc, #456]	; (8002a6c <find_volume+0x4a0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d802      	bhi.n	80028ac <find_volume+0x2e0>
 80028a6:	2303      	movs	r3, #3
 80028a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d802      	bhi.n	80028bc <find_volume+0x2f0>
 80028b6:	2302      	movs	r3, #2
 80028b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	f640 72f5 	movw	r2, #4085	; 0xff5
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d802      	bhi.n	80028cc <find_volume+0x300>
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80028cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <find_volume+0x30c>
 80028d4:	230d      	movs	r3, #13
 80028d6:	e0c5      	b.n	8002a64 <find_volume+0x498>
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	1c9a      	adds	r2, r3, #2
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	615a      	str	r2, [r3, #20]
 80028e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028e4:	61da      	str	r2, [r3, #28]
 80028e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80028e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ea:	441a      	add	r2, r3
 80028ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ee:	621a      	str	r2, [r3, #32]
 80028f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	441a      	add	r2, r3
 80028f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
 80028fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d11e      	bne.n	8002940 <find_volume+0x374>
 8002902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002904:	3330      	adds	r3, #48	; 0x30
 8002906:	332a      	adds	r3, #42	; 0x2a
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fdf9 	bl	8001500 <ld_word>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <find_volume+0x34c>
 8002914:	230d      	movs	r3, #13
 8002916:	e0a5      	b.n	8002a64 <find_volume+0x498>
 8002918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291a:	891b      	ldrh	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <find_volume+0x358>
 8002920:	230d      	movs	r3, #13
 8002922:	e09f      	b.n	8002a64 <find_volume+0x498>
 8002924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002926:	3330      	adds	r3, #48	; 0x30
 8002928:	332c      	adds	r3, #44	; 0x2c
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fe00 	bl	8001530 <ld_dword>
 8002930:	4602      	mov	r2, r0
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	625a      	str	r2, [r3, #36]	; 0x24
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	647b      	str	r3, [r7, #68]	; 0x44
 800293e:	e01f      	b.n	8002980 <find_volume+0x3b4>
 8002940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002942:	891b      	ldrh	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <find_volume+0x380>
 8002948:	230d      	movs	r3, #13
 800294a:	e08b      	b.n	8002a64 <find_volume+0x498>
 800294c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294e:	6a1a      	ldr	r2, [r3, #32]
 8002950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002952:	441a      	add	r2, r3
 8002954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
 8002958:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800295c:	2b02      	cmp	r3, #2
 800295e:	d103      	bne.n	8002968 <find_volume+0x39c>
 8002960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	e00a      	b.n	800297e <find_volume+0x3b2>
 8002968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	085a      	lsrs	r2, r3, #1
 8002974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	647b      	str	r3, [r7, #68]	; 0x44
 8002980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002986:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800298a:	0a5b      	lsrs	r3, r3, #9
 800298c:	429a      	cmp	r2, r3
 800298e:	d201      	bcs.n	8002994 <find_volume+0x3c8>
 8002990:	230d      	movs	r3, #13
 8002992:	e067      	b.n	8002a64 <find_volume+0x498>
 8002994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002996:	f04f 32ff 	mov.w	r2, #4294967295
 800299a:	611a      	str	r2, [r3, #16]
 800299c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a6:	2280      	movs	r2, #128	; 0x80
 80029a8:	711a      	strb	r2, [r3, #4]
 80029aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d149      	bne.n	8002a46 <find_volume+0x47a>
 80029b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b4:	3330      	adds	r3, #48	; 0x30
 80029b6:	3330      	adds	r3, #48	; 0x30
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe fda1 	bl	8001500 <ld_word>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d140      	bne.n	8002a46 <find_volume+0x47a>
 80029c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c6:	3301      	adds	r3, #1
 80029c8:	4619      	mov	r1, r3
 80029ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80029cc:	f7fe fefc 	bl	80017c8 <move_window>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d137      	bne.n	8002a46 <find_volume+0x47a>
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	2200      	movs	r2, #0
 80029da:	711a      	strb	r2, [r3, #4]
 80029dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029de:	3330      	adds	r3, #48	; 0x30
 80029e0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fd8b 	bl	8001500 <ld_word>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d127      	bne.n	8002a46 <find_volume+0x47a>
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	3330      	adds	r3, #48	; 0x30
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fd98 	bl	8001530 <ld_dword>
 8002a00:	4602      	mov	r2, r0
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <find_volume+0x4a4>)
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d11e      	bne.n	8002a46 <find_volume+0x47a>
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	3330      	adds	r3, #48	; 0x30
 8002a0c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fd8d 	bl	8001530 <ld_dword>
 8002a16:	4602      	mov	r2, r0
 8002a18:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <find_volume+0x4a8>)
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d113      	bne.n	8002a46 <find_volume+0x47a>
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a20:	3330      	adds	r3, #48	; 0x30
 8002a22:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe fd82 	bl	8001530 <ld_dword>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a30:	611a      	str	r2, [r3, #16]
 8002a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a34:	3330      	adds	r3, #48	; 0x30
 8002a36:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fd78 	bl	8001530 <ld_dword>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a48:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <find_volume+0x4ac>)
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <find_volume+0x4ac>)
 8002a58:	801a      	strh	r2, [r3, #0]
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <find_volume+0x4ac>)
 8002a5c:	881a      	ldrh	r2, [r3, #0]
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	80da      	strh	r2, [r3, #6]
 8002a62:	2300      	movs	r3, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	3758      	adds	r7, #88	; 0x58
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	0ffffff5 	.word	0x0ffffff5
 8002a70:	41615252 	.word	0x41615252
 8002a74:	61417272 	.word	0x61417272
 8002a78:	200000ec 	.word	0x200000ec

08002a7c <validate>:
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	2309      	movs	r3, #9
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01c      	beq.n	8002aca <validate+0x4e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d018      	beq.n	8002aca <validate+0x4e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d013      	beq.n	8002aca <validate+0x4e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	889a      	ldrh	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	88db      	ldrh	r3, [r3, #6]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d10c      	bne.n	8002aca <validate+0x4e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	785b      	ldrb	r3, [r3, #1]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fbe0 	bl	800127c <disk_status>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <validate+0x4e>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d102      	bne.n	8002ad6 <validate+0x5a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	e000      	b.n	8002ad8 <validate+0x5c>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <f_mount>:
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	4613      	mov	r3, r2
 8002af4:	71fb      	strb	r3, [r7, #7]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	f107 0310 	add.w	r3, r7, #16
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fcc9 	bl	8002496 <get_ldnumber>
 8002b04:	61f8      	str	r0, [r7, #28]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	da01      	bge.n	8002b10 <f_mount+0x28>
 8002b0c:	230b      	movs	r3, #11
 8002b0e:	e025      	b.n	8002b5c <f_mount+0x74>
 8002b10:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <f_mount+0x7c>)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <f_mount+0x3e>
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <f_mount+0x4a>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	490b      	ldr	r1, [pc, #44]	; (8002b64 <f_mount+0x7c>)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <f_mount+0x5e>
 8002b42:	2300      	movs	r3, #0
 8002b44:	e00a      	b.n	8002b5c <f_mount+0x74>
 8002b46:	f107 010c 	add.w	r1, r7, #12
 8002b4a:	f107 0308 	add.w	r3, r7, #8
 8002b4e:	2200      	movs	r2, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fd3b 	bl	80025cc <find_volume>
 8002b56:	4603      	mov	r3, r0
 8002b58:	75fb      	strb	r3, [r7, #23]
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200000e8 	.word	0x200000e8

08002b68 <f_opendir>:
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <f_opendir+0x14>
 8002b78:	2309      	movs	r3, #9
 8002b7a:	e04a      	b.n	8002c12 <f_opendir+0xaa>
 8002b7c:	f107 0108 	add.w	r1, r7, #8
 8002b80:	463b      	mov	r3, r7
 8002b82:	2200      	movs	r2, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fd21 	bl	80025cc <find_volume>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	73fb      	strb	r3, [r7, #15]
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d137      	bne.n	8002c04 <f_opendir+0x9c>
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff fc0a 	bl	80023b8 <follow_path>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d125      	bne.n	8002bfa <f_opendir+0x92>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db12      	blt.n	8002be0 <f_opendir+0x78>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	799b      	ldrb	r3, [r3, #6]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <f_opendir+0x74>
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f7ff f9fc 	bl	8001fcc <ld_clust>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	e001      	b.n	8002be0 <f_opendir+0x78>
 8002bdc:	2305      	movs	r3, #5
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <f_opendir+0x92>
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	88da      	ldrh	r2, [r3, #6]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	809a      	strh	r2, [r3, #4]
 8002bee:	2100      	movs	r1, #0
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff f8da 	bl	8001daa <dir_sdi>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	73fb      	strb	r3, [r7, #15]
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d101      	bne.n	8002c04 <f_opendir+0x9c>
 8002c00:	2305      	movs	r3, #5
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <f_opendir+0xa8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <f_closedir>:
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f107 0208 	add.w	r2, r7, #8
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ff26 	bl	8002a7c <validate>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <f_closedir+0x26>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <f_readdir>:
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f107 0208 	add.w	r2, r7, #8
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff0d 	bl	8002a7c <validate>
 8002c62:	4603      	mov	r3, r0
 8002c64:	73fb      	strb	r3, [r7, #15]
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d126      	bne.n	8002cba <f_readdir+0x70>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <f_readdir+0x36>
 8002c72:	2100      	movs	r1, #0
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff f898 	bl	8001daa <dir_sdi>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e01c      	b.n	8002cba <f_readdir+0x70>
 8002c80:	2100      	movs	r1, #0
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff f9c1 	bl	800200a <dir_read>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d101      	bne.n	8002c96 <f_readdir+0x4c>
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10e      	bne.n	8002cba <f_readdir+0x70>
 8002c9c:	6839      	ldr	r1, [r7, #0]
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff fa65 	bl	800216e <get_fileinfo>
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff f8fa 	bl	8001ea0 <dir_next>
 8002cac:	4603      	mov	r3, r0
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d101      	bne.n	8002cba <f_readdir+0x70>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_ADC_ConvCpltCallback>:
static void MX_USART3_UART_Init(void);
static void MX_TIM6_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]


		  		  value = HAL_ADC_GetValue(&hadc1);
 8002ccc:	4851      	ldr	r0, [pc, #324]	; (8002e14 <HAL_ADC_ConvCpltCallback+0x150>)
 8002cce:	f001 fa54 	bl	800417a <HAL_ADC_GetValue>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002cd8:	601a      	str	r2, [r3, #0]

//za pierwszym ustawieniem potencjometru działa ale potem się nie zmienia
		  	  if(value>0 && value <= 410) indeks_glosnosci = 0;
 8002cda:	4b4f      	ldr	r3, [pc, #316]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	dd08      	ble.n	8002cf4 <HAL_ADC_ConvCpltCallback+0x30>
 8002ce2:	4b4d      	ldr	r3, [pc, #308]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8002cea:	dc03      	bgt.n	8002cf4 <HAL_ADC_ConvCpltCallback+0x30>
 8002cec:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <HAL_ADC_ConvCpltCallback+0x158>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e088      	b.n	8002e06 <HAL_ADC_ConvCpltCallback+0x142>
		  	  else if(value>410 && value <= 819) indeks_glosnosci = 1;
 8002cf4:	4b48      	ldr	r3, [pc, #288]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8002cfc:	dd08      	ble.n	8002d10 <HAL_ADC_ConvCpltCallback+0x4c>
 8002cfe:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8002d06:	da03      	bge.n	8002d10 <HAL_ADC_ConvCpltCallback+0x4c>
 8002d08:	4b44      	ldr	r3, [pc, #272]	; (8002e1c <HAL_ADC_ConvCpltCallback+0x158>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e07a      	b.n	8002e06 <HAL_ADC_ConvCpltCallback+0x142>
		  	  else if(value>819 && value <= 1228) indeks_glosnosci = 2;
 8002d10:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8002d18:	db09      	blt.n	8002d2e <HAL_ADC_ConvCpltCallback+0x6a>
 8002d1a:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8002d22:	4293      	cmp	r3, r2
 8002d24:	dc03      	bgt.n	8002d2e <HAL_ADC_ConvCpltCallback+0x6a>
 8002d26:	4b3d      	ldr	r3, [pc, #244]	; (8002e1c <HAL_ADC_ConvCpltCallback+0x158>)
 8002d28:	2202      	movs	r2, #2
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e06b      	b.n	8002e06 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>1228 && value <= 1647) indeks_glosnosci = 3;
 8002d2e:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8002d36:	4293      	cmp	r3, r2
 8002d38:	dd08      	ble.n	8002d4c <HAL_ADC_ConvCpltCallback+0x88>
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8002d42:	da03      	bge.n	8002d4c <HAL_ADC_ConvCpltCallback+0x88>
 8002d44:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <HAL_ADC_ConvCpltCallback+0x158>)
 8002d46:	2203      	movs	r2, #3
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e05c      	b.n	8002e06 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>1647 && value <= 2058) indeks_glosnosci = 4;
 8002d4c:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8002d54:	db09      	blt.n	8002d6a <HAL_ADC_ConvCpltCallback+0xa6>
 8002d56:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f640 020a 	movw	r2, #2058	; 0x80a
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	dc03      	bgt.n	8002d6a <HAL_ADC_ConvCpltCallback+0xa6>
 8002d62:	4b2e      	ldr	r3, [pc, #184]	; (8002e1c <HAL_ADC_ConvCpltCallback+0x158>)
 8002d64:	2204      	movs	r2, #4
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	e04d      	b.n	8002e06 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2058 && value <= 2467) indeks_glosnosci = 5;
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f640 020a 	movw	r2, #2058	; 0x80a
 8002d72:	4293      	cmp	r3, r2
 8002d74:	dd09      	ble.n	8002d8a <HAL_ADC_ConvCpltCallback+0xc6>
 8002d76:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f640 12a3 	movw	r2, #2467	; 0x9a3
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	dc03      	bgt.n	8002d8a <HAL_ADC_ConvCpltCallback+0xc6>
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <HAL_ADC_ConvCpltCallback+0x158>)
 8002d84:	2205      	movs	r2, #5
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	e03d      	b.n	8002e06 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2467 && value <= 2876) indeks_glosnosci = 6;
 8002d8a:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f640 12a3 	movw	r2, #2467	; 0x9a3
 8002d92:	4293      	cmp	r3, r2
 8002d94:	dd09      	ble.n	8002daa <HAL_ADC_ConvCpltCallback+0xe6>
 8002d96:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f640 323c 	movw	r2, #2876	; 0xb3c
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	dc03      	bgt.n	8002daa <HAL_ADC_ConvCpltCallback+0xe6>
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_ADC_ConvCpltCallback+0x158>)
 8002da4:	2206      	movs	r2, #6
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e02d      	b.n	8002e06 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>2876 && value <= 3285) indeks_glosnosci = 7;
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f640 323c 	movw	r2, #2876	; 0xb3c
 8002db2:	4293      	cmp	r3, r2
 8002db4:	dd09      	ble.n	8002dca <HAL_ADC_ConvCpltCallback+0x106>
 8002db6:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	dc03      	bgt.n	8002dca <HAL_ADC_ConvCpltCallback+0x106>
 8002dc2:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <HAL_ADC_ConvCpltCallback+0x158>)
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e01d      	b.n	8002e06 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>3285 && value <= 3692) indeks_glosnosci = 8;
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	dd09      	ble.n	8002dea <HAL_ADC_ConvCpltCallback+0x126>
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f640 626c 	movw	r2, #3692	; 0xe6c
 8002dde:	4293      	cmp	r3, r2
 8002de0:	dc03      	bgt.n	8002dea <HAL_ADC_ConvCpltCallback+0x126>
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <HAL_ADC_ConvCpltCallback+0x158>)
 8002de4:	2208      	movs	r2, #8
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e00d      	b.n	8002e06 <HAL_ADC_ConvCpltCallback+0x142>
		  	else if(value>3692 && value <= 4095) indeks_glosnosci = 9;
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f640 626c 	movw	r2, #3692	; 0xe6c
 8002df2:	4293      	cmp	r3, r2
 8002df4:	dd07      	ble.n	8002e06 <HAL_ADC_ConvCpltCallback+0x142>
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x154>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	da02      	bge.n	8002e06 <HAL_ADC_ConvCpltCallback+0x142>
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_ADC_ConvCpltCallback+0x158>)
 8002e02:	2209      	movs	r2, #9
 8002e04:	601a      	str	r2, [r3, #0]
		  	HAL_ADC_Start_IT(&hadc1);
 8002e06:	4803      	ldr	r0, [pc, #12]	; (8002e14 <HAL_ADC_ConvCpltCallback+0x150>)
 8002e08:	f000 ffa6 	bl	8003d58 <HAL_ADC_Start_IT>
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	2000043c 	.word	0x2000043c
 8002e18:	200000f8 	.word	0x200000f8
 8002e1c:	200000f4 	.word	0x200000f4

08002e20 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	80fb      	strh	r3, [r7, #6]

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET){
 8002e2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e2e:	4831      	ldr	r0, [pc, #196]	; (8002ef4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002e30:	f001 ffb4 	bl	8004d9c <HAL_GPIO_ReadPin>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10c      	bne.n	8002e54 <HAL_GPIO_EXTI_Callback+0x34>

		 //ciszej

		 if(indeks_glosnosci>0 && indeks_glosnosci<=9) indeks_glosnosci--;
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	dd08      	ble.n	8002e54 <HAL_GPIO_EXTI_Callback+0x34>
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b09      	cmp	r3, #9
 8002e48:	dc04      	bgt.n	8002e54 <HAL_GPIO_EXTI_Callback+0x34>
 8002e4a:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	4a29      	ldr	r2, [pc, #164]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002e52:	6013      	str	r3, [r2, #0]

		  	}

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 8002e54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e58:	4826      	ldr	r0, [pc, #152]	; (8002ef4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002e5a:	f001 ff9f 	bl	8004d9c <HAL_GPIO_ReadPin>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d104      	bne.n	8002e6e <HAL_GPIO_EXTI_Callback+0x4e>
			  		//prev song
			  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002e64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e68:	4824      	ldr	r0, [pc, #144]	; (8002efc <HAL_GPIO_EXTI_Callback+0xdc>)
 8002e6a:	f001 ffc8 	bl	8004dfe <HAL_GPIO_TogglePin>

			}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 8002e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e72:	4820      	ldr	r0, [pc, #128]	; (8002ef4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002e74:	f001 ff92 	bl	8004d9c <HAL_GPIO_ReadPin>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d110      	bne.n	8002ea0 <HAL_GPIO_EXTI_Callback+0x80>

		 //pause/start
		 //na razie tylko startuje
		 if(stan==1){
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d106      	bne.n	8002e94 <HAL_GPIO_EXTI_Callback+0x74>
		 HAL_TIM_Base_Start_IT(&htim4);
 8002e86:	481f      	ldr	r0, [pc, #124]	; (8002f04 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002e88:	f003 f855 	bl	8005f36 <HAL_TIM_Base_Start_IT>
		 stan = 0;
 8002e8c:	4b1c      	ldr	r3, [pc, #112]	; (8002f00 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	e005      	b.n	8002ea0 <HAL_GPIO_EXTI_Callback+0x80>
		 }
		 else
		 {
			 HAL_TIM_Base_Stop_IT(&htim4);
 8002e94:	481b      	ldr	r0, [pc, #108]	; (8002f04 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002e96:	f003 f872 	bl	8005f7e <HAL_TIM_Base_Stop_IT>
			 stan=1;
 8002e9a:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
		 }

	 		}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET){
 8002ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ea4:	4813      	ldr	r0, [pc, #76]	; (8002ef4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002ea6:	f001 ff79 	bl	8004d9c <HAL_GPIO_ReadPin>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d104      	bne.n	8002eba <HAL_GPIO_EXTI_Callback+0x9a>
		 //volume up
		 		 	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002eb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eb4:	4811      	ldr	r0, [pc, #68]	; (8002efc <HAL_GPIO_EXTI_Callback+0xdc>)
 8002eb6:	f001 ffa2 	bl	8004dfe <HAL_GPIO_TogglePin>

		 	}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 8002eba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ebe:	480d      	ldr	r0, [pc, #52]	; (8002ef4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002ec0:	f001 ff6c 	bl	8004d9c <HAL_GPIO_ReadPin>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_GPIO_EXTI_Callback+0xc4>

		 //glosniej

		 if(indeks_glosnosci>=0 && indeks_glosnosci<9)
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	db08      	blt.n	8002ee4 <HAL_GPIO_EXTI_Callback+0xc4>
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	dc04      	bgt.n	8002ee4 <HAL_GPIO_EXTI_Callback+0xc4>
			 indeks_glosnosci++;
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	4a05      	ldr	r2, [pc, #20]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002ee2:	6013      	str	r3, [r2, #0]
			 	}
	 HAL_Delay(200);
 8002ee4:	20c8      	movs	r0, #200	; 0xc8
 8002ee6:	f000 fed1 	bl	8003c8c <HAL_Delay>

}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	200000f4 	.word	0x200000f4
 8002efc:	40020c00 	.word	0x40020c00
 8002f00:	200000fc 	.word	0x200000fc
 8002f04:	2000013c 	.word	0x2000013c

08002f08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
if(htim->Instance == TIM4)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d122      	bne.n	8002f60 <HAL_TIM_PeriodElapsedCallback+0x58>
{
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,rawAudio[i]*glosnosc_guziczki[indeks_glosnosci]);
 8002f1a:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002f20:	5cd3      	ldrb	r3, [r2, r3]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd fafe 	bl	8000524 <__aeabi_i2d>
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f36:	461a      	mov	r2, r3
 8002f38:	4623      	mov	r3, r4
 8002f3a:	f7fd fb5d 	bl	80005f8 <__aeabi_dmul>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	4618      	mov	r0, r3
 8002f44:	4621      	mov	r1, r4
 8002f46:	f7fd fd69 	bl	8000a1c <__aeabi_d2uiz>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2100      	movs	r1, #0
 8002f50:	480a      	ldr	r0, [pc, #40]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002f52:	f001 fd41 	bl	80049d8 <HAL_DAC_SetValue>
	i++;
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	4a03      	ldr	r2, [pc, #12]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002f5e:	6013      	str	r3, [r2, #0]
}
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd90      	pop	{r4, r7, pc}
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	200000f0 	.word	0x200000f0
 8002f70:	080081d4 	.word	0x080081d4
 8002f74:	200000f4 	.word	0x200000f4
 8002f78:	20000008 	.word	0x20000008
 8002f7c:	20000488 	.word	0x20000488

08002f80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
	{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
			{

			// tutaj umieszczamy kod wykonywany w zależności od odebranej inf

			}
	}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <scan_files>:
*/

FRESULT scan_files (
    char* path        /* Start node to be scanned (***also used as work area***) */
)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b090      	sub	sp, #64	; 0x40
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    static FILINFO fno;


    res = f_opendir(&dir, path);                       /* Open the directory */
 8002f9c:	f107 030c 	add.w	r3, r7, #12
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fde0 	bl	8002b68 <f_opendir>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (res == FR_OK) {
 8002fae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d13e      	bne.n	8003034 <scan_files+0xa0>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	4921      	ldr	r1, [pc, #132]	; (8003040 <scan_files+0xac>)
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fe44 	bl	8002c4a <f_readdir>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8002fc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d12c      	bne.n	800302a <scan_files+0x96>
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <scan_files+0xac>)
 8002fd2:	7a5b      	ldrb	r3, [r3, #9]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d028      	beq.n	800302a <scan_files+0x96>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <scan_files+0xac>)
 8002fda:	7a1b      	ldrb	r3, [r3, #8]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01b      	beq.n	800301c <scan_files+0x88>
                i = strlen(path);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7fd f8f3 	bl	80001d0 <strlen>
 8002fea:	63b8      	str	r0, [r7, #56]	; 0x38
                sprintf(&path[i], "/%s", fno.fname);
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	4413      	add	r3, r2
 8002ff2:	4a14      	ldr	r2, [pc, #80]	; (8003044 <scan_files+0xb0>)
 8002ff4:	4914      	ldr	r1, [pc, #80]	; (8003048 <scan_files+0xb4>)
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f004 f83a 	bl	8007070 <siprintf>
                res = scan_files(path);                    /* Enter the directory */
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ffc9 	bl	8002f94 <scan_files>
 8003002:	4603      	mov	r3, r0
 8003004:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                if (res != FR_OK) break;
 8003008:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10b      	bne.n	8003028 <scan_files+0x94>
                path[i] = 0;
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003014:	4413      	add	r3, r2
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	e7cc      	b.n	8002fb6 <scan_files+0x22>
            } else {                                       /* It is a file. */
                printf("%s/%s\n", path, fno.fname);
 800301c:	4a09      	ldr	r2, [pc, #36]	; (8003044 <scan_files+0xb0>)
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	480a      	ldr	r0, [pc, #40]	; (800304c <scan_files+0xb8>)
 8003022:	f004 f80d 	bl	8007040 <iprintf>
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003026:	e7c6      	b.n	8002fb6 <scan_files+0x22>
                if (res != FR_OK) break;
 8003028:	bf00      	nop
            }
        }
        f_closedir(&dir);
 800302a:	f107 030c 	add.w	r3, r7, #12
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fdf3 	bl	8002c1a <f_closedir>
    }

    return res;
 8003034:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8003038:	4618      	mov	r0, r3
 800303a:	3740      	adds	r7, #64	; 0x40
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000100 	.word	0x20000100
 8003044:	20000109 	.word	0x20000109
 8003048:	080081c4 	.word	0x080081c4
 800304c:	080081c8 	.word	0x080081c8

08003050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
 8003056:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003058:	f000 fda6 	bl	8003ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800305c:	f000 f834 	bl	80030c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003060:	f000 f9f8 	bl	8003454 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003064:	f000 f89a 	bl	800319c <MX_ADC1_Init>
  MX_DAC_Init();
 8003068:	f000 f8ea 	bl	8003240 <MX_DAC_Init>
  MX_SPI3_Init();
 800306c:	f000 f912 	bl	8003294 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8003070:	f000 f9c6 	bl	8003400 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8003074:	f000 f990 	bl	8003398 <MX_TIM6_Init>
  MX_TIM4_Init();
 8003078:	f000 f942 	bl	8003300 <MX_TIM4_Init>
  FATFS fs;
     FRESULT res;
     char buff[256];


     res = f_mount(&fs, "", 1);
 800307c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003080:	2201      	movs	r2, #1
 8003082:	490e      	ldr	r1, [pc, #56]	; (80030bc <main+0x6c>)
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fd2f 	bl	8002ae8 <f_mount>
 800308a:	4603      	mov	r3, r0
 800308c:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
     if (res == FR_OK) {
 8003090:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <main+0x5c>
         strcpy(buff, "/");
 8003098:	1d3b      	adds	r3, r7, #4
 800309a:	222f      	movs	r2, #47	; 0x2f
 800309c:	801a      	strh	r2, [r3, #0]
         res = scan_files(buff);
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff77 	bl	8002f94 <scan_files>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
     }


  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 80030ac:	2100      	movs	r1, #0
 80030ae:	4804      	ldr	r0, [pc, #16]	; (80030c0 <main+0x70>)
 80030b0:	f001 fbdf 	bl	8004872 <HAL_DAC_Start>
  HAL_ADC_Start_IT(&hadc1);
 80030b4:	4803      	ldr	r0, [pc, #12]	; (80030c4 <main+0x74>)
 80030b6:	f000 fe4f 	bl	8003d58 <HAL_ADC_Start_IT>
  //read_song();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80030ba:	e7fe      	b.n	80030ba <main+0x6a>
 80030bc:	080081d0 	.word	0x080081d0
 80030c0:	20000488 	.word	0x20000488
 80030c4:	2000043c 	.word	0x2000043c

080030c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b094      	sub	sp, #80	; 0x50
 80030cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030ce:	f107 0320 	add.w	r3, r7, #32
 80030d2:	2230      	movs	r2, #48	; 0x30
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f003 ffaa 	bl	8007030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ec:	2300      	movs	r3, #0
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	4b28      	ldr	r3, [pc, #160]	; (8003194 <SystemClock_Config+0xcc>)
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	4a27      	ldr	r2, [pc, #156]	; (8003194 <SystemClock_Config+0xcc>)
 80030f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fa:	6413      	str	r3, [r2, #64]	; 0x40
 80030fc:	4b25      	ldr	r3, [pc, #148]	; (8003194 <SystemClock_Config+0xcc>)
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003108:	2300      	movs	r3, #0
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	4b22      	ldr	r3, [pc, #136]	; (8003198 <SystemClock_Config+0xd0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a21      	ldr	r2, [pc, #132]	; (8003198 <SystemClock_Config+0xd0>)
 8003112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <SystemClock_Config+0xd0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003124:	2301      	movs	r3, #1
 8003126:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800312e:	2302      	movs	r3, #2
 8003130:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003132:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003138:	2304      	movs	r3, #4
 800313a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800313c:	23a8      	movs	r3, #168	; 0xa8
 800313e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003140:	2302      	movs	r3, #2
 8003142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003144:	2304      	movs	r3, #4
 8003146:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003148:	f107 0320 	add.w	r3, r7, #32
 800314c:	4618      	mov	r0, r3
 800314e:	f001 fea3 	bl	8004e98 <HAL_RCC_OscConfig>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003158:	f000 fa1c 	bl	8003594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800315c:	230f      	movs	r3, #15
 800315e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003160:	2302      	movs	r3, #2
 8003162:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003168:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800316c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800316e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003172:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003174:	f107 030c 	add.w	r3, r7, #12
 8003178:	2105      	movs	r1, #5
 800317a:	4618      	mov	r0, r3
 800317c:	f002 f8ce 	bl	800531c <HAL_RCC_ClockConfig>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003186:	f000 fa05 	bl	8003594 <Error_Handler>
  }
}
 800318a:	bf00      	nop
 800318c:	3750      	adds	r7, #80	; 0x50
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800
 8003198:	40007000 	.word	0x40007000

0800319c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031a2:	463b      	mov	r3, r7
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80031ae:	4b21      	ldr	r3, [pc, #132]	; (8003234 <MX_ADC1_Init+0x98>)
 80031b0:	4a21      	ldr	r2, [pc, #132]	; (8003238 <MX_ADC1_Init+0x9c>)
 80031b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80031b4:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <MX_ADC1_Init+0x98>)
 80031b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031bc:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <MX_ADC1_Init+0x98>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <MX_ADC1_Init+0x98>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80031c8:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <MX_ADC1_Init+0x98>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031ce:	4b19      	ldr	r3, [pc, #100]	; (8003234 <MX_ADC1_Init+0x98>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031d6:	4b17      	ldr	r3, [pc, #92]	; (8003234 <MX_ADC1_Init+0x98>)
 80031d8:	2200      	movs	r2, #0
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031dc:	4b15      	ldr	r3, [pc, #84]	; (8003234 <MX_ADC1_Init+0x98>)
 80031de:	4a17      	ldr	r2, [pc, #92]	; (800323c <MX_ADC1_Init+0xa0>)
 80031e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <MX_ADC1_Init+0x98>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <MX_ADC1_Init+0x98>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <MX_ADC1_Init+0x98>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031f6:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <MX_ADC1_Init+0x98>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031fc:	480d      	ldr	r0, [pc, #52]	; (8003234 <MX_ADC1_Init+0x98>)
 80031fe:	f000 fd67 	bl	8003cd0 <HAL_ADC_Init>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003208:	f000 f9c4 	bl	8003594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800320c:	2303      	movs	r3, #3
 800320e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003210:	2301      	movs	r3, #1
 8003212:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003214:	2300      	movs	r3, #0
 8003216:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003218:	463b      	mov	r3, r7
 800321a:	4619      	mov	r1, r3
 800321c:	4805      	ldr	r0, [pc, #20]	; (8003234 <MX_ADC1_Init+0x98>)
 800321e:	f000 ffcd 	bl	80041bc <HAL_ADC_ConfigChannel>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003228:	f000 f9b4 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	2000043c 	.word	0x2000043c
 8003238:	40012000 	.word	0x40012000
 800323c:	0f000001 	.word	0x0f000001

08003240 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003246:	463b      	mov	r3, r7
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <MX_DAC_Init+0x4c>)
 8003250:	4a0f      	ldr	r2, [pc, #60]	; (8003290 <MX_DAC_Init+0x50>)
 8003252:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003254:	480d      	ldr	r0, [pc, #52]	; (800328c <MX_DAC_Init+0x4c>)
 8003256:	f001 faea 	bl	800482e <HAL_DAC_Init>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003260:	f000 f998 	bl	8003594 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003264:	2300      	movs	r3, #0
 8003266:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800326c:	463b      	mov	r3, r7
 800326e:	2200      	movs	r2, #0
 8003270:	4619      	mov	r1, r3
 8003272:	4806      	ldr	r0, [pc, #24]	; (800328c <MX_DAC_Init+0x4c>)
 8003274:	f001 fb63 	bl	800493e <HAL_DAC_ConfigChannel>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800327e:	f000 f989 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000488 	.word	0x20000488
 8003290:	40007400 	.word	0x40007400

08003294 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003298:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <MX_SPI3_Init+0x64>)
 800329a:	4a18      	ldr	r2, [pc, #96]	; (80032fc <MX_SPI3_Init+0x68>)
 800329c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <MX_SPI3_Init+0x64>)
 80032a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <MX_SPI3_Init+0x64>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <MX_SPI3_Init+0x64>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <MX_SPI3_Init+0x64>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <MX_SPI3_Init+0x64>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <MX_SPI3_Init+0x64>)
 80032c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <MX_SPI3_Init+0x64>)
 80032c8:	2218      	movs	r2, #24
 80032ca:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032cc:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <MX_SPI3_Init+0x64>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <MX_SPI3_Init+0x64>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <MX_SPI3_Init+0x64>)
 80032da:	2200      	movs	r2, #0
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <MX_SPI3_Init+0x64>)
 80032e0:	220a      	movs	r2, #10
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80032e4:	4804      	ldr	r0, [pc, #16]	; (80032f8 <MX_SPI3_Init+0x64>)
 80032e6:	f002 fa07 	bl	80056f8 <HAL_SPI_Init>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80032f0:	f000 f950 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	200001bc 	.word	0x200001bc
 80032fc:	40003c00 	.word	0x40003c00

08003300 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003306:	f107 0308 	add.w	r3, r7, #8
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003314:	463b      	mov	r3, r7
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800331c:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <MX_TIM4_Init+0x90>)
 800331e:	4a1d      	ldr	r2, [pc, #116]	; (8003394 <MX_TIM4_Init+0x94>)
 8003320:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 249;
 8003322:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <MX_TIM4_Init+0x90>)
 8003324:	22f9      	movs	r2, #249	; 0xf9
 8003326:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <MX_TIM4_Init+0x90>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20;
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <MX_TIM4_Init+0x90>)
 8003330:	2214      	movs	r2, #20
 8003332:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <MX_TIM4_Init+0x90>)
 8003336:	2200      	movs	r2, #0
 8003338:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <MX_TIM4_Init+0x90>)
 800333c:	2200      	movs	r2, #0
 800333e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003340:	4813      	ldr	r0, [pc, #76]	; (8003390 <MX_TIM4_Init+0x90>)
 8003342:	f002 fdcd 	bl	8005ee0 <HAL_TIM_Base_Init>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 800334c:	f000 f922 	bl	8003594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003354:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003356:	f107 0308 	add.w	r3, r7, #8
 800335a:	4619      	mov	r1, r3
 800335c:	480c      	ldr	r0, [pc, #48]	; (8003390 <MX_TIM4_Init+0x90>)
 800335e:	f002 ff41 	bl	80061e4 <HAL_TIM_ConfigClockSource>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8003368:	f000 f914 	bl	8003594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800336c:	2300      	movs	r3, #0
 800336e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003370:	2300      	movs	r3, #0
 8003372:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003374:	463b      	mov	r3, r7
 8003376:	4619      	mov	r1, r3
 8003378:	4805      	ldr	r0, [pc, #20]	; (8003390 <MX_TIM4_Init+0x90>)
 800337a:	f003 f94d 	bl	8006618 <HAL_TIMEx_MasterConfigSynchronization>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003384:	f000 f906 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003388:	bf00      	nop
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	2000013c 	.word	0x2000013c
 8003394:	40000800 	.word	0x40000800

08003398 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800339e:	463b      	mov	r3, r7
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80033a6:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <MX_TIM6_Init+0x60>)
 80033a8:	4a14      	ldr	r2, [pc, #80]	; (80033fc <MX_TIM6_Init+0x64>)
 80033aa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 249;
 80033ac:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <MX_TIM6_Init+0x60>)
 80033ae:	22f9      	movs	r2, #249	; 0xf9
 80033b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b2:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <MX_TIM6_Init+0x60>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20;
 80033b8:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <MX_TIM6_Init+0x60>)
 80033ba:	2214      	movs	r2, #20
 80033bc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033be:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <MX_TIM6_Init+0x60>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80033c4:	480c      	ldr	r0, [pc, #48]	; (80033f8 <MX_TIM6_Init+0x60>)
 80033c6:	f002 fd8b 	bl	8005ee0 <HAL_TIM_Base_Init>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80033d0:	f000 f8e0 	bl	8003594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d4:	2300      	movs	r3, #0
 80033d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033d8:	2300      	movs	r3, #0
 80033da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80033dc:	463b      	mov	r3, r7
 80033de:	4619      	mov	r1, r3
 80033e0:	4805      	ldr	r0, [pc, #20]	; (80033f8 <MX_TIM6_Init+0x60>)
 80033e2:	f003 f919 	bl	8006618 <HAL_TIMEx_MasterConfigSynchronization>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80033ec:	f000 f8d2 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	2000059c 	.word	0x2000059c
 80033fc:	40001000 	.word	0x40001000

08003400 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003404:	4b11      	ldr	r3, [pc, #68]	; (800344c <MX_USART3_UART_Init+0x4c>)
 8003406:	4a12      	ldr	r2, [pc, #72]	; (8003450 <MX_USART3_UART_Init+0x50>)
 8003408:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <MX_USART3_UART_Init+0x4c>)
 800340c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003410:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003412:	4b0e      	ldr	r3, [pc, #56]	; (800344c <MX_USART3_UART_Init+0x4c>)
 8003414:	2200      	movs	r2, #0
 8003416:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <MX_USART3_UART_Init+0x4c>)
 800341a:	2200      	movs	r2, #0
 800341c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <MX_USART3_UART_Init+0x4c>)
 8003420:	2200      	movs	r2, #0
 8003422:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <MX_USART3_UART_Init+0x4c>)
 8003426:	220c      	movs	r2, #12
 8003428:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800342a:	4b08      	ldr	r3, [pc, #32]	; (800344c <MX_USART3_UART_Init+0x4c>)
 800342c:	2200      	movs	r2, #0
 800342e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003430:	4b06      	ldr	r3, [pc, #24]	; (800344c <MX_USART3_UART_Init+0x4c>)
 8003432:	2200      	movs	r2, #0
 8003434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003436:	4805      	ldr	r0, [pc, #20]	; (800344c <MX_USART3_UART_Init+0x4c>)
 8003438:	f003 f947 	bl	80066ca <HAL_UART_Init>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003442:	f000 f8a7 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	2000017c 	.word	0x2000017c
 8003450:	40004800 	.word	0x40004800

08003454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	; 0x28
 8003458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345a:	f107 0314 	add.w	r3, r7, #20
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	60da      	str	r2, [r3, #12]
 8003468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	4b43      	ldr	r3, [pc, #268]	; (800357c <MX_GPIO_Init+0x128>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4a42      	ldr	r2, [pc, #264]	; (800357c <MX_GPIO_Init+0x128>)
 8003474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
 800347a:	4b40      	ldr	r3, [pc, #256]	; (800357c <MX_GPIO_Init+0x128>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	4b3c      	ldr	r3, [pc, #240]	; (800357c <MX_GPIO_Init+0x128>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a3b      	ldr	r2, [pc, #236]	; (800357c <MX_GPIO_Init+0x128>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b39      	ldr	r3, [pc, #228]	; (800357c <MX_GPIO_Init+0x128>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	4b35      	ldr	r3, [pc, #212]	; (800357c <MX_GPIO_Init+0x128>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a34      	ldr	r2, [pc, #208]	; (800357c <MX_GPIO_Init+0x128>)
 80034ac:	f043 0302 	orr.w	r3, r3, #2
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b32      	ldr	r3, [pc, #200]	; (800357c <MX_GPIO_Init+0x128>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	4b2e      	ldr	r3, [pc, #184]	; (800357c <MX_GPIO_Init+0x128>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a2d      	ldr	r2, [pc, #180]	; (800357c <MX_GPIO_Init+0x128>)
 80034c8:	f043 0308 	orr.w	r3, r3, #8
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b2b      	ldr	r3, [pc, #172]	; (800357c <MX_GPIO_Init+0x128>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	607b      	str	r3, [r7, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	4b27      	ldr	r3, [pc, #156]	; (800357c <MX_GPIO_Init+0x128>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	4a26      	ldr	r2, [pc, #152]	; (800357c <MX_GPIO_Init+0x128>)
 80034e4:	f043 0304 	orr.w	r3, r3, #4
 80034e8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <MX_GPIO_Init+0x128>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80034f6:	2200      	movs	r2, #0
 80034f8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80034fc:	4820      	ldr	r0, [pc, #128]	; (8003580 <MX_GPIO_Init+0x12c>)
 80034fe:	f001 fc65 	bl	8004dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003502:	2301      	movs	r3, #1
 8003504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003506:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <MX_GPIO_Init+0x130>)
 8003508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800350a:	2302      	movs	r3, #2
 800350c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350e:	f107 0314 	add.w	r3, r7, #20
 8003512:	4619      	mov	r1, r3
 8003514:	481c      	ldr	r0, [pc, #112]	; (8003588 <MX_GPIO_Init+0x134>)
 8003516:	f001 faa7 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 800351a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800351e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003520:	4b1a      	ldr	r3, [pc, #104]	; (800358c <MX_GPIO_Init+0x138>)
 8003522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003524:	2301      	movs	r3, #1
 8003526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	4619      	mov	r1, r3
 800352e:	4818      	ldr	r0, [pc, #96]	; (8003590 <MX_GPIO_Init+0x13c>)
 8003530:	f001 fa9a 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003534:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800353a:	2301      	movs	r3, #1
 800353c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003542:	2300      	movs	r3, #0
 8003544:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4619      	mov	r1, r3
 800354c:	480c      	ldr	r0, [pc, #48]	; (8003580 <MX_GPIO_Init+0x12c>)
 800354e:	f001 fa8b 	bl	8004a68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8003552:	2200      	movs	r2, #0
 8003554:	2101      	movs	r1, #1
 8003556:	2006      	movs	r0, #6
 8003558:	f001 f933 	bl	80047c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800355c:	2006      	movs	r0, #6
 800355e:	f001 f94c 	bl	80047fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003562:	2200      	movs	r2, #0
 8003564:	2101      	movs	r1, #1
 8003566:	2028      	movs	r0, #40	; 0x28
 8003568:	f001 f92b 	bl	80047c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800356c:	2028      	movs	r0, #40	; 0x28
 800356e:	f001 f944 	bl	80047fa <HAL_NVIC_EnableIRQ>

}
 8003572:	bf00      	nop
 8003574:	3728      	adds	r7, #40	; 0x28
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800
 8003580:	40020c00 	.word	0x40020c00
 8003584:	10110000 	.word	0x10110000
 8003588:	40020000 	.word	0x40020000
 800358c:	10310000 	.word	0x10310000
 8003590:	40020400 	.word	0x40020400

08003594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <HAL_MspInit+0x58>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	4a12      	ldr	r2, [pc, #72]	; (80035fc <HAL_MspInit+0x58>)
 80035b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <HAL_MspInit+0x58>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <HAL_MspInit+0x58>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <HAL_MspInit+0x58>)
 80035d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d4:	6413      	str	r3, [r2, #64]	; 0x40
 80035d6:	4b09      	ldr	r3, [pc, #36]	; (80035fc <HAL_MspInit+0x58>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80035e2:	2200      	movs	r2, #0
 80035e4:	2100      	movs	r1, #0
 80035e6:	2001      	movs	r0, #1
 80035e8:	f001 f8eb 	bl	80047c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80035ec:	2001      	movs	r0, #1
 80035ee:	f001 f904 	bl	80047fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800

08003600 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1b      	ldr	r2, [pc, #108]	; (800368c <HAL_ADC_MspInit+0x8c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d12f      	bne.n	8003682 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <HAL_ADC_MspInit+0x90>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	4a19      	ldr	r2, [pc, #100]	; (8003690 <HAL_ADC_MspInit+0x90>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003630:	6453      	str	r3, [r2, #68]	; 0x44
 8003632:	4b17      	ldr	r3, [pc, #92]	; (8003690 <HAL_ADC_MspInit+0x90>)
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	4b13      	ldr	r3, [pc, #76]	; (8003690 <HAL_ADC_MspInit+0x90>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	4a12      	ldr	r2, [pc, #72]	; (8003690 <HAL_ADC_MspInit+0x90>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6313      	str	r3, [r2, #48]	; 0x30
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <HAL_ADC_MspInit+0x90>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800365a:	2308      	movs	r3, #8
 800365c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800365e:	2303      	movs	r3, #3
 8003660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003666:	f107 0314 	add.w	r3, r7, #20
 800366a:	4619      	mov	r1, r3
 800366c:	4809      	ldr	r0, [pc, #36]	; (8003694 <HAL_ADC_MspInit+0x94>)
 800366e:	f001 f9fb 	bl	8004a68 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8003672:	2200      	movs	r2, #0
 8003674:	2101      	movs	r1, #1
 8003676:	2012      	movs	r0, #18
 8003678:	f001 f8a3 	bl	80047c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800367c:	2012      	movs	r0, #18
 800367e:	f001 f8bc 	bl	80047fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003682:	bf00      	nop
 8003684:	3728      	adds	r7, #40	; 0x28
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40012000 	.word	0x40012000
 8003690:	40023800 	.word	0x40023800
 8003694:	40020000 	.word	0x40020000

08003698 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a0:	f107 0314 	add.w	r3, r7, #20
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a17      	ldr	r2, [pc, #92]	; (8003714 <HAL_DAC_MspInit+0x7c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d127      	bne.n	800370a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	4b16      	ldr	r3, [pc, #88]	; (8003718 <HAL_DAC_MspInit+0x80>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	4a15      	ldr	r2, [pc, #84]	; (8003718 <HAL_DAC_MspInit+0x80>)
 80036c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036c8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <HAL_DAC_MspInit+0x80>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <HAL_DAC_MspInit+0x80>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	4a0e      	ldr	r2, [pc, #56]	; (8003718 <HAL_DAC_MspInit+0x80>)
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	6313      	str	r3, [r2, #48]	; 0x30
 80036e6:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <HAL_DAC_MspInit+0x80>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80036f2:	2310      	movs	r3, #16
 80036f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036f6:	2303      	movs	r3, #3
 80036f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fe:	f107 0314 	add.w	r3, r7, #20
 8003702:	4619      	mov	r1, r3
 8003704:	4805      	ldr	r0, [pc, #20]	; (800371c <HAL_DAC_MspInit+0x84>)
 8003706:	f001 f9af 	bl	8004a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800370a:	bf00      	nop
 800370c:	3728      	adds	r7, #40	; 0x28
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40007400 	.word	0x40007400
 8003718:	40023800 	.word	0x40023800
 800371c:	40020000 	.word	0x40020000

08003720 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	; 0x28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	60da      	str	r2, [r3, #12]
 8003736:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_SPI_MspInit+0x84>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d12b      	bne.n	800379a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <HAL_SPI_MspInit+0x88>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <HAL_SPI_MspInit+0x88>)
 800374c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003750:	6413      	str	r3, [r2, #64]	; 0x40
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_SPI_MspInit+0x88>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_SPI_MspInit+0x88>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	4a10      	ldr	r2, [pc, #64]	; (80037a8 <HAL_SPI_MspInit+0x88>)
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	6313      	str	r3, [r2, #48]	; 0x30
 800376e:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <HAL_SPI_MspInit+0x88>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800377a:	2338      	movs	r3, #56	; 0x38
 800377c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	2302      	movs	r3, #2
 8003780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003786:	2303      	movs	r3, #3
 8003788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800378a:	2306      	movs	r3, #6
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378e:	f107 0314 	add.w	r3, r7, #20
 8003792:	4619      	mov	r1, r3
 8003794:	4805      	ldr	r0, [pc, #20]	; (80037ac <HAL_SPI_MspInit+0x8c>)
 8003796:	f001 f967 	bl	8004a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800379a:	bf00      	nop
 800379c:	3728      	adds	r7, #40	; 0x28
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40003c00 	.word	0x40003c00
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020400 	.word	0x40020400

080037b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_TIM_Base_MspInit+0x70>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d116      	bne.n	80037f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	4b17      	ldr	r3, [pc, #92]	; (8003824 <HAL_TIM_Base_MspInit+0x74>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	4a16      	ldr	r2, [pc, #88]	; (8003824 <HAL_TIM_Base_MspInit+0x74>)
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	6413      	str	r3, [r2, #64]	; 0x40
 80037d2:	4b14      	ldr	r3, [pc, #80]	; (8003824 <HAL_TIM_Base_MspInit+0x74>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80037de:	2200      	movs	r2, #0
 80037e0:	2100      	movs	r1, #0
 80037e2:	201e      	movs	r0, #30
 80037e4:	f000 ffed 	bl	80047c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037e8:	201e      	movs	r0, #30
 80037ea:	f001 f806 	bl	80047fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80037ee:	e012      	b.n	8003816 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0c      	ldr	r2, [pc, #48]	; (8003828 <HAL_TIM_Base_MspInit+0x78>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d10d      	bne.n	8003816 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <HAL_TIM_Base_MspInit+0x74>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	4a08      	ldr	r2, [pc, #32]	; (8003824 <HAL_TIM_Base_MspInit+0x74>)
 8003804:	f043 0310 	orr.w	r3, r3, #16
 8003808:	6413      	str	r3, [r2, #64]	; 0x40
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_TIM_Base_MspInit+0x74>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40000800 	.word	0x40000800
 8003824:	40023800 	.word	0x40023800
 8003828:	40001000 	.word	0x40001000

0800382c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08a      	sub	sp, #40	; 0x28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003834:	f107 0314 	add.w	r3, r7, #20
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1d      	ldr	r2, [pc, #116]	; (80038c0 <HAL_UART_MspInit+0x94>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d134      	bne.n	80038b8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	4b1c      	ldr	r3, [pc, #112]	; (80038c4 <HAL_UART_MspInit+0x98>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <HAL_UART_MspInit+0x98>)
 8003858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800385c:	6413      	str	r3, [r2, #64]	; 0x40
 800385e:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <HAL_UART_MspInit+0x98>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <HAL_UART_MspInit+0x98>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <HAL_UART_MspInit+0x98>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
 800387a:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <HAL_UART_MspInit+0x98>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003886:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800388a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388c:	2302      	movs	r3, #2
 800388e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003890:	2301      	movs	r3, #1
 8003892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003894:	2303      	movs	r3, #3
 8003896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003898:	2307      	movs	r3, #7
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	4619      	mov	r1, r3
 80038a2:	4809      	ldr	r0, [pc, #36]	; (80038c8 <HAL_UART_MspInit+0x9c>)
 80038a4:	f001 f8e0 	bl	8004a68 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80038a8:	2200      	movs	r2, #0
 80038aa:	2100      	movs	r1, #0
 80038ac:	2027      	movs	r0, #39	; 0x27
 80038ae:	f000 ff88 	bl	80047c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80038b2:	2027      	movs	r0, #39	; 0x27
 80038b4:	f000 ffa1 	bl	80047fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80038b8:	bf00      	nop
 80038ba:	3728      	adds	r7, #40	; 0x28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40004800 	.word	0x40004800
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40020800 	.word	0x40020800

080038cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038da:	b480      	push	{r7}
 80038dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038de:	e7fe      	b.n	80038de <HardFault_Handler+0x4>

080038e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e4:	e7fe      	b.n	80038e4 <MemManage_Handler+0x4>

080038e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038ea:	e7fe      	b.n	80038ea <BusFault_Handler+0x4>

080038ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f0:	e7fe      	b.n	80038f0 <UsageFault_Handler+0x4>

080038f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038f2:	b480      	push	{r7}
 80038f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800390e:	b480      	push	{r7}
 8003910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8003920:	f7fd fdd6 	bl	80014d0 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003924:	f000 f992 	bl	8003c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}

0800392c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003930:	f001 fa98 	bl	8004e64 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}

08003938 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800393c:	2001      	movs	r0, #1
 800393e:	f001 fa79 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800394c:	4802      	ldr	r0, [pc, #8]	; (8003958 <ADC_IRQHandler+0x10>)
 800394e:	f000 fad3 	bl	8003ef8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	2000043c 	.word	0x2000043c

0800395c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003960:	4802      	ldr	r0, [pc, #8]	; (800396c <TIM4_IRQHandler+0x10>)
 8003962:	f002 fb37 	bl	8005fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	2000013c 	.word	0x2000013c

08003970 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003974:	4802      	ldr	r0, [pc, #8]	; (8003980 <USART3_IRQHandler+0x10>)
 8003976:	f002 fef5 	bl	8006764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	2000017c 	.word	0x2000017c

08003984 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003988:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800398c:	f001 fa52 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003990:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003994:	f001 fa4e 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003998:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800399c:	f001 fa4a 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80039a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039a4:	f001 fa46 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80039a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80039ac:	f001 fa42 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <_read>:
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	e00a      	b.n	80039dc <_read+0x28>
 80039c6:	f3af 8000 	nop.w
 80039ca:	4601      	mov	r1, r0
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	60ba      	str	r2, [r7, #8]
 80039d2:	b2ca      	uxtb	r2, r1
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	3301      	adds	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	dbf0      	blt.n	80039c6 <_read+0x12>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <_write>:
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e009      	b.n	8003a14 <_write+0x26>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	60ba      	str	r2, [r7, #8]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f3af 8000 	nop.w
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	3301      	adds	r3, #1
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	dbf1      	blt.n	8003a00 <_write+0x12>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <_close>:
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <_fstat>:
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	2300      	movs	r3, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <_isatty>:
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	2301      	movs	r3, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <_lseek>:
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	2300      	movs	r3, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <_sbrk>:
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <_sbrk+0x50>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <_sbrk+0x16>
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <_sbrk+0x50>)
 8003aa2:	4a10      	ldr	r2, [pc, #64]	; (8003ae4 <_sbrk+0x54>)
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <_sbrk+0x50>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <_sbrk+0x50>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	466a      	mov	r2, sp
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d907      	bls.n	8003aca <_sbrk+0x3a>
 8003aba:	f003 fa8f 	bl	8006fdc <__errno>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	230c      	movs	r3, #12
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac8:	e006      	b.n	8003ad8 <_sbrk+0x48>
 8003aca:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <_sbrk+0x50>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	4a03      	ldr	r2, [pc, #12]	; (8003ae0 <_sbrk+0x50>)
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000118 	.word	0x20000118
 8003ae4:	200005e8 	.word	0x200005e8

08003ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aec:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <SystemInit+0x60>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <SystemInit+0x60>)
 8003af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003afc:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <SystemInit+0x64>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a12      	ldr	r2, [pc, #72]	; (8003b4c <SystemInit+0x64>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b08:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <SystemInit+0x64>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <SystemInit+0x64>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <SystemInit+0x64>)
 8003b14:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <SystemInit+0x64>)
 8003b20:	4a0b      	ldr	r2, [pc, #44]	; (8003b50 <SystemInit+0x68>)
 8003b22:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <SystemInit+0x64>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a08      	ldr	r2, [pc, #32]	; (8003b4c <SystemInit+0x64>)
 8003b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003b30:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <SystemInit+0x64>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b36:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <SystemInit+0x60>)
 8003b38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b3c:	609a      	str	r2, [r3, #8]
#endif
}
 8003b3e:	bf00      	nop
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	e000ed00 	.word	0xe000ed00
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	24003010 	.word	0x24003010

08003b54 <Reset_Handler>:
 8003b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b8c <LoopFillZerobss+0x14>
 8003b58:	2100      	movs	r1, #0
 8003b5a:	e003      	b.n	8003b64 <LoopCopyDataInit>

08003b5c <CopyDataInit>:
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <LoopFillZerobss+0x18>)
 8003b5e:	585b      	ldr	r3, [r3, r1]
 8003b60:	5043      	str	r3, [r0, r1]
 8003b62:	3104      	adds	r1, #4

08003b64 <LoopCopyDataInit>:
 8003b64:	480b      	ldr	r0, [pc, #44]	; (8003b94 <LoopFillZerobss+0x1c>)
 8003b66:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <LoopFillZerobss+0x20>)
 8003b68:	1842      	adds	r2, r0, r1
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d3f6      	bcc.n	8003b5c <CopyDataInit>
 8003b6e:	4a0b      	ldr	r2, [pc, #44]	; (8003b9c <LoopFillZerobss+0x24>)
 8003b70:	e002      	b.n	8003b78 <LoopFillZerobss>

08003b72 <FillZerobss>:
 8003b72:	2300      	movs	r3, #0
 8003b74:	f842 3b04 	str.w	r3, [r2], #4

08003b78 <LoopFillZerobss>:
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <LoopFillZerobss+0x28>)
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d3f9      	bcc.n	8003b72 <FillZerobss>
 8003b7e:	f7ff ffb3 	bl	8003ae8 <SystemInit>
 8003b82:	f003 fa31 	bl	8006fe8 <__libc_init_array>
 8003b86:	f7ff fa63 	bl	8003050 <main>
 8003b8a:	4770      	bx	lr
 8003b8c:	20020000 	.word	0x20020000
 8003b90:	080263d4 	.word	0x080263d4
 8003b94:	20000000 	.word	0x20000000
 8003b98:	200000c8 	.word	0x200000c8
 8003b9c:	200000c8 	.word	0x200000c8
 8003ba0:	200005e8 	.word	0x200005e8

08003ba4 <CAN1_RX0_IRQHandler>:
 8003ba4:	e7fe      	b.n	8003ba4 <CAN1_RX0_IRQHandler>
	...

08003ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <HAL_Init+0x40>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a0d      	ldr	r2, [pc, #52]	; (8003be8 <HAL_Init+0x40>)
 8003bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_Init+0x40>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a0a      	ldr	r2, [pc, #40]	; (8003be8 <HAL_Init+0x40>)
 8003bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bc4:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <HAL_Init+0x40>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a07      	ldr	r2, [pc, #28]	; (8003be8 <HAL_Init+0x40>)
 8003bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bd0:	2003      	movs	r0, #3
 8003bd2:	f000 fdeb 	bl	80047ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f000 f808 	bl	8003bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bdc:	f7ff fce2 	bl	80035a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40023c00 	.word	0x40023c00

08003bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bf4:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <HAL_InitTick+0x54>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <HAL_InitTick+0x58>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fe03 	bl	8004816 <HAL_SYSTICK_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e00e      	b.n	8003c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b0f      	cmp	r3, #15
 8003c1e:	d80a      	bhi.n	8003c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c20:	2200      	movs	r2, #0
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	f04f 30ff 	mov.w	r0, #4294967295
 8003c28:	f000 fdcb 	bl	80047c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c2c:	4a06      	ldr	r2, [pc, #24]	; (8003c48 <HAL_InitTick+0x5c>)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20000058 	.word	0x20000058
 8003c44:	20000060 	.word	0x20000060
 8003c48:	2000005c 	.word	0x2000005c

08003c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_IncTick+0x20>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_IncTick+0x24>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <HAL_IncTick+0x24>)
 8003c5e:	6013      	str	r3, [r2, #0]
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20000060 	.word	0x20000060
 8003c70:	200005e0 	.word	0x200005e0

08003c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return uwTick;
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <HAL_GetTick+0x14>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	200005e0 	.word	0x200005e0

08003c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c94:	f7ff ffee 	bl	8003c74 <HAL_GetTick>
 8003c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d005      	beq.n	8003cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <HAL_Delay+0x40>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cb2:	bf00      	nop
 8003cb4:	f7ff ffde 	bl	8003c74 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d8f7      	bhi.n	8003cb4 <HAL_Delay+0x28>
  {
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000060 	.word	0x20000060

08003cd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e033      	b.n	8003d4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff fc86 	bl	8003600 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d118      	bne.n	8003d40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d16:	f023 0302 	bic.w	r3, r3, #2
 8003d1a:	f043 0202 	orr.w	r2, r3, #2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fb6c 	bl	8004400 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	f043 0201 	orr.w	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d3e:	e001      	b.n	8003d44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADC_Start_IT+0x1a>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e0b0      	b.n	8003ed4 <HAL_ADC_Start_IT+0x17c>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d018      	beq.n	8003dba <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d98:	4b51      	ldr	r3, [pc, #324]	; (8003ee0 <HAL_ADC_Start_IT+0x188>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a51      	ldr	r2, [pc, #324]	; (8003ee4 <HAL_ADC_Start_IT+0x18c>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	0c9a      	lsrs	r2, r3, #18
 8003da4:	4613      	mov	r3, r2
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	4413      	add	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003dac:	e002      	b.n	8003db4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f9      	bne.n	8003dae <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	f040 8084 	bne.w	8003ed2 <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003df4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e08:	d106      	bne.n	8003e18 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f023 0206 	bic.w	r2, r3, #6
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
 8003e16:	e002      	b.n	8003e1e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e26:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <HAL_ADC_Start_IT+0x190>)
 8003e28:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e32:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e42:	f043 0320 	orr.w	r3, r3, #32
 8003e46:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d12a      	bne.n	8003eaa <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a24      	ldr	r2, [pc, #144]	; (8003eec <HAL_ADC_Start_IT+0x194>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d015      	beq.n	8003e8a <HAL_ADC_Start_IT+0x132>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a23      	ldr	r2, [pc, #140]	; (8003ef0 <HAL_ADC_Start_IT+0x198>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d105      	bne.n	8003e74 <HAL_ADC_Start_IT+0x11c>
 8003e68:	4b1f      	ldr	r3, [pc, #124]	; (8003ee8 <HAL_ADC_Start_IT+0x190>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1e      	ldr	r2, [pc, #120]	; (8003ef4 <HAL_ADC_Start_IT+0x19c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d129      	bne.n	8003ed2 <HAL_ADC_Start_IT+0x17a>
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <HAL_ADC_Start_IT+0x190>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	2b0f      	cmp	r3, #15
 8003e88:	d823      	bhi.n	8003ed2 <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d11c      	bne.n	8003ed2 <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	e013      	b.n	8003ed2 <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a0f      	ldr	r2, [pc, #60]	; (8003eec <HAL_ADC_Start_IT+0x194>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10e      	bne.n	8003ed2 <HAL_ADC_Start_IT+0x17a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d107      	bne.n	8003ed2 <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ed0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	20000058 	.word	0x20000058
 8003ee4:	431bde83 	.word	0x431bde83
 8003ee8:	40012300 	.word	0x40012300
 8003eec:	40012000 	.word	0x40012000
 8003ef0:	40012100 	.word	0x40012100
 8003ef4:	40012200 	.word	0x40012200

08003ef8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	2300      	movs	r3, #0
 8003f06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	bf0c      	ite	eq
 8003f16:	2301      	moveq	r3, #1
 8003f18:	2300      	movne	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d049      	beq.n	8003fce <HAL_ADC_IRQHandler+0xd6>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d046      	beq.n	8003fce <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d12b      	bne.n	8003fbe <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d127      	bne.n	8003fbe <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d006      	beq.n	8003f8a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d119      	bne.n	8003fbe <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0220 	bic.w	r2, r2, #32
 8003f98:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d105      	bne.n	8003fbe <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fe fe80 	bl	8002cc4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0212 	mvn.w	r2, #18
 8003fcc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fee:	2b80      	cmp	r3, #128	; 0x80
 8003ff0:	bf0c      	ite	eq
 8003ff2:	2301      	moveq	r3, #1
 8003ff4:	2300      	movne	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d057      	beq.n	80040b0 <HAL_ADC_IRQHandler+0x1b8>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d054      	beq.n	80040b0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	d105      	bne.n	800401e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d139      	bne.n	80040a0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004036:	2b00      	cmp	r3, #0
 8004038:	d006      	beq.n	8004048 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004044:	2b00      	cmp	r3, #0
 8004046:	d12b      	bne.n	80040a0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004052:	2b00      	cmp	r3, #0
 8004054:	d124      	bne.n	80040a0 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004060:	2b00      	cmp	r3, #0
 8004062:	d11d      	bne.n	80040a0 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004068:	2b00      	cmp	r3, #0
 800406a:	d119      	bne.n	80040a0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800407a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d105      	bne.n	80040a0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	f043 0201 	orr.w	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 faa9 	bl	80045f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f06f 020c 	mvn.w	r2, #12
 80040ae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	bf0c      	ite	eq
 80040be:	2301      	moveq	r3, #1
 80040c0:	2300      	movne	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d0:	2b40      	cmp	r3, #64	; 0x40
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d017      	beq.n	8004112 <HAL_ADC_IRQHandler+0x21a>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d014      	beq.n	8004112 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d10d      	bne.n	8004112 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f846 	bl	8004194 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0201 	mvn.w	r2, #1
 8004110:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b20      	cmp	r3, #32
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004132:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004136:	bf0c      	ite	eq
 8004138:	2301      	moveq	r3, #1
 800413a:	2300      	movne	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d015      	beq.n	8004172 <HAL_ADC_IRQHandler+0x27a>
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d012      	beq.n	8004172 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004150:	f043 0202 	orr.w	r2, r3, #2
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0220 	mvn.w	r2, #32
 8004160:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f820 	bl	80041a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0220 	mvn.w	r2, #32
 8004170:	601a      	str	r2, [r3, #0]
  }
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x1c>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e105      	b.n	80043e4 <HAL_ADC_ConfigChannel+0x228>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b09      	cmp	r3, #9
 80041e6:	d925      	bls.n	8004234 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68d9      	ldr	r1, [r3, #12]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	4613      	mov	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	3b1e      	subs	r3, #30
 80041fe:	2207      	movs	r2, #7
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	43da      	mvns	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	400a      	ands	r2, r1
 800420c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68d9      	ldr	r1, [r3, #12]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	4618      	mov	r0, r3
 8004220:	4603      	mov	r3, r0
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	4403      	add	r3, r0
 8004226:	3b1e      	subs	r3, #30
 8004228:	409a      	lsls	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	e022      	b.n	800427a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6919      	ldr	r1, [r3, #16]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	4613      	mov	r3, r2
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4413      	add	r3, r2
 8004248:	2207      	movs	r2, #7
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43da      	mvns	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	400a      	ands	r2, r1
 8004256:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6919      	ldr	r1, [r3, #16]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	4618      	mov	r0, r3
 800426a:	4603      	mov	r3, r0
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	4403      	add	r3, r0
 8004270:	409a      	lsls	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b06      	cmp	r3, #6
 8004280:	d824      	bhi.n	80042cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	3b05      	subs	r3, #5
 8004294:	221f      	movs	r2, #31
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43da      	mvns	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	400a      	ands	r2, r1
 80042a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4618      	mov	r0, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	3b05      	subs	r3, #5
 80042be:	fa00 f203 	lsl.w	r2, r0, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	635a      	str	r2, [r3, #52]	; 0x34
 80042ca:	e04c      	b.n	8004366 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b0c      	cmp	r3, #12
 80042d2:	d824      	bhi.n	800431e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	3b23      	subs	r3, #35	; 0x23
 80042e6:	221f      	movs	r2, #31
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43da      	mvns	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	400a      	ands	r2, r1
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	4618      	mov	r0, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	3b23      	subs	r3, #35	; 0x23
 8004310:	fa00 f203 	lsl.w	r2, r0, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
 800431c:	e023      	b.n	8004366 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	3b41      	subs	r3, #65	; 0x41
 8004330:	221f      	movs	r2, #31
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43da      	mvns	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	400a      	ands	r2, r1
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	4618      	mov	r0, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	3b41      	subs	r3, #65	; 0x41
 800435a:	fa00 f203 	lsl.w	r2, r0, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <HAL_ADC_ConfigChannel+0x234>)
 8004368:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a21      	ldr	r2, [pc, #132]	; (80043f4 <HAL_ADC_ConfigChannel+0x238>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x1cc>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b12      	cmp	r3, #18
 800437a:	d105      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <HAL_ADC_ConfigChannel+0x238>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d123      	bne.n	80043da <HAL_ADC_ConfigChannel+0x21e>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b10      	cmp	r3, #16
 8004398:	d003      	beq.n	80043a2 <HAL_ADC_ConfigChannel+0x1e6>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b11      	cmp	r3, #17
 80043a0:	d11b      	bne.n	80043da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d111      	bne.n	80043da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <HAL_ADC_ConfigChannel+0x23c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a10      	ldr	r2, [pc, #64]	; (80043fc <HAL_ADC_ConfigChannel+0x240>)
 80043bc:	fba2 2303 	umull	r2, r3, r2, r3
 80043c0:	0c9a      	lsrs	r2, r3, #18
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043cc:	e002      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f9      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	40012300 	.word	0x40012300
 80043f4:	40012000 	.word	0x40012000
 80043f8:	20000058 	.word	0x20000058
 80043fc:	431bde83 	.word	0x431bde83

08004400 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004408:	4b79      	ldr	r3, [pc, #484]	; (80045f0 <ADC_Init+0x1f0>)
 800440a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	431a      	orrs	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6859      	ldr	r1, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	021a      	lsls	r2, r3, #8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800447a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6899      	ldr	r1, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	4a58      	ldr	r2, [pc, #352]	; (80045f4 <ADC_Init+0x1f4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d022      	beq.n	80044de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6899      	ldr	r1, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6899      	ldr	r1, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	609a      	str	r2, [r3, #8]
 80044dc:	e00f      	b.n	80044fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0202 	bic.w	r2, r2, #2
 800450c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6899      	ldr	r1, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	7e1b      	ldrb	r3, [r3, #24]
 8004518:	005a      	lsls	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01b      	beq.n	8004564 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800453a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800454a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6859      	ldr	r1, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	3b01      	subs	r3, #1
 8004558:	035a      	lsls	r2, r3, #13
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
 8004562:	e007      	b.n	8004574 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004572:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	3b01      	subs	r3, #1
 8004590:	051a      	lsls	r2, r3, #20
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6899      	ldr	r1, [r3, #8]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045b6:	025a      	lsls	r2, r3, #9
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6899      	ldr	r1, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	029a      	lsls	r2, r3, #10
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	609a      	str	r2, [r3, #8]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40012300 	.word	0x40012300
 80045f4:	0f000001 	.word	0x0f000001

080045f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800461c:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <__NVIC_SetPriorityGrouping+0x44>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004628:	4013      	ands	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800463c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800463e:	4a04      	ldr	r2, [pc, #16]	; (8004650 <__NVIC_SetPriorityGrouping+0x44>)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	60d3      	str	r3, [r2, #12]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004658:	4b04      	ldr	r3, [pc, #16]	; (800466c <__NVIC_GetPriorityGrouping+0x18>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	0a1b      	lsrs	r3, r3, #8
 800465e:	f003 0307 	and.w	r3, r3, #7
}
 8004662:	4618      	mov	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	2b00      	cmp	r3, #0
 8004680:	db0b      	blt.n	800469a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	f003 021f 	and.w	r2, r3, #31
 8004688:	4907      	ldr	r1, [pc, #28]	; (80046a8 <__NVIC_EnableIRQ+0x38>)
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	2001      	movs	r0, #1
 8004692:	fa00 f202 	lsl.w	r2, r0, r2
 8004696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	e000e100 	.word	0xe000e100

080046ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	6039      	str	r1, [r7, #0]
 80046b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	db0a      	blt.n	80046d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	490c      	ldr	r1, [pc, #48]	; (80046f8 <__NVIC_SetPriority+0x4c>)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	0112      	lsls	r2, r2, #4
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	440b      	add	r3, r1
 80046d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046d4:	e00a      	b.n	80046ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	4908      	ldr	r1, [pc, #32]	; (80046fc <__NVIC_SetPriority+0x50>)
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	3b04      	subs	r3, #4
 80046e4:	0112      	lsls	r2, r2, #4
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	440b      	add	r3, r1
 80046ea:	761a      	strb	r2, [r3, #24]
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	e000e100 	.word	0xe000e100
 80046fc:	e000ed00 	.word	0xe000ed00

08004700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	; 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f1c3 0307 	rsb	r3, r3, #7
 800471a:	2b04      	cmp	r3, #4
 800471c:	bf28      	it	cs
 800471e:	2304      	movcs	r3, #4
 8004720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3304      	adds	r3, #4
 8004726:	2b06      	cmp	r3, #6
 8004728:	d902      	bls.n	8004730 <NVIC_EncodePriority+0x30>
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3b03      	subs	r3, #3
 800472e:	e000      	b.n	8004732 <NVIC_EncodePriority+0x32>
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004734:	f04f 32ff 	mov.w	r2, #4294967295
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43da      	mvns	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	401a      	ands	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004748:	f04f 31ff 	mov.w	r1, #4294967295
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	fa01 f303 	lsl.w	r3, r1, r3
 8004752:	43d9      	mvns	r1, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004758:	4313      	orrs	r3, r2
         );
}
 800475a:	4618      	mov	r0, r3
 800475c:	3724      	adds	r7, #36	; 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3b01      	subs	r3, #1
 8004774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004778:	d301      	bcc.n	800477e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800477a:	2301      	movs	r3, #1
 800477c:	e00f      	b.n	800479e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800477e:	4a0a      	ldr	r2, [pc, #40]	; (80047a8 <SysTick_Config+0x40>)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3b01      	subs	r3, #1
 8004784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004786:	210f      	movs	r1, #15
 8004788:	f04f 30ff 	mov.w	r0, #4294967295
 800478c:	f7ff ff8e 	bl	80046ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <SysTick_Config+0x40>)
 8004792:	2200      	movs	r2, #0
 8004794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004796:	4b04      	ldr	r3, [pc, #16]	; (80047a8 <SysTick_Config+0x40>)
 8004798:	2207      	movs	r2, #7
 800479a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	e000e010 	.word	0xe000e010

080047ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff ff29 	bl	800460c <__NVIC_SetPriorityGrouping>
}
 80047ba:	bf00      	nop
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b086      	sub	sp, #24
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	4603      	mov	r3, r0
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047d4:	f7ff ff3e 	bl	8004654 <__NVIC_GetPriorityGrouping>
 80047d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	6978      	ldr	r0, [r7, #20]
 80047e0:	f7ff ff8e 	bl	8004700 <NVIC_EncodePriority>
 80047e4:	4602      	mov	r2, r0
 80047e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ea:	4611      	mov	r1, r2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff ff5d 	bl	80046ac <__NVIC_SetPriority>
}
 80047f2:	bf00      	nop
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	4603      	mov	r3, r0
 8004802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff ff31 	bl	8004670 <__NVIC_EnableIRQ>
}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff ffa2 	bl	8004768 <SysTick_Config>
 8004824:	4603      	mov	r3, r0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e014      	b.n	800486a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	791b      	ldrb	r3, [r3, #4]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d105      	bne.n	8004856 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7fe ff21 	bl	8003698 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004872:	b480      	push	{r7}
 8004874:	b085      	sub	sp, #20
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	2300      	movs	r3, #0
 8004882:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	795b      	ldrb	r3, [r3, #5]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_DAC_Start+0x1e>
 800488c:	2302      	movs	r3, #2
 800488e:	e050      	b.n	8004932 <HAL_DAC_Start+0xc0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6819      	ldr	r1, [r3, #0]
 80048a2:	2201      	movs	r2, #1
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	409a      	lsls	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d11a      	bne.n	80048ec <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048cc:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d127      	bne.n	8004924 <HAL_DAC_Start+0xb2>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b38      	cmp	r3, #56	; 0x38
 80048d8:	d124      	bne.n	8004924 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	e01b      	b.n	8004924 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f6:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8004902:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800490a:	d10b      	bne.n	8004924 <HAL_DAC_Start+0xb2>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004912:	d107      	bne.n	8004924 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0202 	orr.w	r2, r2, #2
 8004922:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800493e:	b480      	push	{r7}
 8004940:	b087      	sub	sp, #28
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	2300      	movs	r3, #0
 8004950:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	795b      	ldrb	r3, [r3, #5]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_DAC_ConfigChannel+0x20>
 800495a:	2302      	movs	r3, #2
 800495c:	e036      	b.n	80049cc <HAL_DAC_ConfigChannel+0x8e>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2202      	movs	r2, #2
 8004968:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004972:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	43db      	mvns	r3, r3
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4013      	ands	r3, r2
 8004982:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6819      	ldr	r1, [r3, #0]
 80049ac:	22c0      	movs	r2, #192	; 0xc0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	43da      	mvns	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	400a      	ands	r2, r1
 80049bc:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d105      	bne.n	8004a02 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4413      	add	r3, r2
 80049fc:	3308      	adds	r3, #8
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	e004      	b.n	8004a0c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4413      	add	r3, r2
 8004a08:	3314      	adds	r3, #20
 8004a0a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d004      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2280      	movs	r2, #128	; 0x80
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e00c      	b.n	8004a5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2205      	movs	r2, #5
 8004a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
	...

08004a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b089      	sub	sp, #36	; 0x24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	e16b      	b.n	8004d5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a84:	2201      	movs	r2, #1
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4013      	ands	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	f040 815a 	bne.w	8004d56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d003      	beq.n	8004ab2 <HAL_GPIO_Init+0x4a>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b12      	cmp	r3, #18
 8004ab0:	d123      	bne.n	8004afa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	08da      	lsrs	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3208      	adds	r2, #8
 8004aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	220f      	movs	r2, #15
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	08da      	lsrs	r2, r3, #3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3208      	adds	r2, #8
 8004af4:	69b9      	ldr	r1, [r7, #24]
 8004af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	2203      	movs	r2, #3
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f003 0203 	and.w	r2, r3, #3
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d00b      	beq.n	8004b4e <HAL_GPIO_Init+0xe6>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d007      	beq.n	8004b4e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b42:	2b11      	cmp	r3, #17
 8004b44:	d003      	beq.n	8004b4e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b12      	cmp	r3, #18
 8004b4c:	d130      	bne.n	8004bb0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	2203      	movs	r2, #3
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4013      	ands	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b84:	2201      	movs	r2, #1
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	4013      	ands	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	f003 0201 	and.w	r2, r3, #1
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	2203      	movs	r2, #3
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80b4 	beq.w	8004d56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	4b5f      	ldr	r3, [pc, #380]	; (8004d70 <HAL_GPIO_Init+0x308>)
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	4a5e      	ldr	r2, [pc, #376]	; (8004d70 <HAL_GPIO_Init+0x308>)
 8004bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfe:	4b5c      	ldr	r3, [pc, #368]	; (8004d70 <HAL_GPIO_Init+0x308>)
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c0a:	4a5a      	ldr	r2, [pc, #360]	; (8004d74 <HAL_GPIO_Init+0x30c>)
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	089b      	lsrs	r3, r3, #2
 8004c10:	3302      	adds	r3, #2
 8004c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	220f      	movs	r2, #15
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	43db      	mvns	r3, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a51      	ldr	r2, [pc, #324]	; (8004d78 <HAL_GPIO_Init+0x310>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d02b      	beq.n	8004c8e <HAL_GPIO_Init+0x226>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a50      	ldr	r2, [pc, #320]	; (8004d7c <HAL_GPIO_Init+0x314>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d025      	beq.n	8004c8a <HAL_GPIO_Init+0x222>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a4f      	ldr	r2, [pc, #316]	; (8004d80 <HAL_GPIO_Init+0x318>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01f      	beq.n	8004c86 <HAL_GPIO_Init+0x21e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a4e      	ldr	r2, [pc, #312]	; (8004d84 <HAL_GPIO_Init+0x31c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d019      	beq.n	8004c82 <HAL_GPIO_Init+0x21a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a4d      	ldr	r2, [pc, #308]	; (8004d88 <HAL_GPIO_Init+0x320>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <HAL_GPIO_Init+0x216>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a4c      	ldr	r2, [pc, #304]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00d      	beq.n	8004c7a <HAL_GPIO_Init+0x212>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a4b      	ldr	r2, [pc, #300]	; (8004d90 <HAL_GPIO_Init+0x328>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d007      	beq.n	8004c76 <HAL_GPIO_Init+0x20e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a4a      	ldr	r2, [pc, #296]	; (8004d94 <HAL_GPIO_Init+0x32c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d101      	bne.n	8004c72 <HAL_GPIO_Init+0x20a>
 8004c6e:	2307      	movs	r3, #7
 8004c70:	e00e      	b.n	8004c90 <HAL_GPIO_Init+0x228>
 8004c72:	2308      	movs	r3, #8
 8004c74:	e00c      	b.n	8004c90 <HAL_GPIO_Init+0x228>
 8004c76:	2306      	movs	r3, #6
 8004c78:	e00a      	b.n	8004c90 <HAL_GPIO_Init+0x228>
 8004c7a:	2305      	movs	r3, #5
 8004c7c:	e008      	b.n	8004c90 <HAL_GPIO_Init+0x228>
 8004c7e:	2304      	movs	r3, #4
 8004c80:	e006      	b.n	8004c90 <HAL_GPIO_Init+0x228>
 8004c82:	2303      	movs	r3, #3
 8004c84:	e004      	b.n	8004c90 <HAL_GPIO_Init+0x228>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e002      	b.n	8004c90 <HAL_GPIO_Init+0x228>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <HAL_GPIO_Init+0x228>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	f002 0203 	and.w	r2, r2, #3
 8004c96:	0092      	lsls	r2, r2, #2
 8004c98:	4093      	lsls	r3, r2
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ca0:	4934      	ldr	r1, [pc, #208]	; (8004d74 <HAL_GPIO_Init+0x30c>)
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	089b      	lsrs	r3, r3, #2
 8004ca6:	3302      	adds	r3, #2
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cae:	4b3a      	ldr	r3, [pc, #232]	; (8004d98 <HAL_GPIO_Init+0x330>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cd2:	4a31      	ldr	r2, [pc, #196]	; (8004d98 <HAL_GPIO_Init+0x330>)
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004cd8:	4b2f      	ldr	r3, [pc, #188]	; (8004d98 <HAL_GPIO_Init+0x330>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cfc:	4a26      	ldr	r2, [pc, #152]	; (8004d98 <HAL_GPIO_Init+0x330>)
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d02:	4b25      	ldr	r3, [pc, #148]	; (8004d98 <HAL_GPIO_Init+0x330>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d26:	4a1c      	ldr	r2, [pc, #112]	; (8004d98 <HAL_GPIO_Init+0x330>)
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <HAL_GPIO_Init+0x330>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	43db      	mvns	r3, r3
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d50:	4a11      	ldr	r2, [pc, #68]	; (8004d98 <HAL_GPIO_Init+0x330>)
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	2b0f      	cmp	r3, #15
 8004d60:	f67f ae90 	bls.w	8004a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d64:	bf00      	nop
 8004d66:	3724      	adds	r7, #36	; 0x24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40013800 	.word	0x40013800
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	40020400 	.word	0x40020400
 8004d80:	40020800 	.word	0x40020800
 8004d84:	40020c00 	.word	0x40020c00
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40021400 	.word	0x40021400
 8004d90:	40021800 	.word	0x40021800
 8004d94:	40021c00 	.word	0x40021c00
 8004d98:	40013c00 	.word	0x40013c00

08004d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	887b      	ldrh	r3, [r7, #2]
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	e001      	b.n	8004dbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	807b      	strh	r3, [r7, #2]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ddc:	787b      	ldrb	r3, [r7, #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004de2:	887a      	ldrh	r2, [r7, #2]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004de8:	e003      	b.n	8004df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	041a      	lsls	r2, r3, #16
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	619a      	str	r2, [r3, #24]
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	460b      	mov	r3, r1
 8004e08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	887b      	ldrh	r3, [r7, #2]
 8004e10:	401a      	ands	r2, r3
 8004e12:	887b      	ldrh	r3, [r7, #2]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d104      	bne.n	8004e22 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e18:	887b      	ldrh	r3, [r7, #2]
 8004e1a:	041a      	lsls	r2, r3, #16
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004e20:	e002      	b.n	8004e28 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004e22:	887a      	ldrh	r2, [r7, #2]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	619a      	str	r2, [r3, #24]
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e3e:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d006      	beq.n	8004e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e4a:	4a05      	ldr	r2, [pc, #20]	; (8004e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fd ffe4 	bl	8002e20 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40013c00 	.word	0x40013c00

08004e64 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004e74:	f000 f808 	bl	8004e88 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004e78:	4b02      	ldr	r3, [pc, #8]	; (8004e84 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004e7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e7e:	615a      	str	r2, [r3, #20]
  }
}
 8004e80:	bf00      	nop
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40013c00 	.word	0x40013c00

08004e88 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004e8c:	bf00      	nop
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e22d      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d075      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eb6:	4ba3      	ldr	r3, [pc, #652]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d00c      	beq.n	8004edc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec2:	4ba0      	ldr	r3, [pc, #640]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d112      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ece:	4b9d      	ldr	r3, [pc, #628]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eda:	d10b      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004edc:	4b99      	ldr	r3, [pc, #612]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d05b      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x108>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d157      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e208      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efc:	d106      	bne.n	8004f0c <HAL_RCC_OscConfig+0x74>
 8004efe:	4b91      	ldr	r3, [pc, #580]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a90      	ldr	r2, [pc, #576]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e01d      	b.n	8004f48 <HAL_RCC_OscConfig+0xb0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCC_OscConfig+0x98>
 8004f16:	4b8b      	ldr	r3, [pc, #556]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a8a      	ldr	r2, [pc, #552]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	4b88      	ldr	r3, [pc, #544]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a87      	ldr	r2, [pc, #540]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e00b      	b.n	8004f48 <HAL_RCC_OscConfig+0xb0>
 8004f30:	4b84      	ldr	r3, [pc, #528]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a83      	ldr	r2, [pc, #524]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	4b81      	ldr	r3, [pc, #516]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a80      	ldr	r2, [pc, #512]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d013      	beq.n	8004f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fe fe90 	bl	8003c74 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f58:	f7fe fe8c 	bl	8003c74 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b64      	cmp	r3, #100	; 0x64
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e1cd      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	4b76      	ldr	r3, [pc, #472]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0xc0>
 8004f76:	e014      	b.n	8004fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f78:	f7fe fe7c 	bl	8003c74 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f80:	f7fe fe78 	bl	8003c74 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b64      	cmp	r3, #100	; 0x64
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e1b9      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f92:	4b6c      	ldr	r3, [pc, #432]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0xe8>
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d063      	beq.n	8005076 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fae:	4b65      	ldr	r3, [pc, #404]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fba:	4b62      	ldr	r3, [pc, #392]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d11c      	bne.n	8005000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fc6:	4b5f      	ldr	r3, [pc, #380]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d116      	bne.n	8005000 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd2:	4b5c      	ldr	r3, [pc, #368]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_RCC_OscConfig+0x152>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d001      	beq.n	8004fea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e18d      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fea:	4b56      	ldr	r3, [pc, #344]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4952      	ldr	r1, [pc, #328]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffe:	e03a      	b.n	8005076 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d020      	beq.n	800504a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005008:	4b4f      	ldr	r3, [pc, #316]	; (8005148 <HAL_RCC_OscConfig+0x2b0>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500e:	f7fe fe31 	bl	8003c74 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005016:	f7fe fe2d 	bl	8003c74 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e16e      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005028:	4b46      	ldr	r3, [pc, #280]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f0      	beq.n	8005016 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005034:	4b43      	ldr	r3, [pc, #268]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4940      	ldr	r1, [pc, #256]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8005044:	4313      	orrs	r3, r2
 8005046:	600b      	str	r3, [r1, #0]
 8005048:	e015      	b.n	8005076 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800504a:	4b3f      	ldr	r3, [pc, #252]	; (8005148 <HAL_RCC_OscConfig+0x2b0>)
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fe fe10 	bl	8003c74 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005058:	f7fe fe0c 	bl	8003c74 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e14d      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800506a:	4b36      	ldr	r3, [pc, #216]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d030      	beq.n	80050e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d016      	beq.n	80050b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800508a:	4b30      	ldr	r3, [pc, #192]	; (800514c <HAL_RCC_OscConfig+0x2b4>)
 800508c:	2201      	movs	r2, #1
 800508e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005090:	f7fe fdf0 	bl	8003c74 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005098:	f7fe fdec 	bl	8003c74 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e12d      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050aa:	4b26      	ldr	r3, [pc, #152]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 80050ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0x200>
 80050b6:	e015      	b.n	80050e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b8:	4b24      	ldr	r3, [pc, #144]	; (800514c <HAL_RCC_OscConfig+0x2b4>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050be:	f7fe fdd9 	bl	8003c74 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c6:	f7fe fdd5 	bl	8003c74 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e116      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d8:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 80050da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f0      	bne.n	80050c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80a0 	beq.w	8005232 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f6:	4b13      	ldr	r3, [pc, #76]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10f      	bne.n	8005122 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	4a0e      	ldr	r2, [pc, #56]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 800510c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005110:	6413      	str	r3, [r2, #64]	; 0x40
 8005112:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <HAL_RCC_OscConfig+0x2ac>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800511e:	2301      	movs	r3, #1
 8005120:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005122:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_RCC_OscConfig+0x2b8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d121      	bne.n	8005172 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800512e:	4b08      	ldr	r3, [pc, #32]	; (8005150 <HAL_RCC_OscConfig+0x2b8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a07      	ldr	r2, [pc, #28]	; (8005150 <HAL_RCC_OscConfig+0x2b8>)
 8005134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513a:	f7fe fd9b 	bl	8003c74 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	e011      	b.n	8005166 <HAL_RCC_OscConfig+0x2ce>
 8005142:	bf00      	nop
 8005144:	40023800 	.word	0x40023800
 8005148:	42470000 	.word	0x42470000
 800514c:	42470e80 	.word	0x42470e80
 8005150:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005154:	f7fe fd8e 	bl	8003c74 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e0cf      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005166:	4b6a      	ldr	r3, [pc, #424]	; (8005310 <HAL_RCC_OscConfig+0x478>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d106      	bne.n	8005188 <HAL_RCC_OscConfig+0x2f0>
 800517a:	4b66      	ldr	r3, [pc, #408]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	4a65      	ldr	r2, [pc, #404]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	6713      	str	r3, [r2, #112]	; 0x70
 8005186:	e01c      	b.n	80051c2 <HAL_RCC_OscConfig+0x32a>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b05      	cmp	r3, #5
 800518e:	d10c      	bne.n	80051aa <HAL_RCC_OscConfig+0x312>
 8005190:	4b60      	ldr	r3, [pc, #384]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 8005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005194:	4a5f      	ldr	r2, [pc, #380]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 8005196:	f043 0304 	orr.w	r3, r3, #4
 800519a:	6713      	str	r3, [r2, #112]	; 0x70
 800519c:	4b5d      	ldr	r3, [pc, #372]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	4a5c      	ldr	r2, [pc, #368]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	6713      	str	r3, [r2, #112]	; 0x70
 80051a8:	e00b      	b.n	80051c2 <HAL_RCC_OscConfig+0x32a>
 80051aa:	4b5a      	ldr	r3, [pc, #360]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	4a59      	ldr	r2, [pc, #356]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 80051b0:	f023 0301 	bic.w	r3, r3, #1
 80051b4:	6713      	str	r3, [r2, #112]	; 0x70
 80051b6:	4b57      	ldr	r3, [pc, #348]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	4a56      	ldr	r2, [pc, #344]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 80051bc:	f023 0304 	bic.w	r3, r3, #4
 80051c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d015      	beq.n	80051f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ca:	f7fe fd53 	bl	8003c74 <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d0:	e00a      	b.n	80051e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d2:	f7fe fd4f 	bl	8003c74 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e08e      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e8:	4b4a      	ldr	r3, [pc, #296]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0ee      	beq.n	80051d2 <HAL_RCC_OscConfig+0x33a>
 80051f4:	e014      	b.n	8005220 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f6:	f7fe fd3d 	bl	8003c74 <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051fc:	e00a      	b.n	8005214 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051fe:	f7fe fd39 	bl	8003c74 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	f241 3288 	movw	r2, #5000	; 0x1388
 800520c:	4293      	cmp	r3, r2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e078      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005214:	4b3f      	ldr	r3, [pc, #252]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 8005216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1ee      	bne.n	80051fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d105      	bne.n	8005232 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005226:	4b3b      	ldr	r3, [pc, #236]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	4a3a      	ldr	r2, [pc, #232]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 800522c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005230:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d064      	beq.n	8005304 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800523a:	4b36      	ldr	r3, [pc, #216]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	2b08      	cmp	r3, #8
 8005244:	d05c      	beq.n	8005300 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d141      	bne.n	80052d2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524e:	4b32      	ldr	r3, [pc, #200]	; (8005318 <HAL_RCC_OscConfig+0x480>)
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005254:	f7fe fd0e 	bl	8003c74 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525c:	f7fe fd0a 	bl	8003c74 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e04b      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526e:	4b29      	ldr	r3, [pc, #164]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f0      	bne.n	800525c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69da      	ldr	r2, [r3, #28]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	019b      	lsls	r3, r3, #6
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005290:	085b      	lsrs	r3, r3, #1
 8005292:	3b01      	subs	r3, #1
 8005294:	041b      	lsls	r3, r3, #16
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	061b      	lsls	r3, r3, #24
 800529e:	491d      	ldr	r1, [pc, #116]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a4:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <HAL_RCC_OscConfig+0x480>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052aa:	f7fe fce3 	bl	8003c74 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b2:	f7fe fcdf 	bl	8003c74 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e020      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c4:	4b13      	ldr	r3, [pc, #76]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCC_OscConfig+0x41a>
 80052d0:	e018      	b.n	8005304 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <HAL_RCC_OscConfig+0x480>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d8:	f7fe fccc 	bl	8003c74 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052e0:	f7fe fcc8 	bl	8003c74 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e009      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f2:	4b08      	ldr	r3, [pc, #32]	; (8005314 <HAL_RCC_OscConfig+0x47c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x448>
 80052fe:	e001      	b.n	8005304 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40007000 	.word	0x40007000
 8005314:	40023800 	.word	0x40023800
 8005318:	42470060 	.word	0x42470060

0800531c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e0ca      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005330:	4b67      	ldr	r3, [pc, #412]	; (80054d0 <HAL_RCC_ClockConfig+0x1b4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d90c      	bls.n	8005358 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533e:	4b64      	ldr	r3, [pc, #400]	; (80054d0 <HAL_RCC_ClockConfig+0x1b4>)
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b62      	ldr	r3, [pc, #392]	; (80054d0 <HAL_RCC_ClockConfig+0x1b4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0b6      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d020      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005370:	4b58      	ldr	r3, [pc, #352]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	4a57      	ldr	r2, [pc, #348]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800537a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005388:	4b52      	ldr	r3, [pc, #328]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	4a51      	ldr	r2, [pc, #324]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 800538e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005392:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005394:	4b4f      	ldr	r3, [pc, #316]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	494c      	ldr	r1, [pc, #304]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d044      	beq.n	800543c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d107      	bne.n	80053ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ba:	4b46      	ldr	r3, [pc, #280]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d119      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e07d      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d003      	beq.n	80053da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d107      	bne.n	80053ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053da:	4b3e      	ldr	r3, [pc, #248]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e06d      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ea:	4b3a      	ldr	r3, [pc, #232]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e065      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053fa:	4b36      	ldr	r3, [pc, #216]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f023 0203 	bic.w	r2, r3, #3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	4933      	ldr	r1, [pc, #204]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005408:	4313      	orrs	r3, r2
 800540a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800540c:	f7fe fc32 	bl	8003c74 <HAL_GetTick>
 8005410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005412:	e00a      	b.n	800542a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005414:	f7fe fc2e 	bl	8003c74 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e04d      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542a:	4b2a      	ldr	r3, [pc, #168]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 020c 	and.w	r2, r3, #12
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	429a      	cmp	r2, r3
 800543a:	d1eb      	bne.n	8005414 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800543c:	4b24      	ldr	r3, [pc, #144]	; (80054d0 <HAL_RCC_ClockConfig+0x1b4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d20c      	bcs.n	8005464 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544a:	4b21      	ldr	r3, [pc, #132]	; (80054d0 <HAL_RCC_ClockConfig+0x1b4>)
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005452:	4b1f      	ldr	r3, [pc, #124]	; (80054d0 <HAL_RCC_ClockConfig+0x1b4>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d001      	beq.n	8005464 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e030      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d008      	beq.n	8005482 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005470:	4b18      	ldr	r3, [pc, #96]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	4915      	ldr	r1, [pc, #84]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 800547e:	4313      	orrs	r3, r2
 8005480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800548e:	4b11      	ldr	r3, [pc, #68]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	490d      	ldr	r1, [pc, #52]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054a2:	f000 f81d 	bl	80054e0 <HAL_RCC_GetSysClockFreq>
 80054a6:	4601      	mov	r1, r0
 80054a8:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	4a09      	ldr	r2, [pc, #36]	; (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80054b4:	5cd3      	ldrb	r3, [r2, r3]
 80054b6:	fa21 f303 	lsr.w	r3, r1, r3
 80054ba:	4a08      	ldr	r2, [pc, #32]	; (80054dc <HAL_RCC_ClockConfig+0x1c0>)
 80054bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80054be:	2000      	movs	r0, #0
 80054c0:	f7fe fb94 	bl	8003bec <HAL_InitTick>

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40023c00 	.word	0x40023c00
 80054d4:	40023800 	.word	0x40023800
 80054d8:	08026314 	.word	0x08026314
 80054dc:	20000058 	.word	0x20000058

080054e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	607b      	str	r3, [r7, #4]
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	2300      	movs	r3, #0
 80054f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054f6:	4b63      	ldr	r3, [pc, #396]	; (8005684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d007      	beq.n	8005512 <HAL_RCC_GetSysClockFreq+0x32>
 8005502:	2b08      	cmp	r3, #8
 8005504:	d008      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x38>
 8005506:	2b00      	cmp	r3, #0
 8005508:	f040 80b4 	bne.w	8005674 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800550c:	4b5e      	ldr	r3, [pc, #376]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800550e:	60bb      	str	r3, [r7, #8]
       break;
 8005510:	e0b3      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005512:	4b5e      	ldr	r3, [pc, #376]	; (800568c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005514:	60bb      	str	r3, [r7, #8]
      break;
 8005516:	e0b0      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005518:	4b5a      	ldr	r3, [pc, #360]	; (8005684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005520:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005522:	4b58      	ldr	r3, [pc, #352]	; (8005684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d04a      	beq.n	80055c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800552e:	4b55      	ldr	r3, [pc, #340]	; (8005684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	099b      	lsrs	r3, r3, #6
 8005534:	f04f 0400 	mov.w	r4, #0
 8005538:	f240 11ff 	movw	r1, #511	; 0x1ff
 800553c:	f04f 0200 	mov.w	r2, #0
 8005540:	ea03 0501 	and.w	r5, r3, r1
 8005544:	ea04 0602 	and.w	r6, r4, r2
 8005548:	4629      	mov	r1, r5
 800554a:	4632      	mov	r2, r6
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	f04f 0400 	mov.w	r4, #0
 8005554:	0154      	lsls	r4, r2, #5
 8005556:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800555a:	014b      	lsls	r3, r1, #5
 800555c:	4619      	mov	r1, r3
 800555e:	4622      	mov	r2, r4
 8005560:	1b49      	subs	r1, r1, r5
 8005562:	eb62 0206 	sbc.w	r2, r2, r6
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	f04f 0400 	mov.w	r4, #0
 800556e:	0194      	lsls	r4, r2, #6
 8005570:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005574:	018b      	lsls	r3, r1, #6
 8005576:	1a5b      	subs	r3, r3, r1
 8005578:	eb64 0402 	sbc.w	r4, r4, r2
 800557c:	f04f 0100 	mov.w	r1, #0
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	00e2      	lsls	r2, r4, #3
 8005586:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800558a:	00d9      	lsls	r1, r3, #3
 800558c:	460b      	mov	r3, r1
 800558e:	4614      	mov	r4, r2
 8005590:	195b      	adds	r3, r3, r5
 8005592:	eb44 0406 	adc.w	r4, r4, r6
 8005596:	f04f 0100 	mov.w	r1, #0
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	0262      	lsls	r2, r4, #9
 80055a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80055a4:	0259      	lsls	r1, r3, #9
 80055a6:	460b      	mov	r3, r1
 80055a8:	4614      	mov	r4, r2
 80055aa:	4618      	mov	r0, r3
 80055ac:	4621      	mov	r1, r4
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f04f 0400 	mov.w	r4, #0
 80055b4:	461a      	mov	r2, r3
 80055b6:	4623      	mov	r3, r4
 80055b8:	f7fb fa50 	bl	8000a5c <__aeabi_uldivmod>
 80055bc:	4603      	mov	r3, r0
 80055be:	460c      	mov	r4, r1
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	e049      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055c4:	4b2f      	ldr	r3, [pc, #188]	; (8005684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	099b      	lsrs	r3, r3, #6
 80055ca:	f04f 0400 	mov.w	r4, #0
 80055ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	ea03 0501 	and.w	r5, r3, r1
 80055da:	ea04 0602 	and.w	r6, r4, r2
 80055de:	4629      	mov	r1, r5
 80055e0:	4632      	mov	r2, r6
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	f04f 0400 	mov.w	r4, #0
 80055ea:	0154      	lsls	r4, r2, #5
 80055ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055f0:	014b      	lsls	r3, r1, #5
 80055f2:	4619      	mov	r1, r3
 80055f4:	4622      	mov	r2, r4
 80055f6:	1b49      	subs	r1, r1, r5
 80055f8:	eb62 0206 	sbc.w	r2, r2, r6
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	f04f 0400 	mov.w	r4, #0
 8005604:	0194      	lsls	r4, r2, #6
 8005606:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800560a:	018b      	lsls	r3, r1, #6
 800560c:	1a5b      	subs	r3, r3, r1
 800560e:	eb64 0402 	sbc.w	r4, r4, r2
 8005612:	f04f 0100 	mov.w	r1, #0
 8005616:	f04f 0200 	mov.w	r2, #0
 800561a:	00e2      	lsls	r2, r4, #3
 800561c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005620:	00d9      	lsls	r1, r3, #3
 8005622:	460b      	mov	r3, r1
 8005624:	4614      	mov	r4, r2
 8005626:	195b      	adds	r3, r3, r5
 8005628:	eb44 0406 	adc.w	r4, r4, r6
 800562c:	f04f 0100 	mov.w	r1, #0
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	02a2      	lsls	r2, r4, #10
 8005636:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800563a:	0299      	lsls	r1, r3, #10
 800563c:	460b      	mov	r3, r1
 800563e:	4614      	mov	r4, r2
 8005640:	4618      	mov	r0, r3
 8005642:	4621      	mov	r1, r4
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f04f 0400 	mov.w	r4, #0
 800564a:	461a      	mov	r2, r3
 800564c:	4623      	mov	r3, r4
 800564e:	f7fb fa05 	bl	8000a5c <__aeabi_uldivmod>
 8005652:	4603      	mov	r3, r0
 8005654:	460c      	mov	r4, r1
 8005656:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005658:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	0c1b      	lsrs	r3, r3, #16
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	3301      	adds	r3, #1
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	60bb      	str	r3, [r7, #8]
      break;
 8005672:	e002      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005676:	60bb      	str	r3, [r7, #8]
      break;
 8005678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800567a:	68bb      	ldr	r3, [r7, #8]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005684:	40023800 	.word	0x40023800
 8005688:	00f42400 	.word	0x00f42400
 800568c:	007a1200 	.word	0x007a1200

08005690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005696:	681b      	ldr	r3, [r3, #0]
}
 8005698:	4618      	mov	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000058 	.word	0x20000058

080056a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056ac:	f7ff fff0 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056b0:	4601      	mov	r1, r0
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	0a9b      	lsrs	r3, r3, #10
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	4a03      	ldr	r2, [pc, #12]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056be:	5cd3      	ldrb	r3, [r2, r3]
 80056c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40023800 	.word	0x40023800
 80056cc:	08026324 	.word	0x08026324

080056d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056d4:	f7ff ffdc 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056d8:	4601      	mov	r1, r0
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	0b5b      	lsrs	r3, r3, #13
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	4a03      	ldr	r2, [pc, #12]	; (80056f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056e6:	5cd3      	ldrb	r3, [r2, r3]
 80056e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40023800 	.word	0x40023800
 80056f4:	08026324 	.word	0x08026324

080056f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e056      	b.n	80057b8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7fd fffb 	bl	8003720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2202      	movs	r2, #2
 800572e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005740:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	431a      	orrs	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	ea42 0103 	orr.w	r1, r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	0c1b      	lsrs	r3, r3, #16
 8005788:	f003 0104 	and.w	r1, r3, #4
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69da      	ldr	r2, [r3, #28]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	4613      	mov	r3, r2
 80057ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_SPI_Transmit+0x22>
 80057de:	2302      	movs	r3, #2
 80057e0:	e11e      	b.n	8005a20 <HAL_SPI_Transmit+0x260>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ea:	f7fe fa43 	bl	8003c74 <HAL_GetTick>
 80057ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d002      	beq.n	8005806 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005800:	2302      	movs	r3, #2
 8005802:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005804:	e103      	b.n	8005a0e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <HAL_SPI_Transmit+0x52>
 800580c:	88fb      	ldrh	r3, [r7, #6]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d102      	bne.n	8005818 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005816:	e0fa      	b.n	8005a0e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2203      	movs	r2, #3
 800581c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	88fa      	ldrh	r2, [r7, #6]
 8005830:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	88fa      	ldrh	r2, [r7, #6]
 8005836:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800585e:	d107      	bne.n	8005870 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800586e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587a:	2b40      	cmp	r3, #64	; 0x40
 800587c:	d007      	beq.n	800588e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800588c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005896:	d14b      	bne.n	8005930 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_SPI_Transmit+0xe6>
 80058a0:	8afb      	ldrh	r3, [r7, #22]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d13e      	bne.n	8005924 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	881a      	ldrh	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	1c9a      	adds	r2, r3, #2
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058ca:	e02b      	b.n	8005924 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d112      	bne.n	8005900 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	881a      	ldrh	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	1c9a      	adds	r2, r3, #2
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80058fe:	e011      	b.n	8005924 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005900:	f7fe f9b8 	bl	8003c74 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d803      	bhi.n	8005918 <HAL_SPI_Transmit+0x158>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d102      	bne.n	800591e <HAL_SPI_Transmit+0x15e>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005922:	e074      	b.n	8005a0e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1ce      	bne.n	80058cc <HAL_SPI_Transmit+0x10c>
 800592e:	e04c      	b.n	80059ca <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <HAL_SPI_Transmit+0x17e>
 8005938:	8afb      	ldrh	r3, [r7, #22]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d140      	bne.n	80059c0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	7812      	ldrb	r2, [r2, #0]
 800594a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005964:	e02c      	b.n	80059c0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b02      	cmp	r3, #2
 8005972:	d113      	bne.n	800599c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	330c      	adds	r3, #12
 800597e:	7812      	ldrb	r2, [r2, #0]
 8005980:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	86da      	strh	r2, [r3, #54]	; 0x36
 800599a:	e011      	b.n	80059c0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800599c:	f7fe f96a 	bl	8003c74 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d803      	bhi.n	80059b4 <HAL_SPI_Transmit+0x1f4>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b2:	d102      	bne.n	80059ba <HAL_SPI_Transmit+0x1fa>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059be:	e026      	b.n	8005a0e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1cd      	bne.n	8005966 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fa44 	bl	8005e5c <SPI_EndRxTxTransaction>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059e8:	2300      	movs	r3, #0
 80059ea:	613b      	str	r3, [r7, #16]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	77fb      	strb	r3, [r7, #31]
 8005a0a:	e000      	b.n	8005a0e <HAL_SPI_Transmit+0x24e>
  }

error:
 8005a0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08c      	sub	sp, #48	; 0x30
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a36:	2301      	movs	r3, #1
 8005a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d101      	bne.n	8005a4e <HAL_SPI_TransmitReceive+0x26>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e18a      	b.n	8005d64 <HAL_SPI_TransmitReceive+0x33c>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a56:	f7fe f90d 	bl	8003c74 <HAL_GetTick>
 8005a5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a6c:	887b      	ldrh	r3, [r7, #2]
 8005a6e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d00f      	beq.n	8005a98 <HAL_SPI_TransmitReceive+0x70>
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a7e:	d107      	bne.n	8005a90 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d103      	bne.n	8005a90 <HAL_SPI_TransmitReceive+0x68>
 8005a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	d003      	beq.n	8005a98 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a90:	2302      	movs	r3, #2
 8005a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a96:	e15b      	b.n	8005d50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x82>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x82>
 8005aa4:	887b      	ldrh	r3, [r7, #2]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ab0:	e14e      	b.n	8005d50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d003      	beq.n	8005ac6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2205      	movs	r2, #5
 8005ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	887a      	ldrh	r2, [r7, #2]
 8005ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	887a      	ldrh	r2, [r7, #2]
 8005adc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	887a      	ldrh	r2, [r7, #2]
 8005ae8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	887a      	ldrh	r2, [r7, #2]
 8005aee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	d007      	beq.n	8005b1a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b22:	d178      	bne.n	8005c16 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <HAL_SPI_TransmitReceive+0x10a>
 8005b2c:	8b7b      	ldrh	r3, [r7, #26]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d166      	bne.n	8005c00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	881a      	ldrh	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	1c9a      	adds	r2, r3, #2
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b56:	e053      	b.n	8005c00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d11b      	bne.n	8005b9e <HAL_SPI_TransmitReceive+0x176>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d016      	beq.n	8005b9e <HAL_SPI_TransmitReceive+0x176>
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d113      	bne.n	8005b9e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7a:	881a      	ldrh	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b86:	1c9a      	adds	r2, r3, #2
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d119      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x1b8>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d014      	beq.n	8005be0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	b292      	uxth	r2, r2
 8005bc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	1c9a      	adds	r2, r3, #2
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005be0:	f7fe f848 	bl	8003c74 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d807      	bhi.n	8005c00 <HAL_SPI_TransmitReceive+0x1d8>
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf6:	d003      	beq.n	8005c00 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005bfe:	e0a7      	b.n	8005d50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1a6      	bne.n	8005b58 <HAL_SPI_TransmitReceive+0x130>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1a1      	bne.n	8005b58 <HAL_SPI_TransmitReceive+0x130>
 8005c14:	e07c      	b.n	8005d10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_SPI_TransmitReceive+0x1fc>
 8005c1e:	8b7b      	ldrh	r3, [r7, #26]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d16b      	bne.n	8005cfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	330c      	adds	r3, #12
 8005c2e:	7812      	ldrb	r2, [r2, #0]
 8005c30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c4a:	e057      	b.n	8005cfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d11c      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x26c>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d017      	beq.n	8005c94 <HAL_SPI_TransmitReceive+0x26c>
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d114      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	7812      	ldrb	r2, [r2, #0]
 8005c76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d119      	bne.n	8005cd6 <HAL_SPI_TransmitReceive+0x2ae>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d014      	beq.n	8005cd6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cd6:	f7fd ffcd 	bl	8003c74 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d803      	bhi.n	8005cee <HAL_SPI_TransmitReceive+0x2c6>
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cec:	d102      	bne.n	8005cf4 <HAL_SPI_TransmitReceive+0x2cc>
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d103      	bne.n	8005cfc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005cfa:	e029      	b.n	8005d50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1a2      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x224>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d19d      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 f8a1 	bl	8005e5c <SPI_EndRxTxTransaction>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d2c:	e010      	b.n	8005d50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10b      	bne.n	8005d4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	e000      	b.n	8005d50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3730      	adds	r7, #48	; 0x30
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d7a:	b2db      	uxtb	r3, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	4613      	mov	r3, r2
 8005d96:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d98:	e04c      	b.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d048      	beq.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005da2:	f7fd ff67 	bl	8003c74 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d902      	bls.n	8005db8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d13d      	bne.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dc6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dd0:	d111      	bne.n	8005df6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dda:	d004      	beq.n	8005de6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de4:	d107      	bne.n	8005df6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005df4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfe:	d10f      	bne.n	8005e20 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e00f      	b.n	8005e54 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	bf0c      	ite	eq
 8005e44:	2301      	moveq	r3, #1
 8005e46:	2300      	movne	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d1a3      	bne.n	8005d9a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e68:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <SPI_EndRxTxTransaction+0x7c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1b      	ldr	r2, [pc, #108]	; (8005edc <SPI_EndRxTxTransaction+0x80>)
 8005e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e72:	0d5b      	lsrs	r3, r3, #21
 8005e74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e78:	fb02 f303 	mul.w	r3, r2, r3
 8005e7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e86:	d112      	bne.n	8005eae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2180      	movs	r1, #128	; 0x80
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff ff78 	bl	8005d88 <SPI_WaitFlagStateUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d016      	beq.n	8005ecc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea2:	f043 0220 	orr.w	r2, r3, #32
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e00f      	b.n	8005ece <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec4:	2b80      	cmp	r3, #128	; 0x80
 8005ec6:	d0f2      	beq.n	8005eae <SPI_EndRxTxTransaction+0x52>
 8005ec8:	e000      	b.n	8005ecc <SPI_EndRxTxTransaction+0x70>
        break;
 8005eca:	bf00      	nop
  }

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000058 	.word	0x20000058
 8005edc:	165e9f81 	.word	0x165e9f81

08005ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e01d      	b.n	8005f2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fd fc52 	bl	80037b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f000 fa40 	bl	80063a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0201 	orr.w	r2, r2, #1
 8005f4c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b06      	cmp	r3, #6
 8005f5e:	d007      	beq.n	8005f70 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0201 	bic.w	r2, r2, #1
 8005f94:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6a1a      	ldr	r2, [r3, #32]
 8005f9c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10f      	bne.n	8005fc6 <HAL_TIM_Base_Stop_IT+0x48>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6a1a      	ldr	r2, [r3, #32]
 8005fac:	f240 4344 	movw	r3, #1092	; 0x444
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d107      	bne.n	8005fc6 <HAL_TIM_Base_Stop_IT+0x48>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0201 	bic.w	r2, r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d122      	bne.n	8006030 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d11b      	bne.n	8006030 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f06f 0202 	mvn.w	r2, #2
 8006000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f9a5 	bl	8006366 <HAL_TIM_IC_CaptureCallback>
 800601c:	e005      	b.n	800602a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f997 	bl	8006352 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f9a8 	bl	800637a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b04      	cmp	r3, #4
 800603c:	d122      	bne.n	8006084 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b04      	cmp	r3, #4
 800604a:	d11b      	bne.n	8006084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0204 	mvn.w	r2, #4
 8006054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2202      	movs	r2, #2
 800605a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f97b 	bl	8006366 <HAL_TIM_IC_CaptureCallback>
 8006070:	e005      	b.n	800607e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f96d 	bl	8006352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f97e 	bl	800637a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f003 0308 	and.w	r3, r3, #8
 800608e:	2b08      	cmp	r3, #8
 8006090:	d122      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b08      	cmp	r3, #8
 800609e:	d11b      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f06f 0208 	mvn.w	r2, #8
 80060a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2204      	movs	r2, #4
 80060ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f951 	bl	8006366 <HAL_TIM_IC_CaptureCallback>
 80060c4:	e005      	b.n	80060d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f943 	bl	8006352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f954 	bl	800637a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b10      	cmp	r3, #16
 80060e4:	d122      	bne.n	800612c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b10      	cmp	r3, #16
 80060f2:	d11b      	bne.n	800612c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0210 	mvn.w	r2, #16
 80060fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2208      	movs	r2, #8
 8006102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f927 	bl	8006366 <HAL_TIM_IC_CaptureCallback>
 8006118:	e005      	b.n	8006126 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f919 	bl	8006352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f92a 	bl	800637a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b01      	cmp	r3, #1
 8006138:	d10e      	bne.n	8006158 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b01      	cmp	r3, #1
 8006146:	d107      	bne.n	8006158 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0201 	mvn.w	r2, #1
 8006150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fc fed8 	bl	8002f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006162:	2b80      	cmp	r3, #128	; 0x80
 8006164:	d10e      	bne.n	8006184 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006170:	2b80      	cmp	r3, #128	; 0x80
 8006172:	d107      	bne.n	8006184 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800617c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fa99 	bl	80066b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d10e      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b40      	cmp	r3, #64	; 0x40
 800619e:	d107      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f8ef 	bl	800638e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d10e      	bne.n	80061dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0320 	and.w	r3, r3, #32
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d107      	bne.n	80061dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0220 	mvn.w	r2, #32
 80061d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fa63 	bl	80066a2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061dc:	bf00      	nop
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d101      	bne.n	80061fc <HAL_TIM_ConfigClockSource+0x18>
 80061f8:	2302      	movs	r3, #2
 80061fa:	e0a6      	b.n	800634a <HAL_TIM_ConfigClockSource+0x166>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800621a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006222:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b40      	cmp	r3, #64	; 0x40
 8006232:	d067      	beq.n	8006304 <HAL_TIM_ConfigClockSource+0x120>
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	d80b      	bhi.n	8006250 <HAL_TIM_ConfigClockSource+0x6c>
 8006238:	2b10      	cmp	r3, #16
 800623a:	d073      	beq.n	8006324 <HAL_TIM_ConfigClockSource+0x140>
 800623c:	2b10      	cmp	r3, #16
 800623e:	d802      	bhi.n	8006246 <HAL_TIM_ConfigClockSource+0x62>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d06f      	beq.n	8006324 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006244:	e078      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006246:	2b20      	cmp	r3, #32
 8006248:	d06c      	beq.n	8006324 <HAL_TIM_ConfigClockSource+0x140>
 800624a:	2b30      	cmp	r3, #48	; 0x30
 800624c:	d06a      	beq.n	8006324 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800624e:	e073      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006250:	2b70      	cmp	r3, #112	; 0x70
 8006252:	d00d      	beq.n	8006270 <HAL_TIM_ConfigClockSource+0x8c>
 8006254:	2b70      	cmp	r3, #112	; 0x70
 8006256:	d804      	bhi.n	8006262 <HAL_TIM_ConfigClockSource+0x7e>
 8006258:	2b50      	cmp	r3, #80	; 0x50
 800625a:	d033      	beq.n	80062c4 <HAL_TIM_ConfigClockSource+0xe0>
 800625c:	2b60      	cmp	r3, #96	; 0x60
 800625e:	d041      	beq.n	80062e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006260:	e06a      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006266:	d066      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x152>
 8006268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800626c:	d017      	beq.n	800629e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800626e:	e063      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6818      	ldr	r0, [r3, #0]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	6899      	ldr	r1, [r3, #8]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f000 f9aa 	bl	80065d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006292:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	609a      	str	r2, [r3, #8]
      break;
 800629c:	e04c      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	6899      	ldr	r1, [r3, #8]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f000 f993 	bl	80065d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062c0:	609a      	str	r2, [r3, #8]
      break;
 80062c2:	e039      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	6859      	ldr	r1, [r3, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	461a      	mov	r2, r3
 80062d2:	f000 f907 	bl	80064e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2150      	movs	r1, #80	; 0x50
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 f960 	bl	80065a2 <TIM_ITRx_SetConfig>
      break;
 80062e2:	e029      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6818      	ldr	r0, [r3, #0]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	6859      	ldr	r1, [r3, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	461a      	mov	r2, r3
 80062f2:	f000 f926 	bl	8006542 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2160      	movs	r1, #96	; 0x60
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 f950 	bl	80065a2 <TIM_ITRx_SetConfig>
      break;
 8006302:	e019      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6818      	ldr	r0, [r3, #0]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	6859      	ldr	r1, [r3, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	461a      	mov	r2, r3
 8006312:	f000 f8e7 	bl	80064e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2140      	movs	r1, #64	; 0x40
 800631c:	4618      	mov	r0, r3
 800631e:	f000 f940 	bl	80065a2 <TIM_ITRx_SetConfig>
      break;
 8006322:	e009      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4619      	mov	r1, r3
 800632e:	4610      	mov	r0, r2
 8006330:	f000 f937 	bl	80065a2 <TIM_ITRx_SetConfig>
      break;
 8006334:	e000      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
	...

080063a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a40      	ldr	r2, [pc, #256]	; (80064b8 <TIM_Base_SetConfig+0x114>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d013      	beq.n	80063e4 <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c2:	d00f      	beq.n	80063e4 <TIM_Base_SetConfig+0x40>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a3d      	ldr	r2, [pc, #244]	; (80064bc <TIM_Base_SetConfig+0x118>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00b      	beq.n	80063e4 <TIM_Base_SetConfig+0x40>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a3c      	ldr	r2, [pc, #240]	; (80064c0 <TIM_Base_SetConfig+0x11c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d007      	beq.n	80063e4 <TIM_Base_SetConfig+0x40>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a3b      	ldr	r2, [pc, #236]	; (80064c4 <TIM_Base_SetConfig+0x120>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <TIM_Base_SetConfig+0x40>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a3a      	ldr	r2, [pc, #232]	; (80064c8 <TIM_Base_SetConfig+0x124>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d108      	bne.n	80063f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a2f      	ldr	r2, [pc, #188]	; (80064b8 <TIM_Base_SetConfig+0x114>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d02b      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006404:	d027      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2c      	ldr	r2, [pc, #176]	; (80064bc <TIM_Base_SetConfig+0x118>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d023      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2b      	ldr	r2, [pc, #172]	; (80064c0 <TIM_Base_SetConfig+0x11c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d01f      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2a      	ldr	r2, [pc, #168]	; (80064c4 <TIM_Base_SetConfig+0x120>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d01b      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a29      	ldr	r2, [pc, #164]	; (80064c8 <TIM_Base_SetConfig+0x124>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d017      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a28      	ldr	r2, [pc, #160]	; (80064cc <TIM_Base_SetConfig+0x128>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d013      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a27      	ldr	r2, [pc, #156]	; (80064d0 <TIM_Base_SetConfig+0x12c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00f      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a26      	ldr	r2, [pc, #152]	; (80064d4 <TIM_Base_SetConfig+0x130>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00b      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a25      	ldr	r2, [pc, #148]	; (80064d8 <TIM_Base_SetConfig+0x134>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d007      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a24      	ldr	r2, [pc, #144]	; (80064dc <TIM_Base_SetConfig+0x138>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d003      	beq.n	8006456 <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a23      	ldr	r2, [pc, #140]	; (80064e0 <TIM_Base_SetConfig+0x13c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d108      	bne.n	8006468 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a0a      	ldr	r2, [pc, #40]	; (80064b8 <TIM_Base_SetConfig+0x114>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d003      	beq.n	800649c <TIM_Base_SetConfig+0xf8>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a0c      	ldr	r2, [pc, #48]	; (80064c8 <TIM_Base_SetConfig+0x124>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d103      	bne.n	80064a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	615a      	str	r2, [r3, #20]
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40000c00 	.word	0x40000c00
 80064c8:	40010400 	.word	0x40010400
 80064cc:	40014000 	.word	0x40014000
 80064d0:	40014400 	.word	0x40014400
 80064d4:	40014800 	.word	0x40014800
 80064d8:	40001800 	.word	0x40001800
 80064dc:	40001c00 	.word	0x40001c00
 80064e0:	40002000 	.word	0x40002000

080064e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f023 0201 	bic.w	r2, r3, #1
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800650e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4313      	orrs	r3, r2
 8006518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f023 030a 	bic.w	r3, r3, #10
 8006520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	621a      	str	r2, [r3, #32]
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006542:	b480      	push	{r7}
 8006544:	b087      	sub	sp, #28
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f023 0210 	bic.w	r2, r3, #16
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800656c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	031b      	lsls	r3, r3, #12
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800657e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	621a      	str	r2, [r3, #32]
}
 8006596:	bf00      	nop
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	f043 0307 	orr.w	r3, r3, #7
 80065c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	609a      	str	r2, [r3, #8]
}
 80065cc:	bf00      	nop
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	021a      	lsls	r2, r3, #8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4313      	orrs	r3, r2
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	609a      	str	r2, [r3, #8]
}
 800660c:	bf00      	nop
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800662c:	2302      	movs	r3, #2
 800662e:	e032      	b.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006668:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	4313      	orrs	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e03f      	b.n	800675c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d106      	bne.n	80066f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7fd f89b 	bl	800382c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2224      	movs	r2, #36	; 0x24
 80066fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800670c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fa5a 	bl	8006bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	691a      	ldr	r2, [r3, #16]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006722:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695a      	ldr	r2, [r3, #20]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006732:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006742:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006784:	2300      	movs	r3, #0
 8006786:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10d      	bne.n	80067b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d008      	beq.n	80067b6 <HAL_UART_IRQHandler+0x52>
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f988 	bl	8006ac4 <UART_Receive_IT>
      return;
 80067b4:	e0cc      	b.n	8006950 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 80ab 	beq.w	8006914 <HAL_UART_IRQHandler+0x1b0>
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d105      	bne.n	80067d4 <HAL_UART_IRQHandler+0x70>
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 80a0 	beq.w	8006914 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <HAL_UART_IRQHandler+0x90>
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ec:	f043 0201 	orr.w	r2, r3, #1
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <HAL_UART_IRQHandler+0xb0>
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680c:	f043 0202 	orr.w	r2, r3, #2
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <HAL_UART_IRQHandler+0xd0>
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b00      	cmp	r3, #0
 8006826:	d005      	beq.n	8006834 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682c:	f043 0204 	orr.w	r2, r3, #4
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <HAL_UART_IRQHandler+0xf0>
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684c:	f043 0208 	orr.w	r2, r3, #8
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d078      	beq.n	800694e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f003 0320 	and.w	r3, r3, #32
 8006862:	2b00      	cmp	r3, #0
 8006864:	d007      	beq.n	8006876 <HAL_UART_IRQHandler+0x112>
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f927 	bl	8006ac4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006880:	2b40      	cmp	r3, #64	; 0x40
 8006882:	bf0c      	ite	eq
 8006884:	2301      	moveq	r3, #1
 8006886:	2300      	movne	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d102      	bne.n	800689e <HAL_UART_IRQHandler+0x13a>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d031      	beq.n	8006902 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f870 	bl	8006984 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ae:	2b40      	cmp	r3, #64	; 0x40
 80068b0:	d123      	bne.n	80068fa <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695a      	ldr	r2, [r3, #20]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d013      	beq.n	80068f2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ce:	4a22      	ldr	r2, [pc, #136]	; (8006958 <HAL_UART_IRQHandler+0x1f4>)
 80068d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe f8a3 	bl	8004a22 <HAL_DMA_Abort_IT>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d016      	beq.n	8006910 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068ec:	4610      	mov	r0, r2
 80068ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f0:	e00e      	b.n	8006910 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f83c 	bl	8006970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f8:	e00a      	b.n	8006910 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f838 	bl	8006970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006900:	e006      	b.n	8006910 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f834 	bl	8006970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800690e:	e01e      	b.n	800694e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006910:	bf00      	nop
    return;
 8006912:	e01c      	b.n	800694e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691a:	2b00      	cmp	r3, #0
 800691c:	d008      	beq.n	8006930 <HAL_UART_IRQHandler+0x1cc>
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f85d 	bl	80069e8 <UART_Transmit_IT>
    return;
 800692e:	e00f      	b.n	8006950 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <HAL_UART_IRQHandler+0x1ec>
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f8a5 	bl	8006a94 <UART_EndTransmit_IT>
    return;
 800694a:	bf00      	nop
 800694c:	e000      	b.n	8006950 <HAL_UART_IRQHandler+0x1ec>
    return;
 800694e:	bf00      	nop
  }
}
 8006950:	3720      	adds	r7, #32
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	080069c1 	.word	0x080069c1

0800695c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800699a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0201 	bic.w	r2, r2, #1
 80069aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff ffc8 	bl	8006970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e0:	bf00      	nop
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b21      	cmp	r3, #33	; 0x21
 80069fa:	d144      	bne.n	8006a86 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a04:	d11a      	bne.n	8006a3c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a1a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d105      	bne.n	8006a30 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	1c9a      	adds	r2, r3, #2
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	621a      	str	r2, [r3, #32]
 8006a2e:	e00e      	b.n	8006a4e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	621a      	str	r2, [r3, #32]
 8006a3a:	e008      	b.n	8006a4e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	1c59      	adds	r1, r3, #1
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6211      	str	r1, [r2, #32]
 8006a46:	781a      	ldrb	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10f      	bne.n	8006a82 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68da      	ldr	r2, [r3, #12]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e000      	b.n	8006a88 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006a86:	2302      	movs	r3, #2
  }
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aaa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7ff ff51 	bl	800695c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b22      	cmp	r3, #34	; 0x22
 8006ad6:	d171      	bne.n	8006bbc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae0:	d123      	bne.n	8006b2a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10e      	bne.n	8006b0e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b06:	1c9a      	adds	r2, r3, #2
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b0c:	e029      	b.n	8006b62 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	629a      	str	r2, [r3, #40]	; 0x28
 8006b28:	e01b      	b.n	8006b62 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6858      	ldr	r0, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3c:	1c59      	adds	r1, r3, #1
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6291      	str	r1, [r2, #40]	; 0x28
 8006b42:	b2c2      	uxtb	r2, r0
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	e00c      	b.n	8006b62 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	1c58      	adds	r0, r3, #1
 8006b56:	6879      	ldr	r1, [r7, #4]
 8006b58:	6288      	str	r0, [r1, #40]	; 0x28
 8006b5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d120      	bne.n	8006bb8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0220 	bic.w	r2, r2, #32
 8006b84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695a      	ldr	r2, [r3, #20]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0201 	bic.w	r2, r2, #1
 8006ba4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fc f9e6 	bl	8002f80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	e002      	b.n	8006bbe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bc8:	b5b0      	push	{r4, r5, r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006c08:	f023 030c 	bic.w	r3, r3, #12
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	68f9      	ldr	r1, [r7, #12]
 8006c12:	430b      	orrs	r3, r1
 8006c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699a      	ldr	r2, [r3, #24]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c34:	f040 80e4 	bne.w	8006e00 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4aab      	ldr	r2, [pc, #684]	; (8006eec <UART_SetConfig+0x324>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d004      	beq.n	8006c4c <UART_SetConfig+0x84>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4aaa      	ldr	r2, [pc, #680]	; (8006ef0 <UART_SetConfig+0x328>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d16c      	bne.n	8006d26 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006c4c:	f7fe fd40 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8006c50:	4602      	mov	r2, r0
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	009a      	lsls	r2, r3, #2
 8006c5a:	441a      	add	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c66:	4aa3      	ldr	r2, [pc, #652]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006c68:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	011c      	lsls	r4, r3, #4
 8006c70:	f7fe fd2e 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8006c74:	4602      	mov	r2, r0
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009a      	lsls	r2, r3, #2
 8006c7e:	441a      	add	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	fbb2 f5f3 	udiv	r5, r2, r3
 8006c8a:	f7fe fd21 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	009a      	lsls	r2, r3, #2
 8006c98:	441a      	add	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca4:	4a93      	ldr	r2, [pc, #588]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8006caa:	095b      	lsrs	r3, r3, #5
 8006cac:	2264      	movs	r2, #100	; 0x64
 8006cae:	fb02 f303 	mul.w	r3, r2, r3
 8006cb2:	1aeb      	subs	r3, r5, r3
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	3332      	adds	r3, #50	; 0x32
 8006cb8:	4a8e      	ldr	r2, [pc, #568]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006cba:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cc6:	441c      	add	r4, r3
 8006cc8:	f7fe fd02 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009a      	lsls	r2, r3, #2
 8006cd6:	441a      	add	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	fbb2 f5f3 	udiv	r5, r2, r3
 8006ce2:	f7fe fcf5 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	009a      	lsls	r2, r3, #2
 8006cf0:	441a      	add	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfc:	4a7d      	ldr	r2, [pc, #500]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	2264      	movs	r2, #100	; 0x64
 8006d06:	fb02 f303 	mul.w	r3, r2, r3
 8006d0a:	1aeb      	subs	r3, r5, r3
 8006d0c:	00db      	lsls	r3, r3, #3
 8006d0e:	3332      	adds	r3, #50	; 0x32
 8006d10:	4a78      	ldr	r2, [pc, #480]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	f003 0207 	and.w	r2, r3, #7
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4422      	add	r2, r4
 8006d22:	609a      	str	r2, [r3, #8]
 8006d24:	e154      	b.n	8006fd0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006d26:	f7fe fcbf 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	009a      	lsls	r2, r3, #2
 8006d34:	441a      	add	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d40:	4a6c      	ldr	r2, [pc, #432]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	095b      	lsrs	r3, r3, #5
 8006d48:	011c      	lsls	r4, r3, #4
 8006d4a:	f7fe fcad 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	009a      	lsls	r2, r3, #2
 8006d58:	441a      	add	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	fbb2 f5f3 	udiv	r5, r2, r3
 8006d64:	f7fe fca0 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009a      	lsls	r2, r3, #2
 8006d72:	441a      	add	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7e:	4a5d      	ldr	r2, [pc, #372]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006d80:	fba2 2303 	umull	r2, r3, r2, r3
 8006d84:	095b      	lsrs	r3, r3, #5
 8006d86:	2264      	movs	r2, #100	; 0x64
 8006d88:	fb02 f303 	mul.w	r3, r2, r3
 8006d8c:	1aeb      	subs	r3, r5, r3
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	3332      	adds	r3, #50	; 0x32
 8006d92:	4a58      	ldr	r2, [pc, #352]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006d94:	fba2 2303 	umull	r2, r3, r2, r3
 8006d98:	095b      	lsrs	r3, r3, #5
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006da0:	441c      	add	r4, r3
 8006da2:	f7fe fc81 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8006da6:	4602      	mov	r2, r0
 8006da8:	4613      	mov	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	009a      	lsls	r2, r3, #2
 8006db0:	441a      	add	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	fbb2 f5f3 	udiv	r5, r2, r3
 8006dbc:	f7fe fc74 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009a      	lsls	r2, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd6:	4a47      	ldr	r2, [pc, #284]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ddc:	095b      	lsrs	r3, r3, #5
 8006dde:	2264      	movs	r2, #100	; 0x64
 8006de0:	fb02 f303 	mul.w	r3, r2, r3
 8006de4:	1aeb      	subs	r3, r5, r3
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	3332      	adds	r3, #50	; 0x32
 8006dea:	4a42      	ldr	r2, [pc, #264]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006dec:	fba2 2303 	umull	r2, r3, r2, r3
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	f003 0207 	and.w	r2, r3, #7
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4422      	add	r2, r4
 8006dfc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006dfe:	e0e7      	b.n	8006fd0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a39      	ldr	r2, [pc, #228]	; (8006eec <UART_SetConfig+0x324>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d004      	beq.n	8006e14 <UART_SetConfig+0x24c>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a38      	ldr	r2, [pc, #224]	; (8006ef0 <UART_SetConfig+0x328>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d171      	bne.n	8006ef8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006e14:	f7fe fc5c 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	009a      	lsls	r2, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2e:	4a31      	ldr	r2, [pc, #196]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006e30:	fba2 2303 	umull	r2, r3, r2, r3
 8006e34:	095b      	lsrs	r3, r3, #5
 8006e36:	011c      	lsls	r4, r3, #4
 8006e38:	f7fe fc4a 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	4613      	mov	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	009a      	lsls	r2, r3, #2
 8006e46:	441a      	add	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006e52:	f7fe fc3d 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8006e56:	4602      	mov	r2, r0
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009a      	lsls	r2, r3, #2
 8006e60:	441a      	add	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6c:	4a21      	ldr	r2, [pc, #132]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	2264      	movs	r2, #100	; 0x64
 8006e76:	fb02 f303 	mul.w	r3, r2, r3
 8006e7a:	1aeb      	subs	r3, r5, r3
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	3332      	adds	r3, #50	; 0x32
 8006e80:	4a1c      	ldr	r2, [pc, #112]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006e82:	fba2 2303 	umull	r2, r3, r2, r3
 8006e86:	095b      	lsrs	r3, r3, #5
 8006e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e8c:	441c      	add	r4, r3
 8006e8e:	f7fe fc1f 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8006e92:	4602      	mov	r2, r0
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009a      	lsls	r2, r3, #2
 8006e9c:	441a      	add	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	fbb2 f5f3 	udiv	r5, r2, r3
 8006ea8:	f7fe fc12 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8006eac:	4602      	mov	r2, r0
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009a      	lsls	r2, r3, #2
 8006eb6:	441a      	add	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec2:	4a0c      	ldr	r2, [pc, #48]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	2264      	movs	r2, #100	; 0x64
 8006ecc:	fb02 f303 	mul.w	r3, r2, r3
 8006ed0:	1aeb      	subs	r3, r5, r3
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	3332      	adds	r3, #50	; 0x32
 8006ed6:	4a07      	ldr	r2, [pc, #28]	; (8006ef4 <UART_SetConfig+0x32c>)
 8006ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8006edc:	095b      	lsrs	r3, r3, #5
 8006ede:	f003 020f 	and.w	r2, r3, #15
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4422      	add	r2, r4
 8006ee8:	609a      	str	r2, [r3, #8]
 8006eea:	e071      	b.n	8006fd0 <UART_SetConfig+0x408>
 8006eec:	40011000 	.word	0x40011000
 8006ef0:	40011400 	.word	0x40011400
 8006ef4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006ef8:	f7fe fbd6 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8006efc:	4602      	mov	r2, r0
 8006efe:	4613      	mov	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	009a      	lsls	r2, r3, #2
 8006f06:	441a      	add	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f12:	4a31      	ldr	r2, [pc, #196]	; (8006fd8 <UART_SetConfig+0x410>)
 8006f14:	fba2 2303 	umull	r2, r3, r2, r3
 8006f18:	095b      	lsrs	r3, r3, #5
 8006f1a:	011c      	lsls	r4, r3, #4
 8006f1c:	f7fe fbc4 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8006f20:	4602      	mov	r2, r0
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	009a      	lsls	r2, r3, #2
 8006f2a:	441a      	add	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	fbb2 f5f3 	udiv	r5, r2, r3
 8006f36:	f7fe fbb7 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	009a      	lsls	r2, r3, #2
 8006f44:	441a      	add	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f50:	4a21      	ldr	r2, [pc, #132]	; (8006fd8 <UART_SetConfig+0x410>)
 8006f52:	fba2 2303 	umull	r2, r3, r2, r3
 8006f56:	095b      	lsrs	r3, r3, #5
 8006f58:	2264      	movs	r2, #100	; 0x64
 8006f5a:	fb02 f303 	mul.w	r3, r2, r3
 8006f5e:	1aeb      	subs	r3, r5, r3
 8006f60:	011b      	lsls	r3, r3, #4
 8006f62:	3332      	adds	r3, #50	; 0x32
 8006f64:	4a1c      	ldr	r2, [pc, #112]	; (8006fd8 <UART_SetConfig+0x410>)
 8006f66:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6a:	095b      	lsrs	r3, r3, #5
 8006f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f70:	441c      	add	r4, r3
 8006f72:	f7fe fb99 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8006f76:	4602      	mov	r2, r0
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009a      	lsls	r2, r3, #2
 8006f80:	441a      	add	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	fbb2 f5f3 	udiv	r5, r2, r3
 8006f8c:	f7fe fb8c 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8006f90:	4602      	mov	r2, r0
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009a      	lsls	r2, r3, #2
 8006f9a:	441a      	add	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa6:	4a0c      	ldr	r2, [pc, #48]	; (8006fd8 <UART_SetConfig+0x410>)
 8006fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	2264      	movs	r2, #100	; 0x64
 8006fb0:	fb02 f303 	mul.w	r3, r2, r3
 8006fb4:	1aeb      	subs	r3, r5, r3
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	3332      	adds	r3, #50	; 0x32
 8006fba:	4a07      	ldr	r2, [pc, #28]	; (8006fd8 <UART_SetConfig+0x410>)
 8006fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	f003 020f 	and.w	r2, r3, #15
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4422      	add	r2, r4
 8006fcc:	609a      	str	r2, [r3, #8]
}
 8006fce:	e7ff      	b.n	8006fd0 <UART_SetConfig+0x408>
 8006fd0:	bf00      	nop
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8006fd8:	51eb851f 	.word	0x51eb851f

08006fdc <__errno>:
 8006fdc:	4b01      	ldr	r3, [pc, #4]	; (8006fe4 <__errno+0x8>)
 8006fde:	6818      	ldr	r0, [r3, #0]
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000064 	.word	0x20000064

08006fe8 <__libc_init_array>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	4e0d      	ldr	r6, [pc, #52]	; (8007020 <__libc_init_array+0x38>)
 8006fec:	4c0d      	ldr	r4, [pc, #52]	; (8007024 <__libc_init_array+0x3c>)
 8006fee:	1ba4      	subs	r4, r4, r6
 8006ff0:	10a4      	asrs	r4, r4, #2
 8006ff2:	2500      	movs	r5, #0
 8006ff4:	42a5      	cmp	r5, r4
 8006ff6:	d109      	bne.n	800700c <__libc_init_array+0x24>
 8006ff8:	4e0b      	ldr	r6, [pc, #44]	; (8007028 <__libc_init_array+0x40>)
 8006ffa:	4c0c      	ldr	r4, [pc, #48]	; (800702c <__libc_init_array+0x44>)
 8006ffc:	f001 f8c8 	bl	8008190 <_init>
 8007000:	1ba4      	subs	r4, r4, r6
 8007002:	10a4      	asrs	r4, r4, #2
 8007004:	2500      	movs	r5, #0
 8007006:	42a5      	cmp	r5, r4
 8007008:	d105      	bne.n	8007016 <__libc_init_array+0x2e>
 800700a:	bd70      	pop	{r4, r5, r6, pc}
 800700c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007010:	4798      	blx	r3
 8007012:	3501      	adds	r5, #1
 8007014:	e7ee      	b.n	8006ff4 <__libc_init_array+0xc>
 8007016:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800701a:	4798      	blx	r3
 800701c:	3501      	adds	r5, #1
 800701e:	e7f2      	b.n	8007006 <__libc_init_array+0x1e>
 8007020:	080263cc 	.word	0x080263cc
 8007024:	080263cc 	.word	0x080263cc
 8007028:	080263cc 	.word	0x080263cc
 800702c:	080263d0 	.word	0x080263d0

08007030 <memset>:
 8007030:	4402      	add	r2, r0
 8007032:	4603      	mov	r3, r0
 8007034:	4293      	cmp	r3, r2
 8007036:	d100      	bne.n	800703a <memset+0xa>
 8007038:	4770      	bx	lr
 800703a:	f803 1b01 	strb.w	r1, [r3], #1
 800703e:	e7f9      	b.n	8007034 <memset+0x4>

08007040 <iprintf>:
 8007040:	b40f      	push	{r0, r1, r2, r3}
 8007042:	4b0a      	ldr	r3, [pc, #40]	; (800706c <iprintf+0x2c>)
 8007044:	b513      	push	{r0, r1, r4, lr}
 8007046:	681c      	ldr	r4, [r3, #0]
 8007048:	b124      	cbz	r4, 8007054 <iprintf+0x14>
 800704a:	69a3      	ldr	r3, [r4, #24]
 800704c:	b913      	cbnz	r3, 8007054 <iprintf+0x14>
 800704e:	4620      	mov	r0, r4
 8007050:	f000 f86e 	bl	8007130 <__sinit>
 8007054:	ab05      	add	r3, sp, #20
 8007056:	9a04      	ldr	r2, [sp, #16]
 8007058:	68a1      	ldr	r1, [r4, #8]
 800705a:	9301      	str	r3, [sp, #4]
 800705c:	4620      	mov	r0, r4
 800705e:	f000 fac7 	bl	80075f0 <_vfiprintf_r>
 8007062:	b002      	add	sp, #8
 8007064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007068:	b004      	add	sp, #16
 800706a:	4770      	bx	lr
 800706c:	20000064 	.word	0x20000064

08007070 <siprintf>:
 8007070:	b40e      	push	{r1, r2, r3}
 8007072:	b500      	push	{lr}
 8007074:	b09c      	sub	sp, #112	; 0x70
 8007076:	ab1d      	add	r3, sp, #116	; 0x74
 8007078:	9002      	str	r0, [sp, #8]
 800707a:	9006      	str	r0, [sp, #24]
 800707c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007080:	4809      	ldr	r0, [pc, #36]	; (80070a8 <siprintf+0x38>)
 8007082:	9107      	str	r1, [sp, #28]
 8007084:	9104      	str	r1, [sp, #16]
 8007086:	4909      	ldr	r1, [pc, #36]	; (80070ac <siprintf+0x3c>)
 8007088:	f853 2b04 	ldr.w	r2, [r3], #4
 800708c:	9105      	str	r1, [sp, #20]
 800708e:	6800      	ldr	r0, [r0, #0]
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	a902      	add	r1, sp, #8
 8007094:	f000 f98a 	bl	80073ac <_svfiprintf_r>
 8007098:	9b02      	ldr	r3, [sp, #8]
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	b01c      	add	sp, #112	; 0x70
 80070a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a4:	b003      	add	sp, #12
 80070a6:	4770      	bx	lr
 80070a8:	20000064 	.word	0x20000064
 80070ac:	ffff0208 	.word	0xffff0208

080070b0 <std>:
 80070b0:	2300      	movs	r3, #0
 80070b2:	b510      	push	{r4, lr}
 80070b4:	4604      	mov	r4, r0
 80070b6:	e9c0 3300 	strd	r3, r3, [r0]
 80070ba:	6083      	str	r3, [r0, #8]
 80070bc:	8181      	strh	r1, [r0, #12]
 80070be:	6643      	str	r3, [r0, #100]	; 0x64
 80070c0:	81c2      	strh	r2, [r0, #14]
 80070c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070c6:	6183      	str	r3, [r0, #24]
 80070c8:	4619      	mov	r1, r3
 80070ca:	2208      	movs	r2, #8
 80070cc:	305c      	adds	r0, #92	; 0x5c
 80070ce:	f7ff ffaf 	bl	8007030 <memset>
 80070d2:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <std+0x38>)
 80070d4:	6263      	str	r3, [r4, #36]	; 0x24
 80070d6:	4b05      	ldr	r3, [pc, #20]	; (80070ec <std+0x3c>)
 80070d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80070da:	4b05      	ldr	r3, [pc, #20]	; (80070f0 <std+0x40>)
 80070dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070de:	4b05      	ldr	r3, [pc, #20]	; (80070f4 <std+0x44>)
 80070e0:	6224      	str	r4, [r4, #32]
 80070e2:	6323      	str	r3, [r4, #48]	; 0x30
 80070e4:	bd10      	pop	{r4, pc}
 80070e6:	bf00      	nop
 80070e8:	08007b4d 	.word	0x08007b4d
 80070ec:	08007b6f 	.word	0x08007b6f
 80070f0:	08007ba7 	.word	0x08007ba7
 80070f4:	08007bcb 	.word	0x08007bcb

080070f8 <_cleanup_r>:
 80070f8:	4901      	ldr	r1, [pc, #4]	; (8007100 <_cleanup_r+0x8>)
 80070fa:	f000 b885 	b.w	8007208 <_fwalk_reent>
 80070fe:	bf00      	nop
 8007100:	08007ea5 	.word	0x08007ea5

08007104 <__sfmoreglue>:
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	1e4a      	subs	r2, r1, #1
 8007108:	2568      	movs	r5, #104	; 0x68
 800710a:	4355      	muls	r5, r2
 800710c:	460e      	mov	r6, r1
 800710e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007112:	f000 f897 	bl	8007244 <_malloc_r>
 8007116:	4604      	mov	r4, r0
 8007118:	b140      	cbz	r0, 800712c <__sfmoreglue+0x28>
 800711a:	2100      	movs	r1, #0
 800711c:	e9c0 1600 	strd	r1, r6, [r0]
 8007120:	300c      	adds	r0, #12
 8007122:	60a0      	str	r0, [r4, #8]
 8007124:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007128:	f7ff ff82 	bl	8007030 <memset>
 800712c:	4620      	mov	r0, r4
 800712e:	bd70      	pop	{r4, r5, r6, pc}

08007130 <__sinit>:
 8007130:	6983      	ldr	r3, [r0, #24]
 8007132:	b510      	push	{r4, lr}
 8007134:	4604      	mov	r4, r0
 8007136:	bb33      	cbnz	r3, 8007186 <__sinit+0x56>
 8007138:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800713c:	6503      	str	r3, [r0, #80]	; 0x50
 800713e:	4b12      	ldr	r3, [pc, #72]	; (8007188 <__sinit+0x58>)
 8007140:	4a12      	ldr	r2, [pc, #72]	; (800718c <__sinit+0x5c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6282      	str	r2, [r0, #40]	; 0x28
 8007146:	4298      	cmp	r0, r3
 8007148:	bf04      	itt	eq
 800714a:	2301      	moveq	r3, #1
 800714c:	6183      	streq	r3, [r0, #24]
 800714e:	f000 f81f 	bl	8007190 <__sfp>
 8007152:	6060      	str	r0, [r4, #4]
 8007154:	4620      	mov	r0, r4
 8007156:	f000 f81b 	bl	8007190 <__sfp>
 800715a:	60a0      	str	r0, [r4, #8]
 800715c:	4620      	mov	r0, r4
 800715e:	f000 f817 	bl	8007190 <__sfp>
 8007162:	2200      	movs	r2, #0
 8007164:	60e0      	str	r0, [r4, #12]
 8007166:	2104      	movs	r1, #4
 8007168:	6860      	ldr	r0, [r4, #4]
 800716a:	f7ff ffa1 	bl	80070b0 <std>
 800716e:	2201      	movs	r2, #1
 8007170:	2109      	movs	r1, #9
 8007172:	68a0      	ldr	r0, [r4, #8]
 8007174:	f7ff ff9c 	bl	80070b0 <std>
 8007178:	2202      	movs	r2, #2
 800717a:	2112      	movs	r1, #18
 800717c:	68e0      	ldr	r0, [r4, #12]
 800717e:	f7ff ff97 	bl	80070b0 <std>
 8007182:	2301      	movs	r3, #1
 8007184:	61a3      	str	r3, [r4, #24]
 8007186:	bd10      	pop	{r4, pc}
 8007188:	0802632c 	.word	0x0802632c
 800718c:	080070f9 	.word	0x080070f9

08007190 <__sfp>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	4b1b      	ldr	r3, [pc, #108]	; (8007200 <__sfp+0x70>)
 8007194:	681e      	ldr	r6, [r3, #0]
 8007196:	69b3      	ldr	r3, [r6, #24]
 8007198:	4607      	mov	r7, r0
 800719a:	b913      	cbnz	r3, 80071a2 <__sfp+0x12>
 800719c:	4630      	mov	r0, r6
 800719e:	f7ff ffc7 	bl	8007130 <__sinit>
 80071a2:	3648      	adds	r6, #72	; 0x48
 80071a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	d503      	bpl.n	80071b4 <__sfp+0x24>
 80071ac:	6833      	ldr	r3, [r6, #0]
 80071ae:	b133      	cbz	r3, 80071be <__sfp+0x2e>
 80071b0:	6836      	ldr	r6, [r6, #0]
 80071b2:	e7f7      	b.n	80071a4 <__sfp+0x14>
 80071b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071b8:	b16d      	cbz	r5, 80071d6 <__sfp+0x46>
 80071ba:	3468      	adds	r4, #104	; 0x68
 80071bc:	e7f4      	b.n	80071a8 <__sfp+0x18>
 80071be:	2104      	movs	r1, #4
 80071c0:	4638      	mov	r0, r7
 80071c2:	f7ff ff9f 	bl	8007104 <__sfmoreglue>
 80071c6:	6030      	str	r0, [r6, #0]
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d1f1      	bne.n	80071b0 <__sfp+0x20>
 80071cc:	230c      	movs	r3, #12
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	4604      	mov	r4, r0
 80071d2:	4620      	mov	r0, r4
 80071d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071d6:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <__sfp+0x74>)
 80071d8:	6665      	str	r5, [r4, #100]	; 0x64
 80071da:	e9c4 5500 	strd	r5, r5, [r4]
 80071de:	60a5      	str	r5, [r4, #8]
 80071e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80071e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80071e8:	2208      	movs	r2, #8
 80071ea:	4629      	mov	r1, r5
 80071ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071f0:	f7ff ff1e 	bl	8007030 <memset>
 80071f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071fc:	e7e9      	b.n	80071d2 <__sfp+0x42>
 80071fe:	bf00      	nop
 8007200:	0802632c 	.word	0x0802632c
 8007204:	ffff0001 	.word	0xffff0001

08007208 <_fwalk_reent>:
 8007208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800720c:	4680      	mov	r8, r0
 800720e:	4689      	mov	r9, r1
 8007210:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007214:	2600      	movs	r6, #0
 8007216:	b914      	cbnz	r4, 800721e <_fwalk_reent+0x16>
 8007218:	4630      	mov	r0, r6
 800721a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800721e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007222:	3f01      	subs	r7, #1
 8007224:	d501      	bpl.n	800722a <_fwalk_reent+0x22>
 8007226:	6824      	ldr	r4, [r4, #0]
 8007228:	e7f5      	b.n	8007216 <_fwalk_reent+0xe>
 800722a:	89ab      	ldrh	r3, [r5, #12]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d907      	bls.n	8007240 <_fwalk_reent+0x38>
 8007230:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007234:	3301      	adds	r3, #1
 8007236:	d003      	beq.n	8007240 <_fwalk_reent+0x38>
 8007238:	4629      	mov	r1, r5
 800723a:	4640      	mov	r0, r8
 800723c:	47c8      	blx	r9
 800723e:	4306      	orrs	r6, r0
 8007240:	3568      	adds	r5, #104	; 0x68
 8007242:	e7ee      	b.n	8007222 <_fwalk_reent+0x1a>

08007244 <_malloc_r>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	1ccd      	adds	r5, r1, #3
 8007248:	f025 0503 	bic.w	r5, r5, #3
 800724c:	3508      	adds	r5, #8
 800724e:	2d0c      	cmp	r5, #12
 8007250:	bf38      	it	cc
 8007252:	250c      	movcc	r5, #12
 8007254:	2d00      	cmp	r5, #0
 8007256:	4606      	mov	r6, r0
 8007258:	db01      	blt.n	800725e <_malloc_r+0x1a>
 800725a:	42a9      	cmp	r1, r5
 800725c:	d903      	bls.n	8007266 <_malloc_r+0x22>
 800725e:	230c      	movs	r3, #12
 8007260:	6033      	str	r3, [r6, #0]
 8007262:	2000      	movs	r0, #0
 8007264:	bd70      	pop	{r4, r5, r6, pc}
 8007266:	f000 fee1 	bl	800802c <__malloc_lock>
 800726a:	4a21      	ldr	r2, [pc, #132]	; (80072f0 <_malloc_r+0xac>)
 800726c:	6814      	ldr	r4, [r2, #0]
 800726e:	4621      	mov	r1, r4
 8007270:	b991      	cbnz	r1, 8007298 <_malloc_r+0x54>
 8007272:	4c20      	ldr	r4, [pc, #128]	; (80072f4 <_malloc_r+0xb0>)
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	b91b      	cbnz	r3, 8007280 <_malloc_r+0x3c>
 8007278:	4630      	mov	r0, r6
 800727a:	f000 fc57 	bl	8007b2c <_sbrk_r>
 800727e:	6020      	str	r0, [r4, #0]
 8007280:	4629      	mov	r1, r5
 8007282:	4630      	mov	r0, r6
 8007284:	f000 fc52 	bl	8007b2c <_sbrk_r>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d124      	bne.n	80072d6 <_malloc_r+0x92>
 800728c:	230c      	movs	r3, #12
 800728e:	6033      	str	r3, [r6, #0]
 8007290:	4630      	mov	r0, r6
 8007292:	f000 fecc 	bl	800802e <__malloc_unlock>
 8007296:	e7e4      	b.n	8007262 <_malloc_r+0x1e>
 8007298:	680b      	ldr	r3, [r1, #0]
 800729a:	1b5b      	subs	r3, r3, r5
 800729c:	d418      	bmi.n	80072d0 <_malloc_r+0x8c>
 800729e:	2b0b      	cmp	r3, #11
 80072a0:	d90f      	bls.n	80072c2 <_malloc_r+0x7e>
 80072a2:	600b      	str	r3, [r1, #0]
 80072a4:	50cd      	str	r5, [r1, r3]
 80072a6:	18cc      	adds	r4, r1, r3
 80072a8:	4630      	mov	r0, r6
 80072aa:	f000 fec0 	bl	800802e <__malloc_unlock>
 80072ae:	f104 000b 	add.w	r0, r4, #11
 80072b2:	1d23      	adds	r3, r4, #4
 80072b4:	f020 0007 	bic.w	r0, r0, #7
 80072b8:	1ac3      	subs	r3, r0, r3
 80072ba:	d0d3      	beq.n	8007264 <_malloc_r+0x20>
 80072bc:	425a      	negs	r2, r3
 80072be:	50e2      	str	r2, [r4, r3]
 80072c0:	e7d0      	b.n	8007264 <_malloc_r+0x20>
 80072c2:	428c      	cmp	r4, r1
 80072c4:	684b      	ldr	r3, [r1, #4]
 80072c6:	bf16      	itet	ne
 80072c8:	6063      	strne	r3, [r4, #4]
 80072ca:	6013      	streq	r3, [r2, #0]
 80072cc:	460c      	movne	r4, r1
 80072ce:	e7eb      	b.n	80072a8 <_malloc_r+0x64>
 80072d0:	460c      	mov	r4, r1
 80072d2:	6849      	ldr	r1, [r1, #4]
 80072d4:	e7cc      	b.n	8007270 <_malloc_r+0x2c>
 80072d6:	1cc4      	adds	r4, r0, #3
 80072d8:	f024 0403 	bic.w	r4, r4, #3
 80072dc:	42a0      	cmp	r0, r4
 80072de:	d005      	beq.n	80072ec <_malloc_r+0xa8>
 80072e0:	1a21      	subs	r1, r4, r0
 80072e2:	4630      	mov	r0, r6
 80072e4:	f000 fc22 	bl	8007b2c <_sbrk_r>
 80072e8:	3001      	adds	r0, #1
 80072ea:	d0cf      	beq.n	800728c <_malloc_r+0x48>
 80072ec:	6025      	str	r5, [r4, #0]
 80072ee:	e7db      	b.n	80072a8 <_malloc_r+0x64>
 80072f0:	2000011c 	.word	0x2000011c
 80072f4:	20000120 	.word	0x20000120

080072f8 <__ssputs_r>:
 80072f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072fc:	688e      	ldr	r6, [r1, #8]
 80072fe:	429e      	cmp	r6, r3
 8007300:	4682      	mov	sl, r0
 8007302:	460c      	mov	r4, r1
 8007304:	4690      	mov	r8, r2
 8007306:	4699      	mov	r9, r3
 8007308:	d837      	bhi.n	800737a <__ssputs_r+0x82>
 800730a:	898a      	ldrh	r2, [r1, #12]
 800730c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007310:	d031      	beq.n	8007376 <__ssputs_r+0x7e>
 8007312:	6825      	ldr	r5, [r4, #0]
 8007314:	6909      	ldr	r1, [r1, #16]
 8007316:	1a6f      	subs	r7, r5, r1
 8007318:	6965      	ldr	r5, [r4, #20]
 800731a:	2302      	movs	r3, #2
 800731c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007320:	fb95 f5f3 	sdiv	r5, r5, r3
 8007324:	f109 0301 	add.w	r3, r9, #1
 8007328:	443b      	add	r3, r7
 800732a:	429d      	cmp	r5, r3
 800732c:	bf38      	it	cc
 800732e:	461d      	movcc	r5, r3
 8007330:	0553      	lsls	r3, r2, #21
 8007332:	d530      	bpl.n	8007396 <__ssputs_r+0x9e>
 8007334:	4629      	mov	r1, r5
 8007336:	f7ff ff85 	bl	8007244 <_malloc_r>
 800733a:	4606      	mov	r6, r0
 800733c:	b950      	cbnz	r0, 8007354 <__ssputs_r+0x5c>
 800733e:	230c      	movs	r3, #12
 8007340:	f8ca 3000 	str.w	r3, [sl]
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800734a:	81a3      	strh	r3, [r4, #12]
 800734c:	f04f 30ff 	mov.w	r0, #4294967295
 8007350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007354:	463a      	mov	r2, r7
 8007356:	6921      	ldr	r1, [r4, #16]
 8007358:	f000 fe44 	bl	8007fe4 <memcpy>
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007366:	81a3      	strh	r3, [r4, #12]
 8007368:	6126      	str	r6, [r4, #16]
 800736a:	6165      	str	r5, [r4, #20]
 800736c:	443e      	add	r6, r7
 800736e:	1bed      	subs	r5, r5, r7
 8007370:	6026      	str	r6, [r4, #0]
 8007372:	60a5      	str	r5, [r4, #8]
 8007374:	464e      	mov	r6, r9
 8007376:	454e      	cmp	r6, r9
 8007378:	d900      	bls.n	800737c <__ssputs_r+0x84>
 800737a:	464e      	mov	r6, r9
 800737c:	4632      	mov	r2, r6
 800737e:	4641      	mov	r1, r8
 8007380:	6820      	ldr	r0, [r4, #0]
 8007382:	f000 fe3a 	bl	8007ffa <memmove>
 8007386:	68a3      	ldr	r3, [r4, #8]
 8007388:	1b9b      	subs	r3, r3, r6
 800738a:	60a3      	str	r3, [r4, #8]
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	441e      	add	r6, r3
 8007390:	6026      	str	r6, [r4, #0]
 8007392:	2000      	movs	r0, #0
 8007394:	e7dc      	b.n	8007350 <__ssputs_r+0x58>
 8007396:	462a      	mov	r2, r5
 8007398:	f000 fe98 	bl	80080cc <_realloc_r>
 800739c:	4606      	mov	r6, r0
 800739e:	2800      	cmp	r0, #0
 80073a0:	d1e2      	bne.n	8007368 <__ssputs_r+0x70>
 80073a2:	6921      	ldr	r1, [r4, #16]
 80073a4:	4650      	mov	r0, sl
 80073a6:	f000 fe43 	bl	8008030 <_free_r>
 80073aa:	e7c8      	b.n	800733e <__ssputs_r+0x46>

080073ac <_svfiprintf_r>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	461d      	mov	r5, r3
 80073b2:	898b      	ldrh	r3, [r1, #12]
 80073b4:	061f      	lsls	r7, r3, #24
 80073b6:	b09d      	sub	sp, #116	; 0x74
 80073b8:	4680      	mov	r8, r0
 80073ba:	460c      	mov	r4, r1
 80073bc:	4616      	mov	r6, r2
 80073be:	d50f      	bpl.n	80073e0 <_svfiprintf_r+0x34>
 80073c0:	690b      	ldr	r3, [r1, #16]
 80073c2:	b96b      	cbnz	r3, 80073e0 <_svfiprintf_r+0x34>
 80073c4:	2140      	movs	r1, #64	; 0x40
 80073c6:	f7ff ff3d 	bl	8007244 <_malloc_r>
 80073ca:	6020      	str	r0, [r4, #0]
 80073cc:	6120      	str	r0, [r4, #16]
 80073ce:	b928      	cbnz	r0, 80073dc <_svfiprintf_r+0x30>
 80073d0:	230c      	movs	r3, #12
 80073d2:	f8c8 3000 	str.w	r3, [r8]
 80073d6:	f04f 30ff 	mov.w	r0, #4294967295
 80073da:	e0c8      	b.n	800756e <_svfiprintf_r+0x1c2>
 80073dc:	2340      	movs	r3, #64	; 0x40
 80073de:	6163      	str	r3, [r4, #20]
 80073e0:	2300      	movs	r3, #0
 80073e2:	9309      	str	r3, [sp, #36]	; 0x24
 80073e4:	2320      	movs	r3, #32
 80073e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073ea:	2330      	movs	r3, #48	; 0x30
 80073ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073f0:	9503      	str	r5, [sp, #12]
 80073f2:	f04f 0b01 	mov.w	fp, #1
 80073f6:	4637      	mov	r7, r6
 80073f8:	463d      	mov	r5, r7
 80073fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80073fe:	b10b      	cbz	r3, 8007404 <_svfiprintf_r+0x58>
 8007400:	2b25      	cmp	r3, #37	; 0x25
 8007402:	d13e      	bne.n	8007482 <_svfiprintf_r+0xd6>
 8007404:	ebb7 0a06 	subs.w	sl, r7, r6
 8007408:	d00b      	beq.n	8007422 <_svfiprintf_r+0x76>
 800740a:	4653      	mov	r3, sl
 800740c:	4632      	mov	r2, r6
 800740e:	4621      	mov	r1, r4
 8007410:	4640      	mov	r0, r8
 8007412:	f7ff ff71 	bl	80072f8 <__ssputs_r>
 8007416:	3001      	adds	r0, #1
 8007418:	f000 80a4 	beq.w	8007564 <_svfiprintf_r+0x1b8>
 800741c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800741e:	4453      	add	r3, sl
 8007420:	9309      	str	r3, [sp, #36]	; 0x24
 8007422:	783b      	ldrb	r3, [r7, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 809d 	beq.w	8007564 <_svfiprintf_r+0x1b8>
 800742a:	2300      	movs	r3, #0
 800742c:	f04f 32ff 	mov.w	r2, #4294967295
 8007430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007434:	9304      	str	r3, [sp, #16]
 8007436:	9307      	str	r3, [sp, #28]
 8007438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800743c:	931a      	str	r3, [sp, #104]	; 0x68
 800743e:	462f      	mov	r7, r5
 8007440:	2205      	movs	r2, #5
 8007442:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007446:	4850      	ldr	r0, [pc, #320]	; (8007588 <_svfiprintf_r+0x1dc>)
 8007448:	f7f8 feca 	bl	80001e0 <memchr>
 800744c:	9b04      	ldr	r3, [sp, #16]
 800744e:	b9d0      	cbnz	r0, 8007486 <_svfiprintf_r+0xda>
 8007450:	06d9      	lsls	r1, r3, #27
 8007452:	bf44      	itt	mi
 8007454:	2220      	movmi	r2, #32
 8007456:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800745a:	071a      	lsls	r2, r3, #28
 800745c:	bf44      	itt	mi
 800745e:	222b      	movmi	r2, #43	; 0x2b
 8007460:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007464:	782a      	ldrb	r2, [r5, #0]
 8007466:	2a2a      	cmp	r2, #42	; 0x2a
 8007468:	d015      	beq.n	8007496 <_svfiprintf_r+0xea>
 800746a:	9a07      	ldr	r2, [sp, #28]
 800746c:	462f      	mov	r7, r5
 800746e:	2000      	movs	r0, #0
 8007470:	250a      	movs	r5, #10
 8007472:	4639      	mov	r1, r7
 8007474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007478:	3b30      	subs	r3, #48	; 0x30
 800747a:	2b09      	cmp	r3, #9
 800747c:	d94d      	bls.n	800751a <_svfiprintf_r+0x16e>
 800747e:	b1b8      	cbz	r0, 80074b0 <_svfiprintf_r+0x104>
 8007480:	e00f      	b.n	80074a2 <_svfiprintf_r+0xf6>
 8007482:	462f      	mov	r7, r5
 8007484:	e7b8      	b.n	80073f8 <_svfiprintf_r+0x4c>
 8007486:	4a40      	ldr	r2, [pc, #256]	; (8007588 <_svfiprintf_r+0x1dc>)
 8007488:	1a80      	subs	r0, r0, r2
 800748a:	fa0b f000 	lsl.w	r0, fp, r0
 800748e:	4318      	orrs	r0, r3
 8007490:	9004      	str	r0, [sp, #16]
 8007492:	463d      	mov	r5, r7
 8007494:	e7d3      	b.n	800743e <_svfiprintf_r+0x92>
 8007496:	9a03      	ldr	r2, [sp, #12]
 8007498:	1d11      	adds	r1, r2, #4
 800749a:	6812      	ldr	r2, [r2, #0]
 800749c:	9103      	str	r1, [sp, #12]
 800749e:	2a00      	cmp	r2, #0
 80074a0:	db01      	blt.n	80074a6 <_svfiprintf_r+0xfa>
 80074a2:	9207      	str	r2, [sp, #28]
 80074a4:	e004      	b.n	80074b0 <_svfiprintf_r+0x104>
 80074a6:	4252      	negs	r2, r2
 80074a8:	f043 0302 	orr.w	r3, r3, #2
 80074ac:	9207      	str	r2, [sp, #28]
 80074ae:	9304      	str	r3, [sp, #16]
 80074b0:	783b      	ldrb	r3, [r7, #0]
 80074b2:	2b2e      	cmp	r3, #46	; 0x2e
 80074b4:	d10c      	bne.n	80074d0 <_svfiprintf_r+0x124>
 80074b6:	787b      	ldrb	r3, [r7, #1]
 80074b8:	2b2a      	cmp	r3, #42	; 0x2a
 80074ba:	d133      	bne.n	8007524 <_svfiprintf_r+0x178>
 80074bc:	9b03      	ldr	r3, [sp, #12]
 80074be:	1d1a      	adds	r2, r3, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	9203      	str	r2, [sp, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	bfb8      	it	lt
 80074c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80074cc:	3702      	adds	r7, #2
 80074ce:	9305      	str	r3, [sp, #20]
 80074d0:	4d2e      	ldr	r5, [pc, #184]	; (800758c <_svfiprintf_r+0x1e0>)
 80074d2:	7839      	ldrb	r1, [r7, #0]
 80074d4:	2203      	movs	r2, #3
 80074d6:	4628      	mov	r0, r5
 80074d8:	f7f8 fe82 	bl	80001e0 <memchr>
 80074dc:	b138      	cbz	r0, 80074ee <_svfiprintf_r+0x142>
 80074de:	2340      	movs	r3, #64	; 0x40
 80074e0:	1b40      	subs	r0, r0, r5
 80074e2:	fa03 f000 	lsl.w	r0, r3, r0
 80074e6:	9b04      	ldr	r3, [sp, #16]
 80074e8:	4303      	orrs	r3, r0
 80074ea:	3701      	adds	r7, #1
 80074ec:	9304      	str	r3, [sp, #16]
 80074ee:	7839      	ldrb	r1, [r7, #0]
 80074f0:	4827      	ldr	r0, [pc, #156]	; (8007590 <_svfiprintf_r+0x1e4>)
 80074f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074f6:	2206      	movs	r2, #6
 80074f8:	1c7e      	adds	r6, r7, #1
 80074fa:	f7f8 fe71 	bl	80001e0 <memchr>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d038      	beq.n	8007574 <_svfiprintf_r+0x1c8>
 8007502:	4b24      	ldr	r3, [pc, #144]	; (8007594 <_svfiprintf_r+0x1e8>)
 8007504:	bb13      	cbnz	r3, 800754c <_svfiprintf_r+0x1a0>
 8007506:	9b03      	ldr	r3, [sp, #12]
 8007508:	3307      	adds	r3, #7
 800750a:	f023 0307 	bic.w	r3, r3, #7
 800750e:	3308      	adds	r3, #8
 8007510:	9303      	str	r3, [sp, #12]
 8007512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007514:	444b      	add	r3, r9
 8007516:	9309      	str	r3, [sp, #36]	; 0x24
 8007518:	e76d      	b.n	80073f6 <_svfiprintf_r+0x4a>
 800751a:	fb05 3202 	mla	r2, r5, r2, r3
 800751e:	2001      	movs	r0, #1
 8007520:	460f      	mov	r7, r1
 8007522:	e7a6      	b.n	8007472 <_svfiprintf_r+0xc6>
 8007524:	2300      	movs	r3, #0
 8007526:	3701      	adds	r7, #1
 8007528:	9305      	str	r3, [sp, #20]
 800752a:	4619      	mov	r1, r3
 800752c:	250a      	movs	r5, #10
 800752e:	4638      	mov	r0, r7
 8007530:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007534:	3a30      	subs	r2, #48	; 0x30
 8007536:	2a09      	cmp	r2, #9
 8007538:	d903      	bls.n	8007542 <_svfiprintf_r+0x196>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d0c8      	beq.n	80074d0 <_svfiprintf_r+0x124>
 800753e:	9105      	str	r1, [sp, #20]
 8007540:	e7c6      	b.n	80074d0 <_svfiprintf_r+0x124>
 8007542:	fb05 2101 	mla	r1, r5, r1, r2
 8007546:	2301      	movs	r3, #1
 8007548:	4607      	mov	r7, r0
 800754a:	e7f0      	b.n	800752e <_svfiprintf_r+0x182>
 800754c:	ab03      	add	r3, sp, #12
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	4622      	mov	r2, r4
 8007552:	4b11      	ldr	r3, [pc, #68]	; (8007598 <_svfiprintf_r+0x1ec>)
 8007554:	a904      	add	r1, sp, #16
 8007556:	4640      	mov	r0, r8
 8007558:	f3af 8000 	nop.w
 800755c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007560:	4681      	mov	r9, r0
 8007562:	d1d6      	bne.n	8007512 <_svfiprintf_r+0x166>
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	065b      	lsls	r3, r3, #25
 8007568:	f53f af35 	bmi.w	80073d6 <_svfiprintf_r+0x2a>
 800756c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800756e:	b01d      	add	sp, #116	; 0x74
 8007570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007574:	ab03      	add	r3, sp, #12
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	4622      	mov	r2, r4
 800757a:	4b07      	ldr	r3, [pc, #28]	; (8007598 <_svfiprintf_r+0x1ec>)
 800757c:	a904      	add	r1, sp, #16
 800757e:	4640      	mov	r0, r8
 8007580:	f000 f9c2 	bl	8007908 <_printf_i>
 8007584:	e7ea      	b.n	800755c <_svfiprintf_r+0x1b0>
 8007586:	bf00      	nop
 8007588:	08026390 	.word	0x08026390
 800758c:	08026396 	.word	0x08026396
 8007590:	0802639a 	.word	0x0802639a
 8007594:	00000000 	.word	0x00000000
 8007598:	080072f9 	.word	0x080072f9

0800759c <__sfputc_r>:
 800759c:	6893      	ldr	r3, [r2, #8]
 800759e:	3b01      	subs	r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	b410      	push	{r4}
 80075a4:	6093      	str	r3, [r2, #8]
 80075a6:	da08      	bge.n	80075ba <__sfputc_r+0x1e>
 80075a8:	6994      	ldr	r4, [r2, #24]
 80075aa:	42a3      	cmp	r3, r4
 80075ac:	db01      	blt.n	80075b2 <__sfputc_r+0x16>
 80075ae:	290a      	cmp	r1, #10
 80075b0:	d103      	bne.n	80075ba <__sfputc_r+0x1e>
 80075b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075b6:	f000 bb0d 	b.w	8007bd4 <__swbuf_r>
 80075ba:	6813      	ldr	r3, [r2, #0]
 80075bc:	1c58      	adds	r0, r3, #1
 80075be:	6010      	str	r0, [r2, #0]
 80075c0:	7019      	strb	r1, [r3, #0]
 80075c2:	4608      	mov	r0, r1
 80075c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <__sfputs_r>:
 80075ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075cc:	4606      	mov	r6, r0
 80075ce:	460f      	mov	r7, r1
 80075d0:	4614      	mov	r4, r2
 80075d2:	18d5      	adds	r5, r2, r3
 80075d4:	42ac      	cmp	r4, r5
 80075d6:	d101      	bne.n	80075dc <__sfputs_r+0x12>
 80075d8:	2000      	movs	r0, #0
 80075da:	e007      	b.n	80075ec <__sfputs_r+0x22>
 80075dc:	463a      	mov	r2, r7
 80075de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e2:	4630      	mov	r0, r6
 80075e4:	f7ff ffda 	bl	800759c <__sfputc_r>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	d1f3      	bne.n	80075d4 <__sfputs_r+0xa>
 80075ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075f0 <_vfiprintf_r>:
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	460c      	mov	r4, r1
 80075f6:	b09d      	sub	sp, #116	; 0x74
 80075f8:	4617      	mov	r7, r2
 80075fa:	461d      	mov	r5, r3
 80075fc:	4606      	mov	r6, r0
 80075fe:	b118      	cbz	r0, 8007608 <_vfiprintf_r+0x18>
 8007600:	6983      	ldr	r3, [r0, #24]
 8007602:	b90b      	cbnz	r3, 8007608 <_vfiprintf_r+0x18>
 8007604:	f7ff fd94 	bl	8007130 <__sinit>
 8007608:	4b7c      	ldr	r3, [pc, #496]	; (80077fc <_vfiprintf_r+0x20c>)
 800760a:	429c      	cmp	r4, r3
 800760c:	d158      	bne.n	80076c0 <_vfiprintf_r+0xd0>
 800760e:	6874      	ldr	r4, [r6, #4]
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	0718      	lsls	r0, r3, #28
 8007614:	d55e      	bpl.n	80076d4 <_vfiprintf_r+0xe4>
 8007616:	6923      	ldr	r3, [r4, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d05b      	beq.n	80076d4 <_vfiprintf_r+0xe4>
 800761c:	2300      	movs	r3, #0
 800761e:	9309      	str	r3, [sp, #36]	; 0x24
 8007620:	2320      	movs	r3, #32
 8007622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007626:	2330      	movs	r3, #48	; 0x30
 8007628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800762c:	9503      	str	r5, [sp, #12]
 800762e:	f04f 0b01 	mov.w	fp, #1
 8007632:	46b8      	mov	r8, r7
 8007634:	4645      	mov	r5, r8
 8007636:	f815 3b01 	ldrb.w	r3, [r5], #1
 800763a:	b10b      	cbz	r3, 8007640 <_vfiprintf_r+0x50>
 800763c:	2b25      	cmp	r3, #37	; 0x25
 800763e:	d154      	bne.n	80076ea <_vfiprintf_r+0xfa>
 8007640:	ebb8 0a07 	subs.w	sl, r8, r7
 8007644:	d00b      	beq.n	800765e <_vfiprintf_r+0x6e>
 8007646:	4653      	mov	r3, sl
 8007648:	463a      	mov	r2, r7
 800764a:	4621      	mov	r1, r4
 800764c:	4630      	mov	r0, r6
 800764e:	f7ff ffbc 	bl	80075ca <__sfputs_r>
 8007652:	3001      	adds	r0, #1
 8007654:	f000 80c2 	beq.w	80077dc <_vfiprintf_r+0x1ec>
 8007658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800765a:	4453      	add	r3, sl
 800765c:	9309      	str	r3, [sp, #36]	; 0x24
 800765e:	f898 3000 	ldrb.w	r3, [r8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 80ba 	beq.w	80077dc <_vfiprintf_r+0x1ec>
 8007668:	2300      	movs	r3, #0
 800766a:	f04f 32ff 	mov.w	r2, #4294967295
 800766e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007672:	9304      	str	r3, [sp, #16]
 8007674:	9307      	str	r3, [sp, #28]
 8007676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800767a:	931a      	str	r3, [sp, #104]	; 0x68
 800767c:	46a8      	mov	r8, r5
 800767e:	2205      	movs	r2, #5
 8007680:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007684:	485e      	ldr	r0, [pc, #376]	; (8007800 <_vfiprintf_r+0x210>)
 8007686:	f7f8 fdab 	bl	80001e0 <memchr>
 800768a:	9b04      	ldr	r3, [sp, #16]
 800768c:	bb78      	cbnz	r0, 80076ee <_vfiprintf_r+0xfe>
 800768e:	06d9      	lsls	r1, r3, #27
 8007690:	bf44      	itt	mi
 8007692:	2220      	movmi	r2, #32
 8007694:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007698:	071a      	lsls	r2, r3, #28
 800769a:	bf44      	itt	mi
 800769c:	222b      	movmi	r2, #43	; 0x2b
 800769e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076a2:	782a      	ldrb	r2, [r5, #0]
 80076a4:	2a2a      	cmp	r2, #42	; 0x2a
 80076a6:	d02a      	beq.n	80076fe <_vfiprintf_r+0x10e>
 80076a8:	9a07      	ldr	r2, [sp, #28]
 80076aa:	46a8      	mov	r8, r5
 80076ac:	2000      	movs	r0, #0
 80076ae:	250a      	movs	r5, #10
 80076b0:	4641      	mov	r1, r8
 80076b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076b6:	3b30      	subs	r3, #48	; 0x30
 80076b8:	2b09      	cmp	r3, #9
 80076ba:	d969      	bls.n	8007790 <_vfiprintf_r+0x1a0>
 80076bc:	b360      	cbz	r0, 8007718 <_vfiprintf_r+0x128>
 80076be:	e024      	b.n	800770a <_vfiprintf_r+0x11a>
 80076c0:	4b50      	ldr	r3, [pc, #320]	; (8007804 <_vfiprintf_r+0x214>)
 80076c2:	429c      	cmp	r4, r3
 80076c4:	d101      	bne.n	80076ca <_vfiprintf_r+0xda>
 80076c6:	68b4      	ldr	r4, [r6, #8]
 80076c8:	e7a2      	b.n	8007610 <_vfiprintf_r+0x20>
 80076ca:	4b4f      	ldr	r3, [pc, #316]	; (8007808 <_vfiprintf_r+0x218>)
 80076cc:	429c      	cmp	r4, r3
 80076ce:	bf08      	it	eq
 80076d0:	68f4      	ldreq	r4, [r6, #12]
 80076d2:	e79d      	b.n	8007610 <_vfiprintf_r+0x20>
 80076d4:	4621      	mov	r1, r4
 80076d6:	4630      	mov	r0, r6
 80076d8:	f000 fae0 	bl	8007c9c <__swsetup_r>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d09d      	beq.n	800761c <_vfiprintf_r+0x2c>
 80076e0:	f04f 30ff 	mov.w	r0, #4294967295
 80076e4:	b01d      	add	sp, #116	; 0x74
 80076e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ea:	46a8      	mov	r8, r5
 80076ec:	e7a2      	b.n	8007634 <_vfiprintf_r+0x44>
 80076ee:	4a44      	ldr	r2, [pc, #272]	; (8007800 <_vfiprintf_r+0x210>)
 80076f0:	1a80      	subs	r0, r0, r2
 80076f2:	fa0b f000 	lsl.w	r0, fp, r0
 80076f6:	4318      	orrs	r0, r3
 80076f8:	9004      	str	r0, [sp, #16]
 80076fa:	4645      	mov	r5, r8
 80076fc:	e7be      	b.n	800767c <_vfiprintf_r+0x8c>
 80076fe:	9a03      	ldr	r2, [sp, #12]
 8007700:	1d11      	adds	r1, r2, #4
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	9103      	str	r1, [sp, #12]
 8007706:	2a00      	cmp	r2, #0
 8007708:	db01      	blt.n	800770e <_vfiprintf_r+0x11e>
 800770a:	9207      	str	r2, [sp, #28]
 800770c:	e004      	b.n	8007718 <_vfiprintf_r+0x128>
 800770e:	4252      	negs	r2, r2
 8007710:	f043 0302 	orr.w	r3, r3, #2
 8007714:	9207      	str	r2, [sp, #28]
 8007716:	9304      	str	r3, [sp, #16]
 8007718:	f898 3000 	ldrb.w	r3, [r8]
 800771c:	2b2e      	cmp	r3, #46	; 0x2e
 800771e:	d10e      	bne.n	800773e <_vfiprintf_r+0x14e>
 8007720:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007724:	2b2a      	cmp	r3, #42	; 0x2a
 8007726:	d138      	bne.n	800779a <_vfiprintf_r+0x1aa>
 8007728:	9b03      	ldr	r3, [sp, #12]
 800772a:	1d1a      	adds	r2, r3, #4
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	9203      	str	r2, [sp, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	bfb8      	it	lt
 8007734:	f04f 33ff 	movlt.w	r3, #4294967295
 8007738:	f108 0802 	add.w	r8, r8, #2
 800773c:	9305      	str	r3, [sp, #20]
 800773e:	4d33      	ldr	r5, [pc, #204]	; (800780c <_vfiprintf_r+0x21c>)
 8007740:	f898 1000 	ldrb.w	r1, [r8]
 8007744:	2203      	movs	r2, #3
 8007746:	4628      	mov	r0, r5
 8007748:	f7f8 fd4a 	bl	80001e0 <memchr>
 800774c:	b140      	cbz	r0, 8007760 <_vfiprintf_r+0x170>
 800774e:	2340      	movs	r3, #64	; 0x40
 8007750:	1b40      	subs	r0, r0, r5
 8007752:	fa03 f000 	lsl.w	r0, r3, r0
 8007756:	9b04      	ldr	r3, [sp, #16]
 8007758:	4303      	orrs	r3, r0
 800775a:	f108 0801 	add.w	r8, r8, #1
 800775e:	9304      	str	r3, [sp, #16]
 8007760:	f898 1000 	ldrb.w	r1, [r8]
 8007764:	482a      	ldr	r0, [pc, #168]	; (8007810 <_vfiprintf_r+0x220>)
 8007766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800776a:	2206      	movs	r2, #6
 800776c:	f108 0701 	add.w	r7, r8, #1
 8007770:	f7f8 fd36 	bl	80001e0 <memchr>
 8007774:	2800      	cmp	r0, #0
 8007776:	d037      	beq.n	80077e8 <_vfiprintf_r+0x1f8>
 8007778:	4b26      	ldr	r3, [pc, #152]	; (8007814 <_vfiprintf_r+0x224>)
 800777a:	bb1b      	cbnz	r3, 80077c4 <_vfiprintf_r+0x1d4>
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	3307      	adds	r3, #7
 8007780:	f023 0307 	bic.w	r3, r3, #7
 8007784:	3308      	adds	r3, #8
 8007786:	9303      	str	r3, [sp, #12]
 8007788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800778a:	444b      	add	r3, r9
 800778c:	9309      	str	r3, [sp, #36]	; 0x24
 800778e:	e750      	b.n	8007632 <_vfiprintf_r+0x42>
 8007790:	fb05 3202 	mla	r2, r5, r2, r3
 8007794:	2001      	movs	r0, #1
 8007796:	4688      	mov	r8, r1
 8007798:	e78a      	b.n	80076b0 <_vfiprintf_r+0xc0>
 800779a:	2300      	movs	r3, #0
 800779c:	f108 0801 	add.w	r8, r8, #1
 80077a0:	9305      	str	r3, [sp, #20]
 80077a2:	4619      	mov	r1, r3
 80077a4:	250a      	movs	r5, #10
 80077a6:	4640      	mov	r0, r8
 80077a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ac:	3a30      	subs	r2, #48	; 0x30
 80077ae:	2a09      	cmp	r2, #9
 80077b0:	d903      	bls.n	80077ba <_vfiprintf_r+0x1ca>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0c3      	beq.n	800773e <_vfiprintf_r+0x14e>
 80077b6:	9105      	str	r1, [sp, #20]
 80077b8:	e7c1      	b.n	800773e <_vfiprintf_r+0x14e>
 80077ba:	fb05 2101 	mla	r1, r5, r1, r2
 80077be:	2301      	movs	r3, #1
 80077c0:	4680      	mov	r8, r0
 80077c2:	e7f0      	b.n	80077a6 <_vfiprintf_r+0x1b6>
 80077c4:	ab03      	add	r3, sp, #12
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	4622      	mov	r2, r4
 80077ca:	4b13      	ldr	r3, [pc, #76]	; (8007818 <_vfiprintf_r+0x228>)
 80077cc:	a904      	add	r1, sp, #16
 80077ce:	4630      	mov	r0, r6
 80077d0:	f3af 8000 	nop.w
 80077d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80077d8:	4681      	mov	r9, r0
 80077da:	d1d5      	bne.n	8007788 <_vfiprintf_r+0x198>
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	065b      	lsls	r3, r3, #25
 80077e0:	f53f af7e 	bmi.w	80076e0 <_vfiprintf_r+0xf0>
 80077e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077e6:	e77d      	b.n	80076e4 <_vfiprintf_r+0xf4>
 80077e8:	ab03      	add	r3, sp, #12
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	4622      	mov	r2, r4
 80077ee:	4b0a      	ldr	r3, [pc, #40]	; (8007818 <_vfiprintf_r+0x228>)
 80077f0:	a904      	add	r1, sp, #16
 80077f2:	4630      	mov	r0, r6
 80077f4:	f000 f888 	bl	8007908 <_printf_i>
 80077f8:	e7ec      	b.n	80077d4 <_vfiprintf_r+0x1e4>
 80077fa:	bf00      	nop
 80077fc:	08026350 	.word	0x08026350
 8007800:	08026390 	.word	0x08026390
 8007804:	08026370 	.word	0x08026370
 8007808:	08026330 	.word	0x08026330
 800780c:	08026396 	.word	0x08026396
 8007810:	0802639a 	.word	0x0802639a
 8007814:	00000000 	.word	0x00000000
 8007818:	080075cb 	.word	0x080075cb

0800781c <_printf_common>:
 800781c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007820:	4691      	mov	r9, r2
 8007822:	461f      	mov	r7, r3
 8007824:	688a      	ldr	r2, [r1, #8]
 8007826:	690b      	ldr	r3, [r1, #16]
 8007828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800782c:	4293      	cmp	r3, r2
 800782e:	bfb8      	it	lt
 8007830:	4613      	movlt	r3, r2
 8007832:	f8c9 3000 	str.w	r3, [r9]
 8007836:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800783a:	4606      	mov	r6, r0
 800783c:	460c      	mov	r4, r1
 800783e:	b112      	cbz	r2, 8007846 <_printf_common+0x2a>
 8007840:	3301      	adds	r3, #1
 8007842:	f8c9 3000 	str.w	r3, [r9]
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	0699      	lsls	r1, r3, #26
 800784a:	bf42      	ittt	mi
 800784c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007850:	3302      	addmi	r3, #2
 8007852:	f8c9 3000 	strmi.w	r3, [r9]
 8007856:	6825      	ldr	r5, [r4, #0]
 8007858:	f015 0506 	ands.w	r5, r5, #6
 800785c:	d107      	bne.n	800786e <_printf_common+0x52>
 800785e:	f104 0a19 	add.w	sl, r4, #25
 8007862:	68e3      	ldr	r3, [r4, #12]
 8007864:	f8d9 2000 	ldr.w	r2, [r9]
 8007868:	1a9b      	subs	r3, r3, r2
 800786a:	42ab      	cmp	r3, r5
 800786c:	dc28      	bgt.n	80078c0 <_printf_common+0xa4>
 800786e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007872:	6822      	ldr	r2, [r4, #0]
 8007874:	3300      	adds	r3, #0
 8007876:	bf18      	it	ne
 8007878:	2301      	movne	r3, #1
 800787a:	0692      	lsls	r2, r2, #26
 800787c:	d42d      	bmi.n	80078da <_printf_common+0xbe>
 800787e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007882:	4639      	mov	r1, r7
 8007884:	4630      	mov	r0, r6
 8007886:	47c0      	blx	r8
 8007888:	3001      	adds	r0, #1
 800788a:	d020      	beq.n	80078ce <_printf_common+0xb2>
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	68e5      	ldr	r5, [r4, #12]
 8007890:	f8d9 2000 	ldr.w	r2, [r9]
 8007894:	f003 0306 	and.w	r3, r3, #6
 8007898:	2b04      	cmp	r3, #4
 800789a:	bf08      	it	eq
 800789c:	1aad      	subeq	r5, r5, r2
 800789e:	68a3      	ldr	r3, [r4, #8]
 80078a0:	6922      	ldr	r2, [r4, #16]
 80078a2:	bf0c      	ite	eq
 80078a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078a8:	2500      	movne	r5, #0
 80078aa:	4293      	cmp	r3, r2
 80078ac:	bfc4      	itt	gt
 80078ae:	1a9b      	subgt	r3, r3, r2
 80078b0:	18ed      	addgt	r5, r5, r3
 80078b2:	f04f 0900 	mov.w	r9, #0
 80078b6:	341a      	adds	r4, #26
 80078b8:	454d      	cmp	r5, r9
 80078ba:	d11a      	bne.n	80078f2 <_printf_common+0xd6>
 80078bc:	2000      	movs	r0, #0
 80078be:	e008      	b.n	80078d2 <_printf_common+0xb6>
 80078c0:	2301      	movs	r3, #1
 80078c2:	4652      	mov	r2, sl
 80078c4:	4639      	mov	r1, r7
 80078c6:	4630      	mov	r0, r6
 80078c8:	47c0      	blx	r8
 80078ca:	3001      	adds	r0, #1
 80078cc:	d103      	bne.n	80078d6 <_printf_common+0xba>
 80078ce:	f04f 30ff 	mov.w	r0, #4294967295
 80078d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d6:	3501      	adds	r5, #1
 80078d8:	e7c3      	b.n	8007862 <_printf_common+0x46>
 80078da:	18e1      	adds	r1, r4, r3
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	2030      	movs	r0, #48	; 0x30
 80078e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078e4:	4422      	add	r2, r4
 80078e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078ee:	3302      	adds	r3, #2
 80078f0:	e7c5      	b.n	800787e <_printf_common+0x62>
 80078f2:	2301      	movs	r3, #1
 80078f4:	4622      	mov	r2, r4
 80078f6:	4639      	mov	r1, r7
 80078f8:	4630      	mov	r0, r6
 80078fa:	47c0      	blx	r8
 80078fc:	3001      	adds	r0, #1
 80078fe:	d0e6      	beq.n	80078ce <_printf_common+0xb2>
 8007900:	f109 0901 	add.w	r9, r9, #1
 8007904:	e7d8      	b.n	80078b8 <_printf_common+0x9c>
	...

08007908 <_printf_i>:
 8007908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800790c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007910:	460c      	mov	r4, r1
 8007912:	7e09      	ldrb	r1, [r1, #24]
 8007914:	b085      	sub	sp, #20
 8007916:	296e      	cmp	r1, #110	; 0x6e
 8007918:	4617      	mov	r7, r2
 800791a:	4606      	mov	r6, r0
 800791c:	4698      	mov	r8, r3
 800791e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007920:	f000 80b3 	beq.w	8007a8a <_printf_i+0x182>
 8007924:	d822      	bhi.n	800796c <_printf_i+0x64>
 8007926:	2963      	cmp	r1, #99	; 0x63
 8007928:	d036      	beq.n	8007998 <_printf_i+0x90>
 800792a:	d80a      	bhi.n	8007942 <_printf_i+0x3a>
 800792c:	2900      	cmp	r1, #0
 800792e:	f000 80b9 	beq.w	8007aa4 <_printf_i+0x19c>
 8007932:	2958      	cmp	r1, #88	; 0x58
 8007934:	f000 8083 	beq.w	8007a3e <_printf_i+0x136>
 8007938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800793c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007940:	e032      	b.n	80079a8 <_printf_i+0xa0>
 8007942:	2964      	cmp	r1, #100	; 0x64
 8007944:	d001      	beq.n	800794a <_printf_i+0x42>
 8007946:	2969      	cmp	r1, #105	; 0x69
 8007948:	d1f6      	bne.n	8007938 <_printf_i+0x30>
 800794a:	6820      	ldr	r0, [r4, #0]
 800794c:	6813      	ldr	r3, [r2, #0]
 800794e:	0605      	lsls	r5, r0, #24
 8007950:	f103 0104 	add.w	r1, r3, #4
 8007954:	d52a      	bpl.n	80079ac <_printf_i+0xa4>
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6011      	str	r1, [r2, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	da03      	bge.n	8007966 <_printf_i+0x5e>
 800795e:	222d      	movs	r2, #45	; 0x2d
 8007960:	425b      	negs	r3, r3
 8007962:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007966:	486f      	ldr	r0, [pc, #444]	; (8007b24 <_printf_i+0x21c>)
 8007968:	220a      	movs	r2, #10
 800796a:	e039      	b.n	80079e0 <_printf_i+0xd8>
 800796c:	2973      	cmp	r1, #115	; 0x73
 800796e:	f000 809d 	beq.w	8007aac <_printf_i+0x1a4>
 8007972:	d808      	bhi.n	8007986 <_printf_i+0x7e>
 8007974:	296f      	cmp	r1, #111	; 0x6f
 8007976:	d020      	beq.n	80079ba <_printf_i+0xb2>
 8007978:	2970      	cmp	r1, #112	; 0x70
 800797a:	d1dd      	bne.n	8007938 <_printf_i+0x30>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	f043 0320 	orr.w	r3, r3, #32
 8007982:	6023      	str	r3, [r4, #0]
 8007984:	e003      	b.n	800798e <_printf_i+0x86>
 8007986:	2975      	cmp	r1, #117	; 0x75
 8007988:	d017      	beq.n	80079ba <_printf_i+0xb2>
 800798a:	2978      	cmp	r1, #120	; 0x78
 800798c:	d1d4      	bne.n	8007938 <_printf_i+0x30>
 800798e:	2378      	movs	r3, #120	; 0x78
 8007990:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007994:	4864      	ldr	r0, [pc, #400]	; (8007b28 <_printf_i+0x220>)
 8007996:	e055      	b.n	8007a44 <_printf_i+0x13c>
 8007998:	6813      	ldr	r3, [r2, #0]
 800799a:	1d19      	adds	r1, r3, #4
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6011      	str	r1, [r2, #0]
 80079a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079a8:	2301      	movs	r3, #1
 80079aa:	e08c      	b.n	8007ac6 <_printf_i+0x1be>
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6011      	str	r1, [r2, #0]
 80079b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079b4:	bf18      	it	ne
 80079b6:	b21b      	sxthne	r3, r3
 80079b8:	e7cf      	b.n	800795a <_printf_i+0x52>
 80079ba:	6813      	ldr	r3, [r2, #0]
 80079bc:	6825      	ldr	r5, [r4, #0]
 80079be:	1d18      	adds	r0, r3, #4
 80079c0:	6010      	str	r0, [r2, #0]
 80079c2:	0628      	lsls	r0, r5, #24
 80079c4:	d501      	bpl.n	80079ca <_printf_i+0xc2>
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	e002      	b.n	80079d0 <_printf_i+0xc8>
 80079ca:	0668      	lsls	r0, r5, #25
 80079cc:	d5fb      	bpl.n	80079c6 <_printf_i+0xbe>
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	4854      	ldr	r0, [pc, #336]	; (8007b24 <_printf_i+0x21c>)
 80079d2:	296f      	cmp	r1, #111	; 0x6f
 80079d4:	bf14      	ite	ne
 80079d6:	220a      	movne	r2, #10
 80079d8:	2208      	moveq	r2, #8
 80079da:	2100      	movs	r1, #0
 80079dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079e0:	6865      	ldr	r5, [r4, #4]
 80079e2:	60a5      	str	r5, [r4, #8]
 80079e4:	2d00      	cmp	r5, #0
 80079e6:	f2c0 8095 	blt.w	8007b14 <_printf_i+0x20c>
 80079ea:	6821      	ldr	r1, [r4, #0]
 80079ec:	f021 0104 	bic.w	r1, r1, #4
 80079f0:	6021      	str	r1, [r4, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d13d      	bne.n	8007a72 <_printf_i+0x16a>
 80079f6:	2d00      	cmp	r5, #0
 80079f8:	f040 808e 	bne.w	8007b18 <_printf_i+0x210>
 80079fc:	4665      	mov	r5, ip
 80079fe:	2a08      	cmp	r2, #8
 8007a00:	d10b      	bne.n	8007a1a <_printf_i+0x112>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	07db      	lsls	r3, r3, #31
 8007a06:	d508      	bpl.n	8007a1a <_printf_i+0x112>
 8007a08:	6923      	ldr	r3, [r4, #16]
 8007a0a:	6862      	ldr	r2, [r4, #4]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	bfde      	ittt	le
 8007a10:	2330      	movle	r3, #48	; 0x30
 8007a12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a1a:	ebac 0305 	sub.w	r3, ip, r5
 8007a1e:	6123      	str	r3, [r4, #16]
 8007a20:	f8cd 8000 	str.w	r8, [sp]
 8007a24:	463b      	mov	r3, r7
 8007a26:	aa03      	add	r2, sp, #12
 8007a28:	4621      	mov	r1, r4
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	f7ff fef6 	bl	800781c <_printf_common>
 8007a30:	3001      	adds	r0, #1
 8007a32:	d14d      	bne.n	8007ad0 <_printf_i+0x1c8>
 8007a34:	f04f 30ff 	mov.w	r0, #4294967295
 8007a38:	b005      	add	sp, #20
 8007a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a3e:	4839      	ldr	r0, [pc, #228]	; (8007b24 <_printf_i+0x21c>)
 8007a40:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007a44:	6813      	ldr	r3, [r2, #0]
 8007a46:	6821      	ldr	r1, [r4, #0]
 8007a48:	1d1d      	adds	r5, r3, #4
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6015      	str	r5, [r2, #0]
 8007a4e:	060a      	lsls	r2, r1, #24
 8007a50:	d50b      	bpl.n	8007a6a <_printf_i+0x162>
 8007a52:	07ca      	lsls	r2, r1, #31
 8007a54:	bf44      	itt	mi
 8007a56:	f041 0120 	orrmi.w	r1, r1, #32
 8007a5a:	6021      	strmi	r1, [r4, #0]
 8007a5c:	b91b      	cbnz	r3, 8007a66 <_printf_i+0x15e>
 8007a5e:	6822      	ldr	r2, [r4, #0]
 8007a60:	f022 0220 	bic.w	r2, r2, #32
 8007a64:	6022      	str	r2, [r4, #0]
 8007a66:	2210      	movs	r2, #16
 8007a68:	e7b7      	b.n	80079da <_printf_i+0xd2>
 8007a6a:	064d      	lsls	r5, r1, #25
 8007a6c:	bf48      	it	mi
 8007a6e:	b29b      	uxthmi	r3, r3
 8007a70:	e7ef      	b.n	8007a52 <_printf_i+0x14a>
 8007a72:	4665      	mov	r5, ip
 8007a74:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a78:	fb02 3311 	mls	r3, r2, r1, r3
 8007a7c:	5cc3      	ldrb	r3, [r0, r3]
 8007a7e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007a82:	460b      	mov	r3, r1
 8007a84:	2900      	cmp	r1, #0
 8007a86:	d1f5      	bne.n	8007a74 <_printf_i+0x16c>
 8007a88:	e7b9      	b.n	80079fe <_printf_i+0xf6>
 8007a8a:	6813      	ldr	r3, [r2, #0]
 8007a8c:	6825      	ldr	r5, [r4, #0]
 8007a8e:	6961      	ldr	r1, [r4, #20]
 8007a90:	1d18      	adds	r0, r3, #4
 8007a92:	6010      	str	r0, [r2, #0]
 8007a94:	0628      	lsls	r0, r5, #24
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	d501      	bpl.n	8007a9e <_printf_i+0x196>
 8007a9a:	6019      	str	r1, [r3, #0]
 8007a9c:	e002      	b.n	8007aa4 <_printf_i+0x19c>
 8007a9e:	066a      	lsls	r2, r5, #25
 8007aa0:	d5fb      	bpl.n	8007a9a <_printf_i+0x192>
 8007aa2:	8019      	strh	r1, [r3, #0]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	6123      	str	r3, [r4, #16]
 8007aa8:	4665      	mov	r5, ip
 8007aaa:	e7b9      	b.n	8007a20 <_printf_i+0x118>
 8007aac:	6813      	ldr	r3, [r2, #0]
 8007aae:	1d19      	adds	r1, r3, #4
 8007ab0:	6011      	str	r1, [r2, #0]
 8007ab2:	681d      	ldr	r5, [r3, #0]
 8007ab4:	6862      	ldr	r2, [r4, #4]
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f7f8 fb91 	bl	80001e0 <memchr>
 8007abe:	b108      	cbz	r0, 8007ac4 <_printf_i+0x1bc>
 8007ac0:	1b40      	subs	r0, r0, r5
 8007ac2:	6060      	str	r0, [r4, #4]
 8007ac4:	6863      	ldr	r3, [r4, #4]
 8007ac6:	6123      	str	r3, [r4, #16]
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ace:	e7a7      	b.n	8007a20 <_printf_i+0x118>
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	462a      	mov	r2, r5
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	47c0      	blx	r8
 8007ada:	3001      	adds	r0, #1
 8007adc:	d0aa      	beq.n	8007a34 <_printf_i+0x12c>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	079b      	lsls	r3, r3, #30
 8007ae2:	d413      	bmi.n	8007b0c <_printf_i+0x204>
 8007ae4:	68e0      	ldr	r0, [r4, #12]
 8007ae6:	9b03      	ldr	r3, [sp, #12]
 8007ae8:	4298      	cmp	r0, r3
 8007aea:	bfb8      	it	lt
 8007aec:	4618      	movlt	r0, r3
 8007aee:	e7a3      	b.n	8007a38 <_printf_i+0x130>
 8007af0:	2301      	movs	r3, #1
 8007af2:	464a      	mov	r2, r9
 8007af4:	4639      	mov	r1, r7
 8007af6:	4630      	mov	r0, r6
 8007af8:	47c0      	blx	r8
 8007afa:	3001      	adds	r0, #1
 8007afc:	d09a      	beq.n	8007a34 <_printf_i+0x12c>
 8007afe:	3501      	adds	r5, #1
 8007b00:	68e3      	ldr	r3, [r4, #12]
 8007b02:	9a03      	ldr	r2, [sp, #12]
 8007b04:	1a9b      	subs	r3, r3, r2
 8007b06:	42ab      	cmp	r3, r5
 8007b08:	dcf2      	bgt.n	8007af0 <_printf_i+0x1e8>
 8007b0a:	e7eb      	b.n	8007ae4 <_printf_i+0x1dc>
 8007b0c:	2500      	movs	r5, #0
 8007b0e:	f104 0919 	add.w	r9, r4, #25
 8007b12:	e7f5      	b.n	8007b00 <_printf_i+0x1f8>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1ac      	bne.n	8007a72 <_printf_i+0x16a>
 8007b18:	7803      	ldrb	r3, [r0, #0]
 8007b1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b22:	e76c      	b.n	80079fe <_printf_i+0xf6>
 8007b24:	080263a1 	.word	0x080263a1
 8007b28:	080263b2 	.word	0x080263b2

08007b2c <_sbrk_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4c06      	ldr	r4, [pc, #24]	; (8007b48 <_sbrk_r+0x1c>)
 8007b30:	2300      	movs	r3, #0
 8007b32:	4605      	mov	r5, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	6023      	str	r3, [r4, #0]
 8007b38:	f7fb ffaa 	bl	8003a90 <_sbrk>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d102      	bne.n	8007b46 <_sbrk_r+0x1a>
 8007b40:	6823      	ldr	r3, [r4, #0]
 8007b42:	b103      	cbz	r3, 8007b46 <_sbrk_r+0x1a>
 8007b44:	602b      	str	r3, [r5, #0]
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	200005e4 	.word	0x200005e4

08007b4c <__sread>:
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	460c      	mov	r4, r1
 8007b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b54:	f000 fae0 	bl	8008118 <_read_r>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	bfab      	itete	ge
 8007b5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b60:	181b      	addge	r3, r3, r0
 8007b62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b66:	bfac      	ite	ge
 8007b68:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b6a:	81a3      	strhlt	r3, [r4, #12]
 8007b6c:	bd10      	pop	{r4, pc}

08007b6e <__swrite>:
 8007b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b72:	461f      	mov	r7, r3
 8007b74:	898b      	ldrh	r3, [r1, #12]
 8007b76:	05db      	lsls	r3, r3, #23
 8007b78:	4605      	mov	r5, r0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	4616      	mov	r6, r2
 8007b7e:	d505      	bpl.n	8007b8c <__swrite+0x1e>
 8007b80:	2302      	movs	r3, #2
 8007b82:	2200      	movs	r2, #0
 8007b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b88:	f000 f9b6 	bl	8007ef8 <_lseek_r>
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b96:	81a3      	strh	r3, [r4, #12]
 8007b98:	4632      	mov	r2, r6
 8007b9a:	463b      	mov	r3, r7
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba2:	f000 b869 	b.w	8007c78 <_write_r>

08007ba6 <__sseek>:
 8007ba6:	b510      	push	{r4, lr}
 8007ba8:	460c      	mov	r4, r1
 8007baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bae:	f000 f9a3 	bl	8007ef8 <_lseek_r>
 8007bb2:	1c43      	adds	r3, r0, #1
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	bf15      	itete	ne
 8007bb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bc2:	81a3      	strheq	r3, [r4, #12]
 8007bc4:	bf18      	it	ne
 8007bc6:	81a3      	strhne	r3, [r4, #12]
 8007bc8:	bd10      	pop	{r4, pc}

08007bca <__sclose>:
 8007bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bce:	f000 b8d3 	b.w	8007d78 <_close_r>
	...

08007bd4 <__swbuf_r>:
 8007bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd6:	460e      	mov	r6, r1
 8007bd8:	4614      	mov	r4, r2
 8007bda:	4605      	mov	r5, r0
 8007bdc:	b118      	cbz	r0, 8007be6 <__swbuf_r+0x12>
 8007bde:	6983      	ldr	r3, [r0, #24]
 8007be0:	b90b      	cbnz	r3, 8007be6 <__swbuf_r+0x12>
 8007be2:	f7ff faa5 	bl	8007130 <__sinit>
 8007be6:	4b21      	ldr	r3, [pc, #132]	; (8007c6c <__swbuf_r+0x98>)
 8007be8:	429c      	cmp	r4, r3
 8007bea:	d12a      	bne.n	8007c42 <__swbuf_r+0x6e>
 8007bec:	686c      	ldr	r4, [r5, #4]
 8007bee:	69a3      	ldr	r3, [r4, #24]
 8007bf0:	60a3      	str	r3, [r4, #8]
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	071a      	lsls	r2, r3, #28
 8007bf6:	d52e      	bpl.n	8007c56 <__swbuf_r+0x82>
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	b363      	cbz	r3, 8007c56 <__swbuf_r+0x82>
 8007bfc:	6923      	ldr	r3, [r4, #16]
 8007bfe:	6820      	ldr	r0, [r4, #0]
 8007c00:	1ac0      	subs	r0, r0, r3
 8007c02:	6963      	ldr	r3, [r4, #20]
 8007c04:	b2f6      	uxtb	r6, r6
 8007c06:	4283      	cmp	r3, r0
 8007c08:	4637      	mov	r7, r6
 8007c0a:	dc04      	bgt.n	8007c16 <__swbuf_r+0x42>
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f000 f948 	bl	8007ea4 <_fflush_r>
 8007c14:	bb28      	cbnz	r0, 8007c62 <__swbuf_r+0x8e>
 8007c16:	68a3      	ldr	r3, [r4, #8]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	60a3      	str	r3, [r4, #8]
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	6022      	str	r2, [r4, #0]
 8007c22:	701e      	strb	r6, [r3, #0]
 8007c24:	6963      	ldr	r3, [r4, #20]
 8007c26:	3001      	adds	r0, #1
 8007c28:	4283      	cmp	r3, r0
 8007c2a:	d004      	beq.n	8007c36 <__swbuf_r+0x62>
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	07db      	lsls	r3, r3, #31
 8007c30:	d519      	bpl.n	8007c66 <__swbuf_r+0x92>
 8007c32:	2e0a      	cmp	r6, #10
 8007c34:	d117      	bne.n	8007c66 <__swbuf_r+0x92>
 8007c36:	4621      	mov	r1, r4
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f000 f933 	bl	8007ea4 <_fflush_r>
 8007c3e:	b190      	cbz	r0, 8007c66 <__swbuf_r+0x92>
 8007c40:	e00f      	b.n	8007c62 <__swbuf_r+0x8e>
 8007c42:	4b0b      	ldr	r3, [pc, #44]	; (8007c70 <__swbuf_r+0x9c>)
 8007c44:	429c      	cmp	r4, r3
 8007c46:	d101      	bne.n	8007c4c <__swbuf_r+0x78>
 8007c48:	68ac      	ldr	r4, [r5, #8]
 8007c4a:	e7d0      	b.n	8007bee <__swbuf_r+0x1a>
 8007c4c:	4b09      	ldr	r3, [pc, #36]	; (8007c74 <__swbuf_r+0xa0>)
 8007c4e:	429c      	cmp	r4, r3
 8007c50:	bf08      	it	eq
 8007c52:	68ec      	ldreq	r4, [r5, #12]
 8007c54:	e7cb      	b.n	8007bee <__swbuf_r+0x1a>
 8007c56:	4621      	mov	r1, r4
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f000 f81f 	bl	8007c9c <__swsetup_r>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d0cc      	beq.n	8007bfc <__swbuf_r+0x28>
 8007c62:	f04f 37ff 	mov.w	r7, #4294967295
 8007c66:	4638      	mov	r0, r7
 8007c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	08026350 	.word	0x08026350
 8007c70:	08026370 	.word	0x08026370
 8007c74:	08026330 	.word	0x08026330

08007c78 <_write_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4c07      	ldr	r4, [pc, #28]	; (8007c98 <_write_r+0x20>)
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	4608      	mov	r0, r1
 8007c80:	4611      	mov	r1, r2
 8007c82:	2200      	movs	r2, #0
 8007c84:	6022      	str	r2, [r4, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f7fb feb1 	bl	80039ee <_write>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_write_r+0x1e>
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_write_r+0x1e>
 8007c94:	602b      	str	r3, [r5, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	200005e4 	.word	0x200005e4

08007c9c <__swsetup_r>:
 8007c9c:	4b32      	ldr	r3, [pc, #200]	; (8007d68 <__swsetup_r+0xcc>)
 8007c9e:	b570      	push	{r4, r5, r6, lr}
 8007ca0:	681d      	ldr	r5, [r3, #0]
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	b125      	cbz	r5, 8007cb2 <__swsetup_r+0x16>
 8007ca8:	69ab      	ldr	r3, [r5, #24]
 8007caa:	b913      	cbnz	r3, 8007cb2 <__swsetup_r+0x16>
 8007cac:	4628      	mov	r0, r5
 8007cae:	f7ff fa3f 	bl	8007130 <__sinit>
 8007cb2:	4b2e      	ldr	r3, [pc, #184]	; (8007d6c <__swsetup_r+0xd0>)
 8007cb4:	429c      	cmp	r4, r3
 8007cb6:	d10f      	bne.n	8007cd8 <__swsetup_r+0x3c>
 8007cb8:	686c      	ldr	r4, [r5, #4]
 8007cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	0715      	lsls	r5, r2, #28
 8007cc2:	d42c      	bmi.n	8007d1e <__swsetup_r+0x82>
 8007cc4:	06d0      	lsls	r0, r2, #27
 8007cc6:	d411      	bmi.n	8007cec <__swsetup_r+0x50>
 8007cc8:	2209      	movs	r2, #9
 8007cca:	6032      	str	r2, [r6, #0]
 8007ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd0:	81a3      	strh	r3, [r4, #12]
 8007cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd6:	e03e      	b.n	8007d56 <__swsetup_r+0xba>
 8007cd8:	4b25      	ldr	r3, [pc, #148]	; (8007d70 <__swsetup_r+0xd4>)
 8007cda:	429c      	cmp	r4, r3
 8007cdc:	d101      	bne.n	8007ce2 <__swsetup_r+0x46>
 8007cde:	68ac      	ldr	r4, [r5, #8]
 8007ce0:	e7eb      	b.n	8007cba <__swsetup_r+0x1e>
 8007ce2:	4b24      	ldr	r3, [pc, #144]	; (8007d74 <__swsetup_r+0xd8>)
 8007ce4:	429c      	cmp	r4, r3
 8007ce6:	bf08      	it	eq
 8007ce8:	68ec      	ldreq	r4, [r5, #12]
 8007cea:	e7e6      	b.n	8007cba <__swsetup_r+0x1e>
 8007cec:	0751      	lsls	r1, r2, #29
 8007cee:	d512      	bpl.n	8007d16 <__swsetup_r+0x7a>
 8007cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cf2:	b141      	cbz	r1, 8007d06 <__swsetup_r+0x6a>
 8007cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cf8:	4299      	cmp	r1, r3
 8007cfa:	d002      	beq.n	8007d02 <__swsetup_r+0x66>
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	f000 f997 	bl	8008030 <_free_r>
 8007d02:	2300      	movs	r3, #0
 8007d04:	6363      	str	r3, [r4, #52]	; 0x34
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d0c:	81a3      	strh	r3, [r4, #12]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	6063      	str	r3, [r4, #4]
 8007d12:	6923      	ldr	r3, [r4, #16]
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	f043 0308 	orr.w	r3, r3, #8
 8007d1c:	81a3      	strh	r3, [r4, #12]
 8007d1e:	6923      	ldr	r3, [r4, #16]
 8007d20:	b94b      	cbnz	r3, 8007d36 <__swsetup_r+0x9a>
 8007d22:	89a3      	ldrh	r3, [r4, #12]
 8007d24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d2c:	d003      	beq.n	8007d36 <__swsetup_r+0x9a>
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4630      	mov	r0, r6
 8007d32:	f000 f917 	bl	8007f64 <__smakebuf_r>
 8007d36:	89a2      	ldrh	r2, [r4, #12]
 8007d38:	f012 0301 	ands.w	r3, r2, #1
 8007d3c:	d00c      	beq.n	8007d58 <__swsetup_r+0xbc>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60a3      	str	r3, [r4, #8]
 8007d42:	6963      	ldr	r3, [r4, #20]
 8007d44:	425b      	negs	r3, r3
 8007d46:	61a3      	str	r3, [r4, #24]
 8007d48:	6923      	ldr	r3, [r4, #16]
 8007d4a:	b953      	cbnz	r3, 8007d62 <__swsetup_r+0xc6>
 8007d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007d54:	d1ba      	bne.n	8007ccc <__swsetup_r+0x30>
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	0792      	lsls	r2, r2, #30
 8007d5a:	bf58      	it	pl
 8007d5c:	6963      	ldrpl	r3, [r4, #20]
 8007d5e:	60a3      	str	r3, [r4, #8]
 8007d60:	e7f2      	b.n	8007d48 <__swsetup_r+0xac>
 8007d62:	2000      	movs	r0, #0
 8007d64:	e7f7      	b.n	8007d56 <__swsetup_r+0xba>
 8007d66:	bf00      	nop
 8007d68:	20000064 	.word	0x20000064
 8007d6c:	08026350 	.word	0x08026350
 8007d70:	08026370 	.word	0x08026370
 8007d74:	08026330 	.word	0x08026330

08007d78 <_close_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4c06      	ldr	r4, [pc, #24]	; (8007d94 <_close_r+0x1c>)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4605      	mov	r5, r0
 8007d80:	4608      	mov	r0, r1
 8007d82:	6023      	str	r3, [r4, #0]
 8007d84:	f7fb fe4f 	bl	8003a26 <_close>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_close_r+0x1a>
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_close_r+0x1a>
 8007d90:	602b      	str	r3, [r5, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	200005e4 	.word	0x200005e4

08007d98 <__sflush_r>:
 8007d98:	898a      	ldrh	r2, [r1, #12]
 8007d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9e:	4605      	mov	r5, r0
 8007da0:	0710      	lsls	r0, r2, #28
 8007da2:	460c      	mov	r4, r1
 8007da4:	d458      	bmi.n	8007e58 <__sflush_r+0xc0>
 8007da6:	684b      	ldr	r3, [r1, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	dc05      	bgt.n	8007db8 <__sflush_r+0x20>
 8007dac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	dc02      	bgt.n	8007db8 <__sflush_r+0x20>
 8007db2:	2000      	movs	r0, #0
 8007db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dba:	2e00      	cmp	r6, #0
 8007dbc:	d0f9      	beq.n	8007db2 <__sflush_r+0x1a>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dc4:	682f      	ldr	r7, [r5, #0]
 8007dc6:	6a21      	ldr	r1, [r4, #32]
 8007dc8:	602b      	str	r3, [r5, #0]
 8007dca:	d032      	beq.n	8007e32 <__sflush_r+0x9a>
 8007dcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	075a      	lsls	r2, r3, #29
 8007dd2:	d505      	bpl.n	8007de0 <__sflush_r+0x48>
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	1ac0      	subs	r0, r0, r3
 8007dd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dda:	b10b      	cbz	r3, 8007de0 <__sflush_r+0x48>
 8007ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dde:	1ac0      	subs	r0, r0, r3
 8007de0:	2300      	movs	r3, #0
 8007de2:	4602      	mov	r2, r0
 8007de4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007de6:	6a21      	ldr	r1, [r4, #32]
 8007de8:	4628      	mov	r0, r5
 8007dea:	47b0      	blx	r6
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	d106      	bne.n	8007e00 <__sflush_r+0x68>
 8007df2:	6829      	ldr	r1, [r5, #0]
 8007df4:	291d      	cmp	r1, #29
 8007df6:	d848      	bhi.n	8007e8a <__sflush_r+0xf2>
 8007df8:	4a29      	ldr	r2, [pc, #164]	; (8007ea0 <__sflush_r+0x108>)
 8007dfa:	40ca      	lsrs	r2, r1
 8007dfc:	07d6      	lsls	r6, r2, #31
 8007dfe:	d544      	bpl.n	8007e8a <__sflush_r+0xf2>
 8007e00:	2200      	movs	r2, #0
 8007e02:	6062      	str	r2, [r4, #4]
 8007e04:	04d9      	lsls	r1, r3, #19
 8007e06:	6922      	ldr	r2, [r4, #16]
 8007e08:	6022      	str	r2, [r4, #0]
 8007e0a:	d504      	bpl.n	8007e16 <__sflush_r+0x7e>
 8007e0c:	1c42      	adds	r2, r0, #1
 8007e0e:	d101      	bne.n	8007e14 <__sflush_r+0x7c>
 8007e10:	682b      	ldr	r3, [r5, #0]
 8007e12:	b903      	cbnz	r3, 8007e16 <__sflush_r+0x7e>
 8007e14:	6560      	str	r0, [r4, #84]	; 0x54
 8007e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e18:	602f      	str	r7, [r5, #0]
 8007e1a:	2900      	cmp	r1, #0
 8007e1c:	d0c9      	beq.n	8007db2 <__sflush_r+0x1a>
 8007e1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e22:	4299      	cmp	r1, r3
 8007e24:	d002      	beq.n	8007e2c <__sflush_r+0x94>
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 f902 	bl	8008030 <_free_r>
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	6360      	str	r0, [r4, #52]	; 0x34
 8007e30:	e7c0      	b.n	8007db4 <__sflush_r+0x1c>
 8007e32:	2301      	movs	r3, #1
 8007e34:	4628      	mov	r0, r5
 8007e36:	47b0      	blx	r6
 8007e38:	1c41      	adds	r1, r0, #1
 8007e3a:	d1c8      	bne.n	8007dce <__sflush_r+0x36>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0c5      	beq.n	8007dce <__sflush_r+0x36>
 8007e42:	2b1d      	cmp	r3, #29
 8007e44:	d001      	beq.n	8007e4a <__sflush_r+0xb2>
 8007e46:	2b16      	cmp	r3, #22
 8007e48:	d101      	bne.n	8007e4e <__sflush_r+0xb6>
 8007e4a:	602f      	str	r7, [r5, #0]
 8007e4c:	e7b1      	b.n	8007db2 <__sflush_r+0x1a>
 8007e4e:	89a3      	ldrh	r3, [r4, #12]
 8007e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e54:	81a3      	strh	r3, [r4, #12]
 8007e56:	e7ad      	b.n	8007db4 <__sflush_r+0x1c>
 8007e58:	690f      	ldr	r7, [r1, #16]
 8007e5a:	2f00      	cmp	r7, #0
 8007e5c:	d0a9      	beq.n	8007db2 <__sflush_r+0x1a>
 8007e5e:	0793      	lsls	r3, r2, #30
 8007e60:	680e      	ldr	r6, [r1, #0]
 8007e62:	bf08      	it	eq
 8007e64:	694b      	ldreq	r3, [r1, #20]
 8007e66:	600f      	str	r7, [r1, #0]
 8007e68:	bf18      	it	ne
 8007e6a:	2300      	movne	r3, #0
 8007e6c:	eba6 0807 	sub.w	r8, r6, r7
 8007e70:	608b      	str	r3, [r1, #8]
 8007e72:	f1b8 0f00 	cmp.w	r8, #0
 8007e76:	dd9c      	ble.n	8007db2 <__sflush_r+0x1a>
 8007e78:	4643      	mov	r3, r8
 8007e7a:	463a      	mov	r2, r7
 8007e7c:	6a21      	ldr	r1, [r4, #32]
 8007e7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b0      	blx	r6
 8007e84:	2800      	cmp	r0, #0
 8007e86:	dc06      	bgt.n	8007e96 <__sflush_r+0xfe>
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e8e:	81a3      	strh	r3, [r4, #12]
 8007e90:	f04f 30ff 	mov.w	r0, #4294967295
 8007e94:	e78e      	b.n	8007db4 <__sflush_r+0x1c>
 8007e96:	4407      	add	r7, r0
 8007e98:	eba8 0800 	sub.w	r8, r8, r0
 8007e9c:	e7e9      	b.n	8007e72 <__sflush_r+0xda>
 8007e9e:	bf00      	nop
 8007ea0:	20400001 	.word	0x20400001

08007ea4 <_fflush_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	690b      	ldr	r3, [r1, #16]
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	b1db      	cbz	r3, 8007ee6 <_fflush_r+0x42>
 8007eae:	b118      	cbz	r0, 8007eb8 <_fflush_r+0x14>
 8007eb0:	6983      	ldr	r3, [r0, #24]
 8007eb2:	b90b      	cbnz	r3, 8007eb8 <_fflush_r+0x14>
 8007eb4:	f7ff f93c 	bl	8007130 <__sinit>
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <_fflush_r+0x48>)
 8007eba:	429c      	cmp	r4, r3
 8007ebc:	d109      	bne.n	8007ed2 <_fflush_r+0x2e>
 8007ebe:	686c      	ldr	r4, [r5, #4]
 8007ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec4:	b17b      	cbz	r3, 8007ee6 <_fflush_r+0x42>
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	4628      	mov	r0, r5
 8007eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ece:	f7ff bf63 	b.w	8007d98 <__sflush_r>
 8007ed2:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <_fflush_r+0x4c>)
 8007ed4:	429c      	cmp	r4, r3
 8007ed6:	d101      	bne.n	8007edc <_fflush_r+0x38>
 8007ed8:	68ac      	ldr	r4, [r5, #8]
 8007eda:	e7f1      	b.n	8007ec0 <_fflush_r+0x1c>
 8007edc:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <_fflush_r+0x50>)
 8007ede:	429c      	cmp	r4, r3
 8007ee0:	bf08      	it	eq
 8007ee2:	68ec      	ldreq	r4, [r5, #12]
 8007ee4:	e7ec      	b.n	8007ec0 <_fflush_r+0x1c>
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	bd38      	pop	{r3, r4, r5, pc}
 8007eea:	bf00      	nop
 8007eec:	08026350 	.word	0x08026350
 8007ef0:	08026370 	.word	0x08026370
 8007ef4:	08026330 	.word	0x08026330

08007ef8 <_lseek_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4c07      	ldr	r4, [pc, #28]	; (8007f18 <_lseek_r+0x20>)
 8007efc:	4605      	mov	r5, r0
 8007efe:	4608      	mov	r0, r1
 8007f00:	4611      	mov	r1, r2
 8007f02:	2200      	movs	r2, #0
 8007f04:	6022      	str	r2, [r4, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	f7fb fdb4 	bl	8003a74 <_lseek>
 8007f0c:	1c43      	adds	r3, r0, #1
 8007f0e:	d102      	bne.n	8007f16 <_lseek_r+0x1e>
 8007f10:	6823      	ldr	r3, [r4, #0]
 8007f12:	b103      	cbz	r3, 8007f16 <_lseek_r+0x1e>
 8007f14:	602b      	str	r3, [r5, #0]
 8007f16:	bd38      	pop	{r3, r4, r5, pc}
 8007f18:	200005e4 	.word	0x200005e4

08007f1c <__swhatbuf_r>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	460e      	mov	r6, r1
 8007f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f24:	2900      	cmp	r1, #0
 8007f26:	b096      	sub	sp, #88	; 0x58
 8007f28:	4614      	mov	r4, r2
 8007f2a:	461d      	mov	r5, r3
 8007f2c:	da07      	bge.n	8007f3e <__swhatbuf_r+0x22>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	602b      	str	r3, [r5, #0]
 8007f32:	89b3      	ldrh	r3, [r6, #12]
 8007f34:	061a      	lsls	r2, r3, #24
 8007f36:	d410      	bmi.n	8007f5a <__swhatbuf_r+0x3e>
 8007f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f3c:	e00e      	b.n	8007f5c <__swhatbuf_r+0x40>
 8007f3e:	466a      	mov	r2, sp
 8007f40:	f000 f8fc 	bl	800813c <_fstat_r>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	dbf2      	blt.n	8007f2e <__swhatbuf_r+0x12>
 8007f48:	9a01      	ldr	r2, [sp, #4]
 8007f4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f52:	425a      	negs	r2, r3
 8007f54:	415a      	adcs	r2, r3
 8007f56:	602a      	str	r2, [r5, #0]
 8007f58:	e7ee      	b.n	8007f38 <__swhatbuf_r+0x1c>
 8007f5a:	2340      	movs	r3, #64	; 0x40
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	6023      	str	r3, [r4, #0]
 8007f60:	b016      	add	sp, #88	; 0x58
 8007f62:	bd70      	pop	{r4, r5, r6, pc}

08007f64 <__smakebuf_r>:
 8007f64:	898b      	ldrh	r3, [r1, #12]
 8007f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f68:	079d      	lsls	r5, r3, #30
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	d507      	bpl.n	8007f80 <__smakebuf_r+0x1c>
 8007f70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	6123      	str	r3, [r4, #16]
 8007f78:	2301      	movs	r3, #1
 8007f7a:	6163      	str	r3, [r4, #20]
 8007f7c:	b002      	add	sp, #8
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	ab01      	add	r3, sp, #4
 8007f82:	466a      	mov	r2, sp
 8007f84:	f7ff ffca 	bl	8007f1c <__swhatbuf_r>
 8007f88:	9900      	ldr	r1, [sp, #0]
 8007f8a:	4605      	mov	r5, r0
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f7ff f959 	bl	8007244 <_malloc_r>
 8007f92:	b948      	cbnz	r0, 8007fa8 <__smakebuf_r+0x44>
 8007f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f98:	059a      	lsls	r2, r3, #22
 8007f9a:	d4ef      	bmi.n	8007f7c <__smakebuf_r+0x18>
 8007f9c:	f023 0303 	bic.w	r3, r3, #3
 8007fa0:	f043 0302 	orr.w	r3, r3, #2
 8007fa4:	81a3      	strh	r3, [r4, #12]
 8007fa6:	e7e3      	b.n	8007f70 <__smakebuf_r+0xc>
 8007fa8:	4b0d      	ldr	r3, [pc, #52]	; (8007fe0 <__smakebuf_r+0x7c>)
 8007faa:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	6020      	str	r0, [r4, #0]
 8007fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb4:	81a3      	strh	r3, [r4, #12]
 8007fb6:	9b00      	ldr	r3, [sp, #0]
 8007fb8:	6163      	str	r3, [r4, #20]
 8007fba:	9b01      	ldr	r3, [sp, #4]
 8007fbc:	6120      	str	r0, [r4, #16]
 8007fbe:	b15b      	cbz	r3, 8007fd8 <__smakebuf_r+0x74>
 8007fc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	f000 f8cb 	bl	8008160 <_isatty_r>
 8007fca:	b128      	cbz	r0, 8007fd8 <__smakebuf_r+0x74>
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	f023 0303 	bic.w	r3, r3, #3
 8007fd2:	f043 0301 	orr.w	r3, r3, #1
 8007fd6:	81a3      	strh	r3, [r4, #12]
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	431d      	orrs	r5, r3
 8007fdc:	81a5      	strh	r5, [r4, #12]
 8007fde:	e7cd      	b.n	8007f7c <__smakebuf_r+0x18>
 8007fe0:	080070f9 	.word	0x080070f9

08007fe4 <memcpy>:
 8007fe4:	b510      	push	{r4, lr}
 8007fe6:	1e43      	subs	r3, r0, #1
 8007fe8:	440a      	add	r2, r1
 8007fea:	4291      	cmp	r1, r2
 8007fec:	d100      	bne.n	8007ff0 <memcpy+0xc>
 8007fee:	bd10      	pop	{r4, pc}
 8007ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ff8:	e7f7      	b.n	8007fea <memcpy+0x6>

08007ffa <memmove>:
 8007ffa:	4288      	cmp	r0, r1
 8007ffc:	b510      	push	{r4, lr}
 8007ffe:	eb01 0302 	add.w	r3, r1, r2
 8008002:	d807      	bhi.n	8008014 <memmove+0x1a>
 8008004:	1e42      	subs	r2, r0, #1
 8008006:	4299      	cmp	r1, r3
 8008008:	d00a      	beq.n	8008020 <memmove+0x26>
 800800a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800800e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008012:	e7f8      	b.n	8008006 <memmove+0xc>
 8008014:	4283      	cmp	r3, r0
 8008016:	d9f5      	bls.n	8008004 <memmove+0xa>
 8008018:	1881      	adds	r1, r0, r2
 800801a:	1ad2      	subs	r2, r2, r3
 800801c:	42d3      	cmn	r3, r2
 800801e:	d100      	bne.n	8008022 <memmove+0x28>
 8008020:	bd10      	pop	{r4, pc}
 8008022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008026:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800802a:	e7f7      	b.n	800801c <memmove+0x22>

0800802c <__malloc_lock>:
 800802c:	4770      	bx	lr

0800802e <__malloc_unlock>:
 800802e:	4770      	bx	lr

08008030 <_free_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4605      	mov	r5, r0
 8008034:	2900      	cmp	r1, #0
 8008036:	d045      	beq.n	80080c4 <_free_r+0x94>
 8008038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800803c:	1f0c      	subs	r4, r1, #4
 800803e:	2b00      	cmp	r3, #0
 8008040:	bfb8      	it	lt
 8008042:	18e4      	addlt	r4, r4, r3
 8008044:	f7ff fff2 	bl	800802c <__malloc_lock>
 8008048:	4a1f      	ldr	r2, [pc, #124]	; (80080c8 <_free_r+0x98>)
 800804a:	6813      	ldr	r3, [r2, #0]
 800804c:	4610      	mov	r0, r2
 800804e:	b933      	cbnz	r3, 800805e <_free_r+0x2e>
 8008050:	6063      	str	r3, [r4, #4]
 8008052:	6014      	str	r4, [r2, #0]
 8008054:	4628      	mov	r0, r5
 8008056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800805a:	f7ff bfe8 	b.w	800802e <__malloc_unlock>
 800805e:	42a3      	cmp	r3, r4
 8008060:	d90c      	bls.n	800807c <_free_r+0x4c>
 8008062:	6821      	ldr	r1, [r4, #0]
 8008064:	1862      	adds	r2, r4, r1
 8008066:	4293      	cmp	r3, r2
 8008068:	bf04      	itt	eq
 800806a:	681a      	ldreq	r2, [r3, #0]
 800806c:	685b      	ldreq	r3, [r3, #4]
 800806e:	6063      	str	r3, [r4, #4]
 8008070:	bf04      	itt	eq
 8008072:	1852      	addeq	r2, r2, r1
 8008074:	6022      	streq	r2, [r4, #0]
 8008076:	6004      	str	r4, [r0, #0]
 8008078:	e7ec      	b.n	8008054 <_free_r+0x24>
 800807a:	4613      	mov	r3, r2
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	b10a      	cbz	r2, 8008084 <_free_r+0x54>
 8008080:	42a2      	cmp	r2, r4
 8008082:	d9fa      	bls.n	800807a <_free_r+0x4a>
 8008084:	6819      	ldr	r1, [r3, #0]
 8008086:	1858      	adds	r0, r3, r1
 8008088:	42a0      	cmp	r0, r4
 800808a:	d10b      	bne.n	80080a4 <_free_r+0x74>
 800808c:	6820      	ldr	r0, [r4, #0]
 800808e:	4401      	add	r1, r0
 8008090:	1858      	adds	r0, r3, r1
 8008092:	4282      	cmp	r2, r0
 8008094:	6019      	str	r1, [r3, #0]
 8008096:	d1dd      	bne.n	8008054 <_free_r+0x24>
 8008098:	6810      	ldr	r0, [r2, #0]
 800809a:	6852      	ldr	r2, [r2, #4]
 800809c:	605a      	str	r2, [r3, #4]
 800809e:	4401      	add	r1, r0
 80080a0:	6019      	str	r1, [r3, #0]
 80080a2:	e7d7      	b.n	8008054 <_free_r+0x24>
 80080a4:	d902      	bls.n	80080ac <_free_r+0x7c>
 80080a6:	230c      	movs	r3, #12
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	e7d3      	b.n	8008054 <_free_r+0x24>
 80080ac:	6820      	ldr	r0, [r4, #0]
 80080ae:	1821      	adds	r1, r4, r0
 80080b0:	428a      	cmp	r2, r1
 80080b2:	bf04      	itt	eq
 80080b4:	6811      	ldreq	r1, [r2, #0]
 80080b6:	6852      	ldreq	r2, [r2, #4]
 80080b8:	6062      	str	r2, [r4, #4]
 80080ba:	bf04      	itt	eq
 80080bc:	1809      	addeq	r1, r1, r0
 80080be:	6021      	streq	r1, [r4, #0]
 80080c0:	605c      	str	r4, [r3, #4]
 80080c2:	e7c7      	b.n	8008054 <_free_r+0x24>
 80080c4:	bd38      	pop	{r3, r4, r5, pc}
 80080c6:	bf00      	nop
 80080c8:	2000011c 	.word	0x2000011c

080080cc <_realloc_r>:
 80080cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ce:	4607      	mov	r7, r0
 80080d0:	4614      	mov	r4, r2
 80080d2:	460e      	mov	r6, r1
 80080d4:	b921      	cbnz	r1, 80080e0 <_realloc_r+0x14>
 80080d6:	4611      	mov	r1, r2
 80080d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80080dc:	f7ff b8b2 	b.w	8007244 <_malloc_r>
 80080e0:	b922      	cbnz	r2, 80080ec <_realloc_r+0x20>
 80080e2:	f7ff ffa5 	bl	8008030 <_free_r>
 80080e6:	4625      	mov	r5, r4
 80080e8:	4628      	mov	r0, r5
 80080ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ec:	f000 f848 	bl	8008180 <_malloc_usable_size_r>
 80080f0:	42a0      	cmp	r0, r4
 80080f2:	d20f      	bcs.n	8008114 <_realloc_r+0x48>
 80080f4:	4621      	mov	r1, r4
 80080f6:	4638      	mov	r0, r7
 80080f8:	f7ff f8a4 	bl	8007244 <_malloc_r>
 80080fc:	4605      	mov	r5, r0
 80080fe:	2800      	cmp	r0, #0
 8008100:	d0f2      	beq.n	80080e8 <_realloc_r+0x1c>
 8008102:	4631      	mov	r1, r6
 8008104:	4622      	mov	r2, r4
 8008106:	f7ff ff6d 	bl	8007fe4 <memcpy>
 800810a:	4631      	mov	r1, r6
 800810c:	4638      	mov	r0, r7
 800810e:	f7ff ff8f 	bl	8008030 <_free_r>
 8008112:	e7e9      	b.n	80080e8 <_realloc_r+0x1c>
 8008114:	4635      	mov	r5, r6
 8008116:	e7e7      	b.n	80080e8 <_realloc_r+0x1c>

08008118 <_read_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4c07      	ldr	r4, [pc, #28]	; (8008138 <_read_r+0x20>)
 800811c:	4605      	mov	r5, r0
 800811e:	4608      	mov	r0, r1
 8008120:	4611      	mov	r1, r2
 8008122:	2200      	movs	r2, #0
 8008124:	6022      	str	r2, [r4, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	f7fb fc44 	bl	80039b4 <_read>
 800812c:	1c43      	adds	r3, r0, #1
 800812e:	d102      	bne.n	8008136 <_read_r+0x1e>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	b103      	cbz	r3, 8008136 <_read_r+0x1e>
 8008134:	602b      	str	r3, [r5, #0]
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	200005e4 	.word	0x200005e4

0800813c <_fstat_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4c07      	ldr	r4, [pc, #28]	; (800815c <_fstat_r+0x20>)
 8008140:	2300      	movs	r3, #0
 8008142:	4605      	mov	r5, r0
 8008144:	4608      	mov	r0, r1
 8008146:	4611      	mov	r1, r2
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	f7fb fc78 	bl	8003a3e <_fstat>
 800814e:	1c43      	adds	r3, r0, #1
 8008150:	d102      	bne.n	8008158 <_fstat_r+0x1c>
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	b103      	cbz	r3, 8008158 <_fstat_r+0x1c>
 8008156:	602b      	str	r3, [r5, #0]
 8008158:	bd38      	pop	{r3, r4, r5, pc}
 800815a:	bf00      	nop
 800815c:	200005e4 	.word	0x200005e4

08008160 <_isatty_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4c06      	ldr	r4, [pc, #24]	; (800817c <_isatty_r+0x1c>)
 8008164:	2300      	movs	r3, #0
 8008166:	4605      	mov	r5, r0
 8008168:	4608      	mov	r0, r1
 800816a:	6023      	str	r3, [r4, #0]
 800816c:	f7fb fc77 	bl	8003a5e <_isatty>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d102      	bne.n	800817a <_isatty_r+0x1a>
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	b103      	cbz	r3, 800817a <_isatty_r+0x1a>
 8008178:	602b      	str	r3, [r5, #0]
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	200005e4 	.word	0x200005e4

08008180 <_malloc_usable_size_r>:
 8008180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008184:	1f18      	subs	r0, r3, #4
 8008186:	2b00      	cmp	r3, #0
 8008188:	bfbc      	itt	lt
 800818a:	580b      	ldrlt	r3, [r1, r0]
 800818c:	18c0      	addlt	r0, r0, r3
 800818e:	4770      	bx	lr

08008190 <_init>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	bf00      	nop
 8008194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008196:	bc08      	pop	{r3}
 8008198:	469e      	mov	lr, r3
 800819a:	4770      	bx	lr

0800819c <_fini>:
 800819c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819e:	bf00      	nop
 80081a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081a2:	bc08      	pop	{r3}
 80081a4:	469e      	mov	lr, r3
 80081a6:	4770      	bx	lr
