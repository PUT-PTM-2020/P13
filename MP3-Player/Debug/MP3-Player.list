
MP3-Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800b540  0800b540  0001b540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5f8  0800b5f8  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5f8  0800b5f8  0001b5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b600  0800b600  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b600  0800b600  0001b600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b604  0800b604  0001b604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800b608  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b9c  200000d4  0800b6dc  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c70  0800b6dc  00020c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a07  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f9f  00000000  00000000  00037b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f8  00000000  00000000  0003aab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015a0  00000000  00000000  0003c1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024881  00000000  00000000  0003d748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000116a4  00000000  00000000  00061fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d95ea  00000000  00000000  0007366d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014cc57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068cc  00000000  00000000  0014ccd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d4 	.word	0x200000d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b528 	.word	0x0800b528

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d8 	.word	0x200000d8
 80001c4:	0800b528 	.word	0x0800b528

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b972 	b.w	8000cb0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	4688      	mov	r8, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14b      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4615      	mov	r5, r2
 80009f6:	d967      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0720 	rsb	r7, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	fa20 f707 	lsr.w	r7, r0, r7
 8000a0a:	4095      	lsls	r5, r2
 8000a0c:	ea47 0803 	orr.w	r8, r7, r3
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a1c:	fa1f fc85 	uxth.w	ip, r5
 8000a20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a28:	fb07 f10c 	mul.w	r1, r7, ip
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18eb      	adds	r3, r5, r3
 8000a32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a36:	f080 811b 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8118 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a40:	3f02      	subs	r7, #2
 8000a42:	442b      	add	r3, r5
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a58:	45a4      	cmp	ip, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	192c      	adds	r4, r5, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8107 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	f240 8104 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	442c      	add	r4, r5
 8000a70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a74:	eba4 040c 	sub.w	r4, r4, ip
 8000a78:	2700      	movs	r7, #0
 8000a7a:	b11e      	cbz	r6, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c6 4300 	strd	r4, r3, [r6]
 8000a84:	4639      	mov	r1, r7
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xbe>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80eb 	beq.w	8000c6a <__udivmoddi4+0x286>
 8000a94:	2700      	movs	r7, #0
 8000a96:	e9c6 0100 	strd	r0, r1, [r6]
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f783 	clz	r7, r3
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d147      	bne.n	8000b3a <__udivmoddi4+0x156>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd0>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80fa 	bhi.w	8000ca8 <__udivmoddi4+0x2c4>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	4698      	mov	r8, r3
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000ac2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xe8>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad6:	1b49      	subs	r1, r1, r5
 8000ad8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000adc:	fa1f f885 	uxth.w	r8, r5
 8000ae0:	2701      	movs	r7, #1
 8000ae2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb08 f10c 	mul.w	r1, r8, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x14c>
 8000b20:	192c      	adds	r4, r5, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x14a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80b6 	bhi.w	8000c9a <__udivmoddi4+0x2b6>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e79f      	b.n	8000a7a <__udivmoddi4+0x96>
 8000b3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b3e:	40bb      	lsls	r3, r7
 8000b40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b48:	fa01 f407 	lsl.w	r4, r1, r7
 8000b4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b58:	4325      	orrs	r5, r4
 8000b5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b5e:	0c2c      	lsrs	r4, r5, #16
 8000b60:	fb08 3319 	mls	r3, r8, r9, r3
 8000b64:	fa1f fa8e 	uxth.w	sl, lr
 8000b68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b70:	429c      	cmp	r4, r3
 8000b72:	fa02 f207 	lsl.w	r2, r2, r7
 8000b76:	fa00 f107 	lsl.w	r1, r0, r7
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b84:	f080 8087 	bcs.w	8000c96 <__udivmoddi4+0x2b2>
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	f240 8084 	bls.w	8000c96 <__udivmoddi4+0x2b2>
 8000b8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b92:	4473      	add	r3, lr
 8000b94:	1b1b      	subs	r3, r3, r4
 8000b96:	b2ad      	uxth	r5, r5
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ba4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ba8:	45a2      	cmp	sl, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1e 0404 	adds.w	r4, lr, r4
 8000bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb4:	d26b      	bcs.n	8000c8e <__udivmoddi4+0x2aa>
 8000bb6:	45a2      	cmp	sl, r4
 8000bb8:	d969      	bls.n	8000c8e <__udivmoddi4+0x2aa>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4474      	add	r4, lr
 8000bbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc6:	eba4 040a 	sub.w	r4, r4, sl
 8000bca:	454c      	cmp	r4, r9
 8000bcc:	46c2      	mov	sl, r8
 8000bce:	464b      	mov	r3, r9
 8000bd0:	d354      	bcc.n	8000c7c <__udivmoddi4+0x298>
 8000bd2:	d051      	beq.n	8000c78 <__udivmoddi4+0x294>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d069      	beq.n	8000cac <__udivmoddi4+0x2c8>
 8000bd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bdc:	eb64 0403 	sbc.w	r4, r4, r3
 8000be0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	40fc      	lsrs	r4, r7
 8000be8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bec:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e747      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000bf4:	f1c2 0320 	rsb	r3, r2, #32
 8000bf8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bfc:	4095      	lsls	r5, r2
 8000bfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000c02:	fa21 f303 	lsr.w	r3, r1, r3
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	4338      	orrs	r0, r7
 8000c0c:	0c01      	lsrs	r1, r0, #16
 8000c0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb07 f308 	mul.w	r3, r7, r8
 8000c22:	428b      	cmp	r3, r1
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x256>
 8000c2a:	1869      	adds	r1, r5, r1
 8000c2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c30:	d22f      	bcs.n	8000c92 <__udivmoddi4+0x2ae>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d92d      	bls.n	8000c92 <__udivmoddi4+0x2ae>
 8000c36:	3f02      	subs	r7, #2
 8000c38:	4429      	add	r1, r5
 8000c3a:	1acb      	subs	r3, r1, r3
 8000c3c:	b281      	uxth	r1, r0
 8000c3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb00 f308 	mul.w	r3, r0, r8
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x27e>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c58:	d217      	bcs.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d915      	bls.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c68:	e73b      	b.n	8000ae2 <__udivmoddi4+0xfe>
 8000c6a:	4637      	mov	r7, r6
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e709      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c70:	4607      	mov	r7, r0
 8000c72:	e6e7      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c74:	4618      	mov	r0, r3
 8000c76:	e6fb      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c78:	4541      	cmp	r1, r8
 8000c7a:	d2ab      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c80:	eb69 020e 	sbc.w	r2, r9, lr
 8000c84:	3801      	subs	r0, #1
 8000c86:	4613      	mov	r3, r2
 8000c88:	e7a4      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	e7e9      	b.n	8000c62 <__udivmoddi4+0x27e>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	e795      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c92:	4667      	mov	r7, ip
 8000c94:	e7d1      	b.n	8000c3a <__udivmoddi4+0x256>
 8000c96:	4681      	mov	r9, r0
 8000c98:	e77c      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	442c      	add	r4, r5
 8000c9e:	e747      	b.n	8000b30 <__udivmoddi4+0x14c>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	e72f      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca8:	4638      	mov	r0, r7
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xda>
 8000cac:	4637      	mov	r7, r6
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0xa0>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <DESELECT>:

static
inline void DESELECT(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <xmit_spi>:

extern SPI_HandleTypeDef hspi3;

static
void xmit_spi(BYTE Data)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8000cda:	bf00      	nop
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <xmit_spi+0x30>)
 8000cde:	f008 fed1 	bl	8009a84 <HAL_SPI_GetState>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d1f9      	bne.n	8000cdc <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi3, &Data, 1, 5000);
 8000ce8:	1df9      	adds	r1, r7, #7
 8000cea:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <xmit_spi+0x30>)
 8000cf2:	f008 fbf1 	bl	80094d8 <HAL_SPI_Transmit>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000410 	.word	0x20000410

08000d04 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8000d0a:	23ff      	movs	r3, #255	; 0xff
 8000d0c:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8000d12:	bf00      	nop
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <rcvr_spi+0x38>)
 8000d16:	f008 feb5 	bl	8009a84 <HAL_SPI_GetState>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d1f9      	bne.n	8000d14 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi3, &Dummy, &Data, 1, 5000);
 8000d20:	1dba      	adds	r2, r7, #6
 8000d22:	1df9      	adds	r1, r7, #7
 8000d24:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <rcvr_spi+0x38>)
 8000d2e:	f008 fd07 	bl	8009740 <HAL_SPI_TransmitReceive>

	return Data;
 8000d32:	79bb      	ldrb	r3, [r7, #6]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000410 	.word	0x20000410

08000d40 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8000d48:	f7ff ffdc 	bl	8000d04 <rcvr_spi>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	701a      	strb	r2, [r3, #0]
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <wait_ready+0x34>)
 8000d64:	2232      	movs	r2, #50	; 0x32
 8000d66:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8000d68:	f7ff ffcc 	bl	8000d04 <rcvr_spi>
	do
		res = rcvr_spi();
 8000d6c:	f7ff ffca 	bl	8000d04 <rcvr_spi>
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2bff      	cmp	r3, #255	; 0xff
 8000d78:	d004      	beq.n	8000d84 <wait_ready+0x28>
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <wait_ready+0x34>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f3      	bne.n	8000d6c <wait_ready+0x10>

	return res;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000f1 	.word	0x200000f1

08000d94 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8000d9a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d9e:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8000da0:	f7ff ff8f 	bl	8000cc2 <DESELECT>

	for (i = 0; i < 10; i++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e005      	b.n	8000db6 <power_on+0x22>
		xmit_spi(0xFF);
 8000daa:	20ff      	movs	r0, #255	; 0xff
 8000dac:	f7ff ff90 	bl	8000cd0 <xmit_spi>
	for (i = 0; i < 10; i++)
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	3301      	adds	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	2b09      	cmp	r3, #9
 8000dba:	d9f6      	bls.n	8000daa <power_on+0x16>

	SELECT();
 8000dbc:	f7ff ff7a 	bl	8000cb4 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8000dc0:	2340      	movs	r3, #64	; 0x40
 8000dc2:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8000dd4:	2395      	movs	r3, #149	; 0x95
 8000dd6:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e00b      	b.n	8000df6 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	f107 0210 	add.w	r2, r7, #16
 8000de4:	4413      	add	r3, r2
 8000de6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff70 	bl	8000cd0 <xmit_spi>
	for (i = 0; i < 6; i++)
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	3301      	adds	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d9f0      	bls.n	8000dde <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000dfc:	e002      	b.n	8000e04 <power_on+0x70>
		Count--;
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000e04:	f7ff ff7e 	bl	8000d04 <rcvr_spi>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d002      	beq.n	8000e14 <power_on+0x80>
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f4      	bne.n	8000dfe <power_on+0x6a>

	DESELECT();
 8000e14:	f7ff ff55 	bl	8000cc2 <DESELECT>
	xmit_spi(0XFF);
 8000e18:	20ff      	movs	r0, #255	; 0xff
 8000e1a:	f7ff ff59 	bl	8000cd0 <xmit_spi>

	PowerFlag = 1;
 8000e1e:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <power_on+0x98>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200000f3 	.word	0x200000f3

08000e30 <power_off>:

static
void power_off(void) {
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <power_off+0x14>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	200000f3 	.word	0x200000f3

08000e48 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <chk_power+0x14>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200000f3 	.word	0x200000f3

08000e60 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <rcvr_datablock+0x68>)
 8000e6c:	220a      	movs	r2, #10
 8000e6e:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000e70:	f7ff ff48 	bl	8000d04 <rcvr_spi>
 8000e74:	4603      	mov	r3, r0
 8000e76:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	2bff      	cmp	r3, #255	; 0xff
 8000e7c:	d104      	bne.n	8000e88 <rcvr_datablock+0x28>
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <rcvr_datablock+0x68>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1f3      	bne.n	8000e70 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	2bfe      	cmp	r3, #254	; 0xfe
 8000e8c:	d001      	beq.n	8000e92 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e016      	b.n	8000ec0 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff51 	bl	8000d40 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff4b 	bl	8000d40 <rcvr_spi_m>
	} while (btr -= 2);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	3b02      	subs	r3, #2
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1ed      	bne.n	8000e92 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8000eb6:	f7ff ff25 	bl	8000d04 <rcvr_spi>
	rcvr_spi();
 8000eba:	f7ff ff23 	bl	8000d04 <rcvr_spi>

	return TRUE; /* Return with success */
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200000f0 	.word	0x200000f0

08000ecc <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000edc:	f7ff ff3e 	bl	8000d5c <wait_ready>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2bff      	cmp	r3, #255	; 0xff
 8000ee4:	d001      	beq.n	8000eea <xmit_datablock+0x1e>
		return FALSE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e040      	b.n	8000f6c <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff feef 	bl	8000cd0 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	2bfd      	cmp	r3, #253	; 0xfd
 8000ef6:	d031      	beq.n	8000f5c <xmit_datablock+0x90>
		wc = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fee3 	bl	8000cd0 <xmit_spi>
			xmit_spi(*buff++);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fedc 	bl	8000cd0 <xmit_spi>
		} while (--wc);
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	73bb      	strb	r3, [r7, #14]
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1eb      	bne.n	8000efc <xmit_datablock+0x30>

		rcvr_spi();
 8000f24:	f7ff feee 	bl	8000d04 <rcvr_spi>
		rcvr_spi();
 8000f28:	f7ff feec 	bl	8000d04 <rcvr_spi>

		while (i <= 64) {
 8000f2c:	e00b      	b.n	8000f46 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000f2e:	f7ff fee9 	bl	8000d04 <rcvr_spi>
 8000f32:	4603      	mov	r3, r0
 8000f34:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	f003 031f 	and.w	r3, r3, #31
 8000f3c:	2b05      	cmp	r3, #5
 8000f3e:	d006      	beq.n	8000f4e <xmit_datablock+0x82>
				break;
			i++;
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b40      	cmp	r3, #64	; 0x40
 8000f4a:	d9f0      	bls.n	8000f2e <xmit_datablock+0x62>
 8000f4c:	e000      	b.n	8000f50 <xmit_datablock+0x84>
				break;
 8000f4e:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000f50:	bf00      	nop
 8000f52:	f7ff fed7 	bl	8000d04 <rcvr_spi>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0fa      	beq.n	8000f52 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d101      	bne.n	8000f6a <xmit_datablock+0x9e>
		return TRUE;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <xmit_datablock+0xa0>
	else
		return FALSE;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8000f80:	f7ff feec 	bl	8000d5c <wait_ready>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2bff      	cmp	r3, #255	; 0xff
 8000f88:	d001      	beq.n	8000f8e <send_cmd+0x1a>
		return 0xFF;
 8000f8a:	23ff      	movs	r3, #255	; 0xff
 8000f8c:	e040      	b.n	8001010 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fe9d 	bl	8000cd0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	0e1b      	lsrs	r3, r3, #24
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fe97 	bl	8000cd0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	0c1b      	lsrs	r3, r3, #16
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fe91 	bl	8000cd0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fe8b 	bl	8000cd0 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fe86 	bl	8000cd0 <xmit_spi>
	n = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b40      	cmp	r3, #64	; 0x40
 8000fcc:	d101      	bne.n	8000fd2 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8000fce:	2395      	movs	r3, #149	; 0x95
 8000fd0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b48      	cmp	r3, #72	; 0x48
 8000fd6:	d101      	bne.n	8000fdc <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8000fd8:	2387      	movs	r3, #135	; 0x87
 8000fda:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fe76 	bl	8000cd0 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b4c      	cmp	r3, #76	; 0x4c
 8000fe8:	d101      	bne.n	8000fee <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8000fea:	f7ff fe8b 	bl	8000d04 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8000fee:	230a      	movs	r3, #10
 8000ff0:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8000ff2:	f7ff fe87 	bl	8000d04 <rcvr_spi>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8000ffa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	da05      	bge.n	800100e <send_cmd+0x9a>
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	3b01      	subs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f1      	bne.n	8000ff2 <send_cmd+0x7e>

	return res; /* Return with the response value */
 800100e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8001028:	2301      	movs	r3, #1
 800102a:	e0d5      	b.n	80011d8 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 800102c:	4b6c      	ldr	r3, [pc, #432]	; (80011e0 <disk_initialize+0x1c8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 800103a:	4b69      	ldr	r3, [pc, #420]	; (80011e0 <disk_initialize+0x1c8>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	e0ca      	b.n	80011d8 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8001042:	f7ff fea7 	bl	8000d94 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8001046:	f7ff fe35 	bl	8000cb4 <SELECT>
	ty = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 800104e:	2100      	movs	r1, #0
 8001050:	2040      	movs	r0, #64	; 0x40
 8001052:	f7ff ff8f 	bl	8000f74 <send_cmd>
 8001056:	4603      	mov	r3, r0
 8001058:	2b01      	cmp	r3, #1
 800105a:	f040 80a5 	bne.w	80011a8 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 800105e:	4b61      	ldr	r3, [pc, #388]	; (80011e4 <disk_initialize+0x1cc>)
 8001060:	2264      	movs	r2, #100	; 0x64
 8001062:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8001064:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001068:	2048      	movs	r0, #72	; 0x48
 800106a:	f7ff ff83 	bl	8000f74 <send_cmd>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d158      	bne.n	8001126 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e00c      	b.n	8001094 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800107a:	7bfc      	ldrb	r4, [r7, #15]
 800107c:	f7ff fe42 	bl	8000d04 <rcvr_spi>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	4423      	add	r3, r4
 800108a:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	3301      	adds	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b03      	cmp	r3, #3
 8001098:	d9ef      	bls.n	800107a <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 800109a:	7abb      	ldrb	r3, [r7, #10]
 800109c:	2b01      	cmp	r3, #1
 800109e:	f040 8083 	bne.w	80011a8 <disk_initialize+0x190>
 80010a2:	7afb      	ldrb	r3, [r7, #11]
 80010a4:	2baa      	cmp	r3, #170	; 0xaa
 80010a6:	d17f      	bne.n	80011a8 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 80010a8:	2100      	movs	r1, #0
 80010aa:	2077      	movs	r0, #119	; 0x77
 80010ac:	f7ff ff62 	bl	8000f74 <send_cmd>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d807      	bhi.n	80010c6 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80010b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010ba:	2069      	movs	r0, #105	; 0x69
 80010bc:	f7ff ff5a 	bl	8000f74 <send_cmd>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80010c6:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <disk_initialize+0x1cc>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1eb      	bne.n	80010a8 <disk_initialize+0x90>
 80010d0:	e000      	b.n	80010d4 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80010d2:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80010d4:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <disk_initialize+0x1cc>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d064      	beq.n	80011a8 <disk_initialize+0x190>
 80010de:	2100      	movs	r1, #0
 80010e0:	207a      	movs	r0, #122	; 0x7a
 80010e2:	f7ff ff47 	bl	8000f74 <send_cmd>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d15d      	bne.n	80011a8 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e00c      	b.n	800110c <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 80010f2:	7bfc      	ldrb	r4, [r7, #15]
 80010f4:	f7ff fe06 	bl	8000d04 <rcvr_spi>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4423      	add	r3, r4
 8001102:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	3301      	adds	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d9ef      	bls.n	80010f2 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8001112:	7a3b      	ldrb	r3, [r7, #8]
 8001114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <disk_initialize+0x108>
 800111c:	2306      	movs	r3, #6
 800111e:	e000      	b.n	8001122 <disk_initialize+0x10a>
 8001120:	2302      	movs	r3, #2
 8001122:	73bb      	strb	r3, [r7, #14]
 8001124:	e040      	b.n	80011a8 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001126:	2100      	movs	r1, #0
 8001128:	2077      	movs	r0, #119	; 0x77
 800112a:	f7ff ff23 	bl	8000f74 <send_cmd>
 800112e:	4603      	mov	r3, r0
 8001130:	2b01      	cmp	r3, #1
 8001132:	d808      	bhi.n	8001146 <disk_initialize+0x12e>
 8001134:	2100      	movs	r1, #0
 8001136:	2069      	movs	r0, #105	; 0x69
 8001138:	f7ff ff1c 	bl	8000f74 <send_cmd>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d801      	bhi.n	8001146 <disk_initialize+0x12e>
 8001142:	2302      	movs	r3, #2
 8001144:	e000      	b.n	8001148 <disk_initialize+0x130>
 8001146:	2301      	movs	r3, #1
 8001148:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d10e      	bne.n	800116e <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8001150:	2100      	movs	r1, #0
 8001152:	2077      	movs	r0, #119	; 0x77
 8001154:	f7ff ff0e 	bl	8000f74 <send_cmd>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d80e      	bhi.n	800117c <disk_initialize+0x164>
 800115e:	2100      	movs	r1, #0
 8001160:	2069      	movs	r0, #105	; 0x69
 8001162:	f7ff ff07 	bl	8000f74 <send_cmd>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d107      	bne.n	800117c <disk_initialize+0x164>
						break; /* ACMD41 */
 800116c:	e00d      	b.n	800118a <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 800116e:	2100      	movs	r1, #0
 8001170:	2041      	movs	r0, #65	; 0x41
 8001172:	f7ff feff 	bl	8000f74 <send_cmd>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d005      	beq.n	8001188 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <disk_initialize+0x1cc>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1e1      	bne.n	800114a <disk_initialize+0x132>
 8001186:	e000      	b.n	800118a <disk_initialize+0x172>
						break; /* CMD1 */
 8001188:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <disk_initialize+0x1cc>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d007      	beq.n	80011a4 <disk_initialize+0x18c>
 8001194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001198:	2050      	movs	r0, #80	; 0x50
 800119a:	f7ff feeb 	bl	8000f74 <send_cmd>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <disk_initialize+0x190>
				ty = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 80011a8:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <disk_initialize+0x1d0>)
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80011ae:	f7ff fd88 	bl	8000cc2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80011b2:	f7ff fda7 	bl	8000d04 <rcvr_spi>

	if (ty) /* Initialization succeded */
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <disk_initialize+0x1c8>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f023 0301 	bic.w	r3, r3, #1
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <disk_initialize+0x1c8>)
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e001      	b.n	80011d2 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80011ce:	f7ff fe2f 	bl	8000e30 <power_off>

	return Stat;
 80011d2:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <disk_initialize+0x1c8>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd90      	pop	{r4, r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	200000f0 	.word	0x200000f0
 80011e8:	200000f2 	.word	0x200000f2

080011ec <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	if (drv)
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80011fc:	2301      	movs	r3, #1
 80011fe:	e002      	b.n	8001206 <disk_status+0x1a>
	return Stat;
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <disk_status+0x28>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000000 	.word	0x20000000

08001218 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <disk_read+0x1c>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <disk_read+0x20>
		return RES_PARERR;
 8001234:	2304      	movs	r3, #4
 8001236:	e051      	b.n	80012dc <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <disk_read+0xcc>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <disk_read+0x32>
		return RES_NOTRDY;
 8001246:	2303      	movs	r3, #3
 8001248:	e048      	b.n	80012dc <disk_read+0xc4>

	if (!(CardType & 4))
 800124a:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <disk_read+0xd0>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	025b      	lsls	r3, r3, #9
 800125a:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 800125c:	f7ff fd2a 	bl	8000cb4 <SELECT>

	if (count == 1) { /* Single block read */
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d111      	bne.n	800128a <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	2051      	movs	r0, #81	; 0x51
 800126a:	f7ff fe83 	bl	8000f74 <send_cmd>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d129      	bne.n	80012c8 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8001274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001278:	68b8      	ldr	r0, [r7, #8]
 800127a:	f7ff fdf1 	bl	8000e60 <rcvr_datablock>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d021      	beq.n	80012c8 <disk_read+0xb0>
			count = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	e01e      	b.n	80012c8 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	2052      	movs	r0, #82	; 0x52
 800128e:	f7ff fe71 	bl	8000f74 <send_cmd>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d117      	bne.n	80012c8 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8001298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129c:	68b8      	ldr	r0, [r7, #8]
 800129e:	f7ff fddf 	bl	8000e60 <rcvr_datablock>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00a      	beq.n	80012be <disk_read+0xa6>
					break;
				buff += 512;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012ae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1ed      	bne.n	8001298 <disk_read+0x80>
 80012bc:	e000      	b.n	80012c0 <disk_read+0xa8>
					break;
 80012be:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 80012c0:	2100      	movs	r1, #0
 80012c2:	204c      	movs	r0, #76	; 0x4c
 80012c4:	f7ff fe56 	bl	8000f74 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 80012c8:	f7ff fcfb 	bl	8000cc2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80012cc:	f7ff fd1a 	bl	8000d04 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf14      	ite	ne
 80012d6:	2301      	movne	r3, #1
 80012d8:	2300      	moveq	r3, #0
 80012da:	b2db      	uxtb	r3, r3
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	200000f2 	.word	0x200000f2

080012ec <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	4603      	mov	r3, r0
 80012fa:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <disk_write+0x1c>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <disk_write+0x20>
		return RES_PARERR;
 8001308:	2304      	movs	r3, #4
 800130a:	e06b      	b.n	80013e4 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <disk_write+0x100>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <disk_write+0x32>
		return RES_NOTRDY;
 800131a:	2303      	movs	r3, #3
 800131c:	e062      	b.n	80013e4 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 800131e:	4b33      	ldr	r3, [pc, #204]	; (80013ec <disk_write+0x100>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <disk_write+0x44>
		return RES_WRPRT;
 800132c:	2302      	movs	r3, #2
 800132e:	e059      	b.n	80013e4 <disk_write+0xf8>

	if (!(CardType & 4))
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <disk_write+0x104>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	025b      	lsls	r3, r3, #9
 8001340:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8001342:	f7ff fcb7 	bl	8000cb4 <SELECT>

	if (count == 1) { /* Single block write */
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d110      	bne.n	800136e <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	2058      	movs	r0, #88	; 0x58
 8001350:	f7ff fe10 	bl	8000f74 <send_cmd>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d13a      	bne.n	80013d0 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 800135a:	21fe      	movs	r1, #254	; 0xfe
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f7ff fdb5 	bl	8000ecc <xmit_datablock>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d033      	beq.n	80013d0 <disk_write+0xe4>
			count = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	e030      	b.n	80013d0 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <disk_write+0x104>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d007      	beq.n	800138a <disk_write+0x9e>
			send_cmd(CMD55, 0);
 800137a:	2100      	movs	r1, #0
 800137c:	2077      	movs	r0, #119	; 0x77
 800137e:	f7ff fdf9 	bl	8000f74 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	2057      	movs	r0, #87	; 0x57
 8001386:	f7ff fdf5 	bl	8000f74 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	2059      	movs	r0, #89	; 0x59
 800138e:	f7ff fdf1 	bl	8000f74 <send_cmd>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d11b      	bne.n	80013d0 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8001398:	21fc      	movs	r1, #252	; 0xfc
 800139a:	68b8      	ldr	r0, [r7, #8]
 800139c:	f7ff fd96 	bl	8000ecc <xmit_datablock>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00a      	beq.n	80013bc <disk_write+0xd0>
					break;
				buff += 512;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013ac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1ee      	bne.n	8001398 <disk_write+0xac>
 80013ba:	e000      	b.n	80013be <disk_write+0xd2>
					break;
 80013bc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 80013be:	21fd      	movs	r1, #253	; 0xfd
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fd83 	bl	8000ecc <xmit_datablock>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <disk_write+0xe4>
				count = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 80013d0:	f7ff fc77 	bl	8000cc2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80013d4:	f7ff fc96 	bl	8000d04 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bf14      	ite	ne
 80013de:	2301      	movne	r3, #1
 80013e0:	2300      	moveq	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000000 	.word	0x20000000
 80013f0:	200000f2 	.word	0x200000f2

080013f4 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b08b      	sub	sp, #44	; 0x2c
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	603a      	str	r2, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	460b      	mov	r3, r1
 8001402:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <disk_ioctl+0x1e>
		return RES_PARERR;
 800140e:	2304      	movs	r3, #4
 8001410:	e16a      	b.n	80016e8 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	2b07      	cmp	r3, #7
 800141c:	d127      	bne.n	800146e <disk_ioctl+0x7a>
		switch (*ptr) {
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d00e      	beq.n	8001444 <disk_ioctl+0x50>
 8001426:	2b02      	cmp	r3, #2
 8001428:	d012      	beq.n	8001450 <disk_ioctl+0x5c>
 800142a:	2b00      	cmp	r3, #0
 800142c:	d11b      	bne.n	8001466 <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 800142e:	f7ff fd0b 	bl	8000e48 <chk_power>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <disk_ioctl+0x48>
				power_off(); /* Power off */
 8001438:	f7ff fcfa 	bl	8000e30 <power_off>
			res = RES_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001442:	e14f      	b.n	80016e4 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8001444:	f7ff fca6 	bl	8000d94 <power_on>
			res = RES_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800144e:	e149      	b.n	80016e4 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8001450:	f7ff fcfa 	bl	8000e48 <chk_power>
 8001454:	4602      	mov	r2, r0
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	3301      	adds	r3, #1
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001464:	e13e      	b.n	80016e4 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8001466:	2304      	movs	r3, #4
 8001468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800146c:	e13a      	b.n	80016e4 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 800146e:	4ba0      	ldr	r3, [pc, #640]	; (80016f0 <disk_ioctl+0x2fc>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 800147c:	2303      	movs	r3, #3
 800147e:	e133      	b.n	80016e8 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8001480:	f7ff fc18 	bl	8000cb4 <SELECT>

		switch (ctrl) {
 8001484:	79bb      	ldrb	r3, [r7, #6]
 8001486:	2b35      	cmp	r3, #53	; 0x35
 8001488:	f200 811d 	bhi.w	80016c6 <disk_ioctl+0x2d2>
 800148c:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <disk_ioctl+0xa0>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	0800162f 	.word	0x0800162f
 8001498:	0800156d 	.word	0x0800156d
 800149c:	0800161f 	.word	0x0800161f
 80014a0:	080016c7 	.word	0x080016c7
 80014a4:	080016c7 	.word	0x080016c7
 80014a8:	080016c7 	.word	0x080016c7
 80014ac:	080016c7 	.word	0x080016c7
 80014b0:	080016c7 	.word	0x080016c7
 80014b4:	080016c7 	.word	0x080016c7
 80014b8:	080016c7 	.word	0x080016c7
 80014bc:	080016c7 	.word	0x080016c7
 80014c0:	080016c7 	.word	0x080016c7
 80014c4:	080016c7 	.word	0x080016c7
 80014c8:	080016c7 	.word	0x080016c7
 80014cc:	080016c7 	.word	0x080016c7
 80014d0:	080016c7 	.word	0x080016c7
 80014d4:	080016c7 	.word	0x080016c7
 80014d8:	080016c7 	.word	0x080016c7
 80014dc:	080016c7 	.word	0x080016c7
 80014e0:	080016c7 	.word	0x080016c7
 80014e4:	080016c7 	.word	0x080016c7
 80014e8:	080016c7 	.word	0x080016c7
 80014ec:	080016c7 	.word	0x080016c7
 80014f0:	080016c7 	.word	0x080016c7
 80014f4:	080016c7 	.word	0x080016c7
 80014f8:	080016c7 	.word	0x080016c7
 80014fc:	080016c7 	.word	0x080016c7
 8001500:	080016c7 	.word	0x080016c7
 8001504:	080016c7 	.word	0x080016c7
 8001508:	080016c7 	.word	0x080016c7
 800150c:	080016c7 	.word	0x080016c7
 8001510:	080016c7 	.word	0x080016c7
 8001514:	080016c7 	.word	0x080016c7
 8001518:	080016c7 	.word	0x080016c7
 800151c:	080016c7 	.word	0x080016c7
 8001520:	080016c7 	.word	0x080016c7
 8001524:	080016c7 	.word	0x080016c7
 8001528:	080016c7 	.word	0x080016c7
 800152c:	080016c7 	.word	0x080016c7
 8001530:	080016c7 	.word	0x080016c7
 8001534:	080016c7 	.word	0x080016c7
 8001538:	080016c7 	.word	0x080016c7
 800153c:	080016c7 	.word	0x080016c7
 8001540:	080016c7 	.word	0x080016c7
 8001544:	080016c7 	.word	0x080016c7
 8001548:	080016c7 	.word	0x080016c7
 800154c:	080016c7 	.word	0x080016c7
 8001550:	080016c7 	.word	0x080016c7
 8001554:	080016c7 	.word	0x080016c7
 8001558:	080016c7 	.word	0x080016c7
 800155c:	080016c7 	.word	0x080016c7
 8001560:	08001641 	.word	0x08001641
 8001564:	08001665 	.word	0x08001665
 8001568:	08001689 	.word	0x08001689
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800156c:	2100      	movs	r1, #0
 800156e:	2049      	movs	r0, #73	; 0x49
 8001570:	f7ff fd00 	bl	8000f74 <send_cmd>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 80a9 	bne.w	80016ce <disk_ioctl+0x2da>
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2110      	movs	r1, #16
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fc6c 	bl	8000e60 <rcvr_datablock>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 809f 	beq.w	80016ce <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8001590:	7b3b      	ldrb	r3, [r7, #12]
 8001592:	099b      	lsrs	r3, r3, #6
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b01      	cmp	r3, #1
 8001598:	d10e      	bne.n	80015b8 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800159a:	7d7b      	ldrb	r3, [r7, #21]
 800159c:	b29a      	uxth	r2, r3
 800159e:	7d3b      	ldrb	r3, [r7, #20]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	3301      	adds	r3, #1
 80015ac:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80015ae:	8bfb      	ldrh	r3, [r7, #30]
 80015b0:	029a      	lsls	r2, r3, #10
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e02e      	b.n	8001616 <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80015b8:	7c7b      	ldrb	r3, [r7, #17]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	7dbb      	ldrb	r3, [r7, #22]
 80015c2:	09db      	lsrs	r3, r3, #7
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4413      	add	r3, r2
 80015c8:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 80015ca:	7d7b      	ldrb	r3, [r7, #21]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f003 0306 	and.w	r3, r3, #6
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80015da:	3302      	adds	r3, #2
 80015dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80015e0:	7d3b      	ldrb	r3, [r7, #20]
 80015e2:	099b      	lsrs	r3, r3, #6
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	7cfb      	ldrb	r3, [r7, #19]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 80015f4:	7cbb      	ldrb	r3, [r7, #18]
 80015f6:	029b      	lsls	r3, r3, #10
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4413      	add	r3, r2
 8001602:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8001604:	3301      	adds	r3, #1
 8001606:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001608:	8bfa      	ldrh	r2, [r7, #30]
 800160a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800160e:	3b09      	subs	r3, #9
 8001610:	409a      	lsls	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800161c:	e057      	b.n	80016ce <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001624:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800162c:	e056      	b.n	80016dc <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 800162e:	f7ff fb95 	bl	8000d5c <wait_ready>
 8001632:	4603      	mov	r3, r0
 8001634:	2bff      	cmp	r3, #255	; 0xff
 8001636:	d14c      	bne.n	80016d2 <disk_ioctl+0x2de>
				res = RES_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800163e:	e048      	b.n	80016d2 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8001640:	2100      	movs	r1, #0
 8001642:	2049      	movs	r0, #73	; 0x49
 8001644:	f7ff fc96 	bl	8000f74 <send_cmd>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d143      	bne.n	80016d6 <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 800164e:	2110      	movs	r1, #16
 8001650:	6a38      	ldr	r0, [r7, #32]
 8001652:	f7ff fc05 	bl	8000e60 <rcvr_datablock>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d03c      	beq.n	80016d6 <disk_ioctl+0x2e2>
				res = RES_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001662:	e038      	b.n	80016d6 <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8001664:	2100      	movs	r1, #0
 8001666:	204a      	movs	r0, #74	; 0x4a
 8001668:	f7ff fc84 	bl	8000f74 <send_cmd>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d133      	bne.n	80016da <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8001672:	2110      	movs	r1, #16
 8001674:	6a38      	ldr	r0, [r7, #32]
 8001676:	f7ff fbf3 	bl	8000e60 <rcvr_datablock>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d02c      	beq.n	80016da <disk_ioctl+0x2e6>
				res = RES_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001686:	e028      	b.n	80016da <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8001688:	2100      	movs	r1, #0
 800168a:	207a      	movs	r0, #122	; 0x7a
 800168c:	f7ff fc72 	bl	8000f74 <send_cmd>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d117      	bne.n	80016c6 <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8001696:	2300      	movs	r3, #0
 8001698:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800169c:	e00b      	b.n	80016b6 <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 800169e:	6a3c      	ldr	r4, [r7, #32]
 80016a0:	1c63      	adds	r3, r4, #1
 80016a2:	623b      	str	r3, [r7, #32]
 80016a4:	f7ff fb2e 	bl	8000d04 <rcvr_spi>
 80016a8:	4603      	mov	r3, r0
 80016aa:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80016ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016b0:	3301      	adds	r3, #1
 80016b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d9ef      	bls.n	800169e <disk_ioctl+0x2aa>
				res = RES_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80016c4:	e00a      	b.n	80016dc <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 80016c6:	2304      	movs	r3, #4
 80016c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016cc:	e006      	b.n	80016dc <disk_ioctl+0x2e8>
			break;
 80016ce:	bf00      	nop
 80016d0:	e004      	b.n	80016dc <disk_ioctl+0x2e8>
			break;
 80016d2:	bf00      	nop
 80016d4:	e002      	b.n	80016dc <disk_ioctl+0x2e8>
			break;
 80016d6:	bf00      	nop
 80016d8:	e000      	b.n	80016dc <disk_ioctl+0x2e8>
			break;
 80016da:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 80016dc:	f7ff faf1 	bl	8000cc2 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 80016e0:	f7ff fb10 	bl	8000d04 <rcvr_spi>
	}

	return res;
 80016e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	372c      	adds	r7, #44	; 0x2c
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	20000000 	.word	0x20000000

080016f4 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <disk_timerproc+0x44>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
	if (n)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <disk_timerproc+0x1e>
		Timer1 = --n;
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	3b01      	subs	r3, #1
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <disk_timerproc+0x44>)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <disk_timerproc+0x48>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
	if (n)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <disk_timerproc+0x36>
		Timer2 = --n;
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	3b01      	subs	r3, #1
 8001722:	71fb      	strb	r3, [r7, #7]
 8001724:	4a05      	ldr	r2, [pc, #20]	; (800173c <disk_timerproc+0x48>)
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	7013      	strb	r3, [r2, #0]

}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	200000f0 	.word	0x200000f0
 800173c:	200000f1 	.word	0x200000f1

08001740 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <sdcard_systick_timerproc+0x2c>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	b29b      	uxth	r3, r3
 800174a:	3301      	adds	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <sdcard_systick_timerproc+0x2c>)
 8001750:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <sdcard_systick_timerproc+0x2c>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b09      	cmp	r3, #9
 800175a:	d904      	bls.n	8001766 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <sdcard_systick_timerproc+0x2c>)
 800175e:	2200      	movs	r2, #0
 8001760:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8001762:	f7ff ffc7 	bl	80016f4 <disk_timerproc>
	}
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000035c 	.word	0x2000035c

08001770 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	36c55cc0 	.word	0x36c55cc0

08001784 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3301      	adds	r3, #1
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	b21a      	sxth	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80017a6:	89fb      	ldrh	r3, [r7, #14]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3303      	adds	r3, #3
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	3202      	adds	r2, #2
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	3201      	adds	r2, #1
 80017da:	7812      	ldrb	r2, [r2, #0]
 80017dc:	4313      	orrs	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80017ec:	68fb      	ldr	r3, [r7, #12]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	887a      	ldrh	r2, [r7, #2]
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	701a      	strb	r2, [r3, #0]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	701a      	strb	r2, [r3, #0]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00d      	beq.n	80018be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	1c53      	adds	r3, r2, #1
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	1c59      	adds	r1, r3, #1
 80018ac:	6179      	str	r1, [r7, #20]
 80018ae:	7812      	ldrb	r2, [r2, #0]
 80018b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f1      	bne.n	80018a2 <mem_cpy+0x1a>
	}
}
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	617a      	str	r2, [r7, #20]
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f3      	bne.n	80018da <mem_set+0x10>
}
 80018f2:	bf00      	nop
 80018f4:	371c      	adds	r7, #28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 80018fe:	b480      	push	{r7}
 8001900:	b089      	sub	sp, #36	; 0x24
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	61fa      	str	r2, [r7, #28]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4619      	mov	r1, r3
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	61ba      	str	r2, [r7, #24]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	1acb      	subs	r3, r1, r3
 800192a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <mem_cmp+0x40>
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0eb      	beq.n	8001916 <mem_cmp+0x18>

	return r;
 800193e:	697b      	ldr	r3, [r7, #20]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3724      	adds	r7, #36	; 0x24
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8001956:	e002      	b.n	800195e <chk_chr+0x12>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3301      	adds	r3, #1
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <chk_chr+0x26>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4293      	cmp	r3, r2
 8001970:	d1f2      	bne.n	8001958 <chk_chr+0xc>
	return *str;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	781b      	ldrb	r3, [r3, #0]
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 800198c:	2281      	movs	r2, #129	; 0x81
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	4293      	cmp	r3, r2
 8001992:	d30f      	bcc.n	80019b4 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8001994:	229f      	movs	r2, #159	; 0x9f
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	4293      	cmp	r3, r2
 800199a:	d801      	bhi.n	80019a0 <dbc_1st+0x1e>
 800199c:	2301      	movs	r3, #1
 800199e:	e00a      	b.n	80019b6 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 80019a0:	22e0      	movs	r2, #224	; 0xe0
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d305      	bcc.n	80019b4 <dbc_1st+0x32>
 80019a8:	22fc      	movs	r2, #252	; 0xfc
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d801      	bhi.n	80019b4 <dbc_1st+0x32>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 80019cc:	2240      	movs	r2, #64	; 0x40
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d319      	bcc.n	8001a08 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 80019d4:	227e      	movs	r2, #126	; 0x7e
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	4293      	cmp	r3, r2
 80019da:	d801      	bhi.n	80019e0 <dbc_2nd+0x1e>
 80019dc:	2301      	movs	r3, #1
 80019de:	e014      	b.n	8001a0a <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d305      	bcc.n	80019f4 <dbc_2nd+0x32>
 80019e8:	22fc      	movs	r2, #252	; 0xfc
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d801      	bhi.n	80019f4 <dbc_2nd+0x32>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e00a      	b.n	8001a0a <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 80019f4:	2200      	movs	r2, #0
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d305      	bcc.n	8001a08 <dbc_2nd+0x46>
 80019fc:	2200      	movs	r2, #0
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d801      	bhi.n	8001a08 <dbc_2nd+0x46>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	78db      	ldrb	r3, [r3, #3]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d02c      	beq.n	8001a84 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7858      	ldrb	r0, [r3, #1]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f7ff fc57 	bl	80012ec <disk_write>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d11d      	bne.n	8001a80 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	1ad2      	subs	r2, r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d213      	bcs.n	8001a84 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	789b      	ldrb	r3, [r3, #2]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d10f      	bne.n	8001a84 <sync_window+0x6e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7858      	ldrb	r0, [r3, #1]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	441a      	add	r2, r3
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f7ff fc37 	bl	80012ec <disk_write>
 8001a7e:	e001      	b.n	8001a84 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d01b      	beq.n	8001ade <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffb5 	bl	8001a16 <sync_window>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d113      	bne.n	8001ade <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7858      	ldrb	r0, [r3, #1]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	f7ff fba8 	bl	8001218 <disk_read>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff90 	bl	8001a16 <sync_window>
 8001af6:	4603      	mov	r3, r0
 8001af8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d158      	bne.n	8001bb2 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d148      	bne.n	8001b9a <sync_fs+0xb2>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	791b      	ldrb	r3, [r3, #4]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d144      	bne.n	8001b9a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3330      	adds	r3, #48	; 0x30
 8001b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fed5 	bl	80018ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3330      	adds	r3, #48	; 0x30
 8001b24:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001b28:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fe64 	bl	80017fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3330      	adds	r3, #48	; 0x30
 8001b36:	4921      	ldr	r1, [pc, #132]	; (8001bbc <sync_fs+0xd4>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fe79 	bl	8001830 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3330      	adds	r3, #48	; 0x30
 8001b42:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001b46:	491e      	ldr	r1, [pc, #120]	; (8001bc0 <sync_fs+0xd8>)
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fe71 	bl	8001830 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3330      	adds	r3, #48	; 0x30
 8001b52:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	f7ff fe67 	bl	8001830 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3330      	adds	r3, #48	; 0x30
 8001b66:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f7ff fe5d 	bl	8001830 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7858      	ldrb	r0, [r3, #1]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f7ff fbac 	bl	80012ec <disk_write>
			fs->fsi_flag = 0;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	785b      	ldrb	r3, [r3, #1]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fc26 	bl	80013f4 <disk_ioctl>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <sync_fs+0xca>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	41615252 	.word	0x41615252
 8001bc0:	61417272 	.word	0x61417272

08001bc4 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	3b02      	subs	r3, #2
 8001bd2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	3b02      	subs	r3, #2
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d301      	bcc.n	8001be4 <clst2sect+0x20>
 8001be0:	2300      	movs	r3, #0
 8001be2:	e008      	b.n	8001bf6 <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	895b      	ldrh	r3, [r3, #10]
 8001bec:	4619      	mov	r1, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	fb03 f301 	mul.w	r3, r3, r1
 8001bf4:	4413      	add	r3, r2
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d904      	bls.n	8001c22 <get_fat+0x20>
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d302      	bcc.n	8001c28 <get_fat+0x26>
		val = 1;	/* Internal error */
 8001c22:	2301      	movs	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e08c      	b.n	8001d42 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d045      	beq.n	8001cc2 <get_fat+0xc0>
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d05d      	beq.n	8001cf6 <get_fat+0xf4>
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d177      	bne.n	8001d2e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4413      	add	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	6a1a      	ldr	r2, [r3, #32]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	0a5b      	lsrs	r3, r3, #9
 8001c54:	4413      	add	r3, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	6938      	ldr	r0, [r7, #16]
 8001c5a:	f7ff ff18 	bl	8001a8e <move_window>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d167      	bne.n	8001d34 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	60fa      	str	r2, [r7, #12]
 8001c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4413      	add	r3, r2
 8001c72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c76:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	6a1a      	ldr	r2, [r3, #32]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	0a5b      	lsrs	r3, r3, #9
 8001c80:	4413      	add	r3, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	6938      	ldr	r0, [r7, #16]
 8001c86:	f7ff ff02 	bl	8001a8e <move_window>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d153      	bne.n	8001d38 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <get_fat+0xb6>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	e002      	b.n	8001cbe <get_fat+0xbc>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbe:	617b      	str	r3, [r7, #20]
			break;
 8001cc0:	e03f      	b.n	8001d42 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	6a1a      	ldr	r2, [r3, #32]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	4413      	add	r3, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6938      	ldr	r0, [r7, #16]
 8001cd0:	f7ff fedd 	bl	8001a8e <move_window>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d130      	bne.n	8001d3c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001ce8:	4413      	add	r3, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fd4a 	bl	8001784 <ld_word>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	617b      	str	r3, [r7, #20]
			break;
 8001cf4:	e025      	b.n	8001d42 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	6a1a      	ldr	r2, [r3, #32]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	09db      	lsrs	r3, r3, #7
 8001cfe:	4413      	add	r3, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	6938      	ldr	r0, [r7, #16]
 8001d04:	f7ff fec3 	bl	8001a8e <move_window>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d118      	bne.n	8001d40 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fd48 	bl	80017b4 <ld_dword>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d2a:	617b      	str	r3, [r7, #20]
			break;
 8001d2c:	e009      	b.n	8001d42 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8001d2e:	2301      	movs	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e006      	b.n	8001d42 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001d34:	bf00      	nop
 8001d36:	e004      	b.n	8001d42 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001d38:	bf00      	nop
 8001d3a:	e002      	b.n	8001d42 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001d3c:	bf00      	nop
 8001d3e:	e000      	b.n	8001d42 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001d40:	bf00      	nop
		}
	}

	return val;
 8001d42:	697b      	ldr	r3, [r7, #20]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	f240 80d6 	bls.w	8001f10 <put_fat+0x1c4>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	f080 80d0 	bcs.w	8001f10 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d073      	beq.n	8001e60 <put_fat+0x114>
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	f000 8091 	beq.w	8001ea0 <put_fat+0x154>
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	f040 80c6 	bne.w	8001f10 <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	085b      	lsrs	r3, r3, #1
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4413      	add	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a1a      	ldr	r2, [r3, #32]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	0a5b      	lsrs	r3, r3, #9
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff fe75 	bl	8001a8e <move_window>
 8001da4:	4603      	mov	r3, r0
 8001da6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001da8:	7ffb      	ldrb	r3, [r7, #31]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f040 80a9 	bne.w	8001f02 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	1c59      	adds	r1, r3, #1
 8001dba:	61b9      	str	r1, [r7, #24]
 8001dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc0:	4413      	add	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00d      	beq.n	8001dea <put_fat+0x9e>
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	b25a      	sxtb	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	4313      	orrs	r3, r2
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	e001      	b.n	8001dee <put_fat+0xa2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a1a      	ldr	r2, [r3, #32]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	0a5b      	lsrs	r3, r3, #9
 8001e00:	4413      	add	r3, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7ff fe42 	bl	8001a8e <move_window>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001e0e:	7ffb      	ldrb	r3, [r7, #31]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d178      	bne.n	8001f06 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e20:	4413      	add	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <put_fat+0xea>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	e00e      	b.n	8001e54 <put_fat+0x108>
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b25b      	sxtb	r3, r3
 8001e3c:	f023 030f 	bic.w	r3, r3, #15
 8001e40:	b25a      	sxtb	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b25b      	sxtb	r3, r3
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	b25b      	sxtb	r3, r3
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	b25b      	sxtb	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	70da      	strb	r2, [r3, #3]
			break;
 8001e5e:	e057      	b.n	8001f10 <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a1a      	ldr	r2, [r3, #32]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	4413      	add	r3, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff fe0e 	bl	8001a8e <move_window>
 8001e72:	4603      	mov	r3, r0
 8001e74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001e76:	7ffb      	ldrb	r3, [r7, #31]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d146      	bne.n	8001f0a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001e8a:	4413      	add	r3, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	b292      	uxth	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fcb1 	bl	80017fa <st_word>
			fs->wflag = 1;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	70da      	strb	r2, [r3, #3]
			break;
 8001e9e:	e037      	b.n	8001f10 <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a1a      	ldr	r2, [r3, #32]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	09db      	lsrs	r3, r3, #7
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff fdee 	bl	8001a8e <move_window>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001eb6:	7ffb      	ldrb	r3, [r7, #31]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d128      	bne.n	8001f0e <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fc6e 	bl	80017b4 <ld_dword>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001ede:	4323      	orrs	r3, r4
 8001ee0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001ef0:	4413      	add	r3, r2
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fc9b 	bl	8001830 <st_dword>
			fs->wflag = 1;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	70da      	strb	r2, [r3, #3]
			break;
 8001f00:	e006      	b.n	8001f10 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001f02:	bf00      	nop
 8001f04:	e004      	b.n	8001f10 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001f06:	bf00      	nop
 8001f08:	e002      	b.n	8001f10 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001f0a:	bf00      	nop
 8001f0c:	e000      	b.n	8001f10 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8001f0e:	bf00      	nop
		}
	}
	return res;
 8001f10:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd90      	pop	{r4, r7, pc}

08001f1a <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b088      	sub	sp, #32
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d904      	bls.n	8001f40 <remove_chain+0x26>
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d301      	bcc.n	8001f44 <remove_chain+0x2a>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e04b      	b.n	8001fdc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00c      	beq.n	8001f64 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8001f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	69b8      	ldr	r0, [r7, #24]
 8001f52:	f7ff fefb 	bl	8001d4c <put_fat>
 8001f56:	4603      	mov	r3, r0
 8001f58:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8001f5a:	7ffb      	ldrb	r3, [r7, #31]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <remove_chain+0x4a>
 8001f60:	7ffb      	ldrb	r3, [r7, #31]
 8001f62:	e03b      	b.n	8001fdc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7ff fe4b 	bl	8001c02 <get_fat>
 8001f6c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d031      	beq.n	8001fd8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <remove_chain+0x64>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e02e      	b.n	8001fdc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d101      	bne.n	8001f8a <remove_chain+0x70>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e028      	b.n	8001fdc <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	69b8      	ldr	r0, [r7, #24]
 8001f90:	f7ff fedc 	bl	8001d4c <put_fat>
 8001f94:	4603      	mov	r3, r0
 8001f96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8001f98:	7ffb      	ldrb	r3, [r7, #31]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <remove_chain+0x88>
 8001f9e:	7ffb      	ldrb	r3, [r7, #31]
 8001fa0:	e01c      	b.n	8001fdc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	3b02      	subs	r3, #2
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d20b      	bcs.n	8001fc8 <remove_chain+0xae>
			fs->free_clst++;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	791b      	ldrb	r3, [r3, #4]
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d3c6      	bcc.n	8001f64 <remove_chain+0x4a>
 8001fd6:	e000      	b.n	8001fda <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8001fd8:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10d      	bne.n	8002016 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <create_chain+0x2c>
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	429a      	cmp	r2, r3
 800200e:	d31b      	bcc.n	8002048 <create_chain+0x64>
 8002010:	2301      	movs	r3, #1
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	e018      	b.n	8002048 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fdf2 	bl	8001c02 <get_fat>
 800201e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d801      	bhi.n	800202a <create_chain+0x46>
 8002026:	2301      	movs	r3, #1
 8002028:	e0a9      	b.n	800217e <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d101      	bne.n	8002036 <create_chain+0x52>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	e0a3      	b.n	800217e <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d201      	bcs.n	8002044 <create_chain+0x60>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	e09c      	b.n	800217e <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <create_chain+0x70>
 8002050:	2300      	movs	r3, #0
 8002052:	e094      	b.n	800217e <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d129      	bne.n	80020b4 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	3301      	adds	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	429a      	cmp	r2, r3
 800206e:	d301      	bcc.n	8002074 <create_chain+0x90>
 8002070:	2302      	movs	r3, #2
 8002072:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8002074:	69f9      	ldr	r1, [r7, #28]
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fdc3 	bl	8001c02 <get_fat>
 800207c:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d003      	beq.n	800208c <create_chain+0xa8>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208a:	d101      	bne.n	8002090 <create_chain+0xac>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	e076      	b.n	800217e <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00e      	beq.n	80020b4 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d906      	bls.n	80020b0 <create_chain+0xcc>
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d201      	bcs.n	80020b0 <create_chain+0xcc>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d129      	bne.n	800210e <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3301      	adds	r3, #1
 80020c2:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d307      	bcc.n	80020de <create_chain+0xfa>
					ncl = 2;
 80020ce:	2302      	movs	r3, #2
 80020d0:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d901      	bls.n	80020de <create_chain+0xfa>
 80020da:	2300      	movs	r3, #0
 80020dc:	e04f      	b.n	800217e <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80020de:	69f9      	ldr	r1, [r7, #28]
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fd8e 	bl	8001c02 <get_fat>
 80020e6:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00e      	beq.n	800210c <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d003      	beq.n	80020fc <create_chain+0x118>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fa:	d101      	bne.n	8002100 <create_chain+0x11c>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	e03e      	b.n	800217e <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	429a      	cmp	r2, r3
 8002106:	d1da      	bne.n	80020be <create_chain+0xda>
 8002108:	2300      	movs	r3, #0
 800210a:	e038      	b.n	800217e <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 800210c:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800210e:	f04f 32ff 	mov.w	r2, #4294967295
 8002112:	69f9      	ldr	r1, [r7, #28]
 8002114:	6938      	ldr	r0, [r7, #16]
 8002116:	f7ff fe19 	bl	8001d4c <put_fat>
 800211a:	4603      	mov	r3, r0
 800211c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <create_chain+0x154>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	6938      	ldr	r0, [r7, #16]
 8002130:	f7ff fe0c 	bl	8001d4c <put_fat>
 8002134:	4603      	mov	r3, r0
 8002136:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002138:	7dfb      	ldrb	r3, [r7, #23]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d116      	bne.n	800216c <create_chain+0x188>
		fs->last_clst = ncl;
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	3b02      	subs	r3, #2
 800214e:	429a      	cmp	r2, r3
 8002150:	d804      	bhi.n	800215c <create_chain+0x178>
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	791b      	ldrb	r3, [r3, #4]
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	711a      	strb	r2, [r3, #4]
 800216a:	e007      	b.n	800217c <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d102      	bne.n	8002178 <create_chain+0x194>
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
 8002176:	e000      	b.n	800217a <create_chain+0x196>
 8002178:	2301      	movs	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800217c:	69fb      	ldr	r3, [r7, #28]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fc40 	bl	8001a16 <sync_window>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <dir_clear+0x1a>
 800219c:	2301      	movs	r3, #1
 800219e:	e036      	b.n	800220e <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fd0e 	bl	8001bc4 <clst2sect>
 80021a8:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3330      	adds	r3, #48	; 0x30
 80021b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fb85 	bl	80018ca <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3330      	adds	r3, #48	; 0x30
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	2301      	movs	r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e003      	b.n	80021d8 <dir_clear+0x52>
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4413      	add	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	895b      	ldrh	r3, [r3, #10]
 80021dc:	461a      	mov	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d20b      	bcs.n	80021fc <dir_clear+0x76>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7858      	ldrb	r0, [r3, #1]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	441a      	add	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	68f9      	ldr	r1, [r7, #12]
 80021f2:	f7ff f87b 	bl	80012ec <disk_write>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0e9      	beq.n	80021d0 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	895b      	ldrh	r3, [r3, #10]
 8002200:	461a      	mov	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	4293      	cmp	r3, r2
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800222c:	d204      	bcs.n	8002238 <dir_sdi+0x22>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <dir_sdi+0x26>
		return FR_INT_ERR;
 8002238:	2302      	movs	r3, #2
 800223a:	e063      	b.n	8002304 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <dir_sdi+0x46>
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d902      	bls.n	800225c <dir_sdi+0x46>
		clst = fs->dirbase;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10c      	bne.n	800227c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	8912      	ldrh	r2, [r2, #8]
 800226a:	4293      	cmp	r3, r2
 800226c:	d301      	bcc.n	8002272 <dir_sdi+0x5c>
 800226e:	2302      	movs	r3, #2
 8002270:	e048      	b.n	8002304 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	619a      	str	r2, [r3, #24]
 800227a:	e029      	b.n	80022d0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	895b      	ldrh	r3, [r3, #10]
 8002280:	025b      	lsls	r3, r3, #9
 8002282:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002284:	e019      	b.n	80022ba <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6979      	ldr	r1, [r7, #20]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fcb9 	bl	8001c02 <get_fat>
 8002290:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d101      	bne.n	800229e <dir_sdi+0x88>
 800229a:	2301      	movs	r3, #1
 800229c:	e032      	b.n	8002304 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d904      	bls.n	80022ae <dir_sdi+0x98>
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d301      	bcc.n	80022b2 <dir_sdi+0x9c>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e028      	b.n	8002304 <dir_sdi+0xee>
			ofs -= csz;
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d2e1      	bcs.n	8002286 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 80022c2:	6979      	ldr	r1, [r7, #20]
 80022c4:	6938      	ldr	r0, [r7, #16]
 80022c6:	f7ff fc7d 	bl	8001bc4 <clst2sect>
 80022ca:	4602      	mov	r2, r0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <dir_sdi+0xcc>
 80022de:	2302      	movs	r3, #2
 80022e0:	e010      	b.n	8002304 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	0a5b      	lsrs	r3, r3, #9
 80022ea:	441a      	add	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022fc:	441a      	add	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	3320      	adds	r3, #32
 8002322:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800232a:	d302      	bcc.n	8002332 <dir_next+0x26>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <dir_next+0x32>
 800233a:	2304      	movs	r3, #4
 800233c:	e078      	b.n	8002430 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002344:	2b00      	cmp	r3, #0
 8002346:	d166      	bne.n	8002416 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	8912      	ldrh	r2, [r2, #8]
 8002362:	4293      	cmp	r3, r2
 8002364:	d357      	bcc.n	8002416 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
 800236c:	2304      	movs	r3, #4
 800236e:	e05f      	b.n	8002430 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	0a5b      	lsrs	r3, r3, #9
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	8952      	ldrh	r2, [r2, #10]
 8002378:	3a01      	subs	r2, #1
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d14a      	bne.n	8002416 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	4619      	mov	r1, r3
 8002388:	4610      	mov	r0, r2
 800238a:	f7ff fc3a 	bl	8001c02 <get_fat>
 800238e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d801      	bhi.n	800239a <dir_next+0x8e>
 8002396:	2302      	movs	r3, #2
 8002398:	e04a      	b.n	8002430 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d101      	bne.n	80023a6 <dir_next+0x9a>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e044      	b.n	8002430 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d328      	bcc.n	8002402 <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d104      	bne.n	80023c0 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
 80023bc:	2304      	movs	r3, #4
 80023be:	e037      	b.n	8002430 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	4619      	mov	r1, r3
 80023c8:	4610      	mov	r0, r2
 80023ca:	f7ff fe0b 	bl	8001fe4 <create_chain>
 80023ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <dir_next+0xce>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e02a      	b.n	8002430 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <dir_next+0xd8>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e025      	b.n	8002430 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ea:	d101      	bne.n	80023f0 <dir_next+0xe4>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e01f      	b.n	8002430 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 80023f0:	6979      	ldr	r1, [r7, #20]
 80023f2:	6938      	ldr	r0, [r7, #16]
 80023f4:	f7ff fec7 	bl	8002186 <dir_clear>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <dir_next+0xf6>
 80023fe:	2301      	movs	r3, #1
 8002400:	e016      	b.n	8002430 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8002408:	6979      	ldr	r1, [r7, #20]
 800240a:	6938      	ldr	r0, [r7, #16]
 800240c:	f7ff fbda 	bl	8001bc4 <clst2sect>
 8002410:	4602      	mov	r2, r0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002428:	441a      	add	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8002448:	2100      	movs	r1, #0
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fee3 	bl	8002216 <dir_sdi>
 8002450:	4603      	mov	r3, r0
 8002452:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002454:	7dfb      	ldrb	r3, [r7, #23]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d12b      	bne.n	80024b2 <dir_alloc+0x7a>
		n = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	4619      	mov	r1, r3
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff fb12 	bl	8001a8e <move_window>
 800246a:	4603      	mov	r3, r0
 800246c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d11d      	bne.n	80024b0 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2be5      	cmp	r3, #229	; 0xe5
 800247c:	d004      	beq.n	8002488 <dir_alloc+0x50>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	3301      	adds	r3, #1
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d102      	bne.n	800249c <dir_alloc+0x64>
 8002496:	e00c      	b.n	80024b2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800249c:	2101      	movs	r1, #1
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ff34 	bl	800230c <dir_next>
 80024a4:	4603      	mov	r3, r0
 80024a6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0d7      	beq.n	800245e <dir_alloc+0x26>
 80024ae:	e000      	b.n	80024b2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80024b0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d101      	bne.n	80024bc <dir_alloc+0x84>
 80024b8:	2307      	movs	r3, #7
 80024ba:	75fb      	strb	r3, [r7, #23]
	return res;
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	331a      	adds	r3, #26
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff f955 	bl	8001784 <ld_word>
 80024da:	4603      	mov	r3, r0
 80024dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d109      	bne.n	80024fa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	3314      	adds	r3, #20
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f94a 	bl	8001784 <ld_word>
 80024f0:	4603      	mov	r3, r0
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	331a      	adds	r3, #26
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	b292      	uxth	r2, r2
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f96d 	bl	80017fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d109      	bne.n	800253c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f103 0214 	add.w	r2, r3, #20
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	b29b      	uxth	r3, r3
 8002534:	4619      	mov	r1, r3
 8002536:	4610      	mov	r0, r2
 8002538:	f7ff f95f 	bl	80017fa <st_word>
	}
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800254e:	2304      	movs	r3, #4
 8002550:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8002558:	e03c      	b.n	80025d4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	4619      	mov	r1, r3
 8002560:	6938      	ldr	r0, [r7, #16]
 8002562:	f7ff fa94 	bl	8001a8e <move_window>
 8002566:	4603      	mov	r3, r0
 8002568:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d136      	bne.n	80025de <dir_read+0x9a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	73fb      	strb	r3, [r7, #15]
		if (b == 0) {
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800257e:	2304      	movs	r3, #4
 8002580:	75fb      	strb	r3, [r7, #23]
 8002582:	e031      	b.n	80025e8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	330b      	adds	r3, #11
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002590:	73bb      	strb	r3, [r7, #14]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7bba      	ldrb	r2, [r7, #14]
 8002596:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2be5      	cmp	r3, #229	; 0xe5
 800259c:	d011      	beq.n	80025c2 <dir_read+0x7e>
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b2e      	cmp	r3, #46	; 0x2e
 80025a2:	d00e      	beq.n	80025c2 <dir_read+0x7e>
 80025a4:	7bbb      	ldrb	r3, [r7, #14]
 80025a6:	2b0f      	cmp	r3, #15
 80025a8:	d00b      	beq.n	80025c2 <dir_read+0x7e>
 80025aa:	7bbb      	ldrb	r3, [r7, #14]
 80025ac:	f023 0320 	bic.w	r3, r3, #32
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00f      	beq.n	80025e2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80025c2:	2100      	movs	r1, #0
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff fea1 	bl	800230c <dir_next>
 80025ca:	4603      	mov	r3, r0
 80025cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80025ce:	7dfb      	ldrb	r3, [r7, #23]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d108      	bne.n	80025e6 <dir_read+0xa2>
	while (dp->sect) {
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1be      	bne.n	800255a <dir_read+0x16>
 80025dc:	e004      	b.n	80025e8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80025de:	bf00      	nop
 80025e0:	e002      	b.n	80025e8 <dir_read+0xa4>
				break;
 80025e2:	bf00      	nop
 80025e4:	e000      	b.n	80025e8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80025e6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <dir_read+0xb0>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
	return res;
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800260c:	2100      	movs	r1, #0
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff fe01 	bl	8002216 <dir_sdi>
 8002614:	4603      	mov	r3, r0
 8002616:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <dir_find+0x24>
 800261e:	7dfb      	ldrb	r3, [r7, #23]
 8002620:	e03e      	b.n	80026a0 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	4619      	mov	r1, r3
 8002628:	6938      	ldr	r0, [r7, #16]
 800262a:	f7ff fa30 	bl	8001a8e <move_window>
 800262e:	4603      	mov	r3, r0
 8002630:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d12f      	bne.n	8002698 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <dir_find+0x4e>
 8002646:	2304      	movs	r3, #4
 8002648:	75fb      	strb	r3, [r7, #23]
 800264a:	e028      	b.n	800269e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	330b      	adds	r3, #11
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002658:	b2da      	uxtb	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	330b      	adds	r3, #11
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <dir_find+0x86>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69d8      	ldr	r0, [r3, #28]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3320      	adds	r3, #32
 8002676:	220b      	movs	r2, #11
 8002678:	4619      	mov	r1, r3
 800267a:	f7ff f940 	bl	80018fe <mem_cmp>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8002684:	2100      	movs	r1, #0
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff fe40 	bl	800230c <dir_next>
 800268c:	4603      	mov	r3, r0
 800268e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8002690:	7dfb      	ldrb	r3, [r7, #23]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0c5      	beq.n	8002622 <dir_find+0x24>
 8002696:	e002      	b.n	800269e <dir_find+0xa0>
		if (res != FR_OK) break;
 8002698:	bf00      	nop
 800269a:	e000      	b.n	800269e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800269c:	bf00      	nop

	return res;
 800269e:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80026b6:	2101      	movs	r1, #1
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff febd 	bl	8002438 <dir_alloc>
 80026be:	4603      	mov	r3, r0
 80026c0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d11c      	bne.n	8002702 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	4619      	mov	r1, r3
 80026ce:	68b8      	ldr	r0, [r7, #8]
 80026d0:	f7ff f9dd 	bl	8001a8e <move_window>
 80026d4:	4603      	mov	r3, r0
 80026d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d111      	bne.n	8002702 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	2220      	movs	r2, #32
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f8ef 	bl	80018ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69d8      	ldr	r0, [r3, #28]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3320      	adds	r3, #32
 80026f4:	220b      	movs	r2, #11
 80026f6:	4619      	mov	r1, r3
 80026f8:	f7ff f8c6 	bl	8001888 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2201      	movs	r2, #1
 8002700:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8002702:	7bfb      	ldrb	r3, [r7, #15]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2200      	movs	r2, #0
 800271a:	725a      	strb	r2, [r3, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d052      	beq.n	80027ca <get_fileinfo+0xbe>
		fno->fname[di] = 0;	/* Terminate the LFN */
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
	}

#else	/* Non-LFN configuration */
	si = di = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	617b      	str	r3, [r7, #20]
	while (si < 11) {		/* Copy name body and extension */
 800272c:	e021      	b.n	8002772 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[si++];
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69da      	ldr	r2, [r3, #28]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	1c59      	adds	r1, r3, #1
 8002736:	6179      	str	r1, [r7, #20]
 8002738:	4413      	add	r3, r2
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;		/* Skip padding spaces */
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b20      	cmp	r3, #32
 8002742:	d100      	bne.n	8002746 <get_fileinfo+0x3a>
 8002744:	e015      	b.n	8002772 <get_fileinfo+0x66>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d101      	bne.n	8002750 <get_fileinfo+0x44>
 800274c:	23e5      	movs	r3, #229	; 0xe5
 800274e:	73fb      	strb	r3, [r7, #15]
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b09      	cmp	r3, #9
 8002754:	d106      	bne.n	8002764 <get_fileinfo+0x58>
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	613a      	str	r2, [r7, #16]
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	4413      	add	r3, r2
 8002760:	222e      	movs	r2, #46	; 0x2e
 8002762:	725a      	strb	r2, [r3, #9]
		fno->fname[di++] = c;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	613a      	str	r2, [r7, #16]
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	4413      	add	r3, r2
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	725a      	strb	r2, [r3, #9]
	while (si < 11) {		/* Copy name body and extension */
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b0a      	cmp	r3, #10
 8002776:	d9da      	bls.n	800272e <get_fileinfo+0x22>
	}
	fno->fname[di] = 0;
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	3309      	adds	r3, #9
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	7ada      	ldrb	r2, [r3, #11]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	331c      	adds	r3, #28
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff f80d 	bl	80017b4 <ld_dword>
 800279a:	4602      	mov	r2, r0
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	601a      	str	r2, [r3, #0]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	3316      	adds	r3, #22
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe ffec 	bl	8001784 <ld_word>
 80027ac:	4603      	mov	r3, r0
 80027ae:	461a      	mov	r2, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	80da      	strh	r2, [r3, #6]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	3318      	adds	r3, #24
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe ffe2 	bl	8001784 <ld_word>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	809a      	strh	r2, [r3, #4]
 80027c8:	e000      	b.n	80027cc <get_fileinfo+0xc0>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 80027ca:	bf00      	nop
}
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3320      	adds	r3, #32
 80027e8:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 80027ea:	220b      	movs	r2, #11
 80027ec:	2120      	movs	r1, #32
 80027ee:	6938      	ldr	r0, [r7, #16]
 80027f0:	f7ff f86b 	bl	80018ca <mem_set>
	si = i = 0; ni = 8;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61bb      	str	r3, [r7, #24]
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	2308      	movs	r3, #8
 80027fe:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	61fa      	str	r2, [r7, #28]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4413      	add	r3, r2
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002814:	2b20      	cmp	r3, #32
 8002816:	d97c      	bls.n	8002912 <create_name+0x13e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800281c:	2b2f      	cmp	r3, #47	; 0x2f
 800281e:	d007      	beq.n	8002830 <create_name+0x5c>
 8002820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002824:	2b5c      	cmp	r3, #92	; 0x5c
 8002826:	d110      	bne.n	800284a <create_name+0x76>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002828:	e002      	b.n	8002830 <create_name+0x5c>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3301      	adds	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	4413      	add	r3, r2
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b2f      	cmp	r3, #47	; 0x2f
 800283a:	d0f6      	beq.n	800282a <create_name+0x56>
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4413      	add	r3, r2
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b5c      	cmp	r3, #92	; 0x5c
 8002846:	d0f0      	beq.n	800282a <create_name+0x56>
			break;
 8002848:	e064      	b.n	8002914 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 800284a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800284e:	2b2e      	cmp	r3, #46	; 0x2e
 8002850:	d003      	beq.n	800285a <create_name+0x86>
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	429a      	cmp	r2, r3
 8002858:	d30d      	bcc.n	8002876 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	2b0b      	cmp	r3, #11
 800285e:	d003      	beq.n	8002868 <create_name+0x94>
 8002860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002864:	2b2e      	cmp	r3, #46	; 0x2e
 8002866:	d001      	beq.n	800286c <create_name+0x98>
 8002868:	2306      	movs	r3, #6
 800286a:	e06f      	b.n	800294c <create_name+0x178>
			i = 8; ni = 11;				/* Enter file extension field */
 800286c:	2308      	movs	r3, #8
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	230b      	movs	r3, #11
 8002872:	623b      	str	r3, [r7, #32]
			continue;
 8002874:	e04c      	b.n	8002910 <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8002876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f881 	bl	8001982 <dbc_1st>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d024      	beq.n	80028d0 <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	61fa      	str	r2, [r7, #28]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4413      	add	r3, r2
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff f893 	bl	80019c2 <dbc_2nd>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <create_name+0xd8>
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d301      	bcc.n	80028b0 <create_name+0xdc>
 80028ac:	2306      	movs	r3, #6
 80028ae:	e04d      	b.n	800294c <create_name+0x178>
			sfn[i++] = c;
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	61ba      	str	r2, [r7, #24]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4413      	add	r3, r2
 80028ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80028be:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	61ba      	str	r2, [r7, #24]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	e797      	b.n	8002800 <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80028d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028d4:	4619      	mov	r1, r3
 80028d6:	481f      	ldr	r0, [pc, #124]	; (8002954 <create_name+0x180>)
 80028d8:	f7ff f838 	bl	800194c <chk_chr>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <create_name+0x112>
 80028e2:	2306      	movs	r3, #6
 80028e4:	e032      	b.n	800294c <create_name+0x178>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80028e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ea:	2b60      	cmp	r3, #96	; 0x60
 80028ec:	d908      	bls.n	8002900 <create_name+0x12c>
 80028ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028f2:	2b7a      	cmp	r3, #122	; 0x7a
 80028f4:	d804      	bhi.n	8002900 <create_name+0x12c>
 80028f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028fa:	3b20      	subs	r3, #32
 80028fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	61ba      	str	r2, [r7, #24]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4413      	add	r3, r2
 800290a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800290e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8002910:	e776      	b.n	8002800 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002912:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	441a      	add	r2, r3
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <create_name+0x154>
 8002924:	2306      	movs	r3, #6
 8002926:	e011      	b.n	800294c <create_name+0x178>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2be5      	cmp	r3, #229	; 0xe5
 800292e:	d102      	bne.n	8002936 <create_name+0x162>
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2205      	movs	r2, #5
 8002934:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800293a:	2b20      	cmp	r3, #32
 800293c:	d801      	bhi.n	8002942 <create_name+0x16e>
 800293e:	2204      	movs	r2, #4
 8002940:	e000      	b.n	8002944 <create_name+0x170>
 8002942:	2200      	movs	r2, #0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	330b      	adds	r3, #11
 8002948:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800294a:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 800294c:	4618      	mov	r0, r3
 800294e:	3728      	adds	r7, #40	; 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	0800b540 	.word	0x0800b540

08002958 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002968:	e002      	b.n	8002970 <follow_path+0x18>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b2f      	cmp	r3, #47	; 0x2f
 8002976:	d0f8      	beq.n	800296a <follow_path+0x12>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b5c      	cmp	r3, #92	; 0x5c
 800297e:	d0f4      	beq.n	800296a <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b1f      	cmp	r3, #31
 800298c:	d80a      	bhi.n	80029a4 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2280      	movs	r2, #128	; 0x80
 8002992:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8002996:	2100      	movs	r1, #0
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff fc3c 	bl	8002216 <dir_sdi>
 800299e:	4603      	mov	r3, r0
 80029a0:	75fb      	strb	r3, [r7, #23]
 80029a2:	e043      	b.n	8002a2c <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80029a4:	463b      	mov	r3, r7
 80029a6:	4619      	mov	r1, r3
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff13 	bl	80027d4 <create_name>
 80029ae:	4603      	mov	r3, r0
 80029b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d134      	bne.n	8002a22 <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fe20 	bl	80025fe <dir_find>
 80029be:	4603      	mov	r3, r0
 80029c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80029c8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d127      	bne.n	8002a26 <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d122      	bne.n	8002a26 <follow_path+0xce>
 80029e0:	2305      	movs	r3, #5
 80029e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80029e4:	e01f      	b.n	8002a26 <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d11c      	bne.n	8002a2a <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	799b      	ldrb	r3, [r3, #6]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d102      	bne.n	8002a02 <follow_path+0xaa>
				res = FR_NO_PATH; break;
 80029fc:	2305      	movs	r3, #5
 80029fe:	75fb      	strb	r3, [r7, #23]
 8002a00:	e014      	b.n	8002a2c <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a10:	4413      	add	r3, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	6938      	ldr	r0, [r7, #16]
 8002a16:	f7ff fd56 	bl	80024c6 <ld_clust>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002a20:	e7c0      	b.n	80029a4 <follow_path+0x4c>
			if (res != FR_OK) break;
 8002a22:	bf00      	nop
 8002a24:	e002      	b.n	8002a2c <follow_path+0xd4>
				break;
 8002a26:	bf00      	nop
 8002a28:	e000      	b.n	8002a2c <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002a2a:	bf00      	nop
			}
		}
	}

	return res;
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b089      	sub	sp, #36	; 0x24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <get_ldnumber+0x22>
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	e02d      	b.n	8002ab4 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	61fa      	str	r2, [r7, #28]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d902      	bls.n	8002a6e <get_ldnumber+0x38>
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b3a      	cmp	r3, #58	; 0x3a
 8002a6c:	d1f4      	bne.n	8002a58 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b3a      	cmp	r3, #58	; 0x3a
 8002a72:	d11c      	bne.n	8002aae <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8002a74:	2301      	movs	r3, #1
 8002a76:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b2f      	cmp	r3, #47	; 0x2f
 8002a7e:	d90c      	bls.n	8002a9a <get_ldnumber+0x64>
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b39      	cmp	r3, #57	; 0x39
 8002a86:	d808      	bhi.n	8002a9a <get_ldnumber+0x64>
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d103      	bne.n	8002a9a <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	3b30      	subs	r3, #48	; 0x30
 8002a98:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	dc04      	bgt.n	8002aaa <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	e002      	b.n	8002ab4 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8002ab2:	697b      	ldr	r3, [r7, #20]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3724      	adds	r7, #36	; 0x24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	70da      	strb	r2, [r3, #3]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe ffd7 	bl	8001a8e <move_window>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <check_fs+0x2a>
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	e038      	b.n	8002b5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3330      	adds	r3, #48	; 0x30
 8002aee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe fe46 	bl	8001784 <ld_word>
 8002af8:	4603      	mov	r3, r0
 8002afa:	461a      	mov	r2, r3
 8002afc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <check_fs+0x48>
 8002b04:	2303      	movs	r3, #3
 8002b06:	e029      	b.n	8002b5c <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b0e:	2be9      	cmp	r3, #233	; 0xe9
 8002b10:	d009      	beq.n	8002b26 <check_fs+0x66>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b18:	2beb      	cmp	r3, #235	; 0xeb
 8002b1a:	d004      	beq.n	8002b26 <check_fs+0x66>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b22:	2be8      	cmp	r3, #232	; 0xe8
 8002b24:	d119      	bne.n	8002b5a <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3330      	adds	r3, #48	; 0x30
 8002b2a:	3336      	adds	r3, #54	; 0x36
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	490d      	ldr	r1, [pc, #52]	; (8002b64 <check_fs+0xa4>)
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe fee4 	bl	80018fe <mem_cmp>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <check_fs+0x80>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e00d      	b.n	8002b5c <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3330      	adds	r3, #48	; 0x30
 8002b44:	3352      	adds	r3, #82	; 0x52
 8002b46:	2205      	movs	r2, #5
 8002b48:	4907      	ldr	r1, [pc, #28]	; (8002b68 <check_fs+0xa8>)
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fed7 	bl	80018fe <mem_cmp>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <check_fs+0x9a>
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8002b5a:	2302      	movs	r3, #2
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	0800b550 	.word	0x0800b550
 8002b68:	0800b554 	.word	0x0800b554

08002b6c <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b096      	sub	sp, #88	; 0x58
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7ff ff58 	bl	8002a36 <get_ldnumber>
 8002b86:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	da01      	bge.n	8002b92 <find_volume+0x26>
 8002b8e:	230b      	movs	r3, #11
 8002b90:	e238      	b.n	8003004 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8002b92:	4aa8      	ldr	r2, [pc, #672]	; (8002e34 <find_volume+0x2c8>)
 8002b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <find_volume+0x3a>
 8002ba2:	230c      	movs	r3, #12
 8002ba4:	e22e      	b.n	8003004 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002baa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	f023 0301 	bic.w	r3, r3, #1
 8002bb2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8002bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01a      	beq.n	8002bf2 <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fe fb13 	bl	80011ec <disk_status>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002bcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10c      	bne.n	8002bf2 <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <find_volume+0x82>
 8002bde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8002bea:	230a      	movs	r3, #10
 8002bec:	e20a      	b.n	8003004 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e208      	b.n	8003004 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8002c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c02:	785b      	ldrb	r3, [r3, #1]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fa07 	bl	8001018 <disk_initialize>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002c10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e1f1      	b.n	8003004 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <find_volume+0xca>
 8002c26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8002c32:	230a      	movs	r3, #10
 8002c34:	e1e6      	b.n	8003004 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002c3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002c3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c3e:	f7ff ff3f 	bl	8002ac0 <check_fs>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002c48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d14b      	bne.n	8002ce8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002c50:	2300      	movs	r3, #0
 8002c52:	643b      	str	r3, [r7, #64]	; 0x40
 8002c54:	e01f      	b.n	8002c96 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002c64:	4413      	add	r3, r2
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d006      	beq.n	8002c80 <find_volume+0x114>
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	3308      	adds	r3, #8
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe fd9c 	bl	80017b4 <ld_dword>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	e000      	b.n	8002c82 <find_volume+0x116>
 8002c80:	2200      	movs	r2, #0
 8002c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c92:	3301      	adds	r3, #1
 8002c94:	643b      	str	r3, [r7, #64]	; 0x40
 8002c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d9dc      	bls.n	8002c56 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8002ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <find_volume+0x140>
 8002ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8002cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002cba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <find_volume+0x162>
 8002cc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002cc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cc6:	f7ff fefb 	bl	8002ac0 <check_fs>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	e000      	b.n	8002cd0 <find_volume+0x164>
 8002cce:	2303      	movs	r3, #3
 8002cd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002cd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d905      	bls.n	8002ce8 <find_volume+0x17c>
 8002cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cde:	3301      	adds	r3, #1
 8002ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d9e1      	bls.n	8002cac <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d101      	bne.n	8002cf4 <find_volume+0x188>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e187      	b.n	8003004 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d901      	bls.n	8002d00 <find_volume+0x194>
 8002cfc:	230d      	movs	r3, #13
 8002cfe:	e181      	b.n	8003004 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d02:	3330      	adds	r3, #48	; 0x30
 8002d04:	330b      	adds	r3, #11
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fd3c 	bl	8001784 <ld_word>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d12:	d001      	beq.n	8002d18 <find_volume+0x1ac>
 8002d14:	230d      	movs	r3, #13
 8002d16:	e175      	b.n	8003004 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	3330      	adds	r3, #48	; 0x30
 8002d1c:	3316      	adds	r3, #22
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fd30 	bl	8001784 <ld_word>
 8002d24:	4603      	mov	r3, r0
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <find_volume+0x1d0>
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	3330      	adds	r3, #48	; 0x30
 8002d32:	3324      	adds	r3, #36	; 0x24
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe fd3d 	bl	80017b4 <ld_dword>
 8002d3a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8002d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d40:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	789b      	ldrb	r3, [r3, #2]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d005      	beq.n	8002d60 <find_volume+0x1f4>
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	789b      	ldrb	r3, [r3, #2]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d001      	beq.n	8002d60 <find_volume+0x1f4>
 8002d5c:	230d      	movs	r3, #13
 8002d5e:	e151      	b.n	8003004 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	789b      	ldrb	r3, [r3, #2]
 8002d64:	461a      	mov	r2, r3
 8002d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d68:	fb02 f303 	mul.w	r3, r2, r3
 8002d6c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d78:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	895b      	ldrh	r3, [r3, #10]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <find_volume+0x228>
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	895b      	ldrh	r3, [r3, #10]
 8002d86:	461a      	mov	r2, r3
 8002d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8a:	895b      	ldrh	r3, [r3, #10]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <find_volume+0x22c>
 8002d94:	230d      	movs	r3, #13
 8002d96:	e135      	b.n	8003004 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	3330      	adds	r3, #48	; 0x30
 8002d9c:	3311      	adds	r3, #17
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fcf0 	bl	8001784 <ld_word>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461a      	mov	r2, r3
 8002da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002daa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dae:	891b      	ldrh	r3, [r3, #8]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <find_volume+0x252>
 8002dba:	230d      	movs	r3, #13
 8002dbc:	e122      	b.n	8003004 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	3330      	adds	r3, #48	; 0x30
 8002dc2:	3313      	adds	r3, #19
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe fcdd 	bl	8001784 <ld_word>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d106      	bne.n	8002de2 <find_volume+0x276>
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	3330      	adds	r3, #48	; 0x30
 8002dd8:	3320      	adds	r3, #32
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fcea 	bl	80017b4 <ld_dword>
 8002de0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	3330      	adds	r3, #48	; 0x30
 8002de6:	330e      	adds	r3, #14
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe fccb 	bl	8001784 <ld_word>
 8002dee:	4603      	mov	r3, r0
 8002df0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <find_volume+0x290>
 8002df8:	230d      	movs	r3, #13
 8002dfa:	e103      	b.n	8003004 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002dfc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e00:	4413      	add	r3, r2
 8002e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e04:	8912      	ldrh	r2, [r2, #8]
 8002e06:	0912      	lsrs	r2, r2, #4
 8002e08:	b292      	uxth	r2, r2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d201      	bcs.n	8002e1a <find_volume+0x2ae>
 8002e16:	230d      	movs	r3, #13
 8002e18:	e0f4      	b.n	8003004 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e22:	8952      	ldrh	r2, [r2, #10]
 8002e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <find_volume+0x2cc>
 8002e30:	230d      	movs	r3, #13
 8002e32:	e0e7      	b.n	8003004 <find_volume+0x498>
 8002e34:	200000f4 	.word	0x200000f4
		fmt = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	4a72      	ldr	r2, [pc, #456]	; (800300c <find_volume+0x4a0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d802      	bhi.n	8002e4c <find_volume+0x2e0>
 8002e46:	2303      	movs	r3, #3
 8002e48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d802      	bhi.n	8002e5c <find_volume+0x2f0>
 8002e56:	2302      	movs	r3, #2
 8002e58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d802      	bhi.n	8002e6c <find_volume+0x300>
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8002e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <find_volume+0x30c>
 8002e74:	230d      	movs	r3, #13
 8002e76:	e0c5      	b.n	8003004 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	1c9a      	adds	r2, r3, #2
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e84:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002e86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e8a:	441a      	add	r2, r3
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8002e90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	441a      	add	r2, r3
 8002e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e98:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8002e9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d11e      	bne.n	8002ee0 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea4:	3330      	adds	r3, #48	; 0x30
 8002ea6:	332a      	adds	r3, #42	; 0x2a
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe fc6b 	bl	8001784 <ld_word>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <find_volume+0x34c>
 8002eb4:	230d      	movs	r3, #13
 8002eb6:	e0a5      	b.n	8003004 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	891b      	ldrh	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <find_volume+0x358>
 8002ec0:	230d      	movs	r3, #13
 8002ec2:	e09f      	b.n	8003004 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec6:	3330      	adds	r3, #48	; 0x30
 8002ec8:	332c      	adds	r3, #44	; 0x2c
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fc72 	bl	80017b4 <ld_dword>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ede:	e01f      	b.n	8002f20 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee2:	891b      	ldrh	r3, [r3, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <find_volume+0x380>
 8002ee8:	230d      	movs	r3, #13
 8002eea:	e08b      	b.n	8003004 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef2:	441a      	add	r2, r3
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002ef8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d103      	bne.n	8002f08 <find_volume+0x39c>
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	e00a      	b.n	8002f1e <find_volume+0x3b2>
 8002f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	085a      	lsrs	r2, r3, #1
 8002f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8002f1e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f26:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f2a:	0a5b      	lsrs	r3, r3, #9
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d201      	bcs.n	8002f34 <find_volume+0x3c8>
 8002f30:	230d      	movs	r3, #13
 8002f32:	e067      	b.n	8003004 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f36:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3a:	611a      	str	r2, [r3, #16]
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f42:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8002f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8002f4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d149      	bne.n	8002fe6 <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8002f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f54:	3330      	adds	r3, #48	; 0x30
 8002f56:	3330      	adds	r3, #48	; 0x30
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fc13 	bl	8001784 <ld_word>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d140      	bne.n	8002fe6 <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f66:	3301      	adds	r3, #1
 8002f68:	4619      	mov	r1, r3
 8002f6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f6c:	f7fe fd8f 	bl	8001a8e <move_window>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d137      	bne.n	8002fe6 <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	2200      	movs	r2, #0
 8002f7a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7e:	3330      	adds	r3, #48	; 0x30
 8002f80:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe fbfd 	bl	8001784 <ld_word>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d127      	bne.n	8002fe6 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	3330      	adds	r3, #48	; 0x30
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe fc0a 	bl	80017b4 <ld_dword>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <find_volume+0x4a4>)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d11e      	bne.n	8002fe6 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	3330      	adds	r3, #48	; 0x30
 8002fac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fe fbff 	bl	80017b4 <ld_dword>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	4b16      	ldr	r3, [pc, #88]	; (8003014 <find_volume+0x4a8>)
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d113      	bne.n	8002fe6 <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	3330      	adds	r3, #48	; 0x30
 8002fc2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe fbf4 	bl	80017b4 <ld_dword>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	3330      	adds	r3, #48	; 0x30
 8002fd6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fbea 	bl	80017b4 <ld_dword>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002fec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <find_volume+0x4ac>)
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	4b08      	ldr	r3, [pc, #32]	; (8003018 <find_volume+0x4ac>)
 8002ff8:	801a      	strh	r2, [r3, #0]
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <find_volume+0x4ac>)
 8002ffc:	881a      	ldrh	r2, [r3, #0]
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3758      	adds	r7, #88	; 0x58
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	0ffffff5 	.word	0x0ffffff5
 8003010:	41615252 	.word	0x41615252
 8003014:	61417272 	.word	0x61417272
 8003018:	200000f8 	.word	0x200000f8

0800301c <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8003026:	2309      	movs	r3, #9
 8003028:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01c      	beq.n	800306a <validate+0x4e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d018      	beq.n	800306a <validate+0x4e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d013      	beq.n	800306a <validate+0x4e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	889a      	ldrh	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	88db      	ldrh	r3, [r3, #6]
 800304c:	429a      	cmp	r2, r3
 800304e:	d10c      	bne.n	800306a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe f8c8 	bl	80011ec <disk_status>
 800305c:	4603      	mov	r3, r0
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <validate+0x4e>
			res = FR_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d102      	bne.n	8003076 <validate+0x5a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	e000      	b.n	8003078 <validate+0x5c>
 8003076:	2300      	movs	r3, #0
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	6013      	str	r3, [r2, #0]
	return res;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800309a:	f107 0310 	add.w	r3, r7, #16
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fcc9 	bl	8002a36 <get_ldnumber>
 80030a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	da01      	bge.n	80030b0 <f_mount+0x28>
 80030ac:	230b      	movs	r3, #11
 80030ae:	e025      	b.n	80030fc <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80030b0:	4a14      	ldr	r2, [pc, #80]	; (8003104 <f_mount+0x7c>)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	490b      	ldr	r1, [pc, #44]	; (8003104 <f_mount+0x7c>)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <f_mount+0x5e>
 80030e2:	2300      	movs	r3, #0
 80030e4:	e00a      	b.n	80030fc <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80030e6:	f107 010c 	add.w	r1, r7, #12
 80030ea:	f107 0308 	add.w	r3, r7, #8
 80030ee:	2200      	movs	r2, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fd3b 	bl	8002b6c <find_volume>
 80030f6:	4603      	mov	r3, r0
 80030f8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	200000f4 	.word	0x200000f4

08003108 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b099      	sub	sp, #100	; 0x64
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	4613      	mov	r3, r2
 8003114:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <f_open+0x18>
 800311c:	2309      	movs	r3, #9
 800311e:	e172      	b.n	8003406 <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003126:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8003128:	79fa      	ldrb	r2, [r7, #7]
 800312a:	f107 0114 	add.w	r1, r7, #20
 800312e:	f107 0308 	add.w	r3, r7, #8
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fd1a 	bl	8002b6c <find_volume>
 8003138:	4603      	mov	r3, r0
 800313a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800313e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003142:	2b00      	cmp	r3, #0
 8003144:	f040 8156 	bne.w	80033f4 <f_open+0x2ec>
		dj.obj.fs = fs;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	f107 0318 	add.w	r3, r7, #24
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fbff 	bl	8002958 <follow_path>
 800315a:	4603      	mov	r3, r0
 800315c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8003160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003164:	2b00      	cmp	r3, #0
 8003166:	d107      	bne.n	8003178 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003168:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800316c:	b25b      	sxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	da02      	bge.n	8003178 <f_open+0x70>
				res = FR_INVALID_NAME;
 8003172:	2306      	movs	r3, #6
 8003174:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	f003 031c 	and.w	r3, r3, #28
 800317e:	2b00      	cmp	r3, #0
 8003180:	d073      	beq.n	800326a <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 8003182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003186:	2b00      	cmp	r3, #0
 8003188:	d010      	beq.n	80031ac <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800318a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800318e:	2b04      	cmp	r3, #4
 8003190:	d107      	bne.n	80031a2 <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8003192:	f107 0318 	add.w	r3, r7, #24
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fa86 	bl	80026a8 <dir_register>
 800319c:	4603      	mov	r3, r0
 800319e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	f043 0308 	orr.w	r3, r3, #8
 80031a8:	71fb      	strb	r3, [r7, #7]
 80031aa:	e010      	b.n	80031ce <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80031ac:	7fbb      	ldrb	r3, [r7, #30]
 80031ae:	f003 0311 	and.w	r3, r3, #17
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <f_open+0xb6>
					res = FR_DENIED;
 80031b6:	2307      	movs	r3, #7
 80031b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80031bc:	e007      	b.n	80031ce <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <f_open+0xc6>
 80031c8:	2308      	movs	r3, #8
 80031ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80031ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d163      	bne.n	800329e <f_open+0x196>
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d05e      	beq.n	800329e <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031e4:	4611      	mov	r1, r2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff f96d 	bl	80024c6 <ld_clust>
 80031ec:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 80031ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f0:	f103 040e 	add.w	r4, r3, #14
 80031f4:	f7fe fabc 	bl	8001770 <get_fattime>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4619      	mov	r1, r3
 80031fc:	4620      	mov	r0, r4
 80031fe:	f7fe fb17 	bl	8001830 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003204:	330b      	adds	r3, #11
 8003206:	2220      	movs	r2, #32
 8003208:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800320e:	2200      	movs	r2, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff f977 	bl	8002504 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003218:	331c      	adds	r3, #28
 800321a:	2100      	movs	r1, #0
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe fb07 	bl	8001830 <st_dword>
					fs->wflag = 1;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2201      	movs	r2, #1
 8003226:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8003228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322a:	2b00      	cmp	r3, #0
 800322c:	d037      	beq.n	800329e <f_open+0x196>
						dw = fs->winsect;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 8003234:	f107 0318 	add.w	r3, r7, #24
 8003238:	2200      	movs	r2, #0
 800323a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe fe6c 	bl	8001f1a <remove_chain>
 8003242:	4603      	mov	r3, r0
 8003244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8003248:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800324c:	2b00      	cmp	r3, #0
 800324e:	d126      	bne.n	800329e <f_open+0x196>
							res = move_window(fs, dw);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe fc1a 	bl	8001a8e <move_window>
 800325a:	4603      	mov	r3, r0
 800325c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003264:	3a01      	subs	r2, #1
 8003266:	60da      	str	r2, [r3, #12]
 8003268:	e019      	b.n	800329e <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800326a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800326e:	2b00      	cmp	r3, #0
 8003270:	d115      	bne.n	800329e <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8003272:	7fbb      	ldrb	r3, [r7, #30]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <f_open+0x17c>
					res = FR_NO_FILE;
 800327c:	2304      	movs	r3, #4
 800327e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003282:	e00c      	b.n	800329e <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <f_open+0x196>
 800328e:	7fbb      	ldrb	r3, [r7, #30]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <f_open+0x196>
						res = FR_DENIED;
 8003298:	2307      	movs	r3, #7
 800329a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800329e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10f      	bne.n	80032c6 <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <f_open+0x1b0>
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80032c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80032c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f040 8092 	bne.w	80033f4 <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff f8f5 	bl	80024c6 <ld_clust>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80032e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e4:	331c      	adds	r3, #28
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe fa64 	bl	80017b4 <ld_dword>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	88da      	ldrh	r2, [r3, #6]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	79fa      	ldrb	r2, [r7, #7]
 8003304:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3328      	adds	r3, #40	; 0x28
 800331c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe fad1 	bl	80018ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	d060      	beq.n	80033f4 <f_open+0x2ec>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d05c      	beq.n	80033f4 <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	895b      	ldrh	r3, [r3, #10]
 8003346:	025b      	lsls	r3, r3, #9
 8003348:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	657b      	str	r3, [r7, #84]	; 0x54
 8003356:	e016      	b.n	8003386 <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe fc50 	bl	8001c02 <get_fat>
 8003362:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8003364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003366:	2b01      	cmp	r3, #1
 8003368:	d802      	bhi.n	8003370 <f_open+0x268>
 800336a:	2302      	movs	r3, #2
 800336c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003376:	d102      	bne.n	800337e <f_open+0x276>
 8003378:	2301      	movs	r3, #1
 800337a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800337e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	657b      	str	r3, [r7, #84]	; 0x54
 8003386:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800338a:	2b00      	cmp	r3, #0
 800338c:	d103      	bne.n	8003396 <f_open+0x28e>
 800338e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003392:	429a      	cmp	r2, r3
 8003394:	d8e0      	bhi.n	8003358 <f_open+0x250>
				}
				fp->clust = clst;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800339a:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800339c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d127      	bne.n	80033f4 <f_open+0x2ec>
 80033a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d022      	beq.n	80033f4 <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fc06 	bl	8001bc4 <clst2sect>
 80033b8:	6478      	str	r0, [r7, #68]	; 0x44
 80033ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <f_open+0x2c0>
						res = FR_INT_ERR;
 80033c0:	2302      	movs	r3, #2
 80033c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033c6:	e015      	b.n	80033f4 <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80033c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ca:	0a5a      	lsrs	r2, r3, #9
 80033cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ce:	441a      	add	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	7858      	ldrb	r0, [r3, #1]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	2301      	movs	r3, #1
 80033e4:	f7fd ff18 	bl	8001218 <disk_read>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <f_open+0x2ec>
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80033f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <f_open+0x2fa>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8003402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003406:	4618      	mov	r0, r3
 8003408:	3764      	adds	r7, #100	; 0x64
 800340a:	46bd      	mov	sp, r7
 800340c:	bd90      	pop	{r4, r7, pc}

0800340e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b08e      	sub	sp, #56	; 0x38
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f107 0214 	add.w	r2, r7, #20
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fdf4 	bl	800301c <validate>
 8003434:	4603      	mov	r3, r0
 8003436:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800343a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <f_read+0x44>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	7c5b      	ldrb	r3, [r3, #17]
 8003446:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800344a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <f_read+0x4a>
 8003452:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003456:	e109      	b.n	800366c <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	7c1b      	ldrb	r3, [r3, #16]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <f_read+0x5a>
 8003464:	2307      	movs	r3, #7
 8003466:	e101      	b.n	800366c <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	429a      	cmp	r2, r3
 800347a:	f240 80f2 	bls.w	8003662 <f_read+0x254>
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 8003482:	e0ee      	b.n	8003662 <f_read+0x254>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 80ba 	bne.w	8003606 <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	0a5b      	lsrs	r3, r3, #9
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	8952      	ldrh	r2, [r2, #10]
 800349c:	3a01      	subs	r2, #1
 800349e:	4013      	ands	r3, r2
 80034a0:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d123      	bne.n	80034f0 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d103      	bne.n	80034b8 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	633b      	str	r3, [r7, #48]	; 0x30
 80034b6:	e007      	b.n	80034c8 <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f7fe fb9e 	bl	8001c02 <get_fat>
 80034c6:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d804      	bhi.n	80034d8 <f_read+0xca>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2202      	movs	r2, #2
 80034d2:	745a      	strb	r2, [r3, #17]
 80034d4:	2302      	movs	r3, #2
 80034d6:	e0c9      	b.n	800366c <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d104      	bne.n	80034ea <f_read+0xdc>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	745a      	strb	r2, [r3, #17]
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0c0      	b.n	800366c <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ee:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f7fe fb63 	bl	8001bc4 <clst2sect>
 80034fe:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d104      	bne.n	8003510 <f_read+0x102>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2202      	movs	r2, #2
 800350a:	745a      	strb	r2, [r3, #17]
 800350c:	2302      	movs	r3, #2
 800350e:	e0ad      	b.n	800366c <f_read+0x25e>
			sect += csect;
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	0a5b      	lsrs	r3, r3, #9
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	d039      	beq.n	8003598 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	4413      	add	r3, r2
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	8952      	ldrh	r2, [r2, #10]
 800352e:	4293      	cmp	r3, r2
 8003530:	d905      	bls.n	800353e <f_read+0x130>
					cc = fs->csize - csect;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	895b      	ldrh	r3, [r3, #10]
 8003536:	461a      	mov	r2, r3
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	7858      	ldrb	r0, [r3, #1]
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003548:	f7fd fe66 	bl	8001218 <disk_read>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <f_read+0x14e>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	745a      	strb	r2, [r3, #17]
 8003558:	2301      	movs	r3, #1
 800355a:	e087      	b.n	800366c <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	7c1b      	ldrb	r3, [r3, #16]
 8003560:	b25b      	sxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	da14      	bge.n	8003590 <f_read+0x182>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003570:	429a      	cmp	r2, r3
 8003572:	d90d      	bls.n	8003590 <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	025b      	lsls	r3, r3, #9
 800357e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003580:	18d0      	adds	r0, r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3328      	adds	r3, #40	; 0x28
 8003586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800358a:	4619      	mov	r1, r3
 800358c:	f7fe f97c 	bl	8001888 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	025b      	lsls	r3, r3, #9
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8003596:	e050      	b.n	800363a <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d02e      	beq.n	8003600 <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	7c1b      	ldrb	r3, [r3, #16]
 80035a6:	b25b      	sxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da18      	bge.n	80035de <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	7858      	ldrb	r0, [r3, #1]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	69da      	ldr	r2, [r3, #28]
 80035ba:	2301      	movs	r3, #1
 80035bc:	f7fd fe96 	bl	80012ec <disk_write>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <f_read+0x1c2>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	745a      	strb	r2, [r3, #17]
 80035cc:	2301      	movs	r3, #1
 80035ce:	e04d      	b.n	800366c <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	7c1b      	ldrb	r3, [r3, #16]
 80035d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	7858      	ldrb	r0, [r3, #1]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80035e8:	2301      	movs	r3, #1
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	f7fd fe14 	bl	8001218 <disk_read>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d004      	beq.n	8003600 <f_read+0x1f2>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	745a      	strb	r2, [r3, #17]
 80035fc:	2301      	movs	r3, #1
 80035fe:	e035      	b.n	800366c <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8003614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d901      	bls.n	8003620 <f_read+0x212>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362e:	4413      	add	r3, r2
 8003630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003632:	4619      	mov	r1, r3
 8003634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003636:	f7fe f927 	bl	8001888 <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	441a      	add	r2, r3
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	4413      	add	r3, r2
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365c:	441a      	add	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	615a      	str	r2, [r3, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f47f af0d 	bne.w	8003484 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3738      	adds	r7, #56	; 0x38
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f107 0208 	add.w	r2, r7, #8
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fcc9 	bl	800301c <validate>
 800368a:	4603      	mov	r3, r0
 800368c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d168      	bne.n	8003766 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7c1b      	ldrb	r3, [r3, #16]
 8003698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d062      	beq.n	8003766 <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	7c1b      	ldrb	r3, [r3, #16]
 80036a4:	b25b      	sxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da15      	bge.n	80036d6 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	7858      	ldrb	r0, [r3, #1]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	2301      	movs	r3, #1
 80036ba:	f7fd fe17 	bl	80012ec <disk_write>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <f_sync+0x54>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e04f      	b.n	8003768 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	7c1b      	ldrb	r3, [r3, #16]
 80036cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80036d6:	f7fe f84b 	bl	8001770 <get_fattime>
 80036da:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f7fe f9d2 	bl	8001a8e <move_window>
 80036ea:	4603      	mov	r3, r0
 80036ec:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d138      	bne.n	8003766 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	330b      	adds	r3, #11
 80036fe:	781a      	ldrb	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	330b      	adds	r3, #11
 8003704:	f042 0220 	orr.w	r2, r2, #32
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	461a      	mov	r2, r3
 8003716:	68f9      	ldr	r1, [r7, #12]
 8003718:	f7fe fef4 	bl	8002504 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f103 021c 	add.w	r2, r3, #28
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7fe f881 	bl	8001830 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3316      	adds	r3, #22
 8003732:	6939      	ldr	r1, [r7, #16]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe f87b 	bl	8001830 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3312      	adds	r3, #18
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe f85a 	bl	80017fa <st_word>
					fs->wflag = 1;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2201      	movs	r2, #1
 800374a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe f9ca 	bl	8001ae8 <sync_fs>
 8003754:	4603      	mov	r3, r0
 8003756:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	7c1b      	ldrb	r3, [r3, #16]
 800375c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003760:	b2da      	uxtb	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8003766:	7dfb      	ldrb	r3, [r7, #23]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ff7b 	bl	8003674 <f_sync>
 800377e:	4603      	mov	r3, r0
 8003780:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10e      	bne.n	80037a6 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f107 0208 	add.w	r2, r7, #8
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fc43 	bl	800301c <validate>
 8003796:	4603      	mov	r3, r0
 8003798:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <f_opendir+0x14>
 80037c0:	2309      	movs	r3, #9
 80037c2:	e04a      	b.n	800385a <f_opendir+0xaa>

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80037c4:	f107 0108 	add.w	r1, r7, #8
 80037c8:	463b      	mov	r3, r7
 80037ca:	2200      	movs	r2, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff f9cd 	bl	8002b6c <find_volume>
 80037d2:	4603      	mov	r3, r0
 80037d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d137      	bne.n	800384c <f_opendir+0x9c>
		dp->obj.fs = fs;
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	4619      	mov	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff f8b6 	bl	8002958 <follow_path>
 80037ec:	4603      	mov	r3, r0
 80037ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {						/* Follow completed */
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d125      	bne.n	8003842 <f_opendir+0x92>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80037fc:	b25b      	sxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	db12      	blt.n	8003828 <f_opendir+0x78>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	799b      	ldrb	r3, [r3, #6]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <f_opendir+0x74>
						dp->obj.c_ofs = dp->blk_ofs;
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f7fe fe55 	bl	80024c6 <ld_clust>
 800381c:	4602      	mov	r2, r0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	e001      	b.n	8003828 <f_opendir+0x78>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8003824:	2305      	movs	r3, #5
 8003826:	73fb      	strb	r3, [r7, #15]
				}
			}
			if (res == FR_OK) {
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <f_opendir+0x92>
				dp->obj.id = fs->id;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	88da      	ldrh	r2, [r3, #6]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003836:	2100      	movs	r1, #0
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fe fcec 	bl	8002216 <dir_sdi>
 800383e:	4603      	mov	r3, r0
 8003840:	73fb      	strb	r3, [r7, #15]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d101      	bne.n	800384c <f_opendir+0x9c>
 8003848:	2305      	movs	r3, #5
 800384a:	73fb      	strb	r3, [r7, #15]
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <f_opendir+0xa8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8003858:	7bfb      	ldrb	r3, [r7, #15]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f107 0208 	add.w	r2, r7, #8
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fbd1 	bl	800301c <validate>
 800387a:	4603      	mov	r3, r0
 800387c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d126      	bne.n	80038d2 <f_readdir+0x70>
		if (!fno) {
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800388a:	2100      	movs	r1, #0
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7fe fcc2 	bl	8002216 <dir_sdi>
 8003892:	4603      	mov	r3, r0
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	e01c      	b.n	80038d2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
 8003898:	2100      	movs	r1, #0
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fe fe52 	bl	8002544 <dir_read>
 80038a0:	4603      	mov	r3, r0
 80038a2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d101      	bne.n	80038ae <f_readdir+0x4c>
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10e      	bne.n	80038d2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80038b4:	6839      	ldr	r1, [r7, #0]
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fe ff28 	bl	800270c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80038bc:	2100      	movs	r1, #0
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fe fd24 	bl	800230c <dir_next>
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d101      	bne.n	80038d2 <f_readdir+0x70>
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <lcd_send_cmd>:
	lcd_send_cmd(0x40 + (Location * 8));  //Send the Address of CGRAM
	for (i = 0; i < 8; i++)
		lcd_send_data(Pattern[i]);  //Pass the bytes of pattern on LCD
}

void lcd_send_cmd(char cmd) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	4603      	mov	r3, r0
 80038e4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	f023 030f 	bic.w	r3, r3, #15
 80038ec:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	f043 030c 	orr.w	r3, r3, #12
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	f043 0308 	orr.w	r3, r3, #8
 8003904:	b2db      	uxtb	r3, r3
 8003906:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8003908:	7bbb      	ldrb	r3, [r7, #14]
 800390a:	f043 030c 	orr.w	r3, r3, #12
 800390e:	b2db      	uxtb	r3, r3
 8003910:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 8003912:	7bbb      	ldrb	r3, [r7, #14]
 8003914:	f043 0308 	orr.w	r3, r3, #8
 8003918:	b2db      	uxtb	r3, r3
 800391a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c3, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 800391c:	f107 0208 	add.w	r2, r7, #8
 8003920:	2364      	movs	r3, #100	; 0x64
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	2304      	movs	r3, #4
 8003926:	214e      	movs	r1, #78	; 0x4e
 8003928:	4804      	ldr	r0, [pc, #16]	; (800393c <lcd_send_cmd+0x60>)
 800392a:	f003 f9f7 	bl	8006d1c <HAL_I2C_Master_Transmit>
 800392e:	4603      	mov	r3, r0
 8003930:	737b      	strb	r3, [r7, #13]
			100);
}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000364 	.word	0x20000364

08003940 <lcd_send_data>:

void lcd_send_data(char data) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af02      	add	r7, sp, #8
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	f023 030f 	bic.w	r3, r3, #15
 8003950:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	f043 030d 	orr.w	r3, r3, #13
 800395e:	b2db      	uxtb	r3, r3
 8003960:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	f043 0309 	orr.w	r3, r3, #9
 8003968:	b2db      	uxtb	r3, r3
 800396a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800396c:	7bbb      	ldrb	r3, [r7, #14]
 800396e:	f043 030d 	orr.w	r3, r3, #13
 8003972:	b2db      	uxtb	r3, r3
 8003974:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 8003976:	7bbb      	ldrb	r3, [r7, #14]
 8003978:	f043 0309 	orr.w	r3, r3, #9
 800397c:	b2db      	uxtb	r3, r3
 800397e:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c3, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8003980:	f107 0208 	add.w	r2, r7, #8
 8003984:	2364      	movs	r3, #100	; 0x64
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	2304      	movs	r3, #4
 800398a:	214e      	movs	r1, #78	; 0x4e
 800398c:	4804      	ldr	r0, [pc, #16]	; (80039a0 <lcd_send_data+0x60>)
 800398e:	f003 f9c5 	bl	8006d1c <HAL_I2C_Master_Transmit>
 8003992:	4603      	mov	r3, r0
 8003994:	737b      	strb	r3, [r7, #13]
			100);
}
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000364 	.word	0x20000364

080039a4 <lcd_clear>:

void lcd_clear(void) {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x00);
 80039aa:	2000      	movs	r0, #0
 80039ac:	f7ff ff96 	bl	80038dc <lcd_send_cmd>
	for (int i = 0; i < 100; i++) {
 80039b0:	2300      	movs	r3, #0
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	e005      	b.n	80039c2 <lcd_clear+0x1e>
		lcd_send_data(' ');
 80039b6:	2020      	movs	r0, #32
 80039b8:	f7ff ffc2 	bl	8003940 <lcd_send_data>
	for (int i = 0; i < 100; i++) {
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3301      	adds	r3, #1
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b63      	cmp	r3, #99	; 0x63
 80039c6:	ddf6      	ble.n	80039b6 <lcd_clear+0x12>
	}
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <lcd_init>:

void lcd_init(void) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80039d4:	2032      	movs	r0, #50	; 0x32
 80039d6:	f001 fb03 	bl	8004fe0 <HAL_Delay>
	lcd_send_cmd(0x30);
 80039da:	2030      	movs	r0, #48	; 0x30
 80039dc:	f7ff ff7e 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80039e0:	2005      	movs	r0, #5
 80039e2:	f001 fafd 	bl	8004fe0 <HAL_Delay>
	lcd_send_cmd(0x30);
 80039e6:	2030      	movs	r0, #48	; 0x30
 80039e8:	f7ff ff78 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80039ec:	2001      	movs	r0, #1
 80039ee:	f001 faf7 	bl	8004fe0 <HAL_Delay>
	lcd_send_cmd(0x30);
 80039f2:	2030      	movs	r0, #48	; 0x30
 80039f4:	f7ff ff72 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(10);
 80039f8:	200a      	movs	r0, #10
 80039fa:	f001 faf1 	bl	8004fe0 <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 80039fe:	2020      	movs	r0, #32
 8003a00:	f7ff ff6c 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(10);
 8003a04:	200a      	movs	r0, #10
 8003a06:	f001 faeb 	bl	8004fe0 <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003a0a:	2028      	movs	r0, #40	; 0x28
 8003a0c:	f7ff ff66 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(1);
 8003a10:	2001      	movs	r0, #1
 8003a12:	f001 fae5 	bl	8004fe0 <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8003a16:	2008      	movs	r0, #8
 8003a18:	f7ff ff60 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(1);
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	f001 fadf 	bl	8004fe0 <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 8003a22:	2001      	movs	r0, #1
 8003a24:	f7ff ff5a 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(1);
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f001 fad9 	bl	8004fe0 <HAL_Delay>
	HAL_Delay(1);
 8003a2e:	2001      	movs	r0, #1
 8003a30:	f001 fad6 	bl	8004fe0 <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8003a34:	2006      	movs	r0, #6
 8003a36:	f7ff ff51 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(1);
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	f001 fad0 	bl	8004fe0 <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8003a40:	200c      	movs	r0, #12
 8003a42:	f7ff ff4b 	bl	80038dc <lcd_send_cmd>
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <lcd_send_string>:

void lcd_send_string(char *str) {
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
	while (*str)
 8003a52:	e006      	b.n	8003a62 <lcd_send_string+0x18>
		lcd_send_data(*str++);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff6f 	bl	8003940 <lcd_send_data>
	while (*str)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f4      	bne.n	8003a54 <lcd_send_string+0xa>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
    switch (row)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <lcd_put_cur+0x16>
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d005      	beq.n	8003a92 <lcd_put_cur+0x20>
 8003a86:	e009      	b.n	8003a9c <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8e:	603b      	str	r3, [r7, #0]
            break;
 8003a90:	e004      	b.n	8003a9c <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a98:	603b      	str	r3, [r7, #0]
            break;
 8003a9a:	bf00      	nop
    }

    lcd_send_cmd (col);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff ff1b 	bl	80038dc <lcd_send_cmd>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <read_song>:
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */



void read_song(){
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08e      	sub	sp, #56	; 0x38
 8003ab4:	af00      	add	r7, sp, #0

FRESULT res;
    DIR dir;
    UINT i=0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
    UINT z;

    static FILINFO fno;


		res = f_opendir(&dir, "/");
 8003aba:	463b      	mov	r3, r7
 8003abc:	492b      	ldr	r1, [pc, #172]	; (8003b6c <read_song+0xbc>)
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fe76 	bl	80037b0 <f_opendir>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    	if (res == FR_OK) {
 8003aca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d148      	bne.n	8003b64 <read_song+0xb4>
  	  	  	do{
            		res = f_readdir(&dir, &fno);
 8003ad2:	463b      	mov	r3, r7
 8003ad4:	4926      	ldr	r1, [pc, #152]	; (8003b70 <read_song+0xc0>)
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fec3 	bl	8003862 <f_readdir>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            		if (res != FR_OK || fno.fname[0] == 0) {i=1; break;}
 8003ae2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d103      	bne.n	8003af2 <read_song+0x42>
 8003aea:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <read_song+0xc0>)
 8003aec:	7a5b      	ldrb	r3, [r3, #9]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <read_song+0x48>
 8003af2:	2301      	movs	r3, #1
 8003af4:	637b      	str	r3, [r7, #52]	; 0x34
 8003af6:	e024      	b.n	8003b42 <read_song+0x92>
            		printf("%s\n", fno.fname);
 8003af8:	481e      	ldr	r0, [pc, #120]	; (8003b74 <read_song+0xc4>)
 8003afa:	f007 f901 	bl	800ad00 <puts>
                	z = strlen(fno.fname);
 8003afe:	481d      	ldr	r0, [pc, #116]	; (8003b74 <read_song+0xc4>)
 8003b00:	f7fc fb62 	bl	80001c8 <strlen>
 8003b04:	62f8      	str	r0, [r7, #44]	; 0x2c
                	i++;
 8003b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b08:	3301      	adds	r3, #1
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
            	}
            	while(i<=nr_utworu || (fno.fname[z-1]!='V') || (fno.fname[z-2]!='A')|| (fno.fname[z-3]!='W'));
 8003b0c:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <read_song+0xc8>)
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d9dc      	bls.n	8003ad2 <read_song+0x22>
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <read_song+0xc0>)
 8003b1e:	4413      	add	r3, r2
 8003b20:	7a5b      	ldrb	r3, [r3, #9]
 8003b22:	2b56      	cmp	r3, #86	; 0x56
 8003b24:	d1d5      	bne.n	8003ad2 <read_song+0x22>
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	3b02      	subs	r3, #2
 8003b2a:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <read_song+0xc0>)
 8003b2c:	4413      	add	r3, r2
 8003b2e:	7a5b      	ldrb	r3, [r3, #9]
 8003b30:	2b41      	cmp	r3, #65	; 0x41
 8003b32:	d1ce      	bne.n	8003ad2 <read_song+0x22>
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b36:	3b03      	subs	r3, #3
 8003b38:	4a0d      	ldr	r2, [pc, #52]	; (8003b70 <read_song+0xc0>)
 8003b3a:	4413      	add	r3, r2
 8003b3c:	7a5b      	ldrb	r3, [r3, #9]
 8003b3e:	2b57      	cmp	r3, #87	; 0x57
 8003b40:	d1c7      	bne.n	8003ad2 <read_song+0x22>
  	  	  		sprintf(utwor,"%s",fno.fname);
 8003b42:	490c      	ldr	r1, [pc, #48]	; (8003b74 <read_song+0xc4>)
 8003b44:	480d      	ldr	r0, [pc, #52]	; (8003b7c <read_song+0xcc>)
 8003b46:	f007 f8e3 	bl	800ad10 <strcpy>
  	  	  		nr_utworu=i-1;
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <read_song+0xc8>)
 8003b54:	801a      	strh	r2, [r3, #0]
  	  	  		if(nr_utworu==0)read_song();
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <read_song+0xc8>)
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <read_song+0xb4>
 8003b5e:	f7ff ffa7 	bl	8003ab0 <read_song>
            	}

               	return;
 8003b62:	bf00      	nop
 8003b64:	bf00      	nop
}
 8003b66:	3738      	adds	r7, #56	; 0x38
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	0800b55c 	.word	0x0800b55c
 8003b70:	20000338 	.word	0x20000338
 8003b74:	20000341 	.word	0x20000341
 8003b78:	20000332 	.word	0x20000332
 8003b7c:	200003f8 	.word	0x200003f8

08003b80 <next>:

void next(){
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim4);
 8003b84:	4818      	ldr	r0, [pc, #96]	; (8003be8 <next+0x68>)
 8003b86:	f006 f886 	bl	8009c96 <HAL_TIM_Base_Stop_IT>
	f_close(&file);
 8003b8a:	4818      	ldr	r0, [pc, #96]	; (8003bec <next+0x6c>)
 8003b8c:	f7ff fdf0 	bl	8003770 <f_close>
	nr_utworu++;
 8003b90:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <next+0x70>)
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <next+0x70>)
 8003b9a:	801a      	strh	r2, [r3, #0]
	read_song();
 8003b9c:	f7ff ff88 	bl	8003ab0 <read_song>
	fresult = f_open(&file, &utwor , FA_READ|FA_OPEN_EXISTING);
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	4914      	ldr	r1, [pc, #80]	; (8003bf4 <next+0x74>)
 8003ba4:	4811      	ldr	r0, [pc, #68]	; (8003bec <next+0x6c>)
 8003ba6:	f7ff faaf 	bl	8003108 <f_open>
 8003baa:	4603      	mov	r3, r0
 8003bac:	461a      	mov	r2, r3
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <next+0x78>)
 8003bb0:	701a      	strb	r2, [r3, #0]
	f_read(&file, &buf, BUFSIZE, &bytes_read);
 8003bb2:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <next+0x7c>)
 8003bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb8:	4911      	ldr	r1, [pc, #68]	; (8003c00 <next+0x80>)
 8003bba:	480c      	ldr	r0, [pc, #48]	; (8003bec <next+0x6c>)
 8003bbc:	f7ff fc27 	bl	800340e <f_read>
	i=0;
 8003bc0:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <next+0x84>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
	j=0;
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <next+0x88>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
	 lcd_clear ();
 8003bcc:	f7ff feea 	bl	80039a4 <lcd_clear>
	lcd_put_cur(0, 0);
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f7ff ff4d 	bl	8003a72 <lcd_put_cur>
	lcd_send_string(&utwor);
 8003bd8:	4806      	ldr	r0, [pc, #24]	; (8003bf4 <next+0x74>)
 8003bda:	f7ff ff36 	bl	8003a4a <lcd_send_string>
	 HAL_TIM_Base_Start_IT(&htim4);
 8003bde:	4802      	ldr	r0, [pc, #8]	; (8003be8 <next+0x68>)
 8003be0:	f006 f835 	bl	8009c4e <HAL_TIM_Base_Start_IT>
}
 8003be4:	bf00      	nop
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	200003b8 	.word	0x200003b8
 8003bec:	200004c8 	.word	0x200004c8
 8003bf0:	20000332 	.word	0x20000332
 8003bf4:	200003f8 	.word	0x200003f8
 8003bf8:	20000c20 	.word	0x20000c20
 8003bfc:	20000738 	.word	0x20000738
 8003c00:	20000a20 	.word	0x20000a20
 8003c04:	2000032c 	.word	0x2000032c
 8003c08:	20000004 	.word	0x20000004

08003c0c <prev>:

void prev(){
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim4);
 8003c10:	4818      	ldr	r0, [pc, #96]	; (8003c74 <prev+0x68>)
 8003c12:	f006 f840 	bl	8009c96 <HAL_TIM_Base_Stop_IT>
	f_close(&file);
 8003c16:	4818      	ldr	r0, [pc, #96]	; (8003c78 <prev+0x6c>)
 8003c18:	f7ff fdaa 	bl	8003770 <f_close>
	nr_utworu--;
 8003c1c:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <prev+0x70>)
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <prev+0x70>)
 8003c26:	801a      	strh	r2, [r3, #0]
	read_song();
 8003c28:	f7ff ff42 	bl	8003ab0 <read_song>
	fresult = f_open(&file, &utwor , FA_READ|FA_OPEN_EXISTING);
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	4914      	ldr	r1, [pc, #80]	; (8003c80 <prev+0x74>)
 8003c30:	4811      	ldr	r0, [pc, #68]	; (8003c78 <prev+0x6c>)
 8003c32:	f7ff fa69 	bl	8003108 <f_open>
 8003c36:	4603      	mov	r3, r0
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <prev+0x78>)
 8003c3c:	701a      	strb	r2, [r3, #0]
	f_read(&file, &buf, BUFSIZE, &bytes_read);
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <prev+0x7c>)
 8003c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c44:	4911      	ldr	r1, [pc, #68]	; (8003c8c <prev+0x80>)
 8003c46:	480c      	ldr	r0, [pc, #48]	; (8003c78 <prev+0x6c>)
 8003c48:	f7ff fbe1 	bl	800340e <f_read>
	i=0;
 8003c4c:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <prev+0x84>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
	j=0;
 8003c52:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <prev+0x88>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
	 lcd_clear ();
 8003c58:	f7ff fea4 	bl	80039a4 <lcd_clear>
	lcd_put_cur(0, 0);
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	2000      	movs	r0, #0
 8003c60:	f7ff ff07 	bl	8003a72 <lcd_put_cur>
	lcd_send_string(&utwor);
 8003c64:	4806      	ldr	r0, [pc, #24]	; (8003c80 <prev+0x74>)
 8003c66:	f7ff fef0 	bl	8003a4a <lcd_send_string>
	HAL_TIM_Base_Start_IT(&htim4);
 8003c6a:	4802      	ldr	r0, [pc, #8]	; (8003c74 <prev+0x68>)
 8003c6c:	f005 ffef 	bl	8009c4e <HAL_TIM_Base_Start_IT>
}
 8003c70:	bf00      	nop
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	200003b8 	.word	0x200003b8
 8003c78:	200004c8 	.word	0x200004c8
 8003c7c:	20000332 	.word	0x20000332
 8003c80:	200003f8 	.word	0x200003f8
 8003c84:	20000c20 	.word	0x20000c20
 8003c88:	20000738 	.word	0x20000738
 8003c8c:	20000a20 	.word	0x20000a20
 8003c90:	2000032c 	.word	0x2000032c
 8003c94:	20000004 	.word	0x20000004

08003c98 <HAL_ADC_ConvCpltCallback>:
		HAL_TIM_Base_Start_IT(&htim4);
		}
	else {next();}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

	if(hadc->Instance == hadc1.Instance){
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b52      	ldr	r3, [pc, #328]	; (8003df0 <HAL_ADC_ConvCpltCallback+0x158>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	f040 809c 	bne.w	8003de6 <HAL_ADC_ConvCpltCallback+0x14e>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8003cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cb2:	4850      	ldr	r0, [pc, #320]	; (8003df4 <HAL_ADC_ConvCpltCallback+0x15c>)
 8003cb4:	f002 fec7 	bl	8006a46 <HAL_GPIO_TogglePin>
//za pierwszym ustawieniem potencjometru działa ale potem się nie zmienia
		  	  if(value>0 && value <= 410) indeks_glosnosci = 0;
 8003cb8:	4b4f      	ldr	r3, [pc, #316]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_ADC_ConvCpltCallback+0x3a>
 8003cc0:	4b4d      	ldr	r3, [pc, #308]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8003cc8:	d803      	bhi.n	8003cd2 <HAL_ADC_ConvCpltCallback+0x3a>
 8003cca:	4b4c      	ldr	r3, [pc, #304]	; (8003dfc <HAL_ADC_ConvCpltCallback+0x164>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	e089      	b.n	8003de6 <HAL_ADC_ConvCpltCallback+0x14e>
		  	  else if(value>410 && value <= 819) indeks_glosnosci = 1;
 8003cd2:	4b49      	ldr	r3, [pc, #292]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8003cda:	d908      	bls.n	8003cee <HAL_ADC_ConvCpltCallback+0x56>
 8003cdc:	4b46      	ldr	r3, [pc, #280]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003ce4:	d203      	bcs.n	8003cee <HAL_ADC_ConvCpltCallback+0x56>
 8003ce6:	4b45      	ldr	r3, [pc, #276]	; (8003dfc <HAL_ADC_ConvCpltCallback+0x164>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	e07b      	b.n	8003de6 <HAL_ADC_ConvCpltCallback+0x14e>
		  	  else if(value>819 && value <= 1228) indeks_glosnosci = 2;
 8003cee:	4b42      	ldr	r3, [pc, #264]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003cf6:	d309      	bcc.n	8003d0c <HAL_ADC_ConvCpltCallback+0x74>
 8003cf8:	4b3f      	ldr	r3, [pc, #252]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d803      	bhi.n	8003d0c <HAL_ADC_ConvCpltCallback+0x74>
 8003d04:	4b3d      	ldr	r3, [pc, #244]	; (8003dfc <HAL_ADC_ConvCpltCallback+0x164>)
 8003d06:	2202      	movs	r2, #2
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	e06c      	b.n	8003de6 <HAL_ADC_ConvCpltCallback+0x14e>
		  	else if(value>1228 && value <= 1647) indeks_glosnosci = 3;
 8003d0c:	4b3a      	ldr	r3, [pc, #232]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d908      	bls.n	8003d2a <HAL_ADC_ConvCpltCallback+0x92>
 8003d18:	4b37      	ldr	r3, [pc, #220]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8003d20:	d203      	bcs.n	8003d2a <HAL_ADC_ConvCpltCallback+0x92>
 8003d22:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <HAL_ADC_ConvCpltCallback+0x164>)
 8003d24:	2203      	movs	r2, #3
 8003d26:	701a      	strb	r2, [r3, #0]
 8003d28:	e05d      	b.n	8003de6 <HAL_ADC_ConvCpltCallback+0x14e>
		  	else if(value>1647 && value <= 2058) indeks_glosnosci = 4;
 8003d2a:	4b33      	ldr	r3, [pc, #204]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8003d32:	d309      	bcc.n	8003d48 <HAL_ADC_ConvCpltCallback+0xb0>
 8003d34:	4b30      	ldr	r3, [pc, #192]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	f640 020a 	movw	r2, #2058	; 0x80a
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d803      	bhi.n	8003d48 <HAL_ADC_ConvCpltCallback+0xb0>
 8003d40:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <HAL_ADC_ConvCpltCallback+0x164>)
 8003d42:	2204      	movs	r2, #4
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e04e      	b.n	8003de6 <HAL_ADC_ConvCpltCallback+0x14e>
		  	else if(value>2058 && value <= 2467) indeks_glosnosci = 5;
 8003d48:	4b2b      	ldr	r3, [pc, #172]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	f640 020a 	movw	r2, #2058	; 0x80a
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d909      	bls.n	8003d68 <HAL_ADC_ConvCpltCallback+0xd0>
 8003d54:	4b28      	ldr	r3, [pc, #160]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	f640 12a3 	movw	r2, #2467	; 0x9a3
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d803      	bhi.n	8003d68 <HAL_ADC_ConvCpltCallback+0xd0>
 8003d60:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <HAL_ADC_ConvCpltCallback+0x164>)
 8003d62:	2205      	movs	r2, #5
 8003d64:	701a      	strb	r2, [r3, #0]
 8003d66:	e03e      	b.n	8003de6 <HAL_ADC_ConvCpltCallback+0x14e>
		  	else if(value>2467 && value <= 2876) indeks_glosnosci = 6;
 8003d68:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	f640 12a3 	movw	r2, #2467	; 0x9a3
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d909      	bls.n	8003d88 <HAL_ADC_ConvCpltCallback+0xf0>
 8003d74:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	f640 323c 	movw	r2, #2876	; 0xb3c
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d803      	bhi.n	8003d88 <HAL_ADC_ConvCpltCallback+0xf0>
 8003d80:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <HAL_ADC_ConvCpltCallback+0x164>)
 8003d82:	2206      	movs	r2, #6
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	e02e      	b.n	8003de6 <HAL_ADC_ConvCpltCallback+0x14e>
		  	else if(value>2876 && value <= 3285) indeks_glosnosci = 7;
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	f640 323c 	movw	r2, #2876	; 0xb3c
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d909      	bls.n	8003da8 <HAL_ADC_ConvCpltCallback+0x110>
 8003d94:	4b18      	ldr	r3, [pc, #96]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d803      	bhi.n	8003da8 <HAL_ADC_ConvCpltCallback+0x110>
 8003da0:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <HAL_ADC_ConvCpltCallback+0x164>)
 8003da2:	2207      	movs	r2, #7
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e01e      	b.n	8003de6 <HAL_ADC_ConvCpltCallback+0x14e>
		  	else if(value>3285 && value <= 3692) indeks_glosnosci = 8;
 8003da8:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d909      	bls.n	8003dc8 <HAL_ADC_ConvCpltCallback+0x130>
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	f640 626c 	movw	r2, #3692	; 0xe6c
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d803      	bhi.n	8003dc8 <HAL_ADC_ConvCpltCallback+0x130>
 8003dc0:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <HAL_ADC_ConvCpltCallback+0x164>)
 8003dc2:	2208      	movs	r2, #8
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e00e      	b.n	8003de6 <HAL_ADC_ConvCpltCallback+0x14e>
		  	else if(value>3692 && value <= 4095) indeks_glosnosci = 9;
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	f640 626c 	movw	r2, #3692	; 0xe6c
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d908      	bls.n	8003de6 <HAL_ADC_ConvCpltCallback+0x14e>
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x160>)
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ddc:	d203      	bcs.n	8003de6 <HAL_ADC_ConvCpltCallback+0x14e>
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_ADC_ConvCpltCallback+0x164>)
 8003de0:	2209      	movs	r2, #9
 8003de2:	701a      	strb	r2, [r3, #0]

	}
}
 8003de4:	e7ff      	b.n	8003de6 <HAL_ADC_ConvCpltCallback+0x14e>
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	200006f0 	.word	0x200006f0
 8003df4:	40020c00 	.word	0x40020c00
 8003df8:	20000330 	.word	0x20000330
 8003dfc:	20000008 	.word	0x20000008

08003e00 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	80fb      	strh	r3, [r7, #6]

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET){
 8003e0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e0e:	4839      	ldr	r0, [pc, #228]	; (8003ef4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003e10:	f002 fde8 	bl	80069e4 <HAL_GPIO_ReadPin>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10d      	bne.n	8003e36 <HAL_GPIO_EXTI_Callback+0x36>

		 //ciszej

		 if(indeks_glosnosci>0 && indeks_glosnosci<=9) indeks_glosnosci--;
 8003e1a:	4b37      	ldr	r3, [pc, #220]	; (8003ef8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_GPIO_EXTI_Callback+0x36>
 8003e22:	4b35      	ldr	r3, [pc, #212]	; (8003ef8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b09      	cmp	r3, #9
 8003e28:	d805      	bhi.n	8003e36 <HAL_GPIO_EXTI_Callback+0x36>
 8003e2a:	4b33      	ldr	r3, [pc, #204]	; (8003ef8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	4b31      	ldr	r3, [pc, #196]	; (8003ef8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003e34:	701a      	strb	r2, [r3, #0]

		  	}

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 8003e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e3a:	482e      	ldr	r0, [pc, #184]	; (8003ef4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003e3c:	f002 fdd2 	bl	80069e4 <HAL_GPIO_ReadPin>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_GPIO_EXTI_Callback+0x4a>
			  		//prev song
		prev();
 8003e46:	f7ff fee1 	bl	8003c0c <prev>


			}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 8003e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e4e:	4829      	ldr	r0, [pc, #164]	; (8003ef4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003e50:	f002 fdc8 	bl	80069e4 <HAL_GPIO_ReadPin>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d129      	bne.n	8003eae <HAL_GPIO_EXTI_Callback+0xae>


		 //pause/start

		 if(stan==1){
 8003e5a:	4b28      	ldr	r3, [pc, #160]	; (8003efc <HAL_GPIO_EXTI_Callback+0xfc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d116      	bne.n	8003e90 <HAL_GPIO_EXTI_Callback+0x90>
		//HAL_TIM_Base_Start(&htim6);
		//HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &buf, 60000, DAC_ALIGN_12B_R);
		lcd_clear();
 8003e62:	f7ff fd9f 	bl	80039a4 <lcd_clear>
		lcd_put_cur(0, 0);
 8003e66:	2100      	movs	r1, #0
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7ff fe02 	bl	8003a72 <lcd_put_cur>
		lcd_send_string(&utwor);
 8003e6e:	4824      	ldr	r0, [pc, #144]	; (8003f00 <HAL_GPIO_EXTI_Callback+0x100>)
 8003e70:	f7ff fdeb 	bl	8003a4a <lcd_send_string>
		lcd_put_cur(1, 0);
 8003e74:	2100      	movs	r1, #0
 8003e76:	2001      	movs	r0, #1
 8003e78:	f7ff fdfb 	bl	8003a72 <lcd_put_cur>
		lcd_send_string("PLAY");
 8003e7c:	4821      	ldr	r0, [pc, #132]	; (8003f04 <HAL_GPIO_EXTI_Callback+0x104>)
 8003e7e:	f7ff fde4 	bl	8003a4a <lcd_send_string>
		 HAL_TIM_Base_Start_IT(&htim4);
 8003e82:	4821      	ldr	r0, [pc, #132]	; (8003f08 <HAL_GPIO_EXTI_Callback+0x108>)
 8003e84:	f005 fee3 	bl	8009c4e <HAL_TIM_Base_Start_IT>
		 //HAL_TIM_Base_Start_IT(&htim7);
		 stan = 0;
 8003e88:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <HAL_GPIO_EXTI_Callback+0xfc>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e00e      	b.n	8003eae <HAL_GPIO_EXTI_Callback+0xae>
		 }
		 else
		 {
			 lcd_clear();
 8003e90:	f7ff fd88 	bl	80039a4 <lcd_clear>
			 lcd_put_cur(1, 0);
 8003e94:	2100      	movs	r1, #0
 8003e96:	2001      	movs	r0, #1
 8003e98:	f7ff fdeb 	bl	8003a72 <lcd_put_cur>
			 lcd_send_string("PAUSE");
 8003e9c:	481b      	ldr	r0, [pc, #108]	; (8003f0c <HAL_GPIO_EXTI_Callback+0x10c>)
 8003e9e:	f7ff fdd4 	bl	8003a4a <lcd_send_string>
			 HAL_TIM_Base_Stop_IT(&htim4);
 8003ea2:	4819      	ldr	r0, [pc, #100]	; (8003f08 <HAL_GPIO_EXTI_Callback+0x108>)
 8003ea4:	f005 fef7 	bl	8009c96 <HAL_TIM_Base_Stop_IT>
			 stan=1;
 8003ea8:	4b14      	ldr	r3, [pc, #80]	; (8003efc <HAL_GPIO_EXTI_Callback+0xfc>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
		 }

	 		}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET){
 8003eae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003eb2:	4810      	ldr	r0, [pc, #64]	; (8003ef4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003eb4:	f002 fd96 	bl	80069e4 <HAL_GPIO_ReadPin>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_GPIO_EXTI_Callback+0xc2>
		 	next();
 8003ebe:	f7ff fe5f 	bl	8003b80 <next>

		 	}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 8003ec2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ec6:	480b      	ldr	r0, [pc, #44]	; (8003ef4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003ec8:	f002 fd8c 	bl	80069e4 <HAL_GPIO_ReadPin>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d109      	bne.n	8003ee6 <HAL_GPIO_EXTI_Callback+0xe6>

		 //glosniej

		 if(indeks_glosnosci>=0 && indeks_glosnosci<9)
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d805      	bhi.n	8003ee6 <HAL_GPIO_EXTI_Callback+0xe6>
			 indeks_glosnosci++;
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8003ee4:	701a      	strb	r2, [r3, #0]
			 	}
	 HAL_Delay(200);
 8003ee6:	20c8      	movs	r0, #200	; 0xc8
 8003ee8:	f001 f87a 	bl	8004fe0 <HAL_Delay>

}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40020400 	.word	0x40020400
 8003ef8:	20000008 	.word	0x20000008
 8003efc:	20000060 	.word	0x20000060
 8003f00:	200003f8 	.word	0x200003f8
 8003f04:	0800b560 	.word	0x0800b560
 8003f08:	200003b8 	.word	0x200003b8
 8003f0c:	0800b568 	.word	0x0800b568

08003f10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a52      	ldr	r2, [pc, #328]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	f040 809e 	bne.w	8004060 <HAL_TIM_PeriodElapsedCallback+0x150>
	{
		if(aktualny_bufor==0){
 8003f24:	4b51      	ldr	r3, [pc, #324]	; (800406c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d14a      	bne.n	8003fc2 <HAL_TIM_PeriodElapsedCallback+0xb2>
					HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,buf[i]*glosnosc_guziczki[indeks_glosnosci]);
 8003f2c:	4b50      	ldr	r3, [pc, #320]	; (8004070 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a50      	ldr	r2, [pc, #320]	; (8004074 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003f32:	5cd3      	ldrb	r3, [r2, r3]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fc faa0 	bl	800047c <__aeabi_i2d>
 8003f3c:	4b4e      	ldr	r3, [pc, #312]	; (8004078 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	4a4e      	ldr	r2, [pc, #312]	; (800407c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4413      	add	r3, r2
 8003f46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4623      	mov	r3, r4
 8003f4e:	f7fc faff 	bl	8000550 <__aeabi_dmul>
 8003f52:	4603      	mov	r3, r0
 8003f54:	460c      	mov	r4, r1
 8003f56:	4618      	mov	r0, r3
 8003f58:	4621      	mov	r1, r4
 8003f5a:	f7fc fd0b 	bl	8000974 <__aeabi_d2uiz>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2200      	movs	r2, #0
 8003f62:	2100      	movs	r1, #0
 8003f64:	4846      	ldr	r0, [pc, #280]	; (8004080 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003f66:	f001 ffd5 	bl	8005f14 <HAL_DAC_SetValue>
					eof=f_eof(&file);
 8003f6a:	4b46      	ldr	r3, [pc, #280]	; (8004084 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	4b45      	ldr	r3, [pc, #276]	; (8004084 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	bf0c      	ite	eq
 8003f76:	2301      	moveq	r3, #1
 8003f78:	2300      	movne	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4b42      	ldr	r3, [pc, #264]	; (8004088 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003f80:	701a      	strb	r2, [r3, #0]
					if(eof ==0) f_read(&file, &buf2[i],1, &bytes_read);
 8003f82:	4b41      	ldr	r3, [pc, #260]	; (8004088 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <HAL_TIM_PeriodElapsedCallback+0x8e>
 8003f8a:	4b39      	ldr	r3, [pc, #228]	; (8004070 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a3f      	ldr	r2, [pc, #252]	; (800408c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003f90:	1899      	adds	r1, r3, r2
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	483b      	ldr	r0, [pc, #236]	; (8004084 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003f98:	f7ff fa39 	bl	800340e <f_read>
 8003f9c:	e001      	b.n	8003fa2 <HAL_TIM_PeriodElapsedCallback+0x92>
					else {next();}
 8003f9e:	f7ff fdef 	bl	8003b80 <next>
					i++;
 8003fa2:	4b33      	ldr	r3, [pc, #204]	; (8004070 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	4a31      	ldr	r2, [pc, #196]	; (8004070 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003faa:	6013      	str	r3, [r2, #0]
					if(i==BUFSIZE){
 8003fac:	4b30      	ldr	r3, [pc, #192]	; (8004070 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb4:	d105      	bne.n	8003fc2 <HAL_TIM_PeriodElapsedCallback+0xb2>
						aktualny_bufor = 1;
 8003fb6:	4b2d      	ldr	r3, [pc, #180]	; (800406c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
						j=0;
 8003fbc:	4b35      	ldr	r3, [pc, #212]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
						//HAL_TIM_Base_Start_IT(&htim7);*glosnosc_guziczki[indeks_glosnosci]
					}
				}

			if(aktualny_bufor==1){
 8003fc2:	4b2a      	ldr	r3, [pc, #168]	; (800406c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d14a      	bne.n	8004060 <HAL_TIM_PeriodElapsedCallback+0x150>
				HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,buf2[j]*glosnosc_guziczki[indeks_glosnosci]);
 8003fca:	4b32      	ldr	r3, [pc, #200]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a2f      	ldr	r2, [pc, #188]	; (800408c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003fd0:	5cd3      	ldrb	r3, [r2, r3]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fc fa51 	bl	800047c <__aeabi_i2d>
 8003fda:	4b27      	ldr	r3, [pc, #156]	; (8004078 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	4a27      	ldr	r2, [pc, #156]	; (800407c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4623      	mov	r3, r4
 8003fec:	f7fc fab0 	bl	8000550 <__aeabi_dmul>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	f7fc fcbc 	bl	8000974 <__aeabi_d2uiz>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2200      	movs	r2, #0
 8004000:	2100      	movs	r1, #0
 8004002:	481f      	ldr	r0, [pc, #124]	; (8004080 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8004004:	f001 ff86 	bl	8005f14 <HAL_DAC_SetValue>
				eof=f_eof(&file);
 8004008:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	429a      	cmp	r2, r3
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800401e:	701a      	strb	r2, [r3, #0]
				if(eof ==0) f_read(&file, &buf[j],1, &bytes_read);
 8004020:	4b19      	ldr	r3, [pc, #100]	; (8004088 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_TIM_PeriodElapsedCallback+0x12c>
 8004028:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a11      	ldr	r2, [pc, #68]	; (8004074 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800402e:	1899      	adds	r1, r3, r2
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004032:	2201      	movs	r2, #1
 8004034:	4813      	ldr	r0, [pc, #76]	; (8004084 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004036:	f7ff f9ea 	bl	800340e <f_read>
 800403a:	e001      	b.n	8004040 <HAL_TIM_PeriodElapsedCallback+0x130>
				else {next();}
 800403c:	f7ff fda0 	bl	8003b80 <next>
				j++;
 8004040:	4b14      	ldr	r3, [pc, #80]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3301      	adds	r3, #1
 8004046:	4a13      	ldr	r2, [pc, #76]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8004048:	6013      	str	r3, [r2, #0]
				if(j==BUFSIZE){
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004052:	d105      	bne.n	8004060 <HAL_TIM_PeriodElapsedCallback+0x150>
					aktualny_bufor = 0;
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004056:	2200      	movs	r2, #0
 8004058:	701a      	strb	r2, [r3, #0]
					i=0;
 800405a:	4b05      	ldr	r3, [pc, #20]	; (8004070 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
			}
			else bufforek();*/

	}

}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	bd90      	pop	{r4, r7, pc}
 8004068:	40000800 	.word	0x40000800
 800406c:	20000334 	.word	0x20000334
 8004070:	2000032c 	.word	0x2000032c
 8004074:	20000a20 	.word	0x20000a20
 8004078:	20000008 	.word	0x20000008
 800407c:	20000010 	.word	0x20000010
 8004080:	2000093c 	.word	0x2000093c
 8004084:	200004c8 	.word	0x200004c8
 8004088:	2000040c 	.word	0x2000040c
 800408c:	2000073c 	.word	0x2000073c
 8004090:	20000738 	.word	0x20000738
 8004094:	20000004 	.word	0x20000004

08004098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800409c:	f000 ff2e 	bl	8004efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040a0:	f000 f862 	bl	8004168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040a4:	f000 fa8c 	bl	80045c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80040a8:	f000 fa54 	bl	8004554 <MX_DMA_Init>
  MX_ADC1_Init();
 80040ac:	f000 f8c6 	bl	800423c <MX_ADC1_Init>
  MX_DAC_Init();
 80040b0:	f000 f916 	bl	80042e0 <MX_DAC_Init>
  MX_I2C3_Init();
 80040b4:	f000 f93e 	bl	8004334 <MX_I2C3_Init>
  MX_SPI3_Init();
 80040b8:	f000 f96a 	bl	8004390 <MX_SPI3_Init>
  MX_TIM6_Init();
 80040bc:	f000 f9ea 	bl	8004494 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80040c0:	f000 fa1e 	bl	8004500 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80040c4:	f000 f99a 	bl	80043fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 80040c8:	2100      	movs	r1, #0
 80040ca:	481b      	ldr	r0, [pc, #108]	; (8004138 <main+0xa0>)
 80040cc:	f001 fe1b 	bl	8005d06 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80040d0:	481a      	ldr	r0, [pc, #104]	; (800413c <main+0xa4>)
 80040d2:	f005 fdbc 	bl	8009c4e <HAL_TIM_Base_Start_IT>

   // HAL_ADC_Start_IT(&hadc1);

   // HAL_UART_Transmit_IT(&huart2, sendUART, sizeSendUART);

    	fresult = f_mount(&FatFs, "", 1);
 80040d6:	2201      	movs	r2, #1
 80040d8:	4919      	ldr	r1, [pc, #100]	; (8004140 <main+0xa8>)
 80040da:	481a      	ldr	r0, [pc, #104]	; (8004144 <main+0xac>)
 80040dc:	f7fe ffd4 	bl	8003088 <f_mount>
 80040e0:	4603      	mov	r3, r0
 80040e2:	461a      	mov	r2, r3
 80040e4:	4b18      	ldr	r3, [pc, #96]	; (8004148 <main+0xb0>)
 80040e6:	701a      	strb	r2, [r3, #0]
    	read_song();
 80040e8:	f7ff fce2 	bl	8003ab0 <read_song>
        fresult = f_open(&file, &utwor , FA_READ|FA_OPEN_EXISTING|FA_OPEN_ALWAYS);
 80040ec:	2211      	movs	r2, #17
 80040ee:	4917      	ldr	r1, [pc, #92]	; (800414c <main+0xb4>)
 80040f0:	4817      	ldr	r0, [pc, #92]	; (8004150 <main+0xb8>)
 80040f2:	f7ff f809 	bl	8003108 <f_open>
 80040f6:	4603      	mov	r3, r0
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b13      	ldr	r3, [pc, #76]	; (8004148 <main+0xb0>)
 80040fc:	701a      	strb	r2, [r3, #0]
        fresult = f_read(&file, &buf2, 352, &bytes_read);
 80040fe:	4b15      	ldr	r3, [pc, #84]	; (8004154 <main+0xbc>)
 8004100:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8004104:	4914      	ldr	r1, [pc, #80]	; (8004158 <main+0xc0>)
 8004106:	4812      	ldr	r0, [pc, #72]	; (8004150 <main+0xb8>)
 8004108:	f7ff f981 	bl	800340e <f_read>
 800410c:	4603      	mov	r3, r0
 800410e:	461a      	mov	r2, r3
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <main+0xb0>)
 8004112:	701a      	strb	r2, [r3, #0]

        f_read(&file, &buf,BUFSIZE, &bytes_read);
 8004114:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <main+0xbc>)
 8004116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800411a:	4910      	ldr	r1, [pc, #64]	; (800415c <main+0xc4>)
 800411c:	480c      	ldr	r0, [pc, #48]	; (8004150 <main+0xb8>)
 800411e:	f7ff f976 	bl	800340e <f_read>
        HAL_ADC_Start_DMA(&hadc1, value, 1);
 8004122:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <main+0xc8>)
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	2201      	movs	r2, #1
 8004128:	4619      	mov	r1, r3
 800412a:	480e      	ldr	r0, [pc, #56]	; (8004164 <main+0xcc>)
 800412c:	f001 f8fe 	bl	800532c <HAL_ADC_Start_DMA>
        //HAL_TIM_Base_Start_IT(&htim4);
       // HAL_DAC_Start_DMA(hdac, DAC_Channel_1, buf, 1, DAC_ALIGN_12B_R);

        //f_read(&file, &buf2,62000, &bytes_read);
      //  f_read(&file, &buf2,22047, &bytes_read);
        lcd_init();
 8004130:	f7ff fc4e 	bl	80039d0 <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004134:	e7fe      	b.n	8004134 <main+0x9c>
 8004136:	bf00      	nop
 8004138:	2000093c 	.word	0x2000093c
 800413c:	200009b0 	.word	0x200009b0
 8004140:	0800b570 	.word	0x0800b570
 8004144:	200000fc 	.word	0x200000fc
 8004148:	20000c20 	.word	0x20000c20
 800414c:	200003f8 	.word	0x200003f8
 8004150:	200004c8 	.word	0x200004c8
 8004154:	20000738 	.word	0x20000738
 8004158:	2000073c 	.word	0x2000073c
 800415c:	20000a20 	.word	0x20000a20
 8004160:	20000330 	.word	0x20000330
 8004164:	200006f0 	.word	0x200006f0

08004168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b094      	sub	sp, #80	; 0x50
 800416c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800416e:	f107 0320 	add.w	r3, r7, #32
 8004172:	2230      	movs	r2, #48	; 0x30
 8004174:	2100      	movs	r1, #0
 8004176:	4618      	mov	r0, r3
 8004178:	f006 fd5e 	bl	800ac38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800417c:	f107 030c 	add.w	r3, r7, #12
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800418c:	2300      	movs	r3, #0
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	4b28      	ldr	r3, [pc, #160]	; (8004234 <SystemClock_Config+0xcc>)
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	4a27      	ldr	r2, [pc, #156]	; (8004234 <SystemClock_Config+0xcc>)
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419a:	6413      	str	r3, [r2, #64]	; 0x40
 800419c:	4b25      	ldr	r3, [pc, #148]	; (8004234 <SystemClock_Config+0xcc>)
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80041a8:	2300      	movs	r3, #0
 80041aa:	607b      	str	r3, [r7, #4]
 80041ac:	4b22      	ldr	r3, [pc, #136]	; (8004238 <SystemClock_Config+0xd0>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a21      	ldr	r2, [pc, #132]	; (8004238 <SystemClock_Config+0xd0>)
 80041b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	4b1f      	ldr	r3, [pc, #124]	; (8004238 <SystemClock_Config+0xd0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041c4:	2301      	movs	r3, #1
 80041c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041ce:	2302      	movs	r3, #2
 80041d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80041d8:	2304      	movs	r3, #4
 80041da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80041dc:	23a8      	movs	r3, #168	; 0xa8
 80041de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80041e0:	2302      	movs	r3, #2
 80041e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80041e4:	2303      	movs	r3, #3
 80041e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041e8:	f107 0320 	add.w	r3, r7, #32
 80041ec:	4618      	mov	r0, r3
 80041ee:	f004 fcad 	bl	8008b4c <HAL_RCC_OscConfig>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80041f8:	f000 fa76 	bl	80046e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041fc:	230f      	movs	r3, #15
 80041fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004200:	2302      	movs	r3, #2
 8004202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004208:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800420c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800420e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004212:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004214:	f107 030c 	add.w	r3, r7, #12
 8004218:	2105      	movs	r1, #5
 800421a:	4618      	mov	r0, r3
 800421c:	f004 ff06 	bl	800902c <HAL_RCC_ClockConfig>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004226:	f000 fa5f 	bl	80046e8 <Error_Handler>
  }
}
 800422a:	bf00      	nop
 800422c:	3750      	adds	r7, #80	; 0x50
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800
 8004238:	40007000 	.word	0x40007000

0800423c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004242:	463b      	mov	r3, r7
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800424e:	4b21      	ldr	r3, [pc, #132]	; (80042d4 <MX_ADC1_Init+0x98>)
 8004250:	4a21      	ldr	r2, [pc, #132]	; (80042d8 <MX_ADC1_Init+0x9c>)
 8004252:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004254:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <MX_ADC1_Init+0x98>)
 8004256:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800425a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800425c:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <MX_ADC1_Init+0x98>)
 800425e:	2200      	movs	r2, #0
 8004260:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004262:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <MX_ADC1_Init+0x98>)
 8004264:	2201      	movs	r2, #1
 8004266:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004268:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <MX_ADC1_Init+0x98>)
 800426a:	2201      	movs	r2, #1
 800426c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800426e:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <MX_ADC1_Init+0x98>)
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004276:	4b17      	ldr	r3, [pc, #92]	; (80042d4 <MX_ADC1_Init+0x98>)
 8004278:	2200      	movs	r2, #0
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800427c:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <MX_ADC1_Init+0x98>)
 800427e:	4a17      	ldr	r2, [pc, #92]	; (80042dc <MX_ADC1_Init+0xa0>)
 8004280:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004282:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <MX_ADC1_Init+0x98>)
 8004284:	2200      	movs	r2, #0
 8004286:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004288:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <MX_ADC1_Init+0x98>)
 800428a:	2201      	movs	r2, #1
 800428c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800428e:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <MX_ADC1_Init+0x98>)
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004296:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <MX_ADC1_Init+0x98>)
 8004298:	2201      	movs	r2, #1
 800429a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800429c:	480d      	ldr	r0, [pc, #52]	; (80042d4 <MX_ADC1_Init+0x98>)
 800429e:	f000 fec1 	bl	8005024 <HAL_ADC_Init>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80042a8:	f000 fa1e 	bl	80046e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80042ac:	2303      	movs	r3, #3
 80042ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80042b0:	2301      	movs	r3, #1
 80042b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042b8:	463b      	mov	r3, r7
 80042ba:	4619      	mov	r1, r3
 80042bc:	4805      	ldr	r0, [pc, #20]	; (80042d4 <MX_ADC1_Init+0x98>)
 80042be:	f001 f945 	bl	800554c <HAL_ADC_ConfigChannel>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80042c8:	f000 fa0e 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	200006f0 	.word	0x200006f0
 80042d8:	40012000 	.word	0x40012000
 80042dc:	0f000001 	.word	0x0f000001

080042e0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80042e6:	463b      	mov	r3, r7
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80042ee:	4b0f      	ldr	r3, [pc, #60]	; (800432c <MX_DAC_Init+0x4c>)
 80042f0:	4a0f      	ldr	r2, [pc, #60]	; (8004330 <MX_DAC_Init+0x50>)
 80042f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80042f4:	480d      	ldr	r0, [pc, #52]	; (800432c <MX_DAC_Init+0x4c>)
 80042f6:	f001 fce4 	bl	8005cc2 <HAL_DAC_Init>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8004300:	f000 f9f2 	bl	80046e8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8004304:	2304      	movs	r3, #4
 8004306:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004308:	2300      	movs	r3, #0
 800430a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800430c:	463b      	mov	r3, r7
 800430e:	2200      	movs	r2, #0
 8004310:	4619      	mov	r1, r3
 8004312:	4806      	ldr	r0, [pc, #24]	; (800432c <MX_DAC_Init+0x4c>)
 8004314:	f001 fdb1 	bl	8005e7a <HAL_DAC_ConfigChannel>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800431e:	f000 f9e3 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	2000093c 	.word	0x2000093c
 8004330:	40007400 	.word	0x40007400

08004334 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004338:	4b12      	ldr	r3, [pc, #72]	; (8004384 <MX_I2C3_Init+0x50>)
 800433a:	4a13      	ldr	r2, [pc, #76]	; (8004388 <MX_I2C3_Init+0x54>)
 800433c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <MX_I2C3_Init+0x50>)
 8004340:	4a12      	ldr	r2, [pc, #72]	; (800438c <MX_I2C3_Init+0x58>)
 8004342:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <MX_I2C3_Init+0x50>)
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800434a:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <MX_I2C3_Init+0x50>)
 800434c:	2200      	movs	r2, #0
 800434e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <MX_I2C3_Init+0x50>)
 8004352:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004356:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <MX_I2C3_Init+0x50>)
 800435a:	2200      	movs	r2, #0
 800435c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800435e:	4b09      	ldr	r3, [pc, #36]	; (8004384 <MX_I2C3_Init+0x50>)
 8004360:	2200      	movs	r2, #0
 8004362:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004364:	4b07      	ldr	r3, [pc, #28]	; (8004384 <MX_I2C3_Init+0x50>)
 8004366:	2200      	movs	r2, #0
 8004368:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800436a:	4b06      	ldr	r3, [pc, #24]	; (8004384 <MX_I2C3_Init+0x50>)
 800436c:	2200      	movs	r2, #0
 800436e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004370:	4804      	ldr	r0, [pc, #16]	; (8004384 <MX_I2C3_Init+0x50>)
 8004372:	f002 fb9b 	bl	8006aac <HAL_I2C_Init>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800437c:	f000 f9b4 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004380:	bf00      	nop
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000364 	.word	0x20000364
 8004388:	40005c00 	.word	0x40005c00
 800438c:	000186a0 	.word	0x000186a0

08004390 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004394:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <MX_SPI3_Init+0x64>)
 8004396:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <MX_SPI3_Init+0x68>)
 8004398:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800439a:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <MX_SPI3_Init+0x64>)
 800439c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80043a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80043a2:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <MX_SPI3_Init+0x64>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80043a8:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <MX_SPI3_Init+0x64>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043ae:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <MX_SPI3_Init+0x64>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <MX_SPI3_Init+0x64>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80043ba:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <MX_SPI3_Init+0x64>)
 80043bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80043c2:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <MX_SPI3_Init+0x64>)
 80043c4:	2218      	movs	r2, #24
 80043c6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <MX_SPI3_Init+0x64>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <MX_SPI3_Init+0x64>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d4:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <MX_SPI3_Init+0x64>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <MX_SPI3_Init+0x64>)
 80043dc:	220a      	movs	r2, #10
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80043e0:	4804      	ldr	r0, [pc, #16]	; (80043f4 <MX_SPI3_Init+0x64>)
 80043e2:	f005 f815 	bl	8009410 <HAL_SPI_Init>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80043ec:	f000 f97c 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80043f0:	bf00      	nop
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000410 	.word	0x20000410
 80043f8:	40003c00 	.word	0x40003c00

080043fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004402:	f107 0308 	add.w	r3, r7, #8
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	605a      	str	r2, [r3, #4]
 800440c:	609a      	str	r2, [r3, #8]
 800440e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004410:	463b      	mov	r3, r7
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004418:	4b1c      	ldr	r3, [pc, #112]	; (800448c <MX_TIM4_Init+0x90>)
 800441a:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <MX_TIM4_Init+0x94>)
 800441c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 126;
 800441e:	4b1b      	ldr	r3, [pc, #108]	; (800448c <MX_TIM4_Init+0x90>)
 8004420:	227e      	movs	r2, #126	; 0x7e
 8004422:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004424:	4b19      	ldr	r3, [pc, #100]	; (800448c <MX_TIM4_Init+0x90>)
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14;
 800442a:	4b18      	ldr	r3, [pc, #96]	; (800448c <MX_TIM4_Init+0x90>)
 800442c:	220e      	movs	r2, #14
 800442e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004430:	4b16      	ldr	r3, [pc, #88]	; (800448c <MX_TIM4_Init+0x90>)
 8004432:	2200      	movs	r2, #0
 8004434:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004436:	4b15      	ldr	r3, [pc, #84]	; (800448c <MX_TIM4_Init+0x90>)
 8004438:	2200      	movs	r2, #0
 800443a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800443c:	4813      	ldr	r0, [pc, #76]	; (800448c <MX_TIM4_Init+0x90>)
 800443e:	f005 fbdb 	bl	8009bf8 <HAL_TIM_Base_Init>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8004448:	f000 f94e 	bl	80046e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800444c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004450:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004452:	f107 0308 	add.w	r3, r7, #8
 8004456:	4619      	mov	r1, r3
 8004458:	480c      	ldr	r0, [pc, #48]	; (800448c <MX_TIM4_Init+0x90>)
 800445a:	f005 fd4f 	bl	8009efc <HAL_TIM_ConfigClockSource>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8004464:	f000 f940 	bl	80046e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004468:	2300      	movs	r3, #0
 800446a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800446c:	2300      	movs	r3, #0
 800446e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004470:	463b      	mov	r3, r7
 8004472:	4619      	mov	r1, r3
 8004474:	4805      	ldr	r0, [pc, #20]	; (800448c <MX_TIM4_Init+0x90>)
 8004476:	f005 ff5b 	bl	800a330 <HAL_TIMEx_MasterConfigSynchronization>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8004480:	f000 f932 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004484:	bf00      	nop
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	200003b8 	.word	0x200003b8
 8004490:	40000800 	.word	0x40000800

08004494 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800449a:	463b      	mov	r3, r7
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80044a2:	4b15      	ldr	r3, [pc, #84]	; (80044f8 <MX_TIM6_Init+0x64>)
 80044a4:	4a15      	ldr	r2, [pc, #84]	; (80044fc <MX_TIM6_Init+0x68>)
 80044a6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80044a8:	4b13      	ldr	r3, [pc, #76]	; (80044f8 <MX_TIM6_Init+0x64>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ae:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <MX_TIM6_Init+0x64>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1905;
 80044b4:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <MX_TIM6_Init+0x64>)
 80044b6:	f240 7271 	movw	r2, #1905	; 0x771
 80044ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044bc:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <MX_TIM6_Init+0x64>)
 80044be:	2200      	movs	r2, #0
 80044c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80044c2:	480d      	ldr	r0, [pc, #52]	; (80044f8 <MX_TIM6_Init+0x64>)
 80044c4:	f005 fb98 	bl	8009bf8 <HAL_TIM_Base_Init>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80044ce:	f000 f90b 	bl	80046e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80044d2:	2320      	movs	r3, #32
 80044d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80044da:	463b      	mov	r3, r7
 80044dc:	4619      	mov	r1, r3
 80044de:	4806      	ldr	r0, [pc, #24]	; (80044f8 <MX_TIM6_Init+0x64>)
 80044e0:	f005 ff26 	bl	800a330 <HAL_TIMEx_MasterConfigSynchronization>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80044ea:	f000 f8fd 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	200009b0 	.word	0x200009b0
 80044fc:	40001000 	.word	0x40001000

08004500 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004504:	4b11      	ldr	r3, [pc, #68]	; (800454c <MX_USART2_UART_Init+0x4c>)
 8004506:	4a12      	ldr	r2, [pc, #72]	; (8004550 <MX_USART2_UART_Init+0x50>)
 8004508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <MX_USART2_UART_Init+0x4c>)
 800450c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004512:	4b0e      	ldr	r3, [pc, #56]	; (800454c <MX_USART2_UART_Init+0x4c>)
 8004514:	2200      	movs	r2, #0
 8004516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <MX_USART2_UART_Init+0x4c>)
 800451a:	2200      	movs	r2, #0
 800451c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <MX_USART2_UART_Init+0x4c>)
 8004520:	2200      	movs	r2, #0
 8004522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <MX_USART2_UART_Init+0x4c>)
 8004526:	220c      	movs	r2, #12
 8004528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800452a:	4b08      	ldr	r3, [pc, #32]	; (800454c <MX_USART2_UART_Init+0x4c>)
 800452c:	2200      	movs	r2, #0
 800452e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <MX_USART2_UART_Init+0x4c>)
 8004532:	2200      	movs	r2, #0
 8004534:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004536:	4805      	ldr	r0, [pc, #20]	; (800454c <MX_USART2_UART_Init+0x4c>)
 8004538:	f005 ff8a 	bl	800a450 <HAL_UART_Init>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004542:	f000 f8d1 	bl	80046e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000c24 	.word	0x20000c24
 8004550:	40004400 	.word	0x40004400

08004554 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800455a:	2300      	movs	r3, #0
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	4b17      	ldr	r3, [pc, #92]	; (80045bc <MX_DMA_Init+0x68>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	4a16      	ldr	r2, [pc, #88]	; (80045bc <MX_DMA_Init+0x68>)
 8004564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004568:	6313      	str	r3, [r2, #48]	; 0x30
 800456a:	4b14      	ldr	r3, [pc, #80]	; (80045bc <MX_DMA_Init+0x68>)
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004572:	607b      	str	r3, [r7, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	603b      	str	r3, [r7, #0]
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <MX_DMA_Init+0x68>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	4a0f      	ldr	r2, [pc, #60]	; (80045bc <MX_DMA_Init+0x68>)
 8004580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004584:	6313      	str	r3, [r2, #48]	; 0x30
 8004586:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <MX_DMA_Init+0x68>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004592:	2200      	movs	r2, #0
 8004594:	2100      	movs	r1, #0
 8004596:	2010      	movs	r0, #16
 8004598:	f001 fb5d 	bl	8005c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800459c:	2010      	movs	r0, #16
 800459e:	f001 fb76 	bl	8005c8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2100      	movs	r1, #0
 80045a6:	2038      	movs	r0, #56	; 0x38
 80045a8:	f001 fb55 	bl	8005c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80045ac:	2038      	movs	r0, #56	; 0x38
 80045ae:	f001 fb6e 	bl	8005c8e <HAL_NVIC_EnableIRQ>

}
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40023800 	.word	0x40023800

080045c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c6:	f107 0314 	add.w	r3, r7, #20
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	609a      	str	r2, [r3, #8]
 80045d2:	60da      	str	r2, [r3, #12]
 80045d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	4b3f      	ldr	r3, [pc, #252]	; (80046d8 <MX_GPIO_Init+0x118>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	4a3e      	ldr	r2, [pc, #248]	; (80046d8 <MX_GPIO_Init+0x118>)
 80045e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e4:	6313      	str	r3, [r2, #48]	; 0x30
 80045e6:	4b3c      	ldr	r3, [pc, #240]	; (80046d8 <MX_GPIO_Init+0x118>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <MX_GPIO_Init+0x118>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	4a37      	ldr	r2, [pc, #220]	; (80046d8 <MX_GPIO_Init+0x118>)
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	6313      	str	r3, [r2, #48]	; 0x30
 8004602:	4b35      	ldr	r3, [pc, #212]	; (80046d8 <MX_GPIO_Init+0x118>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	4b31      	ldr	r3, [pc, #196]	; (80046d8 <MX_GPIO_Init+0x118>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	4a30      	ldr	r2, [pc, #192]	; (80046d8 <MX_GPIO_Init+0x118>)
 8004618:	f043 0302 	orr.w	r3, r3, #2
 800461c:	6313      	str	r3, [r2, #48]	; 0x30
 800461e:	4b2e      	ldr	r3, [pc, #184]	; (80046d8 <MX_GPIO_Init+0x118>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	4b2a      	ldr	r3, [pc, #168]	; (80046d8 <MX_GPIO_Init+0x118>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	4a29      	ldr	r2, [pc, #164]	; (80046d8 <MX_GPIO_Init+0x118>)
 8004634:	f043 0308 	orr.w	r3, r3, #8
 8004638:	6313      	str	r3, [r2, #48]	; 0x30
 800463a:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <MX_GPIO_Init+0x118>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	607b      	str	r3, [r7, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004646:	2300      	movs	r3, #0
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <MX_GPIO_Init+0x118>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	4a22      	ldr	r2, [pc, #136]	; (80046d8 <MX_GPIO_Init+0x118>)
 8004650:	f043 0304 	orr.w	r3, r3, #4
 8004654:	6313      	str	r3, [r2, #48]	; 0x30
 8004656:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <MX_GPIO_Init+0x118>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8004662:	2200      	movs	r2, #0
 8004664:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8004668:	481c      	ldr	r0, [pc, #112]	; (80046dc <MX_GPIO_Init+0x11c>)
 800466a:	f002 f9d3 	bl	8006a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 800466e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004672:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004674:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <MX_GPIO_Init+0x120>)
 8004676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004678:	2301      	movs	r3, #1
 800467a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800467c:	f107 0314 	add.w	r3, r7, #20
 8004680:	4619      	mov	r1, r3
 8004682:	4818      	ldr	r0, [pc, #96]	; (80046e4 <MX_GPIO_Init+0x124>)
 8004684:	f002 f814 	bl	80066b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004688:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800468c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004696:	f107 0314 	add.w	r3, r7, #20
 800469a:	4619      	mov	r1, r3
 800469c:	480f      	ldr	r0, [pc, #60]	; (80046dc <MX_GPIO_Init+0x11c>)
 800469e:	f002 f807 	bl	80066b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80046a2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80046a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046a8:	2301      	movs	r3, #1
 80046aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b0:	2300      	movs	r3, #0
 80046b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046b4:	f107 0314 	add.w	r3, r7, #20
 80046b8:	4619      	mov	r1, r3
 80046ba:	4808      	ldr	r0, [pc, #32]	; (80046dc <MX_GPIO_Init+0x11c>)
 80046bc:	f001 fff8 	bl	80066b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80046c0:	2200      	movs	r2, #0
 80046c2:	2101      	movs	r1, #1
 80046c4:	2028      	movs	r0, #40	; 0x28
 80046c6:	f001 fac6 	bl	8005c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80046ca:	2028      	movs	r0, #40	; 0x28
 80046cc:	f001 fadf 	bl	8005c8e <HAL_NVIC_EnableIRQ>

}
 80046d0:	bf00      	nop
 80046d2:	3728      	adds	r7, #40	; 0x28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40023800 	.word	0x40023800
 80046dc:	40020c00 	.word	0x40020c00
 80046e0:	10310000 	.word	0x10310000
 80046e4:	40020400 	.word	0x40020400

080046e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80046ec:	bf00      	nop
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	4b10      	ldr	r3, [pc, #64]	; (8004744 <HAL_MspInit+0x4c>)
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	4a0f      	ldr	r2, [pc, #60]	; (8004744 <HAL_MspInit+0x4c>)
 8004708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800470c:	6453      	str	r3, [r2, #68]	; 0x44
 800470e:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <HAL_MspInit+0x4c>)
 8004710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004716:	607b      	str	r3, [r7, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	4b09      	ldr	r3, [pc, #36]	; (8004744 <HAL_MspInit+0x4c>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	4a08      	ldr	r2, [pc, #32]	; (8004744 <HAL_MspInit+0x4c>)
 8004724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004728:	6413      	str	r3, [r2, #64]	; 0x40
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <HAL_MspInit+0x4c>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800

08004748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	; 0x28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004750:	f107 0314 	add.w	r3, r7, #20
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	609a      	str	r2, [r3, #8]
 800475c:	60da      	str	r2, [r3, #12]
 800475e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a33      	ldr	r2, [pc, #204]	; (8004834 <HAL_ADC_MspInit+0xec>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d15f      	bne.n	800482a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	4b32      	ldr	r3, [pc, #200]	; (8004838 <HAL_ADC_MspInit+0xf0>)
 8004770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004772:	4a31      	ldr	r2, [pc, #196]	; (8004838 <HAL_ADC_MspInit+0xf0>)
 8004774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004778:	6453      	str	r3, [r2, #68]	; 0x44
 800477a:	4b2f      	ldr	r3, [pc, #188]	; (8004838 <HAL_ADC_MspInit+0xf0>)
 800477c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <HAL_ADC_MspInit+0xf0>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	4a2a      	ldr	r2, [pc, #168]	; (8004838 <HAL_ADC_MspInit+0xf0>)
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	6313      	str	r3, [r2, #48]	; 0x30
 8004796:	4b28      	ldr	r3, [pc, #160]	; (8004838 <HAL_ADC_MspInit+0xf0>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80047a2:	2308      	movs	r3, #8
 80047a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047a6:	2303      	movs	r3, #3
 80047a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ae:	f107 0314 	add.w	r3, r7, #20
 80047b2:	4619      	mov	r1, r3
 80047b4:	4821      	ldr	r0, [pc, #132]	; (800483c <HAL_ADC_MspInit+0xf4>)
 80047b6:	f001 ff7b 	bl	80066b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80047ba:	4b21      	ldr	r3, [pc, #132]	; (8004840 <HAL_ADC_MspInit+0xf8>)
 80047bc:	4a21      	ldr	r2, [pc, #132]	; (8004844 <HAL_ADC_MspInit+0xfc>)
 80047be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80047c0:	4b1f      	ldr	r3, [pc, #124]	; (8004840 <HAL_ADC_MspInit+0xf8>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047c6:	4b1e      	ldr	r3, [pc, #120]	; (8004840 <HAL_ADC_MspInit+0xf8>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047cc:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <HAL_ADC_MspInit+0xf8>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80047d2:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <HAL_ADC_MspInit+0xf8>)
 80047d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80047da:	4b19      	ldr	r3, [pc, #100]	; (8004840 <HAL_ADC_MspInit+0xf8>)
 80047dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80047e2:	4b17      	ldr	r3, [pc, #92]	; (8004840 <HAL_ADC_MspInit+0xf8>)
 80047e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <HAL_ADC_MspInit+0xf8>)
 80047ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80047f2:	4b13      	ldr	r3, [pc, #76]	; (8004840 <HAL_ADC_MspInit+0xf8>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047f8:	4b11      	ldr	r3, [pc, #68]	; (8004840 <HAL_ADC_MspInit+0xf8>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80047fe:	4810      	ldr	r0, [pc, #64]	; (8004840 <HAL_ADC_MspInit+0xf8>)
 8004800:	f001 fbb8 	bl	8005f74 <HAL_DMA_Init>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800480a:	f7ff ff6d 	bl	80046e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a0b      	ldr	r2, [pc, #44]	; (8004840 <HAL_ADC_MspInit+0xf8>)
 8004812:	639a      	str	r2, [r3, #56]	; 0x38
 8004814:	4a0a      	ldr	r2, [pc, #40]	; (8004840 <HAL_ADC_MspInit+0xf8>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800481a:	2200      	movs	r2, #0
 800481c:	2100      	movs	r1, #0
 800481e:	2012      	movs	r0, #18
 8004820:	f001 fa19 	bl	8005c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004824:	2012      	movs	r0, #18
 8004826:	f001 fa32 	bl	8005c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800482a:	bf00      	nop
 800482c:	3728      	adds	r7, #40	; 0x28
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40012000 	.word	0x40012000
 8004838:	40023800 	.word	0x40023800
 800483c:	40020000 	.word	0x40020000
 8004840:	20000950 	.word	0x20000950
 8004844:	40026410 	.word	0x40026410

08004848 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	; 0x28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004850:	f107 0314 	add.w	r3, r7, #20
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	605a      	str	r2, [r3, #4]
 800485a:	609a      	str	r2, [r3, #8]
 800485c:	60da      	str	r2, [r3, #12]
 800485e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a32      	ldr	r2, [pc, #200]	; (8004930 <HAL_DAC_MspInit+0xe8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d15d      	bne.n	8004926 <HAL_DAC_MspInit+0xde>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	4b31      	ldr	r3, [pc, #196]	; (8004934 <HAL_DAC_MspInit+0xec>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	4a30      	ldr	r2, [pc, #192]	; (8004934 <HAL_DAC_MspInit+0xec>)
 8004874:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004878:	6413      	str	r3, [r2, #64]	; 0x40
 800487a:	4b2e      	ldr	r3, [pc, #184]	; (8004934 <HAL_DAC_MspInit+0xec>)
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	4b2a      	ldr	r3, [pc, #168]	; (8004934 <HAL_DAC_MspInit+0xec>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4a29      	ldr	r2, [pc, #164]	; (8004934 <HAL_DAC_MspInit+0xec>)
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	6313      	str	r3, [r2, #48]	; 0x30
 8004896:	4b27      	ldr	r3, [pc, #156]	; (8004934 <HAL_DAC_MspInit+0xec>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80048a2:	2310      	movs	r3, #16
 80048a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048a6:	2303      	movs	r3, #3
 80048a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ae:	f107 0314 	add.w	r3, r7, #20
 80048b2:	4619      	mov	r1, r3
 80048b4:	4820      	ldr	r0, [pc, #128]	; (8004938 <HAL_DAC_MspInit+0xf0>)
 80048b6:	f001 fefb 	bl	80066b0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80048ba:	4b20      	ldr	r3, [pc, #128]	; (800493c <HAL_DAC_MspInit+0xf4>)
 80048bc:	4a20      	ldr	r2, [pc, #128]	; (8004940 <HAL_DAC_MspInit+0xf8>)
 80048be:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80048c0:	4b1e      	ldr	r3, [pc, #120]	; (800493c <HAL_DAC_MspInit+0xf4>)
 80048c2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80048c6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048c8:	4b1c      	ldr	r3, [pc, #112]	; (800493c <HAL_DAC_MspInit+0xf4>)
 80048ca:	2240      	movs	r2, #64	; 0x40
 80048cc:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80048ce:	4b1b      	ldr	r3, [pc, #108]	; (800493c <HAL_DAC_MspInit+0xf4>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80048d4:	4b19      	ldr	r3, [pc, #100]	; (800493c <HAL_DAC_MspInit+0xf4>)
 80048d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048da:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048dc:	4b17      	ldr	r3, [pc, #92]	; (800493c <HAL_DAC_MspInit+0xf4>)
 80048de:	2200      	movs	r2, #0
 80048e0:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048e2:	4b16      	ldr	r3, [pc, #88]	; (800493c <HAL_DAC_MspInit+0xf4>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80048e8:	4b14      	ldr	r3, [pc, #80]	; (800493c <HAL_DAC_MspInit+0xf4>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <HAL_DAC_MspInit+0xf4>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048f4:	4b11      	ldr	r3, [pc, #68]	; (800493c <HAL_DAC_MspInit+0xf4>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80048fa:	4810      	ldr	r0, [pc, #64]	; (800493c <HAL_DAC_MspInit+0xf4>)
 80048fc:	f001 fb3a 	bl	8005f74 <HAL_DMA_Init>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8004906:	f7ff feef 	bl	80046e8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a0b      	ldr	r2, [pc, #44]	; (800493c <HAL_DAC_MspInit+0xf4>)
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	4a0a      	ldr	r2, [pc, #40]	; (800493c <HAL_DAC_MspInit+0xf4>)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004916:	2200      	movs	r2, #0
 8004918:	2100      	movs	r1, #0
 800491a:	2036      	movs	r0, #54	; 0x36
 800491c:	f001 f99b 	bl	8005c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004920:	2036      	movs	r0, #54	; 0x36
 8004922:	f001 f9b4 	bl	8005c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004926:	bf00      	nop
 8004928:	3728      	adds	r7, #40	; 0x28
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40007400 	.word	0x40007400
 8004934:	40023800 	.word	0x40023800
 8004938:	40020000 	.word	0x40020000
 800493c:	20000468 	.word	0x20000468
 8004940:	40026088 	.word	0x40026088

08004944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	; 0x28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800494c:	f107 0314 	add.w	r3, r7, #20
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	605a      	str	r2, [r3, #4]
 8004956:	609a      	str	r2, [r3, #8]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a31      	ldr	r2, [pc, #196]	; (8004a28 <HAL_I2C_MspInit+0xe4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d15b      	bne.n	8004a1e <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	4b30      	ldr	r3, [pc, #192]	; (8004a2c <HAL_I2C_MspInit+0xe8>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	4a2f      	ldr	r2, [pc, #188]	; (8004a2c <HAL_I2C_MspInit+0xe8>)
 8004970:	f043 0304 	orr.w	r3, r3, #4
 8004974:	6313      	str	r3, [r2, #48]	; 0x30
 8004976:	4b2d      	ldr	r3, [pc, #180]	; (8004a2c <HAL_I2C_MspInit+0xe8>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	4b29      	ldr	r3, [pc, #164]	; (8004a2c <HAL_I2C_MspInit+0xe8>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	4a28      	ldr	r2, [pc, #160]	; (8004a2c <HAL_I2C_MspInit+0xe8>)
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	6313      	str	r3, [r2, #48]	; 0x30
 8004992:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <HAL_I2C_MspInit+0xe8>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800499e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049a4:	2312      	movs	r3, #18
 80049a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049a8:	2301      	movs	r3, #1
 80049aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ac:	2303      	movs	r3, #3
 80049ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80049b0:	2304      	movs	r3, #4
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049b4:	f107 0314 	add.w	r3, r7, #20
 80049b8:	4619      	mov	r1, r3
 80049ba:	481d      	ldr	r0, [pc, #116]	; (8004a30 <HAL_I2C_MspInit+0xec>)
 80049bc:	f001 fe78 	bl	80066b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80049c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049c6:	2312      	movs	r3, #18
 80049c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049ca:	2301      	movs	r3, #1
 80049cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ce:	2303      	movs	r3, #3
 80049d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80049d2:	2304      	movs	r3, #4
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049d6:	f107 0314 	add.w	r3, r7, #20
 80049da:	4619      	mov	r1, r3
 80049dc:	4815      	ldr	r0, [pc, #84]	; (8004a34 <HAL_I2C_MspInit+0xf0>)
 80049de:	f001 fe67 	bl	80066b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <HAL_I2C_MspInit+0xe8>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	4a10      	ldr	r2, [pc, #64]	; (8004a2c <HAL_I2C_MspInit+0xe8>)
 80049ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049f0:	6413      	str	r3, [r2, #64]	; 0x40
 80049f2:	4b0e      	ldr	r3, [pc, #56]	; (8004a2c <HAL_I2C_MspInit+0xe8>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049fa:	60bb      	str	r3, [r7, #8]
 80049fc:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80049fe:	2200      	movs	r2, #0
 8004a00:	2100      	movs	r1, #0
 8004a02:	2048      	movs	r0, #72	; 0x48
 8004a04:	f001 f927 	bl	8005c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8004a08:	2048      	movs	r0, #72	; 0x48
 8004a0a:	f001 f940 	bl	8005c8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2100      	movs	r1, #0
 8004a12:	2049      	movs	r0, #73	; 0x49
 8004a14:	f001 f91f 	bl	8005c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8004a18:	2049      	movs	r0, #73	; 0x49
 8004a1a:	f001 f938 	bl	8005c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004a1e:	bf00      	nop
 8004a20:	3728      	adds	r7, #40	; 0x28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40005c00 	.word	0x40005c00
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40020800 	.word	0x40020800
 8004a34:	40020000 	.word	0x40020000

08004a38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a40:	f107 0314 	add.w	r3, r7, #20
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a19      	ldr	r2, [pc, #100]	; (8004abc <HAL_SPI_MspInit+0x84>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d12b      	bne.n	8004ab2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	4b18      	ldr	r3, [pc, #96]	; (8004ac0 <HAL_SPI_MspInit+0x88>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	4a17      	ldr	r2, [pc, #92]	; (8004ac0 <HAL_SPI_MspInit+0x88>)
 8004a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a68:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6a:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <HAL_SPI_MspInit+0x88>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <HAL_SPI_MspInit+0x88>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	4a10      	ldr	r2, [pc, #64]	; (8004ac0 <HAL_SPI_MspInit+0x88>)
 8004a80:	f043 0302 	orr.w	r3, r3, #2
 8004a84:	6313      	str	r3, [r2, #48]	; 0x30
 8004a86:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <HAL_SPI_MspInit+0x88>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004a92:	2338      	movs	r3, #56	; 0x38
 8004a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a96:	2302      	movs	r3, #2
 8004a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004aa2:	2306      	movs	r3, #6
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa6:	f107 0314 	add.w	r3, r7, #20
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4805      	ldr	r0, [pc, #20]	; (8004ac4 <HAL_SPI_MspInit+0x8c>)
 8004aae:	f001 fdff 	bl	80066b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004ab2:	bf00      	nop
 8004ab4:	3728      	adds	r7, #40	; 0x28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40003c00 	.word	0x40003c00
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	40020400 	.word	0x40020400

08004ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <HAL_TIM_Base_MspInit+0x80>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d116      	bne.n	8004b08 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <HAL_TIM_Base_MspInit+0x84>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	4a1a      	ldr	r2, [pc, #104]	; (8004b4c <HAL_TIM_Base_MspInit+0x84>)
 8004ae4:	f043 0304 	orr.w	r3, r3, #4
 8004ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aea:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <HAL_TIM_Base_MspInit+0x84>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8004af6:	2200      	movs	r2, #0
 8004af8:	2101      	movs	r1, #1
 8004afa:	201e      	movs	r0, #30
 8004afc:	f001 f8ab 	bl	8005c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004b00:	201e      	movs	r0, #30
 8004b02:	f001 f8c4 	bl	8005c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004b06:	e01a      	b.n	8004b3e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a10      	ldr	r2, [pc, #64]	; (8004b50 <HAL_TIM_Base_MspInit+0x88>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d115      	bne.n	8004b3e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <HAL_TIM_Base_MspInit+0x84>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	4a0c      	ldr	r2, [pc, #48]	; (8004b4c <HAL_TIM_Base_MspInit+0x84>)
 8004b1c:	f043 0310 	orr.w	r3, r3, #16
 8004b20:	6413      	str	r3, [r2, #64]	; 0x40
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <HAL_TIM_Base_MspInit+0x84>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2100      	movs	r1, #0
 8004b32:	2036      	movs	r0, #54	; 0x36
 8004b34:	f001 f88f 	bl	8005c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004b38:	2036      	movs	r0, #54	; 0x36
 8004b3a:	f001 f8a8 	bl	8005c8e <HAL_NVIC_EnableIRQ>
}
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40000800 	.word	0x40000800
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	40001000 	.word	0x40001000

08004b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	; 0x28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b5c:	f107 0314 	add.w	r3, r7, #20
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	609a      	str	r2, [r3, #8]
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a28      	ldr	r2, [pc, #160]	; (8004c14 <HAL_UART_MspInit+0xc0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d149      	bne.n	8004c0a <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	4b27      	ldr	r3, [pc, #156]	; (8004c18 <HAL_UART_MspInit+0xc4>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	4a26      	ldr	r2, [pc, #152]	; (8004c18 <HAL_UART_MspInit+0xc4>)
 8004b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b84:	6413      	str	r3, [r2, #64]	; 0x40
 8004b86:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <HAL_UART_MspInit+0xc4>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	4b20      	ldr	r3, [pc, #128]	; (8004c18 <HAL_UART_MspInit+0xc4>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <HAL_UART_MspInit+0xc4>)
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba2:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <HAL_UART_MspInit+0xc4>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <HAL_UART_MspInit+0xc4>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <HAL_UART_MspInit+0xc4>)
 8004bb8:	f043 0308 	orr.w	r3, r3, #8
 8004bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbe:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <HAL_UART_MspInit+0xc4>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	60bb      	str	r3, [r7, #8]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004bca:	2304      	movs	r3, #4
 8004bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bce:	2302      	movs	r3, #2
 8004bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004bda:	2307      	movs	r3, #7
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bde:	f107 0314 	add.w	r3, r7, #20
 8004be2:	4619      	mov	r1, r3
 8004be4:	480d      	ldr	r0, [pc, #52]	; (8004c1c <HAL_UART_MspInit+0xc8>)
 8004be6:	f001 fd63 	bl	80066b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004bea:	2340      	movs	r3, #64	; 0x40
 8004bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bee:	2302      	movs	r3, #2
 8004bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004bfa:	2307      	movs	r3, #7
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bfe:	f107 0314 	add.w	r3, r7, #20
 8004c02:	4619      	mov	r1, r3
 8004c04:	4806      	ldr	r0, [pc, #24]	; (8004c20 <HAL_UART_MspInit+0xcc>)
 8004c06:	f001 fd53 	bl	80066b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004c0a:	bf00      	nop
 8004c0c:	3728      	adds	r7, #40	; 0x28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40004400 	.word	0x40004400
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40020000 	.word	0x40020000
 8004c20:	40020c00 	.word	0x40020c00

08004c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c28:	bf00      	nop
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c32:	b480      	push	{r7}
 8004c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c36:	e7fe      	b.n	8004c36 <HardFault_Handler+0x4>

08004c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c3c:	e7fe      	b.n	8004c3c <MemManage_Handler+0x4>

08004c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c42:	e7fe      	b.n	8004c42 <BusFault_Handler+0x4>

08004c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c48:	e7fe      	b.n	8004c48 <UsageFault_Handler+0x4>

08004c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c4e:	bf00      	nop
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c5c:	bf00      	nop
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c66:	b480      	push	{r7}
 8004c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c6a:	bf00      	nop
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8004c78:	f7fc fd62 	bl	8001740 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c7c:	f000 f990 	bl	8004fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c80:	bf00      	nop
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8004c88:	4802      	ldr	r0, [pc, #8]	; (8004c94 <DMA1_Stream5_IRQHandler+0x10>)
 8004c8a:	f001 fa9b 	bl	80061c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004c8e:	bf00      	nop
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000468 	.word	0x20000468

08004c98 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004c9c:	4802      	ldr	r0, [pc, #8]	; (8004ca8 <ADC_IRQHandler+0x10>)
 8004c9e:	f000 fa04 	bl	80050aa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004ca2:	bf00      	nop
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	200006f0 	.word	0x200006f0

08004cac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004cb0:	4802      	ldr	r0, [pc, #8]	; (8004cbc <TIM4_IRQHandler+0x10>)
 8004cb2:	f005 f81b 	bl	8009cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004cb6:	bf00      	nop
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	200003b8 	.word	0x200003b8

08004cc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004cc4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004cc8:	f001 fed8 	bl	8006a7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004ccc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004cd0:	f001 fed4 	bl	8006a7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004cd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004cd8:	f001 fed0 	bl	8006a7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004cdc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004ce0:	f001 fecc 	bl	8006a7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004ce4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004ce8:	f001 fec8 	bl	8006a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004cec:	bf00      	nop
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8004cf4:	4803      	ldr	r0, [pc, #12]	; (8004d04 <TIM6_DAC_IRQHandler+0x14>)
 8004cf6:	f001 f86c 	bl	8005dd2 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8004cfa:	4803      	ldr	r0, [pc, #12]	; (8004d08 <TIM6_DAC_IRQHandler+0x18>)
 8004cfc:	f004 fff6 	bl	8009cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004d00:	bf00      	nop
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	2000093c 	.word	0x2000093c
 8004d08:	200009b0 	.word	0x200009b0

08004d0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d10:	4802      	ldr	r0, [pc, #8]	; (8004d1c <DMA2_Stream0_IRQHandler+0x10>)
 8004d12:	f001 fa57 	bl	80061c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004d16:	bf00      	nop
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20000950 	.word	0x20000950

08004d20 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004d24:	4802      	ldr	r0, [pc, #8]	; (8004d30 <I2C3_EV_IRQHandler+0x10>)
 8004d26:	f002 f8f7 	bl	8006f18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8004d2a:	bf00      	nop
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000364 	.word	0x20000364

08004d34 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8004d38:	4802      	ldr	r0, [pc, #8]	; (8004d44 <I2C3_ER_IRQHandler+0x10>)
 8004d3a:	f002 fa53 	bl	80071e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000364 	.word	0x20000364

08004d48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	e00a      	b.n	8004d70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004d5a:	f3af 8000 	nop.w
 8004d5e:	4601      	mov	r1, r0
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	60ba      	str	r2, [r7, #8]
 8004d66:	b2ca      	uxtb	r2, r1
 8004d68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	dbf0      	blt.n	8004d5a <_read+0x12>
	}

return len;
 8004d78:	687b      	ldr	r3, [r7, #4]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	e009      	b.n	8004da8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	60ba      	str	r2, [r7, #8]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	3301      	adds	r3, #1
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	dbf1      	blt.n	8004d94 <_write+0x12>
	}
	return len;
 8004db0:	687b      	ldr	r3, [r7, #4]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <_close>:

int _close(int file)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
	return -1;
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004de2:	605a      	str	r2, [r3, #4]
	return 0;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <_isatty>:

int _isatty(int file)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
	return 1;
 8004dfa:	2301      	movs	r3, #1
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
	return 0;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
	...

08004e24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004e2c:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <_sbrk+0x50>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d102      	bne.n	8004e3a <_sbrk+0x16>
		heap_end = &end;
 8004e34:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <_sbrk+0x50>)
 8004e36:	4a10      	ldr	r2, [pc, #64]	; (8004e78 <_sbrk+0x54>)
 8004e38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <_sbrk+0x50>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004e40:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <_sbrk+0x50>)
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4413      	add	r3, r2
 8004e48:	466a      	mov	r2, sp
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d907      	bls.n	8004e5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004e4e:	f005 fec9 	bl	800abe4 <__errno>
 8004e52:	4602      	mov	r2, r0
 8004e54:	230c      	movs	r3, #12
 8004e56:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5c:	e006      	b.n	8004e6c <_sbrk+0x48>
	}

	heap_end += incr;
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <_sbrk+0x50>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4413      	add	r3, r2
 8004e66:	4a03      	ldr	r2, [pc, #12]	; (8004e74 <_sbrk+0x50>)
 8004e68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20000350 	.word	0x20000350
 8004e78:	20000c70 	.word	0x20000c70

08004e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e80:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <SystemInit+0x28>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e86:	4a07      	ldr	r2, [pc, #28]	; (8004ea4 <SystemInit+0x28>)
 8004e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e90:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <SystemInit+0x28>)
 8004e92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e96:	609a      	str	r2, [r3, #8]
#endif
}
 8004e98:	bf00      	nop
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	e000ed00 	.word	0xe000ed00

08004ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ee0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004eac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004eae:	e003      	b.n	8004eb8 <LoopCopyDataInit>

08004eb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004eb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004eb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004eb6:	3104      	adds	r1, #4

08004eb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004eb8:	480b      	ldr	r0, [pc, #44]	; (8004ee8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004eba:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ebc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ebe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ec0:	d3f6      	bcc.n	8004eb0 <CopyDataInit>
  ldr  r2, =_sbss
 8004ec2:	4a0b      	ldr	r2, [pc, #44]	; (8004ef0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ec4:	e002      	b.n	8004ecc <LoopFillZerobss>

08004ec6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ec6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ec8:	f842 3b04 	str.w	r3, [r2], #4

08004ecc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ecc:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004ece:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ed0:	d3f9      	bcc.n	8004ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004ed2:	f7ff ffd3 	bl	8004e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ed6:	f005 fe8b 	bl	800abf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004eda:	f7ff f8dd 	bl	8004098 <main>
  bx  lr    
 8004ede:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004ee0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004ee4:	0800b608 	.word	0x0800b608
  ldr  r0, =_sdata
 8004ee8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004eec:	200000d4 	.word	0x200000d4
  ldr  r2, =_sbss
 8004ef0:	200000d4 	.word	0x200000d4
  ldr  r3, = _ebss
 8004ef4:	20000c70 	.word	0x20000c70

08004ef8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ef8:	e7fe      	b.n	8004ef8 <CAN1_RX0_IRQHandler>
	...

08004efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f00:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <HAL_Init+0x40>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a0d      	ldr	r2, [pc, #52]	; (8004f3c <HAL_Init+0x40>)
 8004f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <HAL_Init+0x40>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <HAL_Init+0x40>)
 8004f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f18:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <HAL_Init+0x40>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a07      	ldr	r2, [pc, #28]	; (8004f3c <HAL_Init+0x40>)
 8004f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f24:	2003      	movs	r0, #3
 8004f26:	f000 fe8b 	bl	8005c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	f000 f808 	bl	8004f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f30:	f7ff fbe2 	bl	80046f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40023c00 	.word	0x40023c00

08004f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f48:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <HAL_InitTick+0x54>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <HAL_InitTick+0x58>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	4619      	mov	r1, r3
 8004f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fea3 	bl	8005caa <HAL_SYSTICK_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e00e      	b.n	8004f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b0f      	cmp	r3, #15
 8004f72:	d80a      	bhi.n	8004f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f74:	2200      	movs	r2, #0
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7c:	f000 fe6b 	bl	8005c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f80:	4a06      	ldr	r2, [pc, #24]	; (8004f9c <HAL_InitTick+0x5c>)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	e000      	b.n	8004f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20000064 	.word	0x20000064
 8004f98:	2000006c 	.word	0x2000006c
 8004f9c:	20000068 	.word	0x20000068

08004fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fa4:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_IncTick+0x20>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_IncTick+0x24>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4413      	add	r3, r2
 8004fb0:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <HAL_IncTick+0x24>)
 8004fb2:	6013      	str	r3, [r2, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	2000006c 	.word	0x2000006c
 8004fc4:	20000c68 	.word	0x20000c68

08004fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  return uwTick;
 8004fcc:	4b03      	ldr	r3, [pc, #12]	; (8004fdc <HAL_GetTick+0x14>)
 8004fce:	681b      	ldr	r3, [r3, #0]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000c68 	.word	0x20000c68

08004fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fe8:	f7ff ffee 	bl	8004fc8 <HAL_GetTick>
 8004fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d005      	beq.n	8005006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_Delay+0x40>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4413      	add	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005006:	bf00      	nop
 8005008:	f7ff ffde 	bl	8004fc8 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	429a      	cmp	r2, r3
 8005016:	d8f7      	bhi.n	8005008 <HAL_Delay+0x28>
  {
  }
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	2000006c 	.word	0x2000006c

08005024 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e033      	b.n	80050a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d109      	bne.n	8005056 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff fb80 	bl	8004748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	f003 0310 	and.w	r3, r3, #16
 800505e:	2b00      	cmp	r3, #0
 8005060:	d118      	bne.n	8005094 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800506a:	f023 0302 	bic.w	r3, r3, #2
 800506e:	f043 0202 	orr.w	r2, r3, #2
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fb8a 	bl	8005790 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f023 0303 	bic.w	r3, r3, #3
 800508a:	f043 0201 	orr.w	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	641a      	str	r2, [r3, #64]	; 0x40
 8005092:	e001      	b.n	8005098 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	bf0c      	ite	eq
 80050c8:	2301      	moveq	r3, #1
 80050ca:	2300      	movne	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b20      	cmp	r3, #32
 80050dc:	bf0c      	ite	eq
 80050de:	2301      	moveq	r3, #1
 80050e0:	2300      	movne	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d049      	beq.n	8005180 <HAL_ADC_IRQHandler+0xd6>
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d046      	beq.n	8005180 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f003 0310 	and.w	r3, r3, #16
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d105      	bne.n	800510a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d12b      	bne.n	8005170 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800511c:	2b00      	cmp	r3, #0
 800511e:	d127      	bne.n	8005170 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800512a:	2b00      	cmp	r3, #0
 800512c:	d006      	beq.n	800513c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005138:	2b00      	cmp	r3, #0
 800513a:	d119      	bne.n	8005170 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0220 	bic.w	r2, r2, #32
 800514a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d105      	bne.n	8005170 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	f043 0201 	orr.w	r2, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7fe fd91 	bl	8003c98 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f06f 0212 	mvn.w	r2, #18
 800517e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b04      	cmp	r3, #4
 800518c:	bf0c      	ite	eq
 800518e:	2301      	moveq	r3, #1
 8005190:	2300      	movne	r3, #0
 8005192:	b2db      	uxtb	r3, r3
 8005194:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a0:	2b80      	cmp	r3, #128	; 0x80
 80051a2:	bf0c      	ite	eq
 80051a4:	2301      	moveq	r3, #1
 80051a6:	2300      	movne	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d057      	beq.n	8005262 <HAL_ADC_IRQHandler+0x1b8>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d054      	beq.n	8005262 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d105      	bne.n	80051d0 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d139      	bne.n	8005252 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d006      	beq.n	80051fa <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d12b      	bne.n	8005252 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005204:	2b00      	cmp	r3, #0
 8005206:	d124      	bne.n	8005252 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005212:	2b00      	cmp	r3, #0
 8005214:	d11d      	bne.n	8005252 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800521a:	2b00      	cmp	r3, #0
 800521c:	d119      	bne.n	8005252 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800522c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d105      	bne.n	8005252 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f043 0201 	orr.w	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fc1a 	bl	8005a8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 020c 	mvn.w	r2, #12
 8005260:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b01      	cmp	r3, #1
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005282:	2b40      	cmp	r3, #64	; 0x40
 8005284:	bf0c      	ite	eq
 8005286:	2301      	moveq	r3, #1
 8005288:	2300      	movne	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d017      	beq.n	80052c4 <HAL_ADC_IRQHandler+0x21a>
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d014      	beq.n	80052c4 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d10d      	bne.n	80052c4 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f935 	bl	8005524 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f06f 0201 	mvn.w	r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	bf0c      	ite	eq
 80052d2:	2301      	moveq	r3, #1
 80052d4:	2300      	movne	r3, #0
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052e8:	bf0c      	ite	eq
 80052ea:	2301      	moveq	r3, #1
 80052ec:	2300      	movne	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d015      	beq.n	8005324 <HAL_ADC_IRQHandler+0x27a>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d012      	beq.n	8005324 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	f043 0202 	orr.w	r2, r3, #2
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f06f 0220 	mvn.w	r2, #32
 8005312:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f90f 	bl	8005538 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f06f 0220 	mvn.w	r2, #32
 8005322:	601a      	str	r2, [r3, #0]
  }
}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_ADC_Start_DMA+0x1e>
 8005346:	2302      	movs	r3, #2
 8005348:	e0cc      	b.n	80054e4 <HAL_ADC_Start_DMA+0x1b8>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b01      	cmp	r3, #1
 800535e:	d018      	beq.n	8005392 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005370:	4b5e      	ldr	r3, [pc, #376]	; (80054ec <HAL_ADC_Start_DMA+0x1c0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a5e      	ldr	r2, [pc, #376]	; (80054f0 <HAL_ADC_Start_DMA+0x1c4>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	0c9a      	lsrs	r2, r3, #18
 800537c:	4613      	mov	r3, r2
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	4413      	add	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005384:	e002      	b.n	800538c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	3b01      	subs	r3, #1
 800538a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f9      	bne.n	8005386 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b01      	cmp	r3, #1
 800539e:	f040 80a0 	bne.w	80054e2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80053aa:	f023 0301 	bic.w	r3, r3, #1
 80053ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d007      	beq.n	80053d4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80053cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e0:	d106      	bne.n	80053f0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	f023 0206 	bic.w	r2, r3, #6
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	645a      	str	r2, [r3, #68]	; 0x44
 80053ee:	e002      	b.n	80053f6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053fe:	4b3d      	ldr	r3, [pc, #244]	; (80054f4 <HAL_ADC_Start_DMA+0x1c8>)
 8005400:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005406:	4a3c      	ldr	r2, [pc, #240]	; (80054f8 <HAL_ADC_Start_DMA+0x1cc>)
 8005408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	4a3b      	ldr	r2, [pc, #236]	; (80054fc <HAL_ADC_Start_DMA+0x1d0>)
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	4a3a      	ldr	r2, [pc, #232]	; (8005500 <HAL_ADC_Start_DMA+0x1d4>)
 8005418:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005422:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005432:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005442:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	334c      	adds	r3, #76	; 0x4c
 800544e:	4619      	mov	r1, r3
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f000 fe3c 	bl	80060d0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 031f 	and.w	r3, r3, #31
 8005460:	2b00      	cmp	r3, #0
 8005462:	d12a      	bne.n	80054ba <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a26      	ldr	r2, [pc, #152]	; (8005504 <HAL_ADC_Start_DMA+0x1d8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d015      	beq.n	800549a <HAL_ADC_Start_DMA+0x16e>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a25      	ldr	r2, [pc, #148]	; (8005508 <HAL_ADC_Start_DMA+0x1dc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d105      	bne.n	8005484 <HAL_ADC_Start_DMA+0x158>
 8005478:	4b1e      	ldr	r3, [pc, #120]	; (80054f4 <HAL_ADC_Start_DMA+0x1c8>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a20      	ldr	r2, [pc, #128]	; (800550c <HAL_ADC_Start_DMA+0x1e0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d129      	bne.n	80054e2 <HAL_ADC_Start_DMA+0x1b6>
 800548e:	4b19      	ldr	r3, [pc, #100]	; (80054f4 <HAL_ADC_Start_DMA+0x1c8>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	2b0f      	cmp	r3, #15
 8005498:	d823      	bhi.n	80054e2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d11c      	bne.n	80054e2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054b6:	609a      	str	r2, [r3, #8]
 80054b8:	e013      	b.n	80054e2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a11      	ldr	r2, [pc, #68]	; (8005504 <HAL_ADC_Start_DMA+0x1d8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d10e      	bne.n	80054e2 <HAL_ADC_Start_DMA+0x1b6>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d107      	bne.n	80054e2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054e0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20000064 	.word	0x20000064
 80054f0:	431bde83 	.word	0x431bde83
 80054f4:	40012300 	.word	0x40012300
 80054f8:	08005989 	.word	0x08005989
 80054fc:	08005a43 	.word	0x08005a43
 8005500:	08005a5f 	.word	0x08005a5f
 8005504:	40012000 	.word	0x40012000
 8005508:	40012100 	.word	0x40012100
 800550c:	40012200 	.word	0x40012200

08005510 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_ADC_ConfigChannel+0x1c>
 8005564:	2302      	movs	r3, #2
 8005566:	e105      	b.n	8005774 <HAL_ADC_ConfigChannel+0x228>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b09      	cmp	r3, #9
 8005576:	d925      	bls.n	80055c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68d9      	ldr	r1, [r3, #12]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	b29b      	uxth	r3, r3
 8005584:	461a      	mov	r2, r3
 8005586:	4613      	mov	r3, r2
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	4413      	add	r3, r2
 800558c:	3b1e      	subs	r3, #30
 800558e:	2207      	movs	r2, #7
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	43da      	mvns	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	400a      	ands	r2, r1
 800559c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68d9      	ldr	r1, [r3, #12]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	4618      	mov	r0, r3
 80055b0:	4603      	mov	r3, r0
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	4403      	add	r3, r0
 80055b6:	3b1e      	subs	r3, #30
 80055b8:	409a      	lsls	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	60da      	str	r2, [r3, #12]
 80055c2:	e022      	b.n	800560a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6919      	ldr	r1, [r3, #16]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	4613      	mov	r3, r2
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	4413      	add	r3, r2
 80055d8:	2207      	movs	r2, #7
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43da      	mvns	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	400a      	ands	r2, r1
 80055e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6919      	ldr	r1, [r3, #16]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	4618      	mov	r0, r3
 80055fa:	4603      	mov	r3, r0
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	4403      	add	r3, r0
 8005600:	409a      	lsls	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b06      	cmp	r3, #6
 8005610:	d824      	bhi.n	800565c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	3b05      	subs	r3, #5
 8005624:	221f      	movs	r2, #31
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	43da      	mvns	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	400a      	ands	r2, r1
 8005632:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	b29b      	uxth	r3, r3
 8005640:	4618      	mov	r0, r3
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	3b05      	subs	r3, #5
 800564e:	fa00 f203 	lsl.w	r2, r0, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	635a      	str	r2, [r3, #52]	; 0x34
 800565a:	e04c      	b.n	80056f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b0c      	cmp	r3, #12
 8005662:	d824      	bhi.n	80056ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	3b23      	subs	r3, #35	; 0x23
 8005676:	221f      	movs	r2, #31
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	43da      	mvns	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	400a      	ands	r2, r1
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	4618      	mov	r0, r3
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	3b23      	subs	r3, #35	; 0x23
 80056a0:	fa00 f203 	lsl.w	r2, r0, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30
 80056ac:	e023      	b.n	80056f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	3b41      	subs	r3, #65	; 0x41
 80056c0:	221f      	movs	r2, #31
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	43da      	mvns	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	400a      	ands	r2, r1
 80056ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	4618      	mov	r0, r3
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	3b41      	subs	r3, #65	; 0x41
 80056ea:	fa00 f203 	lsl.w	r2, r0, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056f6:	4b22      	ldr	r3, [pc, #136]	; (8005780 <HAL_ADC_ConfigChannel+0x234>)
 80056f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a21      	ldr	r2, [pc, #132]	; (8005784 <HAL_ADC_ConfigChannel+0x238>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d109      	bne.n	8005718 <HAL_ADC_ConfigChannel+0x1cc>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b12      	cmp	r3, #18
 800570a:	d105      	bne.n	8005718 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a19      	ldr	r2, [pc, #100]	; (8005784 <HAL_ADC_ConfigChannel+0x238>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d123      	bne.n	800576a <HAL_ADC_ConfigChannel+0x21e>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b10      	cmp	r3, #16
 8005728:	d003      	beq.n	8005732 <HAL_ADC_ConfigChannel+0x1e6>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b11      	cmp	r3, #17
 8005730:	d11b      	bne.n	800576a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b10      	cmp	r3, #16
 8005744:	d111      	bne.n	800576a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005746:	4b10      	ldr	r3, [pc, #64]	; (8005788 <HAL_ADC_ConfigChannel+0x23c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a10      	ldr	r2, [pc, #64]	; (800578c <HAL_ADC_ConfigChannel+0x240>)
 800574c:	fba2 2303 	umull	r2, r3, r2, r3
 8005750:	0c9a      	lsrs	r2, r3, #18
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800575c:	e002      	b.n	8005764 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	3b01      	subs	r3, #1
 8005762:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1f9      	bne.n	800575e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	40012300 	.word	0x40012300
 8005784:	40012000 	.word	0x40012000
 8005788:	20000064 	.word	0x20000064
 800578c:	431bde83 	.word	0x431bde83

08005790 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005798:	4b79      	ldr	r3, [pc, #484]	; (8005980 <ADC_Init+0x1f0>)
 800579a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	431a      	orrs	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6859      	ldr	r1, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	021a      	lsls	r2, r3, #8
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80057e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6859      	ldr	r1, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800580a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6899      	ldr	r1, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005822:	4a58      	ldr	r2, [pc, #352]	; (8005984 <ADC_Init+0x1f4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d022      	beq.n	800586e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005836:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6899      	ldr	r1, [r3, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005858:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6899      	ldr	r1, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	609a      	str	r2, [r3, #8]
 800586c:	e00f      	b.n	800588e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800587c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800588c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0202 	bic.w	r2, r2, #2
 800589c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6899      	ldr	r1, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	7e1b      	ldrb	r3, [r3, #24]
 80058a8:	005a      	lsls	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01b      	beq.n	80058f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80058da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6859      	ldr	r1, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	3b01      	subs	r3, #1
 80058e8:	035a      	lsls	r2, r3, #13
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
 80058f2:	e007      	b.n	8005904 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005902:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005912:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	3b01      	subs	r3, #1
 8005920:	051a      	lsls	r2, r3, #20
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6899      	ldr	r1, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005946:	025a      	lsls	r2, r3, #9
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6899      	ldr	r1, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	029a      	lsls	r2, r3, #10
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	609a      	str	r2, [r3, #8]
}
 8005974:	bf00      	nop
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40012300 	.word	0x40012300
 8005984:	0f000001 	.word	0x0f000001

08005988 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d13c      	bne.n	8005a1c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d12b      	bne.n	8005a14 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d127      	bne.n	8005a14 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d006      	beq.n	80059e0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d119      	bne.n	8005a14 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0220 	bic.w	r2, r2, #32
 80059ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d105      	bne.n	8005a14 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	f043 0201 	orr.w	r2, r3, #1
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f7fe f93f 	bl	8003c98 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005a1a:	e00e      	b.n	8005a3a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff fd85 	bl	8005538 <HAL_ADC_ErrorCallback>
}
 8005a2e:	e004      	b.n	8005a3a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
}
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff fd5d 	bl	8005510 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b084      	sub	sp, #16
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2240      	movs	r2, #64	; 0x40
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a76:	f043 0204 	orr.w	r2, r3, #4
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f7ff fd5a 	bl	8005538 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ab0:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005abc:	4013      	ands	r3, r2
 8005abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ad2:	4a04      	ldr	r2, [pc, #16]	; (8005ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	60d3      	str	r3, [r2, #12]
}
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	e000ed00 	.word	0xe000ed00

08005ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005aec:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <__NVIC_GetPriorityGrouping+0x18>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	0a1b      	lsrs	r3, r3, #8
 8005af2:	f003 0307 	and.w	r3, r3, #7
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	e000ed00 	.word	0xe000ed00

08005b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	db0b      	blt.n	8005b2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	f003 021f 	and.w	r2, r3, #31
 8005b1c:	4907      	ldr	r1, [pc, #28]	; (8005b3c <__NVIC_EnableIRQ+0x38>)
 8005b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	2001      	movs	r0, #1
 8005b26:	fa00 f202 	lsl.w	r2, r0, r2
 8005b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	e000e100 	.word	0xe000e100

08005b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	4603      	mov	r3, r0
 8005b48:	6039      	str	r1, [r7, #0]
 8005b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	db0a      	blt.n	8005b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	490c      	ldr	r1, [pc, #48]	; (8005b8c <__NVIC_SetPriority+0x4c>)
 8005b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b5e:	0112      	lsls	r2, r2, #4
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	440b      	add	r3, r1
 8005b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b68:	e00a      	b.n	8005b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	4908      	ldr	r1, [pc, #32]	; (8005b90 <__NVIC_SetPriority+0x50>)
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	3b04      	subs	r3, #4
 8005b78:	0112      	lsls	r2, r2, #4
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	761a      	strb	r2, [r3, #24]
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	e000e100 	.word	0xe000e100
 8005b90:	e000ed00 	.word	0xe000ed00

08005b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b089      	sub	sp, #36	; 0x24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f1c3 0307 	rsb	r3, r3, #7
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	bf28      	it	cs
 8005bb2:	2304      	movcs	r3, #4
 8005bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	2b06      	cmp	r3, #6
 8005bbc:	d902      	bls.n	8005bc4 <NVIC_EncodePriority+0x30>
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	3b03      	subs	r3, #3
 8005bc2:	e000      	b.n	8005bc6 <NVIC_EncodePriority+0x32>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	43da      	mvns	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	401a      	ands	r2, r3
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	fa01 f303 	lsl.w	r3, r1, r3
 8005be6:	43d9      	mvns	r1, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bec:	4313      	orrs	r3, r2
         );
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3724      	adds	r7, #36	; 0x24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
	...

08005bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c0c:	d301      	bcc.n	8005c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e00f      	b.n	8005c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c12:	4a0a      	ldr	r2, [pc, #40]	; (8005c3c <SysTick_Config+0x40>)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c1a:	210f      	movs	r1, #15
 8005c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c20:	f7ff ff8e 	bl	8005b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c24:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <SysTick_Config+0x40>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c2a:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <SysTick_Config+0x40>)
 8005c2c:	2207      	movs	r2, #7
 8005c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	e000e010 	.word	0xe000e010

08005c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff ff29 	bl	8005aa0 <__NVIC_SetPriorityGrouping>
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b086      	sub	sp, #24
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
 8005c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c68:	f7ff ff3e 	bl	8005ae8 <__NVIC_GetPriorityGrouping>
 8005c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	6978      	ldr	r0, [r7, #20]
 8005c74:	f7ff ff8e 	bl	8005b94 <NVIC_EncodePriority>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c7e:	4611      	mov	r1, r2
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff ff5d 	bl	8005b40 <__NVIC_SetPriority>
}
 8005c86:	bf00      	nop
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	4603      	mov	r3, r0
 8005c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff ff31 	bl	8005b04 <__NVIC_EnableIRQ>
}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff ffa2 	bl	8005bfc <SysTick_Config>
 8005cb8:	4603      	mov	r3, r0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e014      	b.n	8005cfe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	791b      	ldrb	r3, [r3, #4]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d105      	bne.n	8005cea <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7fe fdaf 	bl	8004848 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	2300      	movs	r3, #0
 8005d16:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	795b      	ldrb	r3, [r3, #5]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_DAC_Start+0x1e>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e050      	b.n	8005dc6 <HAL_DAC_Start+0xc0>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6819      	ldr	r1, [r3, #0]
 8005d36:	2201      	movs	r2, #1
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	409a      	lsls	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d11a      	bne.n	8005d80 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d60:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b04      	cmp	r3, #4
 8005d66:	d127      	bne.n	8005db8 <HAL_DAC_Start+0xb2>
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b38      	cmp	r3, #56	; 0x38
 8005d6c:	d124      	bne.n	8005db8 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0201 	orr.w	r2, r2, #1
 8005d7c:	605a      	str	r2, [r3, #4]
 8005d7e:	e01b      	b.n	8005db8 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d8a:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005d96:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d9e:	d10b      	bne.n	8005db8 <HAL_DAC_Start+0xb2>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8005da6:	d107      	bne.n	8005db8 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0202 	orr.w	r2, r2, #2
 8005db6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005de8:	d118      	bne.n	8005e1c <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2204      	movs	r2, #4
 8005dee:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	f043 0201 	orr.w	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e04:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e14:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f825 	bl	8005e66 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e2a:	d118      	bne.n	8005e5e <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2204      	movs	r2, #4
 8005e30:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f043 0202 	orr.w	r2, r3, #2
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005e46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005e56:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f880 	bl	8005f5e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b087      	sub	sp, #28
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	795b      	ldrb	r3, [r3, #5]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_DAC_ConfigChannel+0x20>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e036      	b.n	8005f08 <HAL_DAC_ConfigChannel+0x8e>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005eae:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6819      	ldr	r1, [r3, #0]
 8005ee8:	22c0      	movs	r2, #192	; 0xc0
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	43da      	mvns	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	400a      	ands	r2, r1
 8005ef8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d105      	bne.n	8005f3e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4413      	add	r3, r2
 8005f38:	3308      	adds	r3, #8
 8005f3a:	617b      	str	r3, [r7, #20]
 8005f3c:	e004      	b.n	8005f48 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4413      	add	r3, r2
 8005f44:	3314      	adds	r3, #20
 8005f46:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005f66:	bf00      	nop
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
	...

08005f74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005f80:	f7ff f822 	bl	8004fc8 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e099      	b.n	80060c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0201 	bic.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fb0:	e00f      	b.n	8005fd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fb2:	f7ff f809 	bl	8004fc8 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b05      	cmp	r3, #5
 8005fbe:	d908      	bls.n	8005fd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2203      	movs	r2, #3
 8005fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e078      	b.n	80060c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e8      	bne.n	8005fb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4b38      	ldr	r3, [pc, #224]	; (80060cc <HAL_DMA_Init+0x158>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800600a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	2b04      	cmp	r3, #4
 800602a:	d107      	bne.n	800603c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006034:	4313      	orrs	r3, r2
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	4313      	orrs	r3, r2
 800603a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f023 0307 	bic.w	r3, r3, #7
 8006052:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	2b04      	cmp	r3, #4
 8006064:	d117      	bne.n	8006096 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00e      	beq.n	8006096 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fa9f 	bl	80065bc <DMA_CheckFifoParam>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d008      	beq.n	8006096 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2240      	movs	r2, #64	; 0x40
 8006088:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006092:	2301      	movs	r3, #1
 8006094:	e016      	b.n	80060c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fa56 	bl	8006550 <DMA_CalcBaseAndBitshift>
 80060a4:	4603      	mov	r3, r0
 80060a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ac:	223f      	movs	r2, #63	; 0x3f
 80060ae:	409a      	lsls	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	f010803f 	.word	0xf010803f

080060d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_DMA_Start_IT+0x26>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e040      	b.n	8006178 <HAL_DMA_Start_IT+0xa8>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b01      	cmp	r3, #1
 8006108:	d12f      	bne.n	800616a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 f9e8 	bl	80064f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006128:	223f      	movs	r2, #63	; 0x3f
 800612a:	409a      	lsls	r2, r3
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0216 	orr.w	r2, r2, #22
 800613e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	2b00      	cmp	r3, #0
 8006146:	d007      	beq.n	8006158 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0208 	orr.w	r2, r2, #8
 8006156:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	e005      	b.n	8006176 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006172:	2302      	movs	r3, #2
 8006174:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006176:	7dfb      	ldrb	r3, [r7, #23]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d004      	beq.n	800619e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2280      	movs	r2, #128	; 0x80
 8006198:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e00c      	b.n	80061b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2205      	movs	r2, #5
 80061a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0201 	bic.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061d0:	4b92      	ldr	r3, [pc, #584]	; (800641c <HAL_DMA_IRQHandler+0x258>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a92      	ldr	r2, [pc, #584]	; (8006420 <HAL_DMA_IRQHandler+0x25c>)
 80061d6:	fba2 2303 	umull	r2, r3, r2, r3
 80061da:	0a9b      	lsrs	r3, r3, #10
 80061dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ee:	2208      	movs	r2, #8
 80061f0:	409a      	lsls	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4013      	ands	r3, r2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01a      	beq.n	8006230 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d013      	beq.n	8006230 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0204 	bic.w	r2, r2, #4
 8006216:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621c:	2208      	movs	r2, #8
 800621e:	409a      	lsls	r2, r3
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006228:	f043 0201 	orr.w	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006234:	2201      	movs	r2, #1
 8006236:	409a      	lsls	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d012      	beq.n	8006266 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006252:	2201      	movs	r2, #1
 8006254:	409a      	lsls	r2, r3
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625e:	f043 0202 	orr.w	r2, r3, #2
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626a:	2204      	movs	r2, #4
 800626c:	409a      	lsls	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4013      	ands	r3, r2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d012      	beq.n	800629c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006288:	2204      	movs	r2, #4
 800628a:	409a      	lsls	r2, r3
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006294:	f043 0204 	orr.w	r2, r3, #4
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a0:	2210      	movs	r2, #16
 80062a2:	409a      	lsls	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4013      	ands	r3, r2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d043      	beq.n	8006334 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d03c      	beq.n	8006334 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062be:	2210      	movs	r2, #16
 80062c0:	409a      	lsls	r2, r3
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d018      	beq.n	8006306 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d108      	bne.n	80062f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d024      	beq.n	8006334 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
 80062f2:	e01f      	b.n	8006334 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01b      	beq.n	8006334 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	4798      	blx	r3
 8006304:	e016      	b.n	8006334 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006310:	2b00      	cmp	r3, #0
 8006312:	d107      	bne.n	8006324 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0208 	bic.w	r2, r2, #8
 8006322:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006338:	2220      	movs	r2, #32
 800633a:	409a      	lsls	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4013      	ands	r3, r2
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 808e 	beq.w	8006462 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8086 	beq.w	8006462 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635a:	2220      	movs	r2, #32
 800635c:	409a      	lsls	r2, r3
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b05      	cmp	r3, #5
 800636c:	d136      	bne.n	80063dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0216 	bic.w	r2, r2, #22
 800637c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695a      	ldr	r2, [r3, #20]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800638c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d103      	bne.n	800639e <HAL_DMA_IRQHandler+0x1da>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0208 	bic.w	r2, r2, #8
 80063ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b2:	223f      	movs	r2, #63	; 0x3f
 80063b4:	409a      	lsls	r2, r3
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d07d      	beq.n	80064ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	4798      	blx	r3
        }
        return;
 80063da:	e078      	b.n	80064ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d01c      	beq.n	8006424 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d108      	bne.n	800640a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d030      	beq.n	8006462 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	4798      	blx	r3
 8006408:	e02b      	b.n	8006462 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d027      	beq.n	8006462 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
 800641a:	e022      	b.n	8006462 <HAL_DMA_IRQHandler+0x29e>
 800641c:	20000064 	.word	0x20000064
 8006420:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10f      	bne.n	8006452 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0210 	bic.w	r2, r2, #16
 8006440:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006466:	2b00      	cmp	r3, #0
 8006468:	d032      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d022      	beq.n	80064bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2205      	movs	r2, #5
 800647a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0201 	bic.w	r2, r2, #1
 800648c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	3301      	adds	r3, #1
 8006492:	60bb      	str	r3, [r7, #8]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	429a      	cmp	r2, r3
 8006498:	d307      	bcc.n	80064aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1f2      	bne.n	800648e <HAL_DMA_IRQHandler+0x2ca>
 80064a8:	e000      	b.n	80064ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80064aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	4798      	blx	r3
 80064cc:	e000      	b.n	80064d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80064ce:	bf00      	nop
    }
  }
}
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop

080064d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064e6:	b2db      	uxtb	r3, r3
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006510:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d108      	bne.n	8006534 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006532:	e007      	b.n	8006544 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	60da      	str	r2, [r3, #12]
}
 8006544:	bf00      	nop
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	3b10      	subs	r3, #16
 8006560:	4a14      	ldr	r2, [pc, #80]	; (80065b4 <DMA_CalcBaseAndBitshift+0x64>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	091b      	lsrs	r3, r3, #4
 8006568:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800656a:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <DMA_CalcBaseAndBitshift+0x68>)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2b03      	cmp	r3, #3
 800657c:	d909      	bls.n	8006592 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	1d1a      	adds	r2, r3, #4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	659a      	str	r2, [r3, #88]	; 0x58
 8006590:	e007      	b.n	80065a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800659a:	f023 0303 	bic.w	r3, r3, #3
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	aaaaaaab 	.word	0xaaaaaaab
 80065b8:	0800b58c 	.word	0x0800b58c

080065bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d11f      	bne.n	8006616 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d855      	bhi.n	8006688 <DMA_CheckFifoParam+0xcc>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <DMA_CheckFifoParam+0x28>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	080065f5 	.word	0x080065f5
 80065e8:	08006607 	.word	0x08006607
 80065ec:	080065f5 	.word	0x080065f5
 80065f0:	08006689 	.word	0x08006689
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d045      	beq.n	800668c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006604:	e042      	b.n	800668c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800660e:	d13f      	bne.n	8006690 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006614:	e03c      	b.n	8006690 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800661e:	d121      	bne.n	8006664 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b03      	cmp	r3, #3
 8006624:	d836      	bhi.n	8006694 <DMA_CheckFifoParam+0xd8>
 8006626:	a201      	add	r2, pc, #4	; (adr r2, 800662c <DMA_CheckFifoParam+0x70>)
 8006628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662c:	0800663d 	.word	0x0800663d
 8006630:	08006643 	.word	0x08006643
 8006634:	0800663d 	.word	0x0800663d
 8006638:	08006655 	.word	0x08006655
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]
      break;
 8006640:	e02f      	b.n	80066a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006646:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d024      	beq.n	8006698 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006652:	e021      	b.n	8006698 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800665c:	d11e      	bne.n	800669c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006662:	e01b      	b.n	800669c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b02      	cmp	r3, #2
 8006668:	d902      	bls.n	8006670 <DMA_CheckFifoParam+0xb4>
 800666a:	2b03      	cmp	r3, #3
 800666c:	d003      	beq.n	8006676 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800666e:	e018      	b.n	80066a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	73fb      	strb	r3, [r7, #15]
      break;
 8006674:	e015      	b.n	80066a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00e      	beq.n	80066a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	73fb      	strb	r3, [r7, #15]
      break;
 8006686:	e00b      	b.n	80066a0 <DMA_CheckFifoParam+0xe4>
      break;
 8006688:	bf00      	nop
 800668a:	e00a      	b.n	80066a2 <DMA_CheckFifoParam+0xe6>
      break;
 800668c:	bf00      	nop
 800668e:	e008      	b.n	80066a2 <DMA_CheckFifoParam+0xe6>
      break;
 8006690:	bf00      	nop
 8006692:	e006      	b.n	80066a2 <DMA_CheckFifoParam+0xe6>
      break;
 8006694:	bf00      	nop
 8006696:	e004      	b.n	80066a2 <DMA_CheckFifoParam+0xe6>
      break;
 8006698:	bf00      	nop
 800669a:	e002      	b.n	80066a2 <DMA_CheckFifoParam+0xe6>
      break;   
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <DMA_CheckFifoParam+0xe6>
      break;
 80066a0:	bf00      	nop
    }
  } 
  
  return status; 
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b089      	sub	sp, #36	; 0x24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80066be:	2300      	movs	r3, #0
 80066c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066c6:	2300      	movs	r3, #0
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	e16b      	b.n	80069a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80066cc:	2201      	movs	r2, #1
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	fa02 f303 	lsl.w	r3, r2, r3
 80066d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4013      	ands	r3, r2
 80066de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	f040 815a 	bne.w	800699e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d00b      	beq.n	800670a <HAL_GPIO_Init+0x5a>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d007      	beq.n	800670a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066fe:	2b11      	cmp	r3, #17
 8006700:	d003      	beq.n	800670a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b12      	cmp	r3, #18
 8006708:	d130      	bne.n	800676c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	2203      	movs	r2, #3
 8006716:	fa02 f303 	lsl.w	r3, r2, r3
 800671a:	43db      	mvns	r3, r3
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	4013      	ands	r3, r2
 8006720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	fa02 f303 	lsl.w	r3, r2, r3
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	4313      	orrs	r3, r2
 8006732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006740:	2201      	movs	r2, #1
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	fa02 f303 	lsl.w	r3, r2, r3
 8006748:	43db      	mvns	r3, r3
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	4013      	ands	r3, r2
 800674e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	091b      	lsrs	r3, r3, #4
 8006756:	f003 0201 	and.w	r2, r3, #1
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	fa02 f303 	lsl.w	r3, r2, r3
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	4313      	orrs	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	2203      	movs	r2, #3
 8006778:	fa02 f303 	lsl.w	r3, r2, r3
 800677c:	43db      	mvns	r3, r3
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	4013      	ands	r3, r2
 8006782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	005b      	lsls	r3, r3, #1
 800678c:	fa02 f303 	lsl.w	r3, r2, r3
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	4313      	orrs	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d003      	beq.n	80067ac <HAL_GPIO_Init+0xfc>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b12      	cmp	r3, #18
 80067aa:	d123      	bne.n	80067f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	08da      	lsrs	r2, r3, #3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3208      	adds	r2, #8
 80067b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	220f      	movs	r2, #15
 80067c4:	fa02 f303 	lsl.w	r3, r2, r3
 80067c8:	43db      	mvns	r3, r3
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	4013      	ands	r3, r2
 80067ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	08da      	lsrs	r2, r3, #3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3208      	adds	r2, #8
 80067ee:	69b9      	ldr	r1, [r7, #24]
 80067f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	2203      	movs	r2, #3
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	43db      	mvns	r3, r3
 8006806:	69ba      	ldr	r2, [r7, #24]
 8006808:	4013      	ands	r3, r2
 800680a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f003 0203 	and.w	r2, r3, #3
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	fa02 f303 	lsl.w	r3, r2, r3
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	4313      	orrs	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 80b4 	beq.w	800699e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	4b5f      	ldr	r3, [pc, #380]	; (80069b8 <HAL_GPIO_Init+0x308>)
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	4a5e      	ldr	r2, [pc, #376]	; (80069b8 <HAL_GPIO_Init+0x308>)
 8006840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006844:	6453      	str	r3, [r2, #68]	; 0x44
 8006846:	4b5c      	ldr	r3, [pc, #368]	; (80069b8 <HAL_GPIO_Init+0x308>)
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006852:	4a5a      	ldr	r2, [pc, #360]	; (80069bc <HAL_GPIO_Init+0x30c>)
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	089b      	lsrs	r3, r3, #2
 8006858:	3302      	adds	r3, #2
 800685a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800685e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	220f      	movs	r2, #15
 800686a:	fa02 f303 	lsl.w	r3, r2, r3
 800686e:	43db      	mvns	r3, r3
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	4013      	ands	r3, r2
 8006874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a51      	ldr	r2, [pc, #324]	; (80069c0 <HAL_GPIO_Init+0x310>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d02b      	beq.n	80068d6 <HAL_GPIO_Init+0x226>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a50      	ldr	r2, [pc, #320]	; (80069c4 <HAL_GPIO_Init+0x314>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d025      	beq.n	80068d2 <HAL_GPIO_Init+0x222>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a4f      	ldr	r2, [pc, #316]	; (80069c8 <HAL_GPIO_Init+0x318>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d01f      	beq.n	80068ce <HAL_GPIO_Init+0x21e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a4e      	ldr	r2, [pc, #312]	; (80069cc <HAL_GPIO_Init+0x31c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d019      	beq.n	80068ca <HAL_GPIO_Init+0x21a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a4d      	ldr	r2, [pc, #308]	; (80069d0 <HAL_GPIO_Init+0x320>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d013      	beq.n	80068c6 <HAL_GPIO_Init+0x216>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a4c      	ldr	r2, [pc, #304]	; (80069d4 <HAL_GPIO_Init+0x324>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00d      	beq.n	80068c2 <HAL_GPIO_Init+0x212>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a4b      	ldr	r2, [pc, #300]	; (80069d8 <HAL_GPIO_Init+0x328>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d007      	beq.n	80068be <HAL_GPIO_Init+0x20e>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a4a      	ldr	r2, [pc, #296]	; (80069dc <HAL_GPIO_Init+0x32c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d101      	bne.n	80068ba <HAL_GPIO_Init+0x20a>
 80068b6:	2307      	movs	r3, #7
 80068b8:	e00e      	b.n	80068d8 <HAL_GPIO_Init+0x228>
 80068ba:	2308      	movs	r3, #8
 80068bc:	e00c      	b.n	80068d8 <HAL_GPIO_Init+0x228>
 80068be:	2306      	movs	r3, #6
 80068c0:	e00a      	b.n	80068d8 <HAL_GPIO_Init+0x228>
 80068c2:	2305      	movs	r3, #5
 80068c4:	e008      	b.n	80068d8 <HAL_GPIO_Init+0x228>
 80068c6:	2304      	movs	r3, #4
 80068c8:	e006      	b.n	80068d8 <HAL_GPIO_Init+0x228>
 80068ca:	2303      	movs	r3, #3
 80068cc:	e004      	b.n	80068d8 <HAL_GPIO_Init+0x228>
 80068ce:	2302      	movs	r3, #2
 80068d0:	e002      	b.n	80068d8 <HAL_GPIO_Init+0x228>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e000      	b.n	80068d8 <HAL_GPIO_Init+0x228>
 80068d6:	2300      	movs	r3, #0
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	f002 0203 	and.w	r2, r2, #3
 80068de:	0092      	lsls	r2, r2, #2
 80068e0:	4093      	lsls	r3, r2
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068e8:	4934      	ldr	r1, [pc, #208]	; (80069bc <HAL_GPIO_Init+0x30c>)
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	089b      	lsrs	r3, r3, #2
 80068ee:	3302      	adds	r3, #2
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068f6:	4b3a      	ldr	r3, [pc, #232]	; (80069e0 <HAL_GPIO_Init+0x330>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	43db      	mvns	r3, r3
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	4013      	ands	r3, r2
 8006904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800691a:	4a31      	ldr	r2, [pc, #196]	; (80069e0 <HAL_GPIO_Init+0x330>)
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006920:	4b2f      	ldr	r3, [pc, #188]	; (80069e0 <HAL_GPIO_Init+0x330>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	43db      	mvns	r3, r3
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	4013      	ands	r3, r2
 800692e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006944:	4a26      	ldr	r2, [pc, #152]	; (80069e0 <HAL_GPIO_Init+0x330>)
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800694a:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <HAL_GPIO_Init+0x330>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	43db      	mvns	r3, r3
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	4013      	ands	r3, r2
 8006958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	4313      	orrs	r3, r2
 800696c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800696e:	4a1c      	ldr	r2, [pc, #112]	; (80069e0 <HAL_GPIO_Init+0x330>)
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006974:	4b1a      	ldr	r3, [pc, #104]	; (80069e0 <HAL_GPIO_Init+0x330>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	43db      	mvns	r3, r3
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	4013      	ands	r3, r2
 8006982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006998:	4a11      	ldr	r2, [pc, #68]	; (80069e0 <HAL_GPIO_Init+0x330>)
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	3301      	adds	r3, #1
 80069a2:	61fb      	str	r3, [r7, #28]
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	2b0f      	cmp	r3, #15
 80069a8:	f67f ae90 	bls.w	80066cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80069ac:	bf00      	nop
 80069ae:	3724      	adds	r7, #36	; 0x24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	40023800 	.word	0x40023800
 80069bc:	40013800 	.word	0x40013800
 80069c0:	40020000 	.word	0x40020000
 80069c4:	40020400 	.word	0x40020400
 80069c8:	40020800 	.word	0x40020800
 80069cc:	40020c00 	.word	0x40020c00
 80069d0:	40021000 	.word	0x40021000
 80069d4:	40021400 	.word	0x40021400
 80069d8:	40021800 	.word	0x40021800
 80069dc:	40021c00 	.word	0x40021c00
 80069e0:	40013c00 	.word	0x40013c00

080069e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	887b      	ldrh	r3, [r7, #2]
 80069f6:	4013      	ands	r3, r2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069fc:	2301      	movs	r3, #1
 80069fe:	73fb      	strb	r3, [r7, #15]
 8006a00:	e001      	b.n	8006a06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a02:	2300      	movs	r3, #0
 8006a04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	807b      	strh	r3, [r7, #2]
 8006a20:	4613      	mov	r3, r2
 8006a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a24:	787b      	ldrb	r3, [r7, #1]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a2a:	887a      	ldrh	r2, [r7, #2]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006a30:	e003      	b.n	8006a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006a32:	887b      	ldrh	r3, [r7, #2]
 8006a34:	041a      	lsls	r2, r3, #16
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	619a      	str	r2, [r3, #24]
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	695a      	ldr	r2, [r3, #20]
 8006a56:	887b      	ldrh	r3, [r7, #2]
 8006a58:	401a      	ands	r2, r3
 8006a5a:	887b      	ldrh	r3, [r7, #2]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d104      	bne.n	8006a6a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006a60:	887b      	ldrh	r3, [r7, #2]
 8006a62:	041a      	lsls	r2, r3, #16
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006a68:	e002      	b.n	8006a70 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006a6a:	887a      	ldrh	r2, [r7, #2]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	619a      	str	r2, [r3, #24]
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006a86:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a88:	695a      	ldr	r2, [r3, #20]
 8006a8a:	88fb      	ldrh	r3, [r7, #6]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d006      	beq.n	8006aa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a92:	4a05      	ldr	r2, [pc, #20]	; (8006aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a94:	88fb      	ldrh	r3, [r7, #6]
 8006a96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a98:	88fb      	ldrh	r3, [r7, #6]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fd f9b0 	bl	8003e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40013c00 	.word	0x40013c00

08006aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e11f      	b.n	8006cfe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fd ff36 	bl	8004944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2224      	movs	r2, #36	; 0x24
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0201 	bic.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006afe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b10:	f002 fc56 	bl	80093c0 <HAL_RCC_GetPCLK1Freq>
 8006b14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	4a7b      	ldr	r2, [pc, #492]	; (8006d08 <HAL_I2C_Init+0x25c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d807      	bhi.n	8006b30 <HAL_I2C_Init+0x84>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4a7a      	ldr	r2, [pc, #488]	; (8006d0c <HAL_I2C_Init+0x260>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	bf94      	ite	ls
 8006b28:	2301      	movls	r3, #1
 8006b2a:	2300      	movhi	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	e006      	b.n	8006b3e <HAL_I2C_Init+0x92>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4a77      	ldr	r2, [pc, #476]	; (8006d10 <HAL_I2C_Init+0x264>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	bf94      	ite	ls
 8006b38:	2301      	movls	r3, #1
 8006b3a:	2300      	movhi	r3, #0
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e0db      	b.n	8006cfe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4a72      	ldr	r2, [pc, #456]	; (8006d14 <HAL_I2C_Init+0x268>)
 8006b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4e:	0c9b      	lsrs	r3, r3, #18
 8006b50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	4a64      	ldr	r2, [pc, #400]	; (8006d08 <HAL_I2C_Init+0x25c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d802      	bhi.n	8006b80 <HAL_I2C_Init+0xd4>
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	e009      	b.n	8006b94 <HAL_I2C_Init+0xe8>
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006b86:	fb02 f303 	mul.w	r3, r2, r3
 8006b8a:	4a63      	ldr	r2, [pc, #396]	; (8006d18 <HAL_I2C_Init+0x26c>)
 8006b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b90:	099b      	lsrs	r3, r3, #6
 8006b92:	3301      	adds	r3, #1
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006ba6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	4956      	ldr	r1, [pc, #344]	; (8006d08 <HAL_I2C_Init+0x25c>)
 8006bb0:	428b      	cmp	r3, r1
 8006bb2:	d80d      	bhi.n	8006bd0 <HAL_I2C_Init+0x124>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	1e59      	subs	r1, r3, #1
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	bf38      	it	cc
 8006bcc:	2304      	movcc	r3, #4
 8006bce:	e04f      	b.n	8006c70 <HAL_I2C_Init+0x1c4>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d111      	bne.n	8006bfc <HAL_I2C_Init+0x150>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	1e58      	subs	r0, r3, #1
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6859      	ldr	r1, [r3, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	440b      	add	r3, r1
 8006be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bea:	3301      	adds	r3, #1
 8006bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	bf0c      	ite	eq
 8006bf4:	2301      	moveq	r3, #1
 8006bf6:	2300      	movne	r3, #0
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	e012      	b.n	8006c22 <HAL_I2C_Init+0x176>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	1e58      	subs	r0, r3, #1
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6859      	ldr	r1, [r3, #4]
 8006c04:	460b      	mov	r3, r1
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	440b      	add	r3, r1
 8006c0a:	0099      	lsls	r1, r3, #2
 8006c0c:	440b      	add	r3, r1
 8006c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c12:	3301      	adds	r3, #1
 8006c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bf0c      	ite	eq
 8006c1c:	2301      	moveq	r3, #1
 8006c1e:	2300      	movne	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <HAL_I2C_Init+0x17e>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e022      	b.n	8006c70 <HAL_I2C_Init+0x1c4>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10e      	bne.n	8006c50 <HAL_I2C_Init+0x1a4>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1e58      	subs	r0, r3, #1
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6859      	ldr	r1, [r3, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	440b      	add	r3, r1
 8006c40:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c44:	3301      	adds	r3, #1
 8006c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c4e:	e00f      	b.n	8006c70 <HAL_I2C_Init+0x1c4>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	1e58      	subs	r0, r3, #1
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6859      	ldr	r1, [r3, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	0099      	lsls	r1, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c66:	3301      	adds	r3, #1
 8006c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c70:	6879      	ldr	r1, [r7, #4]
 8006c72:	6809      	ldr	r1, [r1, #0]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	69da      	ldr	r2, [r3, #28]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006c9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6911      	ldr	r1, [r2, #16]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	68d2      	ldr	r2, [r2, #12]
 8006caa:	4311      	orrs	r1, r2
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	6812      	ldr	r2, [r2, #0]
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695a      	ldr	r2, [r3, #20]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0201 	orr.w	r2, r2, #1
 8006cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	000186a0 	.word	0x000186a0
 8006d0c:	001e847f 	.word	0x001e847f
 8006d10:	003d08ff 	.word	0x003d08ff
 8006d14:	431bde83 	.word	0x431bde83
 8006d18:	10624dd3 	.word	0x10624dd3

08006d1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	607a      	str	r2, [r7, #4]
 8006d26:	461a      	mov	r2, r3
 8006d28:	460b      	mov	r3, r1
 8006d2a:	817b      	strh	r3, [r7, #10]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d30:	f7fe f94a 	bl	8004fc8 <HAL_GetTick>
 8006d34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	f040 80e0 	bne.w	8006f04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	2319      	movs	r3, #25
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	4970      	ldr	r1, [pc, #448]	; (8006f10 <HAL_I2C_Master_Transmit+0x1f4>)
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f001 fd59 	bl	8008806 <I2C_WaitOnFlagUntilTimeout>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e0d3      	b.n	8006f06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_I2C_Master_Transmit+0x50>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e0cc      	b.n	8006f06 <HAL_I2C_Master_Transmit+0x1ea>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d007      	beq.n	8006d92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0201 	orr.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006da0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2221      	movs	r2, #33	; 0x21
 8006da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2210      	movs	r2, #16
 8006dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	893a      	ldrh	r2, [r7, #8]
 8006dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4a50      	ldr	r2, [pc, #320]	; (8006f14 <HAL_I2C_Master_Transmit+0x1f8>)
 8006dd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006dd4:	8979      	ldrh	r1, [r7, #10]
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	6a3a      	ldr	r2, [r7, #32]
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f001 fc12 	bl	8008604 <I2C_MasterRequestWrite>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e08d      	b.n	8006f06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dea:	2300      	movs	r3, #0
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006e00:	e066      	b.n	8006ed0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	6a39      	ldr	r1, [r7, #32]
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f001 fdd3 	bl	80089b2 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00d      	beq.n	8006e2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d107      	bne.n	8006e2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e06b      	b.n	8006f06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	781a      	ldrb	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d11b      	bne.n	8006ea4 <HAL_I2C_Master_Transmit+0x188>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d017      	beq.n	8006ea4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	781a      	ldrb	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	6a39      	ldr	r1, [r7, #32]
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f001 fdc3 	bl	8008a34 <I2C_WaitOnBTFFlagUntilTimeout>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00d      	beq.n	8006ed0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	d107      	bne.n	8006ecc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e01a      	b.n	8006f06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d194      	bne.n	8006e02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	e000      	b.n	8006f06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006f04:	2302      	movs	r3, #2
  }
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	00100002 	.word	0x00100002
 8006f14:	ffff0000 	.word	0xffff0000

08006f18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f38:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f40:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
 8006f44:	2b10      	cmp	r3, #16
 8006f46:	d003      	beq.n	8006f50 <HAL_I2C_EV_IRQHandler+0x38>
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	2b40      	cmp	r3, #64	; 0x40
 8006f4c:	f040 80b6 	bne.w	80070bc <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10d      	bne.n	8006f86 <HAL_I2C_EV_IRQHandler+0x6e>
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006f70:	d003      	beq.n	8006f7a <HAL_I2C_EV_IRQHandler+0x62>
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006f78:	d101      	bne.n	8006f7e <HAL_I2C_EV_IRQHandler+0x66>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e000      	b.n	8006f80 <HAL_I2C_EV_IRQHandler+0x68>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	f000 8127 	beq.w	80071d4 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00c      	beq.n	8006faa <HAL_I2C_EV_IRQHandler+0x92>
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	0a5b      	lsrs	r3, r3, #9
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d006      	beq.n	8006faa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 fdb9 	bl	8008b14 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fd1c 	bl	80079e0 <I2C_Master_SB>
 8006fa8:	e087      	b.n	80070ba <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	08db      	lsrs	r3, r3, #3
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d009      	beq.n	8006fca <HAL_I2C_EV_IRQHandler+0xb2>
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	0a5b      	lsrs	r3, r3, #9
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fd92 	bl	8007aec <I2C_Master_ADD10>
 8006fc8:	e077      	b.n	80070ba <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <HAL_I2C_EV_IRQHandler+0xd2>
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	0a5b      	lsrs	r3, r3, #9
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fdac 	bl	8007b40 <I2C_Master_ADDR>
 8006fe8:	e067      	b.n	80070ba <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	089b      	lsrs	r3, r3, #2
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d030      	beq.n	8007058 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007004:	f000 80e8 	beq.w	80071d8 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	09db      	lsrs	r3, r3, #7
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00f      	beq.n	8007034 <HAL_I2C_EV_IRQHandler+0x11c>
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	0a9b      	lsrs	r3, r3, #10
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <HAL_I2C_EV_IRQHandler+0x11c>
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	089b      	lsrs	r3, r3, #2
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d103      	bne.n	8007034 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f9e8 	bl	8007402 <I2C_MasterTransmit_TXE>
 8007032:	e042      	b.n	80070ba <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	089b      	lsrs	r3, r3, #2
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 80cb 	beq.w	80071d8 <HAL_I2C_EV_IRQHandler+0x2c0>
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	0a5b      	lsrs	r3, r3, #9
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 80c4 	beq.w	80071d8 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fa72 	bl	800753a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007056:	e0bf      	b.n	80071d8 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007066:	f000 80b7 	beq.w	80071d8 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	099b      	lsrs	r3, r3, #6
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00f      	beq.n	8007096 <HAL_I2C_EV_IRQHandler+0x17e>
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	0a9b      	lsrs	r3, r3, #10
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <HAL_I2C_EV_IRQHandler+0x17e>
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	089b      	lsrs	r3, r3, #2
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d103      	bne.n	8007096 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fb3a 	bl	8007708 <I2C_MasterReceive_RXNE>
 8007094:	e011      	b.n	80070ba <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	089b      	lsrs	r3, r3, #2
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 809a 	beq.w	80071d8 <HAL_I2C_EV_IRQHandler+0x2c0>
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	0a5b      	lsrs	r3, r3, #9
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 8093 	beq.w	80071d8 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fbaa 	bl	800780c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070b8:	e08e      	b.n	80071d8 <HAL_I2C_EV_IRQHandler+0x2c0>
 80070ba:	e08d      	b.n	80071d8 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d004      	beq.n	80070ce <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	61fb      	str	r3, [r7, #28]
 80070cc:	e007      	b.n	80070de <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	085b      	lsrs	r3, r3, #1
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d012      	beq.n	8007110 <HAL_I2C_EV_IRQHandler+0x1f8>
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	0a5b      	lsrs	r3, r3, #9
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00c      	beq.n	8007110 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007106:	69b9      	ldr	r1, [r7, #24]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 ff68 	bl	8007fde <I2C_Slave_ADDR>
 800710e:	e066      	b.n	80071de <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	091b      	lsrs	r3, r3, #4
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d009      	beq.n	8007130 <HAL_I2C_EV_IRQHandler+0x218>
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	0a5b      	lsrs	r3, r3, #9
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d003      	beq.n	8007130 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 ff9d 	bl	8008068 <I2C_Slave_STOPF>
 800712e:	e056      	b.n	80071de <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	2b21      	cmp	r3, #33	; 0x21
 8007134:	d002      	beq.n	800713c <HAL_I2C_EV_IRQHandler+0x224>
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	2b29      	cmp	r3, #41	; 0x29
 800713a:	d125      	bne.n	8007188 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	09db      	lsrs	r3, r3, #7
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00f      	beq.n	8007168 <HAL_I2C_EV_IRQHandler+0x250>
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	0a9b      	lsrs	r3, r3, #10
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d009      	beq.n	8007168 <HAL_I2C_EV_IRQHandler+0x250>
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	089b      	lsrs	r3, r3, #2
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b00      	cmp	r3, #0
 800715e:	d103      	bne.n	8007168 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fe7e 	bl	8007e62 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007166:	e039      	b.n	80071dc <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	089b      	lsrs	r3, r3, #2
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d033      	beq.n	80071dc <HAL_I2C_EV_IRQHandler+0x2c4>
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	0a5b      	lsrs	r3, r3, #9
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d02d      	beq.n	80071dc <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 feab 	bl	8007edc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007186:	e029      	b.n	80071dc <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	099b      	lsrs	r3, r3, #6
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00f      	beq.n	80071b4 <HAL_I2C_EV_IRQHandler+0x29c>
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	0a9b      	lsrs	r3, r3, #10
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <HAL_I2C_EV_IRQHandler+0x29c>
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	089b      	lsrs	r3, r3, #2
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d103      	bne.n	80071b4 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 feb6 	bl	8007f1e <I2C_SlaveReceive_RXNE>
 80071b2:	e014      	b.n	80071de <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	089b      	lsrs	r3, r3, #2
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00e      	beq.n	80071de <HAL_I2C_EV_IRQHandler+0x2c6>
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	0a5b      	lsrs	r3, r3, #9
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d008      	beq.n	80071de <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fee4 	bl	8007f9a <I2C_SlaveReceive_BTF>
 80071d2:	e004      	b.n	80071de <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80071d4:	bf00      	nop
 80071d6:	e002      	b.n	80071de <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071d8:	bf00      	nop
 80071da:	e000      	b.n	80071de <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80071dc:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80071de:	3720      	adds	r7, #32
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08a      	sub	sp, #40	; 0x28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80071fc:	2300      	movs	r3, #0
 80071fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007206:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	0a1b      	lsrs	r3, r3, #8
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00e      	beq.n	8007232 <HAL_I2C_ER_IRQHandler+0x4e>
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	0a1b      	lsrs	r3, r3, #8
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d008      	beq.n	8007232 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007230:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	0a5b      	lsrs	r3, r3, #9
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00e      	beq.n	800725c <HAL_I2C_ER_IRQHandler+0x78>
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	0a1b      	lsrs	r3, r3, #8
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d008      	beq.n	800725c <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	f043 0302 	orr.w	r3, r3, #2
 8007250:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800725a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	0a9b      	lsrs	r3, r3, #10
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d03f      	beq.n	80072e8 <HAL_I2C_ER_IRQHandler+0x104>
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d039      	beq.n	80072e8 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007274:	7efb      	ldrb	r3, [r7, #27]
 8007276:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727c:	b29b      	uxth	r3, r3
 800727e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007286:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800728e:	7ebb      	ldrb	r3, [r7, #26]
 8007290:	2b20      	cmp	r3, #32
 8007292:	d112      	bne.n	80072ba <HAL_I2C_ER_IRQHandler+0xd6>
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10f      	bne.n	80072ba <HAL_I2C_ER_IRQHandler+0xd6>
 800729a:	7cfb      	ldrb	r3, [r7, #19]
 800729c:	2b21      	cmp	r3, #33	; 0x21
 800729e:	d008      	beq.n	80072b2 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80072a0:	7cfb      	ldrb	r3, [r7, #19]
 80072a2:	2b29      	cmp	r3, #41	; 0x29
 80072a4:	d005      	beq.n	80072b2 <HAL_I2C_ER_IRQHandler+0xce>
 80072a6:	7cfb      	ldrb	r3, [r7, #19]
 80072a8:	2b28      	cmp	r3, #40	; 0x28
 80072aa:	d106      	bne.n	80072ba <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b21      	cmp	r3, #33	; 0x21
 80072b0:	d103      	bne.n	80072ba <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 f808 	bl	80082c8 <I2C_Slave_AF>
 80072b8:	e016      	b.n	80072e8 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072c2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	f043 0304 	orr.w	r3, r3, #4
 80072ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80072cc:	7efb      	ldrb	r3, [r7, #27]
 80072ce:	2b10      	cmp	r3, #16
 80072d0:	d002      	beq.n	80072d8 <HAL_I2C_ER_IRQHandler+0xf4>
 80072d2:	7efb      	ldrb	r3, [r7, #27]
 80072d4:	2b40      	cmp	r3, #64	; 0x40
 80072d6:	d107      	bne.n	80072e8 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072e6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	0adb      	lsrs	r3, r3, #11
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00e      	beq.n	8007312 <HAL_I2C_ER_IRQHandler+0x12e>
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	0a1b      	lsrs	r3, r3, #8
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d008      	beq.n	8007312 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	f043 0308 	orr.w	r3, r3, #8
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007310:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	d008      	beq.n	800732a <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 f83f 	bl	80083a8 <I2C_ITError>
  }
}
 800732a:	bf00      	nop
 800732c:	3728      	adds	r7, #40	; 0x28
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800734e:	bf00      	nop
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007362:	bf00      	nop
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800736e:	b480      	push	{r7}
 8007370:	b083      	sub	sp, #12
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007376:	bf00      	nop
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007382:	b480      	push	{r7}
 8007384:	b083      	sub	sp, #12
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	70fb      	strb	r3, [r7, #3]
 800738e:	4613      	mov	r3, r2
 8007390:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007410:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007418:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007424:	2b00      	cmp	r3, #0
 8007426:	d150      	bne.n	80074ca <I2C_MasterTransmit_TXE+0xc8>
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	2b21      	cmp	r3, #33	; 0x21
 800742c:	d14d      	bne.n	80074ca <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2b08      	cmp	r3, #8
 8007432:	d01d      	beq.n	8007470 <I2C_MasterTransmit_TXE+0x6e>
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b20      	cmp	r3, #32
 8007438:	d01a      	beq.n	8007470 <I2C_MasterTransmit_TXE+0x6e>
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007440:	d016      	beq.n	8007470 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007450:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2211      	movs	r2, #17
 8007456:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2220      	movs	r2, #32
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff ff62 	bl	8007332 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800746e:	e060      	b.n	8007532 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800747e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800748e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b40      	cmp	r3, #64	; 0x40
 80074a8:	d107      	bne.n	80074ba <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff ff7d 	bl	80073b2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80074b8:	e03b      	b.n	8007532 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff ff35 	bl	8007332 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80074c8:	e033      	b.n	8007532 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b21      	cmp	r3, #33	; 0x21
 80074ce:	d005      	beq.n	80074dc <I2C_MasterTransmit_TXE+0xda>
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	2b40      	cmp	r3, #64	; 0x40
 80074d4:	d12d      	bne.n	8007532 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	2b22      	cmp	r3, #34	; 0x22
 80074da:	d12a      	bne.n	8007532 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d108      	bne.n	80074f8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80074f6:	e01c      	b.n	8007532 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b40      	cmp	r3, #64	; 0x40
 8007502:	d103      	bne.n	800750c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f898 	bl	800763a <I2C_MemoryTransmit_TXE_BTF>
}
 800750a:	e012      	b.n	8007532 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	781a      	ldrb	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007526:	b29b      	uxth	r3, r3
 8007528:	3b01      	subs	r3, #1
 800752a:	b29a      	uxth	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007530:	e7ff      	b.n	8007532 <I2C_MasterTransmit_TXE+0x130>
 8007532:	bf00      	nop
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007546:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b21      	cmp	r3, #33	; 0x21
 8007552:	d165      	bne.n	8007620 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d012      	beq.n	8007584 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	781a      	ldrb	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007578:	b29b      	uxth	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007582:	e056      	b.n	8007632 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b08      	cmp	r3, #8
 8007588:	d01d      	beq.n	80075c6 <I2C_MasterTransmit_BTF+0x8c>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2b20      	cmp	r3, #32
 800758e:	d01a      	beq.n	80075c6 <I2C_MasterTransmit_BTF+0x8c>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007596:	d016      	beq.n	80075c6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075a6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2211      	movs	r2, #17
 80075ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7ff feb7 	bl	8007332 <HAL_I2C_MasterTxCpltCallback>
}
 80075c4:	e035      	b.n	8007632 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075d4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075e4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b40      	cmp	r3, #64	; 0x40
 80075fe:	d107      	bne.n	8007610 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff fed2 	bl	80073b2 <HAL_I2C_MemTxCpltCallback>
}
 800760e:	e010      	b.n	8007632 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff fe8a 	bl	8007332 <HAL_I2C_MasterTxCpltCallback>
}
 800761e:	e008      	b.n	8007632 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b40      	cmp	r3, #64	; 0x40
 800762a:	d102      	bne.n	8007632 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f804 	bl	800763a <I2C_MemoryTransmit_TXE_BTF>
}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007646:	2b00      	cmp	r3, #0
 8007648:	d11d      	bne.n	8007686 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764e:	2b01      	cmp	r3, #1
 8007650:	d10b      	bne.n	800766a <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007656:	b2da      	uxtb	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007662:	1c9a      	adds	r2, r3, #2
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007668:	e048      	b.n	80076fc <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800766e:	b29b      	uxth	r3, r3
 8007670:	121b      	asrs	r3, r3, #8
 8007672:	b2da      	uxtb	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007684:	e03a      	b.n	80076fc <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768a:	2b01      	cmp	r3, #1
 800768c:	d10b      	bne.n	80076a6 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007692:	b2da      	uxtb	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80076a4:	e02a      	b.n	80076fc <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d126      	bne.n	80076fc <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b22      	cmp	r3, #34	; 0x22
 80076b8:	d108      	bne.n	80076cc <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076c8:	601a      	str	r2, [r3, #0]
}
 80076ca:	e017      	b.n	80076fc <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b21      	cmp	r3, #33	; 0x21
 80076d6:	d111      	bne.n	80076fc <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	781a      	ldrb	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	3b01      	subs	r3, #1
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b22      	cmp	r3, #34	; 0x22
 800771a:	d173      	bne.n	8007804 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007720:	b29b      	uxth	r3, r3
 8007722:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b03      	cmp	r3, #3
 8007728:	d920      	bls.n	800776c <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	b2d2      	uxtb	r2, r2
 8007736:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007746:	b29b      	uxth	r3, r3
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007754:	b29b      	uxth	r3, r3
 8007756:	2b03      	cmp	r3, #3
 8007758:	d154      	bne.n	8007804 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007768:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800776a:	e04b      	b.n	8007804 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	2b02      	cmp	r3, #2
 8007772:	d047      	beq.n	8007804 <I2C_MasterReceive_RXNE+0xfc>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d002      	beq.n	8007780 <I2C_MasterReceive_RXNE+0x78>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d141      	bne.n	8007804 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800778e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800779e:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691a      	ldr	r2, [r3, #16]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	b2d2      	uxtb	r2, r2
 80077ac:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b40      	cmp	r3, #64	; 0x40
 80077d8:	d10a      	bne.n	80077f0 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fdec 	bl	80073c6 <HAL_I2C_MemRxCpltCallback>
}
 80077ee:	e009      	b.n	8007804 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2212      	movs	r2, #18
 80077fc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff fda1 	bl	8007346 <HAL_I2C_MasterRxCpltCallback>
}
 8007804:	bf00      	nop
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781e:	b29b      	uxth	r3, r3
 8007820:	2b04      	cmp	r3, #4
 8007822:	d11b      	bne.n	800785c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007832:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	691a      	ldr	r2, [r3, #16]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	1c5a      	adds	r2, r3, #1
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007850:	b29b      	uxth	r3, r3
 8007852:	3b01      	subs	r3, #1
 8007854:	b29a      	uxth	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800785a:	e0bd      	b.n	80079d8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007860:	b29b      	uxth	r3, r3
 8007862:	2b03      	cmp	r3, #3
 8007864:	d129      	bne.n	80078ba <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007874:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2b04      	cmp	r3, #4
 800787a:	d00a      	beq.n	8007892 <I2C_MasterReceive_BTF+0x86>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d007      	beq.n	8007892 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007890:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	b2d2      	uxtb	r2, r2
 800789e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80078b8:	e08e      	b.n	80079d8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078be:	b29b      	uxth	r3, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d176      	bne.n	80079b2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d002      	beq.n	80078d0 <I2C_MasterReceive_BTF+0xc4>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b10      	cmp	r3, #16
 80078ce:	d108      	bne.n	80078e2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	e019      	b.n	8007916 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d002      	beq.n	80078ee <I2C_MasterReceive_BTF+0xe2>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d108      	bne.n	8007900 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	e00a      	b.n	8007916 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b10      	cmp	r3, #16
 8007904:	d007      	beq.n	8007916 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007914:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691a      	ldr	r2, [r3, #16]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	b2d2      	uxtb	r2, r2
 8007922:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007932:	b29b      	uxth	r3, r3
 8007934:	3b01      	subs	r3, #1
 8007936:	b29a      	uxth	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691a      	ldr	r2, [r3, #16]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007958:	b29b      	uxth	r3, r3
 800795a:	3b01      	subs	r3, #1
 800795c:	b29a      	uxth	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007970:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2220      	movs	r2, #32
 8007976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b40      	cmp	r3, #64	; 0x40
 8007984:	d10a      	bne.n	800799c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7ff fd16 	bl	80073c6 <HAL_I2C_MemRxCpltCallback>
}
 800799a:	e01d      	b.n	80079d8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2212      	movs	r2, #18
 80079a8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff fccb 	bl	8007346 <HAL_I2C_MasterRxCpltCallback>
}
 80079b0:	e012      	b.n	80079d8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	b2d2      	uxtb	r2, r2
 80079be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	3b01      	subs	r3, #1
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80079d8:	bf00      	nop
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b40      	cmp	r3, #64	; 0x40
 80079f2:	d117      	bne.n	8007a24 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d109      	bne.n	8007a10 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	461a      	mov	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a0c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007a0e:	e067      	b.n	8007ae0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	f043 0301 	orr.w	r3, r3, #1
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	611a      	str	r2, [r3, #16]
}
 8007a22:	e05d      	b.n	8007ae0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a2c:	d133      	bne.n	8007a96 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b21      	cmp	r3, #33	; 0x21
 8007a38:	d109      	bne.n	8007a4e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	461a      	mov	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a4a:	611a      	str	r2, [r3, #16]
 8007a4c:	e008      	b.n	8007a60 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	f043 0301 	orr.w	r3, r3, #1
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d004      	beq.n	8007a72 <I2C_Master_SB+0x92>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d108      	bne.n	8007a84 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d032      	beq.n	8007ae0 <I2C_Master_SB+0x100>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d02d      	beq.n	8007ae0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a92:	605a      	str	r2, [r3, #4]
}
 8007a94:	e024      	b.n	8007ae0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10e      	bne.n	8007abc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	11db      	asrs	r3, r3, #7
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f003 0306 	and.w	r3, r3, #6
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	f063 030f 	orn	r3, r3, #15
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	611a      	str	r2, [r3, #16]
}
 8007aba:	e011      	b.n	8007ae0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d10d      	bne.n	8007ae0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	11db      	asrs	r3, r3, #7
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	f003 0306 	and.w	r3, r3, #6
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	f063 030e 	orn	r3, r3, #14
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	611a      	str	r2, [r3, #16]
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d103      	bne.n	8007b10 <I2C_Master_ADD10+0x24>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d011      	beq.n	8007b34 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d104      	bne.n	8007b24 <I2C_Master_ADD10+0x38>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d007      	beq.n	8007b34 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b32:	605a      	str	r2, [r3, #4]
    }
  }
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b091      	sub	sp, #68	; 0x44
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b56:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b22      	cmp	r3, #34	; 0x22
 8007b68:	f040 8169 	bne.w	8007e3e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10f      	bne.n	8007b94 <I2C_Master_ADDR+0x54>
 8007b74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b78:	2b40      	cmp	r3, #64	; 0x40
 8007b7a:	d10b      	bne.n	8007b94 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	633b      	str	r3, [r7, #48]	; 0x30
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	e160      	b.n	8007e56 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d11d      	bne.n	8007bd8 <I2C_Master_ADDR+0x98>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ba4:	d118      	bne.n	8007bd8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bca:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	651a      	str	r2, [r3, #80]	; 0x50
 8007bd6:	e13e      	b.n	8007e56 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d113      	bne.n	8007c0a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007be2:	2300      	movs	r3, #0
 8007be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	e115      	b.n	8007e36 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	f040 808a 	bne.w	8007d2a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c1c:	d137      	bne.n	8007c8e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c2c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c3c:	d113      	bne.n	8007c66 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c4c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c4e:	2300      	movs	r3, #0
 8007c50:	627b      	str	r3, [r7, #36]	; 0x24
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	e0e7      	b.n	8007e36 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c66:	2300      	movs	r3, #0
 8007c68:	623b      	str	r3, [r7, #32]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	623b      	str	r3, [r7, #32]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	623b      	str	r3, [r7, #32]
 8007c7a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	e0d3      	b.n	8007e36 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	d02e      	beq.n	8007cf2 <I2C_Master_ADDR+0x1b2>
 8007c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	d02b      	beq.n	8007cf2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9c:	2b12      	cmp	r3, #18
 8007c9e:	d102      	bne.n	8007ca6 <I2C_Master_ADDR+0x166>
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d125      	bne.n	8007cf2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d00e      	beq.n	8007cca <I2C_Master_ADDR+0x18a>
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d00b      	beq.n	8007cca <I2C_Master_ADDR+0x18a>
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb4:	2b10      	cmp	r3, #16
 8007cb6:	d008      	beq.n	8007cca <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	e007      	b.n	8007cda <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cd8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61fb      	str	r3, [r7, #28]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	61fb      	str	r3, [r7, #28]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	61fb      	str	r3, [r7, #28]
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	e0a1      	b.n	8007e36 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d00:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d02:	2300      	movs	r3, #0
 8007d04:	61bb      	str	r3, [r7, #24]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	61bb      	str	r3, [r7, #24]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	61bb      	str	r3, [r7, #24]
 8007d16:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	e085      	b.n	8007e36 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d14d      	bne.n	8007dd0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d016      	beq.n	8007d68 <I2C_Master_ADDR+0x228>
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d013      	beq.n	8007d68 <I2C_Master_ADDR+0x228>
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	2b10      	cmp	r3, #16
 8007d44:	d010      	beq.n	8007d68 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d54:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	e007      	b.n	8007d78 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d76:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d86:	d117      	bne.n	8007db8 <I2C_Master_ADDR+0x278>
 8007d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d8e:	d00b      	beq.n	8007da8 <I2C_Master_ADDR+0x268>
 8007d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d008      	beq.n	8007da8 <I2C_Master_ADDR+0x268>
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d005      	beq.n	8007da8 <I2C_Master_ADDR+0x268>
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	2b10      	cmp	r3, #16
 8007da0:	d002      	beq.n	8007da8 <I2C_Master_ADDR+0x268>
 8007da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da4:	2b20      	cmp	r3, #32
 8007da6:	d107      	bne.n	8007db8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007db6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007db8:	2300      	movs	r3, #0
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	e032      	b.n	8007e36 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dde:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dee:	d117      	bne.n	8007e20 <I2C_Master_ADDR+0x2e0>
 8007df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007df6:	d00b      	beq.n	8007e10 <I2C_Master_ADDR+0x2d0>
 8007df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d008      	beq.n	8007e10 <I2C_Master_ADDR+0x2d0>
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e00:	2b08      	cmp	r3, #8
 8007e02:	d005      	beq.n	8007e10 <I2C_Master_ADDR+0x2d0>
 8007e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e06:	2b10      	cmp	r3, #16
 8007e08:	d002      	beq.n	8007e10 <I2C_Master_ADDR+0x2d0>
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0c:	2b20      	cmp	r3, #32
 8007e0e:	d107      	bne.n	8007e20 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e1e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e20:	2300      	movs	r3, #0
 8007e22:	613b      	str	r3, [r7, #16]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	613b      	str	r3, [r7, #16]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	613b      	str	r3, [r7, #16]
 8007e34:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007e3c:	e00b      	b.n	8007e56 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	68fb      	ldr	r3, [r7, #12]
}
 8007e54:	e7ff      	b.n	8007e56 <I2C_Master_ADDR+0x316>
 8007e56:	bf00      	nop
 8007e58:	3744      	adds	r7, #68	; 0x44
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e70:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d02b      	beq.n	8007ed4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	781a      	ldrb	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	1c5a      	adds	r2, r3, #1
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d114      	bne.n	8007ed4 <I2C_SlaveTransmit_TXE+0x72>
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	2b29      	cmp	r3, #41	; 0x29
 8007eae:	d111      	bne.n	8007ed4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ebe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2221      	movs	r2, #33	; 0x21
 8007ec4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2228      	movs	r2, #40	; 0x28
 8007eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7ff fa43 	bl	800735a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007ed4:	bf00      	nop
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d011      	beq.n	8007f12 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	781a      	ldrb	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f2c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d02c      	beq.n	8007f92 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	691a      	ldr	r2, [r3, #16]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f42:	b2d2      	uxtb	r2, r2
 8007f44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	1c5a      	adds	r2, r3, #1
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	3b01      	subs	r3, #1
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d114      	bne.n	8007f92 <I2C_SlaveReceive_RXNE+0x74>
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
 8007f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f6c:	d111      	bne.n	8007f92 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685a      	ldr	r2, [r3, #4]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f7c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2222      	movs	r2, #34	; 0x22
 8007f82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2228      	movs	r2, #40	; 0x28
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff f9ee 	bl	800736e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007f92:	bf00      	nop
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d012      	beq.n	8007fd2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	691a      	ldr	r2, [r3, #16]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ff8:	2b28      	cmp	r3, #40	; 0x28
 8007ffa:	d127      	bne.n	800804c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800800a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	089b      	lsrs	r3, r3, #2
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008018:	2301      	movs	r3, #1
 800801a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	09db      	lsrs	r3, r3, #7
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	d103      	bne.n	8008030 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	81bb      	strh	r3, [r7, #12]
 800802e:	e002      	b.n	8008036 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800803e:	89ba      	ldrh	r2, [r7, #12]
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff f99c 	bl	8007382 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800804a:	e008      	b.n	800805e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f06f 0202 	mvn.w	r2, #2
 8008054:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800805e:	bf00      	nop
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
	...

08008068 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008076:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008086:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008088:	2300      	movs	r3, #0
 800808a:	60bb      	str	r3, [r7, #8]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	60bb      	str	r3, [r7, #8]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0201 	orr.w	r2, r2, #1
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080c4:	d172      	bne.n	80081ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	2b22      	cmp	r3, #34	; 0x22
 80080ca:	d002      	beq.n	80080d2 <I2C_Slave_STOPF+0x6a>
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	2b2a      	cmp	r3, #42	; 0x2a
 80080d0:	d135      	bne.n	800813e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	b29a      	uxth	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ee:	f043 0204 	orr.w	r2, r3, #4
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008104:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe f9e4 	bl	80064d8 <HAL_DMA_GetState>
 8008110:	4603      	mov	r3, r0
 8008112:	2b01      	cmp	r3, #1
 8008114:	d049      	beq.n	80081aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811a:	4a69      	ldr	r2, [pc, #420]	; (80082c0 <I2C_Slave_STOPF+0x258>)
 800811c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe f82c 	bl	8006180 <HAL_DMA_Abort_IT>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d03d      	beq.n	80081aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008138:	4610      	mov	r0, r2
 800813a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800813c:	e035      	b.n	80081aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	b29a      	uxth	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008150:	b29b      	uxth	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d005      	beq.n	8008162 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	f043 0204 	orr.w	r2, r3, #4
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008170:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe f9ae 	bl	80064d8 <HAL_DMA_GetState>
 800817c:	4603      	mov	r3, r0
 800817e:	2b01      	cmp	r3, #1
 8008180:	d014      	beq.n	80081ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008186:	4a4e      	ldr	r2, [pc, #312]	; (80082c0 <I2C_Slave_STOPF+0x258>)
 8008188:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818e:	4618      	mov	r0, r3
 8008190:	f7fd fff6 	bl	8006180 <HAL_DMA_Abort_IT>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d008      	beq.n	80081ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80081a4:	4610      	mov	r0, r2
 80081a6:	4798      	blx	r3
 80081a8:	e000      	b.n	80081ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80081aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d03e      	beq.n	8008234 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d112      	bne.n	80081ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f4:	2b40      	cmp	r3, #64	; 0x40
 80081f6:	d112      	bne.n	800821e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691a      	ldr	r2, [r3, #16]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	b2d2      	uxtb	r2, r2
 8008204:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008214:	b29b      	uxth	r3, r3
 8008216:	3b01      	subs	r3, #1
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008222:	b29b      	uxth	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	f043 0204 	orr.w	r2, r3, #4
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f8b3 	bl	80083a8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008242:	e039      	b.n	80082b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	2b2a      	cmp	r3, #42	; 0x2a
 8008248:	d109      	bne.n	800825e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2228      	movs	r2, #40	; 0x28
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff f888 	bl	800736e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b28      	cmp	r3, #40	; 0x28
 8008268:	d111      	bne.n	800828e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a15      	ldr	r2, [pc, #84]	; (80082c4 <I2C_Slave_STOPF+0x25c>)
 800826e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7ff f889 	bl	800739e <HAL_I2C_ListenCpltCallback>
}
 800828c:	e014      	b.n	80082b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008292:	2b22      	cmp	r3, #34	; 0x22
 8008294:	d002      	beq.n	800829c <I2C_Slave_STOPF+0x234>
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	2b22      	cmp	r3, #34	; 0x22
 800829a:	d10d      	bne.n	80082b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2220      	movs	r2, #32
 80082a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7ff f85b 	bl	800736e <HAL_I2C_SlaveRxCpltCallback>
}
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	08008709 	.word	0x08008709
 80082c4:	ffff0000 	.word	0xffff0000

080082c8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082dc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d002      	beq.n	80082ea <I2C_Slave_AF+0x22>
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b20      	cmp	r3, #32
 80082e8:	d129      	bne.n	800833e <I2C_Slave_AF+0x76>
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
 80082ec:	2b28      	cmp	r3, #40	; 0x28
 80082ee:	d126      	bne.n	800833e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a2c      	ldr	r2, [pc, #176]	; (80083a4 <I2C_Slave_AF+0xdc>)
 80082f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008304:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800830e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800831e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2220      	movs	r2, #32
 800832a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7ff f831 	bl	800739e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800833c:	e02e      	b.n	800839c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b21      	cmp	r3, #33	; 0x21
 8008342:	d126      	bne.n	8008392 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a17      	ldr	r2, [pc, #92]	; (80083a4 <I2C_Slave_AF+0xdc>)
 8008348:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2221      	movs	r2, #33	; 0x21
 800834e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2220      	movs	r2, #32
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800836e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008378:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008388:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fe ffe5 	bl	800735a <HAL_I2C_SlaveTxCpltCallback>
}
 8008390:	e004      	b.n	800839c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800839a:	615a      	str	r2, [r3, #20]
}
 800839c:	bf00      	nop
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	ffff0000 	.word	0xffff0000

080083a8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b10      	cmp	r3, #16
 80083c2:	d10a      	bne.n	80083da <I2C_ITError+0x32>
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	2b22      	cmp	r3, #34	; 0x22
 80083c8:	d107      	bne.n	80083da <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80083e0:	2b28      	cmp	r3, #40	; 0x28
 80083e2:	d107      	bne.n	80083f4 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2228      	movs	r2, #40	; 0x28
 80083ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80083f2:	e015      	b.n	8008420 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008402:	d006      	beq.n	8008412 <I2C_ITError+0x6a>
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	2b60      	cmp	r3, #96	; 0x60
 8008408:	d003      	beq.n	8008412 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2220      	movs	r2, #32
 800840e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800842a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800842e:	d162      	bne.n	80084f6 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800843e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b01      	cmp	r3, #1
 800844c:	d020      	beq.n	8008490 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008452:	4a6a      	ldr	r2, [pc, #424]	; (80085fc <I2C_ITError+0x254>)
 8008454:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845a:	4618      	mov	r0, r3
 800845c:	f7fd fe90 	bl	8006180 <HAL_DMA_Abort_IT>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 8089 	beq.w	800857a <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 0201 	bic.w	r2, r2, #1
 8008476:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2220      	movs	r2, #32
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800848a:	4610      	mov	r0, r2
 800848c:	4798      	blx	r3
 800848e:	e074      	b.n	800857a <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008494:	4a59      	ldr	r2, [pc, #356]	; (80085fc <I2C_ITError+0x254>)
 8008496:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	4618      	mov	r0, r3
 800849e:	f7fd fe6f 	bl	8006180 <HAL_DMA_Abort_IT>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d068      	beq.n	800857a <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b2:	2b40      	cmp	r3, #64	; 0x40
 80084b4:	d10b      	bne.n	80084ce <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	691a      	ldr	r2, [r3, #16]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	b2d2      	uxtb	r2, r2
 80084c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	1c5a      	adds	r2, r3, #1
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 0201 	bic.w	r2, r2, #1
 80084dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2220      	movs	r2, #32
 80084e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084f0:	4610      	mov	r0, r2
 80084f2:	4798      	blx	r3
 80084f4:	e041      	b.n	800857a <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b60      	cmp	r3, #96	; 0x60
 8008500:	d125      	bne.n	800854e <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2220      	movs	r2, #32
 8008506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851a:	2b40      	cmp	r3, #64	; 0x40
 800851c:	d10b      	bne.n	8008536 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	691a      	ldr	r2, [r3, #16]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	b2d2      	uxtb	r2, r2
 800852a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f022 0201 	bic.w	r2, r2, #1
 8008544:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7fe ff51 	bl	80073ee <HAL_I2C_AbortCpltCallback>
 800854c:	e015      	b.n	800857a <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	695b      	ldr	r3, [r3, #20]
 8008554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008558:	2b40      	cmp	r3, #64	; 0x40
 800855a:	d10b      	bne.n	8008574 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	691a      	ldr	r2, [r3, #16]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7fe ff30 	bl	80073da <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10e      	bne.n	80085a8 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008590:	2b00      	cmp	r3, #0
 8008592:	d109      	bne.n	80085a8 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800859a:	2b00      	cmp	r3, #0
 800859c:	d104      	bne.n	80085a8 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d007      	beq.n	80085b8 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085b6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085be:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d113      	bne.n	80085f4 <I2C_ITError+0x24c>
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	2b28      	cmp	r3, #40	; 0x28
 80085d0:	d110      	bne.n	80085f4 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a0a      	ldr	r2, [pc, #40]	; (8008600 <I2C_ITError+0x258>)
 80085d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2220      	movs	r2, #32
 80085e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7fe fed5 	bl	800739e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085f4:	bf00      	nop
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	08008709 	.word	0x08008709
 8008600:	ffff0000 	.word	0xffff0000

08008604 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b088      	sub	sp, #32
 8008608:	af02      	add	r7, sp, #8
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	607a      	str	r2, [r7, #4]
 800860e:	603b      	str	r3, [r7, #0]
 8008610:	460b      	mov	r3, r1
 8008612:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008618:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2b08      	cmp	r3, #8
 800861e:	d006      	beq.n	800862e <I2C_MasterRequestWrite+0x2a>
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d003      	beq.n	800862e <I2C_MasterRequestWrite+0x2a>
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800862c:	d108      	bne.n	8008640 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	e00b      	b.n	8008658 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008644:	2b12      	cmp	r3, #18
 8008646:	d107      	bne.n	8008658 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008656:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 f8ce 	bl	8008806 <I2C_WaitOnFlagUntilTimeout>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00c      	beq.n	800868a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008684:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e035      	b.n	80086f6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008692:	d108      	bne.n	80086a6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008694:	897b      	ldrh	r3, [r7, #10]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	461a      	mov	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80086a2:	611a      	str	r2, [r3, #16]
 80086a4:	e01b      	b.n	80086de <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80086a6:	897b      	ldrh	r3, [r7, #10]
 80086a8:	11db      	asrs	r3, r3, #7
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	f003 0306 	and.w	r3, r3, #6
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	f063 030f 	orn	r3, r3, #15
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	490f      	ldr	r1, [pc, #60]	; (8008700 <I2C_MasterRequestWrite+0xfc>)
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 f8f5 	bl	80088b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e010      	b.n	80086f6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80086d4:	897b      	ldrh	r3, [r7, #10]
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	4908      	ldr	r1, [pc, #32]	; (8008704 <I2C_MasterRequestWrite+0x100>)
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 f8e5 	bl	80088b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e000      	b.n	80086f6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	00010008 	.word	0x00010008
 8008704:	00010002 	.word	0x00010002

08008708 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008714:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800871c:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872a:	2200      	movs	r2, #0
 800872c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873a:	2200      	movs	r2, #0
 800873c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800874c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008760:	2200      	movs	r2, #0
 8008762:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008770:	2200      	movs	r2, #0
 8008772:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f022 0201 	bic.w	r2, r2, #1
 8008782:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b60      	cmp	r3, #96	; 0x60
 800878e:	d10e      	bne.n	80087ae <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f7fe fe21 	bl	80073ee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087ac:	e027      	b.n	80087fe <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80087ae:	7afb      	ldrb	r3, [r7, #11]
 80087b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80087b4:	2b28      	cmp	r3, #40	; 0x28
 80087b6:	d117      	bne.n	80087e8 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f042 0201 	orr.w	r2, r2, #1
 80087c6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2228      	movs	r2, #40	; 0x28
 80087e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80087e6:	e007      	b.n	80087f8 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2220      	movs	r2, #32
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f7fe fdee 	bl	80073da <HAL_I2C_ErrorCallback>
}
 80087fe:	bf00      	nop
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	603b      	str	r3, [r7, #0]
 8008812:	4613      	mov	r3, r2
 8008814:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008816:	e025      	b.n	8008864 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881e:	d021      	beq.n	8008864 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008820:	f7fc fbd2 	bl	8004fc8 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	429a      	cmp	r2, r3
 800882e:	d302      	bcc.n	8008836 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d116      	bne.n	8008864 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2220      	movs	r2, #32
 8008840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008850:	f043 0220 	orr.w	r2, r3, #32
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e023      	b.n	80088ac <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	0c1b      	lsrs	r3, r3, #16
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b01      	cmp	r3, #1
 800886c:	d10d      	bne.n	800888a <I2C_WaitOnFlagUntilTimeout+0x84>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	43da      	mvns	r2, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	4013      	ands	r3, r2
 800887a:	b29b      	uxth	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	bf0c      	ite	eq
 8008880:	2301      	moveq	r3, #1
 8008882:	2300      	movne	r3, #0
 8008884:	b2db      	uxtb	r3, r3
 8008886:	461a      	mov	r2, r3
 8008888:	e00c      	b.n	80088a4 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	43da      	mvns	r2, r3
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	4013      	ands	r3, r2
 8008896:	b29b      	uxth	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	bf0c      	ite	eq
 800889c:	2301      	moveq	r3, #1
 800889e:	2300      	movne	r3, #0
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	461a      	mov	r2, r3
 80088a4:	79fb      	ldrb	r3, [r7, #7]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d0b6      	beq.n	8008818 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
 80088c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088c2:	e051      	b.n	8008968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088d2:	d123      	bne.n	800891c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2220      	movs	r2, #32
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008908:	f043 0204 	orr.w	r2, r3, #4
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e046      	b.n	80089aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008922:	d021      	beq.n	8008968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008924:	f7fc fb50 	bl	8004fc8 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	429a      	cmp	r2, r3
 8008932:	d302      	bcc.n	800893a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d116      	bne.n	8008968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2220      	movs	r2, #32
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008954:	f043 0220 	orr.w	r2, r3, #32
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e020      	b.n	80089aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	0c1b      	lsrs	r3, r3, #16
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b01      	cmp	r3, #1
 8008970:	d10c      	bne.n	800898c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	695b      	ldr	r3, [r3, #20]
 8008978:	43da      	mvns	r2, r3
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4013      	ands	r3, r2
 800897e:	b29b      	uxth	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	bf14      	ite	ne
 8008984:	2301      	movne	r3, #1
 8008986:	2300      	moveq	r3, #0
 8008988:	b2db      	uxtb	r3, r3
 800898a:	e00b      	b.n	80089a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	43da      	mvns	r2, r3
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	4013      	ands	r3, r2
 8008998:	b29b      	uxth	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	bf14      	ite	ne
 800899e:	2301      	movne	r3, #1
 80089a0:	2300      	moveq	r3, #0
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d18d      	bne.n	80088c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b084      	sub	sp, #16
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	60f8      	str	r0, [r7, #12]
 80089ba:	60b9      	str	r1, [r7, #8]
 80089bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089be:	e02d      	b.n	8008a1c <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 f878 	bl	8008ab6 <I2C_IsAcknowledgeFailed>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e02d      	b.n	8008a2c <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d6:	d021      	beq.n	8008a1c <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089d8:	f7fc faf6 	bl	8004fc8 <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d302      	bcc.n	80089ee <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d116      	bne.n	8008a1c <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2220      	movs	r2, #32
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a08:	f043 0220 	orr.w	r2, r3, #32
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e007      	b.n	8008a2c <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a26:	2b80      	cmp	r3, #128	; 0x80
 8008a28:	d1ca      	bne.n	80089c0 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a40:	e02d      	b.n	8008a9e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f000 f837 	bl	8008ab6 <I2C_IsAcknowledgeFailed>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e02d      	b.n	8008aae <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a58:	d021      	beq.n	8008a9e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a5a:	f7fc fab5 	bl	8004fc8 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d302      	bcc.n	8008a70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d116      	bne.n	8008a9e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2220      	movs	r2, #32
 8008a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8a:	f043 0220 	orr.w	r2, r3, #32
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e007      	b.n	8008aae <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	f003 0304 	and.w	r3, r3, #4
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d1ca      	bne.n	8008a42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008acc:	d11b      	bne.n	8008b06 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ad6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	f043 0204 	orr.w	r2, r3, #4
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e000      	b.n	8008b08 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008b24:	d103      	bne.n	8008b2e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b2c:	e007      	b.n	8008b3e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b32:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008b36:	d102      	bne.n	8008b3e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2208      	movs	r2, #8
 8008b3c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008b3e:	bf00      	nop
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
	...

08008b4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e25b      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d075      	beq.n	8008c56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b6a:	4ba3      	ldr	r3, [pc, #652]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f003 030c 	and.w	r3, r3, #12
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d00c      	beq.n	8008b90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b76:	4ba0      	ldr	r3, [pc, #640]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b7e:	2b08      	cmp	r3, #8
 8008b80:	d112      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b82:	4b9d      	ldr	r3, [pc, #628]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b8e:	d10b      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b90:	4b99      	ldr	r3, [pc, #612]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d05b      	beq.n	8008c54 <HAL_RCC_OscConfig+0x108>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d157      	bne.n	8008c54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e236      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bb0:	d106      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x74>
 8008bb2:	4b91      	ldr	r3, [pc, #580]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a90      	ldr	r2, [pc, #576]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bbc:	6013      	str	r3, [r2, #0]
 8008bbe:	e01d      	b.n	8008bfc <HAL_RCC_OscConfig+0xb0>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bc8:	d10c      	bne.n	8008be4 <HAL_RCC_OscConfig+0x98>
 8008bca:	4b8b      	ldr	r3, [pc, #556]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a8a      	ldr	r2, [pc, #552]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	4b88      	ldr	r3, [pc, #544]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a87      	ldr	r2, [pc, #540]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008be0:	6013      	str	r3, [r2, #0]
 8008be2:	e00b      	b.n	8008bfc <HAL_RCC_OscConfig+0xb0>
 8008be4:	4b84      	ldr	r3, [pc, #528]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a83      	ldr	r2, [pc, #524]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	4b81      	ldr	r3, [pc, #516]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a80      	ldr	r2, [pc, #512]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d013      	beq.n	8008c2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c04:	f7fc f9e0 	bl	8004fc8 <HAL_GetTick>
 8008c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c0a:	e008      	b.n	8008c1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c0c:	f7fc f9dc 	bl	8004fc8 <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	2b64      	cmp	r3, #100	; 0x64
 8008c18:	d901      	bls.n	8008c1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e1fb      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c1e:	4b76      	ldr	r3, [pc, #472]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d0f0      	beq.n	8008c0c <HAL_RCC_OscConfig+0xc0>
 8008c2a:	e014      	b.n	8008c56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c2c:	f7fc f9cc 	bl	8004fc8 <HAL_GetTick>
 8008c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c32:	e008      	b.n	8008c46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c34:	f7fc f9c8 	bl	8004fc8 <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	2b64      	cmp	r3, #100	; 0x64
 8008c40:	d901      	bls.n	8008c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e1e7      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c46:	4b6c      	ldr	r3, [pc, #432]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1f0      	bne.n	8008c34 <HAL_RCC_OscConfig+0xe8>
 8008c52:	e000      	b.n	8008c56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0302 	and.w	r3, r3, #2
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d063      	beq.n	8008d2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c62:	4b65      	ldr	r3, [pc, #404]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 030c 	and.w	r3, r3, #12
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00b      	beq.n	8008c86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c6e:	4b62      	ldr	r3, [pc, #392]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d11c      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c7a:	4b5f      	ldr	r3, [pc, #380]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d116      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c86:	4b5c      	ldr	r3, [pc, #368]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 0302 	and.w	r3, r3, #2
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d005      	beq.n	8008c9e <HAL_RCC_OscConfig+0x152>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d001      	beq.n	8008c9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e1bb      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c9e:	4b56      	ldr	r3, [pc, #344]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	4952      	ldr	r1, [pc, #328]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cb2:	e03a      	b.n	8008d2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d020      	beq.n	8008cfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cbc:	4b4f      	ldr	r3, [pc, #316]	; (8008dfc <HAL_RCC_OscConfig+0x2b0>)
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc2:	f7fc f981 	bl	8004fc8 <HAL_GetTick>
 8008cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cc8:	e008      	b.n	8008cdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cca:	f7fc f97d 	bl	8004fc8 <HAL_GetTick>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d901      	bls.n	8008cdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e19c      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cdc:	4b46      	ldr	r3, [pc, #280]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d0f0      	beq.n	8008cca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ce8:	4b43      	ldr	r3, [pc, #268]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	00db      	lsls	r3, r3, #3
 8008cf6:	4940      	ldr	r1, [pc, #256]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	600b      	str	r3, [r1, #0]
 8008cfc:	e015      	b.n	8008d2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cfe:	4b3f      	ldr	r3, [pc, #252]	; (8008dfc <HAL_RCC_OscConfig+0x2b0>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d04:	f7fc f960 	bl	8004fc8 <HAL_GetTick>
 8008d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d0a:	e008      	b.n	8008d1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d0c:	f7fc f95c 	bl	8004fc8 <HAL_GetTick>
 8008d10:	4602      	mov	r2, r0
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d901      	bls.n	8008d1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e17b      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d1e:	4b36      	ldr	r3, [pc, #216]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0302 	and.w	r3, r3, #2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1f0      	bne.n	8008d0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0308 	and.w	r3, r3, #8
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d030      	beq.n	8008d98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d016      	beq.n	8008d6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d3e:	4b30      	ldr	r3, [pc, #192]	; (8008e00 <HAL_RCC_OscConfig+0x2b4>)
 8008d40:	2201      	movs	r2, #1
 8008d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d44:	f7fc f940 	bl	8004fc8 <HAL_GetTick>
 8008d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d4a:	e008      	b.n	8008d5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d4c:	f7fc f93c 	bl	8004fc8 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e15b      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d5e:	4b26      	ldr	r3, [pc, #152]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0f0      	beq.n	8008d4c <HAL_RCC_OscConfig+0x200>
 8008d6a:	e015      	b.n	8008d98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d6c:	4b24      	ldr	r3, [pc, #144]	; (8008e00 <HAL_RCC_OscConfig+0x2b4>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d72:	f7fc f929 	bl	8004fc8 <HAL_GetTick>
 8008d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d78:	e008      	b.n	8008d8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d7a:	f7fc f925 	bl	8004fc8 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d901      	bls.n	8008d8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e144      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d8c:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d90:	f003 0302 	and.w	r3, r3, #2
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1f0      	bne.n	8008d7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0304 	and.w	r3, r3, #4
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 80a0 	beq.w	8008ee6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008da6:	2300      	movs	r3, #0
 8008da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008daa:	4b13      	ldr	r3, [pc, #76]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10f      	bne.n	8008dd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008db6:	2300      	movs	r3, #0
 8008db8:	60bb      	str	r3, [r7, #8]
 8008dba:	4b0f      	ldr	r3, [pc, #60]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbe:	4a0e      	ldr	r2, [pc, #56]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <HAL_RCC_OscConfig+0x2ac>)
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dce:	60bb      	str	r3, [r7, #8]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <HAL_RCC_OscConfig+0x2b8>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d121      	bne.n	8008e26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008de2:	4b08      	ldr	r3, [pc, #32]	; (8008e04 <HAL_RCC_OscConfig+0x2b8>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a07      	ldr	r2, [pc, #28]	; (8008e04 <HAL_RCC_OscConfig+0x2b8>)
 8008de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dee:	f7fc f8eb 	bl	8004fc8 <HAL_GetTick>
 8008df2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008df4:	e011      	b.n	8008e1a <HAL_RCC_OscConfig+0x2ce>
 8008df6:	bf00      	nop
 8008df8:	40023800 	.word	0x40023800
 8008dfc:	42470000 	.word	0x42470000
 8008e00:	42470e80 	.word	0x42470e80
 8008e04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e08:	f7fc f8de 	bl	8004fc8 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d901      	bls.n	8008e1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e0fd      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e1a:	4b81      	ldr	r3, [pc, #516]	; (8009020 <HAL_RCC_OscConfig+0x4d4>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0f0      	beq.n	8008e08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d106      	bne.n	8008e3c <HAL_RCC_OscConfig+0x2f0>
 8008e2e:	4b7d      	ldr	r3, [pc, #500]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e32:	4a7c      	ldr	r2, [pc, #496]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008e34:	f043 0301 	orr.w	r3, r3, #1
 8008e38:	6713      	str	r3, [r2, #112]	; 0x70
 8008e3a:	e01c      	b.n	8008e76 <HAL_RCC_OscConfig+0x32a>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	2b05      	cmp	r3, #5
 8008e42:	d10c      	bne.n	8008e5e <HAL_RCC_OscConfig+0x312>
 8008e44:	4b77      	ldr	r3, [pc, #476]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e48:	4a76      	ldr	r2, [pc, #472]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008e4a:	f043 0304 	orr.w	r3, r3, #4
 8008e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e50:	4b74      	ldr	r3, [pc, #464]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e54:	4a73      	ldr	r2, [pc, #460]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008e56:	f043 0301 	orr.w	r3, r3, #1
 8008e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8008e5c:	e00b      	b.n	8008e76 <HAL_RCC_OscConfig+0x32a>
 8008e5e:	4b71      	ldr	r3, [pc, #452]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e62:	4a70      	ldr	r2, [pc, #448]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008e64:	f023 0301 	bic.w	r3, r3, #1
 8008e68:	6713      	str	r3, [r2, #112]	; 0x70
 8008e6a:	4b6e      	ldr	r3, [pc, #440]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e6e:	4a6d      	ldr	r2, [pc, #436]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008e70:	f023 0304 	bic.w	r3, r3, #4
 8008e74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d015      	beq.n	8008eaa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e7e:	f7fc f8a3 	bl	8004fc8 <HAL_GetTick>
 8008e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e84:	e00a      	b.n	8008e9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e86:	f7fc f89f 	bl	8004fc8 <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d901      	bls.n	8008e9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e0bc      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e9c:	4b61      	ldr	r3, [pc, #388]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea0:	f003 0302 	and.w	r3, r3, #2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0ee      	beq.n	8008e86 <HAL_RCC_OscConfig+0x33a>
 8008ea8:	e014      	b.n	8008ed4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008eaa:	f7fc f88d 	bl	8004fc8 <HAL_GetTick>
 8008eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008eb0:	e00a      	b.n	8008ec8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008eb2:	f7fc f889 	bl	8004fc8 <HAL_GetTick>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d901      	bls.n	8008ec8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e0a6      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ec8:	4b56      	ldr	r3, [pc, #344]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ecc:	f003 0302 	and.w	r3, r3, #2
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1ee      	bne.n	8008eb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d105      	bne.n	8008ee6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008eda:	4b52      	ldr	r3, [pc, #328]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ede:	4a51      	ldr	r2, [pc, #324]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ee4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 8092 	beq.w	8009014 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ef0:	4b4c      	ldr	r3, [pc, #304]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f003 030c 	and.w	r3, r3, #12
 8008ef8:	2b08      	cmp	r3, #8
 8008efa:	d05c      	beq.n	8008fb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d141      	bne.n	8008f88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f04:	4b48      	ldr	r3, [pc, #288]	; (8009028 <HAL_RCC_OscConfig+0x4dc>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f0a:	f7fc f85d 	bl	8004fc8 <HAL_GetTick>
 8008f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f10:	e008      	b.n	8008f24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f12:	f7fc f859 	bl	8004fc8 <HAL_GetTick>
 8008f16:	4602      	mov	r2, r0
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d901      	bls.n	8008f24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e078      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f24:	4b3f      	ldr	r3, [pc, #252]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1f0      	bne.n	8008f12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	69da      	ldr	r2, [r3, #28]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a1b      	ldr	r3, [r3, #32]
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	019b      	lsls	r3, r3, #6
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f46:	085b      	lsrs	r3, r3, #1
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	041b      	lsls	r3, r3, #16
 8008f4c:	431a      	orrs	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	061b      	lsls	r3, r3, #24
 8008f54:	4933      	ldr	r1, [pc, #204]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f5a:	4b33      	ldr	r3, [pc, #204]	; (8009028 <HAL_RCC_OscConfig+0x4dc>)
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f60:	f7fc f832 	bl	8004fc8 <HAL_GetTick>
 8008f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f66:	e008      	b.n	8008f7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f68:	f7fc f82e 	bl	8004fc8 <HAL_GetTick>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d901      	bls.n	8008f7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e04d      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f7a:	4b2a      	ldr	r3, [pc, #168]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0f0      	beq.n	8008f68 <HAL_RCC_OscConfig+0x41c>
 8008f86:	e045      	b.n	8009014 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f88:	4b27      	ldr	r3, [pc, #156]	; (8009028 <HAL_RCC_OscConfig+0x4dc>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f8e:	f7fc f81b 	bl	8004fc8 <HAL_GetTick>
 8008f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f94:	e008      	b.n	8008fa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f96:	f7fc f817 	bl	8004fc8 <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d901      	bls.n	8008fa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e036      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fa8:	4b1e      	ldr	r3, [pc, #120]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1f0      	bne.n	8008f96 <HAL_RCC_OscConfig+0x44a>
 8008fb4:	e02e      	b.n	8009014 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d101      	bne.n	8008fc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e029      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fc2:	4b18      	ldr	r3, [pc, #96]	; (8009024 <HAL_RCC_OscConfig+0x4d8>)
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d11c      	bne.n	8009010 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d115      	bne.n	8009010 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008fea:	4013      	ands	r3, r2
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d10d      	bne.n	8009010 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d106      	bne.n	8009010 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800900c:	429a      	cmp	r2, r3
 800900e:	d001      	beq.n	8009014 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e000      	b.n	8009016 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	40007000 	.word	0x40007000
 8009024:	40023800 	.word	0x40023800
 8009028:	42470060 	.word	0x42470060

0800902c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d101      	bne.n	8009040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e0cc      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009040:	4b68      	ldr	r3, [pc, #416]	; (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 030f 	and.w	r3, r3, #15
 8009048:	683a      	ldr	r2, [r7, #0]
 800904a:	429a      	cmp	r2, r3
 800904c:	d90c      	bls.n	8009068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800904e:	4b65      	ldr	r3, [pc, #404]	; (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	b2d2      	uxtb	r2, r2
 8009054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009056:	4b63      	ldr	r3, [pc, #396]	; (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 030f 	and.w	r3, r3, #15
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	429a      	cmp	r2, r3
 8009062:	d001      	beq.n	8009068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e0b8      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0302 	and.w	r3, r3, #2
 8009070:	2b00      	cmp	r3, #0
 8009072:	d020      	beq.n	80090b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d005      	beq.n	800908c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009080:	4b59      	ldr	r3, [pc, #356]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	4a58      	ldr	r2, [pc, #352]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800908a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0308 	and.w	r3, r3, #8
 8009094:	2b00      	cmp	r3, #0
 8009096:	d005      	beq.n	80090a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009098:	4b53      	ldr	r3, [pc, #332]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	4a52      	ldr	r2, [pc, #328]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800909e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090a4:	4b50      	ldr	r3, [pc, #320]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	494d      	ldr	r1, [pc, #308]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d044      	beq.n	800914c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d107      	bne.n	80090da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ca:	4b47      	ldr	r3, [pc, #284]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d119      	bne.n	800910a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e07f      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d003      	beq.n	80090ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d107      	bne.n	80090fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090ea:	4b3f      	ldr	r3, [pc, #252]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d109      	bne.n	800910a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e06f      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090fa:	4b3b      	ldr	r3, [pc, #236]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0302 	and.w	r3, r3, #2
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e067      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800910a:	4b37      	ldr	r3, [pc, #220]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f023 0203 	bic.w	r2, r3, #3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	4934      	ldr	r1, [pc, #208]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009118:	4313      	orrs	r3, r2
 800911a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800911c:	f7fb ff54 	bl	8004fc8 <HAL_GetTick>
 8009120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009122:	e00a      	b.n	800913a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009124:	f7fb ff50 	bl	8004fc8 <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009132:	4293      	cmp	r3, r2
 8009134:	d901      	bls.n	800913a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e04f      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800913a:	4b2b      	ldr	r3, [pc, #172]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f003 020c 	and.w	r2, r3, #12
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	429a      	cmp	r2, r3
 800914a:	d1eb      	bne.n	8009124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800914c:	4b25      	ldr	r3, [pc, #148]	; (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 030f 	and.w	r3, r3, #15
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	d20c      	bcs.n	8009174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800915a:	4b22      	ldr	r3, [pc, #136]	; (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	b2d2      	uxtb	r2, r2
 8009160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009162:	4b20      	ldr	r3, [pc, #128]	; (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 030f 	and.w	r3, r3, #15
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	429a      	cmp	r2, r3
 800916e:	d001      	beq.n	8009174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e032      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d008      	beq.n	8009192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009180:	4b19      	ldr	r3, [pc, #100]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	4916      	ldr	r1, [pc, #88]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800918e:	4313      	orrs	r3, r2
 8009190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0308 	and.w	r3, r3, #8
 800919a:	2b00      	cmp	r3, #0
 800919c:	d009      	beq.n	80091b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800919e:	4b12      	ldr	r3, [pc, #72]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	490e      	ldr	r1, [pc, #56]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80091b2:	f000 f821 	bl	80091f8 <HAL_RCC_GetSysClockFreq>
 80091b6:	4601      	mov	r1, r0
 80091b8:	4b0b      	ldr	r3, [pc, #44]	; (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	091b      	lsrs	r3, r3, #4
 80091be:	f003 030f 	and.w	r3, r3, #15
 80091c2:	4a0a      	ldr	r2, [pc, #40]	; (80091ec <HAL_RCC_ClockConfig+0x1c0>)
 80091c4:	5cd3      	ldrb	r3, [r2, r3]
 80091c6:	fa21 f303 	lsr.w	r3, r1, r3
 80091ca:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <HAL_RCC_ClockConfig+0x1c4>)
 80091cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091ce:	4b09      	ldr	r3, [pc, #36]	; (80091f4 <HAL_RCC_ClockConfig+0x1c8>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fb feb4 	bl	8004f40 <HAL_InitTick>

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	40023c00 	.word	0x40023c00
 80091e8:	40023800 	.word	0x40023800
 80091ec:	0800b574 	.word	0x0800b574
 80091f0:	20000064 	.word	0x20000064
 80091f4:	20000068 	.word	0x20000068

080091f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	607b      	str	r3, [r7, #4]
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	2300      	movs	r3, #0
 8009208:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800920a:	2300      	movs	r3, #0
 800920c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800920e:	4b63      	ldr	r3, [pc, #396]	; (800939c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f003 030c 	and.w	r3, r3, #12
 8009216:	2b04      	cmp	r3, #4
 8009218:	d007      	beq.n	800922a <HAL_RCC_GetSysClockFreq+0x32>
 800921a:	2b08      	cmp	r3, #8
 800921c:	d008      	beq.n	8009230 <HAL_RCC_GetSysClockFreq+0x38>
 800921e:	2b00      	cmp	r3, #0
 8009220:	f040 80b4 	bne.w	800938c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009224:	4b5e      	ldr	r3, [pc, #376]	; (80093a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009226:	60bb      	str	r3, [r7, #8]
       break;
 8009228:	e0b3      	b.n	8009392 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800922a:	4b5e      	ldr	r3, [pc, #376]	; (80093a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800922c:	60bb      	str	r3, [r7, #8]
      break;
 800922e:	e0b0      	b.n	8009392 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009230:	4b5a      	ldr	r3, [pc, #360]	; (800939c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009238:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800923a:	4b58      	ldr	r3, [pc, #352]	; (800939c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d04a      	beq.n	80092dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009246:	4b55      	ldr	r3, [pc, #340]	; (800939c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	099b      	lsrs	r3, r3, #6
 800924c:	f04f 0400 	mov.w	r4, #0
 8009250:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009254:	f04f 0200 	mov.w	r2, #0
 8009258:	ea03 0501 	and.w	r5, r3, r1
 800925c:	ea04 0602 	and.w	r6, r4, r2
 8009260:	4629      	mov	r1, r5
 8009262:	4632      	mov	r2, r6
 8009264:	f04f 0300 	mov.w	r3, #0
 8009268:	f04f 0400 	mov.w	r4, #0
 800926c:	0154      	lsls	r4, r2, #5
 800926e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009272:	014b      	lsls	r3, r1, #5
 8009274:	4619      	mov	r1, r3
 8009276:	4622      	mov	r2, r4
 8009278:	1b49      	subs	r1, r1, r5
 800927a:	eb62 0206 	sbc.w	r2, r2, r6
 800927e:	f04f 0300 	mov.w	r3, #0
 8009282:	f04f 0400 	mov.w	r4, #0
 8009286:	0194      	lsls	r4, r2, #6
 8009288:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800928c:	018b      	lsls	r3, r1, #6
 800928e:	1a5b      	subs	r3, r3, r1
 8009290:	eb64 0402 	sbc.w	r4, r4, r2
 8009294:	f04f 0100 	mov.w	r1, #0
 8009298:	f04f 0200 	mov.w	r2, #0
 800929c:	00e2      	lsls	r2, r4, #3
 800929e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80092a2:	00d9      	lsls	r1, r3, #3
 80092a4:	460b      	mov	r3, r1
 80092a6:	4614      	mov	r4, r2
 80092a8:	195b      	adds	r3, r3, r5
 80092aa:	eb44 0406 	adc.w	r4, r4, r6
 80092ae:	f04f 0100 	mov.w	r1, #0
 80092b2:	f04f 0200 	mov.w	r2, #0
 80092b6:	0262      	lsls	r2, r4, #9
 80092b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80092bc:	0259      	lsls	r1, r3, #9
 80092be:	460b      	mov	r3, r1
 80092c0:	4614      	mov	r4, r2
 80092c2:	4618      	mov	r0, r3
 80092c4:	4621      	mov	r1, r4
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f04f 0400 	mov.w	r4, #0
 80092cc:	461a      	mov	r2, r3
 80092ce:	4623      	mov	r3, r4
 80092d0:	f7f7 fb70 	bl	80009b4 <__aeabi_uldivmod>
 80092d4:	4603      	mov	r3, r0
 80092d6:	460c      	mov	r4, r1
 80092d8:	60fb      	str	r3, [r7, #12]
 80092da:	e049      	b.n	8009370 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092dc:	4b2f      	ldr	r3, [pc, #188]	; (800939c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	099b      	lsrs	r3, r3, #6
 80092e2:	f04f 0400 	mov.w	r4, #0
 80092e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80092ea:	f04f 0200 	mov.w	r2, #0
 80092ee:	ea03 0501 	and.w	r5, r3, r1
 80092f2:	ea04 0602 	and.w	r6, r4, r2
 80092f6:	4629      	mov	r1, r5
 80092f8:	4632      	mov	r2, r6
 80092fa:	f04f 0300 	mov.w	r3, #0
 80092fe:	f04f 0400 	mov.w	r4, #0
 8009302:	0154      	lsls	r4, r2, #5
 8009304:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009308:	014b      	lsls	r3, r1, #5
 800930a:	4619      	mov	r1, r3
 800930c:	4622      	mov	r2, r4
 800930e:	1b49      	subs	r1, r1, r5
 8009310:	eb62 0206 	sbc.w	r2, r2, r6
 8009314:	f04f 0300 	mov.w	r3, #0
 8009318:	f04f 0400 	mov.w	r4, #0
 800931c:	0194      	lsls	r4, r2, #6
 800931e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009322:	018b      	lsls	r3, r1, #6
 8009324:	1a5b      	subs	r3, r3, r1
 8009326:	eb64 0402 	sbc.w	r4, r4, r2
 800932a:	f04f 0100 	mov.w	r1, #0
 800932e:	f04f 0200 	mov.w	r2, #0
 8009332:	00e2      	lsls	r2, r4, #3
 8009334:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009338:	00d9      	lsls	r1, r3, #3
 800933a:	460b      	mov	r3, r1
 800933c:	4614      	mov	r4, r2
 800933e:	195b      	adds	r3, r3, r5
 8009340:	eb44 0406 	adc.w	r4, r4, r6
 8009344:	f04f 0100 	mov.w	r1, #0
 8009348:	f04f 0200 	mov.w	r2, #0
 800934c:	02a2      	lsls	r2, r4, #10
 800934e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009352:	0299      	lsls	r1, r3, #10
 8009354:	460b      	mov	r3, r1
 8009356:	4614      	mov	r4, r2
 8009358:	4618      	mov	r0, r3
 800935a:	4621      	mov	r1, r4
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f04f 0400 	mov.w	r4, #0
 8009362:	461a      	mov	r2, r3
 8009364:	4623      	mov	r3, r4
 8009366:	f7f7 fb25 	bl	80009b4 <__aeabi_uldivmod>
 800936a:	4603      	mov	r3, r0
 800936c:	460c      	mov	r4, r1
 800936e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009370:	4b0a      	ldr	r3, [pc, #40]	; (800939c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	0c1b      	lsrs	r3, r3, #16
 8009376:	f003 0303 	and.w	r3, r3, #3
 800937a:	3301      	adds	r3, #1
 800937c:	005b      	lsls	r3, r3, #1
 800937e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	fbb2 f3f3 	udiv	r3, r2, r3
 8009388:	60bb      	str	r3, [r7, #8]
      break;
 800938a:	e002      	b.n	8009392 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800938c:	4b04      	ldr	r3, [pc, #16]	; (80093a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800938e:	60bb      	str	r3, [r7, #8]
      break;
 8009390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009392:	68bb      	ldr	r3, [r7, #8]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800939c:	40023800 	.word	0x40023800
 80093a0:	00f42400 	.word	0x00f42400
 80093a4:	007a1200 	.word	0x007a1200

080093a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093a8:	b480      	push	{r7}
 80093aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093ac:	4b03      	ldr	r3, [pc, #12]	; (80093bc <HAL_RCC_GetHCLKFreq+0x14>)
 80093ae:	681b      	ldr	r3, [r3, #0]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	20000064 	.word	0x20000064

080093c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80093c4:	f7ff fff0 	bl	80093a8 <HAL_RCC_GetHCLKFreq>
 80093c8:	4601      	mov	r1, r0
 80093ca:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	0a9b      	lsrs	r3, r3, #10
 80093d0:	f003 0307 	and.w	r3, r3, #7
 80093d4:	4a03      	ldr	r2, [pc, #12]	; (80093e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093d6:	5cd3      	ldrb	r3, [r2, r3]
 80093d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80093dc:	4618      	mov	r0, r3
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	40023800 	.word	0x40023800
 80093e4:	0800b584 	.word	0x0800b584

080093e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80093ec:	f7ff ffdc 	bl	80093a8 <HAL_RCC_GetHCLKFreq>
 80093f0:	4601      	mov	r1, r0
 80093f2:	4b05      	ldr	r3, [pc, #20]	; (8009408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	0b5b      	lsrs	r3, r3, #13
 80093f8:	f003 0307 	and.w	r3, r3, #7
 80093fc:	4a03      	ldr	r2, [pc, #12]	; (800940c <HAL_RCC_GetPCLK2Freq+0x24>)
 80093fe:	5cd3      	ldrb	r3, [r2, r3]
 8009400:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009404:	4618      	mov	r0, r3
 8009406:	bd80      	pop	{r7, pc}
 8009408:	40023800 	.word	0x40023800
 800940c:	0800b584 	.word	0x0800b584

08009410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e056      	b.n	80094d0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	d106      	bne.n	8009442 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f7fb fafb 	bl	8004a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2202      	movs	r2, #2
 8009446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009458:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	431a      	orrs	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	431a      	orrs	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	431a      	orrs	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	695b      	ldr	r3, [r3, #20]
 8009474:	431a      	orrs	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800947e:	431a      	orrs	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	431a      	orrs	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	ea42 0103 	orr.w	r1, r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	430a      	orrs	r2, r1
 8009498:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	0c1b      	lsrs	r3, r3, #16
 80094a0:	f003 0104 	and.w	r1, r3, #4
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	430a      	orrs	r2, r1
 80094ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	69da      	ldr	r2, [r3, #28]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b088      	sub	sp, #32
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	4613      	mov	r3, r2
 80094e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d101      	bne.n	80094fa <HAL_SPI_Transmit+0x22>
 80094f6:	2302      	movs	r3, #2
 80094f8:	e11e      	b.n	8009738 <HAL_SPI_Transmit+0x260>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009502:	f7fb fd61 	bl	8004fc8 <HAL_GetTick>
 8009506:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009508:	88fb      	ldrh	r3, [r7, #6]
 800950a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b01      	cmp	r3, #1
 8009516:	d002      	beq.n	800951e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009518:	2302      	movs	r3, #2
 800951a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800951c:	e103      	b.n	8009726 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <HAL_SPI_Transmit+0x52>
 8009524:	88fb      	ldrh	r3, [r7, #6]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800952e:	e0fa      	b.n	8009726 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2203      	movs	r2, #3
 8009534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	88fa      	ldrh	r2, [r7, #6]
 8009548:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	88fa      	ldrh	r2, [r7, #6]
 800954e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009576:	d107      	bne.n	8009588 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009586:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009592:	2b40      	cmp	r3, #64	; 0x40
 8009594:	d007      	beq.n	80095a6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095ae:	d14b      	bne.n	8009648 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <HAL_SPI_Transmit+0xe6>
 80095b8:	8afb      	ldrh	r3, [r7, #22]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d13e      	bne.n	800963c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c2:	881a      	ldrh	r2, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ce:	1c9a      	adds	r2, r3, #2
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095d8:	b29b      	uxth	r3, r3
 80095da:	3b01      	subs	r3, #1
 80095dc:	b29a      	uxth	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80095e2:	e02b      	b.n	800963c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f003 0302 	and.w	r3, r3, #2
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d112      	bne.n	8009618 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f6:	881a      	ldrh	r2, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009602:	1c9a      	adds	r2, r3, #2
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800960c:	b29b      	uxth	r3, r3
 800960e:	3b01      	subs	r3, #1
 8009610:	b29a      	uxth	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	86da      	strh	r2, [r3, #54]	; 0x36
 8009616:	e011      	b.n	800963c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009618:	f7fb fcd6 	bl	8004fc8 <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	429a      	cmp	r2, r3
 8009626:	d803      	bhi.n	8009630 <HAL_SPI_Transmit+0x158>
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962e:	d102      	bne.n	8009636 <HAL_SPI_Transmit+0x15e>
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d102      	bne.n	800963c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	77fb      	strb	r3, [r7, #31]
          goto error;
 800963a:	e074      	b.n	8009726 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009640:	b29b      	uxth	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1ce      	bne.n	80095e4 <HAL_SPI_Transmit+0x10c>
 8009646:	e04c      	b.n	80096e2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <HAL_SPI_Transmit+0x17e>
 8009650:	8afb      	ldrh	r3, [r7, #22]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d140      	bne.n	80096d8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	330c      	adds	r3, #12
 8009660:	7812      	ldrb	r2, [r2, #0]
 8009662:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009668:	1c5a      	adds	r2, r3, #1
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009672:	b29b      	uxth	r3, r3
 8009674:	3b01      	subs	r3, #1
 8009676:	b29a      	uxth	r2, r3
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800967c:	e02c      	b.n	80096d8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f003 0302 	and.w	r3, r3, #2
 8009688:	2b02      	cmp	r3, #2
 800968a:	d113      	bne.n	80096b4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	330c      	adds	r3, #12
 8009696:	7812      	ldrb	r2, [r2, #0]
 8009698:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	3b01      	subs	r3, #1
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80096b2:	e011      	b.n	80096d8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096b4:	f7fb fc88 	bl	8004fc8 <HAL_GetTick>
 80096b8:	4602      	mov	r2, r0
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d803      	bhi.n	80096cc <HAL_SPI_Transmit+0x1f4>
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ca:	d102      	bne.n	80096d2 <HAL_SPI_Transmit+0x1fa>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d102      	bne.n	80096d8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096d6:	e026      	b.n	8009726 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096dc:	b29b      	uxth	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1cd      	bne.n	800967e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f000 fa44 	bl	8009b74 <SPI_EndRxTxTransaction>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d002      	beq.n	80096f8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2220      	movs	r2, #32
 80096f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10a      	bne.n	8009716 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009700:	2300      	movs	r3, #0
 8009702:	613b      	str	r3, [r7, #16]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	613b      	str	r3, [r7, #16]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	613b      	str	r3, [r7, #16]
 8009714:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971a:	2b00      	cmp	r3, #0
 800971c:	d002      	beq.n	8009724 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	77fb      	strb	r3, [r7, #31]
 8009722:	e000      	b.n	8009726 <HAL_SPI_Transmit+0x24e>
  }

error:
 8009724:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2201      	movs	r2, #1
 800972a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009736:	7ffb      	ldrb	r3, [r7, #31]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3720      	adds	r7, #32
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08c      	sub	sp, #48	; 0x30
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
 800974c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800974e:	2301      	movs	r3, #1
 8009750:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800975e:	2b01      	cmp	r3, #1
 8009760:	d101      	bne.n	8009766 <HAL_SPI_TransmitReceive+0x26>
 8009762:	2302      	movs	r3, #2
 8009764:	e18a      	b.n	8009a7c <HAL_SPI_TransmitReceive+0x33c>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800976e:	f7fb fc2b 	bl	8004fc8 <HAL_GetTick>
 8009772:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800977a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009784:	887b      	ldrh	r3, [r7, #2]
 8009786:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009788:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800978c:	2b01      	cmp	r3, #1
 800978e:	d00f      	beq.n	80097b0 <HAL_SPI_TransmitReceive+0x70>
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009796:	d107      	bne.n	80097a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d103      	bne.n	80097a8 <HAL_SPI_TransmitReceive+0x68>
 80097a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097a4:	2b04      	cmp	r3, #4
 80097a6:	d003      	beq.n	80097b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80097a8:	2302      	movs	r3, #2
 80097aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80097ae:	e15b      	b.n	8009a68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d005      	beq.n	80097c2 <HAL_SPI_TransmitReceive+0x82>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d002      	beq.n	80097c2 <HAL_SPI_TransmitReceive+0x82>
 80097bc:	887b      	ldrh	r3, [r7, #2]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d103      	bne.n	80097ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80097c8:	e14e      	b.n	8009a68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	d003      	beq.n	80097de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2205      	movs	r2, #5
 80097da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	887a      	ldrh	r2, [r7, #2]
 80097ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	887a      	ldrh	r2, [r7, #2]
 80097f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	887a      	ldrh	r2, [r7, #2]
 8009800:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	887a      	ldrh	r2, [r7, #2]
 8009806:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800981e:	2b40      	cmp	r3, #64	; 0x40
 8009820:	d007      	beq.n	8009832 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009830:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800983a:	d178      	bne.n	800992e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d002      	beq.n	800984a <HAL_SPI_TransmitReceive+0x10a>
 8009844:	8b7b      	ldrh	r3, [r7, #26]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d166      	bne.n	8009918 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984e:	881a      	ldrh	r2, [r3, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985a:	1c9a      	adds	r2, r3, #2
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009864:	b29b      	uxth	r3, r3
 8009866:	3b01      	subs	r3, #1
 8009868:	b29a      	uxth	r2, r3
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800986e:	e053      	b.n	8009918 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f003 0302 	and.w	r3, r3, #2
 800987a:	2b02      	cmp	r3, #2
 800987c:	d11b      	bne.n	80098b6 <HAL_SPI_TransmitReceive+0x176>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009882:	b29b      	uxth	r3, r3
 8009884:	2b00      	cmp	r3, #0
 8009886:	d016      	beq.n	80098b6 <HAL_SPI_TransmitReceive+0x176>
 8009888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988a:	2b01      	cmp	r3, #1
 800988c:	d113      	bne.n	80098b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009892:	881a      	ldrh	r2, [r3, #0]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989e:	1c9a      	adds	r2, r3, #2
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	3b01      	subs	r3, #1
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098b2:	2300      	movs	r3, #0
 80098b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d119      	bne.n	80098f8 <HAL_SPI_TransmitReceive+0x1b8>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d014      	beq.n	80098f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68da      	ldr	r2, [r3, #12]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d8:	b292      	uxth	r2, r2
 80098da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e0:	1c9a      	adds	r2, r3, #2
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	3b01      	subs	r3, #1
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80098f4:	2301      	movs	r3, #1
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80098f8:	f7fb fb66 	bl	8004fc8 <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009904:	429a      	cmp	r2, r3
 8009906:	d807      	bhi.n	8009918 <HAL_SPI_TransmitReceive+0x1d8>
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990e:	d003      	beq.n	8009918 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009916:	e0a7      	b.n	8009a68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800991c:	b29b      	uxth	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1a6      	bne.n	8009870 <HAL_SPI_TransmitReceive+0x130>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009926:	b29b      	uxth	r3, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1a1      	bne.n	8009870 <HAL_SPI_TransmitReceive+0x130>
 800992c:	e07c      	b.n	8009a28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d002      	beq.n	800993c <HAL_SPI_TransmitReceive+0x1fc>
 8009936:	8b7b      	ldrh	r3, [r7, #26]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d16b      	bne.n	8009a14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	330c      	adds	r3, #12
 8009946:	7812      	ldrb	r2, [r2, #0]
 8009948:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009958:	b29b      	uxth	r3, r3
 800995a:	3b01      	subs	r3, #1
 800995c:	b29a      	uxth	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009962:	e057      	b.n	8009a14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	2b02      	cmp	r3, #2
 8009970:	d11c      	bne.n	80099ac <HAL_SPI_TransmitReceive+0x26c>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009976:	b29b      	uxth	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d017      	beq.n	80099ac <HAL_SPI_TransmitReceive+0x26c>
 800997c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997e:	2b01      	cmp	r3, #1
 8009980:	d114      	bne.n	80099ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	330c      	adds	r3, #12
 800998c:	7812      	ldrb	r2, [r2, #0]
 800998e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009994:	1c5a      	adds	r2, r3, #1
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800999e:	b29b      	uxth	r3, r3
 80099a0:	3b01      	subs	r3, #1
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80099a8:	2300      	movs	r3, #0
 80099aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d119      	bne.n	80099ee <HAL_SPI_TransmitReceive+0x2ae>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099be:	b29b      	uxth	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d014      	beq.n	80099ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68da      	ldr	r2, [r3, #12]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ce:	b2d2      	uxtb	r2, r2
 80099d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d6:	1c5a      	adds	r2, r3, #1
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	3b01      	subs	r3, #1
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80099ea:	2301      	movs	r3, #1
 80099ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80099ee:	f7fb faeb 	bl	8004fc8 <HAL_GetTick>
 80099f2:	4602      	mov	r2, r0
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d803      	bhi.n	8009a06 <HAL_SPI_TransmitReceive+0x2c6>
 80099fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a04:	d102      	bne.n	8009a0c <HAL_SPI_TransmitReceive+0x2cc>
 8009a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d103      	bne.n	8009a14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009a12:	e029      	b.n	8009a68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1a2      	bne.n	8009964 <HAL_SPI_TransmitReceive+0x224>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d19d      	bne.n	8009964 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 f8a1 	bl	8009b74 <SPI_EndRxTxTransaction>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d006      	beq.n	8009a46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2220      	movs	r2, #32
 8009a42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009a44:	e010      	b.n	8009a68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10b      	bne.n	8009a66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a4e:	2300      	movs	r3, #0
 8009a50:	617b      	str	r3, [r7, #20]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	617b      	str	r3, [r7, #20]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	617b      	str	r3, [r7, #20]
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	e000      	b.n	8009a68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009a66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009a78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3730      	adds	r7, #48	; 0x30
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a92:	b2db      	uxtb	r3, r3
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	603b      	str	r3, [r7, #0]
 8009aac:	4613      	mov	r3, r2
 8009aae:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ab0:	e04c      	b.n	8009b4c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab8:	d048      	beq.n	8009b4c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009aba:	f7fb fa85 	bl	8004fc8 <HAL_GetTick>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d902      	bls.n	8009ad0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d13d      	bne.n	8009b4c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ade:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ae8:	d111      	bne.n	8009b0e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009af2:	d004      	beq.n	8009afe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009afc:	d107      	bne.n	8009b0e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b16:	d10f      	bne.n	8009b38 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	e00f      	b.n	8009b6c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	689a      	ldr	r2, [r3, #8]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	4013      	ands	r3, r2
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	bf0c      	ite	eq
 8009b5c:	2301      	moveq	r3, #1
 8009b5e:	2300      	movne	r3, #0
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	461a      	mov	r2, r3
 8009b64:	79fb      	ldrb	r3, [r7, #7]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d1a3      	bne.n	8009ab2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b088      	sub	sp, #32
 8009b78:	af02      	add	r7, sp, #8
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b80:	4b1b      	ldr	r3, [pc, #108]	; (8009bf0 <SPI_EndRxTxTransaction+0x7c>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a1b      	ldr	r2, [pc, #108]	; (8009bf4 <SPI_EndRxTxTransaction+0x80>)
 8009b86:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8a:	0d5b      	lsrs	r3, r3, #21
 8009b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b90:	fb02 f303 	mul.w	r3, r2, r3
 8009b94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b9e:	d112      	bne.n	8009bc6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2180      	movs	r1, #128	; 0x80
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f7ff ff78 	bl	8009aa0 <SPI_WaitFlagStateUntilTimeout>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d016      	beq.n	8009be4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bba:	f043 0220 	orr.w	r2, r3, #32
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e00f      	b.n	8009be6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00a      	beq.n	8009be2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bdc:	2b80      	cmp	r3, #128	; 0x80
 8009bde:	d0f2      	beq.n	8009bc6 <SPI_EndRxTxTransaction+0x52>
 8009be0:	e000      	b.n	8009be4 <SPI_EndRxTxTransaction+0x70>
        break;
 8009be2:	bf00      	nop
  }

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	20000064 	.word	0x20000064
 8009bf4:	165e9f81 	.word	0x165e9f81

08009bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e01d      	b.n	8009c46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d106      	bne.n	8009c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7fa ff52 	bl	8004ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2202      	movs	r2, #2
 8009c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3304      	adds	r3, #4
 8009c34:	4619      	mov	r1, r3
 8009c36:	4610      	mov	r0, r2
 8009c38:	f000 fa40 	bl	800a0bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b085      	sub	sp, #20
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68da      	ldr	r2, [r3, #12]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f042 0201 	orr.w	r2, r2, #1
 8009c64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f003 0307 	and.w	r3, r3, #7
 8009c70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2b06      	cmp	r3, #6
 8009c76:	d007      	beq.n	8009c88 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0201 	orr.w	r2, r2, #1
 8009c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68da      	ldr	r2, [r3, #12]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f022 0201 	bic.w	r2, r2, #1
 8009cac:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	6a1a      	ldr	r2, [r3, #32]
 8009cb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8009cb8:	4013      	ands	r3, r2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10f      	bne.n	8009cde <HAL_TIM_Base_Stop_IT+0x48>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6a1a      	ldr	r2, [r3, #32]
 8009cc4:	f240 4344 	movw	r3, #1092	; 0x444
 8009cc8:	4013      	ands	r3, r2
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d107      	bne.n	8009cde <HAL_TIM_Base_Stop_IT+0x48>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f022 0201 	bic.w	r2, r2, #1
 8009cdc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	f003 0302 	and.w	r3, r3, #2
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d122      	bne.n	8009d48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f003 0302 	and.w	r3, r3, #2
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d11b      	bne.n	8009d48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f06f 0202 	mvn.w	r2, #2
 8009d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	f003 0303 	and.w	r3, r3, #3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f9a5 	bl	800a07e <HAL_TIM_IC_CaptureCallback>
 8009d34:	e005      	b.n	8009d42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f997 	bl	800a06a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f9a8 	bl	800a092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	f003 0304 	and.w	r3, r3, #4
 8009d52:	2b04      	cmp	r3, #4
 8009d54:	d122      	bne.n	8009d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	f003 0304 	and.w	r3, r3, #4
 8009d60:	2b04      	cmp	r3, #4
 8009d62:	d11b      	bne.n	8009d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f06f 0204 	mvn.w	r2, #4
 8009d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2202      	movs	r2, #2
 8009d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f97b 	bl	800a07e <HAL_TIM_IC_CaptureCallback>
 8009d88:	e005      	b.n	8009d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f96d 	bl	800a06a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f97e 	bl	800a092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	f003 0308 	and.w	r3, r3, #8
 8009da6:	2b08      	cmp	r3, #8
 8009da8:	d122      	bne.n	8009df0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	f003 0308 	and.w	r3, r3, #8
 8009db4:	2b08      	cmp	r3, #8
 8009db6:	d11b      	bne.n	8009df0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f06f 0208 	mvn.w	r2, #8
 8009dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2204      	movs	r2, #4
 8009dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	69db      	ldr	r3, [r3, #28]
 8009dce:	f003 0303 	and.w	r3, r3, #3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f951 	bl	800a07e <HAL_TIM_IC_CaptureCallback>
 8009ddc:	e005      	b.n	8009dea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f943 	bl	800a06a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f954 	bl	800a092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	f003 0310 	and.w	r3, r3, #16
 8009dfa:	2b10      	cmp	r3, #16
 8009dfc:	d122      	bne.n	8009e44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f003 0310 	and.w	r3, r3, #16
 8009e08:	2b10      	cmp	r3, #16
 8009e0a:	d11b      	bne.n	8009e44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f06f 0210 	mvn.w	r2, #16
 8009e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2208      	movs	r2, #8
 8009e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d003      	beq.n	8009e32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f927 	bl	800a07e <HAL_TIM_IC_CaptureCallback>
 8009e30:	e005      	b.n	8009e3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 f919 	bl	800a06a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f92a 	bl	800a092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d10e      	bne.n	8009e70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	f003 0301 	and.w	r3, r3, #1
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d107      	bne.n	8009e70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f06f 0201 	mvn.w	r2, #1
 8009e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7fa f850 	bl	8003f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e7a:	2b80      	cmp	r3, #128	; 0x80
 8009e7c:	d10e      	bne.n	8009e9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e88:	2b80      	cmp	r3, #128	; 0x80
 8009e8a:	d107      	bne.n	8009e9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fad0 	bl	800a43c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea6:	2b40      	cmp	r3, #64	; 0x40
 8009ea8:	d10e      	bne.n	8009ec8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb4:	2b40      	cmp	r3, #64	; 0x40
 8009eb6:	d107      	bne.n	8009ec8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f8ef 	bl	800a0a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	f003 0320 	and.w	r3, r3, #32
 8009ed2:	2b20      	cmp	r3, #32
 8009ed4:	d10e      	bne.n	8009ef4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	f003 0320 	and.w	r3, r3, #32
 8009ee0:	2b20      	cmp	r3, #32
 8009ee2:	d107      	bne.n	8009ef4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f06f 0220 	mvn.w	r2, #32
 8009eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fa9a 	bl	800a428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ef4:	bf00      	nop
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d101      	bne.n	8009f14 <HAL_TIM_ConfigClockSource+0x18>
 8009f10:	2302      	movs	r3, #2
 8009f12:	e0a6      	b.n	800a062 <HAL_TIM_ConfigClockSource+0x166>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2202      	movs	r2, #2
 8009f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b40      	cmp	r3, #64	; 0x40
 8009f4a:	d067      	beq.n	800a01c <HAL_TIM_ConfigClockSource+0x120>
 8009f4c:	2b40      	cmp	r3, #64	; 0x40
 8009f4e:	d80b      	bhi.n	8009f68 <HAL_TIM_ConfigClockSource+0x6c>
 8009f50:	2b10      	cmp	r3, #16
 8009f52:	d073      	beq.n	800a03c <HAL_TIM_ConfigClockSource+0x140>
 8009f54:	2b10      	cmp	r3, #16
 8009f56:	d802      	bhi.n	8009f5e <HAL_TIM_ConfigClockSource+0x62>
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d06f      	beq.n	800a03c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009f5c:	e078      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009f5e:	2b20      	cmp	r3, #32
 8009f60:	d06c      	beq.n	800a03c <HAL_TIM_ConfigClockSource+0x140>
 8009f62:	2b30      	cmp	r3, #48	; 0x30
 8009f64:	d06a      	beq.n	800a03c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009f66:	e073      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009f68:	2b70      	cmp	r3, #112	; 0x70
 8009f6a:	d00d      	beq.n	8009f88 <HAL_TIM_ConfigClockSource+0x8c>
 8009f6c:	2b70      	cmp	r3, #112	; 0x70
 8009f6e:	d804      	bhi.n	8009f7a <HAL_TIM_ConfigClockSource+0x7e>
 8009f70:	2b50      	cmp	r3, #80	; 0x50
 8009f72:	d033      	beq.n	8009fdc <HAL_TIM_ConfigClockSource+0xe0>
 8009f74:	2b60      	cmp	r3, #96	; 0x60
 8009f76:	d041      	beq.n	8009ffc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009f78:	e06a      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f7e:	d066      	beq.n	800a04e <HAL_TIM_ConfigClockSource+0x152>
 8009f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f84:	d017      	beq.n	8009fb6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009f86:	e063      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6818      	ldr	r0, [r3, #0]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	6899      	ldr	r1, [r3, #8]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	685a      	ldr	r2, [r3, #4]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	f000 f9aa 	bl	800a2f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009faa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	609a      	str	r2, [r3, #8]
      break;
 8009fb4:	e04c      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6818      	ldr	r0, [r3, #0]
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	6899      	ldr	r1, [r3, #8]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	f000 f993 	bl	800a2f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	689a      	ldr	r2, [r3, #8]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fd8:	609a      	str	r2, [r3, #8]
      break;
 8009fda:	e039      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6818      	ldr	r0, [r3, #0]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	6859      	ldr	r1, [r3, #4]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	f000 f907 	bl	800a1fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2150      	movs	r1, #80	; 0x50
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f000 f960 	bl	800a2ba <TIM_ITRx_SetConfig>
      break;
 8009ffa:	e029      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6818      	ldr	r0, [r3, #0]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	6859      	ldr	r1, [r3, #4]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	461a      	mov	r2, r3
 800a00a:	f000 f926 	bl	800a25a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2160      	movs	r1, #96	; 0x60
 800a014:	4618      	mov	r0, r3
 800a016:	f000 f950 	bl	800a2ba <TIM_ITRx_SetConfig>
      break;
 800a01a:	e019      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	6859      	ldr	r1, [r3, #4]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	461a      	mov	r2, r3
 800a02a:	f000 f8e7 	bl	800a1fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2140      	movs	r1, #64	; 0x40
 800a034:	4618      	mov	r0, r3
 800a036:	f000 f940 	bl	800a2ba <TIM_ITRx_SetConfig>
      break;
 800a03a:	e009      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4619      	mov	r1, r3
 800a046:	4610      	mov	r0, r2
 800a048:	f000 f937 	bl	800a2ba <TIM_ITRx_SetConfig>
      break;
 800a04c:	e000      	b.n	800a050 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a04e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a06a:	b480      	push	{r7}
 800a06c:	b083      	sub	sp, #12
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a072:	bf00      	nop
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a07e:	b480      	push	{r7}
 800a080:	b083      	sub	sp, #12
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a092:	b480      	push	{r7}
 800a094:	b083      	sub	sp, #12
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a09a:	bf00      	nop
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b083      	sub	sp, #12
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0ae:	bf00      	nop
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
	...

0800a0bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a40      	ldr	r2, [pc, #256]	; (800a1d0 <TIM_Base_SetConfig+0x114>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d013      	beq.n	800a0fc <TIM_Base_SetConfig+0x40>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0da:	d00f      	beq.n	800a0fc <TIM_Base_SetConfig+0x40>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a3d      	ldr	r2, [pc, #244]	; (800a1d4 <TIM_Base_SetConfig+0x118>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d00b      	beq.n	800a0fc <TIM_Base_SetConfig+0x40>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a3c      	ldr	r2, [pc, #240]	; (800a1d8 <TIM_Base_SetConfig+0x11c>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d007      	beq.n	800a0fc <TIM_Base_SetConfig+0x40>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a3b      	ldr	r2, [pc, #236]	; (800a1dc <TIM_Base_SetConfig+0x120>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d003      	beq.n	800a0fc <TIM_Base_SetConfig+0x40>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a3a      	ldr	r2, [pc, #232]	; (800a1e0 <TIM_Base_SetConfig+0x124>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d108      	bne.n	800a10e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a2f      	ldr	r2, [pc, #188]	; (800a1d0 <TIM_Base_SetConfig+0x114>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d02b      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a11c:	d027      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a2c      	ldr	r2, [pc, #176]	; (800a1d4 <TIM_Base_SetConfig+0x118>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d023      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a2b      	ldr	r2, [pc, #172]	; (800a1d8 <TIM_Base_SetConfig+0x11c>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d01f      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a2a      	ldr	r2, [pc, #168]	; (800a1dc <TIM_Base_SetConfig+0x120>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d01b      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a29      	ldr	r2, [pc, #164]	; (800a1e0 <TIM_Base_SetConfig+0x124>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d017      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a28      	ldr	r2, [pc, #160]	; (800a1e4 <TIM_Base_SetConfig+0x128>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d013      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a27      	ldr	r2, [pc, #156]	; (800a1e8 <TIM_Base_SetConfig+0x12c>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d00f      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a26      	ldr	r2, [pc, #152]	; (800a1ec <TIM_Base_SetConfig+0x130>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d00b      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a25      	ldr	r2, [pc, #148]	; (800a1f0 <TIM_Base_SetConfig+0x134>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d007      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a24      	ldr	r2, [pc, #144]	; (800a1f4 <TIM_Base_SetConfig+0x138>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d003      	beq.n	800a16e <TIM_Base_SetConfig+0xb2>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a23      	ldr	r2, [pc, #140]	; (800a1f8 <TIM_Base_SetConfig+0x13c>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d108      	bne.n	800a180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	689a      	ldr	r2, [r3, #8]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a0a      	ldr	r2, [pc, #40]	; (800a1d0 <TIM_Base_SetConfig+0x114>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d003      	beq.n	800a1b4 <TIM_Base_SetConfig+0xf8>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a0c      	ldr	r2, [pc, #48]	; (800a1e0 <TIM_Base_SetConfig+0x124>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d103      	bne.n	800a1bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	691a      	ldr	r2, [r3, #16]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	615a      	str	r2, [r3, #20]
}
 800a1c2:	bf00      	nop
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	40010000 	.word	0x40010000
 800a1d4:	40000400 	.word	0x40000400
 800a1d8:	40000800 	.word	0x40000800
 800a1dc:	40000c00 	.word	0x40000c00
 800a1e0:	40010400 	.word	0x40010400
 800a1e4:	40014000 	.word	0x40014000
 800a1e8:	40014400 	.word	0x40014400
 800a1ec:	40014800 	.word	0x40014800
 800a1f0:	40001800 	.word	0x40001800
 800a1f4:	40001c00 	.word	0x40001c00
 800a1f8:	40002000 	.word	0x40002000

0800a1fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	f023 0201 	bic.w	r2, r3, #1
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	011b      	lsls	r3, r3, #4
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	4313      	orrs	r3, r2
 800a230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	f023 030a 	bic.w	r3, r3, #10
 800a238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	4313      	orrs	r3, r2
 800a240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	621a      	str	r2, [r3, #32]
}
 800a24e:	bf00      	nop
 800a250:	371c      	adds	r7, #28
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b087      	sub	sp, #28
 800a25e:	af00      	add	r7, sp, #0
 800a260:	60f8      	str	r0, [r7, #12]
 800a262:	60b9      	str	r1, [r7, #8]
 800a264:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	f023 0210 	bic.w	r2, r3, #16
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	031b      	lsls	r3, r3, #12
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a296:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	011b      	lsls	r3, r3, #4
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	621a      	str	r2, [r3, #32]
}
 800a2ae:	bf00      	nop
 800a2b0:	371c      	adds	r7, #28
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b085      	sub	sp, #20
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	f043 0307 	orr.w	r3, r3, #7
 800a2dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	609a      	str	r2, [r3, #8]
}
 800a2e4:	bf00      	nop
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
 800a2fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a30a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	021a      	lsls	r2, r3, #8
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	431a      	orrs	r2, r3
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	4313      	orrs	r3, r2
 800a318:	697a      	ldr	r2, [r7, #20]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	609a      	str	r2, [r3, #8]
}
 800a324:	bf00      	nop
 800a326:	371c      	adds	r7, #28
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a340:	2b01      	cmp	r3, #1
 800a342:	d101      	bne.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a344:	2302      	movs	r3, #2
 800a346:	e05a      	b.n	800a3fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2202      	movs	r2, #2
 800a354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a36e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	4313      	orrs	r3, r2
 800a378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a21      	ldr	r2, [pc, #132]	; (800a40c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d022      	beq.n	800a3d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a394:	d01d      	beq.n	800a3d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a1d      	ldr	r2, [pc, #116]	; (800a410 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d018      	beq.n	800a3d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a1b      	ldr	r2, [pc, #108]	; (800a414 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d013      	beq.n	800a3d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a1a      	ldr	r2, [pc, #104]	; (800a418 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d00e      	beq.n	800a3d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a18      	ldr	r2, [pc, #96]	; (800a41c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d009      	beq.n	800a3d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a17      	ldr	r2, [pc, #92]	; (800a420 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d004      	beq.n	800a3d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a15      	ldr	r2, [pc, #84]	; (800a424 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d10c      	bne.n	800a3ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	40010000 	.word	0x40010000
 800a410:	40000400 	.word	0x40000400
 800a414:	40000800 	.word	0x40000800
 800a418:	40000c00 	.word	0x40000c00
 800a41c:	40010400 	.word	0x40010400
 800a420:	40014000 	.word	0x40014000
 800a424:	40001800 	.word	0x40001800

0800a428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e03f      	b.n	800a4e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d106      	bne.n	800a47c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7fa fb6c 	bl	8004b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2224      	movs	r2, #36	; 0x24
 800a480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68da      	ldr	r2, [r3, #12]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f829 	bl	800a4ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	691a      	ldr	r2, [r3, #16]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	695a      	ldr	r2, [r3, #20]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68da      	ldr	r2, [r3, #12]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2220      	movs	r2, #32
 800a4dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
	...

0800a4ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f0:	b085      	sub	sp, #20
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68da      	ldr	r2, [r3, #12]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	430a      	orrs	r2, r1
 800a50a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689a      	ldr	r2, [r3, #8]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	431a      	orrs	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	695b      	ldr	r3, [r3, #20]
 800a51a:	431a      	orrs	r2, r3
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	69db      	ldr	r3, [r3, #28]
 800a520:	4313      	orrs	r3, r2
 800a522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a52e:	f023 030c 	bic.w	r3, r3, #12
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	6812      	ldr	r2, [r2, #0]
 800a536:	68f9      	ldr	r1, [r7, #12]
 800a538:	430b      	orrs	r3, r1
 800a53a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	699a      	ldr	r2, [r3, #24]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	430a      	orrs	r2, r1
 800a550:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	69db      	ldr	r3, [r3, #28]
 800a556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a55a:	f040 818b 	bne.w	800a874 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4ac1      	ldr	r2, [pc, #772]	; (800a868 <UART_SetConfig+0x37c>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d005      	beq.n	800a574 <UART_SetConfig+0x88>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4abf      	ldr	r2, [pc, #764]	; (800a86c <UART_SetConfig+0x380>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	f040 80bd 	bne.w	800a6ee <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a574:	f7fe ff38 	bl	80093e8 <HAL_RCC_GetPCLK2Freq>
 800a578:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	461d      	mov	r5, r3
 800a57e:	f04f 0600 	mov.w	r6, #0
 800a582:	46a8      	mov	r8, r5
 800a584:	46b1      	mov	r9, r6
 800a586:	eb18 0308 	adds.w	r3, r8, r8
 800a58a:	eb49 0409 	adc.w	r4, r9, r9
 800a58e:	4698      	mov	r8, r3
 800a590:	46a1      	mov	r9, r4
 800a592:	eb18 0805 	adds.w	r8, r8, r5
 800a596:	eb49 0906 	adc.w	r9, r9, r6
 800a59a:	f04f 0100 	mov.w	r1, #0
 800a59e:	f04f 0200 	mov.w	r2, #0
 800a5a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a5a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a5aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a5ae:	4688      	mov	r8, r1
 800a5b0:	4691      	mov	r9, r2
 800a5b2:	eb18 0005 	adds.w	r0, r8, r5
 800a5b6:	eb49 0106 	adc.w	r1, r9, r6
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	461d      	mov	r5, r3
 800a5c0:	f04f 0600 	mov.w	r6, #0
 800a5c4:	196b      	adds	r3, r5, r5
 800a5c6:	eb46 0406 	adc.w	r4, r6, r6
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	4623      	mov	r3, r4
 800a5ce:	f7f6 f9f1 	bl	80009b4 <__aeabi_uldivmod>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	460c      	mov	r4, r1
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	4ba5      	ldr	r3, [pc, #660]	; (800a870 <UART_SetConfig+0x384>)
 800a5da:	fba3 2302 	umull	r2, r3, r3, r2
 800a5de:	095b      	lsrs	r3, r3, #5
 800a5e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	461d      	mov	r5, r3
 800a5e8:	f04f 0600 	mov.w	r6, #0
 800a5ec:	46a9      	mov	r9, r5
 800a5ee:	46b2      	mov	sl, r6
 800a5f0:	eb19 0309 	adds.w	r3, r9, r9
 800a5f4:	eb4a 040a 	adc.w	r4, sl, sl
 800a5f8:	4699      	mov	r9, r3
 800a5fa:	46a2      	mov	sl, r4
 800a5fc:	eb19 0905 	adds.w	r9, r9, r5
 800a600:	eb4a 0a06 	adc.w	sl, sl, r6
 800a604:	f04f 0100 	mov.w	r1, #0
 800a608:	f04f 0200 	mov.w	r2, #0
 800a60c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a610:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a614:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a618:	4689      	mov	r9, r1
 800a61a:	4692      	mov	sl, r2
 800a61c:	eb19 0005 	adds.w	r0, r9, r5
 800a620:	eb4a 0106 	adc.w	r1, sl, r6
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	461d      	mov	r5, r3
 800a62a:	f04f 0600 	mov.w	r6, #0
 800a62e:	196b      	adds	r3, r5, r5
 800a630:	eb46 0406 	adc.w	r4, r6, r6
 800a634:	461a      	mov	r2, r3
 800a636:	4623      	mov	r3, r4
 800a638:	f7f6 f9bc 	bl	80009b4 <__aeabi_uldivmod>
 800a63c:	4603      	mov	r3, r0
 800a63e:	460c      	mov	r4, r1
 800a640:	461a      	mov	r2, r3
 800a642:	4b8b      	ldr	r3, [pc, #556]	; (800a870 <UART_SetConfig+0x384>)
 800a644:	fba3 1302 	umull	r1, r3, r3, r2
 800a648:	095b      	lsrs	r3, r3, #5
 800a64a:	2164      	movs	r1, #100	; 0x64
 800a64c:	fb01 f303 	mul.w	r3, r1, r3
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	00db      	lsls	r3, r3, #3
 800a654:	3332      	adds	r3, #50	; 0x32
 800a656:	4a86      	ldr	r2, [pc, #536]	; (800a870 <UART_SetConfig+0x384>)
 800a658:	fba2 2303 	umull	r2, r3, r2, r3
 800a65c:	095b      	lsrs	r3, r3, #5
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a664:	4498      	add	r8, r3
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	461d      	mov	r5, r3
 800a66a:	f04f 0600 	mov.w	r6, #0
 800a66e:	46a9      	mov	r9, r5
 800a670:	46b2      	mov	sl, r6
 800a672:	eb19 0309 	adds.w	r3, r9, r9
 800a676:	eb4a 040a 	adc.w	r4, sl, sl
 800a67a:	4699      	mov	r9, r3
 800a67c:	46a2      	mov	sl, r4
 800a67e:	eb19 0905 	adds.w	r9, r9, r5
 800a682:	eb4a 0a06 	adc.w	sl, sl, r6
 800a686:	f04f 0100 	mov.w	r1, #0
 800a68a:	f04f 0200 	mov.w	r2, #0
 800a68e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a692:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a696:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a69a:	4689      	mov	r9, r1
 800a69c:	4692      	mov	sl, r2
 800a69e:	eb19 0005 	adds.w	r0, r9, r5
 800a6a2:	eb4a 0106 	adc.w	r1, sl, r6
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	461d      	mov	r5, r3
 800a6ac:	f04f 0600 	mov.w	r6, #0
 800a6b0:	196b      	adds	r3, r5, r5
 800a6b2:	eb46 0406 	adc.w	r4, r6, r6
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	4623      	mov	r3, r4
 800a6ba:	f7f6 f97b 	bl	80009b4 <__aeabi_uldivmod>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	4b6a      	ldr	r3, [pc, #424]	; (800a870 <UART_SetConfig+0x384>)
 800a6c6:	fba3 1302 	umull	r1, r3, r3, r2
 800a6ca:	095b      	lsrs	r3, r3, #5
 800a6cc:	2164      	movs	r1, #100	; 0x64
 800a6ce:	fb01 f303 	mul.w	r3, r1, r3
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	00db      	lsls	r3, r3, #3
 800a6d6:	3332      	adds	r3, #50	; 0x32
 800a6d8:	4a65      	ldr	r2, [pc, #404]	; (800a870 <UART_SetConfig+0x384>)
 800a6da:	fba2 2303 	umull	r2, r3, r2, r3
 800a6de:	095b      	lsrs	r3, r3, #5
 800a6e0:	f003 0207 	and.w	r2, r3, #7
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4442      	add	r2, r8
 800a6ea:	609a      	str	r2, [r3, #8]
 800a6ec:	e26f      	b.n	800abce <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a6ee:	f7fe fe67 	bl	80093c0 <HAL_RCC_GetPCLK1Freq>
 800a6f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	461d      	mov	r5, r3
 800a6f8:	f04f 0600 	mov.w	r6, #0
 800a6fc:	46a8      	mov	r8, r5
 800a6fe:	46b1      	mov	r9, r6
 800a700:	eb18 0308 	adds.w	r3, r8, r8
 800a704:	eb49 0409 	adc.w	r4, r9, r9
 800a708:	4698      	mov	r8, r3
 800a70a:	46a1      	mov	r9, r4
 800a70c:	eb18 0805 	adds.w	r8, r8, r5
 800a710:	eb49 0906 	adc.w	r9, r9, r6
 800a714:	f04f 0100 	mov.w	r1, #0
 800a718:	f04f 0200 	mov.w	r2, #0
 800a71c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a720:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a724:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a728:	4688      	mov	r8, r1
 800a72a:	4691      	mov	r9, r2
 800a72c:	eb18 0005 	adds.w	r0, r8, r5
 800a730:	eb49 0106 	adc.w	r1, r9, r6
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	461d      	mov	r5, r3
 800a73a:	f04f 0600 	mov.w	r6, #0
 800a73e:	196b      	adds	r3, r5, r5
 800a740:	eb46 0406 	adc.w	r4, r6, r6
 800a744:	461a      	mov	r2, r3
 800a746:	4623      	mov	r3, r4
 800a748:	f7f6 f934 	bl	80009b4 <__aeabi_uldivmod>
 800a74c:	4603      	mov	r3, r0
 800a74e:	460c      	mov	r4, r1
 800a750:	461a      	mov	r2, r3
 800a752:	4b47      	ldr	r3, [pc, #284]	; (800a870 <UART_SetConfig+0x384>)
 800a754:	fba3 2302 	umull	r2, r3, r3, r2
 800a758:	095b      	lsrs	r3, r3, #5
 800a75a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	461d      	mov	r5, r3
 800a762:	f04f 0600 	mov.w	r6, #0
 800a766:	46a9      	mov	r9, r5
 800a768:	46b2      	mov	sl, r6
 800a76a:	eb19 0309 	adds.w	r3, r9, r9
 800a76e:	eb4a 040a 	adc.w	r4, sl, sl
 800a772:	4699      	mov	r9, r3
 800a774:	46a2      	mov	sl, r4
 800a776:	eb19 0905 	adds.w	r9, r9, r5
 800a77a:	eb4a 0a06 	adc.w	sl, sl, r6
 800a77e:	f04f 0100 	mov.w	r1, #0
 800a782:	f04f 0200 	mov.w	r2, #0
 800a786:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a78a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a78e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a792:	4689      	mov	r9, r1
 800a794:	4692      	mov	sl, r2
 800a796:	eb19 0005 	adds.w	r0, r9, r5
 800a79a:	eb4a 0106 	adc.w	r1, sl, r6
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	461d      	mov	r5, r3
 800a7a4:	f04f 0600 	mov.w	r6, #0
 800a7a8:	196b      	adds	r3, r5, r5
 800a7aa:	eb46 0406 	adc.w	r4, r6, r6
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	4623      	mov	r3, r4
 800a7b2:	f7f6 f8ff 	bl	80009b4 <__aeabi_uldivmod>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	4b2c      	ldr	r3, [pc, #176]	; (800a870 <UART_SetConfig+0x384>)
 800a7be:	fba3 1302 	umull	r1, r3, r3, r2
 800a7c2:	095b      	lsrs	r3, r3, #5
 800a7c4:	2164      	movs	r1, #100	; 0x64
 800a7c6:	fb01 f303 	mul.w	r3, r1, r3
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	00db      	lsls	r3, r3, #3
 800a7ce:	3332      	adds	r3, #50	; 0x32
 800a7d0:	4a27      	ldr	r2, [pc, #156]	; (800a870 <UART_SetConfig+0x384>)
 800a7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d6:	095b      	lsrs	r3, r3, #5
 800a7d8:	005b      	lsls	r3, r3, #1
 800a7da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a7de:	4498      	add	r8, r3
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	461d      	mov	r5, r3
 800a7e4:	f04f 0600 	mov.w	r6, #0
 800a7e8:	46a9      	mov	r9, r5
 800a7ea:	46b2      	mov	sl, r6
 800a7ec:	eb19 0309 	adds.w	r3, r9, r9
 800a7f0:	eb4a 040a 	adc.w	r4, sl, sl
 800a7f4:	4699      	mov	r9, r3
 800a7f6:	46a2      	mov	sl, r4
 800a7f8:	eb19 0905 	adds.w	r9, r9, r5
 800a7fc:	eb4a 0a06 	adc.w	sl, sl, r6
 800a800:	f04f 0100 	mov.w	r1, #0
 800a804:	f04f 0200 	mov.w	r2, #0
 800a808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a80c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a810:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a814:	4689      	mov	r9, r1
 800a816:	4692      	mov	sl, r2
 800a818:	eb19 0005 	adds.w	r0, r9, r5
 800a81c:	eb4a 0106 	adc.w	r1, sl, r6
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	461d      	mov	r5, r3
 800a826:	f04f 0600 	mov.w	r6, #0
 800a82a:	196b      	adds	r3, r5, r5
 800a82c:	eb46 0406 	adc.w	r4, r6, r6
 800a830:	461a      	mov	r2, r3
 800a832:	4623      	mov	r3, r4
 800a834:	f7f6 f8be 	bl	80009b4 <__aeabi_uldivmod>
 800a838:	4603      	mov	r3, r0
 800a83a:	460c      	mov	r4, r1
 800a83c:	461a      	mov	r2, r3
 800a83e:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <UART_SetConfig+0x384>)
 800a840:	fba3 1302 	umull	r1, r3, r3, r2
 800a844:	095b      	lsrs	r3, r3, #5
 800a846:	2164      	movs	r1, #100	; 0x64
 800a848:	fb01 f303 	mul.w	r3, r1, r3
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	00db      	lsls	r3, r3, #3
 800a850:	3332      	adds	r3, #50	; 0x32
 800a852:	4a07      	ldr	r2, [pc, #28]	; (800a870 <UART_SetConfig+0x384>)
 800a854:	fba2 2303 	umull	r2, r3, r2, r3
 800a858:	095b      	lsrs	r3, r3, #5
 800a85a:	f003 0207 	and.w	r2, r3, #7
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4442      	add	r2, r8
 800a864:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a866:	e1b2      	b.n	800abce <UART_SetConfig+0x6e2>
 800a868:	40011000 	.word	0x40011000
 800a86c:	40011400 	.word	0x40011400
 800a870:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4ad7      	ldr	r2, [pc, #860]	; (800abd8 <UART_SetConfig+0x6ec>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d005      	beq.n	800a88a <UART_SetConfig+0x39e>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4ad6      	ldr	r2, [pc, #856]	; (800abdc <UART_SetConfig+0x6f0>)
 800a884:	4293      	cmp	r3, r2
 800a886:	f040 80d1 	bne.w	800aa2c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a88a:	f7fe fdad 	bl	80093e8 <HAL_RCC_GetPCLK2Freq>
 800a88e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	469a      	mov	sl, r3
 800a894:	f04f 0b00 	mov.w	fp, #0
 800a898:	46d0      	mov	r8, sl
 800a89a:	46d9      	mov	r9, fp
 800a89c:	eb18 0308 	adds.w	r3, r8, r8
 800a8a0:	eb49 0409 	adc.w	r4, r9, r9
 800a8a4:	4698      	mov	r8, r3
 800a8a6:	46a1      	mov	r9, r4
 800a8a8:	eb18 080a 	adds.w	r8, r8, sl
 800a8ac:	eb49 090b 	adc.w	r9, r9, fp
 800a8b0:	f04f 0100 	mov.w	r1, #0
 800a8b4:	f04f 0200 	mov.w	r2, #0
 800a8b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a8bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a8c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a8c4:	4688      	mov	r8, r1
 800a8c6:	4691      	mov	r9, r2
 800a8c8:	eb1a 0508 	adds.w	r5, sl, r8
 800a8cc:	eb4b 0609 	adc.w	r6, fp, r9
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	f04f 0200 	mov.w	r2, #0
 800a8da:	f04f 0300 	mov.w	r3, #0
 800a8de:	f04f 0400 	mov.w	r4, #0
 800a8e2:	0094      	lsls	r4, r2, #2
 800a8e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a8e8:	008b      	lsls	r3, r1, #2
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	4623      	mov	r3, r4
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	4631      	mov	r1, r6
 800a8f2:	f7f6 f85f 	bl	80009b4 <__aeabi_uldivmod>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	4bb8      	ldr	r3, [pc, #736]	; (800abe0 <UART_SetConfig+0x6f4>)
 800a8fe:	fba3 2302 	umull	r2, r3, r3, r2
 800a902:	095b      	lsrs	r3, r3, #5
 800a904:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	469b      	mov	fp, r3
 800a90c:	f04f 0c00 	mov.w	ip, #0
 800a910:	46d9      	mov	r9, fp
 800a912:	46e2      	mov	sl, ip
 800a914:	eb19 0309 	adds.w	r3, r9, r9
 800a918:	eb4a 040a 	adc.w	r4, sl, sl
 800a91c:	4699      	mov	r9, r3
 800a91e:	46a2      	mov	sl, r4
 800a920:	eb19 090b 	adds.w	r9, r9, fp
 800a924:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a928:	f04f 0100 	mov.w	r1, #0
 800a92c:	f04f 0200 	mov.w	r2, #0
 800a930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a934:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a938:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a93c:	4689      	mov	r9, r1
 800a93e:	4692      	mov	sl, r2
 800a940:	eb1b 0509 	adds.w	r5, fp, r9
 800a944:	eb4c 060a 	adc.w	r6, ip, sl
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	4619      	mov	r1, r3
 800a94e:	f04f 0200 	mov.w	r2, #0
 800a952:	f04f 0300 	mov.w	r3, #0
 800a956:	f04f 0400 	mov.w	r4, #0
 800a95a:	0094      	lsls	r4, r2, #2
 800a95c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a960:	008b      	lsls	r3, r1, #2
 800a962:	461a      	mov	r2, r3
 800a964:	4623      	mov	r3, r4
 800a966:	4628      	mov	r0, r5
 800a968:	4631      	mov	r1, r6
 800a96a:	f7f6 f823 	bl	80009b4 <__aeabi_uldivmod>
 800a96e:	4603      	mov	r3, r0
 800a970:	460c      	mov	r4, r1
 800a972:	461a      	mov	r2, r3
 800a974:	4b9a      	ldr	r3, [pc, #616]	; (800abe0 <UART_SetConfig+0x6f4>)
 800a976:	fba3 1302 	umull	r1, r3, r3, r2
 800a97a:	095b      	lsrs	r3, r3, #5
 800a97c:	2164      	movs	r1, #100	; 0x64
 800a97e:	fb01 f303 	mul.w	r3, r1, r3
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	011b      	lsls	r3, r3, #4
 800a986:	3332      	adds	r3, #50	; 0x32
 800a988:	4a95      	ldr	r2, [pc, #596]	; (800abe0 <UART_SetConfig+0x6f4>)
 800a98a:	fba2 2303 	umull	r2, r3, r2, r3
 800a98e:	095b      	lsrs	r3, r3, #5
 800a990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a994:	4498      	add	r8, r3
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	469b      	mov	fp, r3
 800a99a:	f04f 0c00 	mov.w	ip, #0
 800a99e:	46d9      	mov	r9, fp
 800a9a0:	46e2      	mov	sl, ip
 800a9a2:	eb19 0309 	adds.w	r3, r9, r9
 800a9a6:	eb4a 040a 	adc.w	r4, sl, sl
 800a9aa:	4699      	mov	r9, r3
 800a9ac:	46a2      	mov	sl, r4
 800a9ae:	eb19 090b 	adds.w	r9, r9, fp
 800a9b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a9b6:	f04f 0100 	mov.w	r1, #0
 800a9ba:	f04f 0200 	mov.w	r2, #0
 800a9be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9ca:	4689      	mov	r9, r1
 800a9cc:	4692      	mov	sl, r2
 800a9ce:	eb1b 0509 	adds.w	r5, fp, r9
 800a9d2:	eb4c 060a 	adc.w	r6, ip, sl
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	f04f 0200 	mov.w	r2, #0
 800a9e0:	f04f 0300 	mov.w	r3, #0
 800a9e4:	f04f 0400 	mov.w	r4, #0
 800a9e8:	0094      	lsls	r4, r2, #2
 800a9ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a9ee:	008b      	lsls	r3, r1, #2
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	4623      	mov	r3, r4
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	f7f5 ffdc 	bl	80009b4 <__aeabi_uldivmod>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	460c      	mov	r4, r1
 800aa00:	461a      	mov	r2, r3
 800aa02:	4b77      	ldr	r3, [pc, #476]	; (800abe0 <UART_SetConfig+0x6f4>)
 800aa04:	fba3 1302 	umull	r1, r3, r3, r2
 800aa08:	095b      	lsrs	r3, r3, #5
 800aa0a:	2164      	movs	r1, #100	; 0x64
 800aa0c:	fb01 f303 	mul.w	r3, r1, r3
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	011b      	lsls	r3, r3, #4
 800aa14:	3332      	adds	r3, #50	; 0x32
 800aa16:	4a72      	ldr	r2, [pc, #456]	; (800abe0 <UART_SetConfig+0x6f4>)
 800aa18:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1c:	095b      	lsrs	r3, r3, #5
 800aa1e:	f003 020f 	and.w	r2, r3, #15
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4442      	add	r2, r8
 800aa28:	609a      	str	r2, [r3, #8]
 800aa2a:	e0d0      	b.n	800abce <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa2c:	f7fe fcc8 	bl	80093c0 <HAL_RCC_GetPCLK1Freq>
 800aa30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	469a      	mov	sl, r3
 800aa36:	f04f 0b00 	mov.w	fp, #0
 800aa3a:	46d0      	mov	r8, sl
 800aa3c:	46d9      	mov	r9, fp
 800aa3e:	eb18 0308 	adds.w	r3, r8, r8
 800aa42:	eb49 0409 	adc.w	r4, r9, r9
 800aa46:	4698      	mov	r8, r3
 800aa48:	46a1      	mov	r9, r4
 800aa4a:	eb18 080a 	adds.w	r8, r8, sl
 800aa4e:	eb49 090b 	adc.w	r9, r9, fp
 800aa52:	f04f 0100 	mov.w	r1, #0
 800aa56:	f04f 0200 	mov.w	r2, #0
 800aa5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aa5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aa62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aa66:	4688      	mov	r8, r1
 800aa68:	4691      	mov	r9, r2
 800aa6a:	eb1a 0508 	adds.w	r5, sl, r8
 800aa6e:	eb4b 0609 	adc.w	r6, fp, r9
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	4619      	mov	r1, r3
 800aa78:	f04f 0200 	mov.w	r2, #0
 800aa7c:	f04f 0300 	mov.w	r3, #0
 800aa80:	f04f 0400 	mov.w	r4, #0
 800aa84:	0094      	lsls	r4, r2, #2
 800aa86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa8a:	008b      	lsls	r3, r1, #2
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	4623      	mov	r3, r4
 800aa90:	4628      	mov	r0, r5
 800aa92:	4631      	mov	r1, r6
 800aa94:	f7f5 ff8e 	bl	80009b4 <__aeabi_uldivmod>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	4b50      	ldr	r3, [pc, #320]	; (800abe0 <UART_SetConfig+0x6f4>)
 800aaa0:	fba3 2302 	umull	r2, r3, r3, r2
 800aaa4:	095b      	lsrs	r3, r3, #5
 800aaa6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	469b      	mov	fp, r3
 800aaae:	f04f 0c00 	mov.w	ip, #0
 800aab2:	46d9      	mov	r9, fp
 800aab4:	46e2      	mov	sl, ip
 800aab6:	eb19 0309 	adds.w	r3, r9, r9
 800aaba:	eb4a 040a 	adc.w	r4, sl, sl
 800aabe:	4699      	mov	r9, r3
 800aac0:	46a2      	mov	sl, r4
 800aac2:	eb19 090b 	adds.w	r9, r9, fp
 800aac6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aaca:	f04f 0100 	mov.w	r1, #0
 800aace:	f04f 0200 	mov.w	r2, #0
 800aad2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aad6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aada:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aade:	4689      	mov	r9, r1
 800aae0:	4692      	mov	sl, r2
 800aae2:	eb1b 0509 	adds.w	r5, fp, r9
 800aae6:	eb4c 060a 	adc.w	r6, ip, sl
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	f04f 0200 	mov.w	r2, #0
 800aaf4:	f04f 0300 	mov.w	r3, #0
 800aaf8:	f04f 0400 	mov.w	r4, #0
 800aafc:	0094      	lsls	r4, r2, #2
 800aafe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab02:	008b      	lsls	r3, r1, #2
 800ab04:	461a      	mov	r2, r3
 800ab06:	4623      	mov	r3, r4
 800ab08:	4628      	mov	r0, r5
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	f7f5 ff52 	bl	80009b4 <__aeabi_uldivmod>
 800ab10:	4603      	mov	r3, r0
 800ab12:	460c      	mov	r4, r1
 800ab14:	461a      	mov	r2, r3
 800ab16:	4b32      	ldr	r3, [pc, #200]	; (800abe0 <UART_SetConfig+0x6f4>)
 800ab18:	fba3 1302 	umull	r1, r3, r3, r2
 800ab1c:	095b      	lsrs	r3, r3, #5
 800ab1e:	2164      	movs	r1, #100	; 0x64
 800ab20:	fb01 f303 	mul.w	r3, r1, r3
 800ab24:	1ad3      	subs	r3, r2, r3
 800ab26:	011b      	lsls	r3, r3, #4
 800ab28:	3332      	adds	r3, #50	; 0x32
 800ab2a:	4a2d      	ldr	r2, [pc, #180]	; (800abe0 <UART_SetConfig+0x6f4>)
 800ab2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab30:	095b      	lsrs	r3, r3, #5
 800ab32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab36:	4498      	add	r8, r3
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	469b      	mov	fp, r3
 800ab3c:	f04f 0c00 	mov.w	ip, #0
 800ab40:	46d9      	mov	r9, fp
 800ab42:	46e2      	mov	sl, ip
 800ab44:	eb19 0309 	adds.w	r3, r9, r9
 800ab48:	eb4a 040a 	adc.w	r4, sl, sl
 800ab4c:	4699      	mov	r9, r3
 800ab4e:	46a2      	mov	sl, r4
 800ab50:	eb19 090b 	adds.w	r9, r9, fp
 800ab54:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab58:	f04f 0100 	mov.w	r1, #0
 800ab5c:	f04f 0200 	mov.w	r2, #0
 800ab60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab6c:	4689      	mov	r9, r1
 800ab6e:	4692      	mov	sl, r2
 800ab70:	eb1b 0509 	adds.w	r5, fp, r9
 800ab74:	eb4c 060a 	adc.w	r6, ip, sl
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	f04f 0200 	mov.w	r2, #0
 800ab82:	f04f 0300 	mov.w	r3, #0
 800ab86:	f04f 0400 	mov.w	r4, #0
 800ab8a:	0094      	lsls	r4, r2, #2
 800ab8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab90:	008b      	lsls	r3, r1, #2
 800ab92:	461a      	mov	r2, r3
 800ab94:	4623      	mov	r3, r4
 800ab96:	4628      	mov	r0, r5
 800ab98:	4631      	mov	r1, r6
 800ab9a:	f7f5 ff0b 	bl	80009b4 <__aeabi_uldivmod>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	460c      	mov	r4, r1
 800aba2:	461a      	mov	r2, r3
 800aba4:	4b0e      	ldr	r3, [pc, #56]	; (800abe0 <UART_SetConfig+0x6f4>)
 800aba6:	fba3 1302 	umull	r1, r3, r3, r2
 800abaa:	095b      	lsrs	r3, r3, #5
 800abac:	2164      	movs	r1, #100	; 0x64
 800abae:	fb01 f303 	mul.w	r3, r1, r3
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	011b      	lsls	r3, r3, #4
 800abb6:	3332      	adds	r3, #50	; 0x32
 800abb8:	4a09      	ldr	r2, [pc, #36]	; (800abe0 <UART_SetConfig+0x6f4>)
 800abba:	fba2 2303 	umull	r2, r3, r2, r3
 800abbe:	095b      	lsrs	r3, r3, #5
 800abc0:	f003 020f 	and.w	r2, r3, #15
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4442      	add	r2, r8
 800abca:	609a      	str	r2, [r3, #8]
}
 800abcc:	e7ff      	b.n	800abce <UART_SetConfig+0x6e2>
 800abce:	bf00      	nop
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd8:	40011000 	.word	0x40011000
 800abdc:	40011400 	.word	0x40011400
 800abe0:	51eb851f 	.word	0x51eb851f

0800abe4 <__errno>:
 800abe4:	4b01      	ldr	r3, [pc, #4]	; (800abec <__errno+0x8>)
 800abe6:	6818      	ldr	r0, [r3, #0]
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	20000070 	.word	0x20000070

0800abf0 <__libc_init_array>:
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	4e0d      	ldr	r6, [pc, #52]	; (800ac28 <__libc_init_array+0x38>)
 800abf4:	4c0d      	ldr	r4, [pc, #52]	; (800ac2c <__libc_init_array+0x3c>)
 800abf6:	1ba4      	subs	r4, r4, r6
 800abf8:	10a4      	asrs	r4, r4, #2
 800abfa:	2500      	movs	r5, #0
 800abfc:	42a5      	cmp	r5, r4
 800abfe:	d109      	bne.n	800ac14 <__libc_init_array+0x24>
 800ac00:	4e0b      	ldr	r6, [pc, #44]	; (800ac30 <__libc_init_array+0x40>)
 800ac02:	4c0c      	ldr	r4, [pc, #48]	; (800ac34 <__libc_init_array+0x44>)
 800ac04:	f000 fc90 	bl	800b528 <_init>
 800ac08:	1ba4      	subs	r4, r4, r6
 800ac0a:	10a4      	asrs	r4, r4, #2
 800ac0c:	2500      	movs	r5, #0
 800ac0e:	42a5      	cmp	r5, r4
 800ac10:	d105      	bne.n	800ac1e <__libc_init_array+0x2e>
 800ac12:	bd70      	pop	{r4, r5, r6, pc}
 800ac14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac18:	4798      	blx	r3
 800ac1a:	3501      	adds	r5, #1
 800ac1c:	e7ee      	b.n	800abfc <__libc_init_array+0xc>
 800ac1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac22:	4798      	blx	r3
 800ac24:	3501      	adds	r5, #1
 800ac26:	e7f2      	b.n	800ac0e <__libc_init_array+0x1e>
 800ac28:	0800b600 	.word	0x0800b600
 800ac2c:	0800b600 	.word	0x0800b600
 800ac30:	0800b600 	.word	0x0800b600
 800ac34:	0800b604 	.word	0x0800b604

0800ac38 <memset>:
 800ac38:	4402      	add	r2, r0
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d100      	bne.n	800ac42 <memset+0xa>
 800ac40:	4770      	bx	lr
 800ac42:	f803 1b01 	strb.w	r1, [r3], #1
 800ac46:	e7f9      	b.n	800ac3c <memset+0x4>

0800ac48 <_puts_r>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	460e      	mov	r6, r1
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	b118      	cbz	r0, 800ac58 <_puts_r+0x10>
 800ac50:	6983      	ldr	r3, [r0, #24]
 800ac52:	b90b      	cbnz	r3, 800ac58 <_puts_r+0x10>
 800ac54:	f000 fa14 	bl	800b080 <__sinit>
 800ac58:	69ab      	ldr	r3, [r5, #24]
 800ac5a:	68ac      	ldr	r4, [r5, #8]
 800ac5c:	b913      	cbnz	r3, 800ac64 <_puts_r+0x1c>
 800ac5e:	4628      	mov	r0, r5
 800ac60:	f000 fa0e 	bl	800b080 <__sinit>
 800ac64:	4b23      	ldr	r3, [pc, #140]	; (800acf4 <_puts_r+0xac>)
 800ac66:	429c      	cmp	r4, r3
 800ac68:	d117      	bne.n	800ac9a <_puts_r+0x52>
 800ac6a:	686c      	ldr	r4, [r5, #4]
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	071b      	lsls	r3, r3, #28
 800ac70:	d51d      	bpl.n	800acae <_puts_r+0x66>
 800ac72:	6923      	ldr	r3, [r4, #16]
 800ac74:	b1db      	cbz	r3, 800acae <_puts_r+0x66>
 800ac76:	3e01      	subs	r6, #1
 800ac78:	68a3      	ldr	r3, [r4, #8]
 800ac7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	60a3      	str	r3, [r4, #8]
 800ac82:	b9e9      	cbnz	r1, 800acc0 <_puts_r+0x78>
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	da2e      	bge.n	800ace6 <_puts_r+0x9e>
 800ac88:	4622      	mov	r2, r4
 800ac8a:	210a      	movs	r1, #10
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	f000 f847 	bl	800ad20 <__swbuf_r>
 800ac92:	3001      	adds	r0, #1
 800ac94:	d011      	beq.n	800acba <_puts_r+0x72>
 800ac96:	200a      	movs	r0, #10
 800ac98:	e011      	b.n	800acbe <_puts_r+0x76>
 800ac9a:	4b17      	ldr	r3, [pc, #92]	; (800acf8 <_puts_r+0xb0>)
 800ac9c:	429c      	cmp	r4, r3
 800ac9e:	d101      	bne.n	800aca4 <_puts_r+0x5c>
 800aca0:	68ac      	ldr	r4, [r5, #8]
 800aca2:	e7e3      	b.n	800ac6c <_puts_r+0x24>
 800aca4:	4b15      	ldr	r3, [pc, #84]	; (800acfc <_puts_r+0xb4>)
 800aca6:	429c      	cmp	r4, r3
 800aca8:	bf08      	it	eq
 800acaa:	68ec      	ldreq	r4, [r5, #12]
 800acac:	e7de      	b.n	800ac6c <_puts_r+0x24>
 800acae:	4621      	mov	r1, r4
 800acb0:	4628      	mov	r0, r5
 800acb2:	f000 f887 	bl	800adc4 <__swsetup_r>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d0dd      	beq.n	800ac76 <_puts_r+0x2e>
 800acba:	f04f 30ff 	mov.w	r0, #4294967295
 800acbe:	bd70      	pop	{r4, r5, r6, pc}
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	da04      	bge.n	800acce <_puts_r+0x86>
 800acc4:	69a2      	ldr	r2, [r4, #24]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	dc06      	bgt.n	800acd8 <_puts_r+0x90>
 800acca:	290a      	cmp	r1, #10
 800accc:	d004      	beq.n	800acd8 <_puts_r+0x90>
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	1c5a      	adds	r2, r3, #1
 800acd2:	6022      	str	r2, [r4, #0]
 800acd4:	7019      	strb	r1, [r3, #0]
 800acd6:	e7cf      	b.n	800ac78 <_puts_r+0x30>
 800acd8:	4622      	mov	r2, r4
 800acda:	4628      	mov	r0, r5
 800acdc:	f000 f820 	bl	800ad20 <__swbuf_r>
 800ace0:	3001      	adds	r0, #1
 800ace2:	d1c9      	bne.n	800ac78 <_puts_r+0x30>
 800ace4:	e7e9      	b.n	800acba <_puts_r+0x72>
 800ace6:	6823      	ldr	r3, [r4, #0]
 800ace8:	200a      	movs	r0, #10
 800acea:	1c5a      	adds	r2, r3, #1
 800acec:	6022      	str	r2, [r4, #0]
 800acee:	7018      	strb	r0, [r3, #0]
 800acf0:	e7e5      	b.n	800acbe <_puts_r+0x76>
 800acf2:	bf00      	nop
 800acf4:	0800b5b8 	.word	0x0800b5b8
 800acf8:	0800b5d8 	.word	0x0800b5d8
 800acfc:	0800b598 	.word	0x0800b598

0800ad00 <puts>:
 800ad00:	4b02      	ldr	r3, [pc, #8]	; (800ad0c <puts+0xc>)
 800ad02:	4601      	mov	r1, r0
 800ad04:	6818      	ldr	r0, [r3, #0]
 800ad06:	f7ff bf9f 	b.w	800ac48 <_puts_r>
 800ad0a:	bf00      	nop
 800ad0c:	20000070 	.word	0x20000070

0800ad10 <strcpy>:
 800ad10:	4603      	mov	r3, r0
 800ad12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad16:	f803 2b01 	strb.w	r2, [r3], #1
 800ad1a:	2a00      	cmp	r2, #0
 800ad1c:	d1f9      	bne.n	800ad12 <strcpy+0x2>
 800ad1e:	4770      	bx	lr

0800ad20 <__swbuf_r>:
 800ad20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad22:	460e      	mov	r6, r1
 800ad24:	4614      	mov	r4, r2
 800ad26:	4605      	mov	r5, r0
 800ad28:	b118      	cbz	r0, 800ad32 <__swbuf_r+0x12>
 800ad2a:	6983      	ldr	r3, [r0, #24]
 800ad2c:	b90b      	cbnz	r3, 800ad32 <__swbuf_r+0x12>
 800ad2e:	f000 f9a7 	bl	800b080 <__sinit>
 800ad32:	4b21      	ldr	r3, [pc, #132]	; (800adb8 <__swbuf_r+0x98>)
 800ad34:	429c      	cmp	r4, r3
 800ad36:	d12a      	bne.n	800ad8e <__swbuf_r+0x6e>
 800ad38:	686c      	ldr	r4, [r5, #4]
 800ad3a:	69a3      	ldr	r3, [r4, #24]
 800ad3c:	60a3      	str	r3, [r4, #8]
 800ad3e:	89a3      	ldrh	r3, [r4, #12]
 800ad40:	071a      	lsls	r2, r3, #28
 800ad42:	d52e      	bpl.n	800ada2 <__swbuf_r+0x82>
 800ad44:	6923      	ldr	r3, [r4, #16]
 800ad46:	b363      	cbz	r3, 800ada2 <__swbuf_r+0x82>
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	6820      	ldr	r0, [r4, #0]
 800ad4c:	1ac0      	subs	r0, r0, r3
 800ad4e:	6963      	ldr	r3, [r4, #20]
 800ad50:	b2f6      	uxtb	r6, r6
 800ad52:	4283      	cmp	r3, r0
 800ad54:	4637      	mov	r7, r6
 800ad56:	dc04      	bgt.n	800ad62 <__swbuf_r+0x42>
 800ad58:	4621      	mov	r1, r4
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	f000 f926 	bl	800afac <_fflush_r>
 800ad60:	bb28      	cbnz	r0, 800adae <__swbuf_r+0x8e>
 800ad62:	68a3      	ldr	r3, [r4, #8]
 800ad64:	3b01      	subs	r3, #1
 800ad66:	60a3      	str	r3, [r4, #8]
 800ad68:	6823      	ldr	r3, [r4, #0]
 800ad6a:	1c5a      	adds	r2, r3, #1
 800ad6c:	6022      	str	r2, [r4, #0]
 800ad6e:	701e      	strb	r6, [r3, #0]
 800ad70:	6963      	ldr	r3, [r4, #20]
 800ad72:	3001      	adds	r0, #1
 800ad74:	4283      	cmp	r3, r0
 800ad76:	d004      	beq.n	800ad82 <__swbuf_r+0x62>
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	07db      	lsls	r3, r3, #31
 800ad7c:	d519      	bpl.n	800adb2 <__swbuf_r+0x92>
 800ad7e:	2e0a      	cmp	r6, #10
 800ad80:	d117      	bne.n	800adb2 <__swbuf_r+0x92>
 800ad82:	4621      	mov	r1, r4
 800ad84:	4628      	mov	r0, r5
 800ad86:	f000 f911 	bl	800afac <_fflush_r>
 800ad8a:	b190      	cbz	r0, 800adb2 <__swbuf_r+0x92>
 800ad8c:	e00f      	b.n	800adae <__swbuf_r+0x8e>
 800ad8e:	4b0b      	ldr	r3, [pc, #44]	; (800adbc <__swbuf_r+0x9c>)
 800ad90:	429c      	cmp	r4, r3
 800ad92:	d101      	bne.n	800ad98 <__swbuf_r+0x78>
 800ad94:	68ac      	ldr	r4, [r5, #8]
 800ad96:	e7d0      	b.n	800ad3a <__swbuf_r+0x1a>
 800ad98:	4b09      	ldr	r3, [pc, #36]	; (800adc0 <__swbuf_r+0xa0>)
 800ad9a:	429c      	cmp	r4, r3
 800ad9c:	bf08      	it	eq
 800ad9e:	68ec      	ldreq	r4, [r5, #12]
 800ada0:	e7cb      	b.n	800ad3a <__swbuf_r+0x1a>
 800ada2:	4621      	mov	r1, r4
 800ada4:	4628      	mov	r0, r5
 800ada6:	f000 f80d 	bl	800adc4 <__swsetup_r>
 800adaa:	2800      	cmp	r0, #0
 800adac:	d0cc      	beq.n	800ad48 <__swbuf_r+0x28>
 800adae:	f04f 37ff 	mov.w	r7, #4294967295
 800adb2:	4638      	mov	r0, r7
 800adb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adb6:	bf00      	nop
 800adb8:	0800b5b8 	.word	0x0800b5b8
 800adbc:	0800b5d8 	.word	0x0800b5d8
 800adc0:	0800b598 	.word	0x0800b598

0800adc4 <__swsetup_r>:
 800adc4:	4b32      	ldr	r3, [pc, #200]	; (800ae90 <__swsetup_r+0xcc>)
 800adc6:	b570      	push	{r4, r5, r6, lr}
 800adc8:	681d      	ldr	r5, [r3, #0]
 800adca:	4606      	mov	r6, r0
 800adcc:	460c      	mov	r4, r1
 800adce:	b125      	cbz	r5, 800adda <__swsetup_r+0x16>
 800add0:	69ab      	ldr	r3, [r5, #24]
 800add2:	b913      	cbnz	r3, 800adda <__swsetup_r+0x16>
 800add4:	4628      	mov	r0, r5
 800add6:	f000 f953 	bl	800b080 <__sinit>
 800adda:	4b2e      	ldr	r3, [pc, #184]	; (800ae94 <__swsetup_r+0xd0>)
 800addc:	429c      	cmp	r4, r3
 800adde:	d10f      	bne.n	800ae00 <__swsetup_r+0x3c>
 800ade0:	686c      	ldr	r4, [r5, #4]
 800ade2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	0715      	lsls	r5, r2, #28
 800adea:	d42c      	bmi.n	800ae46 <__swsetup_r+0x82>
 800adec:	06d0      	lsls	r0, r2, #27
 800adee:	d411      	bmi.n	800ae14 <__swsetup_r+0x50>
 800adf0:	2209      	movs	r2, #9
 800adf2:	6032      	str	r2, [r6, #0]
 800adf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adf8:	81a3      	strh	r3, [r4, #12]
 800adfa:	f04f 30ff 	mov.w	r0, #4294967295
 800adfe:	e03e      	b.n	800ae7e <__swsetup_r+0xba>
 800ae00:	4b25      	ldr	r3, [pc, #148]	; (800ae98 <__swsetup_r+0xd4>)
 800ae02:	429c      	cmp	r4, r3
 800ae04:	d101      	bne.n	800ae0a <__swsetup_r+0x46>
 800ae06:	68ac      	ldr	r4, [r5, #8]
 800ae08:	e7eb      	b.n	800ade2 <__swsetup_r+0x1e>
 800ae0a:	4b24      	ldr	r3, [pc, #144]	; (800ae9c <__swsetup_r+0xd8>)
 800ae0c:	429c      	cmp	r4, r3
 800ae0e:	bf08      	it	eq
 800ae10:	68ec      	ldreq	r4, [r5, #12]
 800ae12:	e7e6      	b.n	800ade2 <__swsetup_r+0x1e>
 800ae14:	0751      	lsls	r1, r2, #29
 800ae16:	d512      	bpl.n	800ae3e <__swsetup_r+0x7a>
 800ae18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae1a:	b141      	cbz	r1, 800ae2e <__swsetup_r+0x6a>
 800ae1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae20:	4299      	cmp	r1, r3
 800ae22:	d002      	beq.n	800ae2a <__swsetup_r+0x66>
 800ae24:	4630      	mov	r0, r6
 800ae26:	f000 fa19 	bl	800b25c <_free_r>
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	6363      	str	r3, [r4, #52]	; 0x34
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae34:	81a3      	strh	r3, [r4, #12]
 800ae36:	2300      	movs	r3, #0
 800ae38:	6063      	str	r3, [r4, #4]
 800ae3a:	6923      	ldr	r3, [r4, #16]
 800ae3c:	6023      	str	r3, [r4, #0]
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	f043 0308 	orr.w	r3, r3, #8
 800ae44:	81a3      	strh	r3, [r4, #12]
 800ae46:	6923      	ldr	r3, [r4, #16]
 800ae48:	b94b      	cbnz	r3, 800ae5e <__swsetup_r+0x9a>
 800ae4a:	89a3      	ldrh	r3, [r4, #12]
 800ae4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae54:	d003      	beq.n	800ae5e <__swsetup_r+0x9a>
 800ae56:	4621      	mov	r1, r4
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f000 f9bf 	bl	800b1dc <__smakebuf_r>
 800ae5e:	89a2      	ldrh	r2, [r4, #12]
 800ae60:	f012 0301 	ands.w	r3, r2, #1
 800ae64:	d00c      	beq.n	800ae80 <__swsetup_r+0xbc>
 800ae66:	2300      	movs	r3, #0
 800ae68:	60a3      	str	r3, [r4, #8]
 800ae6a:	6963      	ldr	r3, [r4, #20]
 800ae6c:	425b      	negs	r3, r3
 800ae6e:	61a3      	str	r3, [r4, #24]
 800ae70:	6923      	ldr	r3, [r4, #16]
 800ae72:	b953      	cbnz	r3, 800ae8a <__swsetup_r+0xc6>
 800ae74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ae7c:	d1ba      	bne.n	800adf4 <__swsetup_r+0x30>
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}
 800ae80:	0792      	lsls	r2, r2, #30
 800ae82:	bf58      	it	pl
 800ae84:	6963      	ldrpl	r3, [r4, #20]
 800ae86:	60a3      	str	r3, [r4, #8]
 800ae88:	e7f2      	b.n	800ae70 <__swsetup_r+0xac>
 800ae8a:	2000      	movs	r0, #0
 800ae8c:	e7f7      	b.n	800ae7e <__swsetup_r+0xba>
 800ae8e:	bf00      	nop
 800ae90:	20000070 	.word	0x20000070
 800ae94:	0800b5b8 	.word	0x0800b5b8
 800ae98:	0800b5d8 	.word	0x0800b5d8
 800ae9c:	0800b598 	.word	0x0800b598

0800aea0 <__sflush_r>:
 800aea0:	898a      	ldrh	r2, [r1, #12]
 800aea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea6:	4605      	mov	r5, r0
 800aea8:	0710      	lsls	r0, r2, #28
 800aeaa:	460c      	mov	r4, r1
 800aeac:	d458      	bmi.n	800af60 <__sflush_r+0xc0>
 800aeae:	684b      	ldr	r3, [r1, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dc05      	bgt.n	800aec0 <__sflush_r+0x20>
 800aeb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	dc02      	bgt.n	800aec0 <__sflush_r+0x20>
 800aeba:	2000      	movs	r0, #0
 800aebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aec2:	2e00      	cmp	r6, #0
 800aec4:	d0f9      	beq.n	800aeba <__sflush_r+0x1a>
 800aec6:	2300      	movs	r3, #0
 800aec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aecc:	682f      	ldr	r7, [r5, #0]
 800aece:	6a21      	ldr	r1, [r4, #32]
 800aed0:	602b      	str	r3, [r5, #0]
 800aed2:	d032      	beq.n	800af3a <__sflush_r+0x9a>
 800aed4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aed6:	89a3      	ldrh	r3, [r4, #12]
 800aed8:	075a      	lsls	r2, r3, #29
 800aeda:	d505      	bpl.n	800aee8 <__sflush_r+0x48>
 800aedc:	6863      	ldr	r3, [r4, #4]
 800aede:	1ac0      	subs	r0, r0, r3
 800aee0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aee2:	b10b      	cbz	r3, 800aee8 <__sflush_r+0x48>
 800aee4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aee6:	1ac0      	subs	r0, r0, r3
 800aee8:	2300      	movs	r3, #0
 800aeea:	4602      	mov	r2, r0
 800aeec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aeee:	6a21      	ldr	r1, [r4, #32]
 800aef0:	4628      	mov	r0, r5
 800aef2:	47b0      	blx	r6
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	d106      	bne.n	800af08 <__sflush_r+0x68>
 800aefa:	6829      	ldr	r1, [r5, #0]
 800aefc:	291d      	cmp	r1, #29
 800aefe:	d848      	bhi.n	800af92 <__sflush_r+0xf2>
 800af00:	4a29      	ldr	r2, [pc, #164]	; (800afa8 <__sflush_r+0x108>)
 800af02:	40ca      	lsrs	r2, r1
 800af04:	07d6      	lsls	r6, r2, #31
 800af06:	d544      	bpl.n	800af92 <__sflush_r+0xf2>
 800af08:	2200      	movs	r2, #0
 800af0a:	6062      	str	r2, [r4, #4]
 800af0c:	04d9      	lsls	r1, r3, #19
 800af0e:	6922      	ldr	r2, [r4, #16]
 800af10:	6022      	str	r2, [r4, #0]
 800af12:	d504      	bpl.n	800af1e <__sflush_r+0x7e>
 800af14:	1c42      	adds	r2, r0, #1
 800af16:	d101      	bne.n	800af1c <__sflush_r+0x7c>
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	b903      	cbnz	r3, 800af1e <__sflush_r+0x7e>
 800af1c:	6560      	str	r0, [r4, #84]	; 0x54
 800af1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af20:	602f      	str	r7, [r5, #0]
 800af22:	2900      	cmp	r1, #0
 800af24:	d0c9      	beq.n	800aeba <__sflush_r+0x1a>
 800af26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af2a:	4299      	cmp	r1, r3
 800af2c:	d002      	beq.n	800af34 <__sflush_r+0x94>
 800af2e:	4628      	mov	r0, r5
 800af30:	f000 f994 	bl	800b25c <_free_r>
 800af34:	2000      	movs	r0, #0
 800af36:	6360      	str	r0, [r4, #52]	; 0x34
 800af38:	e7c0      	b.n	800aebc <__sflush_r+0x1c>
 800af3a:	2301      	movs	r3, #1
 800af3c:	4628      	mov	r0, r5
 800af3e:	47b0      	blx	r6
 800af40:	1c41      	adds	r1, r0, #1
 800af42:	d1c8      	bne.n	800aed6 <__sflush_r+0x36>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d0c5      	beq.n	800aed6 <__sflush_r+0x36>
 800af4a:	2b1d      	cmp	r3, #29
 800af4c:	d001      	beq.n	800af52 <__sflush_r+0xb2>
 800af4e:	2b16      	cmp	r3, #22
 800af50:	d101      	bne.n	800af56 <__sflush_r+0xb6>
 800af52:	602f      	str	r7, [r5, #0]
 800af54:	e7b1      	b.n	800aeba <__sflush_r+0x1a>
 800af56:	89a3      	ldrh	r3, [r4, #12]
 800af58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af5c:	81a3      	strh	r3, [r4, #12]
 800af5e:	e7ad      	b.n	800aebc <__sflush_r+0x1c>
 800af60:	690f      	ldr	r7, [r1, #16]
 800af62:	2f00      	cmp	r7, #0
 800af64:	d0a9      	beq.n	800aeba <__sflush_r+0x1a>
 800af66:	0793      	lsls	r3, r2, #30
 800af68:	680e      	ldr	r6, [r1, #0]
 800af6a:	bf08      	it	eq
 800af6c:	694b      	ldreq	r3, [r1, #20]
 800af6e:	600f      	str	r7, [r1, #0]
 800af70:	bf18      	it	ne
 800af72:	2300      	movne	r3, #0
 800af74:	eba6 0807 	sub.w	r8, r6, r7
 800af78:	608b      	str	r3, [r1, #8]
 800af7a:	f1b8 0f00 	cmp.w	r8, #0
 800af7e:	dd9c      	ble.n	800aeba <__sflush_r+0x1a>
 800af80:	4643      	mov	r3, r8
 800af82:	463a      	mov	r2, r7
 800af84:	6a21      	ldr	r1, [r4, #32]
 800af86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af88:	4628      	mov	r0, r5
 800af8a:	47b0      	blx	r6
 800af8c:	2800      	cmp	r0, #0
 800af8e:	dc06      	bgt.n	800af9e <__sflush_r+0xfe>
 800af90:	89a3      	ldrh	r3, [r4, #12]
 800af92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af96:	81a3      	strh	r3, [r4, #12]
 800af98:	f04f 30ff 	mov.w	r0, #4294967295
 800af9c:	e78e      	b.n	800aebc <__sflush_r+0x1c>
 800af9e:	4407      	add	r7, r0
 800afa0:	eba8 0800 	sub.w	r8, r8, r0
 800afa4:	e7e9      	b.n	800af7a <__sflush_r+0xda>
 800afa6:	bf00      	nop
 800afa8:	20400001 	.word	0x20400001

0800afac <_fflush_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	690b      	ldr	r3, [r1, #16]
 800afb0:	4605      	mov	r5, r0
 800afb2:	460c      	mov	r4, r1
 800afb4:	b1db      	cbz	r3, 800afee <_fflush_r+0x42>
 800afb6:	b118      	cbz	r0, 800afc0 <_fflush_r+0x14>
 800afb8:	6983      	ldr	r3, [r0, #24]
 800afba:	b90b      	cbnz	r3, 800afc0 <_fflush_r+0x14>
 800afbc:	f000 f860 	bl	800b080 <__sinit>
 800afc0:	4b0c      	ldr	r3, [pc, #48]	; (800aff4 <_fflush_r+0x48>)
 800afc2:	429c      	cmp	r4, r3
 800afc4:	d109      	bne.n	800afda <_fflush_r+0x2e>
 800afc6:	686c      	ldr	r4, [r5, #4]
 800afc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afcc:	b17b      	cbz	r3, 800afee <_fflush_r+0x42>
 800afce:	4621      	mov	r1, r4
 800afd0:	4628      	mov	r0, r5
 800afd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afd6:	f7ff bf63 	b.w	800aea0 <__sflush_r>
 800afda:	4b07      	ldr	r3, [pc, #28]	; (800aff8 <_fflush_r+0x4c>)
 800afdc:	429c      	cmp	r4, r3
 800afde:	d101      	bne.n	800afe4 <_fflush_r+0x38>
 800afe0:	68ac      	ldr	r4, [r5, #8]
 800afe2:	e7f1      	b.n	800afc8 <_fflush_r+0x1c>
 800afe4:	4b05      	ldr	r3, [pc, #20]	; (800affc <_fflush_r+0x50>)
 800afe6:	429c      	cmp	r4, r3
 800afe8:	bf08      	it	eq
 800afea:	68ec      	ldreq	r4, [r5, #12]
 800afec:	e7ec      	b.n	800afc8 <_fflush_r+0x1c>
 800afee:	2000      	movs	r0, #0
 800aff0:	bd38      	pop	{r3, r4, r5, pc}
 800aff2:	bf00      	nop
 800aff4:	0800b5b8 	.word	0x0800b5b8
 800aff8:	0800b5d8 	.word	0x0800b5d8
 800affc:	0800b598 	.word	0x0800b598

0800b000 <std>:
 800b000:	2300      	movs	r3, #0
 800b002:	b510      	push	{r4, lr}
 800b004:	4604      	mov	r4, r0
 800b006:	e9c0 3300 	strd	r3, r3, [r0]
 800b00a:	6083      	str	r3, [r0, #8]
 800b00c:	8181      	strh	r1, [r0, #12]
 800b00e:	6643      	str	r3, [r0, #100]	; 0x64
 800b010:	81c2      	strh	r2, [r0, #14]
 800b012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b016:	6183      	str	r3, [r0, #24]
 800b018:	4619      	mov	r1, r3
 800b01a:	2208      	movs	r2, #8
 800b01c:	305c      	adds	r0, #92	; 0x5c
 800b01e:	f7ff fe0b 	bl	800ac38 <memset>
 800b022:	4b05      	ldr	r3, [pc, #20]	; (800b038 <std+0x38>)
 800b024:	6263      	str	r3, [r4, #36]	; 0x24
 800b026:	4b05      	ldr	r3, [pc, #20]	; (800b03c <std+0x3c>)
 800b028:	62a3      	str	r3, [r4, #40]	; 0x28
 800b02a:	4b05      	ldr	r3, [pc, #20]	; (800b040 <std+0x40>)
 800b02c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b02e:	4b05      	ldr	r3, [pc, #20]	; (800b044 <std+0x44>)
 800b030:	6224      	str	r4, [r4, #32]
 800b032:	6323      	str	r3, [r4, #48]	; 0x30
 800b034:	bd10      	pop	{r4, pc}
 800b036:	bf00      	nop
 800b038:	0800b3cd 	.word	0x0800b3cd
 800b03c:	0800b3ef 	.word	0x0800b3ef
 800b040:	0800b427 	.word	0x0800b427
 800b044:	0800b44b 	.word	0x0800b44b

0800b048 <_cleanup_r>:
 800b048:	4901      	ldr	r1, [pc, #4]	; (800b050 <_cleanup_r+0x8>)
 800b04a:	f000 b885 	b.w	800b158 <_fwalk_reent>
 800b04e:	bf00      	nop
 800b050:	0800afad 	.word	0x0800afad

0800b054 <__sfmoreglue>:
 800b054:	b570      	push	{r4, r5, r6, lr}
 800b056:	1e4a      	subs	r2, r1, #1
 800b058:	2568      	movs	r5, #104	; 0x68
 800b05a:	4355      	muls	r5, r2
 800b05c:	460e      	mov	r6, r1
 800b05e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b062:	f000 f949 	bl	800b2f8 <_malloc_r>
 800b066:	4604      	mov	r4, r0
 800b068:	b140      	cbz	r0, 800b07c <__sfmoreglue+0x28>
 800b06a:	2100      	movs	r1, #0
 800b06c:	e9c0 1600 	strd	r1, r6, [r0]
 800b070:	300c      	adds	r0, #12
 800b072:	60a0      	str	r0, [r4, #8]
 800b074:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b078:	f7ff fdde 	bl	800ac38 <memset>
 800b07c:	4620      	mov	r0, r4
 800b07e:	bd70      	pop	{r4, r5, r6, pc}

0800b080 <__sinit>:
 800b080:	6983      	ldr	r3, [r0, #24]
 800b082:	b510      	push	{r4, lr}
 800b084:	4604      	mov	r4, r0
 800b086:	bb33      	cbnz	r3, 800b0d6 <__sinit+0x56>
 800b088:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b08c:	6503      	str	r3, [r0, #80]	; 0x50
 800b08e:	4b12      	ldr	r3, [pc, #72]	; (800b0d8 <__sinit+0x58>)
 800b090:	4a12      	ldr	r2, [pc, #72]	; (800b0dc <__sinit+0x5c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	6282      	str	r2, [r0, #40]	; 0x28
 800b096:	4298      	cmp	r0, r3
 800b098:	bf04      	itt	eq
 800b09a:	2301      	moveq	r3, #1
 800b09c:	6183      	streq	r3, [r0, #24]
 800b09e:	f000 f81f 	bl	800b0e0 <__sfp>
 800b0a2:	6060      	str	r0, [r4, #4]
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f000 f81b 	bl	800b0e0 <__sfp>
 800b0aa:	60a0      	str	r0, [r4, #8]
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f000 f817 	bl	800b0e0 <__sfp>
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	60e0      	str	r0, [r4, #12]
 800b0b6:	2104      	movs	r1, #4
 800b0b8:	6860      	ldr	r0, [r4, #4]
 800b0ba:	f7ff ffa1 	bl	800b000 <std>
 800b0be:	2201      	movs	r2, #1
 800b0c0:	2109      	movs	r1, #9
 800b0c2:	68a0      	ldr	r0, [r4, #8]
 800b0c4:	f7ff ff9c 	bl	800b000 <std>
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	2112      	movs	r1, #18
 800b0cc:	68e0      	ldr	r0, [r4, #12]
 800b0ce:	f7ff ff97 	bl	800b000 <std>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	61a3      	str	r3, [r4, #24]
 800b0d6:	bd10      	pop	{r4, pc}
 800b0d8:	0800b594 	.word	0x0800b594
 800b0dc:	0800b049 	.word	0x0800b049

0800b0e0 <__sfp>:
 800b0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e2:	4b1b      	ldr	r3, [pc, #108]	; (800b150 <__sfp+0x70>)
 800b0e4:	681e      	ldr	r6, [r3, #0]
 800b0e6:	69b3      	ldr	r3, [r6, #24]
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	b913      	cbnz	r3, 800b0f2 <__sfp+0x12>
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f7ff ffc7 	bl	800b080 <__sinit>
 800b0f2:	3648      	adds	r6, #72	; 0x48
 800b0f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	d503      	bpl.n	800b104 <__sfp+0x24>
 800b0fc:	6833      	ldr	r3, [r6, #0]
 800b0fe:	b133      	cbz	r3, 800b10e <__sfp+0x2e>
 800b100:	6836      	ldr	r6, [r6, #0]
 800b102:	e7f7      	b.n	800b0f4 <__sfp+0x14>
 800b104:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b108:	b16d      	cbz	r5, 800b126 <__sfp+0x46>
 800b10a:	3468      	adds	r4, #104	; 0x68
 800b10c:	e7f4      	b.n	800b0f8 <__sfp+0x18>
 800b10e:	2104      	movs	r1, #4
 800b110:	4638      	mov	r0, r7
 800b112:	f7ff ff9f 	bl	800b054 <__sfmoreglue>
 800b116:	6030      	str	r0, [r6, #0]
 800b118:	2800      	cmp	r0, #0
 800b11a:	d1f1      	bne.n	800b100 <__sfp+0x20>
 800b11c:	230c      	movs	r3, #12
 800b11e:	603b      	str	r3, [r7, #0]
 800b120:	4604      	mov	r4, r0
 800b122:	4620      	mov	r0, r4
 800b124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b126:	4b0b      	ldr	r3, [pc, #44]	; (800b154 <__sfp+0x74>)
 800b128:	6665      	str	r5, [r4, #100]	; 0x64
 800b12a:	e9c4 5500 	strd	r5, r5, [r4]
 800b12e:	60a5      	str	r5, [r4, #8]
 800b130:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b134:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b138:	2208      	movs	r2, #8
 800b13a:	4629      	mov	r1, r5
 800b13c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b140:	f7ff fd7a 	bl	800ac38 <memset>
 800b144:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b148:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b14c:	e7e9      	b.n	800b122 <__sfp+0x42>
 800b14e:	bf00      	nop
 800b150:	0800b594 	.word	0x0800b594
 800b154:	ffff0001 	.word	0xffff0001

0800b158 <_fwalk_reent>:
 800b158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b15c:	4680      	mov	r8, r0
 800b15e:	4689      	mov	r9, r1
 800b160:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b164:	2600      	movs	r6, #0
 800b166:	b914      	cbnz	r4, 800b16e <_fwalk_reent+0x16>
 800b168:	4630      	mov	r0, r6
 800b16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b16e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b172:	3f01      	subs	r7, #1
 800b174:	d501      	bpl.n	800b17a <_fwalk_reent+0x22>
 800b176:	6824      	ldr	r4, [r4, #0]
 800b178:	e7f5      	b.n	800b166 <_fwalk_reent+0xe>
 800b17a:	89ab      	ldrh	r3, [r5, #12]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d907      	bls.n	800b190 <_fwalk_reent+0x38>
 800b180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b184:	3301      	adds	r3, #1
 800b186:	d003      	beq.n	800b190 <_fwalk_reent+0x38>
 800b188:	4629      	mov	r1, r5
 800b18a:	4640      	mov	r0, r8
 800b18c:	47c8      	blx	r9
 800b18e:	4306      	orrs	r6, r0
 800b190:	3568      	adds	r5, #104	; 0x68
 800b192:	e7ee      	b.n	800b172 <_fwalk_reent+0x1a>

0800b194 <__swhatbuf_r>:
 800b194:	b570      	push	{r4, r5, r6, lr}
 800b196:	460e      	mov	r6, r1
 800b198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b19c:	2900      	cmp	r1, #0
 800b19e:	b096      	sub	sp, #88	; 0x58
 800b1a0:	4614      	mov	r4, r2
 800b1a2:	461d      	mov	r5, r3
 800b1a4:	da07      	bge.n	800b1b6 <__swhatbuf_r+0x22>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	602b      	str	r3, [r5, #0]
 800b1aa:	89b3      	ldrh	r3, [r6, #12]
 800b1ac:	061a      	lsls	r2, r3, #24
 800b1ae:	d410      	bmi.n	800b1d2 <__swhatbuf_r+0x3e>
 800b1b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1b4:	e00e      	b.n	800b1d4 <__swhatbuf_r+0x40>
 800b1b6:	466a      	mov	r2, sp
 800b1b8:	f000 f96e 	bl	800b498 <_fstat_r>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	dbf2      	blt.n	800b1a6 <__swhatbuf_r+0x12>
 800b1c0:	9a01      	ldr	r2, [sp, #4]
 800b1c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1ca:	425a      	negs	r2, r3
 800b1cc:	415a      	adcs	r2, r3
 800b1ce:	602a      	str	r2, [r5, #0]
 800b1d0:	e7ee      	b.n	800b1b0 <__swhatbuf_r+0x1c>
 800b1d2:	2340      	movs	r3, #64	; 0x40
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	6023      	str	r3, [r4, #0]
 800b1d8:	b016      	add	sp, #88	; 0x58
 800b1da:	bd70      	pop	{r4, r5, r6, pc}

0800b1dc <__smakebuf_r>:
 800b1dc:	898b      	ldrh	r3, [r1, #12]
 800b1de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1e0:	079d      	lsls	r5, r3, #30
 800b1e2:	4606      	mov	r6, r0
 800b1e4:	460c      	mov	r4, r1
 800b1e6:	d507      	bpl.n	800b1f8 <__smakebuf_r+0x1c>
 800b1e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	6123      	str	r3, [r4, #16]
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	6163      	str	r3, [r4, #20]
 800b1f4:	b002      	add	sp, #8
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	ab01      	add	r3, sp, #4
 800b1fa:	466a      	mov	r2, sp
 800b1fc:	f7ff ffca 	bl	800b194 <__swhatbuf_r>
 800b200:	9900      	ldr	r1, [sp, #0]
 800b202:	4605      	mov	r5, r0
 800b204:	4630      	mov	r0, r6
 800b206:	f000 f877 	bl	800b2f8 <_malloc_r>
 800b20a:	b948      	cbnz	r0, 800b220 <__smakebuf_r+0x44>
 800b20c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b210:	059a      	lsls	r2, r3, #22
 800b212:	d4ef      	bmi.n	800b1f4 <__smakebuf_r+0x18>
 800b214:	f023 0303 	bic.w	r3, r3, #3
 800b218:	f043 0302 	orr.w	r3, r3, #2
 800b21c:	81a3      	strh	r3, [r4, #12]
 800b21e:	e7e3      	b.n	800b1e8 <__smakebuf_r+0xc>
 800b220:	4b0d      	ldr	r3, [pc, #52]	; (800b258 <__smakebuf_r+0x7c>)
 800b222:	62b3      	str	r3, [r6, #40]	; 0x28
 800b224:	89a3      	ldrh	r3, [r4, #12]
 800b226:	6020      	str	r0, [r4, #0]
 800b228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b22c:	81a3      	strh	r3, [r4, #12]
 800b22e:	9b00      	ldr	r3, [sp, #0]
 800b230:	6163      	str	r3, [r4, #20]
 800b232:	9b01      	ldr	r3, [sp, #4]
 800b234:	6120      	str	r0, [r4, #16]
 800b236:	b15b      	cbz	r3, 800b250 <__smakebuf_r+0x74>
 800b238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b23c:	4630      	mov	r0, r6
 800b23e:	f000 f93d 	bl	800b4bc <_isatty_r>
 800b242:	b128      	cbz	r0, 800b250 <__smakebuf_r+0x74>
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	f023 0303 	bic.w	r3, r3, #3
 800b24a:	f043 0301 	orr.w	r3, r3, #1
 800b24e:	81a3      	strh	r3, [r4, #12]
 800b250:	89a3      	ldrh	r3, [r4, #12]
 800b252:	431d      	orrs	r5, r3
 800b254:	81a5      	strh	r5, [r4, #12]
 800b256:	e7cd      	b.n	800b1f4 <__smakebuf_r+0x18>
 800b258:	0800b049 	.word	0x0800b049

0800b25c <_free_r>:
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	4605      	mov	r5, r0
 800b260:	2900      	cmp	r1, #0
 800b262:	d045      	beq.n	800b2f0 <_free_r+0x94>
 800b264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b268:	1f0c      	subs	r4, r1, #4
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	bfb8      	it	lt
 800b26e:	18e4      	addlt	r4, r4, r3
 800b270:	f000 f946 	bl	800b500 <__malloc_lock>
 800b274:	4a1f      	ldr	r2, [pc, #124]	; (800b2f4 <_free_r+0x98>)
 800b276:	6813      	ldr	r3, [r2, #0]
 800b278:	4610      	mov	r0, r2
 800b27a:	b933      	cbnz	r3, 800b28a <_free_r+0x2e>
 800b27c:	6063      	str	r3, [r4, #4]
 800b27e:	6014      	str	r4, [r2, #0]
 800b280:	4628      	mov	r0, r5
 800b282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b286:	f000 b93c 	b.w	800b502 <__malloc_unlock>
 800b28a:	42a3      	cmp	r3, r4
 800b28c:	d90c      	bls.n	800b2a8 <_free_r+0x4c>
 800b28e:	6821      	ldr	r1, [r4, #0]
 800b290:	1862      	adds	r2, r4, r1
 800b292:	4293      	cmp	r3, r2
 800b294:	bf04      	itt	eq
 800b296:	681a      	ldreq	r2, [r3, #0]
 800b298:	685b      	ldreq	r3, [r3, #4]
 800b29a:	6063      	str	r3, [r4, #4]
 800b29c:	bf04      	itt	eq
 800b29e:	1852      	addeq	r2, r2, r1
 800b2a0:	6022      	streq	r2, [r4, #0]
 800b2a2:	6004      	str	r4, [r0, #0]
 800b2a4:	e7ec      	b.n	800b280 <_free_r+0x24>
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	685a      	ldr	r2, [r3, #4]
 800b2aa:	b10a      	cbz	r2, 800b2b0 <_free_r+0x54>
 800b2ac:	42a2      	cmp	r2, r4
 800b2ae:	d9fa      	bls.n	800b2a6 <_free_r+0x4a>
 800b2b0:	6819      	ldr	r1, [r3, #0]
 800b2b2:	1858      	adds	r0, r3, r1
 800b2b4:	42a0      	cmp	r0, r4
 800b2b6:	d10b      	bne.n	800b2d0 <_free_r+0x74>
 800b2b8:	6820      	ldr	r0, [r4, #0]
 800b2ba:	4401      	add	r1, r0
 800b2bc:	1858      	adds	r0, r3, r1
 800b2be:	4282      	cmp	r2, r0
 800b2c0:	6019      	str	r1, [r3, #0]
 800b2c2:	d1dd      	bne.n	800b280 <_free_r+0x24>
 800b2c4:	6810      	ldr	r0, [r2, #0]
 800b2c6:	6852      	ldr	r2, [r2, #4]
 800b2c8:	605a      	str	r2, [r3, #4]
 800b2ca:	4401      	add	r1, r0
 800b2cc:	6019      	str	r1, [r3, #0]
 800b2ce:	e7d7      	b.n	800b280 <_free_r+0x24>
 800b2d0:	d902      	bls.n	800b2d8 <_free_r+0x7c>
 800b2d2:	230c      	movs	r3, #12
 800b2d4:	602b      	str	r3, [r5, #0]
 800b2d6:	e7d3      	b.n	800b280 <_free_r+0x24>
 800b2d8:	6820      	ldr	r0, [r4, #0]
 800b2da:	1821      	adds	r1, r4, r0
 800b2dc:	428a      	cmp	r2, r1
 800b2de:	bf04      	itt	eq
 800b2e0:	6811      	ldreq	r1, [r2, #0]
 800b2e2:	6852      	ldreq	r2, [r2, #4]
 800b2e4:	6062      	str	r2, [r4, #4]
 800b2e6:	bf04      	itt	eq
 800b2e8:	1809      	addeq	r1, r1, r0
 800b2ea:	6021      	streq	r1, [r4, #0]
 800b2ec:	605c      	str	r4, [r3, #4]
 800b2ee:	e7c7      	b.n	800b280 <_free_r+0x24>
 800b2f0:	bd38      	pop	{r3, r4, r5, pc}
 800b2f2:	bf00      	nop
 800b2f4:	20000354 	.word	0x20000354

0800b2f8 <_malloc_r>:
 800b2f8:	b570      	push	{r4, r5, r6, lr}
 800b2fa:	1ccd      	adds	r5, r1, #3
 800b2fc:	f025 0503 	bic.w	r5, r5, #3
 800b300:	3508      	adds	r5, #8
 800b302:	2d0c      	cmp	r5, #12
 800b304:	bf38      	it	cc
 800b306:	250c      	movcc	r5, #12
 800b308:	2d00      	cmp	r5, #0
 800b30a:	4606      	mov	r6, r0
 800b30c:	db01      	blt.n	800b312 <_malloc_r+0x1a>
 800b30e:	42a9      	cmp	r1, r5
 800b310:	d903      	bls.n	800b31a <_malloc_r+0x22>
 800b312:	230c      	movs	r3, #12
 800b314:	6033      	str	r3, [r6, #0]
 800b316:	2000      	movs	r0, #0
 800b318:	bd70      	pop	{r4, r5, r6, pc}
 800b31a:	f000 f8f1 	bl	800b500 <__malloc_lock>
 800b31e:	4a21      	ldr	r2, [pc, #132]	; (800b3a4 <_malloc_r+0xac>)
 800b320:	6814      	ldr	r4, [r2, #0]
 800b322:	4621      	mov	r1, r4
 800b324:	b991      	cbnz	r1, 800b34c <_malloc_r+0x54>
 800b326:	4c20      	ldr	r4, [pc, #128]	; (800b3a8 <_malloc_r+0xb0>)
 800b328:	6823      	ldr	r3, [r4, #0]
 800b32a:	b91b      	cbnz	r3, 800b334 <_malloc_r+0x3c>
 800b32c:	4630      	mov	r0, r6
 800b32e:	f000 f83d 	bl	800b3ac <_sbrk_r>
 800b332:	6020      	str	r0, [r4, #0]
 800b334:	4629      	mov	r1, r5
 800b336:	4630      	mov	r0, r6
 800b338:	f000 f838 	bl	800b3ac <_sbrk_r>
 800b33c:	1c43      	adds	r3, r0, #1
 800b33e:	d124      	bne.n	800b38a <_malloc_r+0x92>
 800b340:	230c      	movs	r3, #12
 800b342:	6033      	str	r3, [r6, #0]
 800b344:	4630      	mov	r0, r6
 800b346:	f000 f8dc 	bl	800b502 <__malloc_unlock>
 800b34a:	e7e4      	b.n	800b316 <_malloc_r+0x1e>
 800b34c:	680b      	ldr	r3, [r1, #0]
 800b34e:	1b5b      	subs	r3, r3, r5
 800b350:	d418      	bmi.n	800b384 <_malloc_r+0x8c>
 800b352:	2b0b      	cmp	r3, #11
 800b354:	d90f      	bls.n	800b376 <_malloc_r+0x7e>
 800b356:	600b      	str	r3, [r1, #0]
 800b358:	50cd      	str	r5, [r1, r3]
 800b35a:	18cc      	adds	r4, r1, r3
 800b35c:	4630      	mov	r0, r6
 800b35e:	f000 f8d0 	bl	800b502 <__malloc_unlock>
 800b362:	f104 000b 	add.w	r0, r4, #11
 800b366:	1d23      	adds	r3, r4, #4
 800b368:	f020 0007 	bic.w	r0, r0, #7
 800b36c:	1ac3      	subs	r3, r0, r3
 800b36e:	d0d3      	beq.n	800b318 <_malloc_r+0x20>
 800b370:	425a      	negs	r2, r3
 800b372:	50e2      	str	r2, [r4, r3]
 800b374:	e7d0      	b.n	800b318 <_malloc_r+0x20>
 800b376:	428c      	cmp	r4, r1
 800b378:	684b      	ldr	r3, [r1, #4]
 800b37a:	bf16      	itet	ne
 800b37c:	6063      	strne	r3, [r4, #4]
 800b37e:	6013      	streq	r3, [r2, #0]
 800b380:	460c      	movne	r4, r1
 800b382:	e7eb      	b.n	800b35c <_malloc_r+0x64>
 800b384:	460c      	mov	r4, r1
 800b386:	6849      	ldr	r1, [r1, #4]
 800b388:	e7cc      	b.n	800b324 <_malloc_r+0x2c>
 800b38a:	1cc4      	adds	r4, r0, #3
 800b38c:	f024 0403 	bic.w	r4, r4, #3
 800b390:	42a0      	cmp	r0, r4
 800b392:	d005      	beq.n	800b3a0 <_malloc_r+0xa8>
 800b394:	1a21      	subs	r1, r4, r0
 800b396:	4630      	mov	r0, r6
 800b398:	f000 f808 	bl	800b3ac <_sbrk_r>
 800b39c:	3001      	adds	r0, #1
 800b39e:	d0cf      	beq.n	800b340 <_malloc_r+0x48>
 800b3a0:	6025      	str	r5, [r4, #0]
 800b3a2:	e7db      	b.n	800b35c <_malloc_r+0x64>
 800b3a4:	20000354 	.word	0x20000354
 800b3a8:	20000358 	.word	0x20000358

0800b3ac <_sbrk_r>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	4c06      	ldr	r4, [pc, #24]	; (800b3c8 <_sbrk_r+0x1c>)
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	4605      	mov	r5, r0
 800b3b4:	4608      	mov	r0, r1
 800b3b6:	6023      	str	r3, [r4, #0]
 800b3b8:	f7f9 fd34 	bl	8004e24 <_sbrk>
 800b3bc:	1c43      	adds	r3, r0, #1
 800b3be:	d102      	bne.n	800b3c6 <_sbrk_r+0x1a>
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	b103      	cbz	r3, 800b3c6 <_sbrk_r+0x1a>
 800b3c4:	602b      	str	r3, [r5, #0]
 800b3c6:	bd38      	pop	{r3, r4, r5, pc}
 800b3c8:	20000c6c 	.word	0x20000c6c

0800b3cc <__sread>:
 800b3cc:	b510      	push	{r4, lr}
 800b3ce:	460c      	mov	r4, r1
 800b3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3d4:	f000 f896 	bl	800b504 <_read_r>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	bfab      	itete	ge
 800b3dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3de:	89a3      	ldrhlt	r3, [r4, #12]
 800b3e0:	181b      	addge	r3, r3, r0
 800b3e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3e6:	bfac      	ite	ge
 800b3e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3ea:	81a3      	strhlt	r3, [r4, #12]
 800b3ec:	bd10      	pop	{r4, pc}

0800b3ee <__swrite>:
 800b3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f2:	461f      	mov	r7, r3
 800b3f4:	898b      	ldrh	r3, [r1, #12]
 800b3f6:	05db      	lsls	r3, r3, #23
 800b3f8:	4605      	mov	r5, r0
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	4616      	mov	r6, r2
 800b3fe:	d505      	bpl.n	800b40c <__swrite+0x1e>
 800b400:	2302      	movs	r3, #2
 800b402:	2200      	movs	r2, #0
 800b404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b408:	f000 f868 	bl	800b4dc <_lseek_r>
 800b40c:	89a3      	ldrh	r3, [r4, #12]
 800b40e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b416:	81a3      	strh	r3, [r4, #12]
 800b418:	4632      	mov	r2, r6
 800b41a:	463b      	mov	r3, r7
 800b41c:	4628      	mov	r0, r5
 800b41e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b422:	f000 b817 	b.w	800b454 <_write_r>

0800b426 <__sseek>:
 800b426:	b510      	push	{r4, lr}
 800b428:	460c      	mov	r4, r1
 800b42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b42e:	f000 f855 	bl	800b4dc <_lseek_r>
 800b432:	1c43      	adds	r3, r0, #1
 800b434:	89a3      	ldrh	r3, [r4, #12]
 800b436:	bf15      	itete	ne
 800b438:	6560      	strne	r0, [r4, #84]	; 0x54
 800b43a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b43e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b442:	81a3      	strheq	r3, [r4, #12]
 800b444:	bf18      	it	ne
 800b446:	81a3      	strhne	r3, [r4, #12]
 800b448:	bd10      	pop	{r4, pc}

0800b44a <__sclose>:
 800b44a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b44e:	f000 b813 	b.w	800b478 <_close_r>
	...

0800b454 <_write_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4c07      	ldr	r4, [pc, #28]	; (800b474 <_write_r+0x20>)
 800b458:	4605      	mov	r5, r0
 800b45a:	4608      	mov	r0, r1
 800b45c:	4611      	mov	r1, r2
 800b45e:	2200      	movs	r2, #0
 800b460:	6022      	str	r2, [r4, #0]
 800b462:	461a      	mov	r2, r3
 800b464:	f7f9 fc8d 	bl	8004d82 <_write>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_write_r+0x1e>
 800b46c:	6823      	ldr	r3, [r4, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_write_r+0x1e>
 800b470:	602b      	str	r3, [r5, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	20000c6c 	.word	0x20000c6c

0800b478 <_close_r>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	4c06      	ldr	r4, [pc, #24]	; (800b494 <_close_r+0x1c>)
 800b47c:	2300      	movs	r3, #0
 800b47e:	4605      	mov	r5, r0
 800b480:	4608      	mov	r0, r1
 800b482:	6023      	str	r3, [r4, #0]
 800b484:	f7f9 fc99 	bl	8004dba <_close>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d102      	bne.n	800b492 <_close_r+0x1a>
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	b103      	cbz	r3, 800b492 <_close_r+0x1a>
 800b490:	602b      	str	r3, [r5, #0]
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	20000c6c 	.word	0x20000c6c

0800b498 <_fstat_r>:
 800b498:	b538      	push	{r3, r4, r5, lr}
 800b49a:	4c07      	ldr	r4, [pc, #28]	; (800b4b8 <_fstat_r+0x20>)
 800b49c:	2300      	movs	r3, #0
 800b49e:	4605      	mov	r5, r0
 800b4a0:	4608      	mov	r0, r1
 800b4a2:	4611      	mov	r1, r2
 800b4a4:	6023      	str	r3, [r4, #0]
 800b4a6:	f7f9 fc94 	bl	8004dd2 <_fstat>
 800b4aa:	1c43      	adds	r3, r0, #1
 800b4ac:	d102      	bne.n	800b4b4 <_fstat_r+0x1c>
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	b103      	cbz	r3, 800b4b4 <_fstat_r+0x1c>
 800b4b2:	602b      	str	r3, [r5, #0]
 800b4b4:	bd38      	pop	{r3, r4, r5, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20000c6c 	.word	0x20000c6c

0800b4bc <_isatty_r>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	4c06      	ldr	r4, [pc, #24]	; (800b4d8 <_isatty_r+0x1c>)
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	4608      	mov	r0, r1
 800b4c6:	6023      	str	r3, [r4, #0]
 800b4c8:	f7f9 fc93 	bl	8004df2 <_isatty>
 800b4cc:	1c43      	adds	r3, r0, #1
 800b4ce:	d102      	bne.n	800b4d6 <_isatty_r+0x1a>
 800b4d0:	6823      	ldr	r3, [r4, #0]
 800b4d2:	b103      	cbz	r3, 800b4d6 <_isatty_r+0x1a>
 800b4d4:	602b      	str	r3, [r5, #0]
 800b4d6:	bd38      	pop	{r3, r4, r5, pc}
 800b4d8:	20000c6c 	.word	0x20000c6c

0800b4dc <_lseek_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	4c07      	ldr	r4, [pc, #28]	; (800b4fc <_lseek_r+0x20>)
 800b4e0:	4605      	mov	r5, r0
 800b4e2:	4608      	mov	r0, r1
 800b4e4:	4611      	mov	r1, r2
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	6022      	str	r2, [r4, #0]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	f7f9 fc8c 	bl	8004e08 <_lseek>
 800b4f0:	1c43      	adds	r3, r0, #1
 800b4f2:	d102      	bne.n	800b4fa <_lseek_r+0x1e>
 800b4f4:	6823      	ldr	r3, [r4, #0]
 800b4f6:	b103      	cbz	r3, 800b4fa <_lseek_r+0x1e>
 800b4f8:	602b      	str	r3, [r5, #0]
 800b4fa:	bd38      	pop	{r3, r4, r5, pc}
 800b4fc:	20000c6c 	.word	0x20000c6c

0800b500 <__malloc_lock>:
 800b500:	4770      	bx	lr

0800b502 <__malloc_unlock>:
 800b502:	4770      	bx	lr

0800b504 <_read_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4c07      	ldr	r4, [pc, #28]	; (800b524 <_read_r+0x20>)
 800b508:	4605      	mov	r5, r0
 800b50a:	4608      	mov	r0, r1
 800b50c:	4611      	mov	r1, r2
 800b50e:	2200      	movs	r2, #0
 800b510:	6022      	str	r2, [r4, #0]
 800b512:	461a      	mov	r2, r3
 800b514:	f7f9 fc18 	bl	8004d48 <_read>
 800b518:	1c43      	adds	r3, r0, #1
 800b51a:	d102      	bne.n	800b522 <_read_r+0x1e>
 800b51c:	6823      	ldr	r3, [r4, #0]
 800b51e:	b103      	cbz	r3, 800b522 <_read_r+0x1e>
 800b520:	602b      	str	r3, [r5, #0]
 800b522:	bd38      	pop	{r3, r4, r5, pc}
 800b524:	20000c6c 	.word	0x20000c6c

0800b528 <_init>:
 800b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52a:	bf00      	nop
 800b52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b52e:	bc08      	pop	{r3}
 800b530:	469e      	mov	lr, r3
 800b532:	4770      	bx	lr

0800b534 <_fini>:
 800b534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b536:	bf00      	nop
 800b538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b53a:	bc08      	pop	{r3}
 800b53c:	469e      	mov	lr, r3
 800b53e:	4770      	bx	lr
