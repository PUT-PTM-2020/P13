
MP3-Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800c0c8  0800c0c8  0001c0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c180  0800c180  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c180  0800c180  0001c180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c188  0800c188  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c188  0800c188  0001c188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c18c  0800c18c  0001c18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001038  20000080  0800c210  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010b8  0800c210  000210b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a01a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003573  00000000  00000000  0003a0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018e8  00000000  00000000  0003d640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001760  00000000  00000000  0003ef28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025371  00000000  00000000  00040688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000140e2  00000000  00000000  000659f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db404  00000000  00000000  00079adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154edf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f98  00000000  00000000  00154f5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c0b0 	.word	0x0800c0b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	0800c0b0 	.word	0x0800c0b0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <DESELECT>:

static
inline void DESELECT(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0

}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <xmit_spi>:
extern SPI_HandleTypeDef hspi1;


static
void xmit_spi(BYTE Data)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80004fe:	bf00      	nop
 8000500:	4808      	ldr	r0, [pc, #32]	; (8000524 <xmit_spi+0x30>)
 8000502:	f009 fdb3 	bl	800a06c <HAL_SPI_GetState>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d1f9      	bne.n	8000500 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1,5000);
 800050c:	1df9      	adds	r1, r7, #7
 800050e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000512:	2201      	movs	r2, #1
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <xmit_spi+0x30>)
 8000516:	f009 fad3 	bl	8009ac0 <HAL_SPI_Transmit>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000fc8 	.word	0x20000fc8

08000528 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 800052e:	23ff      	movs	r3, #255	; 0xff
 8000530:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000536:	bf00      	nop
 8000538:	4809      	ldr	r0, [pc, #36]	; (8000560 <rcvr_spi+0x38>)
 800053a:	f009 fd97 	bl	800a06c <HAL_SPI_GetState>
 800053e:	4603      	mov	r3, r0
 8000540:	2b01      	cmp	r3, #1
 8000542:	d1f9      	bne.n	8000538 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1,5000);
 8000544:	1dba      	adds	r2, r7, #6
 8000546:	1df9      	adds	r1, r7, #7
 8000548:	f241 3388 	movw	r3, #5000	; 0x1388
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2301      	movs	r3, #1
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <rcvr_spi+0x38>)
 8000552:	f009 fbe9 	bl	8009d28 <HAL_SPI_TransmitReceive>
	return Data;
 8000556:	79bb      	ldrb	r3, [r7, #6]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000fc8 	.word	0x20000fc8

08000564 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 800056c:	f7ff ffdc 	bl	8000528 <rcvr_spi>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	701a      	strb	r2, [r3, #0]
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <wait_ready+0x34>)
 8000588:	2232      	movs	r2, #50	; 0x32
 800058a:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 800058c:	f7ff ffcc 	bl	8000528 <rcvr_spi>
	do
		res = rcvr_spi();
 8000590:	f7ff ffca 	bl	8000528 <rcvr_spi>
 8000594:	4603      	mov	r3, r0
 8000596:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2bff      	cmp	r3, #255	; 0xff
 800059c:	d004      	beq.n	80005a8 <wait_ready+0x28>
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <wait_ready+0x34>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1f3      	bne.n	8000590 <wait_ready+0x10>

	return res;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000009d 	.word	0x2000009d

080005b8 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 80005be:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005c2:	60bb      	str	r3, [r7, #8]

	DESELECT();
 80005c4:	f7ff ff8f 	bl	80004e6 <DESELECT>

	for (i = 0; i < 10; i++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	e005      	b.n	80005da <power_on+0x22>
		xmit_spi(0xFF);
 80005ce:	20ff      	movs	r0, #255	; 0xff
 80005d0:	f7ff ff90 	bl	80004f4 <xmit_spi>
	for (i = 0; i < 10; i++)
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	3301      	adds	r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	2b09      	cmp	r3, #9
 80005de:	d9f6      	bls.n	80005ce <power_on+0x16>

	SELECT();
 80005e0:	f7ff ff7a 	bl	80004d8 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 80005e4:	2340      	movs	r3, #64	; 0x40
 80005e6:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 80005f8:	2395      	movs	r3, #149	; 0x95
 80005fa:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e00b      	b.n	800061a <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	f107 0210 	add.w	r2, r7, #16
 8000608:	4413      	add	r3, r2
 800060a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff70 	bl	80004f4 <xmit_spi>
	for (i = 0; i < 6; i++)
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	3301      	adds	r3, #1
 8000618:	73fb      	strb	r3, [r7, #15]
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	2b05      	cmp	r3, #5
 800061e:	d9f0      	bls.n	8000602 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000620:	e002      	b.n	8000628 <power_on+0x70>
		Count--;
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	3b01      	subs	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000628:	f7ff ff7e 	bl	8000528 <rcvr_spi>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d002      	beq.n	8000638 <power_on+0x80>
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f4      	bne.n	8000622 <power_on+0x6a>

	DESELECT();
 8000638:	f7ff ff55 	bl	80004e6 <DESELECT>
	xmit_spi(0XFF);
 800063c:	20ff      	movs	r0, #255	; 0xff
 800063e:	f7ff ff59 	bl	80004f4 <xmit_spi>

	PowerFlag = 1;
 8000642:	4b03      	ldr	r3, [pc, #12]	; (8000650 <power_on+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	2000009f 	.word	0x2000009f

08000654 <power_off>:

static
void power_off(void) {
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <power_off+0x14>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	2000009f 	.word	0x2000009f

0800066c <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <chk_power+0x14>)
 8000672:	781b      	ldrb	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	2000009f 	.word	0x2000009f

08000684 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <rcvr_datablock+0x68>)
 8000690:	220a      	movs	r2, #10
 8000692:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000694:	f7ff ff48 	bl	8000528 <rcvr_spi>
 8000698:	4603      	mov	r3, r0
 800069a:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	2bff      	cmp	r3, #255	; 0xff
 80006a0:	d104      	bne.n	80006ac <rcvr_datablock+0x28>
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <rcvr_datablock+0x68>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1f3      	bne.n	8000694 <rcvr_datablock+0x10>
	if (token != 0xFE)
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	2bfe      	cmp	r3, #254	; 0xfe
 80006b0:	d001      	beq.n	80006b6 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 80006b2:	2300      	movs	r3, #0
 80006b4:	e016      	b.n	80006e4 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff51 	bl	8000564 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff4b 	bl	8000564 <rcvr_spi_m>
	} while (btr -= 2);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	3b02      	subs	r3, #2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1ed      	bne.n	80006b6 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 80006da:	f7ff ff25 	bl	8000528 <rcvr_spi>
	rcvr_spi();
 80006de:	f7ff ff23 	bl	8000528 <rcvr_spi>

	return TRUE; /* Return with success */
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000009c 	.word	0x2000009c

080006f0 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000700:	f7ff ff3e 	bl	8000580 <wait_ready>
 8000704:	4603      	mov	r3, r0
 8000706:	2bff      	cmp	r3, #255	; 0xff
 8000708:	d001      	beq.n	800070e <xmit_datablock+0x1e>
		return FALSE;
 800070a:	2300      	movs	r3, #0
 800070c:	e040      	b.n	8000790 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 800070e:	78fb      	ldrb	r3, [r7, #3]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff feef 	bl	80004f4 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	2bfd      	cmp	r3, #253	; 0xfd
 800071a:	d031      	beq.n	8000780 <xmit_datablock+0x90>
		wc = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fee3 	bl	80004f4 <xmit_spi>
			xmit_spi(*buff++);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fedc 	bl	80004f4 <xmit_spi>
		} while (--wc);
 800073c:	7bbb      	ldrb	r3, [r7, #14]
 800073e:	3b01      	subs	r3, #1
 8000740:	73bb      	strb	r3, [r7, #14]
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1eb      	bne.n	8000720 <xmit_datablock+0x30>

		rcvr_spi();
 8000748:	f7ff feee 	bl	8000528 <rcvr_spi>
		rcvr_spi();
 800074c:	f7ff feec 	bl	8000528 <rcvr_spi>

		while (i <= 64) {
 8000750:	e00b      	b.n	800076a <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000752:	f7ff fee9 	bl	8000528 <rcvr_spi>
 8000756:	4603      	mov	r3, r0
 8000758:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	f003 031f 	and.w	r3, r3, #31
 8000760:	2b05      	cmp	r3, #5
 8000762:	d006      	beq.n	8000772 <xmit_datablock+0x82>
				break;
			i++;
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	3301      	adds	r3, #1
 8000768:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	2b40      	cmp	r3, #64	; 0x40
 800076e:	d9f0      	bls.n	8000752 <xmit_datablock+0x62>
 8000770:	e000      	b.n	8000774 <xmit_datablock+0x84>
				break;
 8000772:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000774:	bf00      	nop
 8000776:	f7ff fed7 	bl	8000528 <rcvr_spi>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0fa      	beq.n	8000776 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f003 031f 	and.w	r3, r3, #31
 8000786:	2b05      	cmp	r3, #5
 8000788:	d101      	bne.n	800078e <xmit_datablock+0x9e>
		return TRUE;
 800078a:	2301      	movs	r3, #1
 800078c:	e000      	b.n	8000790 <xmit_datablock+0xa0>
	else
		return FALSE;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 80007a4:	f7ff feec 	bl	8000580 <wait_ready>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2bff      	cmp	r3, #255	; 0xff
 80007ac:	d001      	beq.n	80007b2 <send_cmd+0x1a>
		return 0xFF;
 80007ae:	23ff      	movs	r3, #255	; 0xff
 80007b0:	e040      	b.n	8000834 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fe9d 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	0e1b      	lsrs	r3, r3, #24
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe97 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	0c1b      	lsrs	r3, r3, #16
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fe91 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fe8b 	bl	80004f4 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fe86 	bl	80004f4 <xmit_spi>
	n = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b40      	cmp	r3, #64	; 0x40
 80007f0:	d101      	bne.n	80007f6 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 80007f2:	2395      	movs	r3, #149	; 0x95
 80007f4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b48      	cmp	r3, #72	; 0x48
 80007fa:	d101      	bne.n	8000800 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 80007fc:	2387      	movs	r3, #135	; 0x87
 80007fe:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe76 	bl	80004f4 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b4c      	cmp	r3, #76	; 0x4c
 800080c:	d101      	bne.n	8000812 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 800080e:	f7ff fe8b 	bl	8000528 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8000812:	230a      	movs	r3, #10
 8000814:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8000816:	f7ff fe87 	bl	8000528 <rcvr_spi>
 800081a:	4603      	mov	r3, r0
 800081c:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 800081e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000822:	2b00      	cmp	r3, #0
 8000824:	da05      	bge.n	8000832 <send_cmd+0x9a>
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	3b01      	subs	r3, #1
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f1      	bne.n	8000816 <send_cmd+0x7e>

	return res; /* Return with the response value */
 8000832:	7bbb      	ldrb	r3, [r7, #14]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 800084c:	2301      	movs	r3, #1
 800084e:	e0d5      	b.n	80009fc <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8000850:	4b6c      	ldr	r3, [pc, #432]	; (8000a04 <disk_initialize+0x1c8>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <disk_initialize+0x1c8>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	e0ca      	b.n	80009fc <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8000866:	f7ff fea7 	bl	80005b8 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 800086a:	f7ff fe35 	bl	80004d8 <SELECT>
	ty = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8000872:	2100      	movs	r1, #0
 8000874:	2040      	movs	r0, #64	; 0x40
 8000876:	f7ff ff8f 	bl	8000798 <send_cmd>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 80a5 	bne.w	80009cc <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8000882:	4b61      	ldr	r3, [pc, #388]	; (8000a08 <disk_initialize+0x1cc>)
 8000884:	2264      	movs	r2, #100	; 0x64
 8000886:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8000888:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800088c:	2048      	movs	r0, #72	; 0x48
 800088e:	f7ff ff83 	bl	8000798 <send_cmd>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d158      	bne.n	800094a <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e00c      	b.n	80008b8 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800089e:	7bfc      	ldrb	r4, [r7, #15]
 80008a0:	f7ff fe42 	bl	8000528 <rcvr_spi>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4423      	add	r3, r4
 80008ae:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	3301      	adds	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d9ef      	bls.n	800089e <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 80008be:	7abb      	ldrb	r3, [r7, #10]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	f040 8083 	bne.w	80009cc <disk_initialize+0x190>
 80008c6:	7afb      	ldrb	r3, [r7, #11]
 80008c8:	2baa      	cmp	r3, #170	; 0xaa
 80008ca:	d17f      	bne.n	80009cc <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 80008cc:	2100      	movs	r1, #0
 80008ce:	2077      	movs	r0, #119	; 0x77
 80008d0:	f7ff ff62 	bl	8000798 <send_cmd>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d807      	bhi.n	80008ea <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80008da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008de:	2069      	movs	r0, #105	; 0x69
 80008e0:	f7ff ff5a 	bl	8000798 <send_cmd>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d005      	beq.n	80008f6 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80008ea:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <disk_initialize+0x1cc>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1eb      	bne.n	80008cc <disk_initialize+0x90>
 80008f4:	e000      	b.n	80008f8 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80008f6:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80008f8:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <disk_initialize+0x1cc>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d064      	beq.n	80009cc <disk_initialize+0x190>
 8000902:	2100      	movs	r1, #0
 8000904:	207a      	movs	r0, #122	; 0x7a
 8000906:	f7ff ff47 	bl	8000798 <send_cmd>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d15d      	bne.n	80009cc <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8000910:	2300      	movs	r3, #0
 8000912:	73fb      	strb	r3, [r7, #15]
 8000914:	e00c      	b.n	8000930 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8000916:	7bfc      	ldrb	r4, [r7, #15]
 8000918:	f7ff fe06 	bl	8000528 <rcvr_spi>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4423      	add	r3, r4
 8000926:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	3301      	adds	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	2b03      	cmp	r3, #3
 8000934:	d9ef      	bls.n	8000916 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8000936:	7a3b      	ldrb	r3, [r7, #8]
 8000938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <disk_initialize+0x108>
 8000940:	2306      	movs	r3, #6
 8000942:	e000      	b.n	8000946 <disk_initialize+0x10a>
 8000944:	2302      	movs	r3, #2
 8000946:	73bb      	strb	r3, [r7, #14]
 8000948:	e040      	b.n	80009cc <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800094a:	2100      	movs	r1, #0
 800094c:	2077      	movs	r0, #119	; 0x77
 800094e:	f7ff ff23 	bl	8000798 <send_cmd>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	d808      	bhi.n	800096a <disk_initialize+0x12e>
 8000958:	2100      	movs	r1, #0
 800095a:	2069      	movs	r0, #105	; 0x69
 800095c:	f7ff ff1c 	bl	8000798 <send_cmd>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d801      	bhi.n	800096a <disk_initialize+0x12e>
 8000966:	2302      	movs	r3, #2
 8000968:	e000      	b.n	800096c <disk_initialize+0x130>
 800096a:	2301      	movs	r3, #1
 800096c:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 800096e:	7bbb      	ldrb	r3, [r7, #14]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d10e      	bne.n	8000992 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8000974:	2100      	movs	r1, #0
 8000976:	2077      	movs	r0, #119	; 0x77
 8000978:	f7ff ff0e 	bl	8000798 <send_cmd>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d80e      	bhi.n	80009a0 <disk_initialize+0x164>
 8000982:	2100      	movs	r1, #0
 8000984:	2069      	movs	r0, #105	; 0x69
 8000986:	f7ff ff07 	bl	8000798 <send_cmd>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d107      	bne.n	80009a0 <disk_initialize+0x164>
						break; /* ACMD41 */
 8000990:	e00d      	b.n	80009ae <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8000992:	2100      	movs	r1, #0
 8000994:	2041      	movs	r0, #65	; 0x41
 8000996:	f7ff feff 	bl	8000798 <send_cmd>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d005      	beq.n	80009ac <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <disk_initialize+0x1cc>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1e1      	bne.n	800096e <disk_initialize+0x132>
 80009aa:	e000      	b.n	80009ae <disk_initialize+0x172>
						break; /* CMD1 */
 80009ac:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <disk_initialize+0x1cc>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d007      	beq.n	80009c8 <disk_initialize+0x18c>
 80009b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009bc:	2050      	movs	r0, #80	; 0x50
 80009be:	f7ff feeb 	bl	8000798 <send_cmd>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <disk_initialize+0x190>
				ty = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 80009cc:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <disk_initialize+0x1d0>)
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80009d2:	f7ff fd88 	bl	80004e6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80009d6:	f7ff fda7 	bl	8000528 <rcvr_spi>

	if (ty) /* Initialization succeded */
 80009da:	7bbb      	ldrb	r3, [r7, #14]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d008      	beq.n	80009f2 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <disk_initialize+0x1c8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f023 0301 	bic.w	r3, r3, #1
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <disk_initialize+0x1c8>)
 80009ee:	701a      	strb	r2, [r3, #0]
 80009f0:	e001      	b.n	80009f6 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80009f2:	f7ff fe2f 	bl	8000654 <power_off>

	return Stat;
 80009f6:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <disk_initialize+0x1c8>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	2000009c 	.word	0x2000009c
 8000a0c:	2000009e 	.word	0x2000009e

08000a10 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000a20:	2301      	movs	r3, #1
 8000a22:	e002      	b.n	8000a2a <disk_status+0x1a>
	return Stat;
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <disk_status+0x28>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000000 	.word	0x20000000

08000a3c <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	4603      	mov	r3, r0
 8000a4a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d102      	bne.n	8000a58 <disk_read+0x1c>
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <disk_read+0x20>
		return RES_PARERR;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	e051      	b.n	8000b00 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <disk_read+0xcc>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <disk_read+0x32>
		return RES_NOTRDY;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e048      	b.n	8000b00 <disk_read+0xc4>

	if (!(CardType & 4))
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <disk_read+0xd0>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	025b      	lsls	r3, r3, #9
 8000a7e:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000a80:	f7ff fd2a 	bl	80004d8 <SELECT>

	if (count == 1) { /* Single block read */
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d111      	bne.n	8000aae <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2051      	movs	r0, #81	; 0x51
 8000a8e:	f7ff fe83 	bl	8000798 <send_cmd>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d129      	bne.n	8000aec <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8000a98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9c:	68b8      	ldr	r0, [r7, #8]
 8000a9e:	f7ff fdf1 	bl	8000684 <rcvr_datablock>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d021      	beq.n	8000aec <disk_read+0xb0>
			count = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	e01e      	b.n	8000aec <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2052      	movs	r0, #82	; 0x52
 8000ab2:	f7ff fe71 	bl	8000798 <send_cmd>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d117      	bne.n	8000aec <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8000abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac0:	68b8      	ldr	r0, [r7, #8]
 8000ac2:	f7ff fddf 	bl	8000684 <rcvr_datablock>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00a      	beq.n	8000ae2 <disk_read+0xa6>
					break;
				buff += 512;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ad2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1ed      	bne.n	8000abc <disk_read+0x80>
 8000ae0:	e000      	b.n	8000ae4 <disk_read+0xa8>
					break;
 8000ae2:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	204c      	movs	r0, #76	; 0x4c
 8000ae8:	f7ff fe56 	bl	8000798 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8000aec:	f7ff fcfb 	bl	80004e6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000af0:	f7ff fd1a 	bl	8000528 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bf14      	ite	ne
 8000afa:	2301      	movne	r3, #1
 8000afc:	2300      	moveq	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	2000009e 	.word	0x2000009e

08000b10 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <disk_write+0x1c>
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <disk_write+0x20>
		return RES_PARERR;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	e06b      	b.n	8000c08 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8000b30:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <disk_write+0x100>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <disk_write+0x32>
		return RES_NOTRDY;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e062      	b.n	8000c08 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8000b42:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <disk_write+0x100>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <disk_write+0x44>
		return RES_WRPRT;
 8000b50:	2302      	movs	r3, #2
 8000b52:	e059      	b.n	8000c08 <disk_write+0xf8>

	if (!(CardType & 4))
 8000b54:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <disk_write+0x104>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	025b      	lsls	r3, r3, #9
 8000b64:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000b66:	f7ff fcb7 	bl	80004d8 <SELECT>

	if (count == 1) { /* Single block write */
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d110      	bne.n	8000b92 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	2058      	movs	r0, #88	; 0x58
 8000b74:	f7ff fe10 	bl	8000798 <send_cmd>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d13a      	bne.n	8000bf4 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8000b7e:	21fe      	movs	r1, #254	; 0xfe
 8000b80:	68b8      	ldr	r0, [r7, #8]
 8000b82:	f7ff fdb5 	bl	80006f0 <xmit_datablock>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d033      	beq.n	8000bf4 <disk_write+0xe4>
			count = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	e030      	b.n	8000bf4 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <disk_write+0x104>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d007      	beq.n	8000bae <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2077      	movs	r0, #119	; 0x77
 8000ba2:	f7ff fdf9 	bl	8000798 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8000ba6:	6839      	ldr	r1, [r7, #0]
 8000ba8:	2057      	movs	r0, #87	; 0x57
 8000baa:	f7ff fdf5 	bl	8000798 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2059      	movs	r0, #89	; 0x59
 8000bb2:	f7ff fdf1 	bl	8000798 <send_cmd>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d11b      	bne.n	8000bf4 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8000bbc:	21fc      	movs	r1, #252	; 0xfc
 8000bbe:	68b8      	ldr	r0, [r7, #8]
 8000bc0:	f7ff fd96 	bl	80006f0 <xmit_datablock>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00a      	beq.n	8000be0 <disk_write+0xd0>
					break;
				buff += 512;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bd0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1ee      	bne.n	8000bbc <disk_write+0xac>
 8000bde:	e000      	b.n	8000be2 <disk_write+0xd2>
					break;
 8000be0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8000be2:	21fd      	movs	r1, #253	; 0xfd
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff fd83 	bl	80006f0 <xmit_datablock>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <disk_write+0xe4>
				count = 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8000bf4:	f7ff fc77 	bl	80004e6 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000bf8:	f7ff fc96 	bl	8000528 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf14      	ite	ne
 8000c02:	2301      	movne	r3, #1
 8000c04:	2300      	moveq	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000000 	.word	0x20000000
 8000c14:	2000009e 	.word	0x2000009e

08000c18 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b08b      	sub	sp, #44	; 0x2c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	603a      	str	r2, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	460b      	mov	r3, r1
 8000c26:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <disk_ioctl+0x1e>
		return RES_PARERR;
 8000c32:	2304      	movs	r3, #4
 8000c34:	e16a      	b.n	8000f0c <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	d127      	bne.n	8000c92 <disk_ioctl+0x7a>
		switch (*ptr) {
 8000c42:	6a3b      	ldr	r3, [r7, #32]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d00e      	beq.n	8000c68 <disk_ioctl+0x50>
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d012      	beq.n	8000c74 <disk_ioctl+0x5c>
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d11b      	bne.n	8000c8a <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 8000c52:	f7ff fd0b 	bl	800066c <chk_power>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <disk_ioctl+0x48>
				power_off(); /* Power off */
 8000c5c:	f7ff fcfa 	bl	8000654 <power_off>
			res = RES_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c66:	e14f      	b.n	8000f08 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8000c68:	f7ff fca6 	bl	80005b8 <power_on>
			res = RES_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c72:	e149      	b.n	8000f08 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8000c74:	f7ff fcfa 	bl	800066c <chk_power>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	6a3b      	ldr	r3, [r7, #32]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c88:	e13e      	b.n	8000f08 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c90:	e13a      	b.n	8000f08 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8000c92:	4ba0      	ldr	r3, [pc, #640]	; (8000f14 <disk_ioctl+0x2fc>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e133      	b.n	8000f0c <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8000ca4:	f7ff fc18 	bl	80004d8 <SELECT>

		switch (ctrl) {
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	2b35      	cmp	r3, #53	; 0x35
 8000cac:	f200 811d 	bhi.w	8000eea <disk_ioctl+0x2d2>
 8000cb0:	a201      	add	r2, pc, #4	; (adr r2, 8000cb8 <disk_ioctl+0xa0>)
 8000cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb6:	bf00      	nop
 8000cb8:	08000e53 	.word	0x08000e53
 8000cbc:	08000d91 	.word	0x08000d91
 8000cc0:	08000e43 	.word	0x08000e43
 8000cc4:	08000eeb 	.word	0x08000eeb
 8000cc8:	08000eeb 	.word	0x08000eeb
 8000ccc:	08000eeb 	.word	0x08000eeb
 8000cd0:	08000eeb 	.word	0x08000eeb
 8000cd4:	08000eeb 	.word	0x08000eeb
 8000cd8:	08000eeb 	.word	0x08000eeb
 8000cdc:	08000eeb 	.word	0x08000eeb
 8000ce0:	08000eeb 	.word	0x08000eeb
 8000ce4:	08000eeb 	.word	0x08000eeb
 8000ce8:	08000eeb 	.word	0x08000eeb
 8000cec:	08000eeb 	.word	0x08000eeb
 8000cf0:	08000eeb 	.word	0x08000eeb
 8000cf4:	08000eeb 	.word	0x08000eeb
 8000cf8:	08000eeb 	.word	0x08000eeb
 8000cfc:	08000eeb 	.word	0x08000eeb
 8000d00:	08000eeb 	.word	0x08000eeb
 8000d04:	08000eeb 	.word	0x08000eeb
 8000d08:	08000eeb 	.word	0x08000eeb
 8000d0c:	08000eeb 	.word	0x08000eeb
 8000d10:	08000eeb 	.word	0x08000eeb
 8000d14:	08000eeb 	.word	0x08000eeb
 8000d18:	08000eeb 	.word	0x08000eeb
 8000d1c:	08000eeb 	.word	0x08000eeb
 8000d20:	08000eeb 	.word	0x08000eeb
 8000d24:	08000eeb 	.word	0x08000eeb
 8000d28:	08000eeb 	.word	0x08000eeb
 8000d2c:	08000eeb 	.word	0x08000eeb
 8000d30:	08000eeb 	.word	0x08000eeb
 8000d34:	08000eeb 	.word	0x08000eeb
 8000d38:	08000eeb 	.word	0x08000eeb
 8000d3c:	08000eeb 	.word	0x08000eeb
 8000d40:	08000eeb 	.word	0x08000eeb
 8000d44:	08000eeb 	.word	0x08000eeb
 8000d48:	08000eeb 	.word	0x08000eeb
 8000d4c:	08000eeb 	.word	0x08000eeb
 8000d50:	08000eeb 	.word	0x08000eeb
 8000d54:	08000eeb 	.word	0x08000eeb
 8000d58:	08000eeb 	.word	0x08000eeb
 8000d5c:	08000eeb 	.word	0x08000eeb
 8000d60:	08000eeb 	.word	0x08000eeb
 8000d64:	08000eeb 	.word	0x08000eeb
 8000d68:	08000eeb 	.word	0x08000eeb
 8000d6c:	08000eeb 	.word	0x08000eeb
 8000d70:	08000eeb 	.word	0x08000eeb
 8000d74:	08000eeb 	.word	0x08000eeb
 8000d78:	08000eeb 	.word	0x08000eeb
 8000d7c:	08000eeb 	.word	0x08000eeb
 8000d80:	08000eeb 	.word	0x08000eeb
 8000d84:	08000e65 	.word	0x08000e65
 8000d88:	08000e89 	.word	0x08000e89
 8000d8c:	08000ead 	.word	0x08000ead
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8000d90:	2100      	movs	r1, #0
 8000d92:	2049      	movs	r0, #73	; 0x49
 8000d94:	f7ff fd00 	bl	8000798 <send_cmd>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 80a9 	bne.w	8000ef2 <disk_ioctl+0x2da>
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2110      	movs	r1, #16
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc6c 	bl	8000684 <rcvr_datablock>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 809f 	beq.w	8000ef2 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8000db4:	7b3b      	ldrb	r3, [r7, #12]
 8000db6:	099b      	lsrs	r3, r3, #6
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d10e      	bne.n	8000ddc <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dbe:	7d7b      	ldrb	r3, [r7, #21]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	7d3b      	ldrb	r3, [r7, #20]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4413      	add	r3, r2
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3301      	adds	r3, #1
 8000dd0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dd2:	8bfb      	ldrh	r3, [r7, #30]
 8000dd4:	029a      	lsls	r2, r3, #10
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e02e      	b.n	8000e3a <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000ddc:	7c7b      	ldrb	r3, [r7, #17]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	7dbb      	ldrb	r3, [r7, #22]
 8000de6:	09db      	lsrs	r3, r3, #7
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8000dee:	7d7b      	ldrb	r3, [r7, #21]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 0306 	and.w	r3, r3, #6
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000dfe:	3302      	adds	r3, #2
 8000e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000e04:	7d3b      	ldrb	r3, [r7, #20]
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	7cfb      	ldrb	r3, [r7, #19]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8000e18:	7cbb      	ldrb	r3, [r7, #18]
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000e28:	3301      	adds	r3, #1
 8000e2a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e2c:	8bfa      	ldrh	r2, [r7, #30]
 8000e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e32:	3b09      	subs	r3, #9
 8000e34:	409a      	lsls	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e40:	e057      	b.n	8000ef2 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e48:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e50:	e056      	b.n	8000f00 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8000e52:	f7ff fb95 	bl	8000580 <wait_ready>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2bff      	cmp	r3, #255	; 0xff
 8000e5a:	d14c      	bne.n	8000ef6 <disk_ioctl+0x2de>
				res = RES_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e62:	e048      	b.n	8000ef6 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8000e64:	2100      	movs	r1, #0
 8000e66:	2049      	movs	r0, #73	; 0x49
 8000e68:	f7ff fc96 	bl	8000798 <send_cmd>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d143      	bne.n	8000efa <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8000e72:	2110      	movs	r1, #16
 8000e74:	6a38      	ldr	r0, [r7, #32]
 8000e76:	f7ff fc05 	bl	8000684 <rcvr_datablock>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d03c      	beq.n	8000efa <disk_ioctl+0x2e2>
				res = RES_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e86:	e038      	b.n	8000efa <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8000e88:	2100      	movs	r1, #0
 8000e8a:	204a      	movs	r0, #74	; 0x4a
 8000e8c:	f7ff fc84 	bl	8000798 <send_cmd>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d133      	bne.n	8000efe <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8000e96:	2110      	movs	r1, #16
 8000e98:	6a38      	ldr	r0, [r7, #32]
 8000e9a:	f7ff fbf3 	bl	8000684 <rcvr_datablock>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d02c      	beq.n	8000efe <disk_ioctl+0x2e6>
				res = RES_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000eaa:	e028      	b.n	8000efe <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8000eac:	2100      	movs	r1, #0
 8000eae:	207a      	movs	r0, #122	; 0x7a
 8000eb0:	f7ff fc72 	bl	8000798 <send_cmd>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d117      	bne.n	8000eea <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ec0:	e00b      	b.n	8000eda <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8000ec2:	6a3c      	ldr	r4, [r7, #32]
 8000ec4:	1c63      	adds	r3, r4, #1
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	f7ff fb2e 	bl	8000528 <rcvr_spi>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d9ef      	bls.n	8000ec2 <disk_ioctl+0x2aa>
				res = RES_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000ee8:	e00a      	b.n	8000f00 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8000eea:	2304      	movs	r3, #4
 8000eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ef0:	e006      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000ef2:	bf00      	nop
 8000ef4:	e004      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000ef6:	bf00      	nop
 8000ef8:	e002      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000efa:	bf00      	nop
 8000efc:	e000      	b.n	8000f00 <disk_ioctl+0x2e8>
			break;
 8000efe:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8000f00:	f7ff faf1 	bl	80004e6 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8000f04:	f7ff fb10 	bl	8000528 <rcvr_spi>
	}

	return res;
 8000f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	372c      	adds	r7, #44	; 0x2c
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	20000000 	.word	0x20000000

08000f18 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <disk_timerproc+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d005      	beq.n	8000f36 <disk_timerproc+0x1e>
		Timer1 = --n;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <disk_timerproc+0x44>)
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <disk_timerproc+0x48>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <disk_timerproc+0x36>
		Timer2 = --n;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <disk_timerproc+0x48>)
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	7013      	strb	r3, [r2, #0]

}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	2000009c 	.word	0x2000009c
 8000f60:	2000009d 	.word	0x2000009d

08000f64 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f74:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	2b09      	cmp	r3, #9
 8000f7e:	d904      	bls.n	8000f8a <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <sdcard_systick_timerproc+0x2c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8000f86:	f7ff ffc7 	bl	8000f18 <disk_timerproc>
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000304 	.word	0x20000304

08000f94 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	36c55cc0 	.word	0x36c55cc0

08000fa8 <ld_word>:
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	81fb      	strh	r3, [r7, #14]
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	81fb      	strh	r3, [r7, #14]
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <ld_dword>:
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3303      	adds	r3, #3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	3202      	adds	r2, #2
 8000ff0:	7812      	ldrb	r2, [r2, #0]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	3201      	adds	r2, #1
 8000ffe:	7812      	ldrb	r2, [r2, #0]
 8001000:	4313      	orrs	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	7812      	ldrb	r2, [r2, #0]
 800100c:	4313      	orrs	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <st_word>:
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	887a      	ldrh	r2, [r7, #2]
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	807b      	strh	r3, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <st_dword>:
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	0a1b      	lsrs	r3, r3, #8
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <mem_cpy>:
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00d      	beq.n	80010e2 <mem_cpy+0x36>
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	1c53      	adds	r3, r2, #1
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	1c59      	adds	r1, r3, #1
 80010d0:	6179      	str	r1, [r7, #20]
 80010d2:	7812      	ldrb	r2, [r2, #0]
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3b01      	subs	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f1      	bne.n	80010c6 <mem_cpy+0x1a>
 80010e2:	bf00      	nop
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <mem_set>:
 80010ee:	b480      	push	{r7}
 80010f0:	b087      	sub	sp, #28
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	617a      	str	r2, [r7, #20]
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3b01      	subs	r3, #1
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f3      	bne.n	80010fe <mem_set+0x10>
 8001116:	bf00      	nop
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <mem_cmp>:
 8001122:	b480      	push	{r7}
 8001124:	b089      	sub	sp, #36	; 0x24
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	61fa      	str	r2, [r7, #28]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	61ba      	str	r2, [r7, #24]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	1acb      	subs	r3, r1, r3
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <mem_cmp+0x40>
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0eb      	beq.n	800113a <mem_cmp+0x18>
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	4618      	mov	r0, r3
 8001166:	3724      	adds	r7, #36	; 0x24
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <chk_chr>:
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	e002      	b.n	8001182 <chk_chr+0x12>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3301      	adds	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <chk_chr+0x26>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4293      	cmp	r3, r2
 8001194:	d1f2      	bne.n	800117c <chk_chr+0xc>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <dbc_1st>:
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	2281      	movs	r2, #129	; 0x81
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d30f      	bcc.n	80011d8 <dbc_1st+0x32>
 80011b8:	229f      	movs	r2, #159	; 0x9f
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4293      	cmp	r3, r2
 80011be:	d801      	bhi.n	80011c4 <dbc_1st+0x1e>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e00a      	b.n	80011da <dbc_1st+0x34>
 80011c4:	22e0      	movs	r2, #224	; 0xe0
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d305      	bcc.n	80011d8 <dbc_1st+0x32>
 80011cc:	22fc      	movs	r2, #252	; 0xfc
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d801      	bhi.n	80011d8 <dbc_1st+0x32>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <dbc_1st+0x34>
 80011d8:	2300      	movs	r3, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <dbc_2nd>:
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	2240      	movs	r2, #64	; 0x40
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d319      	bcc.n	800122c <dbc_2nd+0x46>
 80011f8:	227e      	movs	r2, #126	; 0x7e
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d801      	bhi.n	8001204 <dbc_2nd+0x1e>
 8001200:	2301      	movs	r3, #1
 8001202:	e014      	b.n	800122e <dbc_2nd+0x48>
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	4293      	cmp	r3, r2
 800120a:	d305      	bcc.n	8001218 <dbc_2nd+0x32>
 800120c:	22fc      	movs	r2, #252	; 0xfc
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4293      	cmp	r3, r2
 8001212:	d801      	bhi.n	8001218 <dbc_2nd+0x32>
 8001214:	2301      	movs	r3, #1
 8001216:	e00a      	b.n	800122e <dbc_2nd+0x48>
 8001218:	2200      	movs	r2, #0
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4293      	cmp	r3, r2
 800121e:	d305      	bcc.n	800122c <dbc_2nd+0x46>
 8001220:	2200      	movs	r2, #0
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4293      	cmp	r3, r2
 8001226:	d801      	bhi.n	800122c <dbc_2nd+0x46>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <dbc_2nd+0x48>
 800122c:	2300      	movs	r3, #0
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <sync_window>:
 800123a:	b580      	push	{r7, lr}
 800123c:	b084      	sub	sp, #16
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	78db      	ldrb	r3, [r3, #3]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d02c      	beq.n	80012a8 <sync_window+0x6e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7858      	ldrb	r0, [r3, #1]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800125c:	2301      	movs	r3, #1
 800125e:	f7ff fc57 	bl	8000b10 <disk_write>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d11d      	bne.n	80012a4 <sync_window+0x6a>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	70da      	strb	r2, [r3, #3]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	1ad2      	subs	r2, r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	429a      	cmp	r2, r3
 800127e:	d213      	bcs.n	80012a8 <sync_window+0x6e>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	789b      	ldrb	r3, [r3, #2]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d10f      	bne.n	80012a8 <sync_window+0x6e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7858      	ldrb	r0, [r3, #1]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	441a      	add	r2, r3
 800129c:	2301      	movs	r3, #1
 800129e:	f7ff fc37 	bl	8000b10 <disk_write>
 80012a2:	e001      	b.n	80012a8 <sync_window+0x6e>
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <move_window>:
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d01b      	beq.n	8001302 <move_window+0x50>
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffb5 	bl	800123a <sync_window>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d113      	bne.n	8001302 <move_window+0x50>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7858      	ldrb	r0, [r3, #1]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80012e4:	2301      	movs	r3, #1
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	f7ff fba8 	bl	8000a3c <disk_read>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <move_window+0x4a>
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <sync_fs>:
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff90 	bl	800123a <sync_window>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d158      	bne.n	80013d6 <sync_fs+0xca>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d148      	bne.n	80013be <sync_fs+0xb2>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	791b      	ldrb	r3, [r3, #4]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d144      	bne.n	80013be <sync_fs+0xb2>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3330      	adds	r3, #48	; 0x30
 8001338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fed5 	bl	80010ee <mem_set>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3330      	adds	r3, #48	; 0x30
 8001348:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800134c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe64 	bl	800101e <st_word>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3330      	adds	r3, #48	; 0x30
 800135a:	4921      	ldr	r1, [pc, #132]	; (80013e0 <sync_fs+0xd4>)
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fe79 	bl	8001054 <st_dword>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3330      	adds	r3, #48	; 0x30
 8001366:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800136a:	491e      	ldr	r1, [pc, #120]	; (80013e4 <sync_fs+0xd8>)
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe71 	bl	8001054 <st_dword>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3330      	adds	r3, #48	; 0x30
 8001376:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	4619      	mov	r1, r3
 8001380:	4610      	mov	r0, r2
 8001382:	f7ff fe67 	bl	8001054 <st_dword>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3330      	adds	r3, #48	; 0x30
 800138a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	4619      	mov	r1, r3
 8001394:	4610      	mov	r0, r2
 8001396:	f7ff fe5d 	bl	8001054 <st_dword>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7858      	ldrb	r0, [r3, #1]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b2:	2301      	movs	r3, #1
 80013b4:	f7ff fbac 	bl	8000b10 <disk_write>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	711a      	strb	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	785b      	ldrb	r3, [r3, #1]
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fc26 	bl	8000c18 <disk_ioctl>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <sync_fs+0xca>
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	41615252 	.word	0x41615252
 80013e4:	61417272 	.word	0x61417272

080013e8 <clst2sect>:
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	3b02      	subs	r3, #2
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	3b02      	subs	r3, #2
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d301      	bcc.n	8001408 <clst2sect+0x20>
 8001404:	2300      	movs	r3, #0
 8001406:	e008      	b.n	800141a <clst2sect+0x32>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	895b      	ldrh	r3, [r3, #10]
 8001410:	4619      	mov	r1, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	fb03 f301 	mul.w	r3, r3, r1
 8001418:	4413      	add	r3, r2
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <get_fat>:
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d904      	bls.n	8001446 <get_fat+0x20>
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d302      	bcc.n	800144c <get_fat+0x26>
 8001446:	2301      	movs	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	e08c      	b.n	8001566 <get_fat+0x140>
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d045      	beq.n	80014e6 <get_fat+0xc0>
 800145a:	2b03      	cmp	r3, #3
 800145c:	d05d      	beq.n	800151a <get_fat+0xf4>
 800145e:	2b01      	cmp	r3, #1
 8001460:	d177      	bne.n	8001552 <get_fat+0x12c>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4413      	add	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	6a1a      	ldr	r2, [r3, #32]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	0a5b      	lsrs	r3, r3, #9
 8001478:	4413      	add	r3, r2
 800147a:	4619      	mov	r1, r3
 800147c:	6938      	ldr	r0, [r7, #16]
 800147e:	f7ff ff18 	bl	80012b2 <move_window>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d167      	bne.n	8001558 <get_fat+0x132>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60fa      	str	r2, [r7, #12]
 800148e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4413      	add	r3, r2
 8001496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6a1a      	ldr	r2, [r3, #32]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	0a5b      	lsrs	r3, r3, #9
 80014a4:	4413      	add	r3, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	6938      	ldr	r0, [r7, #16]
 80014aa:	f7ff ff02 	bl	80012b2 <move_window>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d153      	bne.n	800155c <get_fat+0x136>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	461a      	mov	r2, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <get_fat+0xb6>
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	e002      	b.n	80014e2 <get_fat+0xbc>
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e03f      	b.n	8001566 <get_fat+0x140>
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	6a1a      	ldr	r2, [r3, #32]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	4413      	add	r3, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	6938      	ldr	r0, [r7, #16]
 80014f4:	f7ff fedd 	bl	80012b2 <move_window>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d130      	bne.n	8001560 <get_fat+0x13a>
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800150c:	4413      	add	r3, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fd4a 	bl	8000fa8 <ld_word>
 8001514:	4603      	mov	r3, r0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e025      	b.n	8001566 <get_fat+0x140>
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	6a1a      	ldr	r2, [r3, #32]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	09db      	lsrs	r3, r3, #7
 8001522:	4413      	add	r3, r2
 8001524:	4619      	mov	r1, r3
 8001526:	6938      	ldr	r0, [r7, #16]
 8001528:	f7ff fec3 	bl	80012b2 <move_window>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d118      	bne.n	8001564 <get_fat+0x13e>
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001540:	4413      	add	r3, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fd48 	bl	8000fd8 <ld_dword>
 8001548:	4603      	mov	r3, r0
 800154a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e009      	b.n	8001566 <get_fat+0x140>
 8001552:	2301      	movs	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	e006      	b.n	8001566 <get_fat+0x140>
 8001558:	bf00      	nop
 800155a:	e004      	b.n	8001566 <get_fat+0x140>
 800155c:	bf00      	nop
 800155e:	e002      	b.n	8001566 <get_fat+0x140>
 8001560:	bf00      	nop
 8001562:	e000      	b.n	8001566 <get_fat+0x140>
 8001564:	bf00      	nop
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <put_fat>:
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	2302      	movs	r3, #2
 800157e:	77fb      	strb	r3, [r7, #31]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b01      	cmp	r3, #1
 8001584:	f240 80d6 	bls.w	8001734 <put_fat+0x1c4>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	429a      	cmp	r2, r3
 8001590:	f080 80d0 	bcs.w	8001734 <put_fat+0x1c4>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d073      	beq.n	8001684 <put_fat+0x114>
 800159c:	2b03      	cmp	r3, #3
 800159e:	f000 8091 	beq.w	80016c4 <put_fat+0x154>
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	f040 80c6 	bne.w	8001734 <put_fat+0x1c4>
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4413      	add	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	0a5b      	lsrs	r3, r3, #9
 80015be:	4413      	add	r3, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f7ff fe75 	bl	80012b2 <move_window>
 80015c8:	4603      	mov	r3, r0
 80015ca:	77fb      	strb	r3, [r7, #31]
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f040 80a9 	bne.w	8001726 <put_fat+0x1b6>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	61b9      	str	r1, [r7, #24]
 80015e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e4:	4413      	add	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00d      	beq.n	800160e <put_fat+0x9e>
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	b25a      	sxtb	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	b25b      	sxtb	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b25b      	sxtb	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	e001      	b.n	8001612 <put_fat+0xa2>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	7013      	strb	r3, [r2, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2201      	movs	r2, #1
 800161a:	70da      	strb	r2, [r3, #3]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a1a      	ldr	r2, [r3, #32]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	0a5b      	lsrs	r3, r3, #9
 8001624:	4413      	add	r3, r2
 8001626:	4619      	mov	r1, r3
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fe42 	bl	80012b2 <move_window>
 800162e:	4603      	mov	r3, r0
 8001630:	77fb      	strb	r3, [r7, #31]
 8001632:	7ffb      	ldrb	r3, [r7, #31]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d178      	bne.n	800172a <put_fat+0x1ba>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001644:	4413      	add	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <put_fat+0xea>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	b2db      	uxtb	r3, r3
 8001658:	e00e      	b.n	8001678 <put_fat+0x108>
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b25b      	sxtb	r3, r3
 8001660:	f023 030f 	bic.w	r3, r3, #15
 8001664:	b25a      	sxtb	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	b25b      	sxtb	r3, r3
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	b25b      	sxtb	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	7013      	strb	r3, [r2, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2201      	movs	r2, #1
 8001680:	70da      	strb	r2, [r3, #3]
 8001682:	e057      	b.n	8001734 <put_fat+0x1c4>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6a1a      	ldr	r2, [r3, #32]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	4413      	add	r3, r2
 800168e:	4619      	mov	r1, r3
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff fe0e 	bl	80012b2 <move_window>
 8001696:	4603      	mov	r3, r0
 8001698:	77fb      	strb	r3, [r7, #31]
 800169a:	7ffb      	ldrb	r3, [r7, #31]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d146      	bne.n	800172e <put_fat+0x1be>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80016ae:	4413      	add	r3, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	b292      	uxth	r2, r2
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fcb1 	bl	800101e <st_word>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2201      	movs	r2, #1
 80016c0:	70da      	strb	r2, [r3, #3]
 80016c2:	e037      	b.n	8001734 <put_fat+0x1c4>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	09db      	lsrs	r3, r3, #7
 80016cc:	4413      	add	r3, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff fdee 	bl	80012b2 <move_window>
 80016d6:	4603      	mov	r3, r0
 80016d8:	77fb      	strb	r3, [r7, #31]
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d128      	bne.n	8001732 <put_fat+0x1c2>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80016f4:	4413      	add	r3, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fc6e 	bl	8000fd8 <ld_dword>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001702:	4323      	orrs	r3, r4
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001714:	4413      	add	r3, r2
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fc9b 	bl	8001054 <st_dword>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2201      	movs	r2, #1
 8001722:	70da      	strb	r2, [r3, #3]
 8001724:	e006      	b.n	8001734 <put_fat+0x1c4>
 8001726:	bf00      	nop
 8001728:	e004      	b.n	8001734 <put_fat+0x1c4>
 800172a:	bf00      	nop
 800172c:	e002      	b.n	8001734 <put_fat+0x1c4>
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <put_fat+0x1c4>
 8001732:	bf00      	nop
 8001734:	7ffb      	ldrb	r3, [r7, #31]
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd90      	pop	{r4, r7, pc}

0800173e <remove_chain>:
 800173e:	b580      	push	{r7, lr}
 8001740:	b088      	sub	sp, #32
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	2300      	movs	r3, #0
 800174c:	77fb      	strb	r3, [r7, #31]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d904      	bls.n	8001764 <remove_chain+0x26>
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	429a      	cmp	r2, r3
 8001762:	d301      	bcc.n	8001768 <remove_chain+0x2a>
 8001764:	2302      	movs	r3, #2
 8001766:	e04b      	b.n	8001800 <remove_chain+0xc2>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00c      	beq.n	8001788 <remove_chain+0x4a>
 800176e:	f04f 32ff 	mov.w	r2, #4294967295
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	69b8      	ldr	r0, [r7, #24]
 8001776:	f7ff fefb 	bl	8001570 <put_fat>
 800177a:	4603      	mov	r3, r0
 800177c:	77fb      	strb	r3, [r7, #31]
 800177e:	7ffb      	ldrb	r3, [r7, #31]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <remove_chain+0x4a>
 8001784:	7ffb      	ldrb	r3, [r7, #31]
 8001786:	e03b      	b.n	8001800 <remove_chain+0xc2>
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f7ff fe4b 	bl	8001426 <get_fat>
 8001790:	6178      	str	r0, [r7, #20]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d031      	beq.n	80017fc <remove_chain+0xbe>
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <remove_chain+0x64>
 800179e:	2302      	movs	r3, #2
 80017a0:	e02e      	b.n	8001800 <remove_chain+0xc2>
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a8:	d101      	bne.n	80017ae <remove_chain+0x70>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e028      	b.n	8001800 <remove_chain+0xc2>
 80017ae:	2200      	movs	r2, #0
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	69b8      	ldr	r0, [r7, #24]
 80017b4:	f7ff fedc 	bl	8001570 <put_fat>
 80017b8:	4603      	mov	r3, r0
 80017ba:	77fb      	strb	r3, [r7, #31]
 80017bc:	7ffb      	ldrb	r3, [r7, #31]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <remove_chain+0x88>
 80017c2:	7ffb      	ldrb	r3, [r7, #31]
 80017c4:	e01c      	b.n	8001800 <remove_chain+0xc2>
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	3b02      	subs	r3, #2
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d20b      	bcs.n	80017ec <remove_chain+0xae>
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	791b      	ldrb	r3, [r3, #4]
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	711a      	strb	r2, [r3, #4]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3c6      	bcc.n	8001788 <remove_chain+0x4a>
 80017fa:	e000      	b.n	80017fe <remove_chain+0xc0>
 80017fc:	bf00      	nop
 80017fe:	2300      	movs	r3, #0
 8001800:	4618      	mov	r0, r3
 8001802:	3720      	adds	r7, #32
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <create_chain>:
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10d      	bne.n	800183a <create_chain+0x32>
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <create_chain+0x2c>
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	429a      	cmp	r2, r3
 8001832:	d31b      	bcc.n	800186c <create_chain+0x64>
 8001834:	2301      	movs	r3, #1
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	e018      	b.n	800186c <create_chain+0x64>
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fdf2 	bl	8001426 <get_fat>
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d801      	bhi.n	800184e <create_chain+0x46>
 800184a:	2301      	movs	r3, #1
 800184c:	e0a9      	b.n	80019a2 <create_chain+0x19a>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001854:	d101      	bne.n	800185a <create_chain+0x52>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	e0a3      	b.n	80019a2 <create_chain+0x19a>
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d201      	bcs.n	8001868 <create_chain+0x60>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	e09c      	b.n	80019a2 <create_chain+0x19a>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <create_chain+0x70>
 8001874:	2300      	movs	r3, #0
 8001876:	e094      	b.n	80019a2 <create_chain+0x19a>
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d129      	bne.n	80018d8 <create_chain+0xd0>
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	3301      	adds	r3, #1
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	429a      	cmp	r2, r3
 8001892:	d301      	bcc.n	8001898 <create_chain+0x90>
 8001894:	2302      	movs	r3, #2
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	69f9      	ldr	r1, [r7, #28]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fdc3 	bl	8001426 <get_fat>
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d003      	beq.n	80018b0 <create_chain+0xa8>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ae:	d101      	bne.n	80018b4 <create_chain+0xac>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	e076      	b.n	80019a2 <create_chain+0x19a>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00e      	beq.n	80018d8 <create_chain+0xd0>
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d906      	bls.n	80018d4 <create_chain+0xcc>
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d201      	bcs.n	80018d4 <create_chain+0xcc>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d129      	bne.n	8001932 <create_chain+0x12a>
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3301      	adds	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d307      	bcc.n	8001902 <create_chain+0xfa>
 80018f2:	2302      	movs	r3, #2
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d901      	bls.n	8001902 <create_chain+0xfa>
 80018fe:	2300      	movs	r3, #0
 8001900:	e04f      	b.n	80019a2 <create_chain+0x19a>
 8001902:	69f9      	ldr	r1, [r7, #28]
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fd8e 	bl	8001426 <get_fat>
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00e      	beq.n	8001930 <create_chain+0x128>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d003      	beq.n	8001920 <create_chain+0x118>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191e:	d101      	bne.n	8001924 <create_chain+0x11c>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	e03e      	b.n	80019a2 <create_chain+0x19a>
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	429a      	cmp	r2, r3
 800192a:	d1da      	bne.n	80018e2 <create_chain+0xda>
 800192c:	2300      	movs	r3, #0
 800192e:	e038      	b.n	80019a2 <create_chain+0x19a>
 8001930:	bf00      	nop
 8001932:	f04f 32ff 	mov.w	r2, #4294967295
 8001936:	69f9      	ldr	r1, [r7, #28]
 8001938:	6938      	ldr	r0, [r7, #16]
 800193a:	f7ff fe19 	bl	8001570 <put_fat>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d109      	bne.n	800195c <create_chain+0x154>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <create_chain+0x154>
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	6938      	ldr	r0, [r7, #16]
 8001954:	f7ff fe0c 	bl	8001570 <put_fat>
 8001958:	4603      	mov	r3, r0
 800195a:	75fb      	strb	r3, [r7, #23]
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d116      	bne.n	8001990 <create_chain+0x188>
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	3b02      	subs	r3, #2
 8001972:	429a      	cmp	r2, r3
 8001974:	d804      	bhi.n	8001980 <create_chain+0x178>
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	1e5a      	subs	r2, r3, #1
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	791b      	ldrb	r3, [r3, #4]
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	b2da      	uxtb	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	711a      	strb	r2, [r3, #4]
 800198e:	e007      	b.n	80019a0 <create_chain+0x198>
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d102      	bne.n	800199c <create_chain+0x194>
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e000      	b.n	800199e <create_chain+0x196>
 800199c:	2301      	movs	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	4618      	mov	r0, r3
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <dir_clear>:
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fc40 	bl	800123a <sync_window>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <dir_clear+0x1a>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e036      	b.n	8001a32 <dir_clear+0x88>
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fd0e 	bl	80013e8 <clst2sect>
 80019cc:	6138      	str	r0, [r7, #16]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3330      	adds	r3, #48	; 0x30
 80019d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fb85 	bl	80010ee <mem_set>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3330      	adds	r3, #48	; 0x30
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	2301      	movs	r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	e003      	b.n	80019fc <dir_clear+0x52>
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	4413      	add	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	895b      	ldrh	r3, [r3, #10]
 8001a00:	461a      	mov	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d20b      	bcs.n	8001a20 <dir_clear+0x76>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7858      	ldrb	r0, [r3, #1]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	441a      	add	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	f7ff f87b 	bl	8000b10 <disk_write>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0e9      	beq.n	80019f4 <dir_clear+0x4a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	895b      	ldrh	r3, [r3, #10]
 8001a24:	461a      	mov	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	bf14      	ite	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	2300      	moveq	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <dir_sdi>:
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a50:	d204      	bcs.n	8001a5c <dir_sdi+0x22>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <dir_sdi+0x26>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e063      	b.n	8001b28 <dir_sdi+0xee>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <dir_sdi+0x46>
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d902      	bls.n	8001a80 <dir_sdi+0x46>
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <dir_sdi+0x66>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	8912      	ldrh	r2, [r2, #8]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d301      	bcc.n	8001a96 <dir_sdi+0x5c>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e048      	b.n	8001b28 <dir_sdi+0xee>
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	619a      	str	r2, [r3, #24]
 8001a9e:	e029      	b.n	8001af4 <dir_sdi+0xba>
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	895b      	ldrh	r3, [r3, #10]
 8001aa4:	025b      	lsls	r3, r3, #9
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e019      	b.n	8001ade <dir_sdi+0xa4>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6979      	ldr	r1, [r7, #20]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fcb9 	bl	8001426 <get_fat>
 8001ab4:	6178      	str	r0, [r7, #20]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d101      	bne.n	8001ac2 <dir_sdi+0x88>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e032      	b.n	8001b28 <dir_sdi+0xee>
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d904      	bls.n	8001ad2 <dir_sdi+0x98>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d301      	bcc.n	8001ad6 <dir_sdi+0x9c>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e028      	b.n	8001b28 <dir_sdi+0xee>
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d2e1      	bcs.n	8001aaa <dir_sdi+0x70>
 8001ae6:	6979      	ldr	r1, [r7, #20]
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	f7ff fc7d 	bl	80013e8 <clst2sect>
 8001aee:	4602      	mov	r2, r0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	615a      	str	r2, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <dir_sdi+0xcc>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e010      	b.n	8001b28 <dir_sdi+0xee>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	0a5b      	lsrs	r3, r3, #9
 8001b0e:	441a      	add	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b20:	441a      	add	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	61da      	str	r2, [r3, #28]
 8001b26:	2300      	movs	r3, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <dir_next>:
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	3320      	adds	r3, #32
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b4e:	d302      	bcc.n	8001b56 <dir_next+0x26>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <dir_next+0x32>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e078      	b.n	8001c54 <dir_next+0x124>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d166      	bne.n	8001c3a <dir_next+0x10a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10a      	bne.n	8001b94 <dir_next+0x64>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	095b      	lsrs	r3, r3, #5
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	8912      	ldrh	r2, [r2, #8]
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d357      	bcc.n	8001c3a <dir_next+0x10a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
 8001b90:	2304      	movs	r3, #4
 8001b92:	e05f      	b.n	8001c54 <dir_next+0x124>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	0a5b      	lsrs	r3, r3, #9
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	8952      	ldrh	r2, [r2, #10]
 8001b9c:	3a01      	subs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d14a      	bne.n	8001c3a <dir_next+0x10a>
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f7ff fc3a 	bl	8001426 <get_fat>
 8001bb2:	6178      	str	r0, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d801      	bhi.n	8001bbe <dir_next+0x8e>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e04a      	b.n	8001c54 <dir_next+0x124>
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d101      	bne.n	8001bca <dir_next+0x9a>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e044      	b.n	8001c54 <dir_next+0x124>
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d328      	bcc.n	8001c26 <dir_next+0xf6>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d104      	bne.n	8001be4 <dir_next+0xb4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
 8001be0:	2304      	movs	r3, #4
 8001be2:	e037      	b.n	8001c54 <dir_next+0x124>
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	4619      	mov	r1, r3
 8001bec:	4610      	mov	r0, r2
 8001bee:	f7ff fe0b 	bl	8001808 <create_chain>
 8001bf2:	6178      	str	r0, [r7, #20]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <dir_next+0xce>
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	e02a      	b.n	8001c54 <dir_next+0x124>
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <dir_next+0xd8>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e025      	b.n	8001c54 <dir_next+0x124>
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0e:	d101      	bne.n	8001c14 <dir_next+0xe4>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e01f      	b.n	8001c54 <dir_next+0x124>
 8001c14:	6979      	ldr	r1, [r7, #20]
 8001c16:	6938      	ldr	r0, [r7, #16]
 8001c18:	f7ff fec7 	bl	80019aa <dir_clear>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <dir_next+0xf6>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e016      	b.n	8001c54 <dir_next+0x124>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	615a      	str	r2, [r3, #20]
 8001c2c:	6979      	ldr	r1, [r7, #20]
 8001c2e:	6938      	ldr	r0, [r7, #16]
 8001c30:	f7ff fbda 	bl	80013e8 <clst2sect>
 8001c34:	4602      	mov	r2, r0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c4c:	441a      	add	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	61da      	str	r2, [r3, #28]
 8001c52:	2300      	movs	r3, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <dir_alloc>:
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fee3 	bl	8001a3a <dir_sdi>
 8001c74:	4603      	mov	r3, r0
 8001c76:	75fb      	strb	r3, [r7, #23]
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d12b      	bne.n	8001cd6 <dir_alloc+0x7a>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	4619      	mov	r1, r3
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fb12 	bl	80012b2 <move_window>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	75fb      	strb	r3, [r7, #23]
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11d      	bne.n	8001cd4 <dir_alloc+0x78>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2be5      	cmp	r3, #229	; 0xe5
 8001ca0:	d004      	beq.n	8001cac <dir_alloc+0x50>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <dir_alloc+0x60>
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d102      	bne.n	8001cc0 <dir_alloc+0x64>
 8001cba:	e00c      	b.n	8001cd6 <dir_alloc+0x7a>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ff34 	bl	8001b30 <dir_next>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	75fb      	strb	r3, [r7, #23]
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0d7      	beq.n	8001c82 <dir_alloc+0x26>
 8001cd2:	e000      	b.n	8001cd6 <dir_alloc+0x7a>
 8001cd4:	bf00      	nop
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d101      	bne.n	8001ce0 <dir_alloc+0x84>
 8001cdc:	2307      	movs	r3, #7
 8001cde:	75fb      	strb	r3, [r7, #23]
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <ld_clust>:
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	331a      	adds	r3, #26
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f955 	bl	8000fa8 <ld_word>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d109      	bne.n	8001d1e <ld_clust+0x34>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	3314      	adds	r3, #20
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f94a 	bl	8000fa8 <ld_word>
 8001d14:	4603      	mov	r3, r0
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <st_clust>:
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	331a      	adds	r3, #26
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	b292      	uxth	r2, r2
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f96d 	bl	800101e <st_word>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d109      	bne.n	8001d60 <st_clust+0x38>
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f103 0214 	add.w	r2, r3, #20
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	0c1b      	lsrs	r3, r3, #16
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f7ff f95f 	bl	800101e <st_word>
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <dir_read>:
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	2304      	movs	r3, #4
 8001d74:	75fb      	strb	r3, [r7, #23]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e03c      	b.n	8001df8 <dir_read+0x90>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	4619      	mov	r1, r3
 8001d84:	6938      	ldr	r0, [r7, #16]
 8001d86:	f7ff fa94 	bl	80012b2 <move_window>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	75fb      	strb	r3, [r7, #23]
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d136      	bne.n	8001e02 <dir_read+0x9a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <dir_read+0x40>
 8001da2:	2304      	movs	r3, #4
 8001da4:	75fb      	strb	r3, [r7, #23]
 8001da6:	e031      	b.n	8001e0c <dir_read+0xa4>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	330b      	adds	r3, #11
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db4:	73bb      	strb	r3, [r7, #14]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7bba      	ldrb	r2, [r7, #14]
 8001dba:	719a      	strb	r2, [r3, #6]
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2be5      	cmp	r3, #229	; 0xe5
 8001dc0:	d011      	beq.n	8001de6 <dir_read+0x7e>
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8001dc6:	d00e      	beq.n	8001de6 <dir_read+0x7e>
 8001dc8:	7bbb      	ldrb	r3, [r7, #14]
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	d00b      	beq.n	8001de6 <dir_read+0x7e>
 8001dce:	7bbb      	ldrb	r3, [r7, #14]
 8001dd0:	f023 0320 	bic.w	r3, r3, #32
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00f      	beq.n	8001e06 <dir_read+0x9e>
 8001de6:	2100      	movs	r1, #0
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fea1 	bl	8001b30 <dir_next>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d108      	bne.n	8001e0a <dir_read+0xa2>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1be      	bne.n	8001d7e <dir_read+0x16>
 8001e00:	e004      	b.n	8001e0c <dir_read+0xa4>
 8001e02:	bf00      	nop
 8001e04:	e002      	b.n	8001e0c <dir_read+0xa4>
 8001e06:	bf00      	nop
 8001e08:	e000      	b.n	8001e0c <dir_read+0xa4>
 8001e0a:	bf00      	nop
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <dir_read+0xb0>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <dir_find>:
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	2100      	movs	r1, #0
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fe01 	bl	8001a3a <dir_sdi>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	75fb      	strb	r3, [r7, #23]
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <dir_find+0x24>
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	e03e      	b.n	8001ec4 <dir_find+0xa2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6938      	ldr	r0, [r7, #16]
 8001e4e:	f7ff fa30 	bl	80012b2 <move_window>
 8001e52:	4603      	mov	r3, r0
 8001e54:	75fb      	strb	r3, [r7, #23]
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d12f      	bne.n	8001ebc <dir_find+0x9a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <dir_find+0x4e>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	75fb      	strb	r3, [r7, #23]
 8001e6e:	e028      	b.n	8001ec2 <dir_find+0xa0>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	330b      	adds	r3, #11
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	719a      	strb	r2, [r3, #6]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	330b      	adds	r3, #11
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <dir_find+0x86>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69d8      	ldr	r0, [r3, #28]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3320      	adds	r3, #32
 8001e9a:	220b      	movs	r2, #11
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f7ff f940 	bl	8001122 <mem_cmp>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00b      	beq.n	8001ec0 <dir_find+0x9e>
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fe40 	bl	8001b30 <dir_next>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	75fb      	strb	r3, [r7, #23]
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0c5      	beq.n	8001e46 <dir_find+0x24>
 8001eba:	e002      	b.n	8001ec2 <dir_find+0xa0>
 8001ebc:	bf00      	nop
 8001ebe:	e000      	b.n	8001ec2 <dir_find+0xa0>
 8001ec0:	bf00      	nop
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <dir_register>:
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	2101      	movs	r1, #1
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff febd 	bl	8001c5c <dir_alloc>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d11c      	bne.n	8001f26 <dir_register+0x5a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	68b8      	ldr	r0, [r7, #8]
 8001ef4:	f7ff f9dd 	bl	80012b2 <move_window>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d111      	bne.n	8001f26 <dir_register+0x5a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	2220      	movs	r2, #32
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f8ef 	bl	80010ee <mem_set>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69d8      	ldr	r0, [r3, #28]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3320      	adds	r3, #32
 8001f18:	220b      	movs	r2, #11
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7ff f8c6 	bl	80010ac <mem_cpy>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2201      	movs	r2, #1
 8001f24:	70da      	strb	r2, [r3, #3]
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <get_fileinfo>:
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	725a      	strb	r2, [r3, #9]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d052      	beq.n	8001fee <get_fileinfo+0xbe>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e021      	b.n	8001f96 <get_fileinfo+0x66>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	1c59      	adds	r1, r3, #1
 8001f5a:	6179      	str	r1, [r7, #20]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	73fb      	strb	r3, [r7, #15]
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d100      	bne.n	8001f6a <get_fileinfo+0x3a>
 8001f68:	e015      	b.n	8001f96 <get_fileinfo+0x66>
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d101      	bne.n	8001f74 <get_fileinfo+0x44>
 8001f70:	23e5      	movs	r3, #229	; 0xe5
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b09      	cmp	r3, #9
 8001f78:	d106      	bne.n	8001f88 <get_fileinfo+0x58>
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	613a      	str	r2, [r7, #16]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	222e      	movs	r2, #46	; 0x2e
 8001f86:	725a      	strb	r2, [r3, #9]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	613a      	str	r2, [r7, #16]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	725a      	strb	r2, [r3, #9]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b0a      	cmp	r3, #10
 8001f9a:	d9da      	bls.n	8001f52 <get_fileinfo+0x22>
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3309      	adds	r3, #9
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	7ada      	ldrb	r2, [r3, #11]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	721a      	strb	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	331c      	adds	r3, #28
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff f80d 	bl	8000fd8 <ld_dword>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	3316      	adds	r3, #22
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe ffec 	bl	8000fa8 <ld_word>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	80da      	strh	r2, [r3, #6]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	3318      	adds	r3, #24
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe ffe2 	bl	8000fa8 <ld_word>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	809a      	strh	r2, [r3, #4]
 8001fec:	e000      	b.n	8001ff0 <get_fileinfo+0xc0>
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <create_name>:
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3320      	adds	r3, #32
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	220b      	movs	r2, #11
 8002010:	2120      	movs	r1, #32
 8002012:	6938      	ldr	r0, [r7, #16]
 8002014:	f7ff f86b 	bl	80010ee <mem_set>
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	2308      	movs	r3, #8
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	61fa      	str	r2, [r7, #28]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002038:	2b20      	cmp	r3, #32
 800203a:	d97c      	bls.n	8002136 <create_name+0x13e>
 800203c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002040:	2b2f      	cmp	r3, #47	; 0x2f
 8002042:	d007      	beq.n	8002054 <create_name+0x5c>
 8002044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002048:	2b5c      	cmp	r3, #92	; 0x5c
 800204a:	d110      	bne.n	800206e <create_name+0x76>
 800204c:	e002      	b.n	8002054 <create_name+0x5c>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3301      	adds	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b2f      	cmp	r3, #47	; 0x2f
 800205e:	d0f6      	beq.n	800204e <create_name+0x56>
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4413      	add	r3, r2
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b5c      	cmp	r3, #92	; 0x5c
 800206a:	d0f0      	beq.n	800204e <create_name+0x56>
 800206c:	e064      	b.n	8002138 <create_name+0x140>
 800206e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002072:	2b2e      	cmp	r3, #46	; 0x2e
 8002074:	d003      	beq.n	800207e <create_name+0x86>
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	429a      	cmp	r2, r3
 800207c:	d30d      	bcc.n	800209a <create_name+0xa2>
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2b0b      	cmp	r3, #11
 8002082:	d003      	beq.n	800208c <create_name+0x94>
 8002084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002088:	2b2e      	cmp	r3, #46	; 0x2e
 800208a:	d001      	beq.n	8002090 <create_name+0x98>
 800208c:	2306      	movs	r3, #6
 800208e:	e06f      	b.n	8002170 <create_name+0x178>
 8002090:	2308      	movs	r3, #8
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	230b      	movs	r3, #11
 8002096:	623b      	str	r3, [r7, #32]
 8002098:	e04c      	b.n	8002134 <create_name+0x13c>
 800209a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f881 	bl	80011a6 <dbc_1st>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d024      	beq.n	80020f4 <create_name+0xfc>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	61fa      	str	r2, [r7, #28]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4413      	add	r3, r2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff f893 	bl	80011e6 <dbc_2nd>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <create_name+0xd8>
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d301      	bcc.n	80020d4 <create_name+0xdc>
 80020d0:	2306      	movs	r3, #6
 80020d2:	e04d      	b.n	8002170 <create_name+0x178>
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	61ba      	str	r2, [r7, #24]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	61ba      	str	r2, [r7, #24]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e797      	b.n	8002024 <create_name+0x2c>
 80020f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020f8:	4619      	mov	r1, r3
 80020fa:	481f      	ldr	r0, [pc, #124]	; (8002178 <create_name+0x180>)
 80020fc:	f7ff f838 	bl	8001170 <chk_chr>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <create_name+0x112>
 8002106:	2306      	movs	r3, #6
 8002108:	e032      	b.n	8002170 <create_name+0x178>
 800210a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800210e:	2b60      	cmp	r3, #96	; 0x60
 8002110:	d908      	bls.n	8002124 <create_name+0x12c>
 8002112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002116:	2b7a      	cmp	r3, #122	; 0x7a
 8002118:	d804      	bhi.n	8002124 <create_name+0x12c>
 800211a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800211e:	3b20      	subs	r3, #32
 8002120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	61ba      	str	r2, [r7, #24]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	e776      	b.n	8002024 <create_name+0x2c>
 8002136:	bf00      	nop
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	441a      	add	r2, r3
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <create_name+0x154>
 8002148:	2306      	movs	r3, #6
 800214a:	e011      	b.n	8002170 <create_name+0x178>
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2be5      	cmp	r3, #229	; 0xe5
 8002152:	d102      	bne.n	800215a <create_name+0x162>
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2205      	movs	r2, #5
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800215e:	2b20      	cmp	r3, #32
 8002160:	d801      	bhi.n	8002166 <create_name+0x16e>
 8002162:	2204      	movs	r2, #4
 8002164:	e000      	b.n	8002168 <create_name+0x170>
 8002166:	2200      	movs	r2, #0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	330b      	adds	r3, #11
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	4618      	mov	r0, r3
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	0800c0c8 	.word	0x0800c0c8

0800217c <follow_path>:
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	e002      	b.n	8002194 <follow_path+0x18>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b2f      	cmp	r3, #47	; 0x2f
 800219a:	d0f8      	beq.n	800218e <follow_path+0x12>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b5c      	cmp	r3, #92	; 0x5c
 80021a2:	d0f4      	beq.n	800218e <follow_path+0x12>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b1f      	cmp	r3, #31
 80021b0:	d80a      	bhi.n	80021c8 <follow_path+0x4c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 80021ba:	2100      	movs	r1, #0
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fc3c 	bl	8001a3a <dir_sdi>
 80021c2:	4603      	mov	r3, r0
 80021c4:	75fb      	strb	r3, [r7, #23]
 80021c6:	e043      	b.n	8002250 <follow_path+0xd4>
 80021c8:	463b      	mov	r3, r7
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff13 	bl	8001ff8 <create_name>
 80021d2:	4603      	mov	r3, r0
 80021d4:	75fb      	strb	r3, [r7, #23]
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d134      	bne.n	8002246 <follow_path+0xca>
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fe20 	bl	8001e22 <dir_find>
 80021e2:	4603      	mov	r3, r0
 80021e4:	75fb      	strb	r3, [r7, #23]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <follow_path+0x8e>
 80021f4:	7dfb      	ldrb	r3, [r7, #23]
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d127      	bne.n	800224a <follow_path+0xce>
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d122      	bne.n	800224a <follow_path+0xce>
 8002204:	2305      	movs	r3, #5
 8002206:	75fb      	strb	r3, [r7, #23]
 8002208:	e01f      	b.n	800224a <follow_path+0xce>
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d11c      	bne.n	800224e <follow_path+0xd2>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	799b      	ldrb	r3, [r3, #6]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <follow_path+0xaa>
 8002220:	2305      	movs	r3, #5
 8002222:	75fb      	strb	r3, [r7, #23]
 8002224:	e014      	b.n	8002250 <follow_path+0xd4>
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002234:	4413      	add	r3, r2
 8002236:	4619      	mov	r1, r3
 8002238:	6938      	ldr	r0, [r7, #16]
 800223a:	f7ff fd56 	bl	8001cea <ld_clust>
 800223e:	4602      	mov	r2, r0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	e7c0      	b.n	80021c8 <follow_path+0x4c>
 8002246:	bf00      	nop
 8002248:	e002      	b.n	8002250 <follow_path+0xd4>
 800224a:	bf00      	nop
 800224c:	e000      	b.n	8002250 <follow_path+0xd4>
 800224e:	bf00      	nop
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <get_ldnumber>:
 800225a:	b480      	push	{r7}
 800225c:	b089      	sub	sp, #36	; 0x24
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <get_ldnumber+0x22>
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	e02d      	b.n	80022d8 <get_ldnumber+0x7e>
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	61fa      	str	r2, [r7, #28]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	2b20      	cmp	r3, #32
 800228a:	d902      	bls.n	8002292 <get_ldnumber+0x38>
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	2b3a      	cmp	r3, #58	; 0x3a
 8002290:	d1f4      	bne.n	800227c <get_ldnumber+0x22>
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	2b3a      	cmp	r3, #58	; 0x3a
 8002296:	d11c      	bne.n	80022d2 <get_ldnumber+0x78>
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b2f      	cmp	r3, #47	; 0x2f
 80022a2:	d90c      	bls.n	80022be <get_ldnumber+0x64>
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b39      	cmp	r3, #57	; 0x39
 80022aa:	d808      	bhi.n	80022be <get_ldnumber+0x64>
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	3302      	adds	r3, #2
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d103      	bne.n	80022be <get_ldnumber+0x64>
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	3b30      	subs	r3, #48	; 0x30
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	dc04      	bgt.n	80022ce <get_ldnumber+0x74>
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	e002      	b.n	80022d8 <get_ldnumber+0x7e>
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	4618      	mov	r0, r3
 80022da:	3724      	adds	r7, #36	; 0x24
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <check_fs>:
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	70da      	strb	r2, [r3, #3]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f04f 32ff 	mov.w	r2, #4294967295
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80022fc:	6839      	ldr	r1, [r7, #0]
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe ffd7 	bl	80012b2 <move_window>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <check_fs+0x2a>
 800230a:	2304      	movs	r3, #4
 800230c:	e038      	b.n	8002380 <check_fs+0x9c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3330      	adds	r3, #48	; 0x30
 8002312:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe fe46 	bl	8000fa8 <ld_word>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <check_fs+0x48>
 8002328:	2303      	movs	r3, #3
 800232a:	e029      	b.n	8002380 <check_fs+0x9c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002332:	2be9      	cmp	r3, #233	; 0xe9
 8002334:	d009      	beq.n	800234a <check_fs+0x66>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800233c:	2beb      	cmp	r3, #235	; 0xeb
 800233e:	d004      	beq.n	800234a <check_fs+0x66>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002346:	2be8      	cmp	r3, #232	; 0xe8
 8002348:	d119      	bne.n	800237e <check_fs+0x9a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3330      	adds	r3, #48	; 0x30
 800234e:	3336      	adds	r3, #54	; 0x36
 8002350:	2203      	movs	r2, #3
 8002352:	490d      	ldr	r1, [pc, #52]	; (8002388 <check_fs+0xa4>)
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fee4 	bl	8001122 <mem_cmp>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <check_fs+0x80>
 8002360:	2300      	movs	r3, #0
 8002362:	e00d      	b.n	8002380 <check_fs+0x9c>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3330      	adds	r3, #48	; 0x30
 8002368:	3352      	adds	r3, #82	; 0x52
 800236a:	2205      	movs	r2, #5
 800236c:	4907      	ldr	r1, [pc, #28]	; (800238c <check_fs+0xa8>)
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fed7 	bl	8001122 <mem_cmp>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <check_fs+0x9a>
 800237a:	2300      	movs	r3, #0
 800237c:	e000      	b.n	8002380 <check_fs+0x9c>
 800237e:	2302      	movs	r3, #2
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	0800c0d8 	.word	0x0800c0d8
 800238c:	0800c0dc 	.word	0x0800c0dc

08002390 <find_volume>:
 8002390:	b580      	push	{r7, lr}
 8002392:	b096      	sub	sp, #88	; 0x58
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff ff58 	bl	800225a <get_ldnumber>
 80023aa:	63f8      	str	r0, [r7, #60]	; 0x3c
 80023ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	da01      	bge.n	80023b6 <find_volume+0x26>
 80023b2:	230b      	movs	r3, #11
 80023b4:	e238      	b.n	8002828 <find_volume+0x498>
 80023b6:	4aa8      	ldr	r2, [pc, #672]	; (8002658 <find_volume+0x2c8>)
 80023b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <find_volume+0x3a>
 80023c6:	230c      	movs	r3, #12
 80023c8:	e22e      	b.n	8002828 <find_volume+0x498>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	71fb      	strb	r3, [r7, #7]
 80023d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01a      	beq.n	8002416 <find_volume+0x86>
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fb13 	bl	8000a10 <disk_status>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10c      	bne.n	8002416 <find_volume+0x86>
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <find_volume+0x82>
 8002402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <find_volume+0x82>
 800240e:	230a      	movs	r3, #10
 8002410:	e20a      	b.n	8002828 <find_volume+0x498>
 8002412:	2300      	movs	r3, #0
 8002414:	e208      	b.n	8002828 <find_volume+0x498>
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241e:	b2da      	uxtb	r2, r3
 8002420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002422:	705a      	strb	r2, [r3, #1]
 8002424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fa07 	bl	800083c <disk_initialize>
 800242e:	4603      	mov	r3, r0
 8002430:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <find_volume+0xb4>
 8002440:	2303      	movs	r3, #3
 8002442:	e1f1      	b.n	8002828 <find_volume+0x498>
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <find_volume+0xca>
 800244a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <find_volume+0xca>
 8002456:	230a      	movs	r3, #10
 8002458:	e1e6      	b.n	8002828 <find_volume+0x498>
 800245a:	2300      	movs	r3, #0
 800245c:	653b      	str	r3, [r7, #80]	; 0x50
 800245e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002462:	f7ff ff3f 	bl	80022e4 <check_fs>
 8002466:	4603      	mov	r3, r0
 8002468:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800246c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002470:	2b02      	cmp	r3, #2
 8002472:	d14b      	bne.n	800250c <find_volume+0x17c>
 8002474:	2300      	movs	r3, #0
 8002476:	643b      	str	r3, [r7, #64]	; 0x40
 8002478:	e01f      	b.n	80024ba <find_volume+0x12a>
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002488:	4413      	add	r3, r2
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	3304      	adds	r3, #4
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <find_volume+0x114>
 8002496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002498:	3308      	adds	r3, #8
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fd9c 	bl	8000fd8 <ld_dword>
 80024a0:	4602      	mov	r2, r0
 80024a2:	e000      	b.n	80024a6 <find_volume+0x116>
 80024a4:	2200      	movs	r2, #0
 80024a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80024ae:	440b      	add	r3, r1
 80024b0:	f843 2c44 	str.w	r2, [r3, #-68]
 80024b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b6:	3301      	adds	r3, #1
 80024b8:	643b      	str	r3, [r7, #64]	; 0x40
 80024ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d9dc      	bls.n	800247a <find_volume+0xea>
 80024c0:	2300      	movs	r3, #0
 80024c2:	643b      	str	r3, [r7, #64]	; 0x40
 80024c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <find_volume+0x140>
 80024ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024cc:	3b01      	subs	r3, #1
 80024ce:	643b      	str	r3, [r7, #64]	; 0x40
 80024d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80024d8:	4413      	add	r3, r2
 80024da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80024de:	653b      	str	r3, [r7, #80]	; 0x50
 80024e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <find_volume+0x162>
 80024e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80024e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80024ea:	f7ff fefb 	bl	80022e4 <check_fs>
 80024ee:	4603      	mov	r3, r0
 80024f0:	e000      	b.n	80024f4 <find_volume+0x164>
 80024f2:	2303      	movs	r3, #3
 80024f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80024f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d905      	bls.n	800250c <find_volume+0x17c>
 8002500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002502:	3301      	adds	r3, #1
 8002504:	643b      	str	r3, [r7, #64]	; 0x40
 8002506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002508:	2b03      	cmp	r3, #3
 800250a:	d9e1      	bls.n	80024d0 <find_volume+0x140>
 800250c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002510:	2b04      	cmp	r3, #4
 8002512:	d101      	bne.n	8002518 <find_volume+0x188>
 8002514:	2301      	movs	r3, #1
 8002516:	e187      	b.n	8002828 <find_volume+0x498>
 8002518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800251c:	2b01      	cmp	r3, #1
 800251e:	d901      	bls.n	8002524 <find_volume+0x194>
 8002520:	230d      	movs	r3, #13
 8002522:	e181      	b.n	8002828 <find_volume+0x498>
 8002524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002526:	3330      	adds	r3, #48	; 0x30
 8002528:	330b      	adds	r3, #11
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fd3c 	bl	8000fa8 <ld_word>
 8002530:	4603      	mov	r3, r0
 8002532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002536:	d001      	beq.n	800253c <find_volume+0x1ac>
 8002538:	230d      	movs	r3, #13
 800253a:	e175      	b.n	8002828 <find_volume+0x498>
 800253c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253e:	3330      	adds	r3, #48	; 0x30
 8002540:	3316      	adds	r3, #22
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fd30 	bl	8000fa8 <ld_word>
 8002548:	4603      	mov	r3, r0
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800254c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <find_volume+0x1d0>
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	3330      	adds	r3, #48	; 0x30
 8002556:	3324      	adds	r3, #36	; 0x24
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fd3d 	bl	8000fd8 <ld_dword>
 800255e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002564:	619a      	str	r2, [r3, #24]
 8002566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002568:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256e:	709a      	strb	r2, [r3, #2]
 8002570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002572:	789b      	ldrb	r3, [r3, #2]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d005      	beq.n	8002584 <find_volume+0x1f4>
 8002578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257a:	789b      	ldrb	r3, [r3, #2]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d001      	beq.n	8002584 <find_volume+0x1f4>
 8002580:	230d      	movs	r3, #13
 8002582:	e151      	b.n	8002828 <find_volume+0x498>
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	789b      	ldrb	r3, [r3, #2]
 8002588:	461a      	mov	r2, r3
 800258a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002598:	b29a      	uxth	r2, r3
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	815a      	strh	r2, [r3, #10]
 800259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a0:	895b      	ldrh	r3, [r3, #10]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <find_volume+0x228>
 80025a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a8:	895b      	ldrh	r3, [r3, #10]
 80025aa:	461a      	mov	r2, r3
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	895b      	ldrh	r3, [r3, #10]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <find_volume+0x22c>
 80025b8:	230d      	movs	r3, #13
 80025ba:	e135      	b.n	8002828 <find_volume+0x498>
 80025bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025be:	3330      	adds	r3, #48	; 0x30
 80025c0:	3311      	adds	r3, #17
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fcf0 	bl	8000fa8 <ld_word>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ce:	811a      	strh	r2, [r3, #8]
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	891b      	ldrh	r3, [r3, #8]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <find_volume+0x252>
 80025de:	230d      	movs	r3, #13
 80025e0:	e122      	b.n	8002828 <find_volume+0x498>
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	3330      	adds	r3, #48	; 0x30
 80025e6:	3313      	adds	r3, #19
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fcdd 	bl	8000fa8 <ld_word>
 80025ee:	4603      	mov	r3, r0
 80025f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80025f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <find_volume+0x276>
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	3330      	adds	r3, #48	; 0x30
 80025fc:	3320      	adds	r3, #32
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fcea 	bl	8000fd8 <ld_dword>
 8002604:	64b8      	str	r0, [r7, #72]	; 0x48
 8002606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002608:	3330      	adds	r3, #48	; 0x30
 800260a:	330e      	adds	r3, #14
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fccb 	bl	8000fa8 <ld_word>
 8002612:	4603      	mov	r3, r0
 8002614:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002616:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <find_volume+0x290>
 800261c:	230d      	movs	r3, #13
 800261e:	e103      	b.n	8002828 <find_volume+0x498>
 8002620:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002624:	4413      	add	r3, r2
 8002626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002628:	8912      	ldrh	r2, [r2, #8]
 800262a:	0912      	lsrs	r2, r2, #4
 800262c:	b292      	uxth	r2, r2
 800262e:	4413      	add	r3, r2
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
 8002632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	429a      	cmp	r2, r3
 8002638:	d201      	bcs.n	800263e <find_volume+0x2ae>
 800263a:	230d      	movs	r3, #13
 800263c:	e0f4      	b.n	8002828 <find_volume+0x498>
 800263e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002646:	8952      	ldrh	r2, [r2, #10]
 8002648:	fbb3 f3f2 	udiv	r3, r3, r2
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <find_volume+0x2cc>
 8002654:	230d      	movs	r3, #13
 8002656:	e0e7      	b.n	8002828 <find_volume+0x498>
 8002658:	200000a0 	.word	0x200000a0
 800265c:	2300      	movs	r3, #0
 800265e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	4a72      	ldr	r2, [pc, #456]	; (8002830 <find_volume+0x4a0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d802      	bhi.n	8002670 <find_volume+0x2e0>
 800266a:	2303      	movs	r3, #3
 800266c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002676:	4293      	cmp	r3, r2
 8002678:	d802      	bhi.n	8002680 <find_volume+0x2f0>
 800267a:	2302      	movs	r3, #2
 800267c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002686:	4293      	cmp	r3, r2
 8002688:	d802      	bhi.n	8002690 <find_volume+0x300>
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <find_volume+0x30c>
 8002698:	230d      	movs	r3, #13
 800269a:	e0c5      	b.n	8002828 <find_volume+0x498>
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	1c9a      	adds	r2, r3, #2
 80026a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a2:	615a      	str	r2, [r3, #20]
 80026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026a8:	61da      	str	r2, [r3, #28]
 80026aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80026ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ae:	441a      	add	r2, r3
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	621a      	str	r2, [r3, #32]
 80026b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	441a      	add	r2, r3
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	629a      	str	r2, [r3, #40]	; 0x28
 80026be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d11e      	bne.n	8002704 <find_volume+0x374>
 80026c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c8:	3330      	adds	r3, #48	; 0x30
 80026ca:	332a      	adds	r3, #42	; 0x2a
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fc6b 	bl	8000fa8 <ld_word>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <find_volume+0x34c>
 80026d8:	230d      	movs	r3, #13
 80026da:	e0a5      	b.n	8002828 <find_volume+0x498>
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	891b      	ldrh	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <find_volume+0x358>
 80026e4:	230d      	movs	r3, #13
 80026e6:	e09f      	b.n	8002828 <find_volume+0x498>
 80026e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ea:	3330      	adds	r3, #48	; 0x30
 80026ec:	332c      	adds	r3, #44	; 0x2c
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fc72 	bl	8000fd8 <ld_dword>
 80026f4:	4602      	mov	r2, r0
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
 80026fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	647b      	str	r3, [r7, #68]	; 0x44
 8002702:	e01f      	b.n	8002744 <find_volume+0x3b4>
 8002704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002706:	891b      	ldrh	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <find_volume+0x380>
 800270c:	230d      	movs	r3, #13
 800270e:	e08b      	b.n	8002828 <find_volume+0x498>
 8002710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002712:	6a1a      	ldr	r2, [r3, #32]
 8002714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002716:	441a      	add	r2, r3
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
 800271c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002720:	2b02      	cmp	r3, #2
 8002722:	d103      	bne.n	800272c <find_volume+0x39c>
 8002724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	e00a      	b.n	8002742 <find_volume+0x3b2>
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	085a      	lsrs	r2, r3, #1
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	647b      	str	r3, [r7, #68]	; 0x44
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	699a      	ldr	r2, [r3, #24]
 8002748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800274a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800274e:	0a5b      	lsrs	r3, r3, #9
 8002750:	429a      	cmp	r2, r3
 8002752:	d201      	bcs.n	8002758 <find_volume+0x3c8>
 8002754:	230d      	movs	r3, #13
 8002756:	e067      	b.n	8002828 <find_volume+0x498>
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	f04f 32ff 	mov.w	r2, #4294967295
 800275e:	611a      	str	r2, [r3, #16]
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	60da      	str	r2, [r3, #12]
 8002768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	711a      	strb	r2, [r3, #4]
 800276e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002772:	2b03      	cmp	r3, #3
 8002774:	d149      	bne.n	800280a <find_volume+0x47a>
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	3330      	adds	r3, #48	; 0x30
 800277a:	3330      	adds	r3, #48	; 0x30
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fc13 	bl	8000fa8 <ld_word>
 8002782:	4603      	mov	r3, r0
 8002784:	2b01      	cmp	r3, #1
 8002786:	d140      	bne.n	800280a <find_volume+0x47a>
 8002788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278a:	3301      	adds	r3, #1
 800278c:	4619      	mov	r1, r3
 800278e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002790:	f7fe fd8f 	bl	80012b2 <move_window>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d137      	bne.n	800280a <find_volume+0x47a>
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	2200      	movs	r2, #0
 800279e:	711a      	strb	r2, [r3, #4]
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	3330      	adds	r3, #48	; 0x30
 80027a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fbfd 	bl	8000fa8 <ld_word>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d127      	bne.n	800280a <find_volume+0x47a>
 80027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027bc:	3330      	adds	r3, #48	; 0x30
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fc0a 	bl	8000fd8 <ld_dword>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <find_volume+0x4a4>)
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d11e      	bne.n	800280a <find_volume+0x47a>
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	3330      	adds	r3, #48	; 0x30
 80027d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fbff 	bl	8000fd8 <ld_dword>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b16      	ldr	r3, [pc, #88]	; (8002838 <find_volume+0x4a8>)
 80027de:	429a      	cmp	r2, r3
 80027e0:	d113      	bne.n	800280a <find_volume+0x47a>
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	3330      	adds	r3, #48	; 0x30
 80027e6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fbf4 	bl	8000fd8 <ld_dword>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	611a      	str	r2, [r3, #16]
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f8:	3330      	adds	r3, #48	; 0x30
 80027fa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fbea 	bl	8000fd8 <ld_dword>
 8002804:	4602      	mov	r2, r0
 8002806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <find_volume+0x4ac>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <find_volume+0x4ac>)
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <find_volume+0x4ac>)
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	80da      	strh	r2, [r3, #6]
 8002826:	2300      	movs	r3, #0
 8002828:	4618      	mov	r0, r3
 800282a:	3758      	adds	r7, #88	; 0x58
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	0ffffff5 	.word	0x0ffffff5
 8002834:	41615252 	.word	0x41615252
 8002838:	61417272 	.word	0x61417272
 800283c:	200000a4 	.word	0x200000a4

08002840 <validate>:
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	2309      	movs	r3, #9
 800284c:	73fb      	strb	r3, [r7, #15]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01c      	beq.n	800288e <validate+0x4e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d018      	beq.n	800288e <validate+0x4e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d013      	beq.n	800288e <validate+0x4e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	889a      	ldrh	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	88db      	ldrh	r3, [r3, #6]
 8002870:	429a      	cmp	r2, r3
 8002872:	d10c      	bne.n	800288e <validate+0x4e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	785b      	ldrb	r3, [r3, #1]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe f8c8 	bl	8000a10 <disk_status>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <validate+0x4e>
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <validate+0x5a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	e000      	b.n	800289c <validate+0x5c>
 800289a:	2300      	movs	r3, #0
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <f_mount>:
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	4613      	mov	r3, r2
 80028b8:	71fb      	strb	r3, [r7, #7]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fcc9 	bl	800225a <get_ldnumber>
 80028c8:	61f8      	str	r0, [r7, #28]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da01      	bge.n	80028d4 <f_mount+0x28>
 80028d0:	230b      	movs	r3, #11
 80028d2:	e025      	b.n	8002920 <f_mount+0x74>
 80028d4:	4a14      	ldr	r2, [pc, #80]	; (8002928 <f_mount+0x7c>)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <f_mount+0x3e>
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <f_mount+0x4a>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	490b      	ldr	r1, [pc, #44]	; (8002928 <f_mount+0x7c>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <f_mount+0x5e>
 8002906:	2300      	movs	r3, #0
 8002908:	e00a      	b.n	8002920 <f_mount+0x74>
 800290a:	f107 010c 	add.w	r1, r7, #12
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	2200      	movs	r2, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fd3b 	bl	8002390 <find_volume>
 800291a:	4603      	mov	r3, r0
 800291c:	75fb      	strb	r3, [r7, #23]
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	4618      	mov	r0, r3
 8002922:	3720      	adds	r7, #32
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	200000a0 	.word	0x200000a0

0800292c <f_open>:
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b099      	sub	sp, #100	; 0x64
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	71fb      	strb	r3, [r7, #7]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <f_open+0x18>
 8002940:	2309      	movs	r3, #9
 8002942:	e172      	b.n	8002c2a <f_open+0x2fe>
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	79fa      	ldrb	r2, [r7, #7]
 800294e:	f107 0114 	add.w	r1, r7, #20
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fd1a 	bl	8002390 <find_volume>
 800295c:	4603      	mov	r3, r0
 800295e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 8156 	bne.w	8002c18 <f_open+0x2ec>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	61bb      	str	r3, [r7, #24]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	f107 0318 	add.w	r3, r7, #24
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fbff 	bl	800217c <follow_path>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002984:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002988:	2b00      	cmp	r3, #0
 800298a:	d107      	bne.n	800299c <f_open+0x70>
 800298c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002990:	b25b      	sxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	da02      	bge.n	800299c <f_open+0x70>
 8002996:	2306      	movs	r3, #6
 8002998:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 031c 	and.w	r3, r3, #28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d073      	beq.n	8002a8e <f_open+0x162>
 80029a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d010      	beq.n	80029d0 <f_open+0xa4>
 80029ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d107      	bne.n	80029c6 <f_open+0x9a>
 80029b6:	f107 0318 	add.w	r3, r7, #24
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fa86 	bl	8001ecc <dir_register>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f043 0308 	orr.w	r3, r3, #8
 80029cc:	71fb      	strb	r3, [r7, #7]
 80029ce:	e010      	b.n	80029f2 <f_open+0xc6>
 80029d0:	7fbb      	ldrb	r3, [r7, #30]
 80029d2:	f003 0311 	and.w	r3, r3, #17
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <f_open+0xb6>
 80029da:	2307      	movs	r3, #7
 80029dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029e0:	e007      	b.n	80029f2 <f_open+0xc6>
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <f_open+0xc6>
 80029ec:	2308      	movs	r3, #8
 80029ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d163      	bne.n	8002ac2 <f_open+0x196>
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d05e      	beq.n	8002ac2 <f_open+0x196>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f96d 	bl	8001cea <ld_clust>
 8002a10:	6538      	str	r0, [r7, #80]	; 0x50
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	f103 040e 	add.w	r4, r3, #14
 8002a18:	f7fe fabc 	bl	8000f94 <get_fattime>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7fe fb17 	bl	8001054 <st_dword>
 8002a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a28:	330b      	adds	r3, #11
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a32:	2200      	movs	r2, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f977 	bl	8001d28 <st_clust>
 8002a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3c:	331c      	adds	r3, #28
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe fb07 	bl	8001054 <st_dword>
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	70da      	strb	r2, [r3, #3]
 8002a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d037      	beq.n	8002ac2 <f_open+0x196>
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a58:	f107 0318 	add.w	r3, r7, #24
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fe6c 	bl	800173e <remove_chain>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d126      	bne.n	8002ac2 <f_open+0x196>
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fc1a 	bl	80012b2 <move_window>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a88:	3a01      	subs	r2, #1
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	e019      	b.n	8002ac2 <f_open+0x196>
 8002a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d115      	bne.n	8002ac2 <f_open+0x196>
 8002a96:	7fbb      	ldrb	r3, [r7, #30]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <f_open+0x17c>
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002aa6:	e00c      	b.n	8002ac2 <f_open+0x196>
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <f_open+0x196>
 8002ab2:	7fbb      	ldrb	r3, [r7, #30]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <f_open+0x196>
 8002abc:	2307      	movs	r3, #7
 8002abe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <f_open+0x1be>
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <f_open+0x1b0>
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ada:	71fb      	strb	r3, [r7, #7]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	621a      	str	r2, [r3, #32]
 8002ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
 8002aea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 8092 	bne.w	8002c18 <f_open+0x2ec>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff f8f5 	bl	8001cea <ld_clust>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b08:	331c      	adds	r3, #28
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fa64 	bl	8000fd8 <ld_dword>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	88da      	ldrh	r2, [r3, #6]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	809a      	strh	r2, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	79fa      	ldrb	r2, [r7, #7]
 8002b28:	741a      	strb	r2, [r3, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	745a      	strb	r2, [r3, #17]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3328      	adds	r3, #40	; 0x28
 8002b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fad1 	bl	80010ee <mem_set>
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d060      	beq.n	8002c18 <f_open+0x2ec>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d05c      	beq.n	8002c18 <f_open+0x2ec>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	615a      	str	r2, [r3, #20]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	895b      	ldrh	r3, [r3, #10]
 8002b6a:	025b      	lsls	r3, r3, #9
 8002b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	657b      	str	r3, [r7, #84]	; 0x54
 8002b7a:	e016      	b.n	8002baa <f_open+0x27e>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fc50 	bl	8001426 <get_fat>
 8002b86:	65b8      	str	r0, [r7, #88]	; 0x58
 8002b88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d802      	bhi.n	8002b94 <f_open+0x268>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9a:	d102      	bne.n	8002ba2 <f_open+0x276>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ba2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	657b      	str	r3, [r7, #84]	; 0x54
 8002baa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <f_open+0x28e>
 8002bb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d8e0      	bhi.n	8002b7c <f_open+0x250>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bbe:	619a      	str	r2, [r3, #24]
 8002bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d127      	bne.n	8002c18 <f_open+0x2ec>
 8002bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d022      	beq.n	8002c18 <f_open+0x2ec>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fc06 	bl	80013e8 <clst2sect>
 8002bdc:	6478      	str	r0, [r7, #68]	; 0x44
 8002bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <f_open+0x2c0>
 8002be4:	2302      	movs	r3, #2
 8002be6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002bea:	e015      	b.n	8002c18 <f_open+0x2ec>
 8002bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bee:	0a5a      	lsrs	r2, r3, #9
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf2:	441a      	add	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	61da      	str	r2, [r3, #28]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	7858      	ldrb	r0, [r3, #1]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	2301      	movs	r3, #1
 8002c08:	f7fd ff18 	bl	8000a3c <disk_read>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <f_open+0x2ec>
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <f_open+0x2fa>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3764      	adds	r7, #100	; 0x64
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd90      	pop	{r4, r7, pc}

08002c32 <f_read>:
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b08e      	sub	sp, #56	; 0x38
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f107 0214 	add.w	r2, r7, #20
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fdf4 	bl	8002840 <validate>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d107      	bne.n	8002c76 <f_read+0x44>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	7c5b      	ldrb	r3, [r3, #17]
 8002c6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <f_read+0x4a>
 8002c76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c7a:	e109      	b.n	8002e90 <f_read+0x25e>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	7c1b      	ldrb	r3, [r3, #16]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <f_read+0x5a>
 8002c88:	2307      	movs	r3, #7
 8002c8a:	e101      	b.n	8002e90 <f_read+0x25e>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f240 80f2 	bls.w	8002e86 <f_read+0x254>
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	e0ee      	b.n	8002e86 <f_read+0x254>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f040 80ba 	bne.w	8002e2a <f_read+0x1f8>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	0a5b      	lsrs	r3, r3, #9
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	8952      	ldrh	r2, [r2, #10]
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d123      	bne.n	8002d14 <f_read+0xe2>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <f_read+0xaa>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cda:	e007      	b.n	8002cec <f_read+0xba>
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f7fe fb9e 	bl	8001426 <get_fat>
 8002cea:	6338      	str	r0, [r7, #48]	; 0x30
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d804      	bhi.n	8002cfc <f_read+0xca>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	745a      	strb	r2, [r3, #17]
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e0c9      	b.n	8002e90 <f_read+0x25e>
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d104      	bne.n	8002d0e <f_read+0xdc>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	745a      	strb	r2, [r3, #17]
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0c0      	b.n	8002e90 <f_read+0x25e>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d12:	619a      	str	r2, [r3, #24]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f7fe fb63 	bl	80013e8 <clst2sect>
 8002d22:	61b8      	str	r0, [r7, #24]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d104      	bne.n	8002d34 <f_read+0x102>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	745a      	strb	r2, [r3, #17]
 8002d30:	2302      	movs	r3, #2
 8002d32:	e0ad      	b.n	8002e90 <f_read+0x25e>
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0a5b      	lsrs	r3, r3, #9
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d039      	beq.n	8002dbc <f_read+0x18a>
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	4413      	add	r3, r2
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	8952      	ldrh	r2, [r2, #10]
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d905      	bls.n	8002d62 <f_read+0x130>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	895b      	ldrh	r3, [r3, #10]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	7858      	ldrb	r0, [r3, #1]
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6c:	f7fd fe66 	bl	8000a3c <disk_read>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <f_read+0x14e>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	745a      	strb	r2, [r3, #17]
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e087      	b.n	8002e90 <f_read+0x25e>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	7c1b      	ldrb	r3, [r3, #16]
 8002d84:	b25b      	sxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	da14      	bge.n	8002db4 <f_read+0x182>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d90d      	bls.n	8002db4 <f_read+0x182>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	025b      	lsls	r3, r3, #9
 8002da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da4:	18d0      	adds	r0, r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3328      	adds	r3, #40	; 0x28
 8002daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dae:	4619      	mov	r1, r3
 8002db0:	f7fe f97c 	bl	80010ac <mem_cpy>
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dba:	e050      	b.n	8002e5e <f_read+0x22c>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d02e      	beq.n	8002e24 <f_read+0x1f2>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	7c1b      	ldrb	r3, [r3, #16]
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	da18      	bge.n	8002e02 <f_read+0x1d0>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	7858      	ldrb	r0, [r3, #1]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	2301      	movs	r3, #1
 8002de0:	f7fd fe96 	bl	8000b10 <disk_write>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d004      	beq.n	8002df4 <f_read+0x1c2>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	745a      	strb	r2, [r3, #17]
 8002df0:	2301      	movs	r3, #1
 8002df2:	e04d      	b.n	8002e90 <f_read+0x25e>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	7c1b      	ldrb	r3, [r3, #16]
 8002df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	741a      	strb	r2, [r3, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	7858      	ldrb	r0, [r3, #1]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	f7fd fe14 	bl	8000a3c <disk_read>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d004      	beq.n	8002e24 <f_read+0x1f2>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	745a      	strb	r2, [r3, #17]
 8002e20:	2301      	movs	r3, #1
 8002e22:	e035      	b.n	8002e90 <f_read+0x25e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	61da      	str	r2, [r3, #28]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e32:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d901      	bls.n	8002e44 <f_read+0x212>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e52:	4413      	add	r3, r2
 8002e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e56:	4619      	mov	r1, r3
 8002e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e5a:	f7fe f927 	bl	80010ac <mem_cpy>
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	441a      	add	r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	4413      	add	r3, r2
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	441a      	add	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	615a      	str	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f47f af0d 	bne.w	8002ca8 <f_read+0x76>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	3738      	adds	r7, #56	; 0x38
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <f_sync>:
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f107 0208 	add.w	r2, r7, #8
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fcc9 	bl	8002840 <validate>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	75fb      	strb	r3, [r7, #23]
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d168      	bne.n	8002f8a <f_sync+0xf2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7c1b      	ldrb	r3, [r3, #16]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d062      	beq.n	8002f8a <f_sync+0xf2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7c1b      	ldrb	r3, [r3, #16]
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da15      	bge.n	8002efa <f_sync+0x62>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	7858      	ldrb	r0, [r3, #1]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	2301      	movs	r3, #1
 8002ede:	f7fd fe17 	bl	8000b10 <disk_write>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <f_sync+0x54>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e04f      	b.n	8002f8c <f_sync+0xf4>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	7c1b      	ldrb	r3, [r3, #16]
 8002ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	741a      	strb	r2, [r3, #16]
 8002efa:	f7fe f84b 	bl	8000f94 <get_fattime>
 8002efe:	6138      	str	r0, [r7, #16]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f7fe f9d2 	bl	80012b2 <move_window>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	75fb      	strb	r3, [r7, #23]
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d138      	bne.n	8002f8a <f_sync+0xf2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	330b      	adds	r3, #11
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	330b      	adds	r3, #11
 8002f28:	f042 0220 	orr.w	r2, r2, #32
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	f7fe fef4 	bl	8001d28 <st_clust>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f103 021c 	add.w	r2, r3, #28
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	f7fe f881 	bl	8001054 <st_dword>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3316      	adds	r3, #22
 8002f56:	6939      	ldr	r1, [r7, #16]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe f87b 	bl	8001054 <st_dword>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3312      	adds	r3, #18
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe f85a 	bl	800101e <st_word>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	70da      	strb	r2, [r3, #3]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe f9ca 	bl	800130c <sync_fs>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	75fb      	strb	r3, [r7, #23]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7c1b      	ldrb	r3, [r3, #16]
 8002f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	741a      	strb	r2, [r3, #16]
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <f_close>:
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff7b 	bl	8002e98 <f_sync>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10e      	bne.n	8002fca <f_close+0x36>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f107 0208 	add.w	r2, r7, #8
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fc43 	bl	8002840 <validate>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	73fb      	strb	r3, [r7, #15]
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <f_close+0x36>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <f_opendir>:
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <f_opendir+0x14>
 8002fe4:	2309      	movs	r3, #9
 8002fe6:	e04a      	b.n	800307e <f_opendir+0xaa>
 8002fe8:	f107 0108 	add.w	r1, r7, #8
 8002fec:	463b      	mov	r3, r7
 8002fee:	2200      	movs	r2, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff f9cd 	bl	8002390 <find_volume>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	73fb      	strb	r3, [r7, #15]
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d137      	bne.n	8003070 <f_opendir+0x9c>
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff f8b6 	bl	800217c <follow_path>
 8003010:	4603      	mov	r3, r0
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d125      	bne.n	8003066 <f_opendir+0x92>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003020:	b25b      	sxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	db12      	blt.n	800304c <f_opendir+0x78>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	799b      	ldrb	r3, [r3, #6]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <f_opendir+0x74>
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f7fe fe55 	bl	8001cea <ld_clust>
 8003040:	4602      	mov	r2, r0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	e001      	b.n	800304c <f_opendir+0x78>
 8003048:	2305      	movs	r3, #5
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <f_opendir+0x92>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	88da      	ldrh	r2, [r3, #6]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	809a      	strh	r2, [r3, #4]
 800305a:	2100      	movs	r1, #0
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7fe fcec 	bl	8001a3a <dir_sdi>
 8003062:	4603      	mov	r3, r0
 8003064:	73fb      	strb	r3, [r7, #15]
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b04      	cmp	r3, #4
 800306a:	d101      	bne.n	8003070 <f_opendir+0x9c>
 800306c:	2305      	movs	r3, #5
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <f_opendir+0xa8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <f_readdir>:
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f107 0208 	add.w	r2, r7, #8
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fbd1 	bl	8002840 <validate>
 800309e:	4603      	mov	r3, r0
 80030a0:	73fb      	strb	r3, [r7, #15]
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d126      	bne.n	80030f6 <f_readdir+0x70>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <f_readdir+0x36>
 80030ae:	2100      	movs	r1, #0
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fe fcc2 	bl	8001a3a <dir_sdi>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]
 80030ba:	e01c      	b.n	80030f6 <f_readdir+0x70>
 80030bc:	2100      	movs	r1, #0
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fe52 	bl	8001d68 <dir_read>
 80030c4:	4603      	mov	r3, r0
 80030c6:	73fb      	strb	r3, [r7, #15]
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d101      	bne.n	80030d2 <f_readdir+0x4c>
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10e      	bne.n	80030f6 <f_readdir+0x70>
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe ff28 	bl	8001f30 <get_fileinfo>
 80030e0:	2100      	movs	r1, #0
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe fd24 	bl	8001b30 <dir_next>
 80030e8:	4603      	mov	r3, r0
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d101      	bne.n	80030f6 <f_readdir+0x70>
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <lcd_send_cmd>:
	lcd_send_cmd(0x40 + (Location * 8));  //Send the Address of CGRAM
	for (i = 0; i < 8; i++)
		lcd_send_data(Pattern[i]);  //Pass the bytes of pattern on LCD
}

void lcd_send_cmd(char cmd) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af02      	add	r7, sp, #8
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	f023 030f 	bic.w	r3, r3, #15
 8003110:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	f043 030c 	orr.w	r3, r3, #12
 800311e:	b2db      	uxtb	r3, r3
 8003120:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	f043 0308 	orr.w	r3, r3, #8
 8003128:	b2db      	uxtb	r3, r3
 800312a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 800312c:	7bbb      	ldrb	r3, [r7, #14]
 800312e:	f043 030c 	orr.w	r3, r3, #12
 8003132:	b2db      	uxtb	r3, r3
 8003134:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 8003136:	7bbb      	ldrb	r3, [r7, #14]
 8003138:	f043 0308 	orr.w	r3, r3, #8
 800313c:	b2db      	uxtb	r3, r3
 800313e:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c3, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8003140:	f107 0208 	add.w	r2, r7, #8
 8003144:	2364      	movs	r3, #100	; 0x64
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2304      	movs	r3, #4
 800314a:	214e      	movs	r1, #78	; 0x4e
 800314c:	4804      	ldr	r0, [pc, #16]	; (8003160 <lcd_send_cmd+0x60>)
 800314e:	f003 fafb 	bl	8006748 <HAL_I2C_Master_Transmit>
 8003152:	4603      	mov	r3, r0
 8003154:	737b      	strb	r3, [r7, #13]
			100);
}
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000308 	.word	0x20000308

08003164 <lcd_send_data>:

void lcd_send_data(char data) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af02      	add	r7, sp, #8
 800316a:	4603      	mov	r3, r0
 800316c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	f023 030f 	bic.w	r3, r3, #15
 8003174:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	f043 030d 	orr.w	r3, r3, #13
 8003182:	b2db      	uxtb	r3, r3
 8003184:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	f043 0309 	orr.w	r3, r3, #9
 800318c:	b2db      	uxtb	r3, r3
 800318e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8003190:	7bbb      	ldrb	r3, [r7, #14]
 8003192:	f043 030d 	orr.w	r3, r3, #13
 8003196:	b2db      	uxtb	r3, r3
 8003198:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 800319a:	7bbb      	ldrb	r3, [r7, #14]
 800319c:	f043 0309 	orr.w	r3, r3, #9
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c3, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 80031a4:	f107 0208 	add.w	r2, r7, #8
 80031a8:	2364      	movs	r3, #100	; 0x64
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	2304      	movs	r3, #4
 80031ae:	214e      	movs	r1, #78	; 0x4e
 80031b0:	4804      	ldr	r0, [pc, #16]	; (80031c4 <lcd_send_data+0x60>)
 80031b2:	f003 fac9 	bl	8006748 <HAL_I2C_Master_Transmit>
 80031b6:	4603      	mov	r3, r0
 80031b8:	737b      	strb	r3, [r7, #13]
			100);
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000308 	.word	0x20000308

080031c8 <lcd_clear>:

void lcd_clear(void) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x00);
 80031ce:	2000      	movs	r0, #0
 80031d0:	f7ff ff96 	bl	8003100 <lcd_send_cmd>
	for (int i = 0; i < 100; i++) {
 80031d4:	2300      	movs	r3, #0
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	e005      	b.n	80031e6 <lcd_clear+0x1e>
		lcd_send_data(' ');
 80031da:	2020      	movs	r0, #32
 80031dc:	f7ff ffc2 	bl	8003164 <lcd_send_data>
	for (int i = 0; i < 100; i++) {
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3301      	adds	r3, #1
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b63      	cmp	r3, #99	; 0x63
 80031ea:	ddf6      	ble.n	80031da <lcd_clear+0x12>
	}
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <lcd_init>:

void lcd_init(void) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80031f8:	2032      	movs	r0, #50	; 0x32
 80031fa:	f001 fbfd 	bl	80049f8 <HAL_Delay>
	lcd_send_cmd(0x30);
 80031fe:	2030      	movs	r0, #48	; 0x30
 8003200:	f7ff ff7e 	bl	8003100 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8003204:	2005      	movs	r0, #5
 8003206:	f001 fbf7 	bl	80049f8 <HAL_Delay>
	lcd_send_cmd(0x30);
 800320a:	2030      	movs	r0, #48	; 0x30
 800320c:	f7ff ff78 	bl	8003100 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8003210:	2001      	movs	r0, #1
 8003212:	f001 fbf1 	bl	80049f8 <HAL_Delay>
	lcd_send_cmd(0x30);
 8003216:	2030      	movs	r0, #48	; 0x30
 8003218:	f7ff ff72 	bl	8003100 <lcd_send_cmd>
	HAL_Delay(10);
 800321c:	200a      	movs	r0, #10
 800321e:	f001 fbeb 	bl	80049f8 <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 8003222:	2020      	movs	r0, #32
 8003224:	f7ff ff6c 	bl	8003100 <lcd_send_cmd>
	HAL_Delay(10);
 8003228:	200a      	movs	r0, #10
 800322a:	f001 fbe5 	bl	80049f8 <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800322e:	2028      	movs	r0, #40	; 0x28
 8003230:	f7ff ff66 	bl	8003100 <lcd_send_cmd>
	HAL_Delay(1);
 8003234:	2001      	movs	r0, #1
 8003236:	f001 fbdf 	bl	80049f8 <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800323a:	2008      	movs	r0, #8
 800323c:	f7ff ff60 	bl	8003100 <lcd_send_cmd>
	HAL_Delay(1);
 8003240:	2001      	movs	r0, #1
 8003242:	f001 fbd9 	bl	80049f8 <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 8003246:	2001      	movs	r0, #1
 8003248:	f7ff ff5a 	bl	8003100 <lcd_send_cmd>
	HAL_Delay(1);
 800324c:	2001      	movs	r0, #1
 800324e:	f001 fbd3 	bl	80049f8 <HAL_Delay>
	HAL_Delay(1);
 8003252:	2001      	movs	r0, #1
 8003254:	f001 fbd0 	bl	80049f8 <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8003258:	2006      	movs	r0, #6
 800325a:	f7ff ff51 	bl	8003100 <lcd_send_cmd>
	HAL_Delay(1);
 800325e:	2001      	movs	r0, #1
 8003260:	f001 fbca 	bl	80049f8 <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8003264:	200c      	movs	r0, #12
 8003266:	f7ff ff4b 	bl	8003100 <lcd_send_cmd>
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}

0800326e <lcd_send_string>:

void lcd_send_string(char *str) {
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
	while (*str)
 8003276:	e006      	b.n	8003286 <lcd_send_string+0x18>
		lcd_send_data(*str++);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff6f 	bl	8003164 <lcd_send_data>
	while (*str)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f4      	bne.n	8003278 <lcd_send_string+0xa>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
    switch (row)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <lcd_put_cur+0x16>
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d005      	beq.n	80032b6 <lcd_put_cur+0x20>
 80032aa:	e009      	b.n	80032c0 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b2:	603b      	str	r3, [r7, #0]
            break;
 80032b4:	e004      	b.n	80032c0 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032bc:	603b      	str	r3, [r7, #0]
            break;
 80032be:	bf00      	nop
    }

    lcd_send_cmd (col);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff1b 	bl	8003100 <lcd_send_cmd>
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <read_song>:
static void MX_DAC_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2S3_Init(void);
/* USER CODE BEGIN PFP */

void read_song(){
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08e      	sub	sp, #56	; 0x38
 80032d8:	af00      	add	r7, sp, #0

FRESULT res;
    DIR dir;
    UINT i=0;
 80032da:	2300      	movs	r3, #0
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
    UINT z;

    static FILINFO fno;


		res = f_opendir(&dir, "/");
 80032de:	463b      	mov	r3, r7
 80032e0:	492e      	ldr	r1, [pc, #184]	; (800339c <read_song+0xc8>)
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fe76 	bl	8002fd4 <f_opendir>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    	if (res == FR_OK) {
 80032ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d147      	bne.n	8003386 <read_song+0xb2>


  	  	  	do{
            		res = f_readdir(&dir, &fno);
 80032f6:	463b      	mov	r3, r7
 80032f8:	4929      	ldr	r1, [pc, #164]	; (80033a0 <read_song+0xcc>)
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fec3 	bl	8003086 <f_readdir>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            		if (res != FR_OK || fno.fname[0] == 0) {i=1; break;}
 8003306:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800330a:	2b00      	cmp	r3, #0
 800330c:	d103      	bne.n	8003316 <read_song+0x42>
 800330e:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <read_song+0xcc>)
 8003310:	7a5b      	ldrb	r3, [r3, #9]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <read_song+0x48>
 8003316:	2301      	movs	r3, #1
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
 800331a:	e024      	b.n	8003366 <read_song+0x92>
            		printf("%s\n", fno.fname);
 800331c:	4821      	ldr	r0, [pc, #132]	; (80033a4 <read_song+0xd0>)
 800331e:	f008 fab3 	bl	800b888 <puts>
                	z = strlen(fno.fname);
 8003322:	4820      	ldr	r0, [pc, #128]	; (80033a4 <read_song+0xd0>)
 8003324:	f7fc ff50 	bl	80001c8 <strlen>
 8003328:	62f8      	str	r0, [r7, #44]	; 0x2c
                	i++;
 800332a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332c:	3301      	adds	r3, #1
 800332e:	637b      	str	r3, [r7, #52]	; 0x34
            	}
            	while(i<=nr_utworu ||(fno.fname[z-1]!='V') || (fno.fname[z-2]!='A')|| (fno.fname[z-3]!='W'));
 8003330:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <read_song+0xd4>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003338:	4293      	cmp	r3, r2
 800333a:	d9dc      	bls.n	80032f6 <read_song+0x22>
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333e:	3b01      	subs	r3, #1
 8003340:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <read_song+0xcc>)
 8003342:	4413      	add	r3, r2
 8003344:	7a5b      	ldrb	r3, [r3, #9]
 8003346:	2b56      	cmp	r3, #86	; 0x56
 8003348:	d1d5      	bne.n	80032f6 <read_song+0x22>
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	3b02      	subs	r3, #2
 800334e:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <read_song+0xcc>)
 8003350:	4413      	add	r3, r2
 8003352:	7a5b      	ldrb	r3, [r3, #9]
 8003354:	2b41      	cmp	r3, #65	; 0x41
 8003356:	d1ce      	bne.n	80032f6 <read_song+0x22>
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	3b03      	subs	r3, #3
 800335c:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <read_song+0xcc>)
 800335e:	4413      	add	r3, r2
 8003360:	7a5b      	ldrb	r3, [r3, #9]
 8003362:	2b57      	cmp	r3, #87	; 0x57
 8003364:	d1c7      	bne.n	80032f6 <read_song+0x22>
  	  	  	//||
  	  	  	//(fno.fname[z-1]!='3') || (fno.fname[z-2]!='P')|| (fno.fname[z-3]!='M')
  	  	  		sprintf(utwor,"%s",fno.fname);
 8003366:	490f      	ldr	r1, [pc, #60]	; (80033a4 <read_song+0xd0>)
 8003368:	4810      	ldr	r0, [pc, #64]	; (80033ac <read_song+0xd8>)
 800336a:	f008 fa95 	bl	800b898 <strcpy>
  	  	  		nr_utworu=i-1;
 800336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <read_song+0xd4>)
 8003378:	801a      	strh	r2, [r3, #0]
  	  	  		if(nr_utworu==0)read_song();
 800337a:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <read_song+0xd4>)
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <read_song+0xb2>
 8003382:	f7ff ffa7 	bl	80032d4 <read_song>
            	}


    			sizeutwor = strlen(utwor);
 8003386:	4809      	ldr	r0, [pc, #36]	; (80033ac <read_song+0xd8>)
 8003388:	f7fc ff1e 	bl	80001c8 <strlen>
 800338c:	4603      	mov	r3, r0
 800338e:	b2da      	uxtb	r2, r3
 8003390:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <read_song+0xdc>)
 8003392:	701a      	strb	r2, [r3, #0]
               	return;
 8003394:	bf00      	nop
}
 8003396:	3738      	adds	r7, #56	; 0x38
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	0800c0e4 	.word	0x0800c0e4
 80033a0:	200002e0 	.word	0x200002e0
 80033a4:	200002e9 	.word	0x200002e9
 80033a8:	200002dc 	.word	0x200002dc
 80033ac:	200003f0 	.word	0x200003f0
 80033b0:	20000adc 	.word	0x20000adc

080033b4 <next>:

void next(){
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim4);
 80033b8:	481c      	ldr	r0, [pc, #112]	; (800342c <next+0x78>)
 80033ba:	f006 ff60 	bl	800a27e <HAL_TIM_Base_Stop_IT>
	f_close(&file);
 80033be:	481c      	ldr	r0, [pc, #112]	; (8003430 <next+0x7c>)
 80033c0:	f7ff fde8 	bl	8002f94 <f_close>
	nr_utworu++;
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <next+0x80>)
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	3301      	adds	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <next+0x80>)
 80033ce:	801a      	strh	r2, [r3, #0]
	read_song();
 80033d0:	f7ff ff80 	bl	80032d4 <read_song>
	fresult = f_open(&file, &utwor , FA_READ|FA_OPEN_EXISTING);
 80033d4:	2201      	movs	r2, #1
 80033d6:	4918      	ldr	r1, [pc, #96]	; (8003438 <next+0x84>)
 80033d8:	4815      	ldr	r0, [pc, #84]	; (8003430 <next+0x7c>)
 80033da:	f7ff faa7 	bl	800292c <f_open>
 80033de:	4603      	mov	r3, r0
 80033e0:	461a      	mov	r2, r3
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <next+0x88>)
 80033e4:	701a      	strb	r2, [r3, #0]
	f_read(&file, &buf, BUFSIZE, &bytes_read);
 80033e6:	4b16      	ldr	r3, [pc, #88]	; (8003440 <next+0x8c>)
 80033e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033ec:	4915      	ldr	r1, [pc, #84]	; (8003444 <next+0x90>)
 80033ee:	4810      	ldr	r0, [pc, #64]	; (8003430 <next+0x7c>)
 80033f0:	f7ff fc1f 	bl	8002c32 <f_read>
	i=0;
 80033f4:	4b14      	ldr	r3, [pc, #80]	; (8003448 <next+0x94>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
	j=0;
 80033fa:	4b14      	ldr	r3, [pc, #80]	; (800344c <next+0x98>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
	 lcd_clear ();
 8003400:	f7ff fee2 	bl	80031c8 <lcd_clear>
	lcd_put_cur(0, 0);
 8003404:	2100      	movs	r1, #0
 8003406:	2000      	movs	r0, #0
 8003408:	f7ff ff45 	bl	8003296 <lcd_put_cur>
	lcd_send_string(&utwor);
 800340c:	480a      	ldr	r0, [pc, #40]	; (8003438 <next+0x84>)
 800340e:	f7ff ff2e 	bl	800326e <lcd_send_string>
	lcd_put_cur(1, 0);
 8003412:	2100      	movs	r1, #0
 8003414:	2001      	movs	r0, #1
 8003416:	f7ff ff3e 	bl	8003296 <lcd_put_cur>
	lcd_send_string("PLAY");
 800341a:	480d      	ldr	r0, [pc, #52]	; (8003450 <next+0x9c>)
 800341c:	f7ff ff27 	bl	800326e <lcd_send_string>
	 HAL_TIM_Base_Start_IT(&htim4);
 8003420:	4802      	ldr	r0, [pc, #8]	; (800342c <next+0x78>)
 8003422:	f006 ff08 	bl	800a236 <HAL_TIM_Base_Start_IT>
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	2000035c 	.word	0x2000035c
 8003430:	20000468 	.word	0x20000468
 8003434:	200002dc 	.word	0x200002dc
 8003438:	200003f0 	.word	0x200003f0
 800343c:	20000fc4 	.word	0x20000fc4
 8003440:	200006d8 	.word	0x200006d8
 8003444:	20000bc4 	.word	0x20000bc4
 8003448:	200002d8 	.word	0x200002d8
 800344c:	20000004 	.word	0x20000004
 8003450:	0800c0e8 	.word	0x0800c0e8

08003454 <prev>:

void prev(){
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim4);
 8003458:	481c      	ldr	r0, [pc, #112]	; (80034cc <prev+0x78>)
 800345a:	f006 ff10 	bl	800a27e <HAL_TIM_Base_Stop_IT>
	f_close(&file);
 800345e:	481c      	ldr	r0, [pc, #112]	; (80034d0 <prev+0x7c>)
 8003460:	f7ff fd98 	bl	8002f94 <f_close>
	nr_utworu--;
 8003464:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <prev+0x80>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <prev+0x80>)
 800346e:	801a      	strh	r2, [r3, #0]
	read_song();
 8003470:	f7ff ff30 	bl	80032d4 <read_song>
	fresult = f_open(&file, &utwor , FA_READ|FA_OPEN_EXISTING);
 8003474:	2201      	movs	r2, #1
 8003476:	4918      	ldr	r1, [pc, #96]	; (80034d8 <prev+0x84>)
 8003478:	4815      	ldr	r0, [pc, #84]	; (80034d0 <prev+0x7c>)
 800347a:	f7ff fa57 	bl	800292c <f_open>
 800347e:	4603      	mov	r3, r0
 8003480:	461a      	mov	r2, r3
 8003482:	4b16      	ldr	r3, [pc, #88]	; (80034dc <prev+0x88>)
 8003484:	701a      	strb	r2, [r3, #0]
	f_read(&file, &buf, BUFSIZE, &bytes_read);
 8003486:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <prev+0x8c>)
 8003488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800348c:	4915      	ldr	r1, [pc, #84]	; (80034e4 <prev+0x90>)
 800348e:	4810      	ldr	r0, [pc, #64]	; (80034d0 <prev+0x7c>)
 8003490:	f7ff fbcf 	bl	8002c32 <f_read>
	i=0;
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <prev+0x94>)
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
	j=0;
 800349a:	4b14      	ldr	r3, [pc, #80]	; (80034ec <prev+0x98>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
	 lcd_clear ();
 80034a0:	f7ff fe92 	bl	80031c8 <lcd_clear>
	lcd_put_cur(0, 0);
 80034a4:	2100      	movs	r1, #0
 80034a6:	2000      	movs	r0, #0
 80034a8:	f7ff fef5 	bl	8003296 <lcd_put_cur>
	lcd_send_string(&utwor);
 80034ac:	480a      	ldr	r0, [pc, #40]	; (80034d8 <prev+0x84>)
 80034ae:	f7ff fede 	bl	800326e <lcd_send_string>
	lcd_put_cur(1, 0);
 80034b2:	2100      	movs	r1, #0
 80034b4:	2001      	movs	r0, #1
 80034b6:	f7ff feee 	bl	8003296 <lcd_put_cur>
	lcd_send_string("PLAY");
 80034ba:	480d      	ldr	r0, [pc, #52]	; (80034f0 <prev+0x9c>)
 80034bc:	f7ff fed7 	bl	800326e <lcd_send_string>
	HAL_TIM_Base_Start_IT(&htim4);
 80034c0:	4802      	ldr	r0, [pc, #8]	; (80034cc <prev+0x78>)
 80034c2:	f006 feb8 	bl	800a236 <HAL_TIM_Base_Start_IT>
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	2000035c 	.word	0x2000035c
 80034d0:	20000468 	.word	0x20000468
 80034d4:	200002dc 	.word	0x200002dc
 80034d8:	200003f0 	.word	0x200003f0
 80034dc:	20000fc4 	.word	0x20000fc4
 80034e0:	200006d8 	.word	0x200006d8
 80034e4:	20000bc4 	.word	0x20000bc4
 80034e8:	200002d8 	.word	0x200002d8
 80034ec:	20000004 	.word	0x20000004
 80034f0:	0800c0e8 	.word	0x0800c0e8

080034f4 <HAL_GPIO_EXTI_Callback>:
		  	else if(value[0]>3285 && value[0] <= 3692) indeks_glosnosci = 8;
		  	else if(value[0]>3692 && value[0] <= 4095) indeks_glosnosci = 9;
	}
}*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	80fb      	strh	r3, [r7, #6]

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET){
 80034fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003502:	4839      	ldr	r0, [pc, #228]	; (80035e8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003504:	f002 ff84 	bl	8006410 <HAL_GPIO_ReadPin>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10d      	bne.n	800352a <HAL_GPIO_EXTI_Callback+0x36>

		 //ciszej

		 if(indeks_glosnosci>0 && indeks_glosnosci<=9) indeks_glosnosci--;
 800350e:	4b37      	ldr	r3, [pc, #220]	; (80035ec <HAL_GPIO_EXTI_Callback+0xf8>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_GPIO_EXTI_Callback+0x36>
 8003516:	4b35      	ldr	r3, [pc, #212]	; (80035ec <HAL_GPIO_EXTI_Callback+0xf8>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b09      	cmp	r3, #9
 800351c:	d805      	bhi.n	800352a <HAL_GPIO_EXTI_Callback+0x36>
 800351e:	4b33      	ldr	r3, [pc, #204]	; (80035ec <HAL_GPIO_EXTI_Callback+0xf8>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	3b01      	subs	r3, #1
 8003524:	b2da      	uxtb	r2, r3
 8003526:	4b31      	ldr	r3, [pc, #196]	; (80035ec <HAL_GPIO_EXTI_Callback+0xf8>)
 8003528:	701a      	strb	r2, [r3, #0]

		  	}

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 800352a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800352e:	482e      	ldr	r0, [pc, #184]	; (80035e8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003530:	f002 ff6e 	bl	8006410 <HAL_GPIO_ReadPin>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_GPIO_EXTI_Callback+0x4a>
			  		//prev song
		prev();
 800353a:	f7ff ff8b 	bl	8003454 <prev>


			}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 800353e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003542:	4829      	ldr	r0, [pc, #164]	; (80035e8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003544:	f002 ff64 	bl	8006410 <HAL_GPIO_ReadPin>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d129      	bne.n	80035a2 <HAL_GPIO_EXTI_Callback+0xae>


		 //pause/start

		 if(stan==1){
 800354e:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d116      	bne.n	8003584 <HAL_GPIO_EXTI_Callback+0x90>
		//HAL_TIM_Base_Start(&htim6);
		//HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &buf, BUFSIZE, DAC_ALIGN_12B_R);
		lcd_clear();
 8003556:	f7ff fe37 	bl	80031c8 <lcd_clear>
		lcd_put_cur(0, 0);
 800355a:	2100      	movs	r1, #0
 800355c:	2000      	movs	r0, #0
 800355e:	f7ff fe9a 	bl	8003296 <lcd_put_cur>
		lcd_send_string(&utwor);
 8003562:	4824      	ldr	r0, [pc, #144]	; (80035f4 <HAL_GPIO_EXTI_Callback+0x100>)
 8003564:	f7ff fe83 	bl	800326e <lcd_send_string>
		lcd_put_cur(1, 0);
 8003568:	2100      	movs	r1, #0
 800356a:	2001      	movs	r0, #1
 800356c:	f7ff fe93 	bl	8003296 <lcd_put_cur>
		lcd_send_string("PLAY");
 8003570:	4821      	ldr	r0, [pc, #132]	; (80035f8 <HAL_GPIO_EXTI_Callback+0x104>)
 8003572:	f7ff fe7c 	bl	800326e <lcd_send_string>

		HAL_TIM_Base_Start_IT(&htim4);
 8003576:	4821      	ldr	r0, [pc, #132]	; (80035fc <HAL_GPIO_EXTI_Callback+0x108>)
 8003578:	f006 fe5d 	bl	800a236 <HAL_TIM_Base_Start_IT>
		 //HAL_TIM_Base_Start_IT(&htim7);
		 stan = 0;
 800357c:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <HAL_GPIO_EXTI_Callback+0xfc>)
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	e00e      	b.n	80035a2 <HAL_GPIO_EXTI_Callback+0xae>
		 }
		 else
		 {
			 lcd_clear();
 8003584:	f7ff fe20 	bl	80031c8 <lcd_clear>
			 lcd_put_cur(1, 0);
 8003588:	2100      	movs	r1, #0
 800358a:	2001      	movs	r0, #1
 800358c:	f7ff fe83 	bl	8003296 <lcd_put_cur>
			 lcd_send_string("PAUSE");
 8003590:	481b      	ldr	r0, [pc, #108]	; (8003600 <HAL_GPIO_EXTI_Callback+0x10c>)
 8003592:	f7ff fe6c 	bl	800326e <lcd_send_string>
			 //HAL_TIM_Base_Start(&htim6);
			HAL_TIM_Base_Stop_IT(&htim4);
 8003596:	4819      	ldr	r0, [pc, #100]	; (80035fc <HAL_GPIO_EXTI_Callback+0x108>)
 8003598:	f006 fe71 	bl	800a27e <HAL_TIM_Base_Stop_IT>
			 stan=1;
 800359c:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <HAL_GPIO_EXTI_Callback+0xfc>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
		 }

	 		}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET){
 80035a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035a6:	4810      	ldr	r0, [pc, #64]	; (80035e8 <HAL_GPIO_EXTI_Callback+0xf4>)
 80035a8:	f002 ff32 	bl	8006410 <HAL_GPIO_ReadPin>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_GPIO_EXTI_Callback+0xc2>
		 	next();
 80035b2:	f7ff feff 	bl	80033b4 <next>

		 	}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 80035b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ba:	480b      	ldr	r0, [pc, #44]	; (80035e8 <HAL_GPIO_EXTI_Callback+0xf4>)
 80035bc:	f002 ff28 	bl	8006410 <HAL_GPIO_ReadPin>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_GPIO_EXTI_Callback+0xe6>

		 //glosniej

		 if(indeks_glosnosci>=0 && indeks_glosnosci<9)
 80035c6:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_GPIO_EXTI_Callback+0xf8>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d805      	bhi.n	80035da <HAL_GPIO_EXTI_Callback+0xe6>
			 indeks_glosnosci++;
 80035ce:	4b07      	ldr	r3, [pc, #28]	; (80035ec <HAL_GPIO_EXTI_Callback+0xf8>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	3301      	adds	r3, #1
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <HAL_GPIO_EXTI_Callback+0xf8>)
 80035d8:	701a      	strb	r2, [r3, #0]
			 	}
	 HAL_Delay(200);
 80035da:	20c8      	movs	r0, #200	; 0xc8
 80035dc:	f001 fa0c 	bl	80049f8 <HAL_Delay>

}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40020400 	.word	0x40020400
 80035ec:	20000008 	.word	0x20000008
 80035f0:	2000000c 	.word	0x2000000c
 80035f4:	200003f0 	.word	0x200003f0
 80035f8:	0800c0e8 	.word	0x0800c0e8
 80035fc:	2000035c 	.word	0x2000035c
 8003600:	0800c0f0 	.word	0x0800c0f0

08003604 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a47      	ldr	r2, [pc, #284]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	f040 8088 	bne.w	8003728 <HAL_TIM_PeriodElapsedCallback+0x124>
	{
		if(aktualny_bufor==0){
 8003618:	4b46      	ldr	r3, [pc, #280]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d13f      	bne.n	80036a0 <HAL_TIM_PeriodElapsedCallback+0x9c>
					HAL_DAC_SetValue(&hdac,DAC_CHANNEL_2,DAC_ALIGN_12B_R,buf[i]*(value[0]/500));
 8003620:	4b45      	ldr	r3, [pc, #276]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a45      	ldr	r2, [pc, #276]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003626:	5cd3      	ldrb	r3, [r2, r3]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4619      	mov	r1, r3
 800362c:	4b44      	ldr	r3, [pc, #272]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	4a44      	ldr	r2, [pc, #272]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	b29b      	uxth	r3, r3
 800363a:	fb03 f301 	mul.w	r3, r3, r1
 800363e:	2200      	movs	r2, #0
 8003640:	2110      	movs	r1, #16
 8003642:	4841      	ldr	r0, [pc, #260]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003644:	f002 f97c 	bl	8005940 <HAL_DAC_SetValue>
					//HAL_I2S_Transmit(&hi2s2, &buf[i], BUFSIZE,100);
					eof=f_eof(&file);
 8003648:	4b40      	ldr	r3, [pc, #256]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	4b3f      	ldr	r3, [pc, #252]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	429a      	cmp	r2, r3
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	4b3c      	ldr	r3, [pc, #240]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800365e:	701a      	strb	r2, [r3, #0]
					if(eof ==0) f_read(&file, &buf2[i],1, &bytes_read);
 8003660:	4b3b      	ldr	r3, [pc, #236]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <HAL_TIM_PeriodElapsedCallback+0x78>
 8003668:	4b33      	ldr	r3, [pc, #204]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a39      	ldr	r2, [pc, #228]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800366e:	1899      	adds	r1, r3, r2
 8003670:	4b39      	ldr	r3, [pc, #228]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003672:	2201      	movs	r2, #1
 8003674:	4835      	ldr	r0, [pc, #212]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003676:	f7ff fadc 	bl	8002c32 <f_read>
 800367a:	e001      	b.n	8003680 <HAL_TIM_PeriodElapsedCallback+0x7c>
					else {next();}
 800367c:	f7ff fe9a 	bl	80033b4 <next>
					i++;
 8003680:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	4a2c      	ldr	r2, [pc, #176]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003688:	6013      	str	r3, [r2, #0]
					if(i==BUFSIZE){
 800368a:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003692:	d105      	bne.n	80036a0 <HAL_TIM_PeriodElapsedCallback+0x9c>
						aktualny_bufor = 1;
 8003694:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003696:	2201      	movs	r2, #1
 8003698:	701a      	strb	r2, [r3, #0]
						j=0;
 800369a:	4b30      	ldr	r3, [pc, #192]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x158>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
						//HAL_TIM_Base_Start_IT(&htim7);*glosnosc_guziczki[indeks_glosnosci]
					}
				}

			if(aktualny_bufor==1){
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d13f      	bne.n	8003728 <HAL_TIM_PeriodElapsedCallback+0x124>
				HAL_DAC_SetValue(&hdac,DAC_CHANNEL_2,DAC_ALIGN_12B_R,buf2[j]*(value[0]/500));
 80036a8:	4b2c      	ldr	r3, [pc, #176]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a29      	ldr	r2, [pc, #164]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80036ae:	5cd3      	ldrb	r3, [r2, r3]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4619      	mov	r1, r3
 80036b4:	4b22      	ldr	r3, [pc, #136]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	4a22      	ldr	r2, [pc, #136]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	fb03 f301 	mul.w	r3, r3, r1
 80036c6:	2200      	movs	r2, #0
 80036c8:	2110      	movs	r1, #16
 80036ca:	481f      	ldr	r0, [pc, #124]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80036cc:	f002 f938 	bl	8005940 <HAL_DAC_SetValue>
				//HAL_I2S_Transmit(&hi2s2, &buf2[j], BUFSIZE,100);
				eof=f_eof(&file);
 80036d0:	4b1e      	ldr	r3, [pc, #120]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	429a      	cmp	r2, r3
 80036da:	bf0c      	ite	eq
 80036dc:	2301      	moveq	r3, #1
 80036de:	2300      	movne	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	461a      	mov	r2, r3
 80036e4:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80036e6:	701a      	strb	r2, [r3, #0]
				if(eof ==0) f_read(&file, &buf[j],1, &bytes_read);
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HAL_TIM_PeriodElapsedCallback+0x100>
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a11      	ldr	r2, [pc, #68]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80036f6:	1899      	adds	r1, r3, r2
 80036f8:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	4813      	ldr	r0, [pc, #76]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80036fe:	f7ff fa98 	bl	8002c32 <f_read>
 8003702:	e001      	b.n	8003708 <HAL_TIM_PeriodElapsedCallback+0x104>
				else {next();}
 8003704:	f7ff fe56 	bl	80033b4 <next>
				j++;
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x158>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3301      	adds	r3, #1
 800370e:	4a13      	ldr	r2, [pc, #76]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003710:	6013      	str	r3, [r2, #0]
				if(j==BUFSIZE){
 8003712:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371a:	d105      	bne.n	8003728 <HAL_TIM_PeriodElapsedCallback+0x124>
					aktualny_bufor = 0;
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
					i=0;
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
			else bufforek();*/

	}


}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40000800 	.word	0x40000800
 8003734:	200002de 	.word	0x200002de
 8003738:	200002d8 	.word	0x200002d8
 800373c:	20000bc4 	.word	0x20000bc4
 8003740:	200010ac 	.word	0x200010ac
 8003744:	10624dd3 	.word	0x10624dd3
 8003748:	20000ae0 	.word	0x20000ae0
 800374c:	20000468 	.word	0x20000468
 8003750:	20000404 	.word	0x20000404
 8003754:	200006dc 	.word	0x200006dc
 8003758:	200006d8 	.word	0x200006d8
 800375c:	20000004 	.word	0x20000004

08003760 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
	{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
		if(huart->Instance == USART2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a2f      	ldr	r2, [pc, #188]	; (800382c <HAL_UART_RxCpltCallback+0xcc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d157      	bne.n	8003822 <HAL_UART_RxCpltCallback+0xc2>
			{

			HAL_UART_Receive_IT(&huart2, receiveUART, sizeReceiveUART);
 8003772:	4b2f      	ldr	r3, [pc, #188]	; (8003830 <HAL_UART_RxCpltCallback+0xd0>)
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	492e      	ldr	r1, [pc, #184]	; (8003834 <HAL_UART_RxCpltCallback+0xd4>)
 800377a:	482f      	ldr	r0, [pc, #188]	; (8003838 <HAL_UART_RxCpltCallback+0xd8>)
 800377c:	f007 f9ee 	bl	800ab5c <HAL_UART_Receive_IT>
			if(receiveUART[0]==65){
 8003780:	4b2c      	ldr	r3, [pc, #176]	; (8003834 <HAL_UART_RxCpltCallback+0xd4>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b41      	cmp	r3, #65	; 0x41
 8003786:	d106      	bne.n	8003796 <HAL_UART_RxCpltCallback+0x36>
							HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800378c:	482b      	ldr	r0, [pc, #172]	; (800383c <HAL_UART_RxCpltCallback+0xdc>)
 800378e:	f002 fe70 	bl	8006472 <HAL_GPIO_TogglePin>
							prev();
 8003792:	f7ff fe5f 	bl	8003454 <prev>
						}
						if(receiveUART[0]==66){
 8003796:	4b27      	ldr	r3, [pc, #156]	; (8003834 <HAL_UART_RxCpltCallback+0xd4>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b42      	cmp	r3, #66	; 0x42
 800379c:	d136      	bne.n	800380c <HAL_UART_RxCpltCallback+0xac>

							HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800379e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037a2:	4826      	ldr	r0, [pc, #152]	; (800383c <HAL_UART_RxCpltCallback+0xdc>)
 80037a4:	f002 fe65 	bl	8006472 <HAL_GPIO_TogglePin>
							if(stan==1){
 80037a8:	4b25      	ldr	r3, [pc, #148]	; (8003840 <HAL_UART_RxCpltCallback+0xe0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d11e      	bne.n	80037ee <HAL_UART_RxCpltCallback+0x8e>
								HAL_UART_Transmit_IT(&huart2, &utwor, sizeutwor);
 80037b0:	4b24      	ldr	r3, [pc, #144]	; (8003844 <HAL_UART_RxCpltCallback+0xe4>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	4923      	ldr	r1, [pc, #140]	; (8003848 <HAL_UART_RxCpltCallback+0xe8>)
 80037ba:	481f      	ldr	r0, [pc, #124]	; (8003838 <HAL_UART_RxCpltCallback+0xd8>)
 80037bc:	f007 f989 	bl	800aad2 <HAL_UART_Transmit_IT>
									lcd_clear();
 80037c0:	f7ff fd02 	bl	80031c8 <lcd_clear>
									lcd_put_cur(0, 0);
 80037c4:	2100      	movs	r1, #0
 80037c6:	2000      	movs	r0, #0
 80037c8:	f7ff fd65 	bl	8003296 <lcd_put_cur>
									lcd_send_string(&utwor);
 80037cc:	481e      	ldr	r0, [pc, #120]	; (8003848 <HAL_UART_RxCpltCallback+0xe8>)
 80037ce:	f7ff fd4e 	bl	800326e <lcd_send_string>
									lcd_put_cur(1, 0);
 80037d2:	2100      	movs	r1, #0
 80037d4:	2001      	movs	r0, #1
 80037d6:	f7ff fd5e 	bl	8003296 <lcd_put_cur>
									lcd_send_string("PLAY");
 80037da:	481c      	ldr	r0, [pc, #112]	; (800384c <HAL_UART_RxCpltCallback+0xec>)
 80037dc:	f7ff fd47 	bl	800326e <lcd_send_string>
									 HAL_TIM_Base_Start_IT(&htim4);
 80037e0:	481b      	ldr	r0, [pc, #108]	; (8003850 <HAL_UART_RxCpltCallback+0xf0>)
 80037e2:	f006 fd28 	bl	800a236 <HAL_TIM_Base_Start_IT>
									 stan = 0;
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_UART_RxCpltCallback+0xe0>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e00e      	b.n	800380c <HAL_UART_RxCpltCallback+0xac>
									 }
									 else
									 {
										 lcd_clear();
 80037ee:	f7ff fceb 	bl	80031c8 <lcd_clear>
										 lcd_put_cur(1, 0);
 80037f2:	2100      	movs	r1, #0
 80037f4:	2001      	movs	r0, #1
 80037f6:	f7ff fd4e 	bl	8003296 <lcd_put_cur>
										 lcd_send_string("PAUSE");
 80037fa:	4816      	ldr	r0, [pc, #88]	; (8003854 <HAL_UART_RxCpltCallback+0xf4>)
 80037fc:	f7ff fd37 	bl	800326e <lcd_send_string>
										 HAL_TIM_Base_Stop_IT(&htim4);
 8003800:	4813      	ldr	r0, [pc, #76]	; (8003850 <HAL_UART_RxCpltCallback+0xf0>)
 8003802:	f006 fd3c 	bl	800a27e <HAL_TIM_Base_Stop_IT>
										 stan=1;
 8003806:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <HAL_UART_RxCpltCallback+0xe0>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]
									 }
									}
						if(receiveUART[0]==67){
 800380c:	4b09      	ldr	r3, [pc, #36]	; (8003834 <HAL_UART_RxCpltCallback+0xd4>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b43      	cmp	r3, #67	; 0x43
 8003812:	d106      	bne.n	8003822 <HAL_UART_RxCpltCallback+0xc2>
							HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8003814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003818:	4808      	ldr	r0, [pc, #32]	; (800383c <HAL_UART_RxCpltCallback+0xdc>)
 800381a:	f002 fe2a 	bl	8006472 <HAL_GPIO_TogglePin>
										next();
 800381e:	f7ff fdc9 	bl	80033b4 <next>
									}
			}
	}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40004400 	.word	0x40004400
 8003830:	20000002 	.word	0x20000002
 8003834:	20000b94 	.word	0x20000b94
 8003838:	20001020 	.word	0x20001020
 800383c:	40020c00 	.word	0x40020c00
 8003840:	2000000c 	.word	0x2000000c
 8003844:	20000adc 	.word	0x20000adc
 8003848:	200003f0 	.word	0x200003f0
 800384c:	0800c0e8 	.word	0x0800c0e8
 8003850:	2000035c 	.word	0x2000035c
 8003854:	0800c0f0 	.word	0x0800c0f0

08003858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800385c:	f001 f85a 	bl	8004914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003860:	f000 f86c 	bl	800393c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003864:	f000 fb06 	bl	8003e74 <MX_GPIO_Init>
  MX_DMA_Init();
 8003868:	f000 face 	bl	8003e08 <MX_DMA_Init>
  MX_ADC1_Init();
 800386c:	f000 f8e6 	bl	8003a3c <MX_ADC1_Init>
  MX_I2C3_Init();
 8003870:	f000 f98e 	bl	8003b90 <MX_I2C3_Init>
  MX_TIM6_Init();
 8003874:	f000 fa6a 	bl	8003d4c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8003878:	f000 fa9c 	bl	8003db4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800387c:	f000 fa1a 	bl	8003cb4 <MX_TIM4_Init>
  MX_SPI1_Init();
 8003880:	f000 f9e2 	bl	8003c48 <MX_SPI1_Init>
  MX_DAC_Init();
 8003884:	f000 f92c 	bl	8003ae0 <MX_DAC_Init>
  MX_I2C1_Init();
 8003888:	f000 f954 	bl	8003b34 <MX_I2C1_Init>
  MX_I2S3_Init();
 800388c:	f000 f9ae 	bl	8003bec <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac,DAC_CHANNEL_2);
 8003890:	2110      	movs	r1, #16
 8003892:	481c      	ldr	r0, [pc, #112]	; (8003904 <main+0xac>)
 8003894:	f001 ff4d 	bl	8005732 <HAL_DAC_Start>

  	  	HAL_UART_Receive_IT(&huart2, receiveUART, sizeReceiveUART);
 8003898:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <main+0xb0>)
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	491b      	ldr	r1, [pc, #108]	; (800390c <main+0xb4>)
 80038a0:	481b      	ldr	r0, [pc, #108]	; (8003910 <main+0xb8>)
 80038a2:	f007 f95b 	bl	800ab5c <HAL_UART_Receive_IT>
    	fresult = f_mount(&FatFs, "", 1);
 80038a6:	2201      	movs	r2, #1
 80038a8:	491a      	ldr	r1, [pc, #104]	; (8003914 <main+0xbc>)
 80038aa:	481b      	ldr	r0, [pc, #108]	; (8003918 <main+0xc0>)
 80038ac:	f7fe fffe 	bl	80028ac <f_mount>
 80038b0:	4603      	mov	r3, r0
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b19      	ldr	r3, [pc, #100]	; (800391c <main+0xc4>)
 80038b6:	701a      	strb	r2, [r3, #0]
    	read_song();
 80038b8:	f7ff fd0c 	bl	80032d4 <read_song>
        fresult = f_open(&file, &utwor , FA_READ|FA_OPEN_EXISTING|FA_OPEN_ALWAYS);
 80038bc:	2211      	movs	r2, #17
 80038be:	4918      	ldr	r1, [pc, #96]	; (8003920 <main+0xc8>)
 80038c0:	4818      	ldr	r0, [pc, #96]	; (8003924 <main+0xcc>)
 80038c2:	f7ff f833 	bl	800292c <f_open>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461a      	mov	r2, r3
 80038ca:	4b14      	ldr	r3, [pc, #80]	; (800391c <main+0xc4>)
 80038cc:	701a      	strb	r2, [r3, #0]
        fresult = f_read(&file, &buf2, 352, &bytes_read);
 80038ce:	4b16      	ldr	r3, [pc, #88]	; (8003928 <main+0xd0>)
 80038d0:	f44f 72b0 	mov.w	r2, #352	; 0x160
 80038d4:	4915      	ldr	r1, [pc, #84]	; (800392c <main+0xd4>)
 80038d6:	4813      	ldr	r0, [pc, #76]	; (8003924 <main+0xcc>)
 80038d8:	f7ff f9ab 	bl	8002c32 <f_read>
 80038dc:	4603      	mov	r3, r0
 80038de:	461a      	mov	r2, r3
 80038e0:	4b0e      	ldr	r3, [pc, #56]	; (800391c <main+0xc4>)
 80038e2:	701a      	strb	r2, [r3, #0]

        f_read(&file, &buf,BUFSIZE, &bytes_read);
 80038e4:	4b10      	ldr	r3, [pc, #64]	; (8003928 <main+0xd0>)
 80038e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ea:	4911      	ldr	r1, [pc, #68]	; (8003930 <main+0xd8>)
 80038ec:	480d      	ldr	r0, [pc, #52]	; (8003924 <main+0xcc>)
 80038ee:	f7ff f9a0 	bl	8002c32 <f_read>
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 1);
 80038f2:	2201      	movs	r2, #1
 80038f4:	490f      	ldr	r1, [pc, #60]	; (8003934 <main+0xdc>)
 80038f6:	4810      	ldr	r0, [pc, #64]	; (8003938 <main+0xe0>)
 80038f8:	f001 fa24 	bl	8004d44 <HAL_ADC_Start_DMA>

        lcd_init();
 80038fc:	f7ff fc7a 	bl	80031f4 <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003900:	e7fe      	b.n	8003900 <main+0xa8>
 8003902:	bf00      	nop
 8003904:	20000ae0 	.word	0x20000ae0
 8003908:	20000002 	.word	0x20000002
 800390c:	20000b94 	.word	0x20000b94
 8003910:	20001020 	.word	0x20001020
 8003914:	0800c0f8 	.word	0x0800c0f8
 8003918:	200000a8 	.word	0x200000a8
 800391c:	20000fc4 	.word	0x20000fc4
 8003920:	200003f0 	.word	0x200003f0
 8003924:	20000468 	.word	0x20000468
 8003928:	200006d8 	.word	0x200006d8
 800392c:	200006dc 	.word	0x200006dc
 8003930:	20000bc4 	.word	0x20000bc4
 8003934:	200010ac 	.word	0x200010ac
 8003938:	20000690 	.word	0x20000690

0800393c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b098      	sub	sp, #96	; 0x60
 8003940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003942:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003946:	2230      	movs	r2, #48	; 0x30
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f007 ff38 	bl	800b7c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003950:	f107 031c 	add.w	r3, r7, #28
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003960:	f107 030c 	add.w	r3, r7, #12
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	4b30      	ldr	r3, [pc, #192]	; (8003a34 <SystemClock_Config+0xf8>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	4a2f      	ldr	r2, [pc, #188]	; (8003a34 <SystemClock_Config+0xf8>)
 8003978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397c:	6413      	str	r3, [r2, #64]	; 0x40
 800397e:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <SystemClock_Config+0xf8>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	4b2a      	ldr	r3, [pc, #168]	; (8003a38 <SystemClock_Config+0xfc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a29      	ldr	r2, [pc, #164]	; (8003a38 <SystemClock_Config+0xfc>)
 8003994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4b27      	ldr	r3, [pc, #156]	; (8003a38 <SystemClock_Config+0xfc>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039a6:	2301      	movs	r3, #1
 80039a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039b0:	2302      	movs	r3, #2
 80039b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80039ba:	2304      	movs	r3, #4
 80039bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80039be:	23a8      	movs	r3, #168	; 0xa8
 80039c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039c2:	2302      	movs	r3, #2
 80039c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80039c6:	2303      	movs	r3, #3
 80039c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039ce:	4618      	mov	r0, r3
 80039d0:	f005 fa72 	bl	8008eb8 <HAL_RCC_OscConfig>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80039da:	f000 fadf 	bl	8003f9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039de:	230f      	movs	r3, #15
 80039e0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039e2:	2302      	movs	r3, #2
 80039e4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039e6:	2300      	movs	r3, #0
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80039f6:	f107 031c 	add.w	r3, r7, #28
 80039fa:	2105      	movs	r1, #5
 80039fc:	4618      	mov	r0, r3
 80039fe:	f005 fccb 	bl	8009398 <HAL_RCC_ClockConfig>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003a08:	f000 fac8 	bl	8003f9c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003a10:	23c0      	movs	r3, #192	; 0xc0
 8003a12:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003a14:	2302      	movs	r3, #2
 8003a16:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a18:	f107 030c 	add.w	r3, r7, #12
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f005 fead 	bl	800977c <HAL_RCCEx_PeriphCLKConfig>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8003a28:	f000 fab8 	bl	8003f9c <Error_Handler>
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	3760      	adds	r7, #96	; 0x60
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40007000 	.word	0x40007000

08003a3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a42:	463b      	mov	r3, r7
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	605a      	str	r2, [r3, #4]
 8003a4a:	609a      	str	r2, [r3, #8]
 8003a4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003a4e:	4b21      	ldr	r3, [pc, #132]	; (8003ad4 <MX_ADC1_Init+0x98>)
 8003a50:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <MX_ADC1_Init+0x9c>)
 8003a52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8003a54:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <MX_ADC1_Init+0x98>)
 8003a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <MX_ADC1_Init+0x98>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003a62:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <MX_ADC1_Init+0x98>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003a68:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <MX_ADC1_Init+0x98>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003a6e:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <MX_ADC1_Init+0x98>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a76:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <MX_ADC1_Init+0x98>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a7c:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <MX_ADC1_Init+0x98>)
 8003a7e:	4a17      	ldr	r2, [pc, #92]	; (8003adc <MX_ADC1_Init+0xa0>)
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a82:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <MX_ADC1_Init+0x98>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <MX_ADC1_Init+0x98>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <MX_ADC1_Init+0x98>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a96:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <MX_ADC1_Init+0x98>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a9c:	480d      	ldr	r0, [pc, #52]	; (8003ad4 <MX_ADC1_Init+0x98>)
 8003a9e:	f000 ffcd 	bl	8004a3c <HAL_ADC_Init>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003aa8:	f000 fa78 	bl	8003f9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003aac:	2303      	movs	r3, #3
 8003aae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ab8:	463b      	mov	r3, r7
 8003aba:	4619      	mov	r1, r3
 8003abc:	4805      	ldr	r0, [pc, #20]	; (8003ad4 <MX_ADC1_Init+0x98>)
 8003abe:	f001 fa5b 	bl	8004f78 <HAL_ADC_ConfigChannel>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003ac8:	f000 fa68 	bl	8003f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000690 	.word	0x20000690
 8003ad8:	40012000 	.word	0x40012000
 8003adc:	0f000001 	.word	0x0f000001

08003ae0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003ae6:	463b      	mov	r3, r7
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8003aee:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <MX_DAC_Init+0x4c>)
 8003af0:	4a0f      	ldr	r2, [pc, #60]	; (8003b30 <MX_DAC_Init+0x50>)
 8003af2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003af4:	480d      	ldr	r0, [pc, #52]	; (8003b2c <MX_DAC_Init+0x4c>)
 8003af6:	f001 fdfa 	bl	80056ee <HAL_DAC_Init>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003b00:	f000 fa4c 	bl	8003f9c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003b0c:	463b      	mov	r3, r7
 8003b0e:	2210      	movs	r2, #16
 8003b10:	4619      	mov	r1, r3
 8003b12:	4806      	ldr	r0, [pc, #24]	; (8003b2c <MX_DAC_Init+0x4c>)
 8003b14:	f001 fec7 	bl	80058a6 <HAL_DAC_ConfigChannel>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003b1e:	f000 fa3d 	bl	8003f9c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000ae0 	.word	0x20000ae0
 8003b30:	40007400 	.word	0x40007400

08003b34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b38:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <MX_I2C1_Init+0x50>)
 8003b3a:	4a13      	ldr	r2, [pc, #76]	; (8003b88 <MX_I2C1_Init+0x54>)
 8003b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003b3e:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <MX_I2C1_Init+0x50>)
 8003b40:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <MX_I2C1_Init+0x58>)
 8003b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b44:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <MX_I2C1_Init+0x50>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003b4a:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <MX_I2C1_Init+0x50>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b50:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <MX_I2C1_Init+0x50>)
 8003b52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <MX_I2C1_Init+0x50>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <MX_I2C1_Init+0x50>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b64:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <MX_I2C1_Init+0x50>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <MX_I2C1_Init+0x50>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b70:	4804      	ldr	r0, [pc, #16]	; (8003b84 <MX_I2C1_Init+0x50>)
 8003b72:	f002 fcb1 	bl	80064d8 <HAL_I2C_Init>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003b7c:	f000 fa0e 	bl	8003f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b80:	bf00      	nop
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	2000039c 	.word	0x2000039c
 8003b88:	40005400 	.word	0x40005400
 8003b8c:	000186a0 	.word	0x000186a0

08003b90 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b94:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <MX_I2C3_Init+0x50>)
 8003b96:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <MX_I2C3_Init+0x54>)
 8003b98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003b9a:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <MX_I2C3_Init+0x50>)
 8003b9c:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <MX_I2C3_Init+0x58>)
 8003b9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <MX_I2C3_Init+0x50>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <MX_I2C3_Init+0x50>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <MX_I2C3_Init+0x50>)
 8003bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bb2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <MX_I2C3_Init+0x50>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <MX_I2C3_Init+0x50>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <MX_I2C3_Init+0x50>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <MX_I2C3_Init+0x50>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003bcc:	4804      	ldr	r0, [pc, #16]	; (8003be0 <MX_I2C3_Init+0x50>)
 8003bce:	f002 fc83 	bl	80064d8 <HAL_I2C_Init>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003bd8:	f000 f9e0 	bl	8003f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003bdc:	bf00      	nop
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20000308 	.word	0x20000308
 8003be4:	40005c00 	.word	0x40005c00
 8003be8:	000186a0 	.word	0x000186a0

08003bec <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8003bf0:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <MX_I2S3_Init+0x54>)
 8003bf2:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <MX_I2S3_Init+0x58>)
 8003bf4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <MX_I2S3_Init+0x54>)
 8003bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bfc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <MX_I2S3_Init+0x54>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8003c04:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <MX_I2S3_Init+0x54>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <MX_I2S3_Init+0x54>)
 8003c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c10:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <MX_I2S3_Init+0x54>)
 8003c14:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003c18:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <MX_I2S3_Init+0x54>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <MX_I2S3_Init+0x54>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <MX_I2S3_Init+0x54>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8003c2c:	4804      	ldr	r0, [pc, #16]	; (8003c40 <MX_I2S3_Init+0x54>)
 8003c2e:	f004 fca3 	bl	8008578 <HAL_I2S_Init>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8003c38:	f000 f9b0 	bl	8003f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8003c3c:	bf00      	nop
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20001064 	.word	0x20001064
 8003c44:	40003c00 	.word	0x40003c00

08003c48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003c4c:	4b17      	ldr	r3, [pc, #92]	; (8003cac <MX_SPI1_Init+0x64>)
 8003c4e:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <MX_SPI1_Init+0x68>)
 8003c50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c52:	4b16      	ldr	r3, [pc, #88]	; (8003cac <MX_SPI1_Init+0x64>)
 8003c54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <MX_SPI1_Init+0x64>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c60:	4b12      	ldr	r3, [pc, #72]	; (8003cac <MX_SPI1_Init+0x64>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c66:	4b11      	ldr	r3, [pc, #68]	; (8003cac <MX_SPI1_Init+0x64>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <MX_SPI1_Init+0x64>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c72:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <MX_SPI1_Init+0x64>)
 8003c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <MX_SPI1_Init+0x64>)
 8003c7c:	2218      	movs	r2, #24
 8003c7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c80:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <MX_SPI1_Init+0x64>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c86:	4b09      	ldr	r3, [pc, #36]	; (8003cac <MX_SPI1_Init+0x64>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c8c:	4b07      	ldr	r3, [pc, #28]	; (8003cac <MX_SPI1_Init+0x64>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <MX_SPI1_Init+0x64>)
 8003c94:	220a      	movs	r2, #10
 8003c96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c98:	4804      	ldr	r0, [pc, #16]	; (8003cac <MX_SPI1_Init+0x64>)
 8003c9a:	f005 fead 	bl	80099f8 <HAL_SPI_Init>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003ca4:	f000 f97a 	bl	8003f9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ca8:	bf00      	nop
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20000fc8 	.word	0x20000fc8
 8003cb0:	40013000 	.word	0x40013000

08003cb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cba:	f107 0308 	add.w	r3, r7, #8
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	605a      	str	r2, [r3, #4]
 8003cc4:	609a      	str	r2, [r3, #8]
 8003cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cc8:	463b      	mov	r3, r7
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003cd0:	4b1c      	ldr	r3, [pc, #112]	; (8003d44 <MX_TIM4_Init+0x90>)
 8003cd2:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <MX_TIM4_Init+0x94>)
 8003cd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 126;
 8003cd6:	4b1b      	ldr	r3, [pc, #108]	; (8003d44 <MX_TIM4_Init+0x90>)
 8003cd8:	227e      	movs	r2, #126	; 0x7e
 8003cda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <MX_TIM4_Init+0x90>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14;
 8003ce2:	4b18      	ldr	r3, [pc, #96]	; (8003d44 <MX_TIM4_Init+0x90>)
 8003ce4:	220e      	movs	r2, #14
 8003ce6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ce8:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <MX_TIM4_Init+0x90>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <MX_TIM4_Init+0x90>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003cf4:	4813      	ldr	r0, [pc, #76]	; (8003d44 <MX_TIM4_Init+0x90>)
 8003cf6:	f006 fa73 	bl	800a1e0 <HAL_TIM_Base_Init>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8003d00:	f000 f94c 	bl	8003f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003d0a:	f107 0308 	add.w	r3, r7, #8
 8003d0e:	4619      	mov	r1, r3
 8003d10:	480c      	ldr	r0, [pc, #48]	; (8003d44 <MX_TIM4_Init+0x90>)
 8003d12:	f006 fbe7 	bl	800a4e4 <HAL_TIM_ConfigClockSource>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8003d1c:	f000 f93e 	bl	8003f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d20:	2300      	movs	r3, #0
 8003d22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d28:	463b      	mov	r3, r7
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4805      	ldr	r0, [pc, #20]	; (8003d44 <MX_TIM4_Init+0x90>)
 8003d2e:	f006 fdf3 	bl	800a918 <HAL_TIMEx_MasterConfigSynchronization>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003d38:	f000 f930 	bl	8003f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003d3c:	bf00      	nop
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	2000035c 	.word	0x2000035c
 8003d48:	40000800 	.word	0x40000800

08003d4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d52:	463b      	mov	r3, r7
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003d5a:	4b14      	ldr	r3, [pc, #80]	; (8003dac <MX_TIM6_Init+0x60>)
 8003d5c:	4a14      	ldr	r2, [pc, #80]	; (8003db0 <MX_TIM6_Init+0x64>)
 8003d5e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 126;
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <MX_TIM6_Init+0x60>)
 8003d62:	227e      	movs	r2, #126	; 0x7e
 8003d64:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <MX_TIM6_Init+0x60>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 114;
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <MX_TIM6_Init+0x60>)
 8003d6e:	2272      	movs	r2, #114	; 0x72
 8003d70:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d72:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <MX_TIM6_Init+0x60>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003d78:	480c      	ldr	r0, [pc, #48]	; (8003dac <MX_TIM6_Init+0x60>)
 8003d7a:	f006 fa31 	bl	800a1e0 <HAL_TIM_Base_Init>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8003d84:	f000 f90a 	bl	8003f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003d88:	2320      	movs	r3, #32
 8003d8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003d90:	463b      	mov	r3, r7
 8003d92:	4619      	mov	r1, r3
 8003d94:	4805      	ldr	r0, [pc, #20]	; (8003dac <MX_TIM6_Init+0x60>)
 8003d96:	f006 fdbf 	bl	800a918 <HAL_TIMEx_MasterConfigSynchronization>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8003da0:	f000 f8fc 	bl	8003f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000b54 	.word	0x20000b54
 8003db0:	40001000 	.word	0x40001000

08003db4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003dba:	4a12      	ldr	r2, [pc, #72]	; (8003e04 <MX_USART2_UART_Init+0x50>)
 8003dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003dbe:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003dc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003dc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003dda:	220c      	movs	r2, #12
 8003ddc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003dea:	4805      	ldr	r0, [pc, #20]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003dec:	f006 fe24 	bl	800aa38 <HAL_UART_Init>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003df6:	f000 f8d1 	bl	8003f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20001020 	.word	0x20001020
 8003e04:	40004400 	.word	0x40004400

08003e08 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <MX_DMA_Init+0x68>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4a16      	ldr	r2, [pc, #88]	; (8003e70 <MX_DMA_Init+0x68>)
 8003e18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1e:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <MX_DMA_Init+0x68>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e26:	607b      	str	r3, [r7, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <MX_DMA_Init+0x68>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4a0f      	ldr	r2, [pc, #60]	; (8003e70 <MX_DMA_Init+0x68>)
 8003e34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <MX_DMA_Init+0x68>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003e46:	2200      	movs	r2, #0
 8003e48:	2100      	movs	r1, #0
 8003e4a:	2010      	movs	r0, #16
 8003e4c:	f001 fc19 	bl	8005682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003e50:	2010      	movs	r0, #16
 8003e52:	f001 fc32 	bl	80056ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003e56:	2200      	movs	r2, #0
 8003e58:	2100      	movs	r1, #0
 8003e5a:	2038      	movs	r0, #56	; 0x38
 8003e5c:	f001 fc11 	bl	8005682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003e60:	2038      	movs	r0, #56	; 0x38
 8003e62:	f001 fc2a 	bl	80056ba <HAL_NVIC_EnableIRQ>

}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800

08003e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	; 0x28
 8003e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7a:	f107 0314 	add.w	r3, r7, #20
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	605a      	str	r2, [r3, #4]
 8003e84:	609a      	str	r2, [r3, #8]
 8003e86:	60da      	str	r2, [r3, #12]
 8003e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	4b3f      	ldr	r3, [pc, #252]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	4a3e      	ldr	r2, [pc, #248]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e98:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9a:	4b3c      	ldr	r3, [pc, #240]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	4a37      	ldr	r2, [pc, #220]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb6:	4b35      	ldr	r3, [pc, #212]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	4b31      	ldr	r3, [pc, #196]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a30      	ldr	r2, [pc, #192]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003ecc:	f043 0302 	orr.w	r3, r3, #2
 8003ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	4b2a      	ldr	r3, [pc, #168]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	4a29      	ldr	r2, [pc, #164]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003ee8:	f043 0308 	orr.w	r3, r3, #8
 8003eec:	6313      	str	r3, [r2, #48]	; 0x30
 8003eee:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	607b      	str	r3, [r7, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	603b      	str	r3, [r7, #0]
 8003efe:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4a22      	ldr	r2, [pc, #136]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003f04:	f043 0304 	orr.w	r3, r3, #4
 8003f08:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0a:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <MX_GPIO_Init+0x118>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8003f16:	2200      	movs	r2, #0
 8003f18:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003f1c:	481c      	ldr	r0, [pc, #112]	; (8003f90 <MX_GPIO_Init+0x11c>)
 8003f1e:	f002 fa8f 	bl	8006440 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8003f22:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f26:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003f28:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <MX_GPIO_Init+0x120>)
 8003f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	4619      	mov	r1, r3
 8003f36:	4818      	ldr	r0, [pc, #96]	; (8003f98 <MX_GPIO_Init+0x124>)
 8003f38:	f002 f8d0 	bl	80060dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003f3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f4a:	f107 0314 	add.w	r3, r7, #20
 8003f4e:	4619      	mov	r1, r3
 8003f50:	480f      	ldr	r0, [pc, #60]	; (8003f90 <MX_GPIO_Init+0x11c>)
 8003f52:	f002 f8c3 	bl	80060dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8003f56:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003f5a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f64:	2300      	movs	r3, #0
 8003f66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f68:	f107 0314 	add.w	r3, r7, #20
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4808      	ldr	r0, [pc, #32]	; (8003f90 <MX_GPIO_Init+0x11c>)
 8003f70:	f002 f8b4 	bl	80060dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003f74:	2200      	movs	r2, #0
 8003f76:	2101      	movs	r1, #1
 8003f78:	2028      	movs	r0, #40	; 0x28
 8003f7a:	f001 fb82 	bl	8005682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003f7e:	2028      	movs	r0, #40	; 0x28
 8003f80:	f001 fb9b 	bl	80056ba <HAL_NVIC_EnableIRQ>

}
 8003f84:	bf00      	nop
 8003f86:	3728      	adds	r7, #40	; 0x28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	40020c00 	.word	0x40020c00
 8003f94:	10310000 	.word	0x10310000
 8003f98:	40020400 	.word	0x40020400

08003f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003fa0:	bf00      	nop
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_MspInit+0x4c>)
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fba:	4a0f      	ldr	r2, [pc, #60]	; (8003ff8 <HAL_MspInit+0x4c>)
 8003fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <HAL_MspInit+0x4c>)
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fca:	607b      	str	r3, [r7, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <HAL_MspInit+0x4c>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	4a08      	ldr	r2, [pc, #32]	; (8003ff8 <HAL_MspInit+0x4c>)
 8003fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_MspInit+0x4c>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800

08003ffc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	; 0x28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004004:	f107 0314 	add.w	r3, r7, #20
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a33      	ldr	r2, [pc, #204]	; (80040e8 <HAL_ADC_MspInit+0xec>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d15f      	bne.n	80040de <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	4b32      	ldr	r3, [pc, #200]	; (80040ec <HAL_ADC_MspInit+0xf0>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	4a31      	ldr	r2, [pc, #196]	; (80040ec <HAL_ADC_MspInit+0xf0>)
 8004028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402c:	6453      	str	r3, [r2, #68]	; 0x44
 800402e:	4b2f      	ldr	r3, [pc, #188]	; (80040ec <HAL_ADC_MspInit+0xf0>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	4b2b      	ldr	r3, [pc, #172]	; (80040ec <HAL_ADC_MspInit+0xf0>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	4a2a      	ldr	r2, [pc, #168]	; (80040ec <HAL_ADC_MspInit+0xf0>)
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	6313      	str	r3, [r2, #48]	; 0x30
 800404a:	4b28      	ldr	r3, [pc, #160]	; (80040ec <HAL_ADC_MspInit+0xf0>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004056:	2308      	movs	r3, #8
 8004058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800405a:	2303      	movs	r3, #3
 800405c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004062:	f107 0314 	add.w	r3, r7, #20
 8004066:	4619      	mov	r1, r3
 8004068:	4821      	ldr	r0, [pc, #132]	; (80040f0 <HAL_ADC_MspInit+0xf4>)
 800406a:	f002 f837 	bl	80060dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800406e:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <HAL_ADC_MspInit+0xf8>)
 8004070:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <HAL_ADC_MspInit+0xfc>)
 8004072:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004074:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <HAL_ADC_MspInit+0xf8>)
 8004076:	2200      	movs	r2, #0
 8004078:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800407a:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <HAL_ADC_MspInit+0xf8>)
 800407c:	2200      	movs	r2, #0
 800407e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004080:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <HAL_ADC_MspInit+0xf8>)
 8004082:	2200      	movs	r2, #0
 8004084:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004086:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <HAL_ADC_MspInit+0xf8>)
 8004088:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800408c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800408e:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <HAL_ADC_MspInit+0xf8>)
 8004090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004094:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004096:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <HAL_ADC_MspInit+0xf8>)
 8004098:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800409c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <HAL_ADC_MspInit+0xf8>)
 80040a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80040a6:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <HAL_ADC_MspInit+0xf8>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <HAL_ADC_MspInit+0xf8>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80040b2:	4810      	ldr	r0, [pc, #64]	; (80040f4 <HAL_ADC_MspInit+0xf8>)
 80040b4:	f001 fc74 	bl	80059a0 <HAL_DMA_Init>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80040be:	f7ff ff6d 	bl	8003f9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a0b      	ldr	r2, [pc, #44]	; (80040f4 <HAL_ADC_MspInit+0xf8>)
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38
 80040c8:	4a0a      	ldr	r2, [pc, #40]	; (80040f4 <HAL_ADC_MspInit+0xf8>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80040ce:	2200      	movs	r2, #0
 80040d0:	2100      	movs	r1, #0
 80040d2:	2012      	movs	r0, #18
 80040d4:	f001 fad5 	bl	8005682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80040d8:	2012      	movs	r0, #18
 80040da:	f001 faee 	bl	80056ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80040de:	bf00      	nop
 80040e0:	3728      	adds	r7, #40	; 0x28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40012000 	.word	0x40012000
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40020000 	.word	0x40020000
 80040f4:	20000af4 	.word	0x20000af4
 80040f8:	40026410 	.word	0x40026410

080040fc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	; 0x28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1b      	ldr	r2, [pc, #108]	; (8004188 <HAL_DAC_MspInit+0x8c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d12f      	bne.n	800417e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	4b1a      	ldr	r3, [pc, #104]	; (800418c <HAL_DAC_MspInit+0x90>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	4a19      	ldr	r2, [pc, #100]	; (800418c <HAL_DAC_MspInit+0x90>)
 8004128:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800412c:	6413      	str	r3, [r2, #64]	; 0x40
 800412e:	4b17      	ldr	r3, [pc, #92]	; (800418c <HAL_DAC_MspInit+0x90>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	4b13      	ldr	r3, [pc, #76]	; (800418c <HAL_DAC_MspInit+0x90>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <HAL_DAC_MspInit+0x90>)
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	6313      	str	r3, [r2, #48]	; 0x30
 800414a:	4b10      	ldr	r3, [pc, #64]	; (800418c <HAL_DAC_MspInit+0x90>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004156:	2320      	movs	r3, #32
 8004158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800415a:	2303      	movs	r3, #3
 800415c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004162:	f107 0314 	add.w	r3, r7, #20
 8004166:	4619      	mov	r1, r3
 8004168:	4809      	ldr	r0, [pc, #36]	; (8004190 <HAL_DAC_MspInit+0x94>)
 800416a:	f001 ffb7 	bl	80060dc <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800416e:	2200      	movs	r2, #0
 8004170:	2100      	movs	r1, #0
 8004172:	2036      	movs	r0, #54	; 0x36
 8004174:	f001 fa85 	bl	8005682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004178:	2036      	movs	r0, #54	; 0x36
 800417a:	f001 fa9e 	bl	80056ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800417e:	bf00      	nop
 8004180:	3728      	adds	r7, #40	; 0x28
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40007400 	.word	0x40007400
 800418c:	40023800 	.word	0x40023800
 8004190:	40020000 	.word	0x40020000

08004194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08c      	sub	sp, #48	; 0x30
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800419c:	f107 031c 	add.w	r3, r7, #28
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	60da      	str	r2, [r3, #12]
 80041aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a4a      	ldr	r2, [pc, #296]	; (80042dc <HAL_I2C_MspInit+0x148>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d12d      	bne.n	8004212 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	4b49      	ldr	r3, [pc, #292]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	4a48      	ldr	r2, [pc, #288]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 80041c0:	f043 0302 	orr.w	r3, r3, #2
 80041c4:	6313      	str	r3, [r2, #48]	; 0x30
 80041c6:	4b46      	ldr	r3, [pc, #280]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80041d2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80041d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041d8:	2312      	movs	r3, #18
 80041da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041dc:	2301      	movs	r3, #1
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e0:	2303      	movs	r3, #3
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041e4:	2304      	movs	r3, #4
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041e8:	f107 031c 	add.w	r3, r7, #28
 80041ec:	4619      	mov	r1, r3
 80041ee:	483d      	ldr	r0, [pc, #244]	; (80042e4 <HAL_I2C_MspInit+0x150>)
 80041f0:	f001 ff74 	bl	80060dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	4b39      	ldr	r3, [pc, #228]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	4a38      	ldr	r2, [pc, #224]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 80041fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004202:	6413      	str	r3, [r2, #64]	; 0x40
 8004204:	4b36      	ldr	r3, [pc, #216]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004210:	e060      	b.n	80042d4 <HAL_I2C_MspInit+0x140>
  else if(hi2c->Instance==I2C3)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a34      	ldr	r2, [pc, #208]	; (80042e8 <HAL_I2C_MspInit+0x154>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d15b      	bne.n	80042d4 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	4b2f      	ldr	r3, [pc, #188]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	4a2e      	ldr	r2, [pc, #184]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 8004226:	f043 0304 	orr.w	r3, r3, #4
 800422a:	6313      	str	r3, [r2, #48]	; 0x30
 800422c:	4b2c      	ldr	r3, [pc, #176]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	4b28      	ldr	r3, [pc, #160]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	6313      	str	r3, [r2, #48]	; 0x30
 8004248:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800425a:	2312      	movs	r3, #18
 800425c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800425e:	2301      	movs	r3, #1
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004262:	2303      	movs	r3, #3
 8004264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004266:	2304      	movs	r3, #4
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800426a:	f107 031c 	add.w	r3, r7, #28
 800426e:	4619      	mov	r1, r3
 8004270:	481e      	ldr	r0, [pc, #120]	; (80042ec <HAL_I2C_MspInit+0x158>)
 8004272:	f001 ff33 	bl	80060dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800427a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800427c:	2312      	movs	r3, #18
 800427e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004280:	2301      	movs	r3, #1
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004284:	2303      	movs	r3, #3
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004288:	2304      	movs	r3, #4
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800428c:	f107 031c 	add.w	r3, r7, #28
 8004290:	4619      	mov	r1, r3
 8004292:	4817      	ldr	r0, [pc, #92]	; (80042f0 <HAL_I2C_MspInit+0x15c>)
 8004294:	f001 ff22 	bl	80060dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004298:	2300      	movs	r3, #0
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	4a0f      	ldr	r2, [pc, #60]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 80042a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042a6:	6413      	str	r3, [r2, #64]	; 0x40
 80042a8:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <HAL_I2C_MspInit+0x14c>)
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80042b4:	2200      	movs	r2, #0
 80042b6:	2100      	movs	r1, #0
 80042b8:	2048      	movs	r0, #72	; 0x48
 80042ba:	f001 f9e2 	bl	8005682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80042be:	2048      	movs	r0, #72	; 0x48
 80042c0:	f001 f9fb 	bl	80056ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80042c4:	2200      	movs	r2, #0
 80042c6:	2100      	movs	r1, #0
 80042c8:	2049      	movs	r0, #73	; 0x49
 80042ca:	f001 f9da 	bl	8005682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80042ce:	2049      	movs	r0, #73	; 0x49
 80042d0:	f001 f9f3 	bl	80056ba <HAL_NVIC_EnableIRQ>
}
 80042d4:	bf00      	nop
 80042d6:	3730      	adds	r7, #48	; 0x30
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40005400 	.word	0x40005400
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40020400 	.word	0x40020400
 80042e8:	40005c00 	.word	0x40005c00
 80042ec:	40020800 	.word	0x40020800
 80042f0:	40020000 	.word	0x40020000

080042f4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	; 0x28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042fc:	f107 0314 	add.w	r3, r7, #20
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	60da      	str	r2, [r3, #12]
 800430a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a40      	ldr	r2, [pc, #256]	; (8004414 <HAL_I2S_MspInit+0x120>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d17a      	bne.n	800440c <HAL_I2S_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	4b3f      	ldr	r3, [pc, #252]	; (8004418 <HAL_I2S_MspInit+0x124>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	4a3e      	ldr	r2, [pc, #248]	; (8004418 <HAL_I2S_MspInit+0x124>)
 8004320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004324:	6413      	str	r3, [r2, #64]	; 0x40
 8004326:	4b3c      	ldr	r3, [pc, #240]	; (8004418 <HAL_I2S_MspInit+0x124>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	4b38      	ldr	r3, [pc, #224]	; (8004418 <HAL_I2S_MspInit+0x124>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	4a37      	ldr	r2, [pc, #220]	; (8004418 <HAL_I2S_MspInit+0x124>)
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	6313      	str	r3, [r2, #48]	; 0x30
 8004342:	4b35      	ldr	r3, [pc, #212]	; (8004418 <HAL_I2S_MspInit+0x124>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	4b31      	ldr	r3, [pc, #196]	; (8004418 <HAL_I2S_MspInit+0x124>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	4a30      	ldr	r2, [pc, #192]	; (8004418 <HAL_I2S_MspInit+0x124>)
 8004358:	f043 0304 	orr.w	r3, r3, #4
 800435c:	6313      	str	r3, [r2, #48]	; 0x30
 800435e:	4b2e      	ldr	r3, [pc, #184]	; (8004418 <HAL_I2S_MspInit+0x124>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800436a:	2310      	movs	r3, #16
 800436c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436e:	2302      	movs	r3, #2
 8004370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004376:	2300      	movs	r3, #0
 8004378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800437a:	2306      	movs	r3, #6
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800437e:	f107 0314 	add.w	r3, r7, #20
 8004382:	4619      	mov	r1, r3
 8004384:	4825      	ldr	r0, [pc, #148]	; (800441c <HAL_I2S_MspInit+0x128>)
 8004386:	f001 fea9 	bl	80060dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800438a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800438e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004390:	2302      	movs	r3, #2
 8004392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004398:	2300      	movs	r3, #0
 800439a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800439c:	2306      	movs	r3, #6
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043a0:	f107 0314 	add.w	r3, r7, #20
 80043a4:	4619      	mov	r1, r3
 80043a6:	481e      	ldr	r0, [pc, #120]	; (8004420 <HAL_I2S_MspInit+0x12c>)
 80043a8:	f001 fe98 	bl	80060dc <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80043ac:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <HAL_I2S_MspInit+0x130>)
 80043ae:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <HAL_I2S_MspInit+0x134>)
 80043b0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80043b2:	4b1c      	ldr	r3, [pc, #112]	; (8004424 <HAL_I2S_MspInit+0x130>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043b8:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <HAL_I2S_MspInit+0x130>)
 80043ba:	2240      	movs	r2, #64	; 0x40
 80043bc:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043be:	4b19      	ldr	r3, [pc, #100]	; (8004424 <HAL_I2S_MspInit+0x130>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043c4:	4b17      	ldr	r3, [pc, #92]	; (8004424 <HAL_I2S_MspInit+0x130>)
 80043c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043ca:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043cc:	4b15      	ldr	r3, [pc, #84]	; (8004424 <HAL_I2S_MspInit+0x130>)
 80043ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043d2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043d4:	4b13      	ldr	r3, [pc, #76]	; (8004424 <HAL_I2S_MspInit+0x130>)
 80043d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043da:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80043dc:	4b11      	ldr	r3, [pc, #68]	; (8004424 <HAL_I2S_MspInit+0x130>)
 80043de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043e2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80043e4:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <HAL_I2S_MspInit+0x130>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043ea:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <HAL_I2S_MspInit+0x130>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80043f0:	480c      	ldr	r0, [pc, #48]	; (8004424 <HAL_I2S_MspInit+0x130>)
 80043f2:	f001 fad5 	bl	80059a0 <HAL_DMA_Init>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 80043fc:	f7ff fdce 	bl	8003f9c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a08      	ldr	r2, [pc, #32]	; (8004424 <HAL_I2S_MspInit+0x130>)
 8004404:	639a      	str	r2, [r3, #56]	; 0x38
 8004406:	4a07      	ldr	r2, [pc, #28]	; (8004424 <HAL_I2S_MspInit+0x130>)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800440c:	bf00      	nop
 800440e:	3728      	adds	r7, #40	; 0x28
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40003c00 	.word	0x40003c00
 8004418:	40023800 	.word	0x40023800
 800441c:	40020000 	.word	0x40020000
 8004420:	40020800 	.word	0x40020800
 8004424:	20000408 	.word	0x20000408
 8004428:	40026088 	.word	0x40026088

0800442c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004434:	f107 0314 	add.w	r3, r7, #20
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a19      	ldr	r2, [pc, #100]	; (80044b0 <HAL_SPI_MspInit+0x84>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d12b      	bne.n	80044a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	4b18      	ldr	r3, [pc, #96]	; (80044b4 <HAL_SPI_MspInit+0x88>)
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	4a17      	ldr	r2, [pc, #92]	; (80044b4 <HAL_SPI_MspInit+0x88>)
 8004458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800445c:	6453      	str	r3, [r2, #68]	; 0x44
 800445e:	4b15      	ldr	r3, [pc, #84]	; (80044b4 <HAL_SPI_MspInit+0x88>)
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <HAL_SPI_MspInit+0x88>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	4a10      	ldr	r2, [pc, #64]	; (80044b4 <HAL_SPI_MspInit+0x88>)
 8004474:	f043 0302 	orr.w	r3, r3, #2
 8004478:	6313      	str	r3, [r2, #48]	; 0x30
 800447a:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <HAL_SPI_MspInit+0x88>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004486:	2338      	movs	r3, #56	; 0x38
 8004488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448a:	2302      	movs	r3, #2
 800448c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004492:	2303      	movs	r3, #3
 8004494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004496:	2305      	movs	r3, #5
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449a:	f107 0314 	add.w	r3, r7, #20
 800449e:	4619      	mov	r1, r3
 80044a0:	4805      	ldr	r0, [pc, #20]	; (80044b8 <HAL_SPI_MspInit+0x8c>)
 80044a2:	f001 fe1b 	bl	80060dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80044a6:	bf00      	nop
 80044a8:	3728      	adds	r7, #40	; 0x28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40013000 	.word	0x40013000
 80044b4:	40023800 	.word	0x40023800
 80044b8:	40020400 	.word	0x40020400

080044bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1c      	ldr	r2, [pc, #112]	; (800453c <HAL_TIM_Base_MspInit+0x80>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d116      	bne.n	80044fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <HAL_TIM_Base_MspInit+0x84>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <HAL_TIM_Base_MspInit+0x84>)
 80044d8:	f043 0304 	orr.w	r3, r3, #4
 80044dc:	6413      	str	r3, [r2, #64]	; 0x40
 80044de:	4b18      	ldr	r3, [pc, #96]	; (8004540 <HAL_TIM_Base_MspInit+0x84>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80044ea:	2200      	movs	r2, #0
 80044ec:	2101      	movs	r1, #1
 80044ee:	201e      	movs	r0, #30
 80044f0:	f001 f8c7 	bl	8005682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80044f4:	201e      	movs	r0, #30
 80044f6:	f001 f8e0 	bl	80056ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80044fa:	e01a      	b.n	8004532 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a10      	ldr	r2, [pc, #64]	; (8004544 <HAL_TIM_Base_MspInit+0x88>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d115      	bne.n	8004532 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <HAL_TIM_Base_MspInit+0x84>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	4a0c      	ldr	r2, [pc, #48]	; (8004540 <HAL_TIM_Base_MspInit+0x84>)
 8004510:	f043 0310 	orr.w	r3, r3, #16
 8004514:	6413      	str	r3, [r2, #64]	; 0x40
 8004516:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <HAL_TIM_Base_MspInit+0x84>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004522:	2200      	movs	r2, #0
 8004524:	2100      	movs	r1, #0
 8004526:	2036      	movs	r0, #54	; 0x36
 8004528:	f001 f8ab 	bl	8005682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800452c:	2036      	movs	r0, #54	; 0x36
 800452e:	f001 f8c4 	bl	80056ba <HAL_NVIC_EnableIRQ>
}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40000800 	.word	0x40000800
 8004540:	40023800 	.word	0x40023800
 8004544:	40001000 	.word	0x40001000

08004548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	; 0x28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004550:	f107 0314 	add.w	r3, r7, #20
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	609a      	str	r2, [r3, #8]
 800455c:	60da      	str	r2, [r3, #12]
 800455e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a2c      	ldr	r2, [pc, #176]	; (8004618 <HAL_UART_MspInit+0xd0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d151      	bne.n	800460e <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	4b2b      	ldr	r3, [pc, #172]	; (800461c <HAL_UART_MspInit+0xd4>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	4a2a      	ldr	r2, [pc, #168]	; (800461c <HAL_UART_MspInit+0xd4>)
 8004574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004578:	6413      	str	r3, [r2, #64]	; 0x40
 800457a:	4b28      	ldr	r3, [pc, #160]	; (800461c <HAL_UART_MspInit+0xd4>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	4b24      	ldr	r3, [pc, #144]	; (800461c <HAL_UART_MspInit+0xd4>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	4a23      	ldr	r2, [pc, #140]	; (800461c <HAL_UART_MspInit+0xd4>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	6313      	str	r3, [r2, #48]	; 0x30
 8004596:	4b21      	ldr	r3, [pc, #132]	; (800461c <HAL_UART_MspInit+0xd4>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	4b1d      	ldr	r3, [pc, #116]	; (800461c <HAL_UART_MspInit+0xd4>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	4a1c      	ldr	r2, [pc, #112]	; (800461c <HAL_UART_MspInit+0xd4>)
 80045ac:	f043 0308 	orr.w	r3, r3, #8
 80045b0:	6313      	str	r3, [r2, #48]	; 0x30
 80045b2:	4b1a      	ldr	r3, [pc, #104]	; (800461c <HAL_UART_MspInit+0xd4>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045be:	2304      	movs	r3, #4
 80045c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c2:	2302      	movs	r3, #2
 80045c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ca:	2303      	movs	r3, #3
 80045cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80045ce:	2307      	movs	r3, #7
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d2:	f107 0314 	add.w	r3, r7, #20
 80045d6:	4619      	mov	r1, r3
 80045d8:	4811      	ldr	r0, [pc, #68]	; (8004620 <HAL_UART_MspInit+0xd8>)
 80045da:	f001 fd7f 	bl	80060dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80045de:	2340      	movs	r3, #64	; 0x40
 80045e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e2:	2302      	movs	r3, #2
 80045e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ea:	2303      	movs	r3, #3
 80045ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80045ee:	2307      	movs	r3, #7
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045f2:	f107 0314 	add.w	r3, r7, #20
 80045f6:	4619      	mov	r1, r3
 80045f8:	480a      	ldr	r0, [pc, #40]	; (8004624 <HAL_UART_MspInit+0xdc>)
 80045fa:	f001 fd6f 	bl	80060dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80045fe:	2200      	movs	r2, #0
 8004600:	2101      	movs	r1, #1
 8004602:	2026      	movs	r0, #38	; 0x26
 8004604:	f001 f83d 	bl	8005682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004608:	2026      	movs	r0, #38	; 0x26
 800460a:	f001 f856 	bl	80056ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800460e:	bf00      	nop
 8004610:	3728      	adds	r7, #40	; 0x28
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40004400 	.word	0x40004400
 800461c:	40023800 	.word	0x40023800
 8004620:	40020000 	.word	0x40020000
 8004624:	40020c00 	.word	0x40020c00

08004628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004636:	b480      	push	{r7}
 8004638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800463a:	e7fe      	b.n	800463a <HardFault_Handler+0x4>

0800463c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004640:	e7fe      	b.n	8004640 <MemManage_Handler+0x4>

08004642 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004642:	b480      	push	{r7}
 8004644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004646:	e7fe      	b.n	8004646 <BusFault_Handler+0x4>

08004648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800464c:	e7fe      	b.n	800464c <UsageFault_Handler+0x4>

0800464e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800464e:	b480      	push	{r7}
 8004650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004652:	bf00      	nop
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004660:	bf00      	nop
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800466a:	b480      	push	{r7}
 800466c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800466e:	bf00      	nop
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 800467c:	f7fc fc72 	bl	8000f64 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004680:	f000 f99a 	bl	80049b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004684:	bf00      	nop
 8004686:	bd80      	pop	{r7, pc}

08004688 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800468c:	4802      	ldr	r0, [pc, #8]	; (8004698 <DMA1_Stream5_IRQHandler+0x10>)
 800468e:	f001 faaf 	bl	8005bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000408 	.word	0x20000408

0800469c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80046a0:	4802      	ldr	r0, [pc, #8]	; (80046ac <ADC_IRQHandler+0x10>)
 80046a2:	f000 fa0e 	bl	8004ac2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000690 	.word	0x20000690

080046b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80046b4:	4802      	ldr	r0, [pc, #8]	; (80046c0 <TIM4_IRQHandler+0x10>)
 80046b6:	f005 fe0d 	bl	800a2d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	2000035c 	.word	0x2000035c

080046c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046c8:	4802      	ldr	r0, [pc, #8]	; (80046d4 <USART2_IRQHandler+0x10>)
 80046ca:	f006 fa9d 	bl	800ac08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20001020 	.word	0x20001020

080046d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80046dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80046e0:	f001 fee2 	bl	80064a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80046e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80046e8:	f001 fede 	bl	80064a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80046ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80046f0:	f001 feda 	bl	80064a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80046f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80046f8:	f001 fed6 	bl	80064a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80046fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004700:	f001 fed2 	bl	80064a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}

08004708 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800470c:	4803      	ldr	r0, [pc, #12]	; (800471c <TIM6_DAC_IRQHandler+0x14>)
 800470e:	f001 f876 	bl	80057fe <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8004712:	4803      	ldr	r0, [pc, #12]	; (8004720 <TIM6_DAC_IRQHandler+0x18>)
 8004714:	f005 fdde 	bl	800a2d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004718:	bf00      	nop
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000ae0 	.word	0x20000ae0
 8004720:	20000b54 	.word	0x20000b54

08004724 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004728:	4802      	ldr	r0, [pc, #8]	; (8004734 <DMA2_Stream0_IRQHandler+0x10>)
 800472a:	f001 fa61 	bl	8005bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800472e:	bf00      	nop
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000af4 	.word	0x20000af4

08004738 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800473c:	4802      	ldr	r0, [pc, #8]	; (8004748 <I2C3_EV_IRQHandler+0x10>)
 800473e:	f002 f901 	bl	8006944 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8004742:	bf00      	nop
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000308 	.word	0x20000308

0800474c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8004750:	4802      	ldr	r0, [pc, #8]	; (800475c <I2C3_ER_IRQHandler+0x10>)
 8004752:	f002 fa5d 	bl	8006c10 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8004756:	bf00      	nop
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000308 	.word	0x20000308

08004760 <_read>:
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	e00a      	b.n	8004788 <_read+0x28>
 8004772:	f3af 8000 	nop.w
 8004776:	4601      	mov	r1, r0
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	60ba      	str	r2, [r7, #8]
 800477e:	b2ca      	uxtb	r2, r1
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	3301      	adds	r3, #1
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	429a      	cmp	r2, r3
 800478e:	dbf0      	blt.n	8004772 <_read+0x12>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <_write>:
 800479a:	b580      	push	{r7, lr}
 800479c:	b086      	sub	sp, #24
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	607a      	str	r2, [r7, #4]
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	e009      	b.n	80047c0 <_write+0x26>
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	60ba      	str	r2, [r7, #8]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f3af 8000 	nop.w
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	3301      	adds	r3, #1
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	dbf1      	blt.n	80047ac <_write+0x12>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <_close>:
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	f04f 33ff 	mov.w	r3, #4294967295
 80047de:	4618      	mov	r0, r3
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <_fstat>:
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	6039      	str	r1, [r7, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047fa:	605a      	str	r2, [r3, #4]
 80047fc:	2300      	movs	r3, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <_isatty>:
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	2301      	movs	r3, #1
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <_lseek>:
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	2300      	movs	r3, #0
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <_sbrk>:
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	4b11      	ldr	r3, [pc, #68]	; (800488c <_sbrk+0x50>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <_sbrk+0x16>
 800484c:	4b0f      	ldr	r3, [pc, #60]	; (800488c <_sbrk+0x50>)
 800484e:	4a10      	ldr	r2, [pc, #64]	; (8004890 <_sbrk+0x54>)
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	4b0e      	ldr	r3, [pc, #56]	; (800488c <_sbrk+0x50>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	4b0c      	ldr	r3, [pc, #48]	; (800488c <_sbrk+0x50>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4413      	add	r3, r2
 8004860:	466a      	mov	r2, sp
 8004862:	4293      	cmp	r3, r2
 8004864:	d907      	bls.n	8004876 <_sbrk+0x3a>
 8004866:	f006 ff81 	bl	800b76c <__errno>
 800486a:	4602      	mov	r2, r0
 800486c:	230c      	movs	r3, #12
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	f04f 33ff 	mov.w	r3, #4294967295
 8004874:	e006      	b.n	8004884 <_sbrk+0x48>
 8004876:	4b05      	ldr	r3, [pc, #20]	; (800488c <_sbrk+0x50>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4413      	add	r3, r2
 800487e:	4a03      	ldr	r2, [pc, #12]	; (800488c <_sbrk+0x50>)
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	200002f8 	.word	0x200002f8
 8004890:	200010b8 	.word	0x200010b8

08004894 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004898:	4b08      	ldr	r3, [pc, #32]	; (80048bc <SystemInit+0x28>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489e:	4a07      	ldr	r2, [pc, #28]	; (80048bc <SystemInit+0x28>)
 80048a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80048a8:	4b04      	ldr	r3, [pc, #16]	; (80048bc <SystemInit+0x28>)
 80048aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048ae:	609a      	str	r2, [r3, #8]
#endif
}
 80048b0:	bf00      	nop
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	e000ed00 	.word	0xe000ed00

080048c0 <Reset_Handler>:
 80048c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048f8 <LoopFillZerobss+0x14>
 80048c4:	2100      	movs	r1, #0
 80048c6:	e003      	b.n	80048d0 <LoopCopyDataInit>

080048c8 <CopyDataInit>:
 80048c8:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <LoopFillZerobss+0x18>)
 80048ca:	585b      	ldr	r3, [r3, r1]
 80048cc:	5043      	str	r3, [r0, r1]
 80048ce:	3104      	adds	r1, #4

080048d0 <LoopCopyDataInit>:
 80048d0:	480b      	ldr	r0, [pc, #44]	; (8004900 <LoopFillZerobss+0x1c>)
 80048d2:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <LoopFillZerobss+0x20>)
 80048d4:	1842      	adds	r2, r0, r1
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d3f6      	bcc.n	80048c8 <CopyDataInit>
 80048da:	4a0b      	ldr	r2, [pc, #44]	; (8004908 <LoopFillZerobss+0x24>)
 80048dc:	e002      	b.n	80048e4 <LoopFillZerobss>

080048de <FillZerobss>:
 80048de:	2300      	movs	r3, #0
 80048e0:	f842 3b04 	str.w	r3, [r2], #4

080048e4 <LoopFillZerobss>:
 80048e4:	4b09      	ldr	r3, [pc, #36]	; (800490c <LoopFillZerobss+0x28>)
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d3f9      	bcc.n	80048de <FillZerobss>
 80048ea:	f7ff ffd3 	bl	8004894 <SystemInit>
 80048ee:	f006 ff43 	bl	800b778 <__libc_init_array>
 80048f2:	f7fe ffb1 	bl	8003858 <main>
 80048f6:	4770      	bx	lr
 80048f8:	20020000 	.word	0x20020000
 80048fc:	0800c190 	.word	0x0800c190
 8004900:	20000000 	.word	0x20000000
 8004904:	20000080 	.word	0x20000080
 8004908:	20000080 	.word	0x20000080
 800490c:	200010b8 	.word	0x200010b8

08004910 <CAN1_RX0_IRQHandler>:
 8004910:	e7fe      	b.n	8004910 <CAN1_RX0_IRQHandler>
	...

08004914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004918:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <HAL_Init+0x40>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a0d      	ldr	r2, [pc, #52]	; (8004954 <HAL_Init+0x40>)
 800491e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_Init+0x40>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a0a      	ldr	r2, [pc, #40]	; (8004954 <HAL_Init+0x40>)
 800492a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800492e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004930:	4b08      	ldr	r3, [pc, #32]	; (8004954 <HAL_Init+0x40>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a07      	ldr	r2, [pc, #28]	; (8004954 <HAL_Init+0x40>)
 8004936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800493c:	2003      	movs	r0, #3
 800493e:	f000 fe95 	bl	800566c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004942:	2000      	movs	r0, #0
 8004944:	f000 f808 	bl	8004958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004948:	f7ff fb30 	bl	8003fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40023c00 	.word	0x40023c00

08004958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004960:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_InitTick+0x54>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <HAL_InitTick+0x58>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	4619      	mov	r1, r3
 800496a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800496e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004972:	fbb2 f3f3 	udiv	r3, r2, r3
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fead 	bl	80056d6 <HAL_SYSTICK_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e00e      	b.n	80049a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b0f      	cmp	r3, #15
 800498a:	d80a      	bhi.n	80049a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800498c:	2200      	movs	r2, #0
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	f000 fe75 	bl	8005682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004998:	4a06      	ldr	r2, [pc, #24]	; (80049b4 <HAL_InitTick+0x5c>)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	e000      	b.n	80049a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20000010 	.word	0x20000010
 80049b0:	20000018 	.word	0x20000018
 80049b4:	20000014 	.word	0x20000014

080049b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <HAL_IncTick+0x20>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <HAL_IncTick+0x24>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4413      	add	r3, r2
 80049c8:	4a04      	ldr	r2, [pc, #16]	; (80049dc <HAL_IncTick+0x24>)
 80049ca:	6013      	str	r3, [r2, #0]
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	20000018 	.word	0x20000018
 80049dc:	200010b0 	.word	0x200010b0

080049e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return uwTick;
 80049e4:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <HAL_GetTick+0x14>)
 80049e6:	681b      	ldr	r3, [r3, #0]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	200010b0 	.word	0x200010b0

080049f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a00:	f7ff ffee 	bl	80049e0 <HAL_GetTick>
 8004a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a10:	d005      	beq.n	8004a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a12:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <HAL_Delay+0x40>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a1e:	bf00      	nop
 8004a20:	f7ff ffde 	bl	80049e0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d8f7      	bhi.n	8004a20 <HAL_Delay+0x28>
  {
  }
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20000018 	.word	0x20000018

08004a3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e033      	b.n	8004aba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7ff face 	bl	8003ffc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d118      	bne.n	8004aac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a82:	f023 0302 	bic.w	r3, r3, #2
 8004a86:	f043 0202 	orr.w	r2, r3, #2
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fb94 	bl	80051bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f023 0303 	bic.w	r3, r3, #3
 8004aa2:	f043 0201 	orr.w	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40
 8004aaa:	e001      	b.n	8004ab0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	bf0c      	ite	eq
 8004af6:	2301      	moveq	r3, #1
 8004af8:	2300      	movne	r3, #0
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d049      	beq.n	8004b98 <HAL_ADC_IRQHandler+0xd6>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d046      	beq.n	8004b98 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f003 0310 	and.w	r3, r3, #16
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d105      	bne.n	8004b22 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d12b      	bne.n	8004b88 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d127      	bne.n	8004b88 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d006      	beq.n	8004b54 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d119      	bne.n	8004b88 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0220 	bic.w	r2, r2, #32
 8004b62:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	f043 0201 	orr.w	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f9cd 	bl	8004f28 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f06f 0212 	mvn.w	r2, #18
 8004b96:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	bf0c      	ite	eq
 8004ba6:	2301      	moveq	r3, #1
 8004ba8:	2300      	movne	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb8:	2b80      	cmp	r3, #128	; 0x80
 8004bba:	bf0c      	ite	eq
 8004bbc:	2301      	moveq	r3, #1
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d057      	beq.n	8004c7a <HAL_ADC_IRQHandler+0x1b8>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d054      	beq.n	8004c7a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d139      	bne.n	8004c6a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d12b      	bne.n	8004c6a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d124      	bne.n	8004c6a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d11d      	bne.n	8004c6a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d119      	bne.n	8004c6a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c44:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d105      	bne.n	8004c6a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f043 0201 	orr.w	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fc24 	bl	80054b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 020c 	mvn.w	r2, #12
 8004c78:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	bf0c      	ite	eq
 8004c88:	2301      	moveq	r3, #1
 8004c8a:	2300      	movne	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d017      	beq.n	8004cdc <HAL_ADC_IRQHandler+0x21a>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d014      	beq.n	8004cdc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d10d      	bne.n	8004cdc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f93f 	bl	8004f50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f06f 0201 	mvn.w	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d015      	beq.n	8004d3c <HAL_ADC_IRQHandler+0x27a>
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d012      	beq.n	8004d3c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	f043 0202 	orr.w	r2, r3, #2
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f06f 0220 	mvn.w	r2, #32
 8004d2a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f919 	bl	8004f64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f06f 0220 	mvn.w	r2, #32
 8004d3a:	601a      	str	r2, [r3, #0]
  }
}
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_ADC_Start_DMA+0x1e>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e0cc      	b.n	8004efc <HAL_ADC_Start_DMA+0x1b8>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d018      	beq.n	8004daa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d88:	4b5e      	ldr	r3, [pc, #376]	; (8004f04 <HAL_ADC_Start_DMA+0x1c0>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a5e      	ldr	r2, [pc, #376]	; (8004f08 <HAL_ADC_Start_DMA+0x1c4>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	0c9a      	lsrs	r2, r3, #18
 8004d94:	4613      	mov	r3, r2
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	4413      	add	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004d9c:	e002      	b.n	8004da4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f9      	bne.n	8004d9e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	f040 80a0 	bne.w	8004efa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004de4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df8:	d106      	bne.n	8004e08 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	f023 0206 	bic.w	r2, r3, #6
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44
 8004e06:	e002      	b.n	8004e0e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e16:	4b3d      	ldr	r3, [pc, #244]	; (8004f0c <HAL_ADC_Start_DMA+0x1c8>)
 8004e18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	4a3c      	ldr	r2, [pc, #240]	; (8004f10 <HAL_ADC_Start_DMA+0x1cc>)
 8004e20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	4a3b      	ldr	r2, [pc, #236]	; (8004f14 <HAL_ADC_Start_DMA+0x1d0>)
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	4a3a      	ldr	r2, [pc, #232]	; (8004f18 <HAL_ADC_Start_DMA+0x1d4>)
 8004e30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004e3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004e4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	334c      	adds	r3, #76	; 0x4c
 8004e66:	4619      	mov	r1, r3
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f000 fe46 	bl	8005afc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d12a      	bne.n	8004ed2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a26      	ldr	r2, [pc, #152]	; (8004f1c <HAL_ADC_Start_DMA+0x1d8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d015      	beq.n	8004eb2 <HAL_ADC_Start_DMA+0x16e>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a25      	ldr	r2, [pc, #148]	; (8004f20 <HAL_ADC_Start_DMA+0x1dc>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d105      	bne.n	8004e9c <HAL_ADC_Start_DMA+0x158>
 8004e90:	4b1e      	ldr	r3, [pc, #120]	; (8004f0c <HAL_ADC_Start_DMA+0x1c8>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a20      	ldr	r2, [pc, #128]	; (8004f24 <HAL_ADC_Start_DMA+0x1e0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d129      	bne.n	8004efa <HAL_ADC_Start_DMA+0x1b6>
 8004ea6:	4b19      	ldr	r3, [pc, #100]	; (8004f0c <HAL_ADC_Start_DMA+0x1c8>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 031f 	and.w	r3, r3, #31
 8004eae:	2b0f      	cmp	r3, #15
 8004eb0:	d823      	bhi.n	8004efa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d11c      	bne.n	8004efa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ece:	609a      	str	r2, [r3, #8]
 8004ed0:	e013      	b.n	8004efa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a11      	ldr	r2, [pc, #68]	; (8004f1c <HAL_ADC_Start_DMA+0x1d8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d10e      	bne.n	8004efa <HAL_ADC_Start_DMA+0x1b6>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d107      	bne.n	8004efa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ef8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20000010 	.word	0x20000010
 8004f08:	431bde83 	.word	0x431bde83
 8004f0c:	40012300 	.word	0x40012300
 8004f10:	080053b5 	.word	0x080053b5
 8004f14:	0800546f 	.word	0x0800546f
 8004f18:	0800548b 	.word	0x0800548b
 8004f1c:	40012000 	.word	0x40012000
 8004f20:	40012100 	.word	0x40012100
 8004f24:	40012200 	.word	0x40012200

08004f28 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_ADC_ConfigChannel+0x1c>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e105      	b.n	80051a0 <HAL_ADC_ConfigChannel+0x228>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b09      	cmp	r3, #9
 8004fa2:	d925      	bls.n	8004ff0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68d9      	ldr	r1, [r3, #12]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3b1e      	subs	r3, #30
 8004fba:	2207      	movs	r2, #7
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	43da      	mvns	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	400a      	ands	r2, r1
 8004fc8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68d9      	ldr	r1, [r3, #12]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	4618      	mov	r0, r3
 8004fdc:	4603      	mov	r3, r0
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	4403      	add	r3, r0
 8004fe2:	3b1e      	subs	r3, #30
 8004fe4:	409a      	lsls	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	60da      	str	r2, [r3, #12]
 8004fee:	e022      	b.n	8005036 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6919      	ldr	r1, [r3, #16]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4613      	mov	r3, r2
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	4413      	add	r3, r2
 8005004:	2207      	movs	r2, #7
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	43da      	mvns	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	400a      	ands	r2, r1
 8005012:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6919      	ldr	r1, [r3, #16]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	b29b      	uxth	r3, r3
 8005024:	4618      	mov	r0, r3
 8005026:	4603      	mov	r3, r0
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	4403      	add	r3, r0
 800502c:	409a      	lsls	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b06      	cmp	r3, #6
 800503c:	d824      	bhi.n	8005088 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	3b05      	subs	r3, #5
 8005050:	221f      	movs	r2, #31
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	43da      	mvns	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	400a      	ands	r2, r1
 800505e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	4618      	mov	r0, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	3b05      	subs	r3, #5
 800507a:	fa00 f203 	lsl.w	r2, r0, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	635a      	str	r2, [r3, #52]	; 0x34
 8005086:	e04c      	b.n	8005122 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b0c      	cmp	r3, #12
 800508e:	d824      	bhi.n	80050da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	3b23      	subs	r3, #35	; 0x23
 80050a2:	221f      	movs	r2, #31
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43da      	mvns	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	400a      	ands	r2, r1
 80050b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	4618      	mov	r0, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	3b23      	subs	r3, #35	; 0x23
 80050cc:	fa00 f203 	lsl.w	r2, r0, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30
 80050d8:	e023      	b.n	8005122 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	3b41      	subs	r3, #65	; 0x41
 80050ec:	221f      	movs	r2, #31
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43da      	mvns	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	400a      	ands	r2, r1
 80050fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	4618      	mov	r0, r3
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	3b41      	subs	r3, #65	; 0x41
 8005116:	fa00 f203 	lsl.w	r2, r0, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005122:	4b22      	ldr	r3, [pc, #136]	; (80051ac <HAL_ADC_ConfigChannel+0x234>)
 8005124:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a21      	ldr	r2, [pc, #132]	; (80051b0 <HAL_ADC_ConfigChannel+0x238>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d109      	bne.n	8005144 <HAL_ADC_ConfigChannel+0x1cc>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b12      	cmp	r3, #18
 8005136:	d105      	bne.n	8005144 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a19      	ldr	r2, [pc, #100]	; (80051b0 <HAL_ADC_ConfigChannel+0x238>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d123      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x21e>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b10      	cmp	r3, #16
 8005154:	d003      	beq.n	800515e <HAL_ADC_ConfigChannel+0x1e6>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b11      	cmp	r3, #17
 800515c:	d11b      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b10      	cmp	r3, #16
 8005170:	d111      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005172:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <HAL_ADC_ConfigChannel+0x23c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <HAL_ADC_ConfigChannel+0x240>)
 8005178:	fba2 2303 	umull	r2, r3, r2, r3
 800517c:	0c9a      	lsrs	r2, r3, #18
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005188:	e002      	b.n	8005190 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	3b01      	subs	r3, #1
 800518e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f9      	bne.n	800518a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40012300 	.word	0x40012300
 80051b0:	40012000 	.word	0x40012000
 80051b4:	20000010 	.word	0x20000010
 80051b8:	431bde83 	.word	0x431bde83

080051bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051c4:	4b79      	ldr	r3, [pc, #484]	; (80053ac <ADC_Init+0x1f0>)
 80051c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	431a      	orrs	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6859      	ldr	r1, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	021a      	lsls	r2, r3, #8
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005214:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6859      	ldr	r1, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005236:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6899      	ldr	r1, [r3, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	4a58      	ldr	r2, [pc, #352]	; (80053b0 <ADC_Init+0x1f4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d022      	beq.n	800529a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005262:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6899      	ldr	r1, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6899      	ldr	r1, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	609a      	str	r2, [r3, #8]
 8005298:	e00f      	b.n	80052ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0202 	bic.w	r2, r2, #2
 80052c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6899      	ldr	r1, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	7e1b      	ldrb	r3, [r3, #24]
 80052d4:	005a      	lsls	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01b      	beq.n	8005320 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005306:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6859      	ldr	r1, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	3b01      	subs	r3, #1
 8005314:	035a      	lsls	r2, r3, #13
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	e007      	b.n	8005330 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800532e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800533e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	3b01      	subs	r3, #1
 800534c:	051a      	lsls	r2, r3, #20
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6899      	ldr	r1, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005372:	025a      	lsls	r2, r3, #9
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6899      	ldr	r1, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	029a      	lsls	r2, r3, #10
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	609a      	str	r2, [r3, #8]
}
 80053a0:	bf00      	nop
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	40012300 	.word	0x40012300
 80053b0:	0f000001 	.word	0x0f000001

080053b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d13c      	bne.n	8005448 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d12b      	bne.n	8005440 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d127      	bne.n	8005440 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d006      	beq.n	800540c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005408:	2b00      	cmp	r3, #0
 800540a:	d119      	bne.n	8005440 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0220 	bic.w	r2, r2, #32
 800541a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d105      	bne.n	8005440 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	f043 0201 	orr.w	r2, r3, #1
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff fd71 	bl	8004f28 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005446:	e00e      	b.n	8005466 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f7ff fd85 	bl	8004f64 <HAL_ADC_ErrorCallback>
}
 800545a:	e004      	b.n	8005466 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	4798      	blx	r3
}
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f7ff fd5d 	bl	8004f3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2240      	movs	r2, #64	; 0x40
 800549c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a2:	f043 0204 	orr.w	r2, r3, #4
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f7ff fd5a 	bl	8004f64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054b0:	bf00      	nop
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054dc:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <__NVIC_SetPriorityGrouping+0x44>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054e8:	4013      	ands	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054fe:	4a04      	ldr	r2, [pc, #16]	; (8005510 <__NVIC_SetPriorityGrouping+0x44>)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	60d3      	str	r3, [r2, #12]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	e000ed00 	.word	0xe000ed00

08005514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005518:	4b04      	ldr	r3, [pc, #16]	; (800552c <__NVIC_GetPriorityGrouping+0x18>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	0a1b      	lsrs	r3, r3, #8
 800551e:	f003 0307 	and.w	r3, r3, #7
}
 8005522:	4618      	mov	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	e000ed00 	.word	0xe000ed00

08005530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800553a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553e:	2b00      	cmp	r3, #0
 8005540:	db0b      	blt.n	800555a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	f003 021f 	and.w	r2, r3, #31
 8005548:	4907      	ldr	r1, [pc, #28]	; (8005568 <__NVIC_EnableIRQ+0x38>)
 800554a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	2001      	movs	r0, #1
 8005552:	fa00 f202 	lsl.w	r2, r0, r2
 8005556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	e000e100 	.word	0xe000e100

0800556c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	6039      	str	r1, [r7, #0]
 8005576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557c:	2b00      	cmp	r3, #0
 800557e:	db0a      	blt.n	8005596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	490c      	ldr	r1, [pc, #48]	; (80055b8 <__NVIC_SetPriority+0x4c>)
 8005586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558a:	0112      	lsls	r2, r2, #4
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	440b      	add	r3, r1
 8005590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005594:	e00a      	b.n	80055ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	b2da      	uxtb	r2, r3
 800559a:	4908      	ldr	r1, [pc, #32]	; (80055bc <__NVIC_SetPriority+0x50>)
 800559c:	79fb      	ldrb	r3, [r7, #7]
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	3b04      	subs	r3, #4
 80055a4:	0112      	lsls	r2, r2, #4
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	440b      	add	r3, r1
 80055aa:	761a      	strb	r2, [r3, #24]
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	e000e100 	.word	0xe000e100
 80055bc:	e000ed00 	.word	0xe000ed00

080055c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b089      	sub	sp, #36	; 0x24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	f1c3 0307 	rsb	r3, r3, #7
 80055da:	2b04      	cmp	r3, #4
 80055dc:	bf28      	it	cs
 80055de:	2304      	movcs	r3, #4
 80055e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	3304      	adds	r3, #4
 80055e6:	2b06      	cmp	r3, #6
 80055e8:	d902      	bls.n	80055f0 <NVIC_EncodePriority+0x30>
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	3b03      	subs	r3, #3
 80055ee:	e000      	b.n	80055f2 <NVIC_EncodePriority+0x32>
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055f4:	f04f 32ff 	mov.w	r2, #4294967295
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43da      	mvns	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	401a      	ands	r2, r3
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005608:	f04f 31ff 	mov.w	r1, #4294967295
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	fa01 f303 	lsl.w	r3, r1, r3
 8005612:	43d9      	mvns	r1, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005618:	4313      	orrs	r3, r2
         );
}
 800561a:	4618      	mov	r0, r3
 800561c:	3724      	adds	r7, #36	; 0x24
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3b01      	subs	r3, #1
 8005634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005638:	d301      	bcc.n	800563e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800563a:	2301      	movs	r3, #1
 800563c:	e00f      	b.n	800565e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800563e:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <SysTick_Config+0x40>)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3b01      	subs	r3, #1
 8005644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005646:	210f      	movs	r1, #15
 8005648:	f04f 30ff 	mov.w	r0, #4294967295
 800564c:	f7ff ff8e 	bl	800556c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <SysTick_Config+0x40>)
 8005652:	2200      	movs	r2, #0
 8005654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005656:	4b04      	ldr	r3, [pc, #16]	; (8005668 <SysTick_Config+0x40>)
 8005658:	2207      	movs	r2, #7
 800565a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	e000e010 	.word	0xe000e010

0800566c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff ff29 	bl	80054cc <__NVIC_SetPriorityGrouping>
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	4603      	mov	r3, r0
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005694:	f7ff ff3e 	bl	8005514 <__NVIC_GetPriorityGrouping>
 8005698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	6978      	ldr	r0, [r7, #20]
 80056a0:	f7ff ff8e 	bl	80055c0 <NVIC_EncodePriority>
 80056a4:	4602      	mov	r2, r0
 80056a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056aa:	4611      	mov	r1, r2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff ff5d 	bl	800556c <__NVIC_SetPriority>
}
 80056b2:	bf00      	nop
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	4603      	mov	r3, r0
 80056c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff ff31 	bl	8005530 <__NVIC_EnableIRQ>
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff ffa2 	bl	8005628 <SysTick_Config>
 80056e4:	4603      	mov	r3, r0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b082      	sub	sp, #8
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e014      	b.n	800572a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	791b      	ldrb	r3, [r3, #4]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d105      	bne.n	8005716 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7fe fcf3 	bl	80040fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2202      	movs	r2, #2
 800571a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	2300      	movs	r3, #0
 8005742:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	795b      	ldrb	r3, [r3, #5]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_DAC_Start+0x1e>
 800574c:	2302      	movs	r3, #2
 800574e:	e050      	b.n	80057f2 <HAL_DAC_Start+0xc0>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2202      	movs	r2, #2
 800575a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	2201      	movs	r2, #1
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	409a      	lsls	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d11a      	bne.n	80057ac <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800578c:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b04      	cmp	r3, #4
 8005792:	d127      	bne.n	80057e4 <HAL_DAC_Start+0xb2>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b38      	cmp	r3, #56	; 0x38
 8005798:	d124      	bne.n	80057e4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0201 	orr.w	r2, r2, #1
 80057a8:	605a      	str	r2, [r3, #4]
 80057aa:	e01b      	b.n	80057e4 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057b6:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80057c2:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057ca:	d10b      	bne.n	80057e4 <HAL_DAC_Start+0xb2>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80057d2:	d107      	bne.n	80057e4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0202 	orr.w	r2, r2, #2
 80057e2:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005814:	d118      	bne.n	8005848 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2204      	movs	r2, #4
 800581a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f043 0201 	orr.w	r2, r3, #1
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005830:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005840:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f825 	bl	8005892 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005856:	d118      	bne.n	800588a <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2204      	movs	r2, #4
 800585c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f043 0202 	orr.w	r2, r3, #2
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005872:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f880 	bl	800598a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800588a:	bf00      	nop
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b087      	sub	sp, #28
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	795b      	ldrb	r3, [r3, #5]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_DAC_ConfigChannel+0x20>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e036      	b.n	8005934 <HAL_DAC_ConfigChannel+0x8e>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2202      	movs	r2, #2
 80058d0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80058da:	f640 72fe 	movw	r2, #4094	; 0xffe
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	43db      	mvns	r3, r3
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4013      	ands	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	22c0      	movs	r2, #192	; 0xc0
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	43da      	mvns	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	400a      	ands	r2, r1
 8005924:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d105      	bne.n	800596a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4413      	add	r3, r2
 8005964:	3308      	adds	r3, #8
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	e004      	b.n	8005974 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4413      	add	r3, r2
 8005970:	3314      	adds	r3, #20
 8005972:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	461a      	mov	r2, r3
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
	...

080059a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80059ac:	f7ff f818 	bl	80049e0 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e099      	b.n	8005af0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0201 	bic.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059dc:	e00f      	b.n	80059fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059de:	f7fe ffff 	bl	80049e0 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b05      	cmp	r3, #5
 80059ea:	d908      	bls.n	80059fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2203      	movs	r2, #3
 80059f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e078      	b.n	8005af0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e8      	bne.n	80059de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4b38      	ldr	r3, [pc, #224]	; (8005af8 <HAL_DMA_Init+0x158>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d107      	bne.n	8005a68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a60:	4313      	orrs	r3, r2
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f023 0307 	bic.w	r3, r3, #7
 8005a7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d117      	bne.n	8005ac2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00e      	beq.n	8005ac2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fa9f 	bl	8005fe8 <DMA_CheckFifoParam>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2240      	movs	r2, #64	; 0x40
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e016      	b.n	8005af0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fa56 	bl	8005f7c <DMA_CalcBaseAndBitshift>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad8:	223f      	movs	r2, #63	; 0x3f
 8005ada:	409a      	lsls	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	f010803f 	.word	0xf010803f

08005afc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_DMA_Start_IT+0x26>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e040      	b.n	8005ba4 <HAL_DMA_Start_IT+0xa8>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d12f      	bne.n	8005b96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f9e8 	bl	8005f20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b54:	223f      	movs	r2, #63	; 0x3f
 8005b56:	409a      	lsls	r2, r3
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0216 	orr.w	r2, r2, #22
 8005b6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d007      	beq.n	8005b84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0208 	orr.w	r2, r2, #8
 8005b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	e005      	b.n	8005ba2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d004      	beq.n	8005bca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2280      	movs	r2, #128	; 0x80
 8005bc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e00c      	b.n	8005be4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2205      	movs	r2, #5
 8005bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0201 	bic.w	r2, r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bfc:	4b92      	ldr	r3, [pc, #584]	; (8005e48 <HAL_DMA_IRQHandler+0x258>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a92      	ldr	r2, [pc, #584]	; (8005e4c <HAL_DMA_IRQHandler+0x25c>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	0a9b      	lsrs	r3, r3, #10
 8005c08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	409a      	lsls	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4013      	ands	r3, r2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d01a      	beq.n	8005c5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d013      	beq.n	8005c5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0204 	bic.w	r2, r2, #4
 8005c42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c48:	2208      	movs	r2, #8
 8005c4a:	409a      	lsls	r2, r3
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c54:	f043 0201 	orr.w	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c60:	2201      	movs	r2, #1
 8005c62:	409a      	lsls	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d012      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00b      	beq.n	8005c92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7e:	2201      	movs	r2, #1
 8005c80:	409a      	lsls	r2, r3
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8a:	f043 0202 	orr.w	r2, r3, #2
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c96:	2204      	movs	r2, #4
 8005c98:	409a      	lsls	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d012      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb4:	2204      	movs	r2, #4
 8005cb6:	409a      	lsls	r2, r3
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc0:	f043 0204 	orr.w	r2, r3, #4
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ccc:	2210      	movs	r2, #16
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d043      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d03c      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cea:	2210      	movs	r2, #16
 8005cec:	409a      	lsls	r2, r3
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d018      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d108      	bne.n	8005d20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d024      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
 8005d1e:	e01f      	b.n	8005d60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01b      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
 8005d30:	e016      	b.n	8005d60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d107      	bne.n	8005d50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0208 	bic.w	r2, r2, #8
 8005d4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d64:	2220      	movs	r2, #32
 8005d66:	409a      	lsls	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 808e 	beq.w	8005e8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8086 	beq.w	8005e8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d86:	2220      	movs	r2, #32
 8005d88:	409a      	lsls	r2, r3
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b05      	cmp	r3, #5
 8005d98:	d136      	bne.n	8005e08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0216 	bic.w	r2, r2, #22
 8005da8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695a      	ldr	r2, [r3, #20]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005db8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d103      	bne.n	8005dca <HAL_DMA_IRQHandler+0x1da>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0208 	bic.w	r2, r2, #8
 8005dd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dde:	223f      	movs	r2, #63	; 0x3f
 8005de0:	409a      	lsls	r2, r3
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d07d      	beq.n	8005efa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	4798      	blx	r3
        }
        return;
 8005e06:	e078      	b.n	8005efa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01c      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d108      	bne.n	8005e36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d030      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	4798      	blx	r3
 8005e34:	e02b      	b.n	8005e8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d027      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
 8005e46:	e022      	b.n	8005e8e <HAL_DMA_IRQHandler+0x29e>
 8005e48:	20000010 	.word	0x20000010
 8005e4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10f      	bne.n	8005e7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0210 	bic.w	r2, r2, #16
 8005e6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d032      	beq.n	8005efc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d022      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2205      	movs	r2, #5
 8005ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0201 	bic.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	60bb      	str	r3, [r7, #8]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d307      	bcc.n	8005ed6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1f2      	bne.n	8005eba <HAL_DMA_IRQHandler+0x2ca>
 8005ed4:	e000      	b.n	8005ed8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005ed6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d005      	beq.n	8005efc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	4798      	blx	r3
 8005ef8:	e000      	b.n	8005efc <HAL_DMA_IRQHandler+0x30c>
        return;
 8005efa:	bf00      	nop
    }
  }
}
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop

08005f04 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f12:	b2db      	uxtb	r3, r3
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d108      	bne.n	8005f60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005f5e:	e007      	b.n	8005f70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	60da      	str	r2, [r3, #12]
}
 8005f70:	bf00      	nop
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	3b10      	subs	r3, #16
 8005f8c:	4a14      	ldr	r2, [pc, #80]	; (8005fe0 <DMA_CalcBaseAndBitshift+0x64>)
 8005f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f92:	091b      	lsrs	r3, r3, #4
 8005f94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f96:	4a13      	ldr	r2, [pc, #76]	; (8005fe4 <DMA_CalcBaseAndBitshift+0x68>)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d909      	bls.n	8005fbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005fb2:	f023 0303 	bic.w	r3, r3, #3
 8005fb6:	1d1a      	adds	r2, r3, #4
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	659a      	str	r2, [r3, #88]	; 0x58
 8005fbc:	e007      	b.n	8005fce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005fc6:	f023 0303 	bic.w	r3, r3, #3
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	aaaaaaab 	.word	0xaaaaaaab
 8005fe4:	0800c114 	.word	0x0800c114

08005fe8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d11f      	bne.n	8006042 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b03      	cmp	r3, #3
 8006006:	d855      	bhi.n	80060b4 <DMA_CheckFifoParam+0xcc>
 8006008:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <DMA_CheckFifoParam+0x28>)
 800600a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600e:	bf00      	nop
 8006010:	08006021 	.word	0x08006021
 8006014:	08006033 	.word	0x08006033
 8006018:	08006021 	.word	0x08006021
 800601c:	080060b5 	.word	0x080060b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d045      	beq.n	80060b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006030:	e042      	b.n	80060b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006036:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800603a:	d13f      	bne.n	80060bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006040:	e03c      	b.n	80060bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604a:	d121      	bne.n	8006090 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b03      	cmp	r3, #3
 8006050:	d836      	bhi.n	80060c0 <DMA_CheckFifoParam+0xd8>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <DMA_CheckFifoParam+0x70>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	08006069 	.word	0x08006069
 800605c:	0800606f 	.word	0x0800606f
 8006060:	08006069 	.word	0x08006069
 8006064:	08006081 	.word	0x08006081
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	73fb      	strb	r3, [r7, #15]
      break;
 800606c:	e02f      	b.n	80060ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d024      	beq.n	80060c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800607e:	e021      	b.n	80060c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006088:	d11e      	bne.n	80060c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800608e:	e01b      	b.n	80060c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d902      	bls.n	800609c <DMA_CheckFifoParam+0xb4>
 8006096:	2b03      	cmp	r3, #3
 8006098:	d003      	beq.n	80060a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800609a:	e018      	b.n	80060ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
      break;
 80060a0:	e015      	b.n	80060ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00e      	beq.n	80060cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	73fb      	strb	r3, [r7, #15]
      break;
 80060b2:	e00b      	b.n	80060cc <DMA_CheckFifoParam+0xe4>
      break;
 80060b4:	bf00      	nop
 80060b6:	e00a      	b.n	80060ce <DMA_CheckFifoParam+0xe6>
      break;
 80060b8:	bf00      	nop
 80060ba:	e008      	b.n	80060ce <DMA_CheckFifoParam+0xe6>
      break;
 80060bc:	bf00      	nop
 80060be:	e006      	b.n	80060ce <DMA_CheckFifoParam+0xe6>
      break;
 80060c0:	bf00      	nop
 80060c2:	e004      	b.n	80060ce <DMA_CheckFifoParam+0xe6>
      break;
 80060c4:	bf00      	nop
 80060c6:	e002      	b.n	80060ce <DMA_CheckFifoParam+0xe6>
      break;   
 80060c8:	bf00      	nop
 80060ca:	e000      	b.n	80060ce <DMA_CheckFifoParam+0xe6>
      break;
 80060cc:	bf00      	nop
    }
  } 
  
  return status; 
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060dc:	b480      	push	{r7}
 80060de:	b089      	sub	sp, #36	; 0x24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060f2:	2300      	movs	r3, #0
 80060f4:	61fb      	str	r3, [r7, #28]
 80060f6:	e16b      	b.n	80063d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80060f8:	2201      	movs	r2, #1
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4013      	ands	r3, r2
 800610a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	429a      	cmp	r2, r3
 8006112:	f040 815a 	bne.w	80063ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d00b      	beq.n	8006136 <HAL_GPIO_Init+0x5a>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d007      	beq.n	8006136 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800612a:	2b11      	cmp	r3, #17
 800612c:	d003      	beq.n	8006136 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2b12      	cmp	r3, #18
 8006134:	d130      	bne.n	8006198 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	2203      	movs	r2, #3
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	43db      	mvns	r3, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4013      	ands	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	4313      	orrs	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800616c:	2201      	movs	r2, #1
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	43db      	mvns	r3, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4013      	ands	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	f003 0201 	and.w	r2, r3, #1
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	4313      	orrs	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	2203      	movs	r2, #3
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	43db      	mvns	r3, r3
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	4013      	ands	r3, r2
 80061ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4313      	orrs	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d003      	beq.n	80061d8 <HAL_GPIO_Init+0xfc>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2b12      	cmp	r3, #18
 80061d6:	d123      	bne.n	8006220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	08da      	lsrs	r2, r3, #3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3208      	adds	r2, #8
 80061e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	220f      	movs	r2, #15
 80061f0:	fa02 f303 	lsl.w	r3, r2, r3
 80061f4:	43db      	mvns	r3, r3
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	4013      	ands	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	691a      	ldr	r2, [r3, #16]
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	fa02 f303 	lsl.w	r3, r2, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	4313      	orrs	r3, r2
 8006210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	08da      	lsrs	r2, r3, #3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	3208      	adds	r2, #8
 800621a:	69b9      	ldr	r1, [r7, #24]
 800621c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	2203      	movs	r2, #3
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	43db      	mvns	r3, r3
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	4013      	ands	r3, r2
 8006236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f003 0203 	and.w	r2, r3, #3
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	4313      	orrs	r3, r2
 800624c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80b4 	beq.w	80063ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006262:	2300      	movs	r3, #0
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	4b5f      	ldr	r3, [pc, #380]	; (80063e4 <HAL_GPIO_Init+0x308>)
 8006268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626a:	4a5e      	ldr	r2, [pc, #376]	; (80063e4 <HAL_GPIO_Init+0x308>)
 800626c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006270:	6453      	str	r3, [r2, #68]	; 0x44
 8006272:	4b5c      	ldr	r3, [pc, #368]	; (80063e4 <HAL_GPIO_Init+0x308>)
 8006274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800627e:	4a5a      	ldr	r2, [pc, #360]	; (80063e8 <HAL_GPIO_Init+0x30c>)
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	3302      	adds	r3, #2
 8006286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800628a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	220f      	movs	r2, #15
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	43db      	mvns	r3, r3
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	4013      	ands	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a51      	ldr	r2, [pc, #324]	; (80063ec <HAL_GPIO_Init+0x310>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d02b      	beq.n	8006302 <HAL_GPIO_Init+0x226>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a50      	ldr	r2, [pc, #320]	; (80063f0 <HAL_GPIO_Init+0x314>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d025      	beq.n	80062fe <HAL_GPIO_Init+0x222>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a4f      	ldr	r2, [pc, #316]	; (80063f4 <HAL_GPIO_Init+0x318>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d01f      	beq.n	80062fa <HAL_GPIO_Init+0x21e>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a4e      	ldr	r2, [pc, #312]	; (80063f8 <HAL_GPIO_Init+0x31c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d019      	beq.n	80062f6 <HAL_GPIO_Init+0x21a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a4d      	ldr	r2, [pc, #308]	; (80063fc <HAL_GPIO_Init+0x320>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d013      	beq.n	80062f2 <HAL_GPIO_Init+0x216>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a4c      	ldr	r2, [pc, #304]	; (8006400 <HAL_GPIO_Init+0x324>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00d      	beq.n	80062ee <HAL_GPIO_Init+0x212>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a4b      	ldr	r2, [pc, #300]	; (8006404 <HAL_GPIO_Init+0x328>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d007      	beq.n	80062ea <HAL_GPIO_Init+0x20e>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a4a      	ldr	r2, [pc, #296]	; (8006408 <HAL_GPIO_Init+0x32c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d101      	bne.n	80062e6 <HAL_GPIO_Init+0x20a>
 80062e2:	2307      	movs	r3, #7
 80062e4:	e00e      	b.n	8006304 <HAL_GPIO_Init+0x228>
 80062e6:	2308      	movs	r3, #8
 80062e8:	e00c      	b.n	8006304 <HAL_GPIO_Init+0x228>
 80062ea:	2306      	movs	r3, #6
 80062ec:	e00a      	b.n	8006304 <HAL_GPIO_Init+0x228>
 80062ee:	2305      	movs	r3, #5
 80062f0:	e008      	b.n	8006304 <HAL_GPIO_Init+0x228>
 80062f2:	2304      	movs	r3, #4
 80062f4:	e006      	b.n	8006304 <HAL_GPIO_Init+0x228>
 80062f6:	2303      	movs	r3, #3
 80062f8:	e004      	b.n	8006304 <HAL_GPIO_Init+0x228>
 80062fa:	2302      	movs	r3, #2
 80062fc:	e002      	b.n	8006304 <HAL_GPIO_Init+0x228>
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <HAL_GPIO_Init+0x228>
 8006302:	2300      	movs	r3, #0
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	f002 0203 	and.w	r2, r2, #3
 800630a:	0092      	lsls	r2, r2, #2
 800630c:	4093      	lsls	r3, r2
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	4313      	orrs	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006314:	4934      	ldr	r1, [pc, #208]	; (80063e8 <HAL_GPIO_Init+0x30c>)
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	089b      	lsrs	r3, r3, #2
 800631a:	3302      	adds	r3, #2
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006322:	4b3a      	ldr	r3, [pc, #232]	; (800640c <HAL_GPIO_Init+0x330>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	43db      	mvns	r3, r3
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	4013      	ands	r3, r2
 8006330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006346:	4a31      	ldr	r2, [pc, #196]	; (800640c <HAL_GPIO_Init+0x330>)
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800634c:	4b2f      	ldr	r3, [pc, #188]	; (800640c <HAL_GPIO_Init+0x330>)
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	43db      	mvns	r3, r3
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	4013      	ands	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	4313      	orrs	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006370:	4a26      	ldr	r2, [pc, #152]	; (800640c <HAL_GPIO_Init+0x330>)
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006376:	4b25      	ldr	r3, [pc, #148]	; (800640c <HAL_GPIO_Init+0x330>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	43db      	mvns	r3, r3
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	4013      	ands	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800639a:	4a1c      	ldr	r2, [pc, #112]	; (800640c <HAL_GPIO_Init+0x330>)
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063a0:	4b1a      	ldr	r3, [pc, #104]	; (800640c <HAL_GPIO_Init+0x330>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	43db      	mvns	r3, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4013      	ands	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063c4:	4a11      	ldr	r2, [pc, #68]	; (800640c <HAL_GPIO_Init+0x330>)
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	3301      	adds	r3, #1
 80063ce:	61fb      	str	r3, [r7, #28]
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	2b0f      	cmp	r3, #15
 80063d4:	f67f ae90 	bls.w	80060f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80063d8:	bf00      	nop
 80063da:	3724      	adds	r7, #36	; 0x24
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	40023800 	.word	0x40023800
 80063e8:	40013800 	.word	0x40013800
 80063ec:	40020000 	.word	0x40020000
 80063f0:	40020400 	.word	0x40020400
 80063f4:	40020800 	.word	0x40020800
 80063f8:	40020c00 	.word	0x40020c00
 80063fc:	40021000 	.word	0x40021000
 8006400:	40021400 	.word	0x40021400
 8006404:	40021800 	.word	0x40021800
 8006408:	40021c00 	.word	0x40021c00
 800640c:	40013c00 	.word	0x40013c00

08006410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	887b      	ldrh	r3, [r7, #2]
 8006422:	4013      	ands	r3, r2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006428:	2301      	movs	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]
 800642c:	e001      	b.n	8006432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800642e:	2300      	movs	r3, #0
 8006430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	807b      	strh	r3, [r7, #2]
 800644c:	4613      	mov	r3, r2
 800644e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006450:	787b      	ldrb	r3, [r7, #1]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006456:	887a      	ldrh	r2, [r7, #2]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800645c:	e003      	b.n	8006466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800645e:	887b      	ldrh	r3, [r7, #2]
 8006460:	041a      	lsls	r2, r3, #16
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	619a      	str	r2, [r3, #24]
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	460b      	mov	r3, r1
 800647c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	695a      	ldr	r2, [r3, #20]
 8006482:	887b      	ldrh	r3, [r7, #2]
 8006484:	401a      	ands	r2, r3
 8006486:	887b      	ldrh	r3, [r7, #2]
 8006488:	429a      	cmp	r2, r3
 800648a:	d104      	bne.n	8006496 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800648c:	887b      	ldrh	r3, [r7, #2]
 800648e:	041a      	lsls	r2, r3, #16
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006494:	e002      	b.n	800649c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006496:	887a      	ldrh	r2, [r7, #2]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	619a      	str	r2, [r3, #24]
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	4603      	mov	r3, r0
 80064b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80064b2:	4b08      	ldr	r3, [pc, #32]	; (80064d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064b4:	695a      	ldr	r2, [r3, #20]
 80064b6:	88fb      	ldrh	r3, [r7, #6]
 80064b8:	4013      	ands	r3, r2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d006      	beq.n	80064cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064be:	4a05      	ldr	r2, [pc, #20]	; (80064d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064c0:	88fb      	ldrh	r3, [r7, #6]
 80064c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064c4:	88fb      	ldrh	r3, [r7, #6]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fd f814 	bl	80034f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40013c00 	.word	0x40013c00

080064d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e11f      	b.n	800672a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d106      	bne.n	8006504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fd fe48 	bl	8004194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2224      	movs	r2, #36	; 0x24
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0201 	bic.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800652a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800653a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800653c:	f003 f8f6 	bl	800972c <HAL_RCC_GetPCLK1Freq>
 8006540:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	4a7b      	ldr	r2, [pc, #492]	; (8006734 <HAL_I2C_Init+0x25c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d807      	bhi.n	800655c <HAL_I2C_Init+0x84>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4a7a      	ldr	r2, [pc, #488]	; (8006738 <HAL_I2C_Init+0x260>)
 8006550:	4293      	cmp	r3, r2
 8006552:	bf94      	ite	ls
 8006554:	2301      	movls	r3, #1
 8006556:	2300      	movhi	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	e006      	b.n	800656a <HAL_I2C_Init+0x92>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4a77      	ldr	r2, [pc, #476]	; (800673c <HAL_I2C_Init+0x264>)
 8006560:	4293      	cmp	r3, r2
 8006562:	bf94      	ite	ls
 8006564:	2301      	movls	r3, #1
 8006566:	2300      	movhi	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e0db      	b.n	800672a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4a72      	ldr	r2, [pc, #456]	; (8006740 <HAL_I2C_Init+0x268>)
 8006576:	fba2 2303 	umull	r2, r3, r2, r3
 800657a:	0c9b      	lsrs	r3, r3, #18
 800657c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	4a64      	ldr	r2, [pc, #400]	; (8006734 <HAL_I2C_Init+0x25c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d802      	bhi.n	80065ac <HAL_I2C_Init+0xd4>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	3301      	adds	r3, #1
 80065aa:	e009      	b.n	80065c0 <HAL_I2C_Init+0xe8>
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	4a63      	ldr	r2, [pc, #396]	; (8006744 <HAL_I2C_Init+0x26c>)
 80065b8:	fba2 2303 	umull	r2, r3, r2, r3
 80065bc:	099b      	lsrs	r3, r3, #6
 80065be:	3301      	adds	r3, #1
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6812      	ldr	r2, [r2, #0]
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	4956      	ldr	r1, [pc, #344]	; (8006734 <HAL_I2C_Init+0x25c>)
 80065dc:	428b      	cmp	r3, r1
 80065de:	d80d      	bhi.n	80065fc <HAL_I2C_Init+0x124>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	1e59      	subs	r1, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80065ee:	3301      	adds	r3, #1
 80065f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	bf38      	it	cc
 80065f8:	2304      	movcc	r3, #4
 80065fa:	e04f      	b.n	800669c <HAL_I2C_Init+0x1c4>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d111      	bne.n	8006628 <HAL_I2C_Init+0x150>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	1e58      	subs	r0, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6859      	ldr	r1, [r3, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	440b      	add	r3, r1
 8006612:	fbb0 f3f3 	udiv	r3, r0, r3
 8006616:	3301      	adds	r3, #1
 8006618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800661c:	2b00      	cmp	r3, #0
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	e012      	b.n	800664e <HAL_I2C_Init+0x176>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	1e58      	subs	r0, r3, #1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6859      	ldr	r1, [r3, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	440b      	add	r3, r1
 8006636:	0099      	lsls	r1, r3, #2
 8006638:	440b      	add	r3, r1
 800663a:	fbb0 f3f3 	udiv	r3, r0, r3
 800663e:	3301      	adds	r3, #1
 8006640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006644:	2b00      	cmp	r3, #0
 8006646:	bf0c      	ite	eq
 8006648:	2301      	moveq	r3, #1
 800664a:	2300      	movne	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_I2C_Init+0x17e>
 8006652:	2301      	movs	r3, #1
 8006654:	e022      	b.n	800669c <HAL_I2C_Init+0x1c4>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10e      	bne.n	800667c <HAL_I2C_Init+0x1a4>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	1e58      	subs	r0, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6859      	ldr	r1, [r3, #4]
 8006666:	460b      	mov	r3, r1
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	440b      	add	r3, r1
 800666c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006670:	3301      	adds	r3, #1
 8006672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800667a:	e00f      	b.n	800669c <HAL_I2C_Init+0x1c4>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	1e58      	subs	r0, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6859      	ldr	r1, [r3, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	0099      	lsls	r1, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006692:	3301      	adds	r3, #1
 8006694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	6809      	ldr	r1, [r1, #0]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69da      	ldr	r2, [r3, #28]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6911      	ldr	r1, [r2, #16]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68d2      	ldr	r2, [r2, #12]
 80066d6:	4311      	orrs	r1, r2
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	430b      	orrs	r3, r1
 80066de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695a      	ldr	r2, [r3, #20]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0201 	orr.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	000186a0 	.word	0x000186a0
 8006738:	001e847f 	.word	0x001e847f
 800673c:	003d08ff 	.word	0x003d08ff
 8006740:	431bde83 	.word	0x431bde83
 8006744:	10624dd3 	.word	0x10624dd3

08006748 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af02      	add	r7, sp, #8
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	607a      	str	r2, [r7, #4]
 8006752:	461a      	mov	r2, r3
 8006754:	460b      	mov	r3, r1
 8006756:	817b      	strh	r3, [r7, #10]
 8006758:	4613      	mov	r3, r2
 800675a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800675c:	f7fe f940 	bl	80049e0 <HAL_GetTick>
 8006760:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b20      	cmp	r3, #32
 800676c:	f040 80e0 	bne.w	8006930 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	2319      	movs	r3, #25
 8006776:	2201      	movs	r2, #1
 8006778:	4970      	ldr	r1, [pc, #448]	; (800693c <HAL_I2C_Master_Transmit+0x1f4>)
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f001 fd59 	bl	8008232 <I2C_WaitOnFlagUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006786:	2302      	movs	r3, #2
 8006788:	e0d3      	b.n	8006932 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_I2C_Master_Transmit+0x50>
 8006794:	2302      	movs	r3, #2
 8006796:	e0cc      	b.n	8006932 <HAL_I2C_Master_Transmit+0x1ea>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d007      	beq.n	80067be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0201 	orr.w	r2, r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2221      	movs	r2, #33	; 0x21
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2210      	movs	r2, #16
 80067da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	893a      	ldrh	r2, [r7, #8]
 80067ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4a50      	ldr	r2, [pc, #320]	; (8006940 <HAL_I2C_Master_Transmit+0x1f8>)
 80067fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006800:	8979      	ldrh	r1, [r7, #10]
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	6a3a      	ldr	r2, [r7, #32]
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f001 fc12 	bl	8008030 <I2C_MasterRequestWrite>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e08d      	b.n	8006932 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006816:	2300      	movs	r3, #0
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800682c:	e066      	b.n	80068fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	6a39      	ldr	r1, [r7, #32]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f001 fdd3 	bl	80083de <I2C_WaitOnTXEFlagUntilTimeout>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00d      	beq.n	800685a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	2b04      	cmp	r3, #4
 8006844:	d107      	bne.n	8006856 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006854:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e06b      	b.n	8006932 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	781a      	ldrb	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006874:	b29b      	uxth	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006882:	3b01      	subs	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b04      	cmp	r3, #4
 8006896:	d11b      	bne.n	80068d0 <HAL_I2C_Master_Transmit+0x188>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689c:	2b00      	cmp	r3, #0
 800689e:	d017      	beq.n	80068d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	781a      	ldrb	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	3b01      	subs	r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	6a39      	ldr	r1, [r7, #32]
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f001 fdc3 	bl	8008460 <I2C_WaitOnBTFFlagUntilTimeout>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00d      	beq.n	80068fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	d107      	bne.n	80068f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e01a      	b.n	8006932 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006900:	2b00      	cmp	r3, #0
 8006902:	d194      	bne.n	800682e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	e000      	b.n	8006932 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006930:	2302      	movs	r3, #2
  }
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	00100002 	.word	0x00100002
 8006940:	ffff0000 	.word	0xffff0000

08006944 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006964:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	2b10      	cmp	r3, #16
 8006972:	d003      	beq.n	800697c <HAL_I2C_EV_IRQHandler+0x38>
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	f040 80b6 	bne.w	8006ae8 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10d      	bne.n	80069b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800699c:	d003      	beq.n	80069a6 <HAL_I2C_EV_IRQHandler+0x62>
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80069a4:	d101      	bne.n	80069aa <HAL_I2C_EV_IRQHandler+0x66>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <HAL_I2C_EV_IRQHandler+0x68>
 80069aa:	2300      	movs	r3, #0
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	f000 8127 	beq.w	8006c00 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00c      	beq.n	80069d6 <HAL_I2C_EV_IRQHandler+0x92>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	0a5b      	lsrs	r3, r3, #9
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d006      	beq.n	80069d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fdb9 	bl	8008540 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fd1c 	bl	800740c <I2C_Master_SB>
 80069d4:	e087      	b.n	8006ae6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	08db      	lsrs	r3, r3, #3
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d009      	beq.n	80069f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	0a5b      	lsrs	r3, r3, #9
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fd92 	bl	8007518 <I2C_Master_ADD10>
 80069f4:	e077      	b.n	8006ae6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	085b      	lsrs	r3, r3, #1
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d009      	beq.n	8006a16 <HAL_I2C_EV_IRQHandler+0xd2>
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	0a5b      	lsrs	r3, r3, #9
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fdac 	bl	800756c <I2C_Master_ADDR>
 8006a14:	e067      	b.n	8006ae6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	089b      	lsrs	r3, r3, #2
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d030      	beq.n	8006a84 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a30:	f000 80e8 	beq.w	8006c04 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	09db      	lsrs	r3, r3, #7
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00f      	beq.n	8006a60 <HAL_I2C_EV_IRQHandler+0x11c>
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	0a9b      	lsrs	r3, r3, #10
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d009      	beq.n	8006a60 <HAL_I2C_EV_IRQHandler+0x11c>
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	089b      	lsrs	r3, r3, #2
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d103      	bne.n	8006a60 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f9e8 	bl	8006e2e <I2C_MasterTransmit_TXE>
 8006a5e:	e042      	b.n	8006ae6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	089b      	lsrs	r3, r3, #2
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 80cb 	beq.w	8006c04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	0a5b      	lsrs	r3, r3, #9
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 80c4 	beq.w	8006c04 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fa72 	bl	8006f66 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a82:	e0bf      	b.n	8006c04 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a92:	f000 80b7 	beq.w	8006c04 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	099b      	lsrs	r3, r3, #6
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00f      	beq.n	8006ac2 <HAL_I2C_EV_IRQHandler+0x17e>
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	0a9b      	lsrs	r3, r3, #10
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <HAL_I2C_EV_IRQHandler+0x17e>
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	089b      	lsrs	r3, r3, #2
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d103      	bne.n	8006ac2 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fb3a 	bl	8007134 <I2C_MasterReceive_RXNE>
 8006ac0:	e011      	b.n	8006ae6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	089b      	lsrs	r3, r3, #2
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 809a 	beq.w	8006c04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	0a5b      	lsrs	r3, r3, #9
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 8093 	beq.w	8006c04 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fbaa 	bl	8007238 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ae4:	e08e      	b.n	8006c04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8006ae6:	e08d      	b.n	8006c04 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d004      	beq.n	8006afa <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	e007      	b.n	8006b0a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d012      	beq.n	8006b3c <HAL_I2C_EV_IRQHandler+0x1f8>
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	0a5b      	lsrs	r3, r3, #9
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00c      	beq.n	8006b3c <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006b32:	69b9      	ldr	r1, [r7, #24]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 ff68 	bl	8007a0a <I2C_Slave_ADDR>
 8006b3a:	e066      	b.n	8006c0a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	091b      	lsrs	r3, r3, #4
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d009      	beq.n	8006b5c <HAL_I2C_EV_IRQHandler+0x218>
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	0a5b      	lsrs	r3, r3, #9
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 ff9d 	bl	8007a94 <I2C_Slave_STOPF>
 8006b5a:	e056      	b.n	8006c0a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b21      	cmp	r3, #33	; 0x21
 8006b60:	d002      	beq.n	8006b68 <HAL_I2C_EV_IRQHandler+0x224>
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	2b29      	cmp	r3, #41	; 0x29
 8006b66:	d125      	bne.n	8006bb4 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	09db      	lsrs	r3, r3, #7
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00f      	beq.n	8006b94 <HAL_I2C_EV_IRQHandler+0x250>
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	0a9b      	lsrs	r3, r3, #10
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d009      	beq.n	8006b94 <HAL_I2C_EV_IRQHandler+0x250>
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	089b      	lsrs	r3, r3, #2
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d103      	bne.n	8006b94 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fe7e 	bl	800788e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b92:	e039      	b.n	8006c08 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	089b      	lsrs	r3, r3, #2
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d033      	beq.n	8006c08 <HAL_I2C_EV_IRQHandler+0x2c4>
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	0a5b      	lsrs	r3, r3, #9
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d02d      	beq.n	8006c08 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 feab 	bl	8007908 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bb2:	e029      	b.n	8006c08 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	099b      	lsrs	r3, r3, #6
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00f      	beq.n	8006be0 <HAL_I2C_EV_IRQHandler+0x29c>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	0a9b      	lsrs	r3, r3, #10
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d009      	beq.n	8006be0 <HAL_I2C_EV_IRQHandler+0x29c>
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	089b      	lsrs	r3, r3, #2
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d103      	bne.n	8006be0 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 feb6 	bl	800794a <I2C_SlaveReceive_RXNE>
 8006bde:	e014      	b.n	8006c0a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	089b      	lsrs	r3, r3, #2
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00e      	beq.n	8006c0a <HAL_I2C_EV_IRQHandler+0x2c6>
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	0a5b      	lsrs	r3, r3, #9
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fee4 	bl	80079c6 <I2C_SlaveReceive_BTF>
 8006bfe:	e004      	b.n	8006c0a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8006c00:	bf00      	nop
 8006c02:	e002      	b.n	8006c0a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c04:	bf00      	nop
 8006c06:	e000      	b.n	8006c0a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c08:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006c0a:	3720      	adds	r7, #32
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	; 0x28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c32:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	0a1b      	lsrs	r3, r3, #8
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00e      	beq.n	8006c5e <HAL_I2C_ER_IRQHandler+0x4e>
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	0a1b      	lsrs	r3, r3, #8
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d008      	beq.n	8006c5e <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	f043 0301 	orr.w	r3, r3, #1
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c5c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	0a5b      	lsrs	r3, r3, #9
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00e      	beq.n	8006c88 <HAL_I2C_ER_IRQHandler+0x78>
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	0a1b      	lsrs	r3, r3, #8
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d008      	beq.n	8006c88 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	f043 0302 	orr.w	r3, r3, #2
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006c86:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	0a9b      	lsrs	r3, r3, #10
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d03f      	beq.n	8006d14 <HAL_I2C_ER_IRQHandler+0x104>
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	0a1b      	lsrs	r3, r3, #8
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d039      	beq.n	8006d14 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006ca0:	7efb      	ldrb	r3, [r7, #27]
 8006ca2:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006cba:	7ebb      	ldrb	r3, [r7, #26]
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d112      	bne.n	8006ce6 <HAL_I2C_ER_IRQHandler+0xd6>
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10f      	bne.n	8006ce6 <HAL_I2C_ER_IRQHandler+0xd6>
 8006cc6:	7cfb      	ldrb	r3, [r7, #19]
 8006cc8:	2b21      	cmp	r3, #33	; 0x21
 8006cca:	d008      	beq.n	8006cde <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006ccc:	7cfb      	ldrb	r3, [r7, #19]
 8006cce:	2b29      	cmp	r3, #41	; 0x29
 8006cd0:	d005      	beq.n	8006cde <HAL_I2C_ER_IRQHandler+0xce>
 8006cd2:	7cfb      	ldrb	r3, [r7, #19]
 8006cd4:	2b28      	cmp	r3, #40	; 0x28
 8006cd6:	d106      	bne.n	8006ce6 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b21      	cmp	r3, #33	; 0x21
 8006cdc:	d103      	bne.n	8006ce6 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f001 f808 	bl	8007cf4 <I2C_Slave_AF>
 8006ce4:	e016      	b.n	8006d14 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cee:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	f043 0304 	orr.w	r3, r3, #4
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006cf8:	7efb      	ldrb	r3, [r7, #27]
 8006cfa:	2b10      	cmp	r3, #16
 8006cfc:	d002      	beq.n	8006d04 <HAL_I2C_ER_IRQHandler+0xf4>
 8006cfe:	7efb      	ldrb	r3, [r7, #27]
 8006d00:	2b40      	cmp	r3, #64	; 0x40
 8006d02:	d107      	bne.n	8006d14 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d12:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	0adb      	lsrs	r3, r3, #11
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00e      	beq.n	8006d3e <HAL_I2C_ER_IRQHandler+0x12e>
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	0a1b      	lsrs	r3, r3, #8
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d008      	beq.n	8006d3e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	f043 0308 	orr.w	r3, r3, #8
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006d3c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d008      	beq.n	8006d56 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 f83f 	bl	8007dd4 <I2C_ITError>
  }
}
 8006d56:	bf00      	nop
 8006d58:	3728      	adds	r7, #40	; 0x28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	460b      	mov	r3, r1
 8006db8:	70fb      	strb	r3, [r7, #3]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006dbe:	bf00      	nop
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b083      	sub	sp, #12
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b084      	sub	sp, #16
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e3c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e44:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d150      	bne.n	8006ef6 <I2C_MasterTransmit_TXE+0xc8>
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
 8006e56:	2b21      	cmp	r3, #33	; 0x21
 8006e58:	d14d      	bne.n	8006ef6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b08      	cmp	r3, #8
 8006e5e:	d01d      	beq.n	8006e9c <I2C_MasterTransmit_TXE+0x6e>
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d01a      	beq.n	8006e9c <I2C_MasterTransmit_TXE+0x6e>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e6c:	d016      	beq.n	8006e9c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e7c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2211      	movs	r2, #17
 8006e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff ff62 	bl	8006d5e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e9a:	e060      	b.n	8006f5e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006eaa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eba:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b40      	cmp	r3, #64	; 0x40
 8006ed4:	d107      	bne.n	8006ee6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff ff7d 	bl	8006dde <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ee4:	e03b      	b.n	8006f5e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff ff35 	bl	8006d5e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ef4:	e033      	b.n	8006f5e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	2b21      	cmp	r3, #33	; 0x21
 8006efa:	d005      	beq.n	8006f08 <I2C_MasterTransmit_TXE+0xda>
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	2b40      	cmp	r3, #64	; 0x40
 8006f00:	d12d      	bne.n	8006f5e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	2b22      	cmp	r3, #34	; 0x22
 8006f06:	d12a      	bne.n	8006f5e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d108      	bne.n	8006f24 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f20:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006f22:	e01c      	b.n	8006f5e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b40      	cmp	r3, #64	; 0x40
 8006f2e:	d103      	bne.n	8006f38 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f898 	bl	8007066 <I2C_MemoryTransmit_TXE_BTF>
}
 8006f36:	e012      	b.n	8006f5e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	781a      	ldrb	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	3b01      	subs	r3, #1
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f5c:	e7ff      	b.n	8006f5e <I2C_MasterTransmit_TXE+0x130>
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b084      	sub	sp, #16
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f72:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b21      	cmp	r3, #33	; 0x21
 8006f7e:	d165      	bne.n	800704c <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d012      	beq.n	8006fb0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	781a      	ldrb	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006fae:	e056      	b.n	800705e <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b08      	cmp	r3, #8
 8006fb4:	d01d      	beq.n	8006ff2 <I2C_MasterTransmit_BTF+0x8c>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	d01a      	beq.n	8006ff2 <I2C_MasterTransmit_BTF+0x8c>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fc2:	d016      	beq.n	8006ff2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fd2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2211      	movs	r2, #17
 8006fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7ff feb7 	bl	8006d5e <HAL_I2C_MasterTxCpltCallback>
}
 8006ff0:	e035      	b.n	800705e <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007000:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007010:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b40      	cmp	r3, #64	; 0x40
 800702a:	d107      	bne.n	800703c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff fed2 	bl	8006dde <HAL_I2C_MemTxCpltCallback>
}
 800703a:	e010      	b.n	800705e <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff fe8a 	bl	8006d5e <HAL_I2C_MasterTxCpltCallback>
}
 800704a:	e008      	b.n	800705e <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b40      	cmp	r3, #64	; 0x40
 8007056:	d102      	bne.n	800705e <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f804 	bl	8007066 <I2C_MemoryTransmit_TXE_BTF>
}
 800705e:	bf00      	nop
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007072:	2b00      	cmp	r3, #0
 8007074:	d11d      	bne.n	80070b2 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707a:	2b01      	cmp	r3, #1
 800707c:	d10b      	bne.n	8007096 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007082:	b2da      	uxtb	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708e:	1c9a      	adds	r2, r3, #2
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007094:	e048      	b.n	8007128 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800709a:	b29b      	uxth	r3, r3
 800709c:	121b      	asrs	r3, r3, #8
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070b0:	e03a      	b.n	8007128 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d10b      	bne.n	80070d2 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070d0:	e02a      	b.n	8007128 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d126      	bne.n	8007128 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b22      	cmp	r3, #34	; 0x22
 80070e4:	d108      	bne.n	80070f8 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070f4:	601a      	str	r2, [r3, #0]
}
 80070f6:	e017      	b.n	8007128 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b21      	cmp	r3, #33	; 0x21
 8007102:	d111      	bne.n	8007128 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	781a      	ldrb	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b22      	cmp	r3, #34	; 0x22
 8007146:	d173      	bne.n	8007230 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800714c:	b29b      	uxth	r3, r3
 800714e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b03      	cmp	r3, #3
 8007154:	d920      	bls.n	8007198 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	b2d2      	uxtb	r2, r2
 8007162:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007172:	b29b      	uxth	r3, r3
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b03      	cmp	r3, #3
 8007184:	d154      	bne.n	8007230 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007194:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007196:	e04b      	b.n	8007230 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	2b02      	cmp	r3, #2
 800719e:	d047      	beq.n	8007230 <I2C_MasterReceive_RXNE+0xfc>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d002      	beq.n	80071ac <I2C_MasterReceive_RXNE+0x78>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d141      	bne.n	8007230 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ba:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071ca:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691a      	ldr	r2, [r3, #16]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	3b01      	subs	r3, #1
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b40      	cmp	r3, #64	; 0x40
 8007204:	d10a      	bne.n	800721c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff fdec 	bl	8006df2 <HAL_I2C_MemRxCpltCallback>
}
 800721a:	e009      	b.n	8007230 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2212      	movs	r2, #18
 8007228:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff fda1 	bl	8006d72 <HAL_I2C_MasterRxCpltCallback>
}
 8007230:	bf00      	nop
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724a:	b29b      	uxth	r3, r3
 800724c:	2b04      	cmp	r3, #4
 800724e:	d11b      	bne.n	8007288 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800725e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727c:	b29b      	uxth	r3, r3
 800727e:	3b01      	subs	r3, #1
 8007280:	b29a      	uxth	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007286:	e0bd      	b.n	8007404 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b03      	cmp	r3, #3
 8007290:	d129      	bne.n	80072e6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d00a      	beq.n	80072be <I2C_MasterReceive_BTF+0x86>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d007      	beq.n	80072be <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072bc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691a      	ldr	r2, [r3, #16]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	b2d2      	uxtb	r2, r2
 80072ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072da:	b29b      	uxth	r3, r3
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80072e4:	e08e      	b.n	8007404 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d176      	bne.n	80073de <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d002      	beq.n	80072fc <I2C_MasterReceive_BTF+0xc4>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b10      	cmp	r3, #16
 80072fa:	d108      	bne.n	800730e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	e019      	b.n	8007342 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2b04      	cmp	r3, #4
 8007312:	d002      	beq.n	800731a <I2C_MasterReceive_BTF+0xe2>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b02      	cmp	r3, #2
 8007318:	d108      	bne.n	800732c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	e00a      	b.n	8007342 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b10      	cmp	r3, #16
 8007330:	d007      	beq.n	8007342 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007340:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	b2d2      	uxtb	r2, r2
 800734e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735e:	b29b      	uxth	r3, r3
 8007360:	3b01      	subs	r3, #1
 8007362:	b29a      	uxth	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	691a      	ldr	r2, [r3, #16]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800739c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b40      	cmp	r3, #64	; 0x40
 80073b0:	d10a      	bne.n	80073c8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff fd16 	bl	8006df2 <HAL_I2C_MemRxCpltCallback>
}
 80073c6:	e01d      	b.n	8007404 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2212      	movs	r2, #18
 80073d4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7ff fccb 	bl	8006d72 <HAL_I2C_MasterRxCpltCallback>
}
 80073dc:	e012      	b.n	8007404 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	b2d2      	uxtb	r2, r2
 80073ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b40      	cmp	r3, #64	; 0x40
 800741e:	d117      	bne.n	8007450 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007424:	2b00      	cmp	r3, #0
 8007426:	d109      	bne.n	800743c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742c:	b2db      	uxtb	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007438:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800743a:	e067      	b.n	800750c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007440:	b2db      	uxtb	r3, r3
 8007442:	f043 0301 	orr.w	r3, r3, #1
 8007446:	b2da      	uxtb	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	611a      	str	r2, [r3, #16]
}
 800744e:	e05d      	b.n	800750c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007458:	d133      	bne.n	80074c2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b21      	cmp	r3, #33	; 0x21
 8007464:	d109      	bne.n	800747a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800746a:	b2db      	uxtb	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007476:	611a      	str	r2, [r3, #16]
 8007478:	e008      	b.n	800748c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800747e:	b2db      	uxtb	r3, r3
 8007480:	f043 0301 	orr.w	r3, r3, #1
 8007484:	b2da      	uxtb	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007490:	2b00      	cmp	r3, #0
 8007492:	d004      	beq.n	800749e <I2C_Master_SB+0x92>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d108      	bne.n	80074b0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d032      	beq.n	800750c <I2C_Master_SB+0x100>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d02d      	beq.n	800750c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074be:	605a      	str	r2, [r3, #4]
}
 80074c0:	e024      	b.n	800750c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10e      	bne.n	80074e8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	11db      	asrs	r3, r3, #7
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f003 0306 	and.w	r3, r3, #6
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	f063 030f 	orn	r3, r3, #15
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	611a      	str	r2, [r3, #16]
}
 80074e6:	e011      	b.n	800750c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d10d      	bne.n	800750c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	11db      	asrs	r3, r3, #7
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	f003 0306 	and.w	r3, r3, #6
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	f063 030e 	orn	r3, r3, #14
 8007504:	b2da      	uxtb	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	611a      	str	r2, [r3, #16]
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007524:	b2da      	uxtb	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007530:	2b00      	cmp	r3, #0
 8007532:	d103      	bne.n	800753c <I2C_Master_ADD10+0x24>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	2b00      	cmp	r3, #0
 800753a:	d011      	beq.n	8007560 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007542:	2b00      	cmp	r3, #0
 8007544:	d104      	bne.n	8007550 <I2C_Master_ADD10+0x38>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754c:	2b00      	cmp	r3, #0
 800754e:	d007      	beq.n	8007560 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800755e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800756c:	b480      	push	{r7}
 800756e:	b091      	sub	sp, #68	; 0x44
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800757a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b22      	cmp	r3, #34	; 0x22
 8007594:	f040 8169 	bne.w	800786a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10f      	bne.n	80075c0 <I2C_Master_ADDR+0x54>
 80075a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80075a4:	2b40      	cmp	r3, #64	; 0x40
 80075a6:	d10b      	bne.n	80075c0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075a8:	2300      	movs	r3, #0
 80075aa:	633b      	str	r3, [r7, #48]	; 0x30
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	633b      	str	r3, [r7, #48]	; 0x30
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	633b      	str	r3, [r7, #48]	; 0x30
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	e160      	b.n	8007882 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d11d      	bne.n	8007604 <I2C_Master_ADDR+0x98>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80075d0:	d118      	bne.n	8007604 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075d2:	2300      	movs	r3, #0
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075f6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	651a      	str	r2, [r3, #80]	; 0x50
 8007602:	e13e      	b.n	8007882 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007608:	b29b      	uxth	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d113      	bne.n	8007636 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800760e:	2300      	movs	r3, #0
 8007610:	62bb      	str	r3, [r7, #40]	; 0x28
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	62bb      	str	r3, [r7, #40]	; 0x28
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	e115      	b.n	8007862 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b01      	cmp	r3, #1
 800763e:	f040 808a 	bne.w	8007756 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007644:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007648:	d137      	bne.n	80076ba <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007658:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007668:	d113      	bne.n	8007692 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007678:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800767a:	2300      	movs	r3, #0
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	e0e7      	b.n	8007862 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007692:	2300      	movs	r3, #0
 8007694:	623b      	str	r3, [r7, #32]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	623b      	str	r3, [r7, #32]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	623b      	str	r3, [r7, #32]
 80076a6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	e0d3      	b.n	8007862 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80076ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d02e      	beq.n	800771e <I2C_Master_ADDR+0x1b2>
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	d02b      	beq.n	800771e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80076c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c8:	2b12      	cmp	r3, #18
 80076ca:	d102      	bne.n	80076d2 <I2C_Master_ADDR+0x166>
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d125      	bne.n	800771e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80076d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d4:	2b04      	cmp	r3, #4
 80076d6:	d00e      	beq.n	80076f6 <I2C_Master_ADDR+0x18a>
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d00b      	beq.n	80076f6 <I2C_Master_ADDR+0x18a>
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	2b10      	cmp	r3, #16
 80076e2:	d008      	beq.n	80076f6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	e007      	b.n	8007706 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007704:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007706:	2300      	movs	r3, #0
 8007708:	61fb      	str	r3, [r7, #28]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	61fb      	str	r3, [r7, #28]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	61fb      	str	r3, [r7, #28]
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	e0a1      	b.n	8007862 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800772c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800772e:	2300      	movs	r3, #0
 8007730:	61bb      	str	r3, [r7, #24]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	61bb      	str	r3, [r7, #24]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	61bb      	str	r3, [r7, #24]
 8007742:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	e085      	b.n	8007862 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b02      	cmp	r3, #2
 800775e:	d14d      	bne.n	80077fc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007762:	2b04      	cmp	r3, #4
 8007764:	d016      	beq.n	8007794 <I2C_Master_ADDR+0x228>
 8007766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007768:	2b02      	cmp	r3, #2
 800776a:	d013      	beq.n	8007794 <I2C_Master_ADDR+0x228>
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	2b10      	cmp	r3, #16
 8007770:	d010      	beq.n	8007794 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007780:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	e007      	b.n	80077a4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077a2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b2:	d117      	bne.n	80077e4 <I2C_Master_ADDR+0x278>
 80077b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077ba:	d00b      	beq.n	80077d4 <I2C_Master_ADDR+0x268>
 80077bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d008      	beq.n	80077d4 <I2C_Master_ADDR+0x268>
 80077c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	d005      	beq.n	80077d4 <I2C_Master_ADDR+0x268>
 80077c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ca:	2b10      	cmp	r3, #16
 80077cc:	d002      	beq.n	80077d4 <I2C_Master_ADDR+0x268>
 80077ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d0:	2b20      	cmp	r3, #32
 80077d2:	d107      	bne.n	80077e4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077e2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	e032      	b.n	8007862 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800780a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800781a:	d117      	bne.n	800784c <I2C_Master_ADDR+0x2e0>
 800781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007822:	d00b      	beq.n	800783c <I2C_Master_ADDR+0x2d0>
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	2b01      	cmp	r3, #1
 8007828:	d008      	beq.n	800783c <I2C_Master_ADDR+0x2d0>
 800782a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782c:	2b08      	cmp	r3, #8
 800782e:	d005      	beq.n	800783c <I2C_Master_ADDR+0x2d0>
 8007830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007832:	2b10      	cmp	r3, #16
 8007834:	d002      	beq.n	800783c <I2C_Master_ADDR+0x2d0>
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	2b20      	cmp	r3, #32
 800783a:	d107      	bne.n	800784c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800784a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800784c:	2300      	movs	r3, #0
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	613b      	str	r3, [r7, #16]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	613b      	str	r3, [r7, #16]
 8007860:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007868:	e00b      	b.n	8007882 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	60fb      	str	r3, [r7, #12]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	68fb      	ldr	r3, [r7, #12]
}
 8007880:	e7ff      	b.n	8007882 <I2C_Master_ADDR+0x316>
 8007882:	bf00      	nop
 8007884:	3744      	adds	r7, #68	; 0x44
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d02b      	beq.n	8007900 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d114      	bne.n	8007900 <I2C_SlaveTransmit_TXE+0x72>
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	2b29      	cmp	r3, #41	; 0x29
 80078da:	d111      	bne.n	8007900 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2221      	movs	r2, #33	; 0x21
 80078f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2228      	movs	r2, #40	; 0x28
 80078f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff fa43 	bl	8006d86 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007900:	bf00      	nop
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d011      	beq.n	800793e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007934:	b29b      	uxth	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007958:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d02c      	beq.n	80079be <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691a      	ldr	r2, [r3, #16]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007980:	b29b      	uxth	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798e:	b29b      	uxth	r3, r3
 8007990:	2b00      	cmp	r3, #0
 8007992:	d114      	bne.n	80079be <I2C_SlaveReceive_RXNE+0x74>
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	2b2a      	cmp	r3, #42	; 0x2a
 8007998:	d111      	bne.n	80079be <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2222      	movs	r2, #34	; 0x22
 80079ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2228      	movs	r2, #40	; 0x28
 80079b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff f9ee 	bl	8006d9a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80079be:	bf00      	nop
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d012      	beq.n	80079fe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	691a      	ldr	r2, [r3, #16]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e2:	b2d2      	uxtb	r2, r2
 80079e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a24:	2b28      	cmp	r3, #40	; 0x28
 8007a26:	d127      	bne.n	8007a78 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a36:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	089b      	lsrs	r3, r3, #2
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007a44:	2301      	movs	r3, #1
 8007a46:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	09db      	lsrs	r3, r3, #7
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d103      	bne.n	8007a5c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	81bb      	strh	r3, [r7, #12]
 8007a5a:	e002      	b.n	8007a62 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007a6a:	89ba      	ldrh	r2, [r7, #12]
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff f99c 	bl	8006dae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007a76:	e008      	b.n	8007a8a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f06f 0202 	mvn.w	r2, #2
 8007a80:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007a8a:	bf00      	nop
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ab2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60bb      	str	r3, [r7, #8]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	60bb      	str	r3, [r7, #8]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f042 0201 	orr.w	r2, r2, #1
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ae0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af0:	d172      	bne.n	8007bd8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	2b22      	cmp	r3, #34	; 0x22
 8007af6:	d002      	beq.n	8007afe <I2C_Slave_STOPF+0x6a>
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	2b2a      	cmp	r3, #42	; 0x2a
 8007afc:	d135      	bne.n	8007b6a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	f043 0204 	orr.w	r2, r3, #4
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b30:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe f9e4 	bl	8005f04 <HAL_DMA_GetState>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d049      	beq.n	8007bd6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b46:	4a69      	ldr	r2, [pc, #420]	; (8007cec <I2C_Slave_STOPF+0x258>)
 8007b48:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fe f82c 	bl	8005bac <HAL_DMA_Abort_IT>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d03d      	beq.n	8007bd6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b68:	e035      	b.n	8007bd6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	f043 0204 	orr.w	r2, r3, #4
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe f9ae 	bl	8005f04 <HAL_DMA_GetState>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d014      	beq.n	8007bd8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb2:	4a4e      	ldr	r2, [pc, #312]	; (8007cec <I2C_Slave_STOPF+0x258>)
 8007bb4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fd fff6 	bl	8005bac <HAL_DMA_Abort_IT>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d008      	beq.n	8007bd8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4798      	blx	r3
 8007bd4:	e000      	b.n	8007bd8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bd6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d03e      	beq.n	8007c60 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d112      	bne.n	8007c16 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691a      	ldr	r2, [r3, #16]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c20:	2b40      	cmp	r3, #64	; 0x40
 8007c22:	d112      	bne.n	8007c4a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	691a      	ldr	r2, [r3, #16]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	f043 0204 	orr.w	r2, r3, #4
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d003      	beq.n	8007c70 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f8b3 	bl	8007dd4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007c6e:	e039      	b.n	8007ce4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	2b2a      	cmp	r3, #42	; 0x2a
 8007c74:	d109      	bne.n	8007c8a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2228      	movs	r2, #40	; 0x28
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff f888 	bl	8006d9a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b28      	cmp	r3, #40	; 0x28
 8007c94:	d111      	bne.n	8007cba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a15      	ldr	r2, [pc, #84]	; (8007cf0 <I2C_Slave_STOPF+0x25c>)
 8007c9a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7ff f889 	bl	8006dca <HAL_I2C_ListenCpltCallback>
}
 8007cb8:	e014      	b.n	8007ce4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbe:	2b22      	cmp	r3, #34	; 0x22
 8007cc0:	d002      	beq.n	8007cc8 <I2C_Slave_STOPF+0x234>
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	2b22      	cmp	r3, #34	; 0x22
 8007cc6:	d10d      	bne.n	8007ce4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff f85b 	bl	8006d9a <HAL_I2C_SlaveRxCpltCallback>
}
 8007ce4:	bf00      	nop
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	08008135 	.word	0x08008135
 8007cf0:	ffff0000 	.word	0xffff0000

08007cf4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d02:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	d002      	beq.n	8007d16 <I2C_Slave_AF+0x22>
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	d129      	bne.n	8007d6a <I2C_Slave_AF+0x76>
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	2b28      	cmp	r3, #40	; 0x28
 8007d1a:	d126      	bne.n	8007d6a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a2c      	ldr	r2, [pc, #176]	; (8007dd0 <I2C_Slave_AF+0xdc>)
 8007d20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d30:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d3a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d4a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7ff f831 	bl	8006dca <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007d68:	e02e      	b.n	8007dc8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	2b21      	cmp	r3, #33	; 0x21
 8007d6e:	d126      	bne.n	8007dbe <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a17      	ldr	r2, [pc, #92]	; (8007dd0 <I2C_Slave_AF+0xdc>)
 8007d74:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2221      	movs	r2, #33	; 0x21
 8007d7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d9a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007da4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007db4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7fe ffe5 	bl	8006d86 <HAL_I2C_SlaveTxCpltCallback>
}
 8007dbc:	e004      	b.n	8007dc8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007dc6:	615a      	str	r2, [r3, #20]
}
 8007dc8:	bf00      	nop
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	ffff0000 	.word	0xffff0000

08007dd4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b10      	cmp	r3, #16
 8007dee:	d10a      	bne.n	8007e06 <I2C_ITError+0x32>
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	2b22      	cmp	r3, #34	; 0x22
 8007df4:	d107      	bne.n	8007e06 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e04:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e0c:	2b28      	cmp	r3, #40	; 0x28
 8007e0e:	d107      	bne.n	8007e20 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2228      	movs	r2, #40	; 0x28
 8007e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e1e:	e015      	b.n	8007e4c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e2e:	d006      	beq.n	8007e3e <I2C_ITError+0x6a>
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	2b60      	cmp	r3, #96	; 0x60
 8007e34:	d003      	beq.n	8007e3e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e5a:	d162      	bne.n	8007f22 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e6a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d020      	beq.n	8007ebc <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7e:	4a6a      	ldr	r2, [pc, #424]	; (8008028 <I2C_ITError+0x254>)
 8007e80:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fd fe90 	bl	8005bac <HAL_DMA_Abort_IT>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 8089 	beq.w	8007fa6 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0201 	bic.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	4798      	blx	r3
 8007eba:	e074      	b.n	8007fa6 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec0:	4a59      	ldr	r2, [pc, #356]	; (8008028 <I2C_ITError+0x254>)
 8007ec2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fd fe6f 	bl	8005bac <HAL_DMA_Abort_IT>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d068      	beq.n	8007fa6 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ede:	2b40      	cmp	r3, #64	; 0x40
 8007ee0:	d10b      	bne.n	8007efa <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	691a      	ldr	r2, [r3, #16]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	b2d2      	uxtb	r2, r2
 8007eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0201 	bic.w	r2, r2, #1
 8007f08:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	4798      	blx	r3
 8007f20:	e041      	b.n	8007fa6 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b60      	cmp	r3, #96	; 0x60
 8007f2c:	d125      	bne.n	8007f7a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f46:	2b40      	cmp	r3, #64	; 0x40
 8007f48:	d10b      	bne.n	8007f62 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	b2d2      	uxtb	r2, r2
 8007f56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0201 	bic.w	r2, r2, #1
 8007f70:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7fe ff51 	bl	8006e1a <HAL_I2C_AbortCpltCallback>
 8007f78:	e015      	b.n	8007fa6 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f84:	2b40      	cmp	r3, #64	; 0x40
 8007f86:	d10b      	bne.n	8007fa0 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	691a      	ldr	r2, [r3, #16]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	b2d2      	uxtb	r2, r2
 8007f94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	1c5a      	adds	r2, r3, #1
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7fe ff30 	bl	8006e06 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10e      	bne.n	8007fd4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d109      	bne.n	8007fd4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d104      	bne.n	8007fd4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d007      	beq.n	8007fe4 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fe2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d113      	bne.n	8008020 <I2C_ITError+0x24c>
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	2b28      	cmp	r3, #40	; 0x28
 8007ffc:	d110      	bne.n	8008020 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a0a      	ldr	r2, [pc, #40]	; (800802c <I2C_ITError+0x258>)
 8008002:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2220      	movs	r2, #32
 800800e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7fe fed5 	bl	8006dca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008020:	bf00      	nop
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	08008135 	.word	0x08008135
 800802c:	ffff0000 	.word	0xffff0000

08008030 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b088      	sub	sp, #32
 8008034:	af02      	add	r7, sp, #8
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	607a      	str	r2, [r7, #4]
 800803a:	603b      	str	r3, [r7, #0]
 800803c:	460b      	mov	r3, r1
 800803e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2b08      	cmp	r3, #8
 800804a:	d006      	beq.n	800805a <I2C_MasterRequestWrite+0x2a>
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d003      	beq.n	800805a <I2C_MasterRequestWrite+0x2a>
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008058:	d108      	bne.n	800806c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	e00b      	b.n	8008084 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008070:	2b12      	cmp	r3, #18
 8008072:	d107      	bne.n	8008084 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008082:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 f8ce 	bl	8008232 <I2C_WaitOnFlagUntilTimeout>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00c      	beq.n	80080b6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e035      	b.n	8008122 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080be:	d108      	bne.n	80080d2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80080c0:	897b      	ldrh	r3, [r7, #10]
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	461a      	mov	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80080ce:	611a      	str	r2, [r3, #16]
 80080d0:	e01b      	b.n	800810a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80080d2:	897b      	ldrh	r3, [r7, #10]
 80080d4:	11db      	asrs	r3, r3, #7
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	f003 0306 	and.w	r3, r3, #6
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	f063 030f 	orn	r3, r3, #15
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	490f      	ldr	r1, [pc, #60]	; (800812c <I2C_MasterRequestWrite+0xfc>)
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 f8f5 	bl	80082e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e010      	b.n	8008122 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008100:	897b      	ldrh	r3, [r7, #10]
 8008102:	b2da      	uxtb	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	4908      	ldr	r1, [pc, #32]	; (8008130 <I2C_MasterRequestWrite+0x100>)
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 f8e5 	bl	80082e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e000      	b.n	8008122 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	00010008 	.word	0x00010008
 8008130:	00010002 	.word	0x00010002

08008134 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008140:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008148:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008156:	2200      	movs	r2, #0
 8008158:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	2200      	movs	r2, #0
 8008168:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008178:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818c:	2200      	movs	r2, #0
 800818e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819c:	2200      	movs	r2, #0
 800819e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 0201 	bic.w	r2, r2, #1
 80081ae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b60      	cmp	r3, #96	; 0x60
 80081ba:	d10e      	bne.n	80081da <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2220      	movs	r2, #32
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f7fe fe21 	bl	8006e1a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80081d8:	e027      	b.n	800822a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80081da:	7afb      	ldrb	r3, [r7, #11]
 80081dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081e0:	2b28      	cmp	r3, #40	; 0x28
 80081e2:	d117      	bne.n	8008214 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f042 0201 	orr.w	r2, r2, #1
 80081f2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008202:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2228      	movs	r2, #40	; 0x28
 800820e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008212:	e007      	b.n	8008224 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2220      	movs	r2, #32
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7fe fdee 	bl	8006e06 <HAL_I2C_ErrorCallback>
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	603b      	str	r3, [r7, #0]
 800823e:	4613      	mov	r3, r2
 8008240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008242:	e025      	b.n	8008290 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824a:	d021      	beq.n	8008290 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800824c:	f7fc fbc8 	bl	80049e0 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	429a      	cmp	r2, r3
 800825a:	d302      	bcc.n	8008262 <I2C_WaitOnFlagUntilTimeout+0x30>
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d116      	bne.n	8008290 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2220      	movs	r2, #32
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827c:	f043 0220 	orr.w	r2, r3, #32
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e023      	b.n	80082d8 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	0c1b      	lsrs	r3, r3, #16
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b01      	cmp	r3, #1
 8008298:	d10d      	bne.n	80082b6 <I2C_WaitOnFlagUntilTimeout+0x84>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	43da      	mvns	r2, r3
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	4013      	ands	r3, r2
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	bf0c      	ite	eq
 80082ac:	2301      	moveq	r3, #1
 80082ae:	2300      	movne	r3, #0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	461a      	mov	r2, r3
 80082b4:	e00c      	b.n	80082d0 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	43da      	mvns	r2, r3
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	4013      	ands	r3, r2
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bf0c      	ite	eq
 80082c8:	2301      	moveq	r3, #1
 80082ca:	2300      	movne	r3, #0
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	461a      	mov	r2, r3
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d0b6      	beq.n	8008244 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082ee:	e051      	b.n	8008394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082fe:	d123      	bne.n	8008348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800830e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008318:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2220      	movs	r2, #32
 8008324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	f043 0204 	orr.w	r2, r3, #4
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e046      	b.n	80083d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834e:	d021      	beq.n	8008394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008350:	f7fc fb46 	bl	80049e0 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	429a      	cmp	r2, r3
 800835e:	d302      	bcc.n	8008366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d116      	bne.n	8008394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2220      	movs	r2, #32
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008380:	f043 0220 	orr.w	r2, r3, #32
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e020      	b.n	80083d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	0c1b      	lsrs	r3, r3, #16
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b01      	cmp	r3, #1
 800839c:	d10c      	bne.n	80083b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	43da      	mvns	r2, r3
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	4013      	ands	r3, r2
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	bf14      	ite	ne
 80083b0:	2301      	movne	r3, #1
 80083b2:	2300      	moveq	r3, #0
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	e00b      	b.n	80083d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	43da      	mvns	r2, r3
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	4013      	ands	r3, r2
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	bf14      	ite	ne
 80083ca:	2301      	movne	r3, #1
 80083cc:	2300      	moveq	r3, #0
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d18d      	bne.n	80082f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	60f8      	str	r0, [r7, #12]
 80083e6:	60b9      	str	r1, [r7, #8]
 80083e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083ea:	e02d      	b.n	8008448 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 f878 	bl	80084e2 <I2C_IsAcknowledgeFailed>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e02d      	b.n	8008458 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008402:	d021      	beq.n	8008448 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008404:	f7fc faec 	bl	80049e0 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	429a      	cmp	r2, r3
 8008412:	d302      	bcc.n	800841a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d116      	bne.n	8008448 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2220      	movs	r2, #32
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008434:	f043 0220 	orr.w	r2, r3, #32
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e007      	b.n	8008458 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008452:	2b80      	cmp	r3, #128	; 0x80
 8008454:	d1ca      	bne.n	80083ec <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800846c:	e02d      	b.n	80084ca <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 f837 	bl	80084e2 <I2C_IsAcknowledgeFailed>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e02d      	b.n	80084da <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008484:	d021      	beq.n	80084ca <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008486:	f7fc faab 	bl	80049e0 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	429a      	cmp	r2, r3
 8008494:	d302      	bcc.n	800849c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d116      	bne.n	80084ca <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	f043 0220 	orr.w	r2, r3, #32
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e007      	b.n	80084da <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	f003 0304 	and.w	r3, r3, #4
 80084d4:	2b04      	cmp	r3, #4
 80084d6:	d1ca      	bne.n	800846e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084f8:	d11b      	bne.n	8008532 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008502:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2220      	movs	r2, #32
 800850e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851e:	f043 0204 	orr.w	r2, r3, #4
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e000      	b.n	8008534 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008550:	d103      	bne.n	800855a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008558:	e007      	b.n	800856a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008562:	d102      	bne.n	800856a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2208      	movs	r2, #8
 8008568:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
	...

08008578 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e128      	b.n	80087dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d109      	bne.n	80085aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a90      	ldr	r2, [pc, #576]	; (80087e4 <HAL_I2S_Init+0x26c>)
 80085a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7fb fea5 	bl	80042f4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2202      	movs	r2, #2
 80085ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	6812      	ldr	r2, [r2, #0]
 80085bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80085c0:	f023 030f 	bic.w	r3, r3, #15
 80085c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2202      	movs	r2, #2
 80085cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d060      	beq.n	8008698 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d102      	bne.n	80085e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80085de:	2310      	movs	r3, #16
 80085e0:	617b      	str	r3, [r7, #20]
 80085e2:	e001      	b.n	80085e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80085e4:	2320      	movs	r3, #32
 80085e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	2b20      	cmp	r3, #32
 80085ee:	d802      	bhi.n	80085f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	005b      	lsls	r3, r3, #1
 80085f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80085f6:	2001      	movs	r0, #1
 80085f8:	f001 f9a2 	bl	8009940 <HAL_RCCEx_GetPeriphCLKFreq>
 80085fc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008606:	d125      	bne.n	8008654 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d010      	beq.n	8008632 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	fbb2 f2f3 	udiv	r2, r2, r3
 800861a:	4613      	mov	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	005b      	lsls	r3, r3, #1
 8008622:	461a      	mov	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	fbb2 f3f3 	udiv	r3, r2, r3
 800862c:	3305      	adds	r3, #5
 800862e:	613b      	str	r3, [r7, #16]
 8008630:	e01f      	b.n	8008672 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	fbb2 f2f3 	udiv	r2, r2, r3
 800863c:	4613      	mov	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	005b      	lsls	r3, r3, #1
 8008644:	461a      	mov	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	fbb2 f3f3 	udiv	r3, r2, r3
 800864e:	3305      	adds	r3, #5
 8008650:	613b      	str	r3, [r7, #16]
 8008652:	e00e      	b.n	8008672 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	fbb2 f2f3 	udiv	r2, r2, r3
 800865c:	4613      	mov	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	461a      	mov	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	fbb2 f3f3 	udiv	r3, r2, r3
 800866e:	3305      	adds	r3, #5
 8008670:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	4a5c      	ldr	r2, [pc, #368]	; (80087e8 <HAL_I2S_Init+0x270>)
 8008676:	fba2 2303 	umull	r2, r3, r2, r3
 800867a:	08db      	lsrs	r3, r3, #3
 800867c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	085b      	lsrs	r3, r3, #1
 800868e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	021b      	lsls	r3, r3, #8
 8008694:	61bb      	str	r3, [r7, #24]
 8008696:	e003      	b.n	80086a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008698:	2302      	movs	r3, #2
 800869a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d902      	bls.n	80086ac <HAL_I2S_Init+0x134>
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	2bff      	cmp	r3, #255	; 0xff
 80086aa:	d907      	bls.n	80086bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b0:	f043 0210 	orr.w	r2, r3, #16
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e08f      	b.n	80087dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	691a      	ldr	r2, [r3, #16]
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	ea42 0103 	orr.w	r1, r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	430a      	orrs	r2, r1
 80086ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80086da:	f023 030f 	bic.w	r3, r3, #15
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	6851      	ldr	r1, [r2, #4]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	6892      	ldr	r2, [r2, #8]
 80086e6:	4311      	orrs	r1, r2
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	68d2      	ldr	r2, [r2, #12]
 80086ec:	4311      	orrs	r1, r2
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6992      	ldr	r2, [r2, #24]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	431a      	orrs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d161      	bne.n	80087cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a38      	ldr	r2, [pc, #224]	; (80087ec <HAL_I2S_Init+0x274>)
 800870c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a37      	ldr	r2, [pc, #220]	; (80087f0 <HAL_I2S_Init+0x278>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d101      	bne.n	800871c <HAL_I2S_Init+0x1a4>
 8008718:	4b36      	ldr	r3, [pc, #216]	; (80087f4 <HAL_I2S_Init+0x27c>)
 800871a:	e001      	b.n	8008720 <HAL_I2S_Init+0x1a8>
 800871c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	4932      	ldr	r1, [pc, #200]	; (80087f0 <HAL_I2S_Init+0x278>)
 8008728:	428a      	cmp	r2, r1
 800872a:	d101      	bne.n	8008730 <HAL_I2S_Init+0x1b8>
 800872c:	4a31      	ldr	r2, [pc, #196]	; (80087f4 <HAL_I2S_Init+0x27c>)
 800872e:	e001      	b.n	8008734 <HAL_I2S_Init+0x1bc>
 8008730:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8008734:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008738:	f023 030f 	bic.w	r3, r3, #15
 800873c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a2b      	ldr	r2, [pc, #172]	; (80087f0 <HAL_I2S_Init+0x278>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d101      	bne.n	800874c <HAL_I2S_Init+0x1d4>
 8008748:	4b2a      	ldr	r3, [pc, #168]	; (80087f4 <HAL_I2S_Init+0x27c>)
 800874a:	e001      	b.n	8008750 <HAL_I2S_Init+0x1d8>
 800874c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008750:	2202      	movs	r2, #2
 8008752:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a25      	ldr	r2, [pc, #148]	; (80087f0 <HAL_I2S_Init+0x278>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d101      	bne.n	8008762 <HAL_I2S_Init+0x1ea>
 800875e:	4b25      	ldr	r3, [pc, #148]	; (80087f4 <HAL_I2S_Init+0x27c>)
 8008760:	e001      	b.n	8008766 <HAL_I2S_Init+0x1ee>
 8008762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008772:	d003      	beq.n	800877c <HAL_I2S_Init+0x204>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d103      	bne.n	8008784 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800877c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008780:	613b      	str	r3, [r7, #16]
 8008782:	e001      	b.n	8008788 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8008784:	2300      	movs	r3, #0
 8008786:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	b299      	uxth	r1, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800879e:	4303      	orrs	r3, r0
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	430b      	orrs	r3, r1
 80087a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80087a6:	4313      	orrs	r3, r2
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	897b      	ldrh	r3, [r7, #10]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80087b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a0d      	ldr	r2, [pc, #52]	; (80087f0 <HAL_I2S_Init+0x278>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d101      	bne.n	80087c4 <HAL_I2S_Init+0x24c>
 80087c0:	4b0c      	ldr	r3, [pc, #48]	; (80087f4 <HAL_I2S_Init+0x27c>)
 80087c2:	e001      	b.n	80087c8 <HAL_I2S_Init+0x250>
 80087c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80087c8:	897a      	ldrh	r2, [r7, #10]
 80087ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3720      	adds	r7, #32
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	080088ef 	.word	0x080088ef
 80087e8:	cccccccd 	.word	0xcccccccd
 80087ec:	08008a05 	.word	0x08008a05
 80087f0:	40003800 	.word	0x40003800
 80087f4:	40003400 	.word	0x40003400

080087f8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	881a      	ldrh	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	1c9a      	adds	r2, r3, #2
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008856:	b29b      	uxth	r3, r3
 8008858:	3b01      	subs	r3, #1
 800885a:	b29a      	uxth	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008864:	b29b      	uxth	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10e      	bne.n	8008888 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008878:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7ff ffb8 	bl	80087f8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a2:	b292      	uxth	r2, r2
 80088a4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088aa:	1c9a      	adds	r2, r3, #2
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	3b01      	subs	r3, #1
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10e      	bne.n	80088e6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80088d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff ff93 	bl	800880c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b086      	sub	sp, #24
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b04      	cmp	r3, #4
 8008908:	d13a      	bne.n	8008980 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b01      	cmp	r3, #1
 8008912:	d109      	bne.n	8008928 <I2S_IRQHandler+0x3a>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891e:	2b40      	cmp	r3, #64	; 0x40
 8008920:	d102      	bne.n	8008928 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff ffb4 	bl	8008890 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800892e:	2b40      	cmp	r3, #64	; 0x40
 8008930:	d126      	bne.n	8008980 <I2S_IRQHandler+0x92>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f003 0320 	and.w	r3, r3, #32
 800893c:	2b20      	cmp	r3, #32
 800893e:	d11f      	bne.n	8008980 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800894e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008950:	2300      	movs	r3, #0
 8008952:	613b      	str	r3, [r7, #16]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	613b      	str	r3, [r7, #16]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	613b      	str	r3, [r7, #16]
 8008964:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008972:	f043 0202 	orr.w	r2, r3, #2
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7ff ff50 	bl	8008820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b03      	cmp	r3, #3
 800898a:	d136      	bne.n	80089fa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b02      	cmp	r3, #2
 8008994:	d109      	bne.n	80089aa <I2S_IRQHandler+0xbc>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a0:	2b80      	cmp	r3, #128	; 0x80
 80089a2:	d102      	bne.n	80089aa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff ff45 	bl	8008834 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f003 0308 	and.w	r3, r3, #8
 80089b0:	2b08      	cmp	r3, #8
 80089b2:	d122      	bne.n	80089fa <I2S_IRQHandler+0x10c>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f003 0320 	and.w	r3, r3, #32
 80089be:	2b20      	cmp	r3, #32
 80089c0:	d11b      	bne.n	80089fa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80089d0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ec:	f043 0204 	orr.w	r2, r3, #4
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7ff ff13 	bl	8008820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80089fa:	bf00      	nop
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b088      	sub	sp, #32
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4aa2      	ldr	r2, [pc, #648]	; (8008ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d101      	bne.n	8008a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8008a1e:	4ba2      	ldr	r3, [pc, #648]	; (8008ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008a20:	e001      	b.n	8008a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8008a22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a9b      	ldr	r2, [pc, #620]	; (8008ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d101      	bne.n	8008a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8008a3c:	4b9a      	ldr	r3, [pc, #616]	; (8008ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008a3e:	e001      	b.n	8008a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8008a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a50:	d004      	beq.n	8008a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f040 8099 	bne.w	8008b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d107      	bne.n	8008a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f925 	bl	8008cc0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d107      	bne.n	8008a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d002      	beq.n	8008a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f9c8 	bl	8008e20 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a96:	2b40      	cmp	r3, #64	; 0x40
 8008a98:	d13a      	bne.n	8008b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f003 0320 	and.w	r3, r3, #32
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d035      	beq.n	8008b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a7e      	ldr	r2, [pc, #504]	; (8008ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d101      	bne.n	8008ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8008aae:	4b7e      	ldr	r3, [pc, #504]	; (8008ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008ab0:	e001      	b.n	8008ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8008ab2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4979      	ldr	r1, [pc, #484]	; (8008ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008abe:	428b      	cmp	r3, r1
 8008ac0:	d101      	bne.n	8008ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8008ac2:	4b79      	ldr	r3, [pc, #484]	; (8008ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008ac4:	e001      	b.n	8008aca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8008ac6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008aca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008ace:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008ade:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b02:	f043 0202 	orr.w	r2, r3, #2
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff fe88 	bl	8008820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	f003 0308 	and.w	r3, r3, #8
 8008b16:	2b08      	cmp	r3, #8
 8008b18:	f040 80be 	bne.w	8008c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	f003 0320 	and.w	r3, r3, #32
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 80b8 	beq.w	8008c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008b36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a59      	ldr	r2, [pc, #356]	; (8008ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d101      	bne.n	8008b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8008b42:	4b59      	ldr	r3, [pc, #356]	; (8008ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008b44:	e001      	b.n	8008b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8008b46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4954      	ldr	r1, [pc, #336]	; (8008ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008b52:	428b      	cmp	r3, r1
 8008b54:	d101      	bne.n	8008b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8008b56:	4b54      	ldr	r3, [pc, #336]	; (8008ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008b58:	e001      	b.n	8008b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8008b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008b62:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008b64:	2300      	movs	r3, #0
 8008b66:	60bb      	str	r3, [r7, #8]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	60bb      	str	r3, [r7, #8]
 8008b70:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7e:	f043 0204 	orr.w	r2, r3, #4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7ff fe4a 	bl	8008820 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008b8c:	e084      	b.n	8008c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d107      	bne.n	8008ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f8be 	bl	8008d24 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d107      	bne.n	8008bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f8fd 	bl	8008dbc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc8:	2b40      	cmp	r3, #64	; 0x40
 8008bca:	d12f      	bne.n	8008c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f003 0320 	and.w	r3, r3, #32
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d02a      	beq.n	8008c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008be4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a2e      	ldr	r2, [pc, #184]	; (8008ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d101      	bne.n	8008bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8008bf0:	4b2d      	ldr	r3, [pc, #180]	; (8008ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008bf2:	e001      	b.n	8008bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8008bf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4929      	ldr	r1, [pc, #164]	; (8008ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008c00:	428b      	cmp	r3, r1
 8008c02:	d101      	bne.n	8008c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8008c04:	4b28      	ldr	r3, [pc, #160]	; (8008ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008c06:	e001      	b.n	8008c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8008c08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008c10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1e:	f043 0202 	orr.w	r2, r3, #2
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff fdfa 	bl	8008820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	f003 0308 	and.w	r3, r3, #8
 8008c32:	2b08      	cmp	r3, #8
 8008c34:	d131      	bne.n	8008c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f003 0320 	and.w	r3, r3, #32
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d02c      	beq.n	8008c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a17      	ldr	r2, [pc, #92]	; (8008ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d101      	bne.n	8008c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8008c4a:	4b17      	ldr	r3, [pc, #92]	; (8008ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008c4c:	e001      	b.n	8008c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8008c4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4912      	ldr	r1, [pc, #72]	; (8008ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008c5a:	428b      	cmp	r3, r1
 8008c5c:	d101      	bne.n	8008c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8008c5e:	4b12      	ldr	r3, [pc, #72]	; (8008ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008c60:	e001      	b.n	8008c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8008c62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008c6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008c7a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c88:	f043 0204 	orr.w	r2, r3, #4
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff fdc5 	bl	8008820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008c96:	e000      	b.n	8008c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008c98:	bf00      	nop
}
 8008c9a:	bf00      	nop
 8008c9c:	3720      	adds	r7, #32
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	40003800 	.word	0x40003800
 8008ca8:	40003400 	.word	0x40003400

08008cac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	1c99      	adds	r1, r3, #2
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	6251      	str	r1, [r2, #36]	; 0x24
 8008cd2:	881a      	ldrh	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d113      	bne.n	8008d1a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d106      	bne.n	8008d1a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff ffc9 	bl	8008cac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
	...

08008d24 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	1c99      	adds	r1, r3, #2
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	6251      	str	r1, [r2, #36]	; 0x24
 8008d36:	8819      	ldrh	r1, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a1d      	ldr	r2, [pc, #116]	; (8008db4 <I2SEx_TxISR_I2SExt+0x90>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d101      	bne.n	8008d46 <I2SEx_TxISR_I2SExt+0x22>
 8008d42:	4b1d      	ldr	r3, [pc, #116]	; (8008db8 <I2SEx_TxISR_I2SExt+0x94>)
 8008d44:	e001      	b.n	8008d4a <I2SEx_TxISR_I2SExt+0x26>
 8008d46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008d4a:	460a      	mov	r2, r1
 8008d4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	3b01      	subs	r3, #1
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d121      	bne.n	8008daa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a12      	ldr	r2, [pc, #72]	; (8008db4 <I2SEx_TxISR_I2SExt+0x90>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d101      	bne.n	8008d74 <I2SEx_TxISR_I2SExt+0x50>
 8008d70:	4b11      	ldr	r3, [pc, #68]	; (8008db8 <I2SEx_TxISR_I2SExt+0x94>)
 8008d72:	e001      	b.n	8008d78 <I2SEx_TxISR_I2SExt+0x54>
 8008d74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	490d      	ldr	r1, [pc, #52]	; (8008db4 <I2SEx_TxISR_I2SExt+0x90>)
 8008d80:	428b      	cmp	r3, r1
 8008d82:	d101      	bne.n	8008d88 <I2SEx_TxISR_I2SExt+0x64>
 8008d84:	4b0c      	ldr	r3, [pc, #48]	; (8008db8 <I2SEx_TxISR_I2SExt+0x94>)
 8008d86:	e001      	b.n	8008d8c <I2SEx_TxISR_I2SExt+0x68>
 8008d88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008d8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d106      	bne.n	8008daa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7ff ff81 	bl	8008cac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008daa:	bf00      	nop
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	40003800 	.word	0x40003800
 8008db8:	40003400 	.word	0x40003400

08008dbc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68d8      	ldr	r0, [r3, #12]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dce:	1c99      	adds	r1, r3, #2
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008dd4:	b282      	uxth	r2, r0
 8008dd6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	3b01      	subs	r3, #1
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d113      	bne.n	8008e18 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008dfe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d106      	bne.n	8008e18 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7ff ff4a 	bl	8008cac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a20      	ldr	r2, [pc, #128]	; (8008eb0 <I2SEx_RxISR_I2SExt+0x90>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d101      	bne.n	8008e36 <I2SEx_RxISR_I2SExt+0x16>
 8008e32:	4b20      	ldr	r3, [pc, #128]	; (8008eb4 <I2SEx_RxISR_I2SExt+0x94>)
 8008e34:	e001      	b.n	8008e3a <I2SEx_RxISR_I2SExt+0x1a>
 8008e36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008e3a:	68d8      	ldr	r0, [r3, #12]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e40:	1c99      	adds	r1, r3, #2
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008e46:	b282      	uxth	r2, r0
 8008e48:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	3b01      	subs	r3, #1
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d121      	bne.n	8008ea6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a12      	ldr	r2, [pc, #72]	; (8008eb0 <I2SEx_RxISR_I2SExt+0x90>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d101      	bne.n	8008e70 <I2SEx_RxISR_I2SExt+0x50>
 8008e6c:	4b11      	ldr	r3, [pc, #68]	; (8008eb4 <I2SEx_RxISR_I2SExt+0x94>)
 8008e6e:	e001      	b.n	8008e74 <I2SEx_RxISR_I2SExt+0x54>
 8008e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	490d      	ldr	r1, [pc, #52]	; (8008eb0 <I2SEx_RxISR_I2SExt+0x90>)
 8008e7c:	428b      	cmp	r3, r1
 8008e7e:	d101      	bne.n	8008e84 <I2SEx_RxISR_I2SExt+0x64>
 8008e80:	4b0c      	ldr	r3, [pc, #48]	; (8008eb4 <I2SEx_RxISR_I2SExt+0x94>)
 8008e82:	e001      	b.n	8008e88 <I2SEx_RxISR_I2SExt+0x68>
 8008e84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008e88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008e8c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d106      	bne.n	8008ea6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7ff ff03 	bl	8008cac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008ea6:	bf00      	nop
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	40003800 	.word	0x40003800
 8008eb4:	40003400 	.word	0x40003400

08008eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e25b      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d075      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ed6:	4ba3      	ldr	r3, [pc, #652]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f003 030c 	and.w	r3, r3, #12
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	d00c      	beq.n	8008efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ee2:	4ba0      	ldr	r3, [pc, #640]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008eea:	2b08      	cmp	r3, #8
 8008eec:	d112      	bne.n	8008f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008eee:	4b9d      	ldr	r3, [pc, #628]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008efa:	d10b      	bne.n	8008f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008efc:	4b99      	ldr	r3, [pc, #612]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d05b      	beq.n	8008fc0 <HAL_RCC_OscConfig+0x108>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d157      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e236      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f1c:	d106      	bne.n	8008f2c <HAL_RCC_OscConfig+0x74>
 8008f1e:	4b91      	ldr	r3, [pc, #580]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a90      	ldr	r2, [pc, #576]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	e01d      	b.n	8008f68 <HAL_RCC_OscConfig+0xb0>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f34:	d10c      	bne.n	8008f50 <HAL_RCC_OscConfig+0x98>
 8008f36:	4b8b      	ldr	r3, [pc, #556]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a8a      	ldr	r2, [pc, #552]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f40:	6013      	str	r3, [r2, #0]
 8008f42:	4b88      	ldr	r3, [pc, #544]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a87      	ldr	r2, [pc, #540]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f4c:	6013      	str	r3, [r2, #0]
 8008f4e:	e00b      	b.n	8008f68 <HAL_RCC_OscConfig+0xb0>
 8008f50:	4b84      	ldr	r3, [pc, #528]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a83      	ldr	r2, [pc, #524]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	4b81      	ldr	r3, [pc, #516]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a80      	ldr	r2, [pc, #512]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d013      	beq.n	8008f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f70:	f7fb fd36 	bl	80049e0 <HAL_GetTick>
 8008f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f76:	e008      	b.n	8008f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f78:	f7fb fd32 	bl	80049e0 <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	2b64      	cmp	r3, #100	; 0x64
 8008f84:	d901      	bls.n	8008f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e1fb      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f8a:	4b76      	ldr	r3, [pc, #472]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0f0      	beq.n	8008f78 <HAL_RCC_OscConfig+0xc0>
 8008f96:	e014      	b.n	8008fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f98:	f7fb fd22 	bl	80049e0 <HAL_GetTick>
 8008f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f9e:	e008      	b.n	8008fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fa0:	f7fb fd1e 	bl	80049e0 <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	2b64      	cmp	r3, #100	; 0x64
 8008fac:	d901      	bls.n	8008fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e1e7      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fb2:	4b6c      	ldr	r3, [pc, #432]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1f0      	bne.n	8008fa0 <HAL_RCC_OscConfig+0xe8>
 8008fbe:	e000      	b.n	8008fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d063      	beq.n	8009096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008fce:	4b65      	ldr	r3, [pc, #404]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f003 030c 	and.w	r3, r3, #12
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00b      	beq.n	8008ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008fda:	4b62      	ldr	r3, [pc, #392]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008fe2:	2b08      	cmp	r3, #8
 8008fe4:	d11c      	bne.n	8009020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008fe6:	4b5f      	ldr	r3, [pc, #380]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d116      	bne.n	8009020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ff2:	4b5c      	ldr	r3, [pc, #368]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0302 	and.w	r3, r3, #2
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d005      	beq.n	800900a <HAL_RCC_OscConfig+0x152>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d001      	beq.n	800900a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e1bb      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800900a:	4b56      	ldr	r3, [pc, #344]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	4952      	ldr	r1, [pc, #328]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 800901a:	4313      	orrs	r3, r2
 800901c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800901e:	e03a      	b.n	8009096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d020      	beq.n	800906a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009028:	4b4f      	ldr	r3, [pc, #316]	; (8009168 <HAL_RCC_OscConfig+0x2b0>)
 800902a:	2201      	movs	r2, #1
 800902c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800902e:	f7fb fcd7 	bl	80049e0 <HAL_GetTick>
 8009032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009034:	e008      	b.n	8009048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009036:	f7fb fcd3 	bl	80049e0 <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	2b02      	cmp	r3, #2
 8009042:	d901      	bls.n	8009048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e19c      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009048:	4b46      	ldr	r3, [pc, #280]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0302 	and.w	r3, r3, #2
 8009050:	2b00      	cmp	r3, #0
 8009052:	d0f0      	beq.n	8009036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009054:	4b43      	ldr	r3, [pc, #268]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	00db      	lsls	r3, r3, #3
 8009062:	4940      	ldr	r1, [pc, #256]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8009064:	4313      	orrs	r3, r2
 8009066:	600b      	str	r3, [r1, #0]
 8009068:	e015      	b.n	8009096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800906a:	4b3f      	ldr	r3, [pc, #252]	; (8009168 <HAL_RCC_OscConfig+0x2b0>)
 800906c:	2200      	movs	r2, #0
 800906e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009070:	f7fb fcb6 	bl	80049e0 <HAL_GetTick>
 8009074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009076:	e008      	b.n	800908a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009078:	f7fb fcb2 	bl	80049e0 <HAL_GetTick>
 800907c:	4602      	mov	r2, r0
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	2b02      	cmp	r3, #2
 8009084:	d901      	bls.n	800908a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e17b      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800908a:	4b36      	ldr	r3, [pc, #216]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0302 	and.w	r3, r3, #2
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1f0      	bne.n	8009078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 0308 	and.w	r3, r3, #8
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d030      	beq.n	8009104 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	695b      	ldr	r3, [r3, #20]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d016      	beq.n	80090d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090aa:	4b30      	ldr	r3, [pc, #192]	; (800916c <HAL_RCC_OscConfig+0x2b4>)
 80090ac:	2201      	movs	r2, #1
 80090ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090b0:	f7fb fc96 	bl	80049e0 <HAL_GetTick>
 80090b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090b6:	e008      	b.n	80090ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80090b8:	f7fb fc92 	bl	80049e0 <HAL_GetTick>
 80090bc:	4602      	mov	r2, r0
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d901      	bls.n	80090ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e15b      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090ca:	4b26      	ldr	r3, [pc, #152]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 80090cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ce:	f003 0302 	and.w	r3, r3, #2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0f0      	beq.n	80090b8 <HAL_RCC_OscConfig+0x200>
 80090d6:	e015      	b.n	8009104 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090d8:	4b24      	ldr	r3, [pc, #144]	; (800916c <HAL_RCC_OscConfig+0x2b4>)
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80090de:	f7fb fc7f 	bl	80049e0 <HAL_GetTick>
 80090e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090e4:	e008      	b.n	80090f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80090e6:	f7fb fc7b 	bl	80049e0 <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d901      	bls.n	80090f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e144      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090f8:	4b1a      	ldr	r3, [pc, #104]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 80090fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1f0      	bne.n	80090e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0304 	and.w	r3, r3, #4
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 80a0 	beq.w	8009252 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009112:	2300      	movs	r3, #0
 8009114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009116:	4b13      	ldr	r3, [pc, #76]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8009118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10f      	bne.n	8009142 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009122:	2300      	movs	r3, #0
 8009124:	60bb      	str	r3, [r7, #8]
 8009126:	4b0f      	ldr	r3, [pc, #60]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	4a0e      	ldr	r2, [pc, #56]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 800912c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009130:	6413      	str	r3, [r2, #64]	; 0x40
 8009132:	4b0c      	ldr	r3, [pc, #48]	; (8009164 <HAL_RCC_OscConfig+0x2ac>)
 8009134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800913a:	60bb      	str	r3, [r7, #8]
 800913c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800913e:	2301      	movs	r3, #1
 8009140:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009142:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <HAL_RCC_OscConfig+0x2b8>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800914a:	2b00      	cmp	r3, #0
 800914c:	d121      	bne.n	8009192 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800914e:	4b08      	ldr	r3, [pc, #32]	; (8009170 <HAL_RCC_OscConfig+0x2b8>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a07      	ldr	r2, [pc, #28]	; (8009170 <HAL_RCC_OscConfig+0x2b8>)
 8009154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800915a:	f7fb fc41 	bl	80049e0 <HAL_GetTick>
 800915e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009160:	e011      	b.n	8009186 <HAL_RCC_OscConfig+0x2ce>
 8009162:	bf00      	nop
 8009164:	40023800 	.word	0x40023800
 8009168:	42470000 	.word	0x42470000
 800916c:	42470e80 	.word	0x42470e80
 8009170:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009174:	f7fb fc34 	bl	80049e0 <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	2b02      	cmp	r3, #2
 8009180:	d901      	bls.n	8009186 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e0fd      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009186:	4b81      	ldr	r3, [pc, #516]	; (800938c <HAL_RCC_OscConfig+0x4d4>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0f0      	beq.n	8009174 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d106      	bne.n	80091a8 <HAL_RCC_OscConfig+0x2f0>
 800919a:	4b7d      	ldr	r3, [pc, #500]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 800919c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800919e:	4a7c      	ldr	r2, [pc, #496]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 80091a0:	f043 0301 	orr.w	r3, r3, #1
 80091a4:	6713      	str	r3, [r2, #112]	; 0x70
 80091a6:	e01c      	b.n	80091e2 <HAL_RCC_OscConfig+0x32a>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	2b05      	cmp	r3, #5
 80091ae:	d10c      	bne.n	80091ca <HAL_RCC_OscConfig+0x312>
 80091b0:	4b77      	ldr	r3, [pc, #476]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 80091b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b4:	4a76      	ldr	r2, [pc, #472]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 80091b6:	f043 0304 	orr.w	r3, r3, #4
 80091ba:	6713      	str	r3, [r2, #112]	; 0x70
 80091bc:	4b74      	ldr	r3, [pc, #464]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 80091be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c0:	4a73      	ldr	r2, [pc, #460]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 80091c2:	f043 0301 	orr.w	r3, r3, #1
 80091c6:	6713      	str	r3, [r2, #112]	; 0x70
 80091c8:	e00b      	b.n	80091e2 <HAL_RCC_OscConfig+0x32a>
 80091ca:	4b71      	ldr	r3, [pc, #452]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 80091cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ce:	4a70      	ldr	r2, [pc, #448]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 80091d0:	f023 0301 	bic.w	r3, r3, #1
 80091d4:	6713      	str	r3, [r2, #112]	; 0x70
 80091d6:	4b6e      	ldr	r3, [pc, #440]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 80091d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091da:	4a6d      	ldr	r2, [pc, #436]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 80091dc:	f023 0304 	bic.w	r3, r3, #4
 80091e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d015      	beq.n	8009216 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ea:	f7fb fbf9 	bl	80049e0 <HAL_GetTick>
 80091ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091f0:	e00a      	b.n	8009208 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091f2:	f7fb fbf5 	bl	80049e0 <HAL_GetTick>
 80091f6:	4602      	mov	r2, r0
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009200:	4293      	cmp	r3, r2
 8009202:	d901      	bls.n	8009208 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e0bc      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009208:	4b61      	ldr	r3, [pc, #388]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 800920a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d0ee      	beq.n	80091f2 <HAL_RCC_OscConfig+0x33a>
 8009214:	e014      	b.n	8009240 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009216:	f7fb fbe3 	bl	80049e0 <HAL_GetTick>
 800921a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800921c:	e00a      	b.n	8009234 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800921e:	f7fb fbdf 	bl	80049e0 <HAL_GetTick>
 8009222:	4602      	mov	r2, r0
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	f241 3288 	movw	r2, #5000	; 0x1388
 800922c:	4293      	cmp	r3, r2
 800922e:	d901      	bls.n	8009234 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e0a6      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009234:	4b56      	ldr	r3, [pc, #344]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 8009236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009238:	f003 0302 	and.w	r3, r3, #2
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1ee      	bne.n	800921e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009240:	7dfb      	ldrb	r3, [r7, #23]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d105      	bne.n	8009252 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009246:	4b52      	ldr	r3, [pc, #328]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 8009248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924a:	4a51      	ldr	r2, [pc, #324]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 800924c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009250:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 8092 	beq.w	8009380 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800925c:	4b4c      	ldr	r3, [pc, #304]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f003 030c 	and.w	r3, r3, #12
 8009264:	2b08      	cmp	r3, #8
 8009266:	d05c      	beq.n	8009322 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	2b02      	cmp	r3, #2
 800926e:	d141      	bne.n	80092f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009270:	4b48      	ldr	r3, [pc, #288]	; (8009394 <HAL_RCC_OscConfig+0x4dc>)
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009276:	f7fb fbb3 	bl	80049e0 <HAL_GetTick>
 800927a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800927c:	e008      	b.n	8009290 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800927e:	f7fb fbaf 	bl	80049e0 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b02      	cmp	r3, #2
 800928a:	d901      	bls.n	8009290 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e078      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009290:	4b3f      	ldr	r3, [pc, #252]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1f0      	bne.n	800927e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	69da      	ldr	r2, [r3, #28]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
 80092a4:	431a      	orrs	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092aa:	019b      	lsls	r3, r3, #6
 80092ac:	431a      	orrs	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b2:	085b      	lsrs	r3, r3, #1
 80092b4:	3b01      	subs	r3, #1
 80092b6:	041b      	lsls	r3, r3, #16
 80092b8:	431a      	orrs	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092be:	061b      	lsls	r3, r3, #24
 80092c0:	4933      	ldr	r1, [pc, #204]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 80092c2:	4313      	orrs	r3, r2
 80092c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092c6:	4b33      	ldr	r3, [pc, #204]	; (8009394 <HAL_RCC_OscConfig+0x4dc>)
 80092c8:	2201      	movs	r2, #1
 80092ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092cc:	f7fb fb88 	bl	80049e0 <HAL_GetTick>
 80092d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092d2:	e008      	b.n	80092e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092d4:	f7fb fb84 	bl	80049e0 <HAL_GetTick>
 80092d8:	4602      	mov	r2, r0
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d901      	bls.n	80092e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e04d      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092e6:	4b2a      	ldr	r3, [pc, #168]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0f0      	beq.n	80092d4 <HAL_RCC_OscConfig+0x41c>
 80092f2:	e045      	b.n	8009380 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092f4:	4b27      	ldr	r3, [pc, #156]	; (8009394 <HAL_RCC_OscConfig+0x4dc>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092fa:	f7fb fb71 	bl	80049e0 <HAL_GetTick>
 80092fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009300:	e008      	b.n	8009314 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009302:	f7fb fb6d 	bl	80049e0 <HAL_GetTick>
 8009306:	4602      	mov	r2, r0
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	2b02      	cmp	r3, #2
 800930e:	d901      	bls.n	8009314 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e036      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009314:	4b1e      	ldr	r3, [pc, #120]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1f0      	bne.n	8009302 <HAL_RCC_OscConfig+0x44a>
 8009320:	e02e      	b.n	8009380 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d101      	bne.n	800932e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e029      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800932e:	4b18      	ldr	r3, [pc, #96]	; (8009390 <HAL_RCC_OscConfig+0x4d8>)
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	69db      	ldr	r3, [r3, #28]
 800933e:	429a      	cmp	r2, r3
 8009340:	d11c      	bne.n	800937c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800934c:	429a      	cmp	r2, r3
 800934e:	d115      	bne.n	800937c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009356:	4013      	ands	r3, r2
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800935c:	4293      	cmp	r3, r2
 800935e:	d10d      	bne.n	800937c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800936a:	429a      	cmp	r2, r3
 800936c:	d106      	bne.n	800937c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009378:	429a      	cmp	r2, r3
 800937a:	d001      	beq.n	8009380 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e000      	b.n	8009382 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3718      	adds	r7, #24
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	40007000 	.word	0x40007000
 8009390:	40023800 	.word	0x40023800
 8009394:	42470060 	.word	0x42470060

08009398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e0cc      	b.n	8009546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80093ac:	4b68      	ldr	r3, [pc, #416]	; (8009550 <HAL_RCC_ClockConfig+0x1b8>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 030f 	and.w	r3, r3, #15
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d90c      	bls.n	80093d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093ba:	4b65      	ldr	r3, [pc, #404]	; (8009550 <HAL_RCC_ClockConfig+0x1b8>)
 80093bc:	683a      	ldr	r2, [r7, #0]
 80093be:	b2d2      	uxtb	r2, r2
 80093c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093c2:	4b63      	ldr	r3, [pc, #396]	; (8009550 <HAL_RCC_ClockConfig+0x1b8>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 030f 	and.w	r3, r3, #15
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d001      	beq.n	80093d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e0b8      	b.n	8009546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d020      	beq.n	8009422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0304 	and.w	r3, r3, #4
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d005      	beq.n	80093f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80093ec:	4b59      	ldr	r3, [pc, #356]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	4a58      	ldr	r2, [pc, #352]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 80093f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80093f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	2b00      	cmp	r3, #0
 8009402:	d005      	beq.n	8009410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009404:	4b53      	ldr	r3, [pc, #332]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	4a52      	ldr	r2, [pc, #328]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 800940a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800940e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009410:	4b50      	ldr	r3, [pc, #320]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	494d      	ldr	r1, [pc, #308]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 800941e:	4313      	orrs	r3, r2
 8009420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	d044      	beq.n	80094b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d107      	bne.n	8009446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009436:	4b47      	ldr	r3, [pc, #284]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d119      	bne.n	8009476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e07f      	b.n	8009546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	2b02      	cmp	r3, #2
 800944c:	d003      	beq.n	8009456 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009452:	2b03      	cmp	r3, #3
 8009454:	d107      	bne.n	8009466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009456:	4b3f      	ldr	r3, [pc, #252]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d109      	bne.n	8009476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e06f      	b.n	8009546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009466:	4b3b      	ldr	r3, [pc, #236]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e067      	b.n	8009546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009476:	4b37      	ldr	r3, [pc, #220]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f023 0203 	bic.w	r2, r3, #3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	4934      	ldr	r1, [pc, #208]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 8009484:	4313      	orrs	r3, r2
 8009486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009488:	f7fb faaa 	bl	80049e0 <HAL_GetTick>
 800948c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800948e:	e00a      	b.n	80094a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009490:	f7fb faa6 	bl	80049e0 <HAL_GetTick>
 8009494:	4602      	mov	r2, r0
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	f241 3288 	movw	r2, #5000	; 0x1388
 800949e:	4293      	cmp	r3, r2
 80094a0:	d901      	bls.n	80094a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e04f      	b.n	8009546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094a6:	4b2b      	ldr	r3, [pc, #172]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	f003 020c 	and.w	r2, r3, #12
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d1eb      	bne.n	8009490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80094b8:	4b25      	ldr	r3, [pc, #148]	; (8009550 <HAL_RCC_ClockConfig+0x1b8>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 030f 	and.w	r3, r3, #15
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d20c      	bcs.n	80094e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094c6:	4b22      	ldr	r3, [pc, #136]	; (8009550 <HAL_RCC_ClockConfig+0x1b8>)
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	b2d2      	uxtb	r2, r2
 80094cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094ce:	4b20      	ldr	r3, [pc, #128]	; (8009550 <HAL_RCC_ClockConfig+0x1b8>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 030f 	and.w	r3, r3, #15
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d001      	beq.n	80094e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e032      	b.n	8009546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d008      	beq.n	80094fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80094ec:	4b19      	ldr	r3, [pc, #100]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	4916      	ldr	r1, [pc, #88]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 80094fa:	4313      	orrs	r3, r2
 80094fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 0308 	and.w	r3, r3, #8
 8009506:	2b00      	cmp	r3, #0
 8009508:	d009      	beq.n	800951e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800950a:	4b12      	ldr	r3, [pc, #72]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	00db      	lsls	r3, r3, #3
 8009518:	490e      	ldr	r1, [pc, #56]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 800951a:	4313      	orrs	r3, r2
 800951c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800951e:	f000 f821 	bl	8009564 <HAL_RCC_GetSysClockFreq>
 8009522:	4601      	mov	r1, r0
 8009524:	4b0b      	ldr	r3, [pc, #44]	; (8009554 <HAL_RCC_ClockConfig+0x1bc>)
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	091b      	lsrs	r3, r3, #4
 800952a:	f003 030f 	and.w	r3, r3, #15
 800952e:	4a0a      	ldr	r2, [pc, #40]	; (8009558 <HAL_RCC_ClockConfig+0x1c0>)
 8009530:	5cd3      	ldrb	r3, [r2, r3]
 8009532:	fa21 f303 	lsr.w	r3, r1, r3
 8009536:	4a09      	ldr	r2, [pc, #36]	; (800955c <HAL_RCC_ClockConfig+0x1c4>)
 8009538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800953a:	4b09      	ldr	r3, [pc, #36]	; (8009560 <HAL_RCC_ClockConfig+0x1c8>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4618      	mov	r0, r3
 8009540:	f7fb fa0a 	bl	8004958 <HAL_InitTick>

  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	40023c00 	.word	0x40023c00
 8009554:	40023800 	.word	0x40023800
 8009558:	0800c0fc 	.word	0x0800c0fc
 800955c:	20000010 	.word	0x20000010
 8009560:	20000014 	.word	0x20000014

08009564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	607b      	str	r3, [r7, #4]
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	2300      	movs	r3, #0
 8009574:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800957a:	4b63      	ldr	r3, [pc, #396]	; (8009708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	f003 030c 	and.w	r3, r3, #12
 8009582:	2b04      	cmp	r3, #4
 8009584:	d007      	beq.n	8009596 <HAL_RCC_GetSysClockFreq+0x32>
 8009586:	2b08      	cmp	r3, #8
 8009588:	d008      	beq.n	800959c <HAL_RCC_GetSysClockFreq+0x38>
 800958a:	2b00      	cmp	r3, #0
 800958c:	f040 80b4 	bne.w	80096f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009590:	4b5e      	ldr	r3, [pc, #376]	; (800970c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009592:	60bb      	str	r3, [r7, #8]
       break;
 8009594:	e0b3      	b.n	80096fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009596:	4b5e      	ldr	r3, [pc, #376]	; (8009710 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009598:	60bb      	str	r3, [r7, #8]
      break;
 800959a:	e0b0      	b.n	80096fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800959c:	4b5a      	ldr	r3, [pc, #360]	; (8009708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80095a6:	4b58      	ldr	r3, [pc, #352]	; (8009708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d04a      	beq.n	8009648 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095b2:	4b55      	ldr	r3, [pc, #340]	; (8009708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	099b      	lsrs	r3, r3, #6
 80095b8:	f04f 0400 	mov.w	r4, #0
 80095bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80095c0:	f04f 0200 	mov.w	r2, #0
 80095c4:	ea03 0501 	and.w	r5, r3, r1
 80095c8:	ea04 0602 	and.w	r6, r4, r2
 80095cc:	4629      	mov	r1, r5
 80095ce:	4632      	mov	r2, r6
 80095d0:	f04f 0300 	mov.w	r3, #0
 80095d4:	f04f 0400 	mov.w	r4, #0
 80095d8:	0154      	lsls	r4, r2, #5
 80095da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80095de:	014b      	lsls	r3, r1, #5
 80095e0:	4619      	mov	r1, r3
 80095e2:	4622      	mov	r2, r4
 80095e4:	1b49      	subs	r1, r1, r5
 80095e6:	eb62 0206 	sbc.w	r2, r2, r6
 80095ea:	f04f 0300 	mov.w	r3, #0
 80095ee:	f04f 0400 	mov.w	r4, #0
 80095f2:	0194      	lsls	r4, r2, #6
 80095f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80095f8:	018b      	lsls	r3, r1, #6
 80095fa:	1a5b      	subs	r3, r3, r1
 80095fc:	eb64 0402 	sbc.w	r4, r4, r2
 8009600:	f04f 0100 	mov.w	r1, #0
 8009604:	f04f 0200 	mov.w	r2, #0
 8009608:	00e2      	lsls	r2, r4, #3
 800960a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800960e:	00d9      	lsls	r1, r3, #3
 8009610:	460b      	mov	r3, r1
 8009612:	4614      	mov	r4, r2
 8009614:	195b      	adds	r3, r3, r5
 8009616:	eb44 0406 	adc.w	r4, r4, r6
 800961a:	f04f 0100 	mov.w	r1, #0
 800961e:	f04f 0200 	mov.w	r2, #0
 8009622:	0262      	lsls	r2, r4, #9
 8009624:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009628:	0259      	lsls	r1, r3, #9
 800962a:	460b      	mov	r3, r1
 800962c:	4614      	mov	r4, r2
 800962e:	4618      	mov	r0, r3
 8009630:	4621      	mov	r1, r4
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f04f 0400 	mov.w	r4, #0
 8009638:	461a      	mov	r2, r3
 800963a:	4623      	mov	r3, r4
 800963c:	f7f6 fdcc 	bl	80001d8 <__aeabi_uldivmod>
 8009640:	4603      	mov	r3, r0
 8009642:	460c      	mov	r4, r1
 8009644:	60fb      	str	r3, [r7, #12]
 8009646:	e049      	b.n	80096dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009648:	4b2f      	ldr	r3, [pc, #188]	; (8009708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	099b      	lsrs	r3, r3, #6
 800964e:	f04f 0400 	mov.w	r4, #0
 8009652:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009656:	f04f 0200 	mov.w	r2, #0
 800965a:	ea03 0501 	and.w	r5, r3, r1
 800965e:	ea04 0602 	and.w	r6, r4, r2
 8009662:	4629      	mov	r1, r5
 8009664:	4632      	mov	r2, r6
 8009666:	f04f 0300 	mov.w	r3, #0
 800966a:	f04f 0400 	mov.w	r4, #0
 800966e:	0154      	lsls	r4, r2, #5
 8009670:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009674:	014b      	lsls	r3, r1, #5
 8009676:	4619      	mov	r1, r3
 8009678:	4622      	mov	r2, r4
 800967a:	1b49      	subs	r1, r1, r5
 800967c:	eb62 0206 	sbc.w	r2, r2, r6
 8009680:	f04f 0300 	mov.w	r3, #0
 8009684:	f04f 0400 	mov.w	r4, #0
 8009688:	0194      	lsls	r4, r2, #6
 800968a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800968e:	018b      	lsls	r3, r1, #6
 8009690:	1a5b      	subs	r3, r3, r1
 8009692:	eb64 0402 	sbc.w	r4, r4, r2
 8009696:	f04f 0100 	mov.w	r1, #0
 800969a:	f04f 0200 	mov.w	r2, #0
 800969e:	00e2      	lsls	r2, r4, #3
 80096a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80096a4:	00d9      	lsls	r1, r3, #3
 80096a6:	460b      	mov	r3, r1
 80096a8:	4614      	mov	r4, r2
 80096aa:	195b      	adds	r3, r3, r5
 80096ac:	eb44 0406 	adc.w	r4, r4, r6
 80096b0:	f04f 0100 	mov.w	r1, #0
 80096b4:	f04f 0200 	mov.w	r2, #0
 80096b8:	02a2      	lsls	r2, r4, #10
 80096ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80096be:	0299      	lsls	r1, r3, #10
 80096c0:	460b      	mov	r3, r1
 80096c2:	4614      	mov	r4, r2
 80096c4:	4618      	mov	r0, r3
 80096c6:	4621      	mov	r1, r4
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f04f 0400 	mov.w	r4, #0
 80096ce:	461a      	mov	r2, r3
 80096d0:	4623      	mov	r3, r4
 80096d2:	f7f6 fd81 	bl	80001d8 <__aeabi_uldivmod>
 80096d6:	4603      	mov	r3, r0
 80096d8:	460c      	mov	r4, r1
 80096da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80096dc:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	0c1b      	lsrs	r3, r3, #16
 80096e2:	f003 0303 	and.w	r3, r3, #3
 80096e6:	3301      	adds	r3, #1
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80096f4:	60bb      	str	r3, [r7, #8]
      break;
 80096f6:	e002      	b.n	80096fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80096f8:	4b04      	ldr	r3, [pc, #16]	; (800970c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80096fa:	60bb      	str	r3, [r7, #8]
      break;
 80096fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80096fe:	68bb      	ldr	r3, [r7, #8]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009708:	40023800 	.word	0x40023800
 800970c:	00f42400 	.word	0x00f42400
 8009710:	007a1200 	.word	0x007a1200

08009714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009714:	b480      	push	{r7}
 8009716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009718:	4b03      	ldr	r3, [pc, #12]	; (8009728 <HAL_RCC_GetHCLKFreq+0x14>)
 800971a:	681b      	ldr	r3, [r3, #0]
}
 800971c:	4618      	mov	r0, r3
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	20000010 	.word	0x20000010

0800972c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009730:	f7ff fff0 	bl	8009714 <HAL_RCC_GetHCLKFreq>
 8009734:	4601      	mov	r1, r0
 8009736:	4b05      	ldr	r3, [pc, #20]	; (800974c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	0a9b      	lsrs	r3, r3, #10
 800973c:	f003 0307 	and.w	r3, r3, #7
 8009740:	4a03      	ldr	r2, [pc, #12]	; (8009750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009742:	5cd3      	ldrb	r3, [r2, r3]
 8009744:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009748:	4618      	mov	r0, r3
 800974a:	bd80      	pop	{r7, pc}
 800974c:	40023800 	.word	0x40023800
 8009750:	0800c10c 	.word	0x0800c10c

08009754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009758:	f7ff ffdc 	bl	8009714 <HAL_RCC_GetHCLKFreq>
 800975c:	4601      	mov	r1, r0
 800975e:	4b05      	ldr	r3, [pc, #20]	; (8009774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	0b5b      	lsrs	r3, r3, #13
 8009764:	f003 0307 	and.w	r3, r3, #7
 8009768:	4a03      	ldr	r2, [pc, #12]	; (8009778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800976a:	5cd3      	ldrb	r3, [r2, r3]
 800976c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009770:	4618      	mov	r0, r3
 8009772:	bd80      	pop	{r7, pc}
 8009774:	40023800 	.word	0x40023800
 8009778:	0800c10c 	.word	0x0800c10c

0800977c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009784:	2300      	movs	r3, #0
 8009786:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	2b00      	cmp	r3, #0
 8009796:	d105      	bne.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d035      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80097a4:	4b62      	ldr	r3, [pc, #392]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80097aa:	f7fb f919 	bl	80049e0 <HAL_GetTick>
 80097ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80097b0:	e008      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80097b2:	f7fb f915 	bl	80049e0 <HAL_GetTick>
 80097b6:	4602      	mov	r2, r0
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	2b02      	cmp	r3, #2
 80097be:	d901      	bls.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e0b0      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80097c4:	4b5b      	ldr	r3, [pc, #364]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1f0      	bne.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	019a      	lsls	r2, r3, #6
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	071b      	lsls	r3, r3, #28
 80097dc:	4955      	ldr	r1, [pc, #340]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80097e4:	4b52      	ldr	r3, [pc, #328]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80097e6:	2201      	movs	r2, #1
 80097e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80097ea:	f7fb f8f9 	bl	80049e0 <HAL_GetTick>
 80097ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80097f0:	e008      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80097f2:	f7fb f8f5 	bl	80049e0 <HAL_GetTick>
 80097f6:	4602      	mov	r2, r0
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d901      	bls.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009800:	2303      	movs	r3, #3
 8009802:	e090      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009804:	4b4b      	ldr	r3, [pc, #300]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d0f0      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 8083 	beq.w	8009924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800981e:	2300      	movs	r3, #0
 8009820:	60fb      	str	r3, [r7, #12]
 8009822:	4b44      	ldr	r3, [pc, #272]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009826:	4a43      	ldr	r2, [pc, #268]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800982c:	6413      	str	r3, [r2, #64]	; 0x40
 800982e:	4b41      	ldr	r3, [pc, #260]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009836:	60fb      	str	r3, [r7, #12]
 8009838:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800983a:	4b3f      	ldr	r3, [pc, #252]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a3e      	ldr	r2, [pc, #248]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009844:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009846:	f7fb f8cb 	bl	80049e0 <HAL_GetTick>
 800984a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800984c:	e008      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800984e:	f7fb f8c7 	bl	80049e0 <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	2b02      	cmp	r3, #2
 800985a:	d901      	bls.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800985c:	2303      	movs	r3, #3
 800985e:	e062      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009860:	4b35      	ldr	r3, [pc, #212]	; (8009938 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009868:	2b00      	cmp	r3, #0
 800986a:	d0f0      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800986c:	4b31      	ldr	r3, [pc, #196]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800986e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009874:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d02f      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	429a      	cmp	r2, r3
 8009888:	d028      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800988a:	4b2a      	ldr	r3, [pc, #168]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800988c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009892:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009894:	4b29      	ldr	r3, [pc, #164]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009896:	2201      	movs	r2, #1
 8009898:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800989a:	4b28      	ldr	r3, [pc, #160]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800989c:	2200      	movs	r2, #0
 800989e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80098a0:	4a24      	ldr	r2, [pc, #144]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80098a6:	4b23      	ldr	r3, [pc, #140]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80098a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d114      	bne.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80098b2:	f7fb f895 	bl	80049e0 <HAL_GetTick>
 80098b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098b8:	e00a      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098ba:	f7fb f891 	bl	80049e0 <HAL_GetTick>
 80098be:	4602      	mov	r2, r0
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d901      	bls.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e02a      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098d0:	4b18      	ldr	r3, [pc, #96]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80098d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d4:	f003 0302 	and.w	r3, r3, #2
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d0ee      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098e8:	d10d      	bne.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80098ea:	4b12      	ldr	r3, [pc, #72]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80098fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098fe:	490d      	ldr	r1, [pc, #52]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009900:	4313      	orrs	r3, r2
 8009902:	608b      	str	r3, [r1, #8]
 8009904:	e005      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009906:	4b0b      	ldr	r3, [pc, #44]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	4a0a      	ldr	r2, [pc, #40]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800990c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009910:	6093      	str	r3, [r2, #8]
 8009912:	4b08      	ldr	r3, [pc, #32]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009914:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800991e:	4905      	ldr	r1, [pc, #20]	; (8009934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009920:	4313      	orrs	r3, r2
 8009922:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	42470068 	.word	0x42470068
 8009934:	40023800 	.word	0x40023800
 8009938:	40007000 	.word	0x40007000
 800993c:	42470e40 	.word	0x42470e40

08009940 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009948:	2300      	movs	r3, #0
 800994a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8009950:	2300      	movs	r3, #0
 8009952:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009954:	2300      	movs	r3, #0
 8009956:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d13d      	bne.n	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800995e:	4b22      	ldr	r3, [pc, #136]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009966:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d004      	beq.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800996e:	2b01      	cmp	r3, #1
 8009970:	d12f      	bne.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8009972:	4b1e      	ldr	r3, [pc, #120]	; (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009974:	617b      	str	r3, [r7, #20]
          break;
 8009976:	e02f      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009978:	4b1b      	ldr	r3, [pc, #108]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009984:	d108      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009986:	4b18      	ldr	r3, [pc, #96]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800998e:	4a18      	ldr	r2, [pc, #96]	; (80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009990:	fbb2 f3f3 	udiv	r3, r2, r3
 8009994:	613b      	str	r3, [r7, #16]
 8009996:	e007      	b.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009998:	4b13      	ldr	r3, [pc, #76]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099a0:	4a14      	ldr	r2, [pc, #80]	; (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80099a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80099a8:	4b0f      	ldr	r3, [pc, #60]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80099aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ae:	099b      	lsrs	r3, r3, #6
 80099b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	fb02 f303 	mul.w	r3, r2, r3
 80099ba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80099bc:	4b0a      	ldr	r3, [pc, #40]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80099be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099c2:	0f1b      	lsrs	r3, r3, #28
 80099c4:	f003 0307 	and.w	r3, r3, #7
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ce:	617b      	str	r3, [r7, #20]
          break;
 80099d0:	e002      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80099d2:	2300      	movs	r3, #0
 80099d4:	617b      	str	r3, [r7, #20]
          break;
 80099d6:	bf00      	nop
        }
      }
      break;
 80099d8:	bf00      	nop
    }
  }
  return frequency;
 80099da:	697b      	ldr	r3, [r7, #20]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	371c      	adds	r7, #28
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	40023800 	.word	0x40023800
 80099ec:	00bb8000 	.word	0x00bb8000
 80099f0:	007a1200 	.word	0x007a1200
 80099f4:	00f42400 	.word	0x00f42400

080099f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e056      	b.n	8009ab8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d106      	bne.n	8009a2a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f7fa fd01 	bl	800442c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2202      	movs	r2, #2
 8009a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	431a      	orrs	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	431a      	orrs	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	695b      	ldr	r3, [r3, #20]
 8009a5c:	431a      	orrs	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a66:	431a      	orrs	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	69db      	ldr	r3, [r3, #28]
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	ea42 0103 	orr.w	r1, r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	0c1b      	lsrs	r3, r3, #16
 8009a88:	f003 0104 	and.w	r1, r3, #4
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	430a      	orrs	r2, r1
 8009a96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	69da      	ldr	r2, [r3, #28]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009aa6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	603b      	str	r3, [r7, #0]
 8009acc:	4613      	mov	r3, r2
 8009ace:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d101      	bne.n	8009ae2 <HAL_SPI_Transmit+0x22>
 8009ade:	2302      	movs	r3, #2
 8009ae0:	e11e      	b.n	8009d20 <HAL_SPI_Transmit+0x260>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009aea:	f7fa ff79 	bl	80049e0 <HAL_GetTick>
 8009aee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009af0:	88fb      	ldrh	r3, [r7, #6]
 8009af2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d002      	beq.n	8009b06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009b00:	2302      	movs	r3, #2
 8009b02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b04:	e103      	b.n	8009d0e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <HAL_SPI_Transmit+0x52>
 8009b0c:	88fb      	ldrh	r3, [r7, #6]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d102      	bne.n	8009b18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b16:	e0fa      	b.n	8009d0e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2203      	movs	r2, #3
 8009b1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	88fa      	ldrh	r2, [r7, #6]
 8009b30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	88fa      	ldrh	r2, [r7, #6]
 8009b36:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b5e:	d107      	bne.n	8009b70 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7a:	2b40      	cmp	r3, #64	; 0x40
 8009b7c:	d007      	beq.n	8009b8e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b96:	d14b      	bne.n	8009c30 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d002      	beq.n	8009ba6 <HAL_SPI_Transmit+0xe6>
 8009ba0:	8afb      	ldrh	r3, [r7, #22]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d13e      	bne.n	8009c24 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009baa:	881a      	ldrh	r2, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb6:	1c9a      	adds	r2, r3, #2
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009bca:	e02b      	b.n	8009c24 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f003 0302 	and.w	r3, r3, #2
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d112      	bne.n	8009c00 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bde:	881a      	ldrh	r2, [r3, #0]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bea:	1c9a      	adds	r2, r3, #2
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	86da      	strh	r2, [r3, #54]	; 0x36
 8009bfe:	e011      	b.n	8009c24 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c00:	f7fa feee 	bl	80049e0 <HAL_GetTick>
 8009c04:	4602      	mov	r2, r0
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d803      	bhi.n	8009c18 <HAL_SPI_Transmit+0x158>
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c16:	d102      	bne.n	8009c1e <HAL_SPI_Transmit+0x15e>
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d102      	bne.n	8009c24 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009c22:	e074      	b.n	8009d0e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1ce      	bne.n	8009bcc <HAL_SPI_Transmit+0x10c>
 8009c2e:	e04c      	b.n	8009cca <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d002      	beq.n	8009c3e <HAL_SPI_Transmit+0x17e>
 8009c38:	8afb      	ldrh	r3, [r7, #22]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d140      	bne.n	8009cc0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	330c      	adds	r3, #12
 8009c48:	7812      	ldrb	r2, [r2, #0]
 8009c4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c50:	1c5a      	adds	r2, r3, #1
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009c64:	e02c      	b.n	8009cc0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f003 0302 	and.w	r3, r3, #2
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d113      	bne.n	8009c9c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	330c      	adds	r3, #12
 8009c7e:	7812      	ldrb	r2, [r2, #0]
 8009c80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c86:	1c5a      	adds	r2, r3, #1
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	3b01      	subs	r3, #1
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	86da      	strh	r2, [r3, #54]	; 0x36
 8009c9a:	e011      	b.n	8009cc0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c9c:	f7fa fea0 	bl	80049e0 <HAL_GetTick>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d803      	bhi.n	8009cb4 <HAL_SPI_Transmit+0x1f4>
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb2:	d102      	bne.n	8009cba <HAL_SPI_Transmit+0x1fa>
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d102      	bne.n	8009cc0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009cbe:	e026      	b.n	8009d0e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1cd      	bne.n	8009c66 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cca:	69ba      	ldr	r2, [r7, #24]
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 fa44 	bl	800a15c <SPI_EndRxTxTransaction>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d002      	beq.n	8009ce0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10a      	bne.n	8009cfe <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ce8:	2300      	movs	r3, #0
 8009cea:	613b      	str	r3, [r7, #16]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	613b      	str	r3, [r7, #16]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	613b      	str	r3, [r7, #16]
 8009cfc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	77fb      	strb	r3, [r7, #31]
 8009d0a:	e000      	b.n	8009d0e <HAL_SPI_Transmit+0x24e>
  }

error:
 8009d0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2201      	movs	r2, #1
 8009d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3720      	adds	r7, #32
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08c      	sub	sp, #48	; 0x30
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009d36:	2301      	movs	r3, #1
 8009d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d101      	bne.n	8009d4e <HAL_SPI_TransmitReceive+0x26>
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	e18a      	b.n	800a064 <HAL_SPI_TransmitReceive+0x33c>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d56:	f7fa fe43 	bl	80049e0 <HAL_GetTick>
 8009d5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009d6c:	887b      	ldrh	r3, [r7, #2]
 8009d6e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009d70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d00f      	beq.n	8009d98 <HAL_SPI_TransmitReceive+0x70>
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d7e:	d107      	bne.n	8009d90 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d103      	bne.n	8009d90 <HAL_SPI_TransmitReceive+0x68>
 8009d88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d8c:	2b04      	cmp	r3, #4
 8009d8e:	d003      	beq.n	8009d98 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009d90:	2302      	movs	r3, #2
 8009d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009d96:	e15b      	b.n	800a050 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d005      	beq.n	8009daa <HAL_SPI_TransmitReceive+0x82>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <HAL_SPI_TransmitReceive+0x82>
 8009da4:	887b      	ldrh	r3, [r7, #2]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d103      	bne.n	8009db2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009db0:	e14e      	b.n	800a050 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b04      	cmp	r3, #4
 8009dbc:	d003      	beq.n	8009dc6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2205      	movs	r2, #5
 8009dc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	887a      	ldrh	r2, [r7, #2]
 8009dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	887a      	ldrh	r2, [r7, #2]
 8009ddc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	887a      	ldrh	r2, [r7, #2]
 8009de8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	887a      	ldrh	r2, [r7, #2]
 8009dee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e06:	2b40      	cmp	r3, #64	; 0x40
 8009e08:	d007      	beq.n	8009e1a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e22:	d178      	bne.n	8009f16 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <HAL_SPI_TransmitReceive+0x10a>
 8009e2c:	8b7b      	ldrh	r3, [r7, #26]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d166      	bne.n	8009f00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e36:	881a      	ldrh	r2, [r3, #0]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e42:	1c9a      	adds	r2, r3, #2
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e56:	e053      	b.n	8009f00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	f003 0302 	and.w	r3, r3, #2
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d11b      	bne.n	8009e9e <HAL_SPI_TransmitReceive+0x176>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d016      	beq.n	8009e9e <HAL_SPI_TransmitReceive+0x176>
 8009e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d113      	bne.n	8009e9e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e7a:	881a      	ldrh	r2, [r3, #0]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e86:	1c9a      	adds	r2, r3, #2
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	3b01      	subs	r3, #1
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d119      	bne.n	8009ee0 <HAL_SPI_TransmitReceive+0x1b8>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d014      	beq.n	8009ee0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68da      	ldr	r2, [r3, #12]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec0:	b292      	uxth	r2, r2
 8009ec2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec8:	1c9a      	adds	r2, r3, #2
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009edc:	2301      	movs	r3, #1
 8009ede:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ee0:	f7fa fd7e 	bl	80049e0 <HAL_GetTick>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d807      	bhi.n	8009f00 <HAL_SPI_TransmitReceive+0x1d8>
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef6:	d003      	beq.n	8009f00 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009efe:	e0a7      	b.n	800a050 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1a6      	bne.n	8009e58 <HAL_SPI_TransmitReceive+0x130>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1a1      	bne.n	8009e58 <HAL_SPI_TransmitReceive+0x130>
 8009f14:	e07c      	b.n	800a010 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <HAL_SPI_TransmitReceive+0x1fc>
 8009f1e:	8b7b      	ldrh	r3, [r7, #26]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d16b      	bne.n	8009ffc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	330c      	adds	r3, #12
 8009f2e:	7812      	ldrb	r2, [r2, #0]
 8009f30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	3b01      	subs	r3, #1
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f4a:	e057      	b.n	8009ffc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	f003 0302 	and.w	r3, r3, #2
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d11c      	bne.n	8009f94 <HAL_SPI_TransmitReceive+0x26c>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d017      	beq.n	8009f94 <HAL_SPI_TransmitReceive+0x26c>
 8009f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d114      	bne.n	8009f94 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	330c      	adds	r3, #12
 8009f74:	7812      	ldrb	r2, [r2, #0]
 8009f76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f90:	2300      	movs	r3, #0
 8009f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d119      	bne.n	8009fd6 <HAL_SPI_TransmitReceive+0x2ae>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d014      	beq.n	8009fd6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68da      	ldr	r2, [r3, #12]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb6:	b2d2      	uxtb	r2, r2
 8009fb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbe:	1c5a      	adds	r2, r3, #1
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009fd6:	f7fa fd03 	bl	80049e0 <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d803      	bhi.n	8009fee <HAL_SPI_TransmitReceive+0x2c6>
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fec:	d102      	bne.n	8009ff4 <HAL_SPI_TransmitReceive+0x2cc>
 8009fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d103      	bne.n	8009ffc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009ffa:	e029      	b.n	800a050 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a000:	b29b      	uxth	r3, r3
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1a2      	bne.n	8009f4c <HAL_SPI_TransmitReceive+0x224>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d19d      	bne.n	8009f4c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a012:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f000 f8a1 	bl	800a15c <SPI_EndRxTxTransaction>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d006      	beq.n	800a02e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2220      	movs	r2, #32
 800a02a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a02c:	e010      	b.n	800a050 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10b      	bne.n	800a04e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a036:	2300      	movs	r3, #0
 800a038:	617b      	str	r3, [r7, #20]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	617b      	str	r3, [r7, #20]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	617b      	str	r3, [r7, #20]
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	e000      	b.n	800a050 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a04e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a060:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a064:	4618      	mov	r0, r3
 800a066:	3730      	adds	r7, #48	; 0x30
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a07a:	b2db      	uxtb	r3, r3
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	603b      	str	r3, [r7, #0]
 800a094:	4613      	mov	r3, r2
 800a096:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a098:	e04c      	b.n	800a134 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a0:	d048      	beq.n	800a134 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a0a2:	f7fa fc9d 	bl	80049e0 <HAL_GetTick>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	683a      	ldr	r2, [r7, #0]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d902      	bls.n	800a0b8 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d13d      	bne.n	800a134 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	685a      	ldr	r2, [r3, #4]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a0c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0d0:	d111      	bne.n	800a0f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0da:	d004      	beq.n	800a0e6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0e4:	d107      	bne.n	800a0f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0fe:	d10f      	bne.n	800a120 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a10e:	601a      	str	r2, [r3, #0]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a11e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e00f      	b.n	800a154 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	689a      	ldr	r2, [r3, #8]
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	4013      	ands	r3, r2
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	429a      	cmp	r2, r3
 800a142:	bf0c      	ite	eq
 800a144:	2301      	moveq	r3, #1
 800a146:	2300      	movne	r3, #0
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	461a      	mov	r2, r3
 800a14c:	79fb      	ldrb	r3, [r7, #7]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d1a3      	bne.n	800a09a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b088      	sub	sp, #32
 800a160:	af02      	add	r7, sp, #8
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a168:	4b1b      	ldr	r3, [pc, #108]	; (800a1d8 <SPI_EndRxTxTransaction+0x7c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a1b      	ldr	r2, [pc, #108]	; (800a1dc <SPI_EndRxTxTransaction+0x80>)
 800a16e:	fba2 2303 	umull	r2, r3, r2, r3
 800a172:	0d5b      	lsrs	r3, r3, #21
 800a174:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a178:	fb02 f303 	mul.w	r3, r2, r3
 800a17c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a186:	d112      	bne.n	800a1ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2200      	movs	r2, #0
 800a190:	2180      	movs	r1, #128	; 0x80
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f7ff ff78 	bl	800a088 <SPI_WaitFlagStateUntilTimeout>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d016      	beq.n	800a1cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1a2:	f043 0220 	orr.w	r2, r3, #32
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e00f      	b.n	800a1ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00a      	beq.n	800a1ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1c4:	2b80      	cmp	r3, #128	; 0x80
 800a1c6:	d0f2      	beq.n	800a1ae <SPI_EndRxTxTransaction+0x52>
 800a1c8:	e000      	b.n	800a1cc <SPI_EndRxTxTransaction+0x70>
        break;
 800a1ca:	bf00      	nop
  }

  return HAL_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3718      	adds	r7, #24
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20000010 	.word	0x20000010
 800a1dc:	165e9f81 	.word	0x165e9f81

0800a1e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e01d      	b.n	800a22e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d106      	bne.n	800a20c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7fa f958 	bl	80044bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	3304      	adds	r3, #4
 800a21c:	4619      	mov	r1, r3
 800a21e:	4610      	mov	r0, r2
 800a220:	f000 fa40 	bl	800a6a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a236:	b480      	push	{r7}
 800a238:	b085      	sub	sp, #20
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68da      	ldr	r2, [r3, #12]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f042 0201 	orr.w	r2, r2, #1
 800a24c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	f003 0307 	and.w	r3, r3, #7
 800a258:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b06      	cmp	r3, #6
 800a25e:	d007      	beq.n	800a270 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f042 0201 	orr.w	r2, r2, #1
 800a26e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3714      	adds	r7, #20
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a27e:	b480      	push	{r7}
 800a280:	b083      	sub	sp, #12
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68da      	ldr	r2, [r3, #12]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f022 0201 	bic.w	r2, r2, #1
 800a294:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6a1a      	ldr	r2, [r3, #32]
 800a29c:	f241 1311 	movw	r3, #4369	; 0x1111
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10f      	bne.n	800a2c6 <HAL_TIM_Base_Stop_IT+0x48>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	6a1a      	ldr	r2, [r3, #32]
 800a2ac:	f240 4344 	movw	r3, #1092	; 0x444
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d107      	bne.n	800a2c6 <HAL_TIM_Base_Stop_IT+0x48>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f022 0201 	bic.w	r2, r2, #1
 800a2c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	f003 0302 	and.w	r3, r3, #2
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d122      	bne.n	800a330 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	f003 0302 	and.w	r3, r3, #2
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d11b      	bne.n	800a330 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f06f 0202 	mvn.w	r2, #2
 800a300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	f003 0303 	and.w	r3, r3, #3
 800a312:	2b00      	cmp	r3, #0
 800a314:	d003      	beq.n	800a31e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 f9a5 	bl	800a666 <HAL_TIM_IC_CaptureCallback>
 800a31c:	e005      	b.n	800a32a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f997 	bl	800a652 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f9a8 	bl	800a67a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	f003 0304 	and.w	r3, r3, #4
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	d122      	bne.n	800a384 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	f003 0304 	and.w	r3, r3, #4
 800a348:	2b04      	cmp	r3, #4
 800a34a:	d11b      	bne.n	800a384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f06f 0204 	mvn.w	r2, #4
 800a354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2202      	movs	r2, #2
 800a35a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f97b 	bl	800a666 <HAL_TIM_IC_CaptureCallback>
 800a370:	e005      	b.n	800a37e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f96d 	bl	800a652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f97e 	bl	800a67a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	f003 0308 	and.w	r3, r3, #8
 800a38e:	2b08      	cmp	r3, #8
 800a390:	d122      	bne.n	800a3d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	f003 0308 	and.w	r3, r3, #8
 800a39c:	2b08      	cmp	r3, #8
 800a39e:	d11b      	bne.n	800a3d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f06f 0208 	mvn.w	r2, #8
 800a3a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2204      	movs	r2, #4
 800a3ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	69db      	ldr	r3, [r3, #28]
 800a3b6:	f003 0303 	and.w	r3, r3, #3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f951 	bl	800a666 <HAL_TIM_IC_CaptureCallback>
 800a3c4:	e005      	b.n	800a3d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f943 	bl	800a652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f954 	bl	800a67a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	f003 0310 	and.w	r3, r3, #16
 800a3e2:	2b10      	cmp	r3, #16
 800a3e4:	d122      	bne.n	800a42c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	f003 0310 	and.w	r3, r3, #16
 800a3f0:	2b10      	cmp	r3, #16
 800a3f2:	d11b      	bne.n	800a42c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f06f 0210 	mvn.w	r2, #16
 800a3fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2208      	movs	r2, #8
 800a402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	69db      	ldr	r3, [r3, #28]
 800a40a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f927 	bl	800a666 <HAL_TIM_IC_CaptureCallback>
 800a418:	e005      	b.n	800a426 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f919 	bl	800a652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f92a 	bl	800a67a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	f003 0301 	and.w	r3, r3, #1
 800a436:	2b01      	cmp	r3, #1
 800a438:	d10e      	bne.n	800a458 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	f003 0301 	and.w	r3, r3, #1
 800a444:	2b01      	cmp	r3, #1
 800a446:	d107      	bne.n	800a458 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f06f 0201 	mvn.w	r2, #1
 800a450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7f9 f8d6 	bl	8003604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a462:	2b80      	cmp	r3, #128	; 0x80
 800a464:	d10e      	bne.n	800a484 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a470:	2b80      	cmp	r3, #128	; 0x80
 800a472:	d107      	bne.n	800a484 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a47c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fad0 	bl	800aa24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48e:	2b40      	cmp	r3, #64	; 0x40
 800a490:	d10e      	bne.n	800a4b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a49c:	2b40      	cmp	r3, #64	; 0x40
 800a49e:	d107      	bne.n	800a4b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f8ef 	bl	800a68e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	f003 0320 	and.w	r3, r3, #32
 800a4ba:	2b20      	cmp	r3, #32
 800a4bc:	d10e      	bne.n	800a4dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f003 0320 	and.w	r3, r3, #32
 800a4c8:	2b20      	cmp	r3, #32
 800a4ca:	d107      	bne.n	800a4dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f06f 0220 	mvn.w	r2, #32
 800a4d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fa9a 	bl	800aa10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4dc:	bf00      	nop
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d101      	bne.n	800a4fc <HAL_TIM_ConfigClockSource+0x18>
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	e0a6      	b.n	800a64a <HAL_TIM_ConfigClockSource+0x166>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2202      	movs	r2, #2
 800a508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a51a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a522:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b40      	cmp	r3, #64	; 0x40
 800a532:	d067      	beq.n	800a604 <HAL_TIM_ConfigClockSource+0x120>
 800a534:	2b40      	cmp	r3, #64	; 0x40
 800a536:	d80b      	bhi.n	800a550 <HAL_TIM_ConfigClockSource+0x6c>
 800a538:	2b10      	cmp	r3, #16
 800a53a:	d073      	beq.n	800a624 <HAL_TIM_ConfigClockSource+0x140>
 800a53c:	2b10      	cmp	r3, #16
 800a53e:	d802      	bhi.n	800a546 <HAL_TIM_ConfigClockSource+0x62>
 800a540:	2b00      	cmp	r3, #0
 800a542:	d06f      	beq.n	800a624 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a544:	e078      	b.n	800a638 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a546:	2b20      	cmp	r3, #32
 800a548:	d06c      	beq.n	800a624 <HAL_TIM_ConfigClockSource+0x140>
 800a54a:	2b30      	cmp	r3, #48	; 0x30
 800a54c:	d06a      	beq.n	800a624 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a54e:	e073      	b.n	800a638 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a550:	2b70      	cmp	r3, #112	; 0x70
 800a552:	d00d      	beq.n	800a570 <HAL_TIM_ConfigClockSource+0x8c>
 800a554:	2b70      	cmp	r3, #112	; 0x70
 800a556:	d804      	bhi.n	800a562 <HAL_TIM_ConfigClockSource+0x7e>
 800a558:	2b50      	cmp	r3, #80	; 0x50
 800a55a:	d033      	beq.n	800a5c4 <HAL_TIM_ConfigClockSource+0xe0>
 800a55c:	2b60      	cmp	r3, #96	; 0x60
 800a55e:	d041      	beq.n	800a5e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a560:	e06a      	b.n	800a638 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a566:	d066      	beq.n	800a636 <HAL_TIM_ConfigClockSource+0x152>
 800a568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a56c:	d017      	beq.n	800a59e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a56e:	e063      	b.n	800a638 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6818      	ldr	r0, [r3, #0]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	6899      	ldr	r1, [r3, #8]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	f000 f9aa 	bl	800a8d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a592:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	609a      	str	r2, [r3, #8]
      break;
 800a59c:	e04c      	b.n	800a638 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	6899      	ldr	r1, [r3, #8]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	f000 f993 	bl	800a8d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	689a      	ldr	r2, [r3, #8]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5c0:	609a      	str	r2, [r3, #8]
      break;
 800a5c2:	e039      	b.n	800a638 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6818      	ldr	r0, [r3, #0]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	6859      	ldr	r1, [r3, #4]
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	f000 f907 	bl	800a7e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2150      	movs	r1, #80	; 0x50
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 f960 	bl	800a8a2 <TIM_ITRx_SetConfig>
      break;
 800a5e2:	e029      	b.n	800a638 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6818      	ldr	r0, [r3, #0]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	6859      	ldr	r1, [r3, #4]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	f000 f926 	bl	800a842 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2160      	movs	r1, #96	; 0x60
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 f950 	bl	800a8a2 <TIM_ITRx_SetConfig>
      break;
 800a602:	e019      	b.n	800a638 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6818      	ldr	r0, [r3, #0]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	6859      	ldr	r1, [r3, #4]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	461a      	mov	r2, r3
 800a612:	f000 f8e7 	bl	800a7e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2140      	movs	r1, #64	; 0x40
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 f940 	bl	800a8a2 <TIM_ITRx_SetConfig>
      break;
 800a622:	e009      	b.n	800a638 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f000 f937 	bl	800a8a2 <TIM_ITRx_SetConfig>
      break;
 800a634:	e000      	b.n	800a638 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a636:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a652:	b480      	push	{r7}
 800a654:	b083      	sub	sp, #12
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a65a:	bf00      	nop
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a666:	b480      	push	{r7}
 800a668:	b083      	sub	sp, #12
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a66e:	bf00      	nop
 800a670:	370c      	adds	r7, #12
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b083      	sub	sp, #12
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a682:	bf00      	nop
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a68e:	b480      	push	{r7}
 800a690:	b083      	sub	sp, #12
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a696:	bf00      	nop
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
	...

0800a6a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a40      	ldr	r2, [pc, #256]	; (800a7b8 <TIM_Base_SetConfig+0x114>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d013      	beq.n	800a6e4 <TIM_Base_SetConfig+0x40>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6c2:	d00f      	beq.n	800a6e4 <TIM_Base_SetConfig+0x40>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a3d      	ldr	r2, [pc, #244]	; (800a7bc <TIM_Base_SetConfig+0x118>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d00b      	beq.n	800a6e4 <TIM_Base_SetConfig+0x40>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a3c      	ldr	r2, [pc, #240]	; (800a7c0 <TIM_Base_SetConfig+0x11c>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d007      	beq.n	800a6e4 <TIM_Base_SetConfig+0x40>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a3b      	ldr	r2, [pc, #236]	; (800a7c4 <TIM_Base_SetConfig+0x120>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d003      	beq.n	800a6e4 <TIM_Base_SetConfig+0x40>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a3a      	ldr	r2, [pc, #232]	; (800a7c8 <TIM_Base_SetConfig+0x124>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d108      	bne.n	800a6f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a2f      	ldr	r2, [pc, #188]	; (800a7b8 <TIM_Base_SetConfig+0x114>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d02b      	beq.n	800a756 <TIM_Base_SetConfig+0xb2>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a704:	d027      	beq.n	800a756 <TIM_Base_SetConfig+0xb2>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a2c      	ldr	r2, [pc, #176]	; (800a7bc <TIM_Base_SetConfig+0x118>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d023      	beq.n	800a756 <TIM_Base_SetConfig+0xb2>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a2b      	ldr	r2, [pc, #172]	; (800a7c0 <TIM_Base_SetConfig+0x11c>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d01f      	beq.n	800a756 <TIM_Base_SetConfig+0xb2>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a2a      	ldr	r2, [pc, #168]	; (800a7c4 <TIM_Base_SetConfig+0x120>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d01b      	beq.n	800a756 <TIM_Base_SetConfig+0xb2>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a29      	ldr	r2, [pc, #164]	; (800a7c8 <TIM_Base_SetConfig+0x124>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d017      	beq.n	800a756 <TIM_Base_SetConfig+0xb2>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a28      	ldr	r2, [pc, #160]	; (800a7cc <TIM_Base_SetConfig+0x128>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d013      	beq.n	800a756 <TIM_Base_SetConfig+0xb2>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a27      	ldr	r2, [pc, #156]	; (800a7d0 <TIM_Base_SetConfig+0x12c>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d00f      	beq.n	800a756 <TIM_Base_SetConfig+0xb2>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a26      	ldr	r2, [pc, #152]	; (800a7d4 <TIM_Base_SetConfig+0x130>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d00b      	beq.n	800a756 <TIM_Base_SetConfig+0xb2>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a25      	ldr	r2, [pc, #148]	; (800a7d8 <TIM_Base_SetConfig+0x134>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d007      	beq.n	800a756 <TIM_Base_SetConfig+0xb2>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a24      	ldr	r2, [pc, #144]	; (800a7dc <TIM_Base_SetConfig+0x138>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d003      	beq.n	800a756 <TIM_Base_SetConfig+0xb2>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a23      	ldr	r2, [pc, #140]	; (800a7e0 <TIM_Base_SetConfig+0x13c>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d108      	bne.n	800a768 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a75c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	4313      	orrs	r3, r2
 800a766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	695b      	ldr	r3, [r3, #20]
 800a772:	4313      	orrs	r3, r2
 800a774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	689a      	ldr	r2, [r3, #8]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a0a      	ldr	r2, [pc, #40]	; (800a7b8 <TIM_Base_SetConfig+0x114>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d003      	beq.n	800a79c <TIM_Base_SetConfig+0xf8>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a0c      	ldr	r2, [pc, #48]	; (800a7c8 <TIM_Base_SetConfig+0x124>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d103      	bne.n	800a7a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	691a      	ldr	r2, [r3, #16]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	615a      	str	r2, [r3, #20]
}
 800a7aa:	bf00      	nop
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	40010000 	.word	0x40010000
 800a7bc:	40000400 	.word	0x40000400
 800a7c0:	40000800 	.word	0x40000800
 800a7c4:	40000c00 	.word	0x40000c00
 800a7c8:	40010400 	.word	0x40010400
 800a7cc:	40014000 	.word	0x40014000
 800a7d0:	40014400 	.word	0x40014400
 800a7d4:	40014800 	.word	0x40014800
 800a7d8:	40001800 	.word	0x40001800
 800a7dc:	40001c00 	.word	0x40001c00
 800a7e0:	40002000 	.word	0x40002000

0800a7e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6a1b      	ldr	r3, [r3, #32]
 800a7f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6a1b      	ldr	r3, [r3, #32]
 800a7fa:	f023 0201 	bic.w	r2, r3, #1
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a80e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	011b      	lsls	r3, r3, #4
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	4313      	orrs	r3, r2
 800a818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	f023 030a 	bic.w	r3, r3, #10
 800a820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	4313      	orrs	r3, r2
 800a828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	621a      	str	r2, [r3, #32]
}
 800a836:	bf00      	nop
 800a838:	371c      	adds	r7, #28
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a842:	b480      	push	{r7}
 800a844:	b087      	sub	sp, #28
 800a846:	af00      	add	r7, sp, #0
 800a848:	60f8      	str	r0, [r7, #12]
 800a84a:	60b9      	str	r1, [r7, #8]
 800a84c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	f023 0210 	bic.w	r2, r3, #16
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6a1b      	ldr	r3, [r3, #32]
 800a864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a86c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	031b      	lsls	r3, r3, #12
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	4313      	orrs	r3, r2
 800a876:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a87e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	011b      	lsls	r3, r3, #4
 800a884:	693a      	ldr	r2, [r7, #16]
 800a886:	4313      	orrs	r3, r2
 800a888:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	621a      	str	r2, [r3, #32]
}
 800a896:	bf00      	nop
 800a898:	371c      	adds	r7, #28
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b085      	sub	sp, #20
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	f043 0307 	orr.w	r3, r3, #7
 800a8c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	609a      	str	r2, [r3, #8]
}
 800a8cc:	bf00      	nop
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b087      	sub	sp, #28
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
 800a8e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	021a      	lsls	r2, r3, #8
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	431a      	orrs	r2, r3
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	4313      	orrs	r3, r2
 800a904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	697a      	ldr	r2, [r7, #20]
 800a90a:	609a      	str	r2, [r3, #8]
}
 800a90c:	bf00      	nop
 800a90e:	371c      	adds	r7, #28
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d101      	bne.n	800a930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a92c:	2302      	movs	r3, #2
 800a92e:	e05a      	b.n	800a9e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2202      	movs	r2, #2
 800a93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	4313      	orrs	r3, r2
 800a960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a21      	ldr	r2, [pc, #132]	; (800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d022      	beq.n	800a9ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a97c:	d01d      	beq.n	800a9ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a1d      	ldr	r2, [pc, #116]	; (800a9f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d018      	beq.n	800a9ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a1b      	ldr	r2, [pc, #108]	; (800a9fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d013      	beq.n	800a9ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a1a      	ldr	r2, [pc, #104]	; (800aa00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d00e      	beq.n	800a9ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a18      	ldr	r2, [pc, #96]	; (800aa04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d009      	beq.n	800a9ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a17      	ldr	r2, [pc, #92]	; (800aa08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d004      	beq.n	800a9ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a15      	ldr	r2, [pc, #84]	; (800aa0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d10c      	bne.n	800a9d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	40010000 	.word	0x40010000
 800a9f8:	40000400 	.word	0x40000400
 800a9fc:	40000800 	.word	0x40000800
 800aa00:	40000c00 	.word	0x40000c00
 800aa04:	40010400 	.word	0x40010400
 800aa08:	40014000 	.word	0x40014000
 800aa0c:	40001800 	.word	0x40001800

0800aa10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d101      	bne.n	800aa4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e03f      	b.n	800aaca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d106      	bne.n	800aa64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7f9 fd72 	bl	8004548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2224      	movs	r2, #36	; 0x24
 800aa68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	68da      	ldr	r2, [r3, #12]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 faf9 	bl	800b074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	691a      	ldr	r2, [r3, #16]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	695a      	ldr	r2, [r3, #20]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aaa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68da      	ldr	r2, [r3, #12]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2220      	movs	r2, #32
 800aabc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2220      	movs	r2, #32
 800aac4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b085      	sub	sp, #20
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	60f8      	str	r0, [r7, #12]
 800aada:	60b9      	str	r1, [r7, #8]
 800aadc:	4613      	mov	r3, r2
 800aade:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	2b20      	cmp	r3, #32
 800aaea:	d130      	bne.n	800ab4e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d002      	beq.n	800aaf8 <HAL_UART_Transmit_IT+0x26>
 800aaf2:	88fb      	ldrh	r3, [r7, #6]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d101      	bne.n	800aafc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e029      	b.n	800ab50 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d101      	bne.n	800ab0a <HAL_UART_Transmit_IT+0x38>
 800ab06:	2302      	movs	r3, #2
 800ab08:	e022      	b.n	800ab50 <HAL_UART_Transmit_IT+0x7e>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	88fa      	ldrh	r2, [r7, #6]
 800ab1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	88fa      	ldrh	r2, [r7, #6]
 800ab22:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2221      	movs	r2, #33	; 0x21
 800ab2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68da      	ldr	r2, [r3, #12]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ab48:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	e000      	b.n	800ab50 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800ab4e:	2302      	movs	r3, #2
  }
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	4613      	mov	r3, r2
 800ab68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b20      	cmp	r3, #32
 800ab74:	d140      	bne.n	800abf8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <HAL_UART_Receive_IT+0x26>
 800ab7c:	88fb      	ldrh	r3, [r7, #6]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e039      	b.n	800abfa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d101      	bne.n	800ab94 <HAL_UART_Receive_IT+0x38>
 800ab90:	2302      	movs	r3, #2
 800ab92:	e032      	b.n	800abfa <HAL_UART_Receive_IT+0x9e>
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	88fa      	ldrh	r2, [r7, #6]
 800aba6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	88fa      	ldrh	r2, [r7, #6]
 800abac:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2222      	movs	r2, #34	; 0x22
 800abb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	68da      	ldr	r2, [r3, #12]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abd2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	695a      	ldr	r2, [r3, #20]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f042 0201 	orr.w	r2, r2, #1
 800abe2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68da      	ldr	r2, [r3, #12]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f042 0220 	orr.w	r2, r2, #32
 800abf2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	e000      	b.n	800abfa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800abf8:	2302      	movs	r3, #2
  }
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
	...

0800ac08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b088      	sub	sp, #32
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	f003 030f 	and.w	r3, r3, #15
 800ac36:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d10d      	bne.n	800ac5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	f003 0320 	and.w	r3, r3, #32
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d008      	beq.n	800ac5a <HAL_UART_IRQHandler+0x52>
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	f003 0320 	and.w	r3, r3, #32
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d003      	beq.n	800ac5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f98c 	bl	800af70 <UART_Receive_IT>
      return;
 800ac58:	e0d1      	b.n	800adfe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f000 80b0 	beq.w	800adc2 <HAL_UART_IRQHandler+0x1ba>
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d105      	bne.n	800ac78 <HAL_UART_IRQHandler+0x70>
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f000 80a5 	beq.w	800adc2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	f003 0301 	and.w	r3, r3, #1
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00a      	beq.n	800ac98 <HAL_UART_IRQHandler+0x90>
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d005      	beq.n	800ac98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac90:	f043 0201 	orr.w	r2, r3, #1
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	f003 0304 	and.w	r3, r3, #4
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00a      	beq.n	800acb8 <HAL_UART_IRQHandler+0xb0>
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d005      	beq.n	800acb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acb0:	f043 0202 	orr.w	r2, r3, #2
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	f003 0302 	and.w	r3, r3, #2
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00a      	beq.n	800acd8 <HAL_UART_IRQHandler+0xd0>
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	f003 0301 	and.w	r3, r3, #1
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d005      	beq.n	800acd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acd0:	f043 0204 	orr.w	r2, r3, #4
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	f003 0308 	and.w	r3, r3, #8
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00f      	beq.n	800ad02 <HAL_UART_IRQHandler+0xfa>
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	f003 0320 	and.w	r3, r3, #32
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d104      	bne.n	800acf6 <HAL_UART_IRQHandler+0xee>
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	f003 0301 	and.w	r3, r3, #1
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d005      	beq.n	800ad02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acfa:	f043 0208 	orr.w	r2, r3, #8
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d078      	beq.n	800adfc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	f003 0320 	and.w	r3, r3, #32
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d007      	beq.n	800ad24 <HAL_UART_IRQHandler+0x11c>
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	f003 0320 	and.w	r3, r3, #32
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f926 	bl	800af70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	695b      	ldr	r3, [r3, #20]
 800ad2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad2e:	2b40      	cmp	r3, #64	; 0x40
 800ad30:	bf0c      	ite	eq
 800ad32:	2301      	moveq	r3, #1
 800ad34:	2300      	movne	r3, #0
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3e:	f003 0308 	and.w	r3, r3, #8
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d102      	bne.n	800ad4c <HAL_UART_IRQHandler+0x144>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d031      	beq.n	800adb0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f86f 	bl	800ae30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad5c:	2b40      	cmp	r3, #64	; 0x40
 800ad5e:	d123      	bne.n	800ada8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	695a      	ldr	r2, [r3, #20]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad6e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d013      	beq.n	800ada0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad7c:	4a21      	ldr	r2, [pc, #132]	; (800ae04 <HAL_UART_IRQHandler+0x1fc>)
 800ad7e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7fa ff11 	bl	8005bac <HAL_DMA_Abort_IT>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d016      	beq.n	800adbe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad9e:	e00e      	b.n	800adbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f83b 	bl	800ae1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ada6:	e00a      	b.n	800adbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 f837 	bl	800ae1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adae:	e006      	b.n	800adbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f833 	bl	800ae1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800adbc:	e01e      	b.n	800adfc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adbe:	bf00      	nop
    return;
 800adc0:	e01c      	b.n	800adfc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d008      	beq.n	800adde <HAL_UART_IRQHandler+0x1d6>
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800add2:	2b00      	cmp	r3, #0
 800add4:	d003      	beq.n	800adde <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f85c 	bl	800ae94 <UART_Transmit_IT>
    return;
 800addc:	e00f      	b.n	800adfe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00a      	beq.n	800adfe <HAL_UART_IRQHandler+0x1f6>
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d005      	beq.n	800adfe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f8a4 	bl	800af40 <UART_EndTransmit_IT>
    return;
 800adf8:	bf00      	nop
 800adfa:	e000      	b.n	800adfe <HAL_UART_IRQHandler+0x1f6>
    return;
 800adfc:	bf00      	nop
  }
}
 800adfe:	3720      	adds	r7, #32
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	0800ae6d 	.word	0x0800ae6d

0800ae08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68da      	ldr	r2, [r3, #12]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ae46:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	695a      	ldr	r2, [r3, #20]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f022 0201 	bic.w	r2, r2, #1
 800ae56:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2220      	movs	r2, #32
 800ae5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f7ff ffc8 	bl	800ae1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae8c:	bf00      	nop
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b21      	cmp	r3, #33	; 0x21
 800aea6:	d144      	bne.n	800af32 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeb0:	d11a      	bne.n	800aee8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	881b      	ldrh	r3, [r3, #0]
 800aebc:	461a      	mov	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aec6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	691b      	ldr	r3, [r3, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d105      	bne.n	800aedc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	1c9a      	adds	r2, r3, #2
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	621a      	str	r2, [r3, #32]
 800aeda:	e00e      	b.n	800aefa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a1b      	ldr	r3, [r3, #32]
 800aee0:	1c5a      	adds	r2, r3, #1
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	621a      	str	r2, [r3, #32]
 800aee6:	e008      	b.n	800aefa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a1b      	ldr	r3, [r3, #32]
 800aeec:	1c59      	adds	r1, r3, #1
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	6211      	str	r1, [r2, #32]
 800aef2:	781a      	ldrb	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aefe:	b29b      	uxth	r3, r3
 800af00:	3b01      	subs	r3, #1
 800af02:	b29b      	uxth	r3, r3
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	4619      	mov	r1, r3
 800af08:	84d1      	strh	r1, [r2, #38]	; 0x26
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d10f      	bne.n	800af2e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68da      	ldr	r2, [r3, #12]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68da      	ldr	r2, [r3, #12]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	e000      	b.n	800af34 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800af32:	2302      	movs	r3, #2
  }
}
 800af34:	4618      	mov	r0, r3
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68da      	ldr	r2, [r3, #12]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2220      	movs	r2, #32
 800af5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f7ff ff51 	bl	800ae08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800af66:	2300      	movs	r3, #0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	2b22      	cmp	r3, #34	; 0x22
 800af82:	d171      	bne.n	800b068 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af8c:	d123      	bne.n	800afd6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af92:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10e      	bne.n	800afba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb2:	1c9a      	adds	r2, r3, #2
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	629a      	str	r2, [r3, #40]	; 0x28
 800afb8:	e029      	b.n	800b00e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afce:	1c5a      	adds	r2, r3, #1
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	629a      	str	r2, [r3, #40]	; 0x28
 800afd4:	e01b      	b.n	800b00e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d10a      	bne.n	800aff4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	6858      	ldr	r0, [r3, #4]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe8:	1c59      	adds	r1, r3, #1
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	6291      	str	r1, [r2, #40]	; 0x28
 800afee:	b2c2      	uxtb	r2, r0
 800aff0:	701a      	strb	r2, [r3, #0]
 800aff2:	e00c      	b.n	800b00e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	b2da      	uxtb	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b000:	1c58      	adds	r0, r3, #1
 800b002:	6879      	ldr	r1, [r7, #4]
 800b004:	6288      	str	r0, [r1, #40]	; 0x28
 800b006:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b00a:	b2d2      	uxtb	r2, r2
 800b00c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b012:	b29b      	uxth	r3, r3
 800b014:	3b01      	subs	r3, #1
 800b016:	b29b      	uxth	r3, r3
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	4619      	mov	r1, r3
 800b01c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d120      	bne.n	800b064 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68da      	ldr	r2, [r3, #12]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f022 0220 	bic.w	r2, r2, #32
 800b030:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68da      	ldr	r2, [r3, #12]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b040:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	695a      	ldr	r2, [r3, #20]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f022 0201 	bic.w	r2, r2, #1
 800b050:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2220      	movs	r2, #32
 800b056:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f7f8 fb80 	bl	8003760 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	e002      	b.n	800b06a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	e000      	b.n	800b06a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b068:	2302      	movs	r3, #2
  }
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
	...

0800b074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b078:	b085      	sub	sp, #20
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68da      	ldr	r2, [r3, #12]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	430a      	orrs	r2, r1
 800b092:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	689a      	ldr	r2, [r3, #8]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	431a      	orrs	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	69db      	ldr	r3, [r3, #28]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b0b6:	f023 030c 	bic.w	r3, r3, #12
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	6812      	ldr	r2, [r2, #0]
 800b0be:	68f9      	ldr	r1, [r7, #12]
 800b0c0:	430b      	orrs	r3, r1
 800b0c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	695b      	ldr	r3, [r3, #20]
 800b0ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	699a      	ldr	r2, [r3, #24]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	69db      	ldr	r3, [r3, #28]
 800b0de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0e2:	f040 818b 	bne.w	800b3fc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4ac1      	ldr	r2, [pc, #772]	; (800b3f0 <UART_SetConfig+0x37c>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d005      	beq.n	800b0fc <UART_SetConfig+0x88>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4abf      	ldr	r2, [pc, #764]	; (800b3f4 <UART_SetConfig+0x380>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	f040 80bd 	bne.w	800b276 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b0fc:	f7fe fb2a 	bl	8009754 <HAL_RCC_GetPCLK2Freq>
 800b100:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	461d      	mov	r5, r3
 800b106:	f04f 0600 	mov.w	r6, #0
 800b10a:	46a8      	mov	r8, r5
 800b10c:	46b1      	mov	r9, r6
 800b10e:	eb18 0308 	adds.w	r3, r8, r8
 800b112:	eb49 0409 	adc.w	r4, r9, r9
 800b116:	4698      	mov	r8, r3
 800b118:	46a1      	mov	r9, r4
 800b11a:	eb18 0805 	adds.w	r8, r8, r5
 800b11e:	eb49 0906 	adc.w	r9, r9, r6
 800b122:	f04f 0100 	mov.w	r1, #0
 800b126:	f04f 0200 	mov.w	r2, #0
 800b12a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b12e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b132:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b136:	4688      	mov	r8, r1
 800b138:	4691      	mov	r9, r2
 800b13a:	eb18 0005 	adds.w	r0, r8, r5
 800b13e:	eb49 0106 	adc.w	r1, r9, r6
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	461d      	mov	r5, r3
 800b148:	f04f 0600 	mov.w	r6, #0
 800b14c:	196b      	adds	r3, r5, r5
 800b14e:	eb46 0406 	adc.w	r4, r6, r6
 800b152:	461a      	mov	r2, r3
 800b154:	4623      	mov	r3, r4
 800b156:	f7f5 f83f 	bl	80001d8 <__aeabi_uldivmod>
 800b15a:	4603      	mov	r3, r0
 800b15c:	460c      	mov	r4, r1
 800b15e:	461a      	mov	r2, r3
 800b160:	4ba5      	ldr	r3, [pc, #660]	; (800b3f8 <UART_SetConfig+0x384>)
 800b162:	fba3 2302 	umull	r2, r3, r3, r2
 800b166:	095b      	lsrs	r3, r3, #5
 800b168:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	461d      	mov	r5, r3
 800b170:	f04f 0600 	mov.w	r6, #0
 800b174:	46a9      	mov	r9, r5
 800b176:	46b2      	mov	sl, r6
 800b178:	eb19 0309 	adds.w	r3, r9, r9
 800b17c:	eb4a 040a 	adc.w	r4, sl, sl
 800b180:	4699      	mov	r9, r3
 800b182:	46a2      	mov	sl, r4
 800b184:	eb19 0905 	adds.w	r9, r9, r5
 800b188:	eb4a 0a06 	adc.w	sl, sl, r6
 800b18c:	f04f 0100 	mov.w	r1, #0
 800b190:	f04f 0200 	mov.w	r2, #0
 800b194:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b198:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b19c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b1a0:	4689      	mov	r9, r1
 800b1a2:	4692      	mov	sl, r2
 800b1a4:	eb19 0005 	adds.w	r0, r9, r5
 800b1a8:	eb4a 0106 	adc.w	r1, sl, r6
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	461d      	mov	r5, r3
 800b1b2:	f04f 0600 	mov.w	r6, #0
 800b1b6:	196b      	adds	r3, r5, r5
 800b1b8:	eb46 0406 	adc.w	r4, r6, r6
 800b1bc:	461a      	mov	r2, r3
 800b1be:	4623      	mov	r3, r4
 800b1c0:	f7f5 f80a 	bl	80001d8 <__aeabi_uldivmod>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	4b8b      	ldr	r3, [pc, #556]	; (800b3f8 <UART_SetConfig+0x384>)
 800b1cc:	fba3 1302 	umull	r1, r3, r3, r2
 800b1d0:	095b      	lsrs	r3, r3, #5
 800b1d2:	2164      	movs	r1, #100	; 0x64
 800b1d4:	fb01 f303 	mul.w	r3, r1, r3
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	00db      	lsls	r3, r3, #3
 800b1dc:	3332      	adds	r3, #50	; 0x32
 800b1de:	4a86      	ldr	r2, [pc, #536]	; (800b3f8 <UART_SetConfig+0x384>)
 800b1e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1e4:	095b      	lsrs	r3, r3, #5
 800b1e6:	005b      	lsls	r3, r3, #1
 800b1e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b1ec:	4498      	add	r8, r3
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	461d      	mov	r5, r3
 800b1f2:	f04f 0600 	mov.w	r6, #0
 800b1f6:	46a9      	mov	r9, r5
 800b1f8:	46b2      	mov	sl, r6
 800b1fa:	eb19 0309 	adds.w	r3, r9, r9
 800b1fe:	eb4a 040a 	adc.w	r4, sl, sl
 800b202:	4699      	mov	r9, r3
 800b204:	46a2      	mov	sl, r4
 800b206:	eb19 0905 	adds.w	r9, r9, r5
 800b20a:	eb4a 0a06 	adc.w	sl, sl, r6
 800b20e:	f04f 0100 	mov.w	r1, #0
 800b212:	f04f 0200 	mov.w	r2, #0
 800b216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b21a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b21e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b222:	4689      	mov	r9, r1
 800b224:	4692      	mov	sl, r2
 800b226:	eb19 0005 	adds.w	r0, r9, r5
 800b22a:	eb4a 0106 	adc.w	r1, sl, r6
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	461d      	mov	r5, r3
 800b234:	f04f 0600 	mov.w	r6, #0
 800b238:	196b      	adds	r3, r5, r5
 800b23a:	eb46 0406 	adc.w	r4, r6, r6
 800b23e:	461a      	mov	r2, r3
 800b240:	4623      	mov	r3, r4
 800b242:	f7f4 ffc9 	bl	80001d8 <__aeabi_uldivmod>
 800b246:	4603      	mov	r3, r0
 800b248:	460c      	mov	r4, r1
 800b24a:	461a      	mov	r2, r3
 800b24c:	4b6a      	ldr	r3, [pc, #424]	; (800b3f8 <UART_SetConfig+0x384>)
 800b24e:	fba3 1302 	umull	r1, r3, r3, r2
 800b252:	095b      	lsrs	r3, r3, #5
 800b254:	2164      	movs	r1, #100	; 0x64
 800b256:	fb01 f303 	mul.w	r3, r1, r3
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	00db      	lsls	r3, r3, #3
 800b25e:	3332      	adds	r3, #50	; 0x32
 800b260:	4a65      	ldr	r2, [pc, #404]	; (800b3f8 <UART_SetConfig+0x384>)
 800b262:	fba2 2303 	umull	r2, r3, r2, r3
 800b266:	095b      	lsrs	r3, r3, #5
 800b268:	f003 0207 	and.w	r2, r3, #7
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4442      	add	r2, r8
 800b272:	609a      	str	r2, [r3, #8]
 800b274:	e26f      	b.n	800b756 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b276:	f7fe fa59 	bl	800972c <HAL_RCC_GetPCLK1Freq>
 800b27a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	461d      	mov	r5, r3
 800b280:	f04f 0600 	mov.w	r6, #0
 800b284:	46a8      	mov	r8, r5
 800b286:	46b1      	mov	r9, r6
 800b288:	eb18 0308 	adds.w	r3, r8, r8
 800b28c:	eb49 0409 	adc.w	r4, r9, r9
 800b290:	4698      	mov	r8, r3
 800b292:	46a1      	mov	r9, r4
 800b294:	eb18 0805 	adds.w	r8, r8, r5
 800b298:	eb49 0906 	adc.w	r9, r9, r6
 800b29c:	f04f 0100 	mov.w	r1, #0
 800b2a0:	f04f 0200 	mov.w	r2, #0
 800b2a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b2a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b2ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b2b0:	4688      	mov	r8, r1
 800b2b2:	4691      	mov	r9, r2
 800b2b4:	eb18 0005 	adds.w	r0, r8, r5
 800b2b8:	eb49 0106 	adc.w	r1, r9, r6
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	461d      	mov	r5, r3
 800b2c2:	f04f 0600 	mov.w	r6, #0
 800b2c6:	196b      	adds	r3, r5, r5
 800b2c8:	eb46 0406 	adc.w	r4, r6, r6
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	4623      	mov	r3, r4
 800b2d0:	f7f4 ff82 	bl	80001d8 <__aeabi_uldivmod>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	461a      	mov	r2, r3
 800b2da:	4b47      	ldr	r3, [pc, #284]	; (800b3f8 <UART_SetConfig+0x384>)
 800b2dc:	fba3 2302 	umull	r2, r3, r3, r2
 800b2e0:	095b      	lsrs	r3, r3, #5
 800b2e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	461d      	mov	r5, r3
 800b2ea:	f04f 0600 	mov.w	r6, #0
 800b2ee:	46a9      	mov	r9, r5
 800b2f0:	46b2      	mov	sl, r6
 800b2f2:	eb19 0309 	adds.w	r3, r9, r9
 800b2f6:	eb4a 040a 	adc.w	r4, sl, sl
 800b2fa:	4699      	mov	r9, r3
 800b2fc:	46a2      	mov	sl, r4
 800b2fe:	eb19 0905 	adds.w	r9, r9, r5
 800b302:	eb4a 0a06 	adc.w	sl, sl, r6
 800b306:	f04f 0100 	mov.w	r1, #0
 800b30a:	f04f 0200 	mov.w	r2, #0
 800b30e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b312:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b316:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b31a:	4689      	mov	r9, r1
 800b31c:	4692      	mov	sl, r2
 800b31e:	eb19 0005 	adds.w	r0, r9, r5
 800b322:	eb4a 0106 	adc.w	r1, sl, r6
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	461d      	mov	r5, r3
 800b32c:	f04f 0600 	mov.w	r6, #0
 800b330:	196b      	adds	r3, r5, r5
 800b332:	eb46 0406 	adc.w	r4, r6, r6
 800b336:	461a      	mov	r2, r3
 800b338:	4623      	mov	r3, r4
 800b33a:	f7f4 ff4d 	bl	80001d8 <__aeabi_uldivmod>
 800b33e:	4603      	mov	r3, r0
 800b340:	460c      	mov	r4, r1
 800b342:	461a      	mov	r2, r3
 800b344:	4b2c      	ldr	r3, [pc, #176]	; (800b3f8 <UART_SetConfig+0x384>)
 800b346:	fba3 1302 	umull	r1, r3, r3, r2
 800b34a:	095b      	lsrs	r3, r3, #5
 800b34c:	2164      	movs	r1, #100	; 0x64
 800b34e:	fb01 f303 	mul.w	r3, r1, r3
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	00db      	lsls	r3, r3, #3
 800b356:	3332      	adds	r3, #50	; 0x32
 800b358:	4a27      	ldr	r2, [pc, #156]	; (800b3f8 <UART_SetConfig+0x384>)
 800b35a:	fba2 2303 	umull	r2, r3, r2, r3
 800b35e:	095b      	lsrs	r3, r3, #5
 800b360:	005b      	lsls	r3, r3, #1
 800b362:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b366:	4498      	add	r8, r3
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	461d      	mov	r5, r3
 800b36c:	f04f 0600 	mov.w	r6, #0
 800b370:	46a9      	mov	r9, r5
 800b372:	46b2      	mov	sl, r6
 800b374:	eb19 0309 	adds.w	r3, r9, r9
 800b378:	eb4a 040a 	adc.w	r4, sl, sl
 800b37c:	4699      	mov	r9, r3
 800b37e:	46a2      	mov	sl, r4
 800b380:	eb19 0905 	adds.w	r9, r9, r5
 800b384:	eb4a 0a06 	adc.w	sl, sl, r6
 800b388:	f04f 0100 	mov.w	r1, #0
 800b38c:	f04f 0200 	mov.w	r2, #0
 800b390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b394:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b398:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b39c:	4689      	mov	r9, r1
 800b39e:	4692      	mov	sl, r2
 800b3a0:	eb19 0005 	adds.w	r0, r9, r5
 800b3a4:	eb4a 0106 	adc.w	r1, sl, r6
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	461d      	mov	r5, r3
 800b3ae:	f04f 0600 	mov.w	r6, #0
 800b3b2:	196b      	adds	r3, r5, r5
 800b3b4:	eb46 0406 	adc.w	r4, r6, r6
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	4623      	mov	r3, r4
 800b3bc:	f7f4 ff0c 	bl	80001d8 <__aeabi_uldivmod>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	4b0c      	ldr	r3, [pc, #48]	; (800b3f8 <UART_SetConfig+0x384>)
 800b3c8:	fba3 1302 	umull	r1, r3, r3, r2
 800b3cc:	095b      	lsrs	r3, r3, #5
 800b3ce:	2164      	movs	r1, #100	; 0x64
 800b3d0:	fb01 f303 	mul.w	r3, r1, r3
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	00db      	lsls	r3, r3, #3
 800b3d8:	3332      	adds	r3, #50	; 0x32
 800b3da:	4a07      	ldr	r2, [pc, #28]	; (800b3f8 <UART_SetConfig+0x384>)
 800b3dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e0:	095b      	lsrs	r3, r3, #5
 800b3e2:	f003 0207 	and.w	r2, r3, #7
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4442      	add	r2, r8
 800b3ec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b3ee:	e1b2      	b.n	800b756 <UART_SetConfig+0x6e2>
 800b3f0:	40011000 	.word	0x40011000
 800b3f4:	40011400 	.word	0x40011400
 800b3f8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4ad7      	ldr	r2, [pc, #860]	; (800b760 <UART_SetConfig+0x6ec>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d005      	beq.n	800b412 <UART_SetConfig+0x39e>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4ad6      	ldr	r2, [pc, #856]	; (800b764 <UART_SetConfig+0x6f0>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	f040 80d1 	bne.w	800b5b4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b412:	f7fe f99f 	bl	8009754 <HAL_RCC_GetPCLK2Freq>
 800b416:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	469a      	mov	sl, r3
 800b41c:	f04f 0b00 	mov.w	fp, #0
 800b420:	46d0      	mov	r8, sl
 800b422:	46d9      	mov	r9, fp
 800b424:	eb18 0308 	adds.w	r3, r8, r8
 800b428:	eb49 0409 	adc.w	r4, r9, r9
 800b42c:	4698      	mov	r8, r3
 800b42e:	46a1      	mov	r9, r4
 800b430:	eb18 080a 	adds.w	r8, r8, sl
 800b434:	eb49 090b 	adc.w	r9, r9, fp
 800b438:	f04f 0100 	mov.w	r1, #0
 800b43c:	f04f 0200 	mov.w	r2, #0
 800b440:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b444:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b448:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b44c:	4688      	mov	r8, r1
 800b44e:	4691      	mov	r9, r2
 800b450:	eb1a 0508 	adds.w	r5, sl, r8
 800b454:	eb4b 0609 	adc.w	r6, fp, r9
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	4619      	mov	r1, r3
 800b45e:	f04f 0200 	mov.w	r2, #0
 800b462:	f04f 0300 	mov.w	r3, #0
 800b466:	f04f 0400 	mov.w	r4, #0
 800b46a:	0094      	lsls	r4, r2, #2
 800b46c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b470:	008b      	lsls	r3, r1, #2
 800b472:	461a      	mov	r2, r3
 800b474:	4623      	mov	r3, r4
 800b476:	4628      	mov	r0, r5
 800b478:	4631      	mov	r1, r6
 800b47a:	f7f4 fead 	bl	80001d8 <__aeabi_uldivmod>
 800b47e:	4603      	mov	r3, r0
 800b480:	460c      	mov	r4, r1
 800b482:	461a      	mov	r2, r3
 800b484:	4bb8      	ldr	r3, [pc, #736]	; (800b768 <UART_SetConfig+0x6f4>)
 800b486:	fba3 2302 	umull	r2, r3, r3, r2
 800b48a:	095b      	lsrs	r3, r3, #5
 800b48c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	469b      	mov	fp, r3
 800b494:	f04f 0c00 	mov.w	ip, #0
 800b498:	46d9      	mov	r9, fp
 800b49a:	46e2      	mov	sl, ip
 800b49c:	eb19 0309 	adds.w	r3, r9, r9
 800b4a0:	eb4a 040a 	adc.w	r4, sl, sl
 800b4a4:	4699      	mov	r9, r3
 800b4a6:	46a2      	mov	sl, r4
 800b4a8:	eb19 090b 	adds.w	r9, r9, fp
 800b4ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b4b0:	f04f 0100 	mov.w	r1, #0
 800b4b4:	f04f 0200 	mov.w	r2, #0
 800b4b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b4bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b4c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b4c4:	4689      	mov	r9, r1
 800b4c6:	4692      	mov	sl, r2
 800b4c8:	eb1b 0509 	adds.w	r5, fp, r9
 800b4cc:	eb4c 060a 	adc.w	r6, ip, sl
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	f04f 0200 	mov.w	r2, #0
 800b4da:	f04f 0300 	mov.w	r3, #0
 800b4de:	f04f 0400 	mov.w	r4, #0
 800b4e2:	0094      	lsls	r4, r2, #2
 800b4e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b4e8:	008b      	lsls	r3, r1, #2
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	4623      	mov	r3, r4
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	4631      	mov	r1, r6
 800b4f2:	f7f4 fe71 	bl	80001d8 <__aeabi_uldivmod>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	460c      	mov	r4, r1
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	4b9a      	ldr	r3, [pc, #616]	; (800b768 <UART_SetConfig+0x6f4>)
 800b4fe:	fba3 1302 	umull	r1, r3, r3, r2
 800b502:	095b      	lsrs	r3, r3, #5
 800b504:	2164      	movs	r1, #100	; 0x64
 800b506:	fb01 f303 	mul.w	r3, r1, r3
 800b50a:	1ad3      	subs	r3, r2, r3
 800b50c:	011b      	lsls	r3, r3, #4
 800b50e:	3332      	adds	r3, #50	; 0x32
 800b510:	4a95      	ldr	r2, [pc, #596]	; (800b768 <UART_SetConfig+0x6f4>)
 800b512:	fba2 2303 	umull	r2, r3, r2, r3
 800b516:	095b      	lsrs	r3, r3, #5
 800b518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b51c:	4498      	add	r8, r3
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	469b      	mov	fp, r3
 800b522:	f04f 0c00 	mov.w	ip, #0
 800b526:	46d9      	mov	r9, fp
 800b528:	46e2      	mov	sl, ip
 800b52a:	eb19 0309 	adds.w	r3, r9, r9
 800b52e:	eb4a 040a 	adc.w	r4, sl, sl
 800b532:	4699      	mov	r9, r3
 800b534:	46a2      	mov	sl, r4
 800b536:	eb19 090b 	adds.w	r9, r9, fp
 800b53a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b53e:	f04f 0100 	mov.w	r1, #0
 800b542:	f04f 0200 	mov.w	r2, #0
 800b546:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b54a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b54e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b552:	4689      	mov	r9, r1
 800b554:	4692      	mov	sl, r2
 800b556:	eb1b 0509 	adds.w	r5, fp, r9
 800b55a:	eb4c 060a 	adc.w	r6, ip, sl
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	4619      	mov	r1, r3
 800b564:	f04f 0200 	mov.w	r2, #0
 800b568:	f04f 0300 	mov.w	r3, #0
 800b56c:	f04f 0400 	mov.w	r4, #0
 800b570:	0094      	lsls	r4, r2, #2
 800b572:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b576:	008b      	lsls	r3, r1, #2
 800b578:	461a      	mov	r2, r3
 800b57a:	4623      	mov	r3, r4
 800b57c:	4628      	mov	r0, r5
 800b57e:	4631      	mov	r1, r6
 800b580:	f7f4 fe2a 	bl	80001d8 <__aeabi_uldivmod>
 800b584:	4603      	mov	r3, r0
 800b586:	460c      	mov	r4, r1
 800b588:	461a      	mov	r2, r3
 800b58a:	4b77      	ldr	r3, [pc, #476]	; (800b768 <UART_SetConfig+0x6f4>)
 800b58c:	fba3 1302 	umull	r1, r3, r3, r2
 800b590:	095b      	lsrs	r3, r3, #5
 800b592:	2164      	movs	r1, #100	; 0x64
 800b594:	fb01 f303 	mul.w	r3, r1, r3
 800b598:	1ad3      	subs	r3, r2, r3
 800b59a:	011b      	lsls	r3, r3, #4
 800b59c:	3332      	adds	r3, #50	; 0x32
 800b59e:	4a72      	ldr	r2, [pc, #456]	; (800b768 <UART_SetConfig+0x6f4>)
 800b5a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b5a4:	095b      	lsrs	r3, r3, #5
 800b5a6:	f003 020f 	and.w	r2, r3, #15
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4442      	add	r2, r8
 800b5b0:	609a      	str	r2, [r3, #8]
 800b5b2:	e0d0      	b.n	800b756 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b5b4:	f7fe f8ba 	bl	800972c <HAL_RCC_GetPCLK1Freq>
 800b5b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	469a      	mov	sl, r3
 800b5be:	f04f 0b00 	mov.w	fp, #0
 800b5c2:	46d0      	mov	r8, sl
 800b5c4:	46d9      	mov	r9, fp
 800b5c6:	eb18 0308 	adds.w	r3, r8, r8
 800b5ca:	eb49 0409 	adc.w	r4, r9, r9
 800b5ce:	4698      	mov	r8, r3
 800b5d0:	46a1      	mov	r9, r4
 800b5d2:	eb18 080a 	adds.w	r8, r8, sl
 800b5d6:	eb49 090b 	adc.w	r9, r9, fp
 800b5da:	f04f 0100 	mov.w	r1, #0
 800b5de:	f04f 0200 	mov.w	r2, #0
 800b5e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b5e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b5ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b5ee:	4688      	mov	r8, r1
 800b5f0:	4691      	mov	r9, r2
 800b5f2:	eb1a 0508 	adds.w	r5, sl, r8
 800b5f6:	eb4b 0609 	adc.w	r6, fp, r9
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	4619      	mov	r1, r3
 800b600:	f04f 0200 	mov.w	r2, #0
 800b604:	f04f 0300 	mov.w	r3, #0
 800b608:	f04f 0400 	mov.w	r4, #0
 800b60c:	0094      	lsls	r4, r2, #2
 800b60e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b612:	008b      	lsls	r3, r1, #2
 800b614:	461a      	mov	r2, r3
 800b616:	4623      	mov	r3, r4
 800b618:	4628      	mov	r0, r5
 800b61a:	4631      	mov	r1, r6
 800b61c:	f7f4 fddc 	bl	80001d8 <__aeabi_uldivmod>
 800b620:	4603      	mov	r3, r0
 800b622:	460c      	mov	r4, r1
 800b624:	461a      	mov	r2, r3
 800b626:	4b50      	ldr	r3, [pc, #320]	; (800b768 <UART_SetConfig+0x6f4>)
 800b628:	fba3 2302 	umull	r2, r3, r3, r2
 800b62c:	095b      	lsrs	r3, r3, #5
 800b62e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	469b      	mov	fp, r3
 800b636:	f04f 0c00 	mov.w	ip, #0
 800b63a:	46d9      	mov	r9, fp
 800b63c:	46e2      	mov	sl, ip
 800b63e:	eb19 0309 	adds.w	r3, r9, r9
 800b642:	eb4a 040a 	adc.w	r4, sl, sl
 800b646:	4699      	mov	r9, r3
 800b648:	46a2      	mov	sl, r4
 800b64a:	eb19 090b 	adds.w	r9, r9, fp
 800b64e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b652:	f04f 0100 	mov.w	r1, #0
 800b656:	f04f 0200 	mov.w	r2, #0
 800b65a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b65e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b662:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b666:	4689      	mov	r9, r1
 800b668:	4692      	mov	sl, r2
 800b66a:	eb1b 0509 	adds.w	r5, fp, r9
 800b66e:	eb4c 060a 	adc.w	r6, ip, sl
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	4619      	mov	r1, r3
 800b678:	f04f 0200 	mov.w	r2, #0
 800b67c:	f04f 0300 	mov.w	r3, #0
 800b680:	f04f 0400 	mov.w	r4, #0
 800b684:	0094      	lsls	r4, r2, #2
 800b686:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b68a:	008b      	lsls	r3, r1, #2
 800b68c:	461a      	mov	r2, r3
 800b68e:	4623      	mov	r3, r4
 800b690:	4628      	mov	r0, r5
 800b692:	4631      	mov	r1, r6
 800b694:	f7f4 fda0 	bl	80001d8 <__aeabi_uldivmod>
 800b698:	4603      	mov	r3, r0
 800b69a:	460c      	mov	r4, r1
 800b69c:	461a      	mov	r2, r3
 800b69e:	4b32      	ldr	r3, [pc, #200]	; (800b768 <UART_SetConfig+0x6f4>)
 800b6a0:	fba3 1302 	umull	r1, r3, r3, r2
 800b6a4:	095b      	lsrs	r3, r3, #5
 800b6a6:	2164      	movs	r1, #100	; 0x64
 800b6a8:	fb01 f303 	mul.w	r3, r1, r3
 800b6ac:	1ad3      	subs	r3, r2, r3
 800b6ae:	011b      	lsls	r3, r3, #4
 800b6b0:	3332      	adds	r3, #50	; 0x32
 800b6b2:	4a2d      	ldr	r2, [pc, #180]	; (800b768 <UART_SetConfig+0x6f4>)
 800b6b4:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b8:	095b      	lsrs	r3, r3, #5
 800b6ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6be:	4498      	add	r8, r3
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	469b      	mov	fp, r3
 800b6c4:	f04f 0c00 	mov.w	ip, #0
 800b6c8:	46d9      	mov	r9, fp
 800b6ca:	46e2      	mov	sl, ip
 800b6cc:	eb19 0309 	adds.w	r3, r9, r9
 800b6d0:	eb4a 040a 	adc.w	r4, sl, sl
 800b6d4:	4699      	mov	r9, r3
 800b6d6:	46a2      	mov	sl, r4
 800b6d8:	eb19 090b 	adds.w	r9, r9, fp
 800b6dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b6e0:	f04f 0100 	mov.w	r1, #0
 800b6e4:	f04f 0200 	mov.w	r2, #0
 800b6e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b6ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b6f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b6f4:	4689      	mov	r9, r1
 800b6f6:	4692      	mov	sl, r2
 800b6f8:	eb1b 0509 	adds.w	r5, fp, r9
 800b6fc:	eb4c 060a 	adc.w	r6, ip, sl
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	4619      	mov	r1, r3
 800b706:	f04f 0200 	mov.w	r2, #0
 800b70a:	f04f 0300 	mov.w	r3, #0
 800b70e:	f04f 0400 	mov.w	r4, #0
 800b712:	0094      	lsls	r4, r2, #2
 800b714:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b718:	008b      	lsls	r3, r1, #2
 800b71a:	461a      	mov	r2, r3
 800b71c:	4623      	mov	r3, r4
 800b71e:	4628      	mov	r0, r5
 800b720:	4631      	mov	r1, r6
 800b722:	f7f4 fd59 	bl	80001d8 <__aeabi_uldivmod>
 800b726:	4603      	mov	r3, r0
 800b728:	460c      	mov	r4, r1
 800b72a:	461a      	mov	r2, r3
 800b72c:	4b0e      	ldr	r3, [pc, #56]	; (800b768 <UART_SetConfig+0x6f4>)
 800b72e:	fba3 1302 	umull	r1, r3, r3, r2
 800b732:	095b      	lsrs	r3, r3, #5
 800b734:	2164      	movs	r1, #100	; 0x64
 800b736:	fb01 f303 	mul.w	r3, r1, r3
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	011b      	lsls	r3, r3, #4
 800b73e:	3332      	adds	r3, #50	; 0x32
 800b740:	4a09      	ldr	r2, [pc, #36]	; (800b768 <UART_SetConfig+0x6f4>)
 800b742:	fba2 2303 	umull	r2, r3, r2, r3
 800b746:	095b      	lsrs	r3, r3, #5
 800b748:	f003 020f 	and.w	r2, r3, #15
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4442      	add	r2, r8
 800b752:	609a      	str	r2, [r3, #8]
}
 800b754:	e7ff      	b.n	800b756 <UART_SetConfig+0x6e2>
 800b756:	bf00      	nop
 800b758:	3714      	adds	r7, #20
 800b75a:	46bd      	mov	sp, r7
 800b75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b760:	40011000 	.word	0x40011000
 800b764:	40011400 	.word	0x40011400
 800b768:	51eb851f 	.word	0x51eb851f

0800b76c <__errno>:
 800b76c:	4b01      	ldr	r3, [pc, #4]	; (800b774 <__errno+0x8>)
 800b76e:	6818      	ldr	r0, [r3, #0]
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	2000001c 	.word	0x2000001c

0800b778 <__libc_init_array>:
 800b778:	b570      	push	{r4, r5, r6, lr}
 800b77a:	4e0d      	ldr	r6, [pc, #52]	; (800b7b0 <__libc_init_array+0x38>)
 800b77c:	4c0d      	ldr	r4, [pc, #52]	; (800b7b4 <__libc_init_array+0x3c>)
 800b77e:	1ba4      	subs	r4, r4, r6
 800b780:	10a4      	asrs	r4, r4, #2
 800b782:	2500      	movs	r5, #0
 800b784:	42a5      	cmp	r5, r4
 800b786:	d109      	bne.n	800b79c <__libc_init_array+0x24>
 800b788:	4e0b      	ldr	r6, [pc, #44]	; (800b7b8 <__libc_init_array+0x40>)
 800b78a:	4c0c      	ldr	r4, [pc, #48]	; (800b7bc <__libc_init_array+0x44>)
 800b78c:	f000 fc90 	bl	800c0b0 <_init>
 800b790:	1ba4      	subs	r4, r4, r6
 800b792:	10a4      	asrs	r4, r4, #2
 800b794:	2500      	movs	r5, #0
 800b796:	42a5      	cmp	r5, r4
 800b798:	d105      	bne.n	800b7a6 <__libc_init_array+0x2e>
 800b79a:	bd70      	pop	{r4, r5, r6, pc}
 800b79c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7a0:	4798      	blx	r3
 800b7a2:	3501      	adds	r5, #1
 800b7a4:	e7ee      	b.n	800b784 <__libc_init_array+0xc>
 800b7a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7aa:	4798      	blx	r3
 800b7ac:	3501      	adds	r5, #1
 800b7ae:	e7f2      	b.n	800b796 <__libc_init_array+0x1e>
 800b7b0:	0800c188 	.word	0x0800c188
 800b7b4:	0800c188 	.word	0x0800c188
 800b7b8:	0800c188 	.word	0x0800c188
 800b7bc:	0800c18c 	.word	0x0800c18c

0800b7c0 <memset>:
 800b7c0:	4402      	add	r2, r0
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d100      	bne.n	800b7ca <memset+0xa>
 800b7c8:	4770      	bx	lr
 800b7ca:	f803 1b01 	strb.w	r1, [r3], #1
 800b7ce:	e7f9      	b.n	800b7c4 <memset+0x4>

0800b7d0 <_puts_r>:
 800b7d0:	b570      	push	{r4, r5, r6, lr}
 800b7d2:	460e      	mov	r6, r1
 800b7d4:	4605      	mov	r5, r0
 800b7d6:	b118      	cbz	r0, 800b7e0 <_puts_r+0x10>
 800b7d8:	6983      	ldr	r3, [r0, #24]
 800b7da:	b90b      	cbnz	r3, 800b7e0 <_puts_r+0x10>
 800b7dc:	f000 fa14 	bl	800bc08 <__sinit>
 800b7e0:	69ab      	ldr	r3, [r5, #24]
 800b7e2:	68ac      	ldr	r4, [r5, #8]
 800b7e4:	b913      	cbnz	r3, 800b7ec <_puts_r+0x1c>
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	f000 fa0e 	bl	800bc08 <__sinit>
 800b7ec:	4b23      	ldr	r3, [pc, #140]	; (800b87c <_puts_r+0xac>)
 800b7ee:	429c      	cmp	r4, r3
 800b7f0:	d117      	bne.n	800b822 <_puts_r+0x52>
 800b7f2:	686c      	ldr	r4, [r5, #4]
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	071b      	lsls	r3, r3, #28
 800b7f8:	d51d      	bpl.n	800b836 <_puts_r+0x66>
 800b7fa:	6923      	ldr	r3, [r4, #16]
 800b7fc:	b1db      	cbz	r3, 800b836 <_puts_r+0x66>
 800b7fe:	3e01      	subs	r6, #1
 800b800:	68a3      	ldr	r3, [r4, #8]
 800b802:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b806:	3b01      	subs	r3, #1
 800b808:	60a3      	str	r3, [r4, #8]
 800b80a:	b9e9      	cbnz	r1, 800b848 <_puts_r+0x78>
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	da2e      	bge.n	800b86e <_puts_r+0x9e>
 800b810:	4622      	mov	r2, r4
 800b812:	210a      	movs	r1, #10
 800b814:	4628      	mov	r0, r5
 800b816:	f000 f847 	bl	800b8a8 <__swbuf_r>
 800b81a:	3001      	adds	r0, #1
 800b81c:	d011      	beq.n	800b842 <_puts_r+0x72>
 800b81e:	200a      	movs	r0, #10
 800b820:	e011      	b.n	800b846 <_puts_r+0x76>
 800b822:	4b17      	ldr	r3, [pc, #92]	; (800b880 <_puts_r+0xb0>)
 800b824:	429c      	cmp	r4, r3
 800b826:	d101      	bne.n	800b82c <_puts_r+0x5c>
 800b828:	68ac      	ldr	r4, [r5, #8]
 800b82a:	e7e3      	b.n	800b7f4 <_puts_r+0x24>
 800b82c:	4b15      	ldr	r3, [pc, #84]	; (800b884 <_puts_r+0xb4>)
 800b82e:	429c      	cmp	r4, r3
 800b830:	bf08      	it	eq
 800b832:	68ec      	ldreq	r4, [r5, #12]
 800b834:	e7de      	b.n	800b7f4 <_puts_r+0x24>
 800b836:	4621      	mov	r1, r4
 800b838:	4628      	mov	r0, r5
 800b83a:	f000 f887 	bl	800b94c <__swsetup_r>
 800b83e:	2800      	cmp	r0, #0
 800b840:	d0dd      	beq.n	800b7fe <_puts_r+0x2e>
 800b842:	f04f 30ff 	mov.w	r0, #4294967295
 800b846:	bd70      	pop	{r4, r5, r6, pc}
 800b848:	2b00      	cmp	r3, #0
 800b84a:	da04      	bge.n	800b856 <_puts_r+0x86>
 800b84c:	69a2      	ldr	r2, [r4, #24]
 800b84e:	429a      	cmp	r2, r3
 800b850:	dc06      	bgt.n	800b860 <_puts_r+0x90>
 800b852:	290a      	cmp	r1, #10
 800b854:	d004      	beq.n	800b860 <_puts_r+0x90>
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	6022      	str	r2, [r4, #0]
 800b85c:	7019      	strb	r1, [r3, #0]
 800b85e:	e7cf      	b.n	800b800 <_puts_r+0x30>
 800b860:	4622      	mov	r2, r4
 800b862:	4628      	mov	r0, r5
 800b864:	f000 f820 	bl	800b8a8 <__swbuf_r>
 800b868:	3001      	adds	r0, #1
 800b86a:	d1c9      	bne.n	800b800 <_puts_r+0x30>
 800b86c:	e7e9      	b.n	800b842 <_puts_r+0x72>
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	200a      	movs	r0, #10
 800b872:	1c5a      	adds	r2, r3, #1
 800b874:	6022      	str	r2, [r4, #0]
 800b876:	7018      	strb	r0, [r3, #0]
 800b878:	e7e5      	b.n	800b846 <_puts_r+0x76>
 800b87a:	bf00      	nop
 800b87c:	0800c140 	.word	0x0800c140
 800b880:	0800c160 	.word	0x0800c160
 800b884:	0800c120 	.word	0x0800c120

0800b888 <puts>:
 800b888:	4b02      	ldr	r3, [pc, #8]	; (800b894 <puts+0xc>)
 800b88a:	4601      	mov	r1, r0
 800b88c:	6818      	ldr	r0, [r3, #0]
 800b88e:	f7ff bf9f 	b.w	800b7d0 <_puts_r>
 800b892:	bf00      	nop
 800b894:	2000001c 	.word	0x2000001c

0800b898 <strcpy>:
 800b898:	4603      	mov	r3, r0
 800b89a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b89e:	f803 2b01 	strb.w	r2, [r3], #1
 800b8a2:	2a00      	cmp	r2, #0
 800b8a4:	d1f9      	bne.n	800b89a <strcpy+0x2>
 800b8a6:	4770      	bx	lr

0800b8a8 <__swbuf_r>:
 800b8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8aa:	460e      	mov	r6, r1
 800b8ac:	4614      	mov	r4, r2
 800b8ae:	4605      	mov	r5, r0
 800b8b0:	b118      	cbz	r0, 800b8ba <__swbuf_r+0x12>
 800b8b2:	6983      	ldr	r3, [r0, #24]
 800b8b4:	b90b      	cbnz	r3, 800b8ba <__swbuf_r+0x12>
 800b8b6:	f000 f9a7 	bl	800bc08 <__sinit>
 800b8ba:	4b21      	ldr	r3, [pc, #132]	; (800b940 <__swbuf_r+0x98>)
 800b8bc:	429c      	cmp	r4, r3
 800b8be:	d12a      	bne.n	800b916 <__swbuf_r+0x6e>
 800b8c0:	686c      	ldr	r4, [r5, #4]
 800b8c2:	69a3      	ldr	r3, [r4, #24]
 800b8c4:	60a3      	str	r3, [r4, #8]
 800b8c6:	89a3      	ldrh	r3, [r4, #12]
 800b8c8:	071a      	lsls	r2, r3, #28
 800b8ca:	d52e      	bpl.n	800b92a <__swbuf_r+0x82>
 800b8cc:	6923      	ldr	r3, [r4, #16]
 800b8ce:	b363      	cbz	r3, 800b92a <__swbuf_r+0x82>
 800b8d0:	6923      	ldr	r3, [r4, #16]
 800b8d2:	6820      	ldr	r0, [r4, #0]
 800b8d4:	1ac0      	subs	r0, r0, r3
 800b8d6:	6963      	ldr	r3, [r4, #20]
 800b8d8:	b2f6      	uxtb	r6, r6
 800b8da:	4283      	cmp	r3, r0
 800b8dc:	4637      	mov	r7, r6
 800b8de:	dc04      	bgt.n	800b8ea <__swbuf_r+0x42>
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	f000 f926 	bl	800bb34 <_fflush_r>
 800b8e8:	bb28      	cbnz	r0, 800b936 <__swbuf_r+0x8e>
 800b8ea:	68a3      	ldr	r3, [r4, #8]
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	60a3      	str	r3, [r4, #8]
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	1c5a      	adds	r2, r3, #1
 800b8f4:	6022      	str	r2, [r4, #0]
 800b8f6:	701e      	strb	r6, [r3, #0]
 800b8f8:	6963      	ldr	r3, [r4, #20]
 800b8fa:	3001      	adds	r0, #1
 800b8fc:	4283      	cmp	r3, r0
 800b8fe:	d004      	beq.n	800b90a <__swbuf_r+0x62>
 800b900:	89a3      	ldrh	r3, [r4, #12]
 800b902:	07db      	lsls	r3, r3, #31
 800b904:	d519      	bpl.n	800b93a <__swbuf_r+0x92>
 800b906:	2e0a      	cmp	r6, #10
 800b908:	d117      	bne.n	800b93a <__swbuf_r+0x92>
 800b90a:	4621      	mov	r1, r4
 800b90c:	4628      	mov	r0, r5
 800b90e:	f000 f911 	bl	800bb34 <_fflush_r>
 800b912:	b190      	cbz	r0, 800b93a <__swbuf_r+0x92>
 800b914:	e00f      	b.n	800b936 <__swbuf_r+0x8e>
 800b916:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <__swbuf_r+0x9c>)
 800b918:	429c      	cmp	r4, r3
 800b91a:	d101      	bne.n	800b920 <__swbuf_r+0x78>
 800b91c:	68ac      	ldr	r4, [r5, #8]
 800b91e:	e7d0      	b.n	800b8c2 <__swbuf_r+0x1a>
 800b920:	4b09      	ldr	r3, [pc, #36]	; (800b948 <__swbuf_r+0xa0>)
 800b922:	429c      	cmp	r4, r3
 800b924:	bf08      	it	eq
 800b926:	68ec      	ldreq	r4, [r5, #12]
 800b928:	e7cb      	b.n	800b8c2 <__swbuf_r+0x1a>
 800b92a:	4621      	mov	r1, r4
 800b92c:	4628      	mov	r0, r5
 800b92e:	f000 f80d 	bl	800b94c <__swsetup_r>
 800b932:	2800      	cmp	r0, #0
 800b934:	d0cc      	beq.n	800b8d0 <__swbuf_r+0x28>
 800b936:	f04f 37ff 	mov.w	r7, #4294967295
 800b93a:	4638      	mov	r0, r7
 800b93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b93e:	bf00      	nop
 800b940:	0800c140 	.word	0x0800c140
 800b944:	0800c160 	.word	0x0800c160
 800b948:	0800c120 	.word	0x0800c120

0800b94c <__swsetup_r>:
 800b94c:	4b32      	ldr	r3, [pc, #200]	; (800ba18 <__swsetup_r+0xcc>)
 800b94e:	b570      	push	{r4, r5, r6, lr}
 800b950:	681d      	ldr	r5, [r3, #0]
 800b952:	4606      	mov	r6, r0
 800b954:	460c      	mov	r4, r1
 800b956:	b125      	cbz	r5, 800b962 <__swsetup_r+0x16>
 800b958:	69ab      	ldr	r3, [r5, #24]
 800b95a:	b913      	cbnz	r3, 800b962 <__swsetup_r+0x16>
 800b95c:	4628      	mov	r0, r5
 800b95e:	f000 f953 	bl	800bc08 <__sinit>
 800b962:	4b2e      	ldr	r3, [pc, #184]	; (800ba1c <__swsetup_r+0xd0>)
 800b964:	429c      	cmp	r4, r3
 800b966:	d10f      	bne.n	800b988 <__swsetup_r+0x3c>
 800b968:	686c      	ldr	r4, [r5, #4]
 800b96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b96e:	b29a      	uxth	r2, r3
 800b970:	0715      	lsls	r5, r2, #28
 800b972:	d42c      	bmi.n	800b9ce <__swsetup_r+0x82>
 800b974:	06d0      	lsls	r0, r2, #27
 800b976:	d411      	bmi.n	800b99c <__swsetup_r+0x50>
 800b978:	2209      	movs	r2, #9
 800b97a:	6032      	str	r2, [r6, #0]
 800b97c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b980:	81a3      	strh	r3, [r4, #12]
 800b982:	f04f 30ff 	mov.w	r0, #4294967295
 800b986:	e03e      	b.n	800ba06 <__swsetup_r+0xba>
 800b988:	4b25      	ldr	r3, [pc, #148]	; (800ba20 <__swsetup_r+0xd4>)
 800b98a:	429c      	cmp	r4, r3
 800b98c:	d101      	bne.n	800b992 <__swsetup_r+0x46>
 800b98e:	68ac      	ldr	r4, [r5, #8]
 800b990:	e7eb      	b.n	800b96a <__swsetup_r+0x1e>
 800b992:	4b24      	ldr	r3, [pc, #144]	; (800ba24 <__swsetup_r+0xd8>)
 800b994:	429c      	cmp	r4, r3
 800b996:	bf08      	it	eq
 800b998:	68ec      	ldreq	r4, [r5, #12]
 800b99a:	e7e6      	b.n	800b96a <__swsetup_r+0x1e>
 800b99c:	0751      	lsls	r1, r2, #29
 800b99e:	d512      	bpl.n	800b9c6 <__swsetup_r+0x7a>
 800b9a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9a2:	b141      	cbz	r1, 800b9b6 <__swsetup_r+0x6a>
 800b9a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9a8:	4299      	cmp	r1, r3
 800b9aa:	d002      	beq.n	800b9b2 <__swsetup_r+0x66>
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	f000 fa19 	bl	800bde4 <_free_r>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	6363      	str	r3, [r4, #52]	; 0x34
 800b9b6:	89a3      	ldrh	r3, [r4, #12]
 800b9b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9bc:	81a3      	strh	r3, [r4, #12]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	6063      	str	r3, [r4, #4]
 800b9c2:	6923      	ldr	r3, [r4, #16]
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	89a3      	ldrh	r3, [r4, #12]
 800b9c8:	f043 0308 	orr.w	r3, r3, #8
 800b9cc:	81a3      	strh	r3, [r4, #12]
 800b9ce:	6923      	ldr	r3, [r4, #16]
 800b9d0:	b94b      	cbnz	r3, 800b9e6 <__swsetup_r+0x9a>
 800b9d2:	89a3      	ldrh	r3, [r4, #12]
 800b9d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9dc:	d003      	beq.n	800b9e6 <__swsetup_r+0x9a>
 800b9de:	4621      	mov	r1, r4
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	f000 f9bf 	bl	800bd64 <__smakebuf_r>
 800b9e6:	89a2      	ldrh	r2, [r4, #12]
 800b9e8:	f012 0301 	ands.w	r3, r2, #1
 800b9ec:	d00c      	beq.n	800ba08 <__swsetup_r+0xbc>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60a3      	str	r3, [r4, #8]
 800b9f2:	6963      	ldr	r3, [r4, #20]
 800b9f4:	425b      	negs	r3, r3
 800b9f6:	61a3      	str	r3, [r4, #24]
 800b9f8:	6923      	ldr	r3, [r4, #16]
 800b9fa:	b953      	cbnz	r3, 800ba12 <__swsetup_r+0xc6>
 800b9fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba00:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ba04:	d1ba      	bne.n	800b97c <__swsetup_r+0x30>
 800ba06:	bd70      	pop	{r4, r5, r6, pc}
 800ba08:	0792      	lsls	r2, r2, #30
 800ba0a:	bf58      	it	pl
 800ba0c:	6963      	ldrpl	r3, [r4, #20]
 800ba0e:	60a3      	str	r3, [r4, #8]
 800ba10:	e7f2      	b.n	800b9f8 <__swsetup_r+0xac>
 800ba12:	2000      	movs	r0, #0
 800ba14:	e7f7      	b.n	800ba06 <__swsetup_r+0xba>
 800ba16:	bf00      	nop
 800ba18:	2000001c 	.word	0x2000001c
 800ba1c:	0800c140 	.word	0x0800c140
 800ba20:	0800c160 	.word	0x0800c160
 800ba24:	0800c120 	.word	0x0800c120

0800ba28 <__sflush_r>:
 800ba28:	898a      	ldrh	r2, [r1, #12]
 800ba2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba2e:	4605      	mov	r5, r0
 800ba30:	0710      	lsls	r0, r2, #28
 800ba32:	460c      	mov	r4, r1
 800ba34:	d458      	bmi.n	800bae8 <__sflush_r+0xc0>
 800ba36:	684b      	ldr	r3, [r1, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	dc05      	bgt.n	800ba48 <__sflush_r+0x20>
 800ba3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	dc02      	bgt.n	800ba48 <__sflush_r+0x20>
 800ba42:	2000      	movs	r0, #0
 800ba44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba4a:	2e00      	cmp	r6, #0
 800ba4c:	d0f9      	beq.n	800ba42 <__sflush_r+0x1a>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba54:	682f      	ldr	r7, [r5, #0]
 800ba56:	6a21      	ldr	r1, [r4, #32]
 800ba58:	602b      	str	r3, [r5, #0]
 800ba5a:	d032      	beq.n	800bac2 <__sflush_r+0x9a>
 800ba5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba5e:	89a3      	ldrh	r3, [r4, #12]
 800ba60:	075a      	lsls	r2, r3, #29
 800ba62:	d505      	bpl.n	800ba70 <__sflush_r+0x48>
 800ba64:	6863      	ldr	r3, [r4, #4]
 800ba66:	1ac0      	subs	r0, r0, r3
 800ba68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba6a:	b10b      	cbz	r3, 800ba70 <__sflush_r+0x48>
 800ba6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba6e:	1ac0      	subs	r0, r0, r3
 800ba70:	2300      	movs	r3, #0
 800ba72:	4602      	mov	r2, r0
 800ba74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba76:	6a21      	ldr	r1, [r4, #32]
 800ba78:	4628      	mov	r0, r5
 800ba7a:	47b0      	blx	r6
 800ba7c:	1c43      	adds	r3, r0, #1
 800ba7e:	89a3      	ldrh	r3, [r4, #12]
 800ba80:	d106      	bne.n	800ba90 <__sflush_r+0x68>
 800ba82:	6829      	ldr	r1, [r5, #0]
 800ba84:	291d      	cmp	r1, #29
 800ba86:	d848      	bhi.n	800bb1a <__sflush_r+0xf2>
 800ba88:	4a29      	ldr	r2, [pc, #164]	; (800bb30 <__sflush_r+0x108>)
 800ba8a:	40ca      	lsrs	r2, r1
 800ba8c:	07d6      	lsls	r6, r2, #31
 800ba8e:	d544      	bpl.n	800bb1a <__sflush_r+0xf2>
 800ba90:	2200      	movs	r2, #0
 800ba92:	6062      	str	r2, [r4, #4]
 800ba94:	04d9      	lsls	r1, r3, #19
 800ba96:	6922      	ldr	r2, [r4, #16]
 800ba98:	6022      	str	r2, [r4, #0]
 800ba9a:	d504      	bpl.n	800baa6 <__sflush_r+0x7e>
 800ba9c:	1c42      	adds	r2, r0, #1
 800ba9e:	d101      	bne.n	800baa4 <__sflush_r+0x7c>
 800baa0:	682b      	ldr	r3, [r5, #0]
 800baa2:	b903      	cbnz	r3, 800baa6 <__sflush_r+0x7e>
 800baa4:	6560      	str	r0, [r4, #84]	; 0x54
 800baa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baa8:	602f      	str	r7, [r5, #0]
 800baaa:	2900      	cmp	r1, #0
 800baac:	d0c9      	beq.n	800ba42 <__sflush_r+0x1a>
 800baae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bab2:	4299      	cmp	r1, r3
 800bab4:	d002      	beq.n	800babc <__sflush_r+0x94>
 800bab6:	4628      	mov	r0, r5
 800bab8:	f000 f994 	bl	800bde4 <_free_r>
 800babc:	2000      	movs	r0, #0
 800babe:	6360      	str	r0, [r4, #52]	; 0x34
 800bac0:	e7c0      	b.n	800ba44 <__sflush_r+0x1c>
 800bac2:	2301      	movs	r3, #1
 800bac4:	4628      	mov	r0, r5
 800bac6:	47b0      	blx	r6
 800bac8:	1c41      	adds	r1, r0, #1
 800baca:	d1c8      	bne.n	800ba5e <__sflush_r+0x36>
 800bacc:	682b      	ldr	r3, [r5, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d0c5      	beq.n	800ba5e <__sflush_r+0x36>
 800bad2:	2b1d      	cmp	r3, #29
 800bad4:	d001      	beq.n	800bada <__sflush_r+0xb2>
 800bad6:	2b16      	cmp	r3, #22
 800bad8:	d101      	bne.n	800bade <__sflush_r+0xb6>
 800bada:	602f      	str	r7, [r5, #0]
 800badc:	e7b1      	b.n	800ba42 <__sflush_r+0x1a>
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bae4:	81a3      	strh	r3, [r4, #12]
 800bae6:	e7ad      	b.n	800ba44 <__sflush_r+0x1c>
 800bae8:	690f      	ldr	r7, [r1, #16]
 800baea:	2f00      	cmp	r7, #0
 800baec:	d0a9      	beq.n	800ba42 <__sflush_r+0x1a>
 800baee:	0793      	lsls	r3, r2, #30
 800baf0:	680e      	ldr	r6, [r1, #0]
 800baf2:	bf08      	it	eq
 800baf4:	694b      	ldreq	r3, [r1, #20]
 800baf6:	600f      	str	r7, [r1, #0]
 800baf8:	bf18      	it	ne
 800bafa:	2300      	movne	r3, #0
 800bafc:	eba6 0807 	sub.w	r8, r6, r7
 800bb00:	608b      	str	r3, [r1, #8]
 800bb02:	f1b8 0f00 	cmp.w	r8, #0
 800bb06:	dd9c      	ble.n	800ba42 <__sflush_r+0x1a>
 800bb08:	4643      	mov	r3, r8
 800bb0a:	463a      	mov	r2, r7
 800bb0c:	6a21      	ldr	r1, [r4, #32]
 800bb0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb10:	4628      	mov	r0, r5
 800bb12:	47b0      	blx	r6
 800bb14:	2800      	cmp	r0, #0
 800bb16:	dc06      	bgt.n	800bb26 <__sflush_r+0xfe>
 800bb18:	89a3      	ldrh	r3, [r4, #12]
 800bb1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb1e:	81a3      	strh	r3, [r4, #12]
 800bb20:	f04f 30ff 	mov.w	r0, #4294967295
 800bb24:	e78e      	b.n	800ba44 <__sflush_r+0x1c>
 800bb26:	4407      	add	r7, r0
 800bb28:	eba8 0800 	sub.w	r8, r8, r0
 800bb2c:	e7e9      	b.n	800bb02 <__sflush_r+0xda>
 800bb2e:	bf00      	nop
 800bb30:	20400001 	.word	0x20400001

0800bb34 <_fflush_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	690b      	ldr	r3, [r1, #16]
 800bb38:	4605      	mov	r5, r0
 800bb3a:	460c      	mov	r4, r1
 800bb3c:	b1db      	cbz	r3, 800bb76 <_fflush_r+0x42>
 800bb3e:	b118      	cbz	r0, 800bb48 <_fflush_r+0x14>
 800bb40:	6983      	ldr	r3, [r0, #24]
 800bb42:	b90b      	cbnz	r3, 800bb48 <_fflush_r+0x14>
 800bb44:	f000 f860 	bl	800bc08 <__sinit>
 800bb48:	4b0c      	ldr	r3, [pc, #48]	; (800bb7c <_fflush_r+0x48>)
 800bb4a:	429c      	cmp	r4, r3
 800bb4c:	d109      	bne.n	800bb62 <_fflush_r+0x2e>
 800bb4e:	686c      	ldr	r4, [r5, #4]
 800bb50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb54:	b17b      	cbz	r3, 800bb76 <_fflush_r+0x42>
 800bb56:	4621      	mov	r1, r4
 800bb58:	4628      	mov	r0, r5
 800bb5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb5e:	f7ff bf63 	b.w	800ba28 <__sflush_r>
 800bb62:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <_fflush_r+0x4c>)
 800bb64:	429c      	cmp	r4, r3
 800bb66:	d101      	bne.n	800bb6c <_fflush_r+0x38>
 800bb68:	68ac      	ldr	r4, [r5, #8]
 800bb6a:	e7f1      	b.n	800bb50 <_fflush_r+0x1c>
 800bb6c:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <_fflush_r+0x50>)
 800bb6e:	429c      	cmp	r4, r3
 800bb70:	bf08      	it	eq
 800bb72:	68ec      	ldreq	r4, [r5, #12]
 800bb74:	e7ec      	b.n	800bb50 <_fflush_r+0x1c>
 800bb76:	2000      	movs	r0, #0
 800bb78:	bd38      	pop	{r3, r4, r5, pc}
 800bb7a:	bf00      	nop
 800bb7c:	0800c140 	.word	0x0800c140
 800bb80:	0800c160 	.word	0x0800c160
 800bb84:	0800c120 	.word	0x0800c120

0800bb88 <std>:
 800bb88:	2300      	movs	r3, #0
 800bb8a:	b510      	push	{r4, lr}
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	e9c0 3300 	strd	r3, r3, [r0]
 800bb92:	6083      	str	r3, [r0, #8]
 800bb94:	8181      	strh	r1, [r0, #12]
 800bb96:	6643      	str	r3, [r0, #100]	; 0x64
 800bb98:	81c2      	strh	r2, [r0, #14]
 800bb9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb9e:	6183      	str	r3, [r0, #24]
 800bba0:	4619      	mov	r1, r3
 800bba2:	2208      	movs	r2, #8
 800bba4:	305c      	adds	r0, #92	; 0x5c
 800bba6:	f7ff fe0b 	bl	800b7c0 <memset>
 800bbaa:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <std+0x38>)
 800bbac:	6263      	str	r3, [r4, #36]	; 0x24
 800bbae:	4b05      	ldr	r3, [pc, #20]	; (800bbc4 <std+0x3c>)
 800bbb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbb2:	4b05      	ldr	r3, [pc, #20]	; (800bbc8 <std+0x40>)
 800bbb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbb6:	4b05      	ldr	r3, [pc, #20]	; (800bbcc <std+0x44>)
 800bbb8:	6224      	str	r4, [r4, #32]
 800bbba:	6323      	str	r3, [r4, #48]	; 0x30
 800bbbc:	bd10      	pop	{r4, pc}
 800bbbe:	bf00      	nop
 800bbc0:	0800bf55 	.word	0x0800bf55
 800bbc4:	0800bf77 	.word	0x0800bf77
 800bbc8:	0800bfaf 	.word	0x0800bfaf
 800bbcc:	0800bfd3 	.word	0x0800bfd3

0800bbd0 <_cleanup_r>:
 800bbd0:	4901      	ldr	r1, [pc, #4]	; (800bbd8 <_cleanup_r+0x8>)
 800bbd2:	f000 b885 	b.w	800bce0 <_fwalk_reent>
 800bbd6:	bf00      	nop
 800bbd8:	0800bb35 	.word	0x0800bb35

0800bbdc <__sfmoreglue>:
 800bbdc:	b570      	push	{r4, r5, r6, lr}
 800bbde:	1e4a      	subs	r2, r1, #1
 800bbe0:	2568      	movs	r5, #104	; 0x68
 800bbe2:	4355      	muls	r5, r2
 800bbe4:	460e      	mov	r6, r1
 800bbe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbea:	f000 f949 	bl	800be80 <_malloc_r>
 800bbee:	4604      	mov	r4, r0
 800bbf0:	b140      	cbz	r0, 800bc04 <__sfmoreglue+0x28>
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	e9c0 1600 	strd	r1, r6, [r0]
 800bbf8:	300c      	adds	r0, #12
 800bbfa:	60a0      	str	r0, [r4, #8]
 800bbfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc00:	f7ff fdde 	bl	800b7c0 <memset>
 800bc04:	4620      	mov	r0, r4
 800bc06:	bd70      	pop	{r4, r5, r6, pc}

0800bc08 <__sinit>:
 800bc08:	6983      	ldr	r3, [r0, #24]
 800bc0a:	b510      	push	{r4, lr}
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	bb33      	cbnz	r3, 800bc5e <__sinit+0x56>
 800bc10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bc14:	6503      	str	r3, [r0, #80]	; 0x50
 800bc16:	4b12      	ldr	r3, [pc, #72]	; (800bc60 <__sinit+0x58>)
 800bc18:	4a12      	ldr	r2, [pc, #72]	; (800bc64 <__sinit+0x5c>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6282      	str	r2, [r0, #40]	; 0x28
 800bc1e:	4298      	cmp	r0, r3
 800bc20:	bf04      	itt	eq
 800bc22:	2301      	moveq	r3, #1
 800bc24:	6183      	streq	r3, [r0, #24]
 800bc26:	f000 f81f 	bl	800bc68 <__sfp>
 800bc2a:	6060      	str	r0, [r4, #4]
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f000 f81b 	bl	800bc68 <__sfp>
 800bc32:	60a0      	str	r0, [r4, #8]
 800bc34:	4620      	mov	r0, r4
 800bc36:	f000 f817 	bl	800bc68 <__sfp>
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	60e0      	str	r0, [r4, #12]
 800bc3e:	2104      	movs	r1, #4
 800bc40:	6860      	ldr	r0, [r4, #4]
 800bc42:	f7ff ffa1 	bl	800bb88 <std>
 800bc46:	2201      	movs	r2, #1
 800bc48:	2109      	movs	r1, #9
 800bc4a:	68a0      	ldr	r0, [r4, #8]
 800bc4c:	f7ff ff9c 	bl	800bb88 <std>
 800bc50:	2202      	movs	r2, #2
 800bc52:	2112      	movs	r1, #18
 800bc54:	68e0      	ldr	r0, [r4, #12]
 800bc56:	f7ff ff97 	bl	800bb88 <std>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	61a3      	str	r3, [r4, #24]
 800bc5e:	bd10      	pop	{r4, pc}
 800bc60:	0800c11c 	.word	0x0800c11c
 800bc64:	0800bbd1 	.word	0x0800bbd1

0800bc68 <__sfp>:
 800bc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6a:	4b1b      	ldr	r3, [pc, #108]	; (800bcd8 <__sfp+0x70>)
 800bc6c:	681e      	ldr	r6, [r3, #0]
 800bc6e:	69b3      	ldr	r3, [r6, #24]
 800bc70:	4607      	mov	r7, r0
 800bc72:	b913      	cbnz	r3, 800bc7a <__sfp+0x12>
 800bc74:	4630      	mov	r0, r6
 800bc76:	f7ff ffc7 	bl	800bc08 <__sinit>
 800bc7a:	3648      	adds	r6, #72	; 0x48
 800bc7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	d503      	bpl.n	800bc8c <__sfp+0x24>
 800bc84:	6833      	ldr	r3, [r6, #0]
 800bc86:	b133      	cbz	r3, 800bc96 <__sfp+0x2e>
 800bc88:	6836      	ldr	r6, [r6, #0]
 800bc8a:	e7f7      	b.n	800bc7c <__sfp+0x14>
 800bc8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc90:	b16d      	cbz	r5, 800bcae <__sfp+0x46>
 800bc92:	3468      	adds	r4, #104	; 0x68
 800bc94:	e7f4      	b.n	800bc80 <__sfp+0x18>
 800bc96:	2104      	movs	r1, #4
 800bc98:	4638      	mov	r0, r7
 800bc9a:	f7ff ff9f 	bl	800bbdc <__sfmoreglue>
 800bc9e:	6030      	str	r0, [r6, #0]
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d1f1      	bne.n	800bc88 <__sfp+0x20>
 800bca4:	230c      	movs	r3, #12
 800bca6:	603b      	str	r3, [r7, #0]
 800bca8:	4604      	mov	r4, r0
 800bcaa:	4620      	mov	r0, r4
 800bcac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcae:	4b0b      	ldr	r3, [pc, #44]	; (800bcdc <__sfp+0x74>)
 800bcb0:	6665      	str	r5, [r4, #100]	; 0x64
 800bcb2:	e9c4 5500 	strd	r5, r5, [r4]
 800bcb6:	60a5      	str	r5, [r4, #8]
 800bcb8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bcbc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bcc0:	2208      	movs	r2, #8
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcc8:	f7ff fd7a 	bl	800b7c0 <memset>
 800bccc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bcd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bcd4:	e7e9      	b.n	800bcaa <__sfp+0x42>
 800bcd6:	bf00      	nop
 800bcd8:	0800c11c 	.word	0x0800c11c
 800bcdc:	ffff0001 	.word	0xffff0001

0800bce0 <_fwalk_reent>:
 800bce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce4:	4680      	mov	r8, r0
 800bce6:	4689      	mov	r9, r1
 800bce8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bcec:	2600      	movs	r6, #0
 800bcee:	b914      	cbnz	r4, 800bcf6 <_fwalk_reent+0x16>
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcf6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bcfa:	3f01      	subs	r7, #1
 800bcfc:	d501      	bpl.n	800bd02 <_fwalk_reent+0x22>
 800bcfe:	6824      	ldr	r4, [r4, #0]
 800bd00:	e7f5      	b.n	800bcee <_fwalk_reent+0xe>
 800bd02:	89ab      	ldrh	r3, [r5, #12]
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d907      	bls.n	800bd18 <_fwalk_reent+0x38>
 800bd08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	d003      	beq.n	800bd18 <_fwalk_reent+0x38>
 800bd10:	4629      	mov	r1, r5
 800bd12:	4640      	mov	r0, r8
 800bd14:	47c8      	blx	r9
 800bd16:	4306      	orrs	r6, r0
 800bd18:	3568      	adds	r5, #104	; 0x68
 800bd1a:	e7ee      	b.n	800bcfa <_fwalk_reent+0x1a>

0800bd1c <__swhatbuf_r>:
 800bd1c:	b570      	push	{r4, r5, r6, lr}
 800bd1e:	460e      	mov	r6, r1
 800bd20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd24:	2900      	cmp	r1, #0
 800bd26:	b096      	sub	sp, #88	; 0x58
 800bd28:	4614      	mov	r4, r2
 800bd2a:	461d      	mov	r5, r3
 800bd2c:	da07      	bge.n	800bd3e <__swhatbuf_r+0x22>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	602b      	str	r3, [r5, #0]
 800bd32:	89b3      	ldrh	r3, [r6, #12]
 800bd34:	061a      	lsls	r2, r3, #24
 800bd36:	d410      	bmi.n	800bd5a <__swhatbuf_r+0x3e>
 800bd38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd3c:	e00e      	b.n	800bd5c <__swhatbuf_r+0x40>
 800bd3e:	466a      	mov	r2, sp
 800bd40:	f000 f96e 	bl	800c020 <_fstat_r>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	dbf2      	blt.n	800bd2e <__swhatbuf_r+0x12>
 800bd48:	9a01      	ldr	r2, [sp, #4]
 800bd4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd52:	425a      	negs	r2, r3
 800bd54:	415a      	adcs	r2, r3
 800bd56:	602a      	str	r2, [r5, #0]
 800bd58:	e7ee      	b.n	800bd38 <__swhatbuf_r+0x1c>
 800bd5a:	2340      	movs	r3, #64	; 0x40
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	6023      	str	r3, [r4, #0]
 800bd60:	b016      	add	sp, #88	; 0x58
 800bd62:	bd70      	pop	{r4, r5, r6, pc}

0800bd64 <__smakebuf_r>:
 800bd64:	898b      	ldrh	r3, [r1, #12]
 800bd66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd68:	079d      	lsls	r5, r3, #30
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	460c      	mov	r4, r1
 800bd6e:	d507      	bpl.n	800bd80 <__smakebuf_r+0x1c>
 800bd70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd74:	6023      	str	r3, [r4, #0]
 800bd76:	6123      	str	r3, [r4, #16]
 800bd78:	2301      	movs	r3, #1
 800bd7a:	6163      	str	r3, [r4, #20]
 800bd7c:	b002      	add	sp, #8
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}
 800bd80:	ab01      	add	r3, sp, #4
 800bd82:	466a      	mov	r2, sp
 800bd84:	f7ff ffca 	bl	800bd1c <__swhatbuf_r>
 800bd88:	9900      	ldr	r1, [sp, #0]
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f000 f877 	bl	800be80 <_malloc_r>
 800bd92:	b948      	cbnz	r0, 800bda8 <__smakebuf_r+0x44>
 800bd94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd98:	059a      	lsls	r2, r3, #22
 800bd9a:	d4ef      	bmi.n	800bd7c <__smakebuf_r+0x18>
 800bd9c:	f023 0303 	bic.w	r3, r3, #3
 800bda0:	f043 0302 	orr.w	r3, r3, #2
 800bda4:	81a3      	strh	r3, [r4, #12]
 800bda6:	e7e3      	b.n	800bd70 <__smakebuf_r+0xc>
 800bda8:	4b0d      	ldr	r3, [pc, #52]	; (800bde0 <__smakebuf_r+0x7c>)
 800bdaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	6020      	str	r0, [r4, #0]
 800bdb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdb4:	81a3      	strh	r3, [r4, #12]
 800bdb6:	9b00      	ldr	r3, [sp, #0]
 800bdb8:	6163      	str	r3, [r4, #20]
 800bdba:	9b01      	ldr	r3, [sp, #4]
 800bdbc:	6120      	str	r0, [r4, #16]
 800bdbe:	b15b      	cbz	r3, 800bdd8 <__smakebuf_r+0x74>
 800bdc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	f000 f93d 	bl	800c044 <_isatty_r>
 800bdca:	b128      	cbz	r0, 800bdd8 <__smakebuf_r+0x74>
 800bdcc:	89a3      	ldrh	r3, [r4, #12]
 800bdce:	f023 0303 	bic.w	r3, r3, #3
 800bdd2:	f043 0301 	orr.w	r3, r3, #1
 800bdd6:	81a3      	strh	r3, [r4, #12]
 800bdd8:	89a3      	ldrh	r3, [r4, #12]
 800bdda:	431d      	orrs	r5, r3
 800bddc:	81a5      	strh	r5, [r4, #12]
 800bdde:	e7cd      	b.n	800bd7c <__smakebuf_r+0x18>
 800bde0:	0800bbd1 	.word	0x0800bbd1

0800bde4 <_free_r>:
 800bde4:	b538      	push	{r3, r4, r5, lr}
 800bde6:	4605      	mov	r5, r0
 800bde8:	2900      	cmp	r1, #0
 800bdea:	d045      	beq.n	800be78 <_free_r+0x94>
 800bdec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdf0:	1f0c      	subs	r4, r1, #4
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	bfb8      	it	lt
 800bdf6:	18e4      	addlt	r4, r4, r3
 800bdf8:	f000 f946 	bl	800c088 <__malloc_lock>
 800bdfc:	4a1f      	ldr	r2, [pc, #124]	; (800be7c <_free_r+0x98>)
 800bdfe:	6813      	ldr	r3, [r2, #0]
 800be00:	4610      	mov	r0, r2
 800be02:	b933      	cbnz	r3, 800be12 <_free_r+0x2e>
 800be04:	6063      	str	r3, [r4, #4]
 800be06:	6014      	str	r4, [r2, #0]
 800be08:	4628      	mov	r0, r5
 800be0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be0e:	f000 b93c 	b.w	800c08a <__malloc_unlock>
 800be12:	42a3      	cmp	r3, r4
 800be14:	d90c      	bls.n	800be30 <_free_r+0x4c>
 800be16:	6821      	ldr	r1, [r4, #0]
 800be18:	1862      	adds	r2, r4, r1
 800be1a:	4293      	cmp	r3, r2
 800be1c:	bf04      	itt	eq
 800be1e:	681a      	ldreq	r2, [r3, #0]
 800be20:	685b      	ldreq	r3, [r3, #4]
 800be22:	6063      	str	r3, [r4, #4]
 800be24:	bf04      	itt	eq
 800be26:	1852      	addeq	r2, r2, r1
 800be28:	6022      	streq	r2, [r4, #0]
 800be2a:	6004      	str	r4, [r0, #0]
 800be2c:	e7ec      	b.n	800be08 <_free_r+0x24>
 800be2e:	4613      	mov	r3, r2
 800be30:	685a      	ldr	r2, [r3, #4]
 800be32:	b10a      	cbz	r2, 800be38 <_free_r+0x54>
 800be34:	42a2      	cmp	r2, r4
 800be36:	d9fa      	bls.n	800be2e <_free_r+0x4a>
 800be38:	6819      	ldr	r1, [r3, #0]
 800be3a:	1858      	adds	r0, r3, r1
 800be3c:	42a0      	cmp	r0, r4
 800be3e:	d10b      	bne.n	800be58 <_free_r+0x74>
 800be40:	6820      	ldr	r0, [r4, #0]
 800be42:	4401      	add	r1, r0
 800be44:	1858      	adds	r0, r3, r1
 800be46:	4282      	cmp	r2, r0
 800be48:	6019      	str	r1, [r3, #0]
 800be4a:	d1dd      	bne.n	800be08 <_free_r+0x24>
 800be4c:	6810      	ldr	r0, [r2, #0]
 800be4e:	6852      	ldr	r2, [r2, #4]
 800be50:	605a      	str	r2, [r3, #4]
 800be52:	4401      	add	r1, r0
 800be54:	6019      	str	r1, [r3, #0]
 800be56:	e7d7      	b.n	800be08 <_free_r+0x24>
 800be58:	d902      	bls.n	800be60 <_free_r+0x7c>
 800be5a:	230c      	movs	r3, #12
 800be5c:	602b      	str	r3, [r5, #0]
 800be5e:	e7d3      	b.n	800be08 <_free_r+0x24>
 800be60:	6820      	ldr	r0, [r4, #0]
 800be62:	1821      	adds	r1, r4, r0
 800be64:	428a      	cmp	r2, r1
 800be66:	bf04      	itt	eq
 800be68:	6811      	ldreq	r1, [r2, #0]
 800be6a:	6852      	ldreq	r2, [r2, #4]
 800be6c:	6062      	str	r2, [r4, #4]
 800be6e:	bf04      	itt	eq
 800be70:	1809      	addeq	r1, r1, r0
 800be72:	6021      	streq	r1, [r4, #0]
 800be74:	605c      	str	r4, [r3, #4]
 800be76:	e7c7      	b.n	800be08 <_free_r+0x24>
 800be78:	bd38      	pop	{r3, r4, r5, pc}
 800be7a:	bf00      	nop
 800be7c:	200002fc 	.word	0x200002fc

0800be80 <_malloc_r>:
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	1ccd      	adds	r5, r1, #3
 800be84:	f025 0503 	bic.w	r5, r5, #3
 800be88:	3508      	adds	r5, #8
 800be8a:	2d0c      	cmp	r5, #12
 800be8c:	bf38      	it	cc
 800be8e:	250c      	movcc	r5, #12
 800be90:	2d00      	cmp	r5, #0
 800be92:	4606      	mov	r6, r0
 800be94:	db01      	blt.n	800be9a <_malloc_r+0x1a>
 800be96:	42a9      	cmp	r1, r5
 800be98:	d903      	bls.n	800bea2 <_malloc_r+0x22>
 800be9a:	230c      	movs	r3, #12
 800be9c:	6033      	str	r3, [r6, #0]
 800be9e:	2000      	movs	r0, #0
 800bea0:	bd70      	pop	{r4, r5, r6, pc}
 800bea2:	f000 f8f1 	bl	800c088 <__malloc_lock>
 800bea6:	4a21      	ldr	r2, [pc, #132]	; (800bf2c <_malloc_r+0xac>)
 800bea8:	6814      	ldr	r4, [r2, #0]
 800beaa:	4621      	mov	r1, r4
 800beac:	b991      	cbnz	r1, 800bed4 <_malloc_r+0x54>
 800beae:	4c20      	ldr	r4, [pc, #128]	; (800bf30 <_malloc_r+0xb0>)
 800beb0:	6823      	ldr	r3, [r4, #0]
 800beb2:	b91b      	cbnz	r3, 800bebc <_malloc_r+0x3c>
 800beb4:	4630      	mov	r0, r6
 800beb6:	f000 f83d 	bl	800bf34 <_sbrk_r>
 800beba:	6020      	str	r0, [r4, #0]
 800bebc:	4629      	mov	r1, r5
 800bebe:	4630      	mov	r0, r6
 800bec0:	f000 f838 	bl	800bf34 <_sbrk_r>
 800bec4:	1c43      	adds	r3, r0, #1
 800bec6:	d124      	bne.n	800bf12 <_malloc_r+0x92>
 800bec8:	230c      	movs	r3, #12
 800beca:	6033      	str	r3, [r6, #0]
 800becc:	4630      	mov	r0, r6
 800bece:	f000 f8dc 	bl	800c08a <__malloc_unlock>
 800bed2:	e7e4      	b.n	800be9e <_malloc_r+0x1e>
 800bed4:	680b      	ldr	r3, [r1, #0]
 800bed6:	1b5b      	subs	r3, r3, r5
 800bed8:	d418      	bmi.n	800bf0c <_malloc_r+0x8c>
 800beda:	2b0b      	cmp	r3, #11
 800bedc:	d90f      	bls.n	800befe <_malloc_r+0x7e>
 800bede:	600b      	str	r3, [r1, #0]
 800bee0:	50cd      	str	r5, [r1, r3]
 800bee2:	18cc      	adds	r4, r1, r3
 800bee4:	4630      	mov	r0, r6
 800bee6:	f000 f8d0 	bl	800c08a <__malloc_unlock>
 800beea:	f104 000b 	add.w	r0, r4, #11
 800beee:	1d23      	adds	r3, r4, #4
 800bef0:	f020 0007 	bic.w	r0, r0, #7
 800bef4:	1ac3      	subs	r3, r0, r3
 800bef6:	d0d3      	beq.n	800bea0 <_malloc_r+0x20>
 800bef8:	425a      	negs	r2, r3
 800befa:	50e2      	str	r2, [r4, r3]
 800befc:	e7d0      	b.n	800bea0 <_malloc_r+0x20>
 800befe:	428c      	cmp	r4, r1
 800bf00:	684b      	ldr	r3, [r1, #4]
 800bf02:	bf16      	itet	ne
 800bf04:	6063      	strne	r3, [r4, #4]
 800bf06:	6013      	streq	r3, [r2, #0]
 800bf08:	460c      	movne	r4, r1
 800bf0a:	e7eb      	b.n	800bee4 <_malloc_r+0x64>
 800bf0c:	460c      	mov	r4, r1
 800bf0e:	6849      	ldr	r1, [r1, #4]
 800bf10:	e7cc      	b.n	800beac <_malloc_r+0x2c>
 800bf12:	1cc4      	adds	r4, r0, #3
 800bf14:	f024 0403 	bic.w	r4, r4, #3
 800bf18:	42a0      	cmp	r0, r4
 800bf1a:	d005      	beq.n	800bf28 <_malloc_r+0xa8>
 800bf1c:	1a21      	subs	r1, r4, r0
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f000 f808 	bl	800bf34 <_sbrk_r>
 800bf24:	3001      	adds	r0, #1
 800bf26:	d0cf      	beq.n	800bec8 <_malloc_r+0x48>
 800bf28:	6025      	str	r5, [r4, #0]
 800bf2a:	e7db      	b.n	800bee4 <_malloc_r+0x64>
 800bf2c:	200002fc 	.word	0x200002fc
 800bf30:	20000300 	.word	0x20000300

0800bf34 <_sbrk_r>:
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	4c06      	ldr	r4, [pc, #24]	; (800bf50 <_sbrk_r+0x1c>)
 800bf38:	2300      	movs	r3, #0
 800bf3a:	4605      	mov	r5, r0
 800bf3c:	4608      	mov	r0, r1
 800bf3e:	6023      	str	r3, [r4, #0]
 800bf40:	f7f8 fc7c 	bl	800483c <_sbrk>
 800bf44:	1c43      	adds	r3, r0, #1
 800bf46:	d102      	bne.n	800bf4e <_sbrk_r+0x1a>
 800bf48:	6823      	ldr	r3, [r4, #0]
 800bf4a:	b103      	cbz	r3, 800bf4e <_sbrk_r+0x1a>
 800bf4c:	602b      	str	r3, [r5, #0]
 800bf4e:	bd38      	pop	{r3, r4, r5, pc}
 800bf50:	200010b4 	.word	0x200010b4

0800bf54 <__sread>:
 800bf54:	b510      	push	{r4, lr}
 800bf56:	460c      	mov	r4, r1
 800bf58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf5c:	f000 f896 	bl	800c08c <_read_r>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	bfab      	itete	ge
 800bf64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf66:	89a3      	ldrhlt	r3, [r4, #12]
 800bf68:	181b      	addge	r3, r3, r0
 800bf6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf6e:	bfac      	ite	ge
 800bf70:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf72:	81a3      	strhlt	r3, [r4, #12]
 800bf74:	bd10      	pop	{r4, pc}

0800bf76 <__swrite>:
 800bf76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf7a:	461f      	mov	r7, r3
 800bf7c:	898b      	ldrh	r3, [r1, #12]
 800bf7e:	05db      	lsls	r3, r3, #23
 800bf80:	4605      	mov	r5, r0
 800bf82:	460c      	mov	r4, r1
 800bf84:	4616      	mov	r6, r2
 800bf86:	d505      	bpl.n	800bf94 <__swrite+0x1e>
 800bf88:	2302      	movs	r3, #2
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf90:	f000 f868 	bl	800c064 <_lseek_r>
 800bf94:	89a3      	ldrh	r3, [r4, #12]
 800bf96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf9e:	81a3      	strh	r3, [r4, #12]
 800bfa0:	4632      	mov	r2, r6
 800bfa2:	463b      	mov	r3, r7
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfaa:	f000 b817 	b.w	800bfdc <_write_r>

0800bfae <__sseek>:
 800bfae:	b510      	push	{r4, lr}
 800bfb0:	460c      	mov	r4, r1
 800bfb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfb6:	f000 f855 	bl	800c064 <_lseek_r>
 800bfba:	1c43      	adds	r3, r0, #1
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	bf15      	itete	ne
 800bfc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bfc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bfca:	81a3      	strheq	r3, [r4, #12]
 800bfcc:	bf18      	it	ne
 800bfce:	81a3      	strhne	r3, [r4, #12]
 800bfd0:	bd10      	pop	{r4, pc}

0800bfd2 <__sclose>:
 800bfd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd6:	f000 b813 	b.w	800c000 <_close_r>
	...

0800bfdc <_write_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4c07      	ldr	r4, [pc, #28]	; (800bffc <_write_r+0x20>)
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	4608      	mov	r0, r1
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	6022      	str	r2, [r4, #0]
 800bfea:	461a      	mov	r2, r3
 800bfec:	f7f8 fbd5 	bl	800479a <_write>
 800bff0:	1c43      	adds	r3, r0, #1
 800bff2:	d102      	bne.n	800bffa <_write_r+0x1e>
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	b103      	cbz	r3, 800bffa <_write_r+0x1e>
 800bff8:	602b      	str	r3, [r5, #0]
 800bffa:	bd38      	pop	{r3, r4, r5, pc}
 800bffc:	200010b4 	.word	0x200010b4

0800c000 <_close_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4c06      	ldr	r4, [pc, #24]	; (800c01c <_close_r+0x1c>)
 800c004:	2300      	movs	r3, #0
 800c006:	4605      	mov	r5, r0
 800c008:	4608      	mov	r0, r1
 800c00a:	6023      	str	r3, [r4, #0]
 800c00c:	f7f8 fbe1 	bl	80047d2 <_close>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	d102      	bne.n	800c01a <_close_r+0x1a>
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	b103      	cbz	r3, 800c01a <_close_r+0x1a>
 800c018:	602b      	str	r3, [r5, #0]
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	200010b4 	.word	0x200010b4

0800c020 <_fstat_r>:
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	4c07      	ldr	r4, [pc, #28]	; (800c040 <_fstat_r+0x20>)
 800c024:	2300      	movs	r3, #0
 800c026:	4605      	mov	r5, r0
 800c028:	4608      	mov	r0, r1
 800c02a:	4611      	mov	r1, r2
 800c02c:	6023      	str	r3, [r4, #0]
 800c02e:	f7f8 fbdc 	bl	80047ea <_fstat>
 800c032:	1c43      	adds	r3, r0, #1
 800c034:	d102      	bne.n	800c03c <_fstat_r+0x1c>
 800c036:	6823      	ldr	r3, [r4, #0]
 800c038:	b103      	cbz	r3, 800c03c <_fstat_r+0x1c>
 800c03a:	602b      	str	r3, [r5, #0]
 800c03c:	bd38      	pop	{r3, r4, r5, pc}
 800c03e:	bf00      	nop
 800c040:	200010b4 	.word	0x200010b4

0800c044 <_isatty_r>:
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	4c06      	ldr	r4, [pc, #24]	; (800c060 <_isatty_r+0x1c>)
 800c048:	2300      	movs	r3, #0
 800c04a:	4605      	mov	r5, r0
 800c04c:	4608      	mov	r0, r1
 800c04e:	6023      	str	r3, [r4, #0]
 800c050:	f7f8 fbdb 	bl	800480a <_isatty>
 800c054:	1c43      	adds	r3, r0, #1
 800c056:	d102      	bne.n	800c05e <_isatty_r+0x1a>
 800c058:	6823      	ldr	r3, [r4, #0]
 800c05a:	b103      	cbz	r3, 800c05e <_isatty_r+0x1a>
 800c05c:	602b      	str	r3, [r5, #0]
 800c05e:	bd38      	pop	{r3, r4, r5, pc}
 800c060:	200010b4 	.word	0x200010b4

0800c064 <_lseek_r>:
 800c064:	b538      	push	{r3, r4, r5, lr}
 800c066:	4c07      	ldr	r4, [pc, #28]	; (800c084 <_lseek_r+0x20>)
 800c068:	4605      	mov	r5, r0
 800c06a:	4608      	mov	r0, r1
 800c06c:	4611      	mov	r1, r2
 800c06e:	2200      	movs	r2, #0
 800c070:	6022      	str	r2, [r4, #0]
 800c072:	461a      	mov	r2, r3
 800c074:	f7f8 fbd4 	bl	8004820 <_lseek>
 800c078:	1c43      	adds	r3, r0, #1
 800c07a:	d102      	bne.n	800c082 <_lseek_r+0x1e>
 800c07c:	6823      	ldr	r3, [r4, #0]
 800c07e:	b103      	cbz	r3, 800c082 <_lseek_r+0x1e>
 800c080:	602b      	str	r3, [r5, #0]
 800c082:	bd38      	pop	{r3, r4, r5, pc}
 800c084:	200010b4 	.word	0x200010b4

0800c088 <__malloc_lock>:
 800c088:	4770      	bx	lr

0800c08a <__malloc_unlock>:
 800c08a:	4770      	bx	lr

0800c08c <_read_r>:
 800c08c:	b538      	push	{r3, r4, r5, lr}
 800c08e:	4c07      	ldr	r4, [pc, #28]	; (800c0ac <_read_r+0x20>)
 800c090:	4605      	mov	r5, r0
 800c092:	4608      	mov	r0, r1
 800c094:	4611      	mov	r1, r2
 800c096:	2200      	movs	r2, #0
 800c098:	6022      	str	r2, [r4, #0]
 800c09a:	461a      	mov	r2, r3
 800c09c:	f7f8 fb60 	bl	8004760 <_read>
 800c0a0:	1c43      	adds	r3, r0, #1
 800c0a2:	d102      	bne.n	800c0aa <_read_r+0x1e>
 800c0a4:	6823      	ldr	r3, [r4, #0]
 800c0a6:	b103      	cbz	r3, 800c0aa <_read_r+0x1e>
 800c0a8:	602b      	str	r3, [r5, #0]
 800c0aa:	bd38      	pop	{r3, r4, r5, pc}
 800c0ac:	200010b4 	.word	0x200010b4

0800c0b0 <_init>:
 800c0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b2:	bf00      	nop
 800c0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0b6:	bc08      	pop	{r3}
 800c0b8:	469e      	mov	lr, r3
 800c0ba:	4770      	bx	lr

0800c0bc <_fini>:
 800c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0be:	bf00      	nop
 800c0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0c2:	bc08      	pop	{r3}
 800c0c4:	469e      	mov	lr, r3
 800c0c6:	4770      	bx	lr
