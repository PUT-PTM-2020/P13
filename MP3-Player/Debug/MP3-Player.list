
MP3-Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800c974  0800c974  0001c974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca2c  0800ca2c  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca2c  0800ca2c  0001ca2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca34  0800ca34  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca34  0800ca34  0001ca34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca38  0800ca38  0001ca38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800ca3c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000104c  200000d8  0800cb10  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001124  0800cb10  00021124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a066  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000358d  00000000  00000000  0003a16a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f0  00000000  00000000  0003d6f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001768  00000000  00000000  0003efe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025371  00000000  00000000  00040750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000140fe  00000000  00000000  00065ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db41e  00000000  00000000  00079bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154fdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070e4  00000000  00000000  00155058  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d8 	.word	0x200000d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c95c 	.word	0x0800c95c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000dc 	.word	0x200000dc
 80001c4:	0800c95c 	.word	0x0800c95c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b972 	b.w	8000cb0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	4688      	mov	r8, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14b      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4615      	mov	r5, r2
 80009f6:	d967      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0720 	rsb	r7, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	fa20 f707 	lsr.w	r7, r0, r7
 8000a0a:	4095      	lsls	r5, r2
 8000a0c:	ea47 0803 	orr.w	r8, r7, r3
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a1c:	fa1f fc85 	uxth.w	ip, r5
 8000a20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a28:	fb07 f10c 	mul.w	r1, r7, ip
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18eb      	adds	r3, r5, r3
 8000a32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a36:	f080 811b 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8118 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a40:	3f02      	subs	r7, #2
 8000a42:	442b      	add	r3, r5
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a58:	45a4      	cmp	ip, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	192c      	adds	r4, r5, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8107 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	f240 8104 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	442c      	add	r4, r5
 8000a70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a74:	eba4 040c 	sub.w	r4, r4, ip
 8000a78:	2700      	movs	r7, #0
 8000a7a:	b11e      	cbz	r6, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c6 4300 	strd	r4, r3, [r6]
 8000a84:	4639      	mov	r1, r7
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xbe>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80eb 	beq.w	8000c6a <__udivmoddi4+0x286>
 8000a94:	2700      	movs	r7, #0
 8000a96:	e9c6 0100 	strd	r0, r1, [r6]
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f783 	clz	r7, r3
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d147      	bne.n	8000b3a <__udivmoddi4+0x156>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd0>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80fa 	bhi.w	8000ca8 <__udivmoddi4+0x2c4>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	4698      	mov	r8, r3
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000ac2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xe8>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad6:	1b49      	subs	r1, r1, r5
 8000ad8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000adc:	fa1f f885 	uxth.w	r8, r5
 8000ae0:	2701      	movs	r7, #1
 8000ae2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb08 f10c 	mul.w	r1, r8, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x14c>
 8000b20:	192c      	adds	r4, r5, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x14a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80b6 	bhi.w	8000c9a <__udivmoddi4+0x2b6>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e79f      	b.n	8000a7a <__udivmoddi4+0x96>
 8000b3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b3e:	40bb      	lsls	r3, r7
 8000b40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b48:	fa01 f407 	lsl.w	r4, r1, r7
 8000b4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b58:	4325      	orrs	r5, r4
 8000b5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b5e:	0c2c      	lsrs	r4, r5, #16
 8000b60:	fb08 3319 	mls	r3, r8, r9, r3
 8000b64:	fa1f fa8e 	uxth.w	sl, lr
 8000b68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b70:	429c      	cmp	r4, r3
 8000b72:	fa02 f207 	lsl.w	r2, r2, r7
 8000b76:	fa00 f107 	lsl.w	r1, r0, r7
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b84:	f080 8087 	bcs.w	8000c96 <__udivmoddi4+0x2b2>
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	f240 8084 	bls.w	8000c96 <__udivmoddi4+0x2b2>
 8000b8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b92:	4473      	add	r3, lr
 8000b94:	1b1b      	subs	r3, r3, r4
 8000b96:	b2ad      	uxth	r5, r5
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ba4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ba8:	45a2      	cmp	sl, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1e 0404 	adds.w	r4, lr, r4
 8000bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb4:	d26b      	bcs.n	8000c8e <__udivmoddi4+0x2aa>
 8000bb6:	45a2      	cmp	sl, r4
 8000bb8:	d969      	bls.n	8000c8e <__udivmoddi4+0x2aa>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4474      	add	r4, lr
 8000bbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc6:	eba4 040a 	sub.w	r4, r4, sl
 8000bca:	454c      	cmp	r4, r9
 8000bcc:	46c2      	mov	sl, r8
 8000bce:	464b      	mov	r3, r9
 8000bd0:	d354      	bcc.n	8000c7c <__udivmoddi4+0x298>
 8000bd2:	d051      	beq.n	8000c78 <__udivmoddi4+0x294>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d069      	beq.n	8000cac <__udivmoddi4+0x2c8>
 8000bd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bdc:	eb64 0403 	sbc.w	r4, r4, r3
 8000be0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	40fc      	lsrs	r4, r7
 8000be8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bec:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e747      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000bf4:	f1c2 0320 	rsb	r3, r2, #32
 8000bf8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bfc:	4095      	lsls	r5, r2
 8000bfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000c02:	fa21 f303 	lsr.w	r3, r1, r3
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	4338      	orrs	r0, r7
 8000c0c:	0c01      	lsrs	r1, r0, #16
 8000c0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb07 f308 	mul.w	r3, r7, r8
 8000c22:	428b      	cmp	r3, r1
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x256>
 8000c2a:	1869      	adds	r1, r5, r1
 8000c2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c30:	d22f      	bcs.n	8000c92 <__udivmoddi4+0x2ae>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d92d      	bls.n	8000c92 <__udivmoddi4+0x2ae>
 8000c36:	3f02      	subs	r7, #2
 8000c38:	4429      	add	r1, r5
 8000c3a:	1acb      	subs	r3, r1, r3
 8000c3c:	b281      	uxth	r1, r0
 8000c3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb00 f308 	mul.w	r3, r0, r8
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x27e>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c58:	d217      	bcs.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d915      	bls.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c68:	e73b      	b.n	8000ae2 <__udivmoddi4+0xfe>
 8000c6a:	4637      	mov	r7, r6
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e709      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c70:	4607      	mov	r7, r0
 8000c72:	e6e7      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c74:	4618      	mov	r0, r3
 8000c76:	e6fb      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c78:	4541      	cmp	r1, r8
 8000c7a:	d2ab      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c80:	eb69 020e 	sbc.w	r2, r9, lr
 8000c84:	3801      	subs	r0, #1
 8000c86:	4613      	mov	r3, r2
 8000c88:	e7a4      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	e7e9      	b.n	8000c62 <__udivmoddi4+0x27e>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	e795      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c92:	4667      	mov	r7, ip
 8000c94:	e7d1      	b.n	8000c3a <__udivmoddi4+0x256>
 8000c96:	4681      	mov	r9, r0
 8000c98:	e77c      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	442c      	add	r4, r5
 8000c9e:	e747      	b.n	8000b30 <__udivmoddi4+0x14c>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	e72f      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca8:	4638      	mov	r0, r7
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xda>
 8000cac:	4637      	mov	r7, r6
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0xa0>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <DESELECT>:

static
inline void DESELECT(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <xmit_spi>:
extern SPI_HandleTypeDef hspi1;


static
void xmit_spi(BYTE Data)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000cda:	bf00      	nop
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <xmit_spi+0x30>)
 8000cde:	f009 fe1b 	bl	800a918 <HAL_SPI_GetState>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d1f9      	bne.n	8000cdc <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1,5000);
 8000ce8:	1df9      	adds	r1, r7, #7
 8000cea:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <xmit_spi+0x30>)
 8000cf2:	f009 fb3b 	bl	800a36c <HAL_SPI_Transmit>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20001034 	.word	0x20001034

08000d04 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8000d0a:	23ff      	movs	r3, #255	; 0xff
 8000d0c:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000d12:	bf00      	nop
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <rcvr_spi+0x38>)
 8000d16:	f009 fdff 	bl	800a918 <HAL_SPI_GetState>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d1f9      	bne.n	8000d14 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1,5000);
 8000d20:	1dba      	adds	r2, r7, #6
 8000d22:	1df9      	adds	r1, r7, #7
 8000d24:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <rcvr_spi+0x38>)
 8000d2e:	f009 fc51 	bl	800a5d4 <HAL_SPI_TransmitReceive>
	return Data;
 8000d32:	79bb      	ldrb	r3, [r7, #6]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20001034 	.word	0x20001034

08000d40 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8000d48:	f7ff ffdc 	bl	8000d04 <rcvr_spi>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	701a      	strb	r2, [r3, #0]
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <wait_ready+0x34>)
 8000d64:	2232      	movs	r2, #50	; 0x32
 8000d66:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8000d68:	f7ff ffcc 	bl	8000d04 <rcvr_spi>
	do
		res = rcvr_spi();
 8000d6c:	f7ff ffca 	bl	8000d04 <rcvr_spi>
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2bff      	cmp	r3, #255	; 0xff
 8000d78:	d004      	beq.n	8000d84 <wait_ready+0x28>
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <wait_ready+0x34>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f3      	bne.n	8000d6c <wait_ready+0x10>

	return res;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000f5 	.word	0x200000f5

08000d94 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8000d9a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d9e:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8000da0:	f7ff ff8f 	bl	8000cc2 <DESELECT>

	for (i = 0; i < 10; i++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e005      	b.n	8000db6 <power_on+0x22>
		xmit_spi(0xFF);
 8000daa:	20ff      	movs	r0, #255	; 0xff
 8000dac:	f7ff ff90 	bl	8000cd0 <xmit_spi>
	for (i = 0; i < 10; i++)
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	3301      	adds	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	2b09      	cmp	r3, #9
 8000dba:	d9f6      	bls.n	8000daa <power_on+0x16>

	SELECT();
 8000dbc:	f7ff ff7a 	bl	8000cb4 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8000dc0:	2340      	movs	r3, #64	; 0x40
 8000dc2:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8000dd4:	2395      	movs	r3, #149	; 0x95
 8000dd6:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e00b      	b.n	8000df6 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	f107 0210 	add.w	r2, r7, #16
 8000de4:	4413      	add	r3, r2
 8000de6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff70 	bl	8000cd0 <xmit_spi>
	for (i = 0; i < 6; i++)
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	3301      	adds	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d9f0      	bls.n	8000dde <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000dfc:	e002      	b.n	8000e04 <power_on+0x70>
		Count--;
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000e04:	f7ff ff7e 	bl	8000d04 <rcvr_spi>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d002      	beq.n	8000e14 <power_on+0x80>
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f4      	bne.n	8000dfe <power_on+0x6a>

	DESELECT();
 8000e14:	f7ff ff55 	bl	8000cc2 <DESELECT>
	xmit_spi(0XFF);
 8000e18:	20ff      	movs	r0, #255	; 0xff
 8000e1a:	f7ff ff59 	bl	8000cd0 <xmit_spi>

	PowerFlag = 1;
 8000e1e:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <power_on+0x98>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200000f7 	.word	0x200000f7

08000e30 <power_off>:

static
void power_off(void) {
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <power_off+0x14>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	200000f7 	.word	0x200000f7

08000e48 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <chk_power+0x14>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200000f7 	.word	0x200000f7

08000e60 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <rcvr_datablock+0x68>)
 8000e6c:	220a      	movs	r2, #10
 8000e6e:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000e70:	f7ff ff48 	bl	8000d04 <rcvr_spi>
 8000e74:	4603      	mov	r3, r0
 8000e76:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	2bff      	cmp	r3, #255	; 0xff
 8000e7c:	d104      	bne.n	8000e88 <rcvr_datablock+0x28>
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <rcvr_datablock+0x68>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1f3      	bne.n	8000e70 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	2bfe      	cmp	r3, #254	; 0xfe
 8000e8c:	d001      	beq.n	8000e92 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e016      	b.n	8000ec0 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff51 	bl	8000d40 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff4b 	bl	8000d40 <rcvr_spi_m>
	} while (btr -= 2);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	3b02      	subs	r3, #2
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1ed      	bne.n	8000e92 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8000eb6:	f7ff ff25 	bl	8000d04 <rcvr_spi>
	rcvr_spi();
 8000eba:	f7ff ff23 	bl	8000d04 <rcvr_spi>

	return TRUE; /* Return with success */
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200000f4 	.word	0x200000f4

08000ecc <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000edc:	f7ff ff3e 	bl	8000d5c <wait_ready>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2bff      	cmp	r3, #255	; 0xff
 8000ee4:	d001      	beq.n	8000eea <xmit_datablock+0x1e>
		return FALSE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e040      	b.n	8000f6c <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff feef 	bl	8000cd0 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	2bfd      	cmp	r3, #253	; 0xfd
 8000ef6:	d031      	beq.n	8000f5c <xmit_datablock+0x90>
		wc = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fee3 	bl	8000cd0 <xmit_spi>
			xmit_spi(*buff++);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fedc 	bl	8000cd0 <xmit_spi>
		} while (--wc);
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	73bb      	strb	r3, [r7, #14]
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1eb      	bne.n	8000efc <xmit_datablock+0x30>

		rcvr_spi();
 8000f24:	f7ff feee 	bl	8000d04 <rcvr_spi>
		rcvr_spi();
 8000f28:	f7ff feec 	bl	8000d04 <rcvr_spi>

		while (i <= 64) {
 8000f2c:	e00b      	b.n	8000f46 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8000f2e:	f7ff fee9 	bl	8000d04 <rcvr_spi>
 8000f32:	4603      	mov	r3, r0
 8000f34:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	f003 031f 	and.w	r3, r3, #31
 8000f3c:	2b05      	cmp	r3, #5
 8000f3e:	d006      	beq.n	8000f4e <xmit_datablock+0x82>
				break;
			i++;
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b40      	cmp	r3, #64	; 0x40
 8000f4a:	d9f0      	bls.n	8000f2e <xmit_datablock+0x62>
 8000f4c:	e000      	b.n	8000f50 <xmit_datablock+0x84>
				break;
 8000f4e:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8000f50:	bf00      	nop
 8000f52:	f7ff fed7 	bl	8000d04 <rcvr_spi>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0fa      	beq.n	8000f52 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d101      	bne.n	8000f6a <xmit_datablock+0x9e>
		return TRUE;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <xmit_datablock+0xa0>
	else
		return FALSE;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8000f80:	f7ff feec 	bl	8000d5c <wait_ready>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2bff      	cmp	r3, #255	; 0xff
 8000f88:	d001      	beq.n	8000f8e <send_cmd+0x1a>
		return 0xFF;
 8000f8a:	23ff      	movs	r3, #255	; 0xff
 8000f8c:	e040      	b.n	8001010 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fe9d 	bl	8000cd0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	0e1b      	lsrs	r3, r3, #24
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fe97 	bl	8000cd0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	0c1b      	lsrs	r3, r3, #16
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fe91 	bl	8000cd0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fe8b 	bl	8000cd0 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fe86 	bl	8000cd0 <xmit_spi>
	n = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b40      	cmp	r3, #64	; 0x40
 8000fcc:	d101      	bne.n	8000fd2 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8000fce:	2395      	movs	r3, #149	; 0x95
 8000fd0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b48      	cmp	r3, #72	; 0x48
 8000fd6:	d101      	bne.n	8000fdc <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8000fd8:	2387      	movs	r3, #135	; 0x87
 8000fda:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fe76 	bl	8000cd0 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b4c      	cmp	r3, #76	; 0x4c
 8000fe8:	d101      	bne.n	8000fee <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8000fea:	f7ff fe8b 	bl	8000d04 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8000fee:	230a      	movs	r3, #10
 8000ff0:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8000ff2:	f7ff fe87 	bl	8000d04 <rcvr_spi>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8000ffa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	da05      	bge.n	800100e <send_cmd+0x9a>
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	3b01      	subs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f1      	bne.n	8000ff2 <send_cmd+0x7e>

	return res; /* Return with the response value */
 800100e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8001028:	2301      	movs	r3, #1
 800102a:	e0d5      	b.n	80011d8 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 800102c:	4b6c      	ldr	r3, [pc, #432]	; (80011e0 <disk_initialize+0x1c8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 800103a:	4b69      	ldr	r3, [pc, #420]	; (80011e0 <disk_initialize+0x1c8>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	e0ca      	b.n	80011d8 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8001042:	f7ff fea7 	bl	8000d94 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8001046:	f7ff fe35 	bl	8000cb4 <SELECT>
	ty = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 800104e:	2100      	movs	r1, #0
 8001050:	2040      	movs	r0, #64	; 0x40
 8001052:	f7ff ff8f 	bl	8000f74 <send_cmd>
 8001056:	4603      	mov	r3, r0
 8001058:	2b01      	cmp	r3, #1
 800105a:	f040 80a5 	bne.w	80011a8 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 800105e:	4b61      	ldr	r3, [pc, #388]	; (80011e4 <disk_initialize+0x1cc>)
 8001060:	2264      	movs	r2, #100	; 0x64
 8001062:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8001064:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001068:	2048      	movs	r0, #72	; 0x48
 800106a:	f7ff ff83 	bl	8000f74 <send_cmd>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d158      	bne.n	8001126 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e00c      	b.n	8001094 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800107a:	7bfc      	ldrb	r4, [r7, #15]
 800107c:	f7ff fe42 	bl	8000d04 <rcvr_spi>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	4423      	add	r3, r4
 800108a:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	3301      	adds	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b03      	cmp	r3, #3
 8001098:	d9ef      	bls.n	800107a <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 800109a:	7abb      	ldrb	r3, [r7, #10]
 800109c:	2b01      	cmp	r3, #1
 800109e:	f040 8083 	bne.w	80011a8 <disk_initialize+0x190>
 80010a2:	7afb      	ldrb	r3, [r7, #11]
 80010a4:	2baa      	cmp	r3, #170	; 0xaa
 80010a6:	d17f      	bne.n	80011a8 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 80010a8:	2100      	movs	r1, #0
 80010aa:	2077      	movs	r0, #119	; 0x77
 80010ac:	f7ff ff62 	bl	8000f74 <send_cmd>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d807      	bhi.n	80010c6 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80010b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010ba:	2069      	movs	r0, #105	; 0x69
 80010bc:	f7ff ff5a 	bl	8000f74 <send_cmd>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80010c6:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <disk_initialize+0x1cc>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1eb      	bne.n	80010a8 <disk_initialize+0x90>
 80010d0:	e000      	b.n	80010d4 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80010d2:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80010d4:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <disk_initialize+0x1cc>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d064      	beq.n	80011a8 <disk_initialize+0x190>
 80010de:	2100      	movs	r1, #0
 80010e0:	207a      	movs	r0, #122	; 0x7a
 80010e2:	f7ff ff47 	bl	8000f74 <send_cmd>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d15d      	bne.n	80011a8 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e00c      	b.n	800110c <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 80010f2:	7bfc      	ldrb	r4, [r7, #15]
 80010f4:	f7ff fe06 	bl	8000d04 <rcvr_spi>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4423      	add	r3, r4
 8001102:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	3301      	adds	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d9ef      	bls.n	80010f2 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8001112:	7a3b      	ldrb	r3, [r7, #8]
 8001114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <disk_initialize+0x108>
 800111c:	2306      	movs	r3, #6
 800111e:	e000      	b.n	8001122 <disk_initialize+0x10a>
 8001120:	2302      	movs	r3, #2
 8001122:	73bb      	strb	r3, [r7, #14]
 8001124:	e040      	b.n	80011a8 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001126:	2100      	movs	r1, #0
 8001128:	2077      	movs	r0, #119	; 0x77
 800112a:	f7ff ff23 	bl	8000f74 <send_cmd>
 800112e:	4603      	mov	r3, r0
 8001130:	2b01      	cmp	r3, #1
 8001132:	d808      	bhi.n	8001146 <disk_initialize+0x12e>
 8001134:	2100      	movs	r1, #0
 8001136:	2069      	movs	r0, #105	; 0x69
 8001138:	f7ff ff1c 	bl	8000f74 <send_cmd>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d801      	bhi.n	8001146 <disk_initialize+0x12e>
 8001142:	2302      	movs	r3, #2
 8001144:	e000      	b.n	8001148 <disk_initialize+0x130>
 8001146:	2301      	movs	r3, #1
 8001148:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d10e      	bne.n	800116e <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8001150:	2100      	movs	r1, #0
 8001152:	2077      	movs	r0, #119	; 0x77
 8001154:	f7ff ff0e 	bl	8000f74 <send_cmd>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d80e      	bhi.n	800117c <disk_initialize+0x164>
 800115e:	2100      	movs	r1, #0
 8001160:	2069      	movs	r0, #105	; 0x69
 8001162:	f7ff ff07 	bl	8000f74 <send_cmd>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d107      	bne.n	800117c <disk_initialize+0x164>
						break; /* ACMD41 */
 800116c:	e00d      	b.n	800118a <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 800116e:	2100      	movs	r1, #0
 8001170:	2041      	movs	r0, #65	; 0x41
 8001172:	f7ff feff 	bl	8000f74 <send_cmd>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d005      	beq.n	8001188 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <disk_initialize+0x1cc>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1e1      	bne.n	800114a <disk_initialize+0x132>
 8001186:	e000      	b.n	800118a <disk_initialize+0x172>
						break; /* CMD1 */
 8001188:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <disk_initialize+0x1cc>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d007      	beq.n	80011a4 <disk_initialize+0x18c>
 8001194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001198:	2050      	movs	r0, #80	; 0x50
 800119a:	f7ff feeb 	bl	8000f74 <send_cmd>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <disk_initialize+0x190>
				ty = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 80011a8:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <disk_initialize+0x1d0>)
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80011ae:	f7ff fd88 	bl	8000cc2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80011b2:	f7ff fda7 	bl	8000d04 <rcvr_spi>

	if (ty) /* Initialization succeded */
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <disk_initialize+0x1c8>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f023 0301 	bic.w	r3, r3, #1
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <disk_initialize+0x1c8>)
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e001      	b.n	80011d2 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80011ce:	f7ff fe2f 	bl	8000e30 <power_off>

	return Stat;
 80011d2:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <disk_initialize+0x1c8>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd90      	pop	{r4, r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	200000f4 	.word	0x200000f4
 80011e8:	200000f6 	.word	0x200000f6

080011ec <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	if (drv)
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80011fc:	2301      	movs	r3, #1
 80011fe:	e002      	b.n	8001206 <disk_status+0x1a>
	return Stat;
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <disk_status+0x28>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000000 	.word	0x20000000

08001218 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <disk_read+0x1c>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <disk_read+0x20>
		return RES_PARERR;
 8001234:	2304      	movs	r3, #4
 8001236:	e051      	b.n	80012dc <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <disk_read+0xcc>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <disk_read+0x32>
		return RES_NOTRDY;
 8001246:	2303      	movs	r3, #3
 8001248:	e048      	b.n	80012dc <disk_read+0xc4>

	if (!(CardType & 4))
 800124a:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <disk_read+0xd0>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	025b      	lsls	r3, r3, #9
 800125a:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 800125c:	f7ff fd2a 	bl	8000cb4 <SELECT>

	if (count == 1) { /* Single block read */
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d111      	bne.n	800128a <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	2051      	movs	r0, #81	; 0x51
 800126a:	f7ff fe83 	bl	8000f74 <send_cmd>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d129      	bne.n	80012c8 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8001274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001278:	68b8      	ldr	r0, [r7, #8]
 800127a:	f7ff fdf1 	bl	8000e60 <rcvr_datablock>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d021      	beq.n	80012c8 <disk_read+0xb0>
			count = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	e01e      	b.n	80012c8 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	2052      	movs	r0, #82	; 0x52
 800128e:	f7ff fe71 	bl	8000f74 <send_cmd>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d117      	bne.n	80012c8 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8001298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129c:	68b8      	ldr	r0, [r7, #8]
 800129e:	f7ff fddf 	bl	8000e60 <rcvr_datablock>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00a      	beq.n	80012be <disk_read+0xa6>
					break;
				buff += 512;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012ae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1ed      	bne.n	8001298 <disk_read+0x80>
 80012bc:	e000      	b.n	80012c0 <disk_read+0xa8>
					break;
 80012be:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 80012c0:	2100      	movs	r1, #0
 80012c2:	204c      	movs	r0, #76	; 0x4c
 80012c4:	f7ff fe56 	bl	8000f74 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 80012c8:	f7ff fcfb 	bl	8000cc2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80012cc:	f7ff fd1a 	bl	8000d04 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf14      	ite	ne
 80012d6:	2301      	movne	r3, #1
 80012d8:	2300      	moveq	r3, #0
 80012da:	b2db      	uxtb	r3, r3
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	200000f6 	.word	0x200000f6

080012ec <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	4603      	mov	r3, r0
 80012fa:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <disk_write+0x1c>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <disk_write+0x20>
		return RES_PARERR;
 8001308:	2304      	movs	r3, #4
 800130a:	e06b      	b.n	80013e4 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <disk_write+0x100>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <disk_write+0x32>
		return RES_NOTRDY;
 800131a:	2303      	movs	r3, #3
 800131c:	e062      	b.n	80013e4 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 800131e:	4b33      	ldr	r3, [pc, #204]	; (80013ec <disk_write+0x100>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <disk_write+0x44>
		return RES_WRPRT;
 800132c:	2302      	movs	r3, #2
 800132e:	e059      	b.n	80013e4 <disk_write+0xf8>

	if (!(CardType & 4))
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <disk_write+0x104>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	025b      	lsls	r3, r3, #9
 8001340:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8001342:	f7ff fcb7 	bl	8000cb4 <SELECT>

	if (count == 1) { /* Single block write */
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d110      	bne.n	800136e <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	2058      	movs	r0, #88	; 0x58
 8001350:	f7ff fe10 	bl	8000f74 <send_cmd>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d13a      	bne.n	80013d0 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 800135a:	21fe      	movs	r1, #254	; 0xfe
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f7ff fdb5 	bl	8000ecc <xmit_datablock>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d033      	beq.n	80013d0 <disk_write+0xe4>
			count = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	e030      	b.n	80013d0 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <disk_write+0x104>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d007      	beq.n	800138a <disk_write+0x9e>
			send_cmd(CMD55, 0);
 800137a:	2100      	movs	r1, #0
 800137c:	2077      	movs	r0, #119	; 0x77
 800137e:	f7ff fdf9 	bl	8000f74 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	2057      	movs	r0, #87	; 0x57
 8001386:	f7ff fdf5 	bl	8000f74 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	2059      	movs	r0, #89	; 0x59
 800138e:	f7ff fdf1 	bl	8000f74 <send_cmd>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d11b      	bne.n	80013d0 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8001398:	21fc      	movs	r1, #252	; 0xfc
 800139a:	68b8      	ldr	r0, [r7, #8]
 800139c:	f7ff fd96 	bl	8000ecc <xmit_datablock>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00a      	beq.n	80013bc <disk_write+0xd0>
					break;
				buff += 512;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013ac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1ee      	bne.n	8001398 <disk_write+0xac>
 80013ba:	e000      	b.n	80013be <disk_write+0xd2>
					break;
 80013bc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 80013be:	21fd      	movs	r1, #253	; 0xfd
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fd83 	bl	8000ecc <xmit_datablock>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <disk_write+0xe4>
				count = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 80013d0:	f7ff fc77 	bl	8000cc2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80013d4:	f7ff fc96 	bl	8000d04 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bf14      	ite	ne
 80013de:	2301      	movne	r3, #1
 80013e0:	2300      	moveq	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000000 	.word	0x20000000
 80013f0:	200000f6 	.word	0x200000f6

080013f4 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b08b      	sub	sp, #44	; 0x2c
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	603a      	str	r2, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	460b      	mov	r3, r1
 8001402:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <disk_ioctl+0x1e>
		return RES_PARERR;
 800140e:	2304      	movs	r3, #4
 8001410:	e16a      	b.n	80016e8 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	2b07      	cmp	r3, #7
 800141c:	d127      	bne.n	800146e <disk_ioctl+0x7a>
		switch (*ptr) {
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d00e      	beq.n	8001444 <disk_ioctl+0x50>
 8001426:	2b02      	cmp	r3, #2
 8001428:	d012      	beq.n	8001450 <disk_ioctl+0x5c>
 800142a:	2b00      	cmp	r3, #0
 800142c:	d11b      	bne.n	8001466 <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 800142e:	f7ff fd0b 	bl	8000e48 <chk_power>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <disk_ioctl+0x48>
				power_off(); /* Power off */
 8001438:	f7ff fcfa 	bl	8000e30 <power_off>
			res = RES_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001442:	e14f      	b.n	80016e4 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8001444:	f7ff fca6 	bl	8000d94 <power_on>
			res = RES_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800144e:	e149      	b.n	80016e4 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8001450:	f7ff fcfa 	bl	8000e48 <chk_power>
 8001454:	4602      	mov	r2, r0
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	3301      	adds	r3, #1
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001464:	e13e      	b.n	80016e4 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8001466:	2304      	movs	r3, #4
 8001468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800146c:	e13a      	b.n	80016e4 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 800146e:	4ba0      	ldr	r3, [pc, #640]	; (80016f0 <disk_ioctl+0x2fc>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 800147c:	2303      	movs	r3, #3
 800147e:	e133      	b.n	80016e8 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8001480:	f7ff fc18 	bl	8000cb4 <SELECT>

		switch (ctrl) {
 8001484:	79bb      	ldrb	r3, [r7, #6]
 8001486:	2b35      	cmp	r3, #53	; 0x35
 8001488:	f200 811d 	bhi.w	80016c6 <disk_ioctl+0x2d2>
 800148c:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <disk_ioctl+0xa0>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	0800162f 	.word	0x0800162f
 8001498:	0800156d 	.word	0x0800156d
 800149c:	0800161f 	.word	0x0800161f
 80014a0:	080016c7 	.word	0x080016c7
 80014a4:	080016c7 	.word	0x080016c7
 80014a8:	080016c7 	.word	0x080016c7
 80014ac:	080016c7 	.word	0x080016c7
 80014b0:	080016c7 	.word	0x080016c7
 80014b4:	080016c7 	.word	0x080016c7
 80014b8:	080016c7 	.word	0x080016c7
 80014bc:	080016c7 	.word	0x080016c7
 80014c0:	080016c7 	.word	0x080016c7
 80014c4:	080016c7 	.word	0x080016c7
 80014c8:	080016c7 	.word	0x080016c7
 80014cc:	080016c7 	.word	0x080016c7
 80014d0:	080016c7 	.word	0x080016c7
 80014d4:	080016c7 	.word	0x080016c7
 80014d8:	080016c7 	.word	0x080016c7
 80014dc:	080016c7 	.word	0x080016c7
 80014e0:	080016c7 	.word	0x080016c7
 80014e4:	080016c7 	.word	0x080016c7
 80014e8:	080016c7 	.word	0x080016c7
 80014ec:	080016c7 	.word	0x080016c7
 80014f0:	080016c7 	.word	0x080016c7
 80014f4:	080016c7 	.word	0x080016c7
 80014f8:	080016c7 	.word	0x080016c7
 80014fc:	080016c7 	.word	0x080016c7
 8001500:	080016c7 	.word	0x080016c7
 8001504:	080016c7 	.word	0x080016c7
 8001508:	080016c7 	.word	0x080016c7
 800150c:	080016c7 	.word	0x080016c7
 8001510:	080016c7 	.word	0x080016c7
 8001514:	080016c7 	.word	0x080016c7
 8001518:	080016c7 	.word	0x080016c7
 800151c:	080016c7 	.word	0x080016c7
 8001520:	080016c7 	.word	0x080016c7
 8001524:	080016c7 	.word	0x080016c7
 8001528:	080016c7 	.word	0x080016c7
 800152c:	080016c7 	.word	0x080016c7
 8001530:	080016c7 	.word	0x080016c7
 8001534:	080016c7 	.word	0x080016c7
 8001538:	080016c7 	.word	0x080016c7
 800153c:	080016c7 	.word	0x080016c7
 8001540:	080016c7 	.word	0x080016c7
 8001544:	080016c7 	.word	0x080016c7
 8001548:	080016c7 	.word	0x080016c7
 800154c:	080016c7 	.word	0x080016c7
 8001550:	080016c7 	.word	0x080016c7
 8001554:	080016c7 	.word	0x080016c7
 8001558:	080016c7 	.word	0x080016c7
 800155c:	080016c7 	.word	0x080016c7
 8001560:	08001641 	.word	0x08001641
 8001564:	08001665 	.word	0x08001665
 8001568:	08001689 	.word	0x08001689
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800156c:	2100      	movs	r1, #0
 800156e:	2049      	movs	r0, #73	; 0x49
 8001570:	f7ff fd00 	bl	8000f74 <send_cmd>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 80a9 	bne.w	80016ce <disk_ioctl+0x2da>
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2110      	movs	r1, #16
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fc6c 	bl	8000e60 <rcvr_datablock>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 809f 	beq.w	80016ce <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8001590:	7b3b      	ldrb	r3, [r7, #12]
 8001592:	099b      	lsrs	r3, r3, #6
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b01      	cmp	r3, #1
 8001598:	d10e      	bne.n	80015b8 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800159a:	7d7b      	ldrb	r3, [r7, #21]
 800159c:	b29a      	uxth	r2, r3
 800159e:	7d3b      	ldrb	r3, [r7, #20]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	3301      	adds	r3, #1
 80015ac:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80015ae:	8bfb      	ldrh	r3, [r7, #30]
 80015b0:	029a      	lsls	r2, r3, #10
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e02e      	b.n	8001616 <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80015b8:	7c7b      	ldrb	r3, [r7, #17]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	7dbb      	ldrb	r3, [r7, #22]
 80015c2:	09db      	lsrs	r3, r3, #7
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4413      	add	r3, r2
 80015c8:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 80015ca:	7d7b      	ldrb	r3, [r7, #21]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f003 0306 	and.w	r3, r3, #6
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80015da:	3302      	adds	r3, #2
 80015dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80015e0:	7d3b      	ldrb	r3, [r7, #20]
 80015e2:	099b      	lsrs	r3, r3, #6
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	7cfb      	ldrb	r3, [r7, #19]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 80015f4:	7cbb      	ldrb	r3, [r7, #18]
 80015f6:	029b      	lsls	r3, r3, #10
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4413      	add	r3, r2
 8001602:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8001604:	3301      	adds	r3, #1
 8001606:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001608:	8bfa      	ldrh	r2, [r7, #30]
 800160a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800160e:	3b09      	subs	r3, #9
 8001610:	409a      	lsls	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800161c:	e057      	b.n	80016ce <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001624:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800162c:	e056      	b.n	80016dc <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 800162e:	f7ff fb95 	bl	8000d5c <wait_ready>
 8001632:	4603      	mov	r3, r0
 8001634:	2bff      	cmp	r3, #255	; 0xff
 8001636:	d14c      	bne.n	80016d2 <disk_ioctl+0x2de>
				res = RES_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800163e:	e048      	b.n	80016d2 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8001640:	2100      	movs	r1, #0
 8001642:	2049      	movs	r0, #73	; 0x49
 8001644:	f7ff fc96 	bl	8000f74 <send_cmd>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d143      	bne.n	80016d6 <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 800164e:	2110      	movs	r1, #16
 8001650:	6a38      	ldr	r0, [r7, #32]
 8001652:	f7ff fc05 	bl	8000e60 <rcvr_datablock>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d03c      	beq.n	80016d6 <disk_ioctl+0x2e2>
				res = RES_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001662:	e038      	b.n	80016d6 <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8001664:	2100      	movs	r1, #0
 8001666:	204a      	movs	r0, #74	; 0x4a
 8001668:	f7ff fc84 	bl	8000f74 <send_cmd>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d133      	bne.n	80016da <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8001672:	2110      	movs	r1, #16
 8001674:	6a38      	ldr	r0, [r7, #32]
 8001676:	f7ff fbf3 	bl	8000e60 <rcvr_datablock>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d02c      	beq.n	80016da <disk_ioctl+0x2e6>
				res = RES_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001686:	e028      	b.n	80016da <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8001688:	2100      	movs	r1, #0
 800168a:	207a      	movs	r0, #122	; 0x7a
 800168c:	f7ff fc72 	bl	8000f74 <send_cmd>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d117      	bne.n	80016c6 <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8001696:	2300      	movs	r3, #0
 8001698:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800169c:	e00b      	b.n	80016b6 <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 800169e:	6a3c      	ldr	r4, [r7, #32]
 80016a0:	1c63      	adds	r3, r4, #1
 80016a2:	623b      	str	r3, [r7, #32]
 80016a4:	f7ff fb2e 	bl	8000d04 <rcvr_spi>
 80016a8:	4603      	mov	r3, r0
 80016aa:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80016ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016b0:	3301      	adds	r3, #1
 80016b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d9ef      	bls.n	800169e <disk_ioctl+0x2aa>
				res = RES_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80016c4:	e00a      	b.n	80016dc <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 80016c6:	2304      	movs	r3, #4
 80016c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016cc:	e006      	b.n	80016dc <disk_ioctl+0x2e8>
			break;
 80016ce:	bf00      	nop
 80016d0:	e004      	b.n	80016dc <disk_ioctl+0x2e8>
			break;
 80016d2:	bf00      	nop
 80016d4:	e002      	b.n	80016dc <disk_ioctl+0x2e8>
			break;
 80016d6:	bf00      	nop
 80016d8:	e000      	b.n	80016dc <disk_ioctl+0x2e8>
			break;
 80016da:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 80016dc:	f7ff faf1 	bl	8000cc2 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 80016e0:	f7ff fb10 	bl	8000d04 <rcvr_spi>
	}

	return res;
 80016e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	372c      	adds	r7, #44	; 0x2c
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	20000000 	.word	0x20000000

080016f4 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <disk_timerproc+0x44>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
	if (n)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <disk_timerproc+0x1e>
		Timer1 = --n;
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	3b01      	subs	r3, #1
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <disk_timerproc+0x44>)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <disk_timerproc+0x48>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
	if (n)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <disk_timerproc+0x36>
		Timer2 = --n;
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	3b01      	subs	r3, #1
 8001722:	71fb      	strb	r3, [r7, #7]
 8001724:	4a05      	ldr	r2, [pc, #20]	; (800173c <disk_timerproc+0x48>)
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	7013      	strb	r3, [r2, #0]

}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	200000f4 	.word	0x200000f4
 800173c:	200000f5 	.word	0x200000f5

08001740 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <sdcard_systick_timerproc+0x2c>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	b29b      	uxth	r3, r3
 800174a:	3301      	adds	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <sdcard_systick_timerproc+0x2c>)
 8001750:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <sdcard_systick_timerproc+0x2c>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b09      	cmp	r3, #9
 800175a:	d904      	bls.n	8001766 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <sdcard_systick_timerproc+0x2c>)
 800175e:	2200      	movs	r2, #0
 8001760:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8001762:	f7ff ffc7 	bl	80016f4 <disk_timerproc>
	}
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000360 	.word	0x20000360

08001770 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	36c55cc0 	.word	0x36c55cc0

08001784 <ld_word>:
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3301      	adds	r3, #1
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	81fb      	strh	r3, [r7, #14]
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	b21a      	sxth	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	81fb      	strh	r3, [r7, #14]
 80017a6:	89fb      	ldrh	r3, [r7, #14]
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <ld_dword>:
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3303      	adds	r3, #3
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	3202      	adds	r2, #2
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	3201      	adds	r2, #1
 80017da:	7812      	ldrb	r2, [r2, #0]
 80017dc:	4313      	orrs	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <st_word>:
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	807b      	strh	r3, [r7, #2]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	887a      	ldrh	r2, [r7, #2]
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	807b      	strh	r3, [r7, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <st_dword>:
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <mem_cpy>:
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00d      	beq.n	80018be <mem_cpy+0x36>
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	1c53      	adds	r3, r2, #1
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	1c59      	adds	r1, r3, #1
 80018ac:	6179      	str	r1, [r7, #20]
 80018ae:	7812      	ldrb	r2, [r2, #0]
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f1      	bne.n	80018a2 <mem_cpy+0x1a>
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <mem_set>:
 80018ca:	b480      	push	{r7}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	617a      	str	r2, [r7, #20]
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f3      	bne.n	80018da <mem_set+0x10>
 80018f2:	bf00      	nop
 80018f4:	371c      	adds	r7, #28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <mem_cmp>:
 80018fe:	b480      	push	{r7}
 8001900:	b089      	sub	sp, #36	; 0x24
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	61fa      	str	r2, [r7, #28]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4619      	mov	r1, r3
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	61ba      	str	r2, [r7, #24]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	1acb      	subs	r3, r1, r3
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <mem_cmp+0x40>
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0eb      	beq.n	8001916 <mem_cmp+0x18>
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	4618      	mov	r0, r3
 8001942:	3724      	adds	r7, #36	; 0x24
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <chk_chr>:
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	e002      	b.n	800195e <chk_chr+0x12>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3301      	adds	r3, #1
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <chk_chr+0x26>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4293      	cmp	r3, r2
 8001970:	d1f2      	bne.n	8001958 <chk_chr+0xc>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <dbc_1st>:
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
 800198c:	2281      	movs	r2, #129	; 0x81
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	4293      	cmp	r3, r2
 8001992:	d30f      	bcc.n	80019b4 <dbc_1st+0x32>
 8001994:	229f      	movs	r2, #159	; 0x9f
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	4293      	cmp	r3, r2
 800199a:	d801      	bhi.n	80019a0 <dbc_1st+0x1e>
 800199c:	2301      	movs	r3, #1
 800199e:	e00a      	b.n	80019b6 <dbc_1st+0x34>
 80019a0:	22e0      	movs	r2, #224	; 0xe0
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d305      	bcc.n	80019b4 <dbc_1st+0x32>
 80019a8:	22fc      	movs	r2, #252	; 0xfc
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d801      	bhi.n	80019b4 <dbc_1st+0x32>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <dbc_1st+0x34>
 80019b4:	2300      	movs	r3, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <dbc_2nd>:
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
 80019cc:	2240      	movs	r2, #64	; 0x40
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d319      	bcc.n	8001a08 <dbc_2nd+0x46>
 80019d4:	227e      	movs	r2, #126	; 0x7e
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	4293      	cmp	r3, r2
 80019da:	d801      	bhi.n	80019e0 <dbc_2nd+0x1e>
 80019dc:	2301      	movs	r3, #1
 80019de:	e014      	b.n	8001a0a <dbc_2nd+0x48>
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d305      	bcc.n	80019f4 <dbc_2nd+0x32>
 80019e8:	22fc      	movs	r2, #252	; 0xfc
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d801      	bhi.n	80019f4 <dbc_2nd+0x32>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e00a      	b.n	8001a0a <dbc_2nd+0x48>
 80019f4:	2200      	movs	r2, #0
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d305      	bcc.n	8001a08 <dbc_2nd+0x46>
 80019fc:	2200      	movs	r2, #0
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d801      	bhi.n	8001a08 <dbc_2nd+0x46>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <dbc_2nd+0x48>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <sync_window>:
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	78db      	ldrb	r3, [r3, #3]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d02c      	beq.n	8001a84 <sync_window+0x6e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7858      	ldrb	r0, [r3, #1]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f7ff fc57 	bl	80012ec <disk_write>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d11d      	bne.n	8001a80 <sync_window+0x6a>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	70da      	strb	r2, [r3, #3]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	1ad2      	subs	r2, r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d213      	bcs.n	8001a84 <sync_window+0x6e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	789b      	ldrb	r3, [r3, #2]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d10f      	bne.n	8001a84 <sync_window+0x6e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7858      	ldrb	r0, [r3, #1]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	441a      	add	r2, r3
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f7ff fc37 	bl	80012ec <disk_write>
 8001a7e:	e001      	b.n	8001a84 <sync_window+0x6e>
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <move_window>:
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d01b      	beq.n	8001ade <move_window+0x50>
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffb5 	bl	8001a16 <sync_window>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d113      	bne.n	8001ade <move_window+0x50>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7858      	ldrb	r0, [r3, #1]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	f7ff fba8 	bl	8001218 <disk_read>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <move_window+0x4a>
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <sync_fs>:
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff90 	bl	8001a16 <sync_window>
 8001af6:	4603      	mov	r3, r0
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d158      	bne.n	8001bb2 <sync_fs+0xca>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d148      	bne.n	8001b9a <sync_fs+0xb2>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	791b      	ldrb	r3, [r3, #4]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d144      	bne.n	8001b9a <sync_fs+0xb2>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3330      	adds	r3, #48	; 0x30
 8001b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fed5 	bl	80018ca <mem_set>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3330      	adds	r3, #48	; 0x30
 8001b24:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001b28:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fe64 	bl	80017fa <st_word>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3330      	adds	r3, #48	; 0x30
 8001b36:	4921      	ldr	r1, [pc, #132]	; (8001bbc <sync_fs+0xd4>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fe79 	bl	8001830 <st_dword>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3330      	adds	r3, #48	; 0x30
 8001b42:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001b46:	491e      	ldr	r1, [pc, #120]	; (8001bc0 <sync_fs+0xd8>)
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fe71 	bl	8001830 <st_dword>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3330      	adds	r3, #48	; 0x30
 8001b52:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	f7ff fe67 	bl	8001830 <st_dword>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3330      	adds	r3, #48	; 0x30
 8001b66:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f7ff fe5d 	bl	8001830 <st_dword>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7858      	ldrb	r0, [r3, #1]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f7ff fbac 	bl	80012ec <disk_write>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	711a      	strb	r2, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	785b      	ldrb	r3, [r3, #1]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fc26 	bl	80013f4 <disk_ioctl>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <sync_fs+0xca>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	41615252 	.word	0x41615252
 8001bc0:	61417272 	.word	0x61417272

08001bc4 <clst2sect>:
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	3b02      	subs	r3, #2
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	3b02      	subs	r3, #2
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d301      	bcc.n	8001be4 <clst2sect+0x20>
 8001be0:	2300      	movs	r3, #0
 8001be2:	e008      	b.n	8001bf6 <clst2sect+0x32>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	895b      	ldrh	r3, [r3, #10]
 8001bec:	4619      	mov	r1, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	fb03 f301 	mul.w	r3, r3, r1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <get_fat>:
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d904      	bls.n	8001c22 <get_fat+0x20>
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d302      	bcc.n	8001c28 <get_fat+0x26>
 8001c22:	2301      	movs	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e08c      	b.n	8001d42 <get_fat+0x140>
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d045      	beq.n	8001cc2 <get_fat+0xc0>
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d05d      	beq.n	8001cf6 <get_fat+0xf4>
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d177      	bne.n	8001d2e <get_fat+0x12c>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4413      	add	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	6a1a      	ldr	r2, [r3, #32]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	0a5b      	lsrs	r3, r3, #9
 8001c54:	4413      	add	r3, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	6938      	ldr	r0, [r7, #16]
 8001c5a:	f7ff ff18 	bl	8001a8e <move_window>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d167      	bne.n	8001d34 <get_fat+0x132>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	60fa      	str	r2, [r7, #12]
 8001c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4413      	add	r3, r2
 8001c72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	6a1a      	ldr	r2, [r3, #32]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	0a5b      	lsrs	r3, r3, #9
 8001c80:	4413      	add	r3, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	6938      	ldr	r0, [r7, #16]
 8001c86:	f7ff ff02 	bl	8001a8e <move_window>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d153      	bne.n	8001d38 <get_fat+0x136>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <get_fat+0xb6>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	e002      	b.n	8001cbe <get_fat+0xbc>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e03f      	b.n	8001d42 <get_fat+0x140>
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	6a1a      	ldr	r2, [r3, #32]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	4413      	add	r3, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6938      	ldr	r0, [r7, #16]
 8001cd0:	f7ff fedd 	bl	8001a8e <move_window>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d130      	bne.n	8001d3c <get_fat+0x13a>
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001ce8:	4413      	add	r3, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fd4a 	bl	8001784 <ld_word>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e025      	b.n	8001d42 <get_fat+0x140>
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	6a1a      	ldr	r2, [r3, #32]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	09db      	lsrs	r3, r3, #7
 8001cfe:	4413      	add	r3, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	6938      	ldr	r0, [r7, #16]
 8001d04:	f7ff fec3 	bl	8001a8e <move_window>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d118      	bne.n	8001d40 <get_fat+0x13e>
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fd48 	bl	80017b4 <ld_dword>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e009      	b.n	8001d42 <get_fat+0x140>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e006      	b.n	8001d42 <get_fat+0x140>
 8001d34:	bf00      	nop
 8001d36:	e004      	b.n	8001d42 <get_fat+0x140>
 8001d38:	bf00      	nop
 8001d3a:	e002      	b.n	8001d42 <get_fat+0x140>
 8001d3c:	bf00      	nop
 8001d3e:	e000      	b.n	8001d42 <get_fat+0x140>
 8001d40:	bf00      	nop
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <put_fat>:
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	77fb      	strb	r3, [r7, #31]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	f240 80d6 	bls.w	8001f10 <put_fat+0x1c4>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	f080 80d0 	bcs.w	8001f10 <put_fat+0x1c4>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d073      	beq.n	8001e60 <put_fat+0x114>
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	f000 8091 	beq.w	8001ea0 <put_fat+0x154>
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	f040 80c6 	bne.w	8001f10 <put_fat+0x1c4>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	085b      	lsrs	r3, r3, #1
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4413      	add	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a1a      	ldr	r2, [r3, #32]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	0a5b      	lsrs	r3, r3, #9
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff fe75 	bl	8001a8e <move_window>
 8001da4:	4603      	mov	r3, r0
 8001da6:	77fb      	strb	r3, [r7, #31]
 8001da8:	7ffb      	ldrb	r3, [r7, #31]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f040 80a9 	bne.w	8001f02 <put_fat+0x1b6>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	1c59      	adds	r1, r3, #1
 8001dba:	61b9      	str	r1, [r7, #24]
 8001dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc0:	4413      	add	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00d      	beq.n	8001dea <put_fat+0x9e>
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	b25a      	sxtb	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	4313      	orrs	r3, r2
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	e001      	b.n	8001dee <put_fat+0xa2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	7013      	strb	r3, [r2, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	70da      	strb	r2, [r3, #3]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a1a      	ldr	r2, [r3, #32]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	0a5b      	lsrs	r3, r3, #9
 8001e00:	4413      	add	r3, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7ff fe42 	bl	8001a8e <move_window>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	77fb      	strb	r3, [r7, #31]
 8001e0e:	7ffb      	ldrb	r3, [r7, #31]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d178      	bne.n	8001f06 <put_fat+0x1ba>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e20:	4413      	add	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <put_fat+0xea>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	e00e      	b.n	8001e54 <put_fat+0x108>
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b25b      	sxtb	r3, r3
 8001e3c:	f023 030f 	bic.w	r3, r3, #15
 8001e40:	b25a      	sxtb	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b25b      	sxtb	r3, r3
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	b25b      	sxtb	r3, r3
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	b25b      	sxtb	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	7013      	strb	r3, [r2, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	70da      	strb	r2, [r3, #3]
 8001e5e:	e057      	b.n	8001f10 <put_fat+0x1c4>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a1a      	ldr	r2, [r3, #32]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	4413      	add	r3, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff fe0e 	bl	8001a8e <move_window>
 8001e72:	4603      	mov	r3, r0
 8001e74:	77fb      	strb	r3, [r7, #31]
 8001e76:	7ffb      	ldrb	r3, [r7, #31]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d146      	bne.n	8001f0a <put_fat+0x1be>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001e8a:	4413      	add	r3, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	b292      	uxth	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fcb1 	bl	80017fa <st_word>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	70da      	strb	r2, [r3, #3]
 8001e9e:	e037      	b.n	8001f10 <put_fat+0x1c4>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a1a      	ldr	r2, [r3, #32]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	09db      	lsrs	r3, r3, #7
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff fdee 	bl	8001a8e <move_window>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	77fb      	strb	r3, [r7, #31]
 8001eb6:	7ffb      	ldrb	r3, [r7, #31]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d128      	bne.n	8001f0e <put_fat+0x1c2>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fc6e 	bl	80017b4 <ld_dword>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001ede:	4323      	orrs	r3, r4
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001ef0:	4413      	add	r3, r2
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fc9b 	bl	8001830 <st_dword>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	70da      	strb	r2, [r3, #3]
 8001f00:	e006      	b.n	8001f10 <put_fat+0x1c4>
 8001f02:	bf00      	nop
 8001f04:	e004      	b.n	8001f10 <put_fat+0x1c4>
 8001f06:	bf00      	nop
 8001f08:	e002      	b.n	8001f10 <put_fat+0x1c4>
 8001f0a:	bf00      	nop
 8001f0c:	e000      	b.n	8001f10 <put_fat+0x1c4>
 8001f0e:	bf00      	nop
 8001f10:	7ffb      	ldrb	r3, [r7, #31]
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd90      	pop	{r4, r7, pc}

08001f1a <remove_chain>:
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b088      	sub	sp, #32
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	2300      	movs	r3, #0
 8001f28:	77fb      	strb	r3, [r7, #31]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d904      	bls.n	8001f40 <remove_chain+0x26>
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d301      	bcc.n	8001f44 <remove_chain+0x2a>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e04b      	b.n	8001fdc <remove_chain+0xc2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00c      	beq.n	8001f64 <remove_chain+0x4a>
 8001f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	69b8      	ldr	r0, [r7, #24]
 8001f52:	f7ff fefb 	bl	8001d4c <put_fat>
 8001f56:	4603      	mov	r3, r0
 8001f58:	77fb      	strb	r3, [r7, #31]
 8001f5a:	7ffb      	ldrb	r3, [r7, #31]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <remove_chain+0x4a>
 8001f60:	7ffb      	ldrb	r3, [r7, #31]
 8001f62:	e03b      	b.n	8001fdc <remove_chain+0xc2>
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7ff fe4b 	bl	8001c02 <get_fat>
 8001f6c:	6178      	str	r0, [r7, #20]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d031      	beq.n	8001fd8 <remove_chain+0xbe>
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <remove_chain+0x64>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e02e      	b.n	8001fdc <remove_chain+0xc2>
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d101      	bne.n	8001f8a <remove_chain+0x70>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e028      	b.n	8001fdc <remove_chain+0xc2>
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	69b8      	ldr	r0, [r7, #24]
 8001f90:	f7ff fedc 	bl	8001d4c <put_fat>
 8001f94:	4603      	mov	r3, r0
 8001f96:	77fb      	strb	r3, [r7, #31]
 8001f98:	7ffb      	ldrb	r3, [r7, #31]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <remove_chain+0x88>
 8001f9e:	7ffb      	ldrb	r3, [r7, #31]
 8001fa0:	e01c      	b.n	8001fdc <remove_chain+0xc2>
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	3b02      	subs	r3, #2
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d20b      	bcs.n	8001fc8 <remove_chain+0xae>
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	611a      	str	r2, [r3, #16]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	791b      	ldrb	r3, [r3, #4]
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	711a      	strb	r2, [r3, #4]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d3c6      	bcc.n	8001f64 <remove_chain+0x4a>
 8001fd6:	e000      	b.n	8001fda <remove_chain+0xc0>
 8001fd8:	bf00      	nop
 8001fda:	2300      	movs	r3, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <create_chain>:
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10d      	bne.n	8002016 <create_chain+0x32>
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <create_chain+0x2c>
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	429a      	cmp	r2, r3
 800200e:	d31b      	bcc.n	8002048 <create_chain+0x64>
 8002010:	2301      	movs	r3, #1
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	e018      	b.n	8002048 <create_chain+0x64>
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fdf2 	bl	8001c02 <get_fat>
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d801      	bhi.n	800202a <create_chain+0x46>
 8002026:	2301      	movs	r3, #1
 8002028:	e0a9      	b.n	800217e <create_chain+0x19a>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d101      	bne.n	8002036 <create_chain+0x52>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	e0a3      	b.n	800217e <create_chain+0x19a>
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d201      	bcs.n	8002044 <create_chain+0x60>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	e09c      	b.n	800217e <create_chain+0x19a>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	61bb      	str	r3, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <create_chain+0x70>
 8002050:	2300      	movs	r3, #0
 8002052:	e094      	b.n	800217e <create_chain+0x19a>
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d129      	bne.n	80020b4 <create_chain+0xd0>
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	3301      	adds	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	429a      	cmp	r2, r3
 800206e:	d301      	bcc.n	8002074 <create_chain+0x90>
 8002070:	2302      	movs	r3, #2
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	69f9      	ldr	r1, [r7, #28]
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fdc3 	bl	8001c02 <get_fat>
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d003      	beq.n	800208c <create_chain+0xa8>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208a:	d101      	bne.n	8002090 <create_chain+0xac>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	e076      	b.n	800217e <create_chain+0x19a>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00e      	beq.n	80020b4 <create_chain+0xd0>
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d906      	bls.n	80020b0 <create_chain+0xcc>
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d201      	bcs.n	80020b0 <create_chain+0xcc>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d129      	bne.n	800210e <create_chain+0x12a>
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3301      	adds	r3, #1
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d307      	bcc.n	80020de <create_chain+0xfa>
 80020ce:	2302      	movs	r3, #2
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d901      	bls.n	80020de <create_chain+0xfa>
 80020da:	2300      	movs	r3, #0
 80020dc:	e04f      	b.n	800217e <create_chain+0x19a>
 80020de:	69f9      	ldr	r1, [r7, #28]
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fd8e 	bl	8001c02 <get_fat>
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00e      	beq.n	800210c <create_chain+0x128>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d003      	beq.n	80020fc <create_chain+0x118>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fa:	d101      	bne.n	8002100 <create_chain+0x11c>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	e03e      	b.n	800217e <create_chain+0x19a>
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	429a      	cmp	r2, r3
 8002106:	d1da      	bne.n	80020be <create_chain+0xda>
 8002108:	2300      	movs	r3, #0
 800210a:	e038      	b.n	800217e <create_chain+0x19a>
 800210c:	bf00      	nop
 800210e:	f04f 32ff 	mov.w	r2, #4294967295
 8002112:	69f9      	ldr	r1, [r7, #28]
 8002114:	6938      	ldr	r0, [r7, #16]
 8002116:	f7ff fe19 	bl	8001d4c <put_fat>
 800211a:	4603      	mov	r3, r0
 800211c:	75fb      	strb	r3, [r7, #23]
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <create_chain+0x154>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <create_chain+0x154>
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	6938      	ldr	r0, [r7, #16]
 8002130:	f7ff fe0c 	bl	8001d4c <put_fat>
 8002134:	4603      	mov	r3, r0
 8002136:	75fb      	strb	r3, [r7, #23]
 8002138:	7dfb      	ldrb	r3, [r7, #23]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d116      	bne.n	800216c <create_chain+0x188>
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	60da      	str	r2, [r3, #12]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	3b02      	subs	r3, #2
 800214e:	429a      	cmp	r2, r3
 8002150:	d804      	bhi.n	800215c <create_chain+0x178>
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	611a      	str	r2, [r3, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	791b      	ldrb	r3, [r3, #4]
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	711a      	strb	r2, [r3, #4]
 800216a:	e007      	b.n	800217c <create_chain+0x198>
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d102      	bne.n	8002178 <create_chain+0x194>
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
 8002176:	e000      	b.n	800217a <create_chain+0x196>
 8002178:	2301      	movs	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <dir_clear>:
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fc40 	bl	8001a16 <sync_window>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <dir_clear+0x1a>
 800219c:	2301      	movs	r3, #1
 800219e:	e036      	b.n	800220e <dir_clear+0x88>
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fd0e 	bl	8001bc4 <clst2sect>
 80021a8:	6138      	str	r0, [r7, #16]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3330      	adds	r3, #48	; 0x30
 80021b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fb85 	bl	80018ca <mem_set>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3330      	adds	r3, #48	; 0x30
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	2301      	movs	r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e003      	b.n	80021d8 <dir_clear+0x52>
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4413      	add	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	895b      	ldrh	r3, [r3, #10]
 80021dc:	461a      	mov	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d20b      	bcs.n	80021fc <dir_clear+0x76>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7858      	ldrb	r0, [r3, #1]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	441a      	add	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	68f9      	ldr	r1, [r7, #12]
 80021f2:	f7ff f87b 	bl	80012ec <disk_write>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0e9      	beq.n	80021d0 <dir_clear+0x4a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	895b      	ldrh	r3, [r3, #10]
 8002200:	461a      	mov	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	4293      	cmp	r3, r2
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <dir_sdi>:
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800222c:	d204      	bcs.n	8002238 <dir_sdi+0x22>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <dir_sdi+0x26>
 8002238:	2302      	movs	r3, #2
 800223a:	e063      	b.n	8002304 <dir_sdi+0xee>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	611a      	str	r2, [r3, #16]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <dir_sdi+0x46>
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d902      	bls.n	800225c <dir_sdi+0x46>
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10c      	bne.n	800227c <dir_sdi+0x66>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	8912      	ldrh	r2, [r2, #8]
 800226a:	4293      	cmp	r3, r2
 800226c:	d301      	bcc.n	8002272 <dir_sdi+0x5c>
 800226e:	2302      	movs	r3, #2
 8002270:	e048      	b.n	8002304 <dir_sdi+0xee>
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	619a      	str	r2, [r3, #24]
 800227a:	e029      	b.n	80022d0 <dir_sdi+0xba>
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	895b      	ldrh	r3, [r3, #10]
 8002280:	025b      	lsls	r3, r3, #9
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e019      	b.n	80022ba <dir_sdi+0xa4>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6979      	ldr	r1, [r7, #20]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fcb9 	bl	8001c02 <get_fat>
 8002290:	6178      	str	r0, [r7, #20]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d101      	bne.n	800229e <dir_sdi+0x88>
 800229a:	2301      	movs	r3, #1
 800229c:	e032      	b.n	8002304 <dir_sdi+0xee>
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d904      	bls.n	80022ae <dir_sdi+0x98>
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d301      	bcc.n	80022b2 <dir_sdi+0x9c>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e028      	b.n	8002304 <dir_sdi+0xee>
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d2e1      	bcs.n	8002286 <dir_sdi+0x70>
 80022c2:	6979      	ldr	r1, [r7, #20]
 80022c4:	6938      	ldr	r0, [r7, #16]
 80022c6:	f7ff fc7d 	bl	8001bc4 <clst2sect>
 80022ca:	4602      	mov	r2, r0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	619a      	str	r2, [r3, #24]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	615a      	str	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <dir_sdi+0xcc>
 80022de:	2302      	movs	r3, #2
 80022e0:	e010      	b.n	8002304 <dir_sdi+0xee>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	0a5b      	lsrs	r3, r3, #9
 80022ea:	441a      	add	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022fc:	441a      	add	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	61da      	str	r2, [r3, #28]
 8002302:	2300      	movs	r3, #0
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <dir_next>:
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	3320      	adds	r3, #32
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800232a:	d302      	bcc.n	8002332 <dir_next+0x26>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <dir_next+0x32>
 800233a:	2304      	movs	r3, #4
 800233c:	e078      	b.n	8002430 <dir_next+0x124>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002344:	2b00      	cmp	r3, #0
 8002346:	d166      	bne.n	8002416 <dir_next+0x10a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	619a      	str	r2, [r3, #24]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <dir_next+0x64>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	8912      	ldrh	r2, [r2, #8]
 8002362:	4293      	cmp	r3, r2
 8002364:	d357      	bcc.n	8002416 <dir_next+0x10a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
 800236c:	2304      	movs	r3, #4
 800236e:	e05f      	b.n	8002430 <dir_next+0x124>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	0a5b      	lsrs	r3, r3, #9
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	8952      	ldrh	r2, [r2, #10]
 8002378:	3a01      	subs	r2, #1
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d14a      	bne.n	8002416 <dir_next+0x10a>
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	4619      	mov	r1, r3
 8002388:	4610      	mov	r0, r2
 800238a:	f7ff fc3a 	bl	8001c02 <get_fat>
 800238e:	6178      	str	r0, [r7, #20]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d801      	bhi.n	800239a <dir_next+0x8e>
 8002396:	2302      	movs	r3, #2
 8002398:	e04a      	b.n	8002430 <dir_next+0x124>
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d101      	bne.n	80023a6 <dir_next+0x9a>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e044      	b.n	8002430 <dir_next+0x124>
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d328      	bcc.n	8002402 <dir_next+0xf6>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d104      	bne.n	80023c0 <dir_next+0xb4>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
 80023bc:	2304      	movs	r3, #4
 80023be:	e037      	b.n	8002430 <dir_next+0x124>
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	4619      	mov	r1, r3
 80023c8:	4610      	mov	r0, r2
 80023ca:	f7ff fe0b 	bl	8001fe4 <create_chain>
 80023ce:	6178      	str	r0, [r7, #20]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <dir_next+0xce>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e02a      	b.n	8002430 <dir_next+0x124>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <dir_next+0xd8>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e025      	b.n	8002430 <dir_next+0x124>
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ea:	d101      	bne.n	80023f0 <dir_next+0xe4>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e01f      	b.n	8002430 <dir_next+0x124>
 80023f0:	6979      	ldr	r1, [r7, #20]
 80023f2:	6938      	ldr	r0, [r7, #16]
 80023f4:	f7ff fec7 	bl	8002186 <dir_clear>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <dir_next+0xf6>
 80023fe:	2301      	movs	r3, #1
 8002400:	e016      	b.n	8002430 <dir_next+0x124>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	615a      	str	r2, [r3, #20]
 8002408:	6979      	ldr	r1, [r7, #20]
 800240a:	6938      	ldr	r0, [r7, #16]
 800240c:	f7ff fbda 	bl	8001bc4 <clst2sect>
 8002410:	4602      	mov	r2, r0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	619a      	str	r2, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	611a      	str	r2, [r3, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002428:	441a      	add	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	61da      	str	r2, [r3, #28]
 800242e:	2300      	movs	r3, #0
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <dir_alloc>:
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	2100      	movs	r1, #0
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fee3 	bl	8002216 <dir_sdi>
 8002450:	4603      	mov	r3, r0
 8002452:	75fb      	strb	r3, [r7, #23]
 8002454:	7dfb      	ldrb	r3, [r7, #23]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d12b      	bne.n	80024b2 <dir_alloc+0x7a>
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	4619      	mov	r1, r3
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff fb12 	bl	8001a8e <move_window>
 800246a:	4603      	mov	r3, r0
 800246c:	75fb      	strb	r3, [r7, #23]
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d11d      	bne.n	80024b0 <dir_alloc+0x78>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2be5      	cmp	r3, #229	; 0xe5
 800247c:	d004      	beq.n	8002488 <dir_alloc+0x50>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <dir_alloc+0x60>
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	3301      	adds	r3, #1
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d102      	bne.n	800249c <dir_alloc+0x64>
 8002496:	e00c      	b.n	80024b2 <dir_alloc+0x7a>
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	2101      	movs	r1, #1
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ff34 	bl	800230c <dir_next>
 80024a4:	4603      	mov	r3, r0
 80024a6:	75fb      	strb	r3, [r7, #23]
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0d7      	beq.n	800245e <dir_alloc+0x26>
 80024ae:	e000      	b.n	80024b2 <dir_alloc+0x7a>
 80024b0:	bf00      	nop
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d101      	bne.n	80024bc <dir_alloc+0x84>
 80024b8:	2307      	movs	r3, #7
 80024ba:	75fb      	strb	r3, [r7, #23]
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <ld_clust>:
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	331a      	adds	r3, #26
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff f955 	bl	8001784 <ld_word>
 80024da:	4603      	mov	r3, r0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d109      	bne.n	80024fa <ld_clust+0x34>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	3314      	adds	r3, #20
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f94a 	bl	8001784 <ld_word>
 80024f0:	4603      	mov	r3, r0
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <st_clust>:
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	331a      	adds	r3, #26
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	b292      	uxth	r2, r2
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f96d 	bl	80017fa <st_word>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d109      	bne.n	800253c <st_clust+0x38>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f103 0214 	add.w	r2, r3, #20
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	b29b      	uxth	r3, r3
 8002534:	4619      	mov	r1, r3
 8002536:	4610      	mov	r0, r2
 8002538:	f7ff f95f 	bl	80017fa <st_word>
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <dir_read>:
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	2304      	movs	r3, #4
 8002550:	75fb      	strb	r3, [r7, #23]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	e03c      	b.n	80025d4 <dir_read+0x90>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	4619      	mov	r1, r3
 8002560:	6938      	ldr	r0, [r7, #16]
 8002562:	f7ff fa94 	bl	8001a8e <move_window>
 8002566:	4603      	mov	r3, r0
 8002568:	75fb      	strb	r3, [r7, #23]
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d136      	bne.n	80025de <dir_read+0x9a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <dir_read+0x40>
 800257e:	2304      	movs	r3, #4
 8002580:	75fb      	strb	r3, [r7, #23]
 8002582:	e031      	b.n	80025e8 <dir_read+0xa4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	330b      	adds	r3, #11
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002590:	73bb      	strb	r3, [r7, #14]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7bba      	ldrb	r2, [r7, #14]
 8002596:	719a      	strb	r2, [r3, #6]
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2be5      	cmp	r3, #229	; 0xe5
 800259c:	d011      	beq.n	80025c2 <dir_read+0x7e>
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b2e      	cmp	r3, #46	; 0x2e
 80025a2:	d00e      	beq.n	80025c2 <dir_read+0x7e>
 80025a4:	7bbb      	ldrb	r3, [r7, #14]
 80025a6:	2b0f      	cmp	r3, #15
 80025a8:	d00b      	beq.n	80025c2 <dir_read+0x7e>
 80025aa:	7bbb      	ldrb	r3, [r7, #14]
 80025ac:	f023 0320 	bic.w	r3, r3, #32
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00f      	beq.n	80025e2 <dir_read+0x9e>
 80025c2:	2100      	movs	r1, #0
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff fea1 	bl	800230c <dir_next>
 80025ca:	4603      	mov	r3, r0
 80025cc:	75fb      	strb	r3, [r7, #23]
 80025ce:	7dfb      	ldrb	r3, [r7, #23]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d108      	bne.n	80025e6 <dir_read+0xa2>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1be      	bne.n	800255a <dir_read+0x16>
 80025dc:	e004      	b.n	80025e8 <dir_read+0xa4>
 80025de:	bf00      	nop
 80025e0:	e002      	b.n	80025e8 <dir_read+0xa4>
 80025e2:	bf00      	nop
 80025e4:	e000      	b.n	80025e8 <dir_read+0xa4>
 80025e6:	bf00      	nop
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <dir_read+0xb0>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <dir_find>:
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	2100      	movs	r1, #0
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff fe01 	bl	8002216 <dir_sdi>
 8002614:	4603      	mov	r3, r0
 8002616:	75fb      	strb	r3, [r7, #23]
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <dir_find+0x24>
 800261e:	7dfb      	ldrb	r3, [r7, #23]
 8002620:	e03e      	b.n	80026a0 <dir_find+0xa2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	4619      	mov	r1, r3
 8002628:	6938      	ldr	r0, [r7, #16]
 800262a:	f7ff fa30 	bl	8001a8e <move_window>
 800262e:	4603      	mov	r3, r0
 8002630:	75fb      	strb	r3, [r7, #23]
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d12f      	bne.n	8002698 <dir_find+0x9a>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <dir_find+0x4e>
 8002646:	2304      	movs	r3, #4
 8002648:	75fb      	strb	r3, [r7, #23]
 800264a:	e028      	b.n	800269e <dir_find+0xa0>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	330b      	adds	r3, #11
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002658:	b2da      	uxtb	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	719a      	strb	r2, [r3, #6]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	330b      	adds	r3, #11
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <dir_find+0x86>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69d8      	ldr	r0, [r3, #28]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3320      	adds	r3, #32
 8002676:	220b      	movs	r2, #11
 8002678:	4619      	mov	r1, r3
 800267a:	f7ff f940 	bl	80018fe <mem_cmp>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <dir_find+0x9e>
 8002684:	2100      	movs	r1, #0
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff fe40 	bl	800230c <dir_next>
 800268c:	4603      	mov	r3, r0
 800268e:	75fb      	strb	r3, [r7, #23]
 8002690:	7dfb      	ldrb	r3, [r7, #23]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0c5      	beq.n	8002622 <dir_find+0x24>
 8002696:	e002      	b.n	800269e <dir_find+0xa0>
 8002698:	bf00      	nop
 800269a:	e000      	b.n	800269e <dir_find+0xa0>
 800269c:	bf00      	nop
 800269e:	7dfb      	ldrb	r3, [r7, #23]
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <dir_register>:
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	2101      	movs	r1, #1
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff febd 	bl	8002438 <dir_alloc>
 80026be:	4603      	mov	r3, r0
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d11c      	bne.n	8002702 <dir_register+0x5a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	4619      	mov	r1, r3
 80026ce:	68b8      	ldr	r0, [r7, #8]
 80026d0:	f7ff f9dd 	bl	8001a8e <move_window>
 80026d4:	4603      	mov	r3, r0
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d111      	bne.n	8002702 <dir_register+0x5a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	2220      	movs	r2, #32
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f8ef 	bl	80018ca <mem_set>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69d8      	ldr	r0, [r3, #28]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3320      	adds	r3, #32
 80026f4:	220b      	movs	r2, #11
 80026f6:	4619      	mov	r1, r3
 80026f8:	f7ff f8c6 	bl	8001888 <mem_cpy>
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2201      	movs	r2, #1
 8002700:	70da      	strb	r2, [r3, #3]
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <get_fileinfo>:
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2200      	movs	r2, #0
 800271a:	725a      	strb	r2, [r3, #9]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d052      	beq.n	80027ca <get_fileinfo+0xbe>
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	e021      	b.n	8002772 <get_fileinfo+0x66>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69da      	ldr	r2, [r3, #28]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	1c59      	adds	r1, r3, #1
 8002736:	6179      	str	r1, [r7, #20]
 8002738:	4413      	add	r3, r2
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	73fb      	strb	r3, [r7, #15]
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b20      	cmp	r3, #32
 8002742:	d100      	bne.n	8002746 <get_fileinfo+0x3a>
 8002744:	e015      	b.n	8002772 <get_fileinfo+0x66>
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d101      	bne.n	8002750 <get_fileinfo+0x44>
 800274c:	23e5      	movs	r3, #229	; 0xe5
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b09      	cmp	r3, #9
 8002754:	d106      	bne.n	8002764 <get_fileinfo+0x58>
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	613a      	str	r2, [r7, #16]
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	4413      	add	r3, r2
 8002760:	222e      	movs	r2, #46	; 0x2e
 8002762:	725a      	strb	r2, [r3, #9]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	613a      	str	r2, [r7, #16]
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	4413      	add	r3, r2
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	725a      	strb	r2, [r3, #9]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b0a      	cmp	r3, #10
 8002776:	d9da      	bls.n	800272e <get_fileinfo+0x22>
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	3309      	adds	r3, #9
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	7ada      	ldrb	r2, [r3, #11]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	721a      	strb	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	331c      	adds	r3, #28
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff f80d 	bl	80017b4 <ld_dword>
 800279a:	4602      	mov	r2, r0
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	3316      	adds	r3, #22
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe ffec 	bl	8001784 <ld_word>
 80027ac:	4603      	mov	r3, r0
 80027ae:	461a      	mov	r2, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	80da      	strh	r2, [r3, #6]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	3318      	adds	r3, #24
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe ffe2 	bl	8001784 <ld_word>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	809a      	strh	r2, [r3, #4]
 80027c8:	e000      	b.n	80027cc <get_fileinfo+0xc0>
 80027ca:	bf00      	nop
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <create_name>:
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3320      	adds	r3, #32
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	220b      	movs	r2, #11
 80027ec:	2120      	movs	r1, #32
 80027ee:	6938      	ldr	r0, [r7, #16]
 80027f0:	f7ff f86b 	bl	80018ca <mem_set>
 80027f4:	2300      	movs	r3, #0
 80027f6:	61bb      	str	r3, [r7, #24]
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	2308      	movs	r3, #8
 80027fe:	623b      	str	r3, [r7, #32]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	61fa      	str	r2, [r7, #28]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4413      	add	r3, r2
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002814:	2b20      	cmp	r3, #32
 8002816:	d97c      	bls.n	8002912 <create_name+0x13e>
 8002818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800281c:	2b2f      	cmp	r3, #47	; 0x2f
 800281e:	d007      	beq.n	8002830 <create_name+0x5c>
 8002820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002824:	2b5c      	cmp	r3, #92	; 0x5c
 8002826:	d110      	bne.n	800284a <create_name+0x76>
 8002828:	e002      	b.n	8002830 <create_name+0x5c>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3301      	adds	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	4413      	add	r3, r2
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b2f      	cmp	r3, #47	; 0x2f
 800283a:	d0f6      	beq.n	800282a <create_name+0x56>
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4413      	add	r3, r2
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b5c      	cmp	r3, #92	; 0x5c
 8002846:	d0f0      	beq.n	800282a <create_name+0x56>
 8002848:	e064      	b.n	8002914 <create_name+0x140>
 800284a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800284e:	2b2e      	cmp	r3, #46	; 0x2e
 8002850:	d003      	beq.n	800285a <create_name+0x86>
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	429a      	cmp	r2, r3
 8002858:	d30d      	bcc.n	8002876 <create_name+0xa2>
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	2b0b      	cmp	r3, #11
 800285e:	d003      	beq.n	8002868 <create_name+0x94>
 8002860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002864:	2b2e      	cmp	r3, #46	; 0x2e
 8002866:	d001      	beq.n	800286c <create_name+0x98>
 8002868:	2306      	movs	r3, #6
 800286a:	e06f      	b.n	800294c <create_name+0x178>
 800286c:	2308      	movs	r3, #8
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	230b      	movs	r3, #11
 8002872:	623b      	str	r3, [r7, #32]
 8002874:	e04c      	b.n	8002910 <create_name+0x13c>
 8002876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f881 	bl	8001982 <dbc_1st>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d024      	beq.n	80028d0 <create_name+0xfc>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	61fa      	str	r2, [r7, #28]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4413      	add	r3, r2
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff f893 	bl	80019c2 <dbc_2nd>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <create_name+0xd8>
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d301      	bcc.n	80028b0 <create_name+0xdc>
 80028ac:	2306      	movs	r3, #6
 80028ae:	e04d      	b.n	800294c <create_name+0x178>
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	61ba      	str	r2, [r7, #24]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4413      	add	r3, r2
 80028ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	61ba      	str	r2, [r7, #24]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	e797      	b.n	8002800 <create_name+0x2c>
 80028d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028d4:	4619      	mov	r1, r3
 80028d6:	481f      	ldr	r0, [pc, #124]	; (8002954 <create_name+0x180>)
 80028d8:	f7ff f838 	bl	800194c <chk_chr>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <create_name+0x112>
 80028e2:	2306      	movs	r3, #6
 80028e4:	e032      	b.n	800294c <create_name+0x178>
 80028e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ea:	2b60      	cmp	r3, #96	; 0x60
 80028ec:	d908      	bls.n	8002900 <create_name+0x12c>
 80028ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028f2:	2b7a      	cmp	r3, #122	; 0x7a
 80028f4:	d804      	bhi.n	8002900 <create_name+0x12c>
 80028f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028fa:	3b20      	subs	r3, #32
 80028fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	61ba      	str	r2, [r7, #24]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4413      	add	r3, r2
 800290a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	e776      	b.n	8002800 <create_name+0x2c>
 8002912:	bf00      	nop
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	441a      	add	r2, r3
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <create_name+0x154>
 8002924:	2306      	movs	r3, #6
 8002926:	e011      	b.n	800294c <create_name+0x178>
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2be5      	cmp	r3, #229	; 0xe5
 800292e:	d102      	bne.n	8002936 <create_name+0x162>
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2205      	movs	r2, #5
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800293a:	2b20      	cmp	r3, #32
 800293c:	d801      	bhi.n	8002942 <create_name+0x16e>
 800293e:	2204      	movs	r2, #4
 8002940:	e000      	b.n	8002944 <create_name+0x170>
 8002942:	2200      	movs	r2, #0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	330b      	adds	r3, #11
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	2300      	movs	r3, #0
 800294c:	4618      	mov	r0, r3
 800294e:	3728      	adds	r7, #40	; 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	0800c974 	.word	0x0800c974

08002958 <follow_path>:
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	e002      	b.n	8002970 <follow_path+0x18>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b2f      	cmp	r3, #47	; 0x2f
 8002976:	d0f8      	beq.n	800296a <follow_path+0x12>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b5c      	cmp	r3, #92	; 0x5c
 800297e:	d0f4      	beq.n	800296a <follow_path+0x12>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b1f      	cmp	r3, #31
 800298c:	d80a      	bhi.n	80029a4 <follow_path+0x4c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2280      	movs	r2, #128	; 0x80
 8002992:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8002996:	2100      	movs	r1, #0
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff fc3c 	bl	8002216 <dir_sdi>
 800299e:	4603      	mov	r3, r0
 80029a0:	75fb      	strb	r3, [r7, #23]
 80029a2:	e043      	b.n	8002a2c <follow_path+0xd4>
 80029a4:	463b      	mov	r3, r7
 80029a6:	4619      	mov	r1, r3
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff13 	bl	80027d4 <create_name>
 80029ae:	4603      	mov	r3, r0
 80029b0:	75fb      	strb	r3, [r7, #23]
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d134      	bne.n	8002a22 <follow_path+0xca>
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fe20 	bl	80025fe <dir_find>
 80029be:	4603      	mov	r3, r0
 80029c0:	75fb      	strb	r3, [r7, #23]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80029c8:	73fb      	strb	r3, [r7, #15]
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <follow_path+0x8e>
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d127      	bne.n	8002a26 <follow_path+0xce>
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d122      	bne.n	8002a26 <follow_path+0xce>
 80029e0:	2305      	movs	r3, #5
 80029e2:	75fb      	strb	r3, [r7, #23]
 80029e4:	e01f      	b.n	8002a26 <follow_path+0xce>
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d11c      	bne.n	8002a2a <follow_path+0xd2>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	799b      	ldrb	r3, [r3, #6]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d102      	bne.n	8002a02 <follow_path+0xaa>
 80029fc:	2305      	movs	r3, #5
 80029fe:	75fb      	strb	r3, [r7, #23]
 8002a00:	e014      	b.n	8002a2c <follow_path+0xd4>
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a10:	4413      	add	r3, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	6938      	ldr	r0, [r7, #16]
 8002a16:	f7ff fd56 	bl	80024c6 <ld_clust>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	e7c0      	b.n	80029a4 <follow_path+0x4c>
 8002a22:	bf00      	nop
 8002a24:	e002      	b.n	8002a2c <follow_path+0xd4>
 8002a26:	bf00      	nop
 8002a28:	e000      	b.n	8002a2c <follow_path+0xd4>
 8002a2a:	bf00      	nop
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <get_ldnumber>:
 8002a36:	b480      	push	{r7}
 8002a38:	b089      	sub	sp, #36	; 0x24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <get_ldnumber+0x22>
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	e02d      	b.n	8002ab4 <get_ldnumber+0x7e>
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	61fa      	str	r2, [r7, #28]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d902      	bls.n	8002a6e <get_ldnumber+0x38>
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b3a      	cmp	r3, #58	; 0x3a
 8002a6c:	d1f4      	bne.n	8002a58 <get_ldnumber+0x22>
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b3a      	cmp	r3, #58	; 0x3a
 8002a72:	d11c      	bne.n	8002aae <get_ldnumber+0x78>
 8002a74:	2301      	movs	r3, #1
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b2f      	cmp	r3, #47	; 0x2f
 8002a7e:	d90c      	bls.n	8002a9a <get_ldnumber+0x64>
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b39      	cmp	r3, #57	; 0x39
 8002a86:	d808      	bhi.n	8002a9a <get_ldnumber+0x64>
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d103      	bne.n	8002a9a <get_ldnumber+0x64>
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	3b30      	subs	r3, #48	; 0x30
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	dc04      	bgt.n	8002aaa <get_ldnumber+0x74>
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	e002      	b.n	8002ab4 <get_ldnumber+0x7e>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3724      	adds	r7, #36	; 0x24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <check_fs>:
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	70da      	strb	r2, [r3, #3]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe ffd7 	bl	8001a8e <move_window>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <check_fs+0x2a>
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	e038      	b.n	8002b5c <check_fs+0x9c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3330      	adds	r3, #48	; 0x30
 8002aee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe fe46 	bl	8001784 <ld_word>
 8002af8:	4603      	mov	r3, r0
 8002afa:	461a      	mov	r2, r3
 8002afc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <check_fs+0x48>
 8002b04:	2303      	movs	r3, #3
 8002b06:	e029      	b.n	8002b5c <check_fs+0x9c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b0e:	2be9      	cmp	r3, #233	; 0xe9
 8002b10:	d009      	beq.n	8002b26 <check_fs+0x66>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b18:	2beb      	cmp	r3, #235	; 0xeb
 8002b1a:	d004      	beq.n	8002b26 <check_fs+0x66>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b22:	2be8      	cmp	r3, #232	; 0xe8
 8002b24:	d119      	bne.n	8002b5a <check_fs+0x9a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3330      	adds	r3, #48	; 0x30
 8002b2a:	3336      	adds	r3, #54	; 0x36
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	490d      	ldr	r1, [pc, #52]	; (8002b64 <check_fs+0xa4>)
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe fee4 	bl	80018fe <mem_cmp>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <check_fs+0x80>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e00d      	b.n	8002b5c <check_fs+0x9c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3330      	adds	r3, #48	; 0x30
 8002b44:	3352      	adds	r3, #82	; 0x52
 8002b46:	2205      	movs	r2, #5
 8002b48:	4907      	ldr	r1, [pc, #28]	; (8002b68 <check_fs+0xa8>)
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fed7 	bl	80018fe <mem_cmp>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <check_fs+0x9a>
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <check_fs+0x9c>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	0800c984 	.word	0x0800c984
 8002b68:	0800c988 	.word	0x0800c988

08002b6c <find_volume>:
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b096      	sub	sp, #88	; 0x58
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	71fb      	strb	r3, [r7, #7]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7ff ff58 	bl	8002a36 <get_ldnumber>
 8002b86:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	da01      	bge.n	8002b92 <find_volume+0x26>
 8002b8e:	230b      	movs	r3, #11
 8002b90:	e238      	b.n	8003004 <find_volume+0x498>
 8002b92:	4aa8      	ldr	r2, [pc, #672]	; (8002e34 <find_volume+0x2c8>)
 8002b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <find_volume+0x3a>
 8002ba2:	230c      	movs	r3, #12
 8002ba4:	e22e      	b.n	8003004 <find_volume+0x498>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	f023 0301 	bic.w	r3, r3, #1
 8002bb2:	71fb      	strb	r3, [r7, #7]
 8002bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01a      	beq.n	8002bf2 <find_volume+0x86>
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fe fb13 	bl	80011ec <disk_status>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002bcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10c      	bne.n	8002bf2 <find_volume+0x86>
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <find_volume+0x82>
 8002bde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <find_volume+0x82>
 8002bea:	230a      	movs	r3, #10
 8002bec:	e20a      	b.n	8003004 <find_volume+0x498>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e208      	b.n	8003004 <find_volume+0x498>
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfe:	705a      	strb	r2, [r3, #1]
 8002c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c02:	785b      	ldrb	r3, [r3, #1]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fa07 	bl	8001018 <disk_initialize>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <find_volume+0xb4>
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e1f1      	b.n	8003004 <find_volume+0x498>
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <find_volume+0xca>
 8002c26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <find_volume+0xca>
 8002c32:	230a      	movs	r3, #10
 8002c34:	e1e6      	b.n	8003004 <find_volume+0x498>
 8002c36:	2300      	movs	r3, #0
 8002c38:	653b      	str	r3, [r7, #80]	; 0x50
 8002c3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002c3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c3e:	f7ff ff3f 	bl	8002ac0 <check_fs>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002c48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d14b      	bne.n	8002ce8 <find_volume+0x17c>
 8002c50:	2300      	movs	r3, #0
 8002c52:	643b      	str	r3, [r7, #64]	; 0x40
 8002c54:	e01f      	b.n	8002c96 <find_volume+0x12a>
 8002c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002c64:	4413      	add	r3, r2
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d006      	beq.n	8002c80 <find_volume+0x114>
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	3308      	adds	r3, #8
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe fd9c 	bl	80017b4 <ld_dword>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	e000      	b.n	8002c82 <find_volume+0x116>
 8002c80:	2200      	movs	r2, #0
 8002c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f843 2c44 	str.w	r2, [r3, #-68]
 8002c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c92:	3301      	adds	r3, #1
 8002c94:	643b      	str	r3, [r7, #64]	; 0x40
 8002c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d9dc      	bls.n	8002c56 <find_volume+0xea>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8002ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <find_volume+0x140>
 8002ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	643b      	str	r3, [r7, #64]	; 0x40
 8002cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002cba:	653b      	str	r3, [r7, #80]	; 0x50
 8002cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <find_volume+0x162>
 8002cc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002cc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cc6:	f7ff fefb 	bl	8002ac0 <check_fs>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	e000      	b.n	8002cd0 <find_volume+0x164>
 8002cce:	2303      	movs	r3, #3
 8002cd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002cd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d905      	bls.n	8002ce8 <find_volume+0x17c>
 8002cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cde:	3301      	adds	r3, #1
 8002ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d9e1      	bls.n	8002cac <find_volume+0x140>
 8002ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d101      	bne.n	8002cf4 <find_volume+0x188>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e187      	b.n	8003004 <find_volume+0x498>
 8002cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d901      	bls.n	8002d00 <find_volume+0x194>
 8002cfc:	230d      	movs	r3, #13
 8002cfe:	e181      	b.n	8003004 <find_volume+0x498>
 8002d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d02:	3330      	adds	r3, #48	; 0x30
 8002d04:	330b      	adds	r3, #11
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fd3c 	bl	8001784 <ld_word>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d12:	d001      	beq.n	8002d18 <find_volume+0x1ac>
 8002d14:	230d      	movs	r3, #13
 8002d16:	e175      	b.n	8003004 <find_volume+0x498>
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	3330      	adds	r3, #48	; 0x30
 8002d1c:	3316      	adds	r3, #22
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fd30 	bl	8001784 <ld_word>
 8002d24:	4603      	mov	r3, r0
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <find_volume+0x1d0>
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	3330      	adds	r3, #48	; 0x30
 8002d32:	3324      	adds	r3, #36	; 0x24
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe fd3d 	bl	80017b4 <ld_dword>
 8002d3a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d40:	619a      	str	r2, [r3, #24]
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	709a      	strb	r2, [r3, #2]
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	789b      	ldrb	r3, [r3, #2]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d005      	beq.n	8002d60 <find_volume+0x1f4>
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	789b      	ldrb	r3, [r3, #2]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d001      	beq.n	8002d60 <find_volume+0x1f4>
 8002d5c:	230d      	movs	r3, #13
 8002d5e:	e151      	b.n	8003004 <find_volume+0x498>
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	789b      	ldrb	r3, [r3, #2]
 8002d64:	461a      	mov	r2, r3
 8002d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d68:	fb02 f303 	mul.w	r3, r2, r3
 8002d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d78:	815a      	strh	r2, [r3, #10]
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	895b      	ldrh	r3, [r3, #10]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <find_volume+0x228>
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	895b      	ldrh	r3, [r3, #10]
 8002d86:	461a      	mov	r2, r3
 8002d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8a:	895b      	ldrh	r3, [r3, #10]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <find_volume+0x22c>
 8002d94:	230d      	movs	r3, #13
 8002d96:	e135      	b.n	8003004 <find_volume+0x498>
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	3330      	adds	r3, #48	; 0x30
 8002d9c:	3311      	adds	r3, #17
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fcf0 	bl	8001784 <ld_word>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461a      	mov	r2, r3
 8002da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002daa:	811a      	strh	r2, [r3, #8]
 8002dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dae:	891b      	ldrh	r3, [r3, #8]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <find_volume+0x252>
 8002dba:	230d      	movs	r3, #13
 8002dbc:	e122      	b.n	8003004 <find_volume+0x498>
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	3330      	adds	r3, #48	; 0x30
 8002dc2:	3313      	adds	r3, #19
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe fcdd 	bl	8001784 <ld_word>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d106      	bne.n	8002de2 <find_volume+0x276>
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	3330      	adds	r3, #48	; 0x30
 8002dd8:	3320      	adds	r3, #32
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fcea 	bl	80017b4 <ld_dword>
 8002de0:	64b8      	str	r0, [r7, #72]	; 0x48
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	3330      	adds	r3, #48	; 0x30
 8002de6:	330e      	adds	r3, #14
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe fccb 	bl	8001784 <ld_word>
 8002dee:	4603      	mov	r3, r0
 8002df0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <find_volume+0x290>
 8002df8:	230d      	movs	r3, #13
 8002dfa:	e103      	b.n	8003004 <find_volume+0x498>
 8002dfc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e00:	4413      	add	r3, r2
 8002e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e04:	8912      	ldrh	r2, [r2, #8]
 8002e06:	0912      	lsrs	r2, r2, #4
 8002e08:	b292      	uxth	r2, r2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d201      	bcs.n	8002e1a <find_volume+0x2ae>
 8002e16:	230d      	movs	r3, #13
 8002e18:	e0f4      	b.n	8003004 <find_volume+0x498>
 8002e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e22:	8952      	ldrh	r2, [r2, #10]
 8002e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <find_volume+0x2cc>
 8002e30:	230d      	movs	r3, #13
 8002e32:	e0e7      	b.n	8003004 <find_volume+0x498>
 8002e34:	200000f8 	.word	0x200000f8
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	4a72      	ldr	r2, [pc, #456]	; (800300c <find_volume+0x4a0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d802      	bhi.n	8002e4c <find_volume+0x2e0>
 8002e46:	2303      	movs	r3, #3
 8002e48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d802      	bhi.n	8002e5c <find_volume+0x2f0>
 8002e56:	2302      	movs	r3, #2
 8002e58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d802      	bhi.n	8002e6c <find_volume+0x300>
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <find_volume+0x30c>
 8002e74:	230d      	movs	r3, #13
 8002e76:	e0c5      	b.n	8003004 <find_volume+0x498>
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	1c9a      	adds	r2, r3, #2
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7e:	615a      	str	r2, [r3, #20]
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e84:	61da      	str	r2, [r3, #28]
 8002e86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e8a:	441a      	add	r2, r3
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8e:	621a      	str	r2, [r3, #32]
 8002e90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	441a      	add	r2, r3
 8002e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e98:	629a      	str	r2, [r3, #40]	; 0x28
 8002e9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d11e      	bne.n	8002ee0 <find_volume+0x374>
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea4:	3330      	adds	r3, #48	; 0x30
 8002ea6:	332a      	adds	r3, #42	; 0x2a
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe fc6b 	bl	8001784 <ld_word>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <find_volume+0x34c>
 8002eb4:	230d      	movs	r3, #13
 8002eb6:	e0a5      	b.n	8003004 <find_volume+0x498>
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	891b      	ldrh	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <find_volume+0x358>
 8002ec0:	230d      	movs	r3, #13
 8002ec2:	e09f      	b.n	8003004 <find_volume+0x498>
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec6:	3330      	adds	r3, #48	; 0x30
 8002ec8:	332c      	adds	r3, #44	; 0x2c
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fc72 	bl	80017b4 <ld_dword>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ede:	e01f      	b.n	8002f20 <find_volume+0x3b4>
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee2:	891b      	ldrh	r3, [r3, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <find_volume+0x380>
 8002ee8:	230d      	movs	r3, #13
 8002eea:	e08b      	b.n	8003004 <find_volume+0x498>
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef2:	441a      	add	r2, r3
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24
 8002ef8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d103      	bne.n	8002f08 <find_volume+0x39c>
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	e00a      	b.n	8002f1e <find_volume+0x3b2>
 8002f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	085a      	lsrs	r2, r3, #1
 8002f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f26:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f2a:	0a5b      	lsrs	r3, r3, #9
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d201      	bcs.n	8002f34 <find_volume+0x3c8>
 8002f30:	230d      	movs	r3, #13
 8002f32:	e067      	b.n	8003004 <find_volume+0x498>
 8002f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f36:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3a:	611a      	str	r2, [r3, #16]
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f42:	60da      	str	r2, [r3, #12]
 8002f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	711a      	strb	r2, [r3, #4]
 8002f4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d149      	bne.n	8002fe6 <find_volume+0x47a>
 8002f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f54:	3330      	adds	r3, #48	; 0x30
 8002f56:	3330      	adds	r3, #48	; 0x30
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fc13 	bl	8001784 <ld_word>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d140      	bne.n	8002fe6 <find_volume+0x47a>
 8002f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f66:	3301      	adds	r3, #1
 8002f68:	4619      	mov	r1, r3
 8002f6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f6c:	f7fe fd8f 	bl	8001a8e <move_window>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d137      	bne.n	8002fe6 <find_volume+0x47a>
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	2200      	movs	r2, #0
 8002f7a:	711a      	strb	r2, [r3, #4]
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7e:	3330      	adds	r3, #48	; 0x30
 8002f80:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe fbfd 	bl	8001784 <ld_word>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d127      	bne.n	8002fe6 <find_volume+0x47a>
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	3330      	adds	r3, #48	; 0x30
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe fc0a 	bl	80017b4 <ld_dword>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <find_volume+0x4a4>)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d11e      	bne.n	8002fe6 <find_volume+0x47a>
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	3330      	adds	r3, #48	; 0x30
 8002fac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fe fbff 	bl	80017b4 <ld_dword>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	4b16      	ldr	r3, [pc, #88]	; (8003014 <find_volume+0x4a8>)
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d113      	bne.n	8002fe6 <find_volume+0x47a>
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	3330      	adds	r3, #48	; 0x30
 8002fc2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe fbf4 	bl	80017b4 <ld_dword>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	611a      	str	r2, [r3, #16]
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	3330      	adds	r3, #48	; 0x30
 8002fd6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fbea 	bl	80017b4 <ld_dword>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <find_volume+0x4ac>)
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	4b08      	ldr	r3, [pc, #32]	; (8003018 <find_volume+0x4ac>)
 8002ff8:	801a      	strh	r2, [r3, #0]
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <find_volume+0x4ac>)
 8002ffc:	881a      	ldrh	r2, [r3, #0]
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	80da      	strh	r2, [r3, #6]
 8003002:	2300      	movs	r3, #0
 8003004:	4618      	mov	r0, r3
 8003006:	3758      	adds	r7, #88	; 0x58
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	0ffffff5 	.word	0x0ffffff5
 8003010:	41615252 	.word	0x41615252
 8003014:	61417272 	.word	0x61417272
 8003018:	200000fc 	.word	0x200000fc

0800301c <validate>:
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	2309      	movs	r3, #9
 8003028:	73fb      	strb	r3, [r7, #15]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01c      	beq.n	800306a <validate+0x4e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d018      	beq.n	800306a <validate+0x4e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d013      	beq.n	800306a <validate+0x4e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	889a      	ldrh	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	88db      	ldrh	r3, [r3, #6]
 800304c:	429a      	cmp	r2, r3
 800304e:	d10c      	bne.n	800306a <validate+0x4e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe f8c8 	bl	80011ec <disk_status>
 800305c:	4603      	mov	r3, r0
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <validate+0x4e>
 8003066:	2300      	movs	r3, #0
 8003068:	73fb      	strb	r3, [r7, #15]
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d102      	bne.n	8003076 <validate+0x5a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	e000      	b.n	8003078 <validate+0x5c>
 8003076:	2300      	movs	r3, #0
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <f_mount>:
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	71fb      	strb	r3, [r7, #7]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	f107 0310 	add.w	r3, r7, #16
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fcc9 	bl	8002a36 <get_ldnumber>
 80030a4:	61f8      	str	r0, [r7, #28]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	da01      	bge.n	80030b0 <f_mount+0x28>
 80030ac:	230b      	movs	r3, #11
 80030ae:	e025      	b.n	80030fc <f_mount+0x74>
 80030b0:	4a14      	ldr	r2, [pc, #80]	; (8003104 <f_mount+0x7c>)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <f_mount+0x3e>
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <f_mount+0x4a>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	490b      	ldr	r1, [pc, #44]	; (8003104 <f_mount+0x7c>)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <f_mount+0x5e>
 80030e2:	2300      	movs	r3, #0
 80030e4:	e00a      	b.n	80030fc <f_mount+0x74>
 80030e6:	f107 010c 	add.w	r1, r7, #12
 80030ea:	f107 0308 	add.w	r3, r7, #8
 80030ee:	2200      	movs	r2, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fd3b 	bl	8002b6c <find_volume>
 80030f6:	4603      	mov	r3, r0
 80030f8:	75fb      	strb	r3, [r7, #23]
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	200000f8 	.word	0x200000f8

08003108 <f_open>:
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b099      	sub	sp, #100	; 0x64
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	4613      	mov	r3, r2
 8003114:	71fb      	strb	r3, [r7, #7]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <f_open+0x18>
 800311c:	2309      	movs	r3, #9
 800311e:	e172      	b.n	8003406 <f_open+0x2fe>
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003126:	71fb      	strb	r3, [r7, #7]
 8003128:	79fa      	ldrb	r2, [r7, #7]
 800312a:	f107 0114 	add.w	r1, r7, #20
 800312e:	f107 0308 	add.w	r3, r7, #8
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fd1a 	bl	8002b6c <find_volume>
 8003138:	4603      	mov	r3, r0
 800313a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800313e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003142:	2b00      	cmp	r3, #0
 8003144:	f040 8156 	bne.w	80033f4 <f_open+0x2ec>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	f107 0318 	add.w	r3, r7, #24
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fbff 	bl	8002958 <follow_path>
 800315a:	4603      	mov	r3, r0
 800315c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003164:	2b00      	cmp	r3, #0
 8003166:	d107      	bne.n	8003178 <f_open+0x70>
 8003168:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800316c:	b25b      	sxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	da02      	bge.n	8003178 <f_open+0x70>
 8003172:	2306      	movs	r3, #6
 8003174:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	f003 031c 	and.w	r3, r3, #28
 800317e:	2b00      	cmp	r3, #0
 8003180:	d073      	beq.n	800326a <f_open+0x162>
 8003182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003186:	2b00      	cmp	r3, #0
 8003188:	d010      	beq.n	80031ac <f_open+0xa4>
 800318a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800318e:	2b04      	cmp	r3, #4
 8003190:	d107      	bne.n	80031a2 <f_open+0x9a>
 8003192:	f107 0318 	add.w	r3, r7, #24
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fa86 	bl	80026a8 <dir_register>
 800319c:	4603      	mov	r3, r0
 800319e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	f043 0308 	orr.w	r3, r3, #8
 80031a8:	71fb      	strb	r3, [r7, #7]
 80031aa:	e010      	b.n	80031ce <f_open+0xc6>
 80031ac:	7fbb      	ldrb	r3, [r7, #30]
 80031ae:	f003 0311 	and.w	r3, r3, #17
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <f_open+0xb6>
 80031b6:	2307      	movs	r3, #7
 80031b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80031bc:	e007      	b.n	80031ce <f_open+0xc6>
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <f_open+0xc6>
 80031c8:	2308      	movs	r3, #8
 80031ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80031ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d163      	bne.n	800329e <f_open+0x196>
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d05e      	beq.n	800329e <f_open+0x196>
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031e4:	4611      	mov	r1, r2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff f96d 	bl	80024c6 <ld_clust>
 80031ec:	6538      	str	r0, [r7, #80]	; 0x50
 80031ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f0:	f103 040e 	add.w	r4, r3, #14
 80031f4:	f7fe fabc 	bl	8001770 <get_fattime>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4619      	mov	r1, r3
 80031fc:	4620      	mov	r0, r4
 80031fe:	f7fe fb17 	bl	8001830 <st_dword>
 8003202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003204:	330b      	adds	r3, #11
 8003206:	2220      	movs	r2, #32
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800320e:	2200      	movs	r2, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff f977 	bl	8002504 <st_clust>
 8003216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003218:	331c      	adds	r3, #28
 800321a:	2100      	movs	r1, #0
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe fb07 	bl	8001830 <st_dword>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2201      	movs	r2, #1
 8003226:	70da      	strb	r2, [r3, #3]
 8003228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322a:	2b00      	cmp	r3, #0
 800322c:	d037      	beq.n	800329e <f_open+0x196>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003234:	f107 0318 	add.w	r3, r7, #24
 8003238:	2200      	movs	r2, #0
 800323a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe fe6c 	bl	8001f1a <remove_chain>
 8003242:	4603      	mov	r3, r0
 8003244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003248:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800324c:	2b00      	cmp	r3, #0
 800324e:	d126      	bne.n	800329e <f_open+0x196>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe fc1a 	bl	8001a8e <move_window>
 800325a:	4603      	mov	r3, r0
 800325c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003264:	3a01      	subs	r2, #1
 8003266:	60da      	str	r2, [r3, #12]
 8003268:	e019      	b.n	800329e <f_open+0x196>
 800326a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800326e:	2b00      	cmp	r3, #0
 8003270:	d115      	bne.n	800329e <f_open+0x196>
 8003272:	7fbb      	ldrb	r3, [r7, #30]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <f_open+0x17c>
 800327c:	2304      	movs	r3, #4
 800327e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003282:	e00c      	b.n	800329e <f_open+0x196>
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <f_open+0x196>
 800328e:	7fbb      	ldrb	r3, [r7, #30]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <f_open+0x196>
 8003298:	2307      	movs	r3, #7
 800329a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800329e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10f      	bne.n	80032c6 <f_open+0x1be>
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <f_open+0x1b0>
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b6:	71fb      	strb	r3, [r7, #7]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	621a      	str	r2, [r3, #32]
 80032c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24
 80032c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f040 8092 	bne.w	80033f4 <f_open+0x2ec>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff f8f5 	bl	80024c6 <ld_clust>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	609a      	str	r2, [r3, #8]
 80032e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e4:	331c      	adds	r3, #28
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe fa64 	bl	80017b4 <ld_dword>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	88da      	ldrh	r2, [r3, #6]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	809a      	strh	r2, [r3, #4]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	79fa      	ldrb	r2, [r7, #7]
 8003304:	741a      	strb	r2, [r3, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	745a      	strb	r2, [r3, #17]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	61da      	str	r2, [r3, #28]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	615a      	str	r2, [r3, #20]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3328      	adds	r3, #40	; 0x28
 800331c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe fad1 	bl	80018ca <mem_set>
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	d060      	beq.n	80033f4 <f_open+0x2ec>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d05c      	beq.n	80033f4 <f_open+0x2ec>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	615a      	str	r2, [r3, #20]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	895b      	ldrh	r3, [r3, #10]
 8003346:	025b      	lsls	r3, r3, #9
 8003348:	64bb      	str	r3, [r7, #72]	; 0x48
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	657b      	str	r3, [r7, #84]	; 0x54
 8003356:	e016      	b.n	8003386 <f_open+0x27e>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe fc50 	bl	8001c02 <get_fat>
 8003362:	65b8      	str	r0, [r7, #88]	; 0x58
 8003364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003366:	2b01      	cmp	r3, #1
 8003368:	d802      	bhi.n	8003370 <f_open+0x268>
 800336a:	2302      	movs	r3, #2
 800336c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003376:	d102      	bne.n	800337e <f_open+0x276>
 8003378:	2301      	movs	r3, #1
 800337a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800337e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	657b      	str	r3, [r7, #84]	; 0x54
 8003386:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800338a:	2b00      	cmp	r3, #0
 800338c:	d103      	bne.n	8003396 <f_open+0x28e>
 800338e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003392:	429a      	cmp	r2, r3
 8003394:	d8e0      	bhi.n	8003358 <f_open+0x250>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800339a:	619a      	str	r2, [r3, #24]
 800339c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d127      	bne.n	80033f4 <f_open+0x2ec>
 80033a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d022      	beq.n	80033f4 <f_open+0x2ec>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fc06 	bl	8001bc4 <clst2sect>
 80033b8:	6478      	str	r0, [r7, #68]	; 0x44
 80033ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <f_open+0x2c0>
 80033c0:	2302      	movs	r3, #2
 80033c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033c6:	e015      	b.n	80033f4 <f_open+0x2ec>
 80033c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ca:	0a5a      	lsrs	r2, r3, #9
 80033cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ce:	441a      	add	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	61da      	str	r2, [r3, #28]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	7858      	ldrb	r0, [r3, #1]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	2301      	movs	r3, #1
 80033e4:	f7fd ff18 	bl	8001218 <disk_read>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <f_open+0x2ec>
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <f_open+0x2fa>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003406:	4618      	mov	r0, r3
 8003408:	3764      	adds	r7, #100	; 0x64
 800340a:	46bd      	mov	sp, r7
 800340c:	bd90      	pop	{r4, r7, pc}

0800340e <f_read>:
 800340e:	b580      	push	{r7, lr}
 8003410:	b08e      	sub	sp, #56	; 0x38
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f107 0214 	add.w	r2, r7, #20
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fdf4 	bl	800301c <validate>
 8003434:	4603      	mov	r3, r0
 8003436:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800343a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <f_read+0x44>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	7c5b      	ldrb	r3, [r3, #17]
 8003446:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800344a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <f_read+0x4a>
 8003452:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003456:	e109      	b.n	800366c <f_read+0x25e>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	7c1b      	ldrb	r3, [r3, #16]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <f_read+0x5a>
 8003464:	2307      	movs	r3, #7
 8003466:	e101      	b.n	800366c <f_read+0x25e>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	623b      	str	r3, [r7, #32]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	429a      	cmp	r2, r3
 800347a:	f240 80f2 	bls.w	8003662 <f_read+0x254>
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	e0ee      	b.n	8003662 <f_read+0x254>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 80ba 	bne.w	8003606 <f_read+0x1f8>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	0a5b      	lsrs	r3, r3, #9
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	8952      	ldrh	r2, [r2, #10]
 800349c:	3a01      	subs	r2, #1
 800349e:	4013      	ands	r3, r2
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d123      	bne.n	80034f0 <f_read+0xe2>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d103      	bne.n	80034b8 <f_read+0xaa>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	633b      	str	r3, [r7, #48]	; 0x30
 80034b6:	e007      	b.n	80034c8 <f_read+0xba>
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f7fe fb9e 	bl	8001c02 <get_fat>
 80034c6:	6338      	str	r0, [r7, #48]	; 0x30
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d804      	bhi.n	80034d8 <f_read+0xca>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2202      	movs	r2, #2
 80034d2:	745a      	strb	r2, [r3, #17]
 80034d4:	2302      	movs	r3, #2
 80034d6:	e0c9      	b.n	800366c <f_read+0x25e>
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d104      	bne.n	80034ea <f_read+0xdc>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	745a      	strb	r2, [r3, #17]
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0c0      	b.n	800366c <f_read+0x25e>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ee:	619a      	str	r2, [r3, #24]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f7fe fb63 	bl	8001bc4 <clst2sect>
 80034fe:	61b8      	str	r0, [r7, #24]
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d104      	bne.n	8003510 <f_read+0x102>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2202      	movs	r2, #2
 800350a:	745a      	strb	r2, [r3, #17]
 800350c:	2302      	movs	r3, #2
 800350e:	e0ad      	b.n	800366c <f_read+0x25e>
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	0a5b      	lsrs	r3, r3, #9
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	d039      	beq.n	8003598 <f_read+0x18a>
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	4413      	add	r3, r2
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	8952      	ldrh	r2, [r2, #10]
 800352e:	4293      	cmp	r3, r2
 8003530:	d905      	bls.n	800353e <f_read+0x130>
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	895b      	ldrh	r3, [r3, #10]
 8003536:	461a      	mov	r2, r3
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	62bb      	str	r3, [r7, #40]	; 0x28
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	7858      	ldrb	r0, [r3, #1]
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003548:	f7fd fe66 	bl	8001218 <disk_read>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <f_read+0x14e>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	745a      	strb	r2, [r3, #17]
 8003558:	2301      	movs	r3, #1
 800355a:	e087      	b.n	800366c <f_read+0x25e>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	7c1b      	ldrb	r3, [r3, #16]
 8003560:	b25b      	sxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	da14      	bge.n	8003590 <f_read+0x182>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003570:	429a      	cmp	r2, r3
 8003572:	d90d      	bls.n	8003590 <f_read+0x182>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	025b      	lsls	r3, r3, #9
 800357e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003580:	18d0      	adds	r0, r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3328      	adds	r3, #40	; 0x28
 8003586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800358a:	4619      	mov	r1, r3
 800358c:	f7fe f97c 	bl	8001888 <mem_cpy>
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	025b      	lsls	r3, r3, #9
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003596:	e050      	b.n	800363a <f_read+0x22c>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d02e      	beq.n	8003600 <f_read+0x1f2>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	7c1b      	ldrb	r3, [r3, #16]
 80035a6:	b25b      	sxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da18      	bge.n	80035de <f_read+0x1d0>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	7858      	ldrb	r0, [r3, #1]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	69da      	ldr	r2, [r3, #28]
 80035ba:	2301      	movs	r3, #1
 80035bc:	f7fd fe96 	bl	80012ec <disk_write>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <f_read+0x1c2>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	745a      	strb	r2, [r3, #17]
 80035cc:	2301      	movs	r3, #1
 80035ce:	e04d      	b.n	800366c <f_read+0x25e>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	7c1b      	ldrb	r3, [r3, #16]
 80035d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	741a      	strb	r2, [r3, #16]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	7858      	ldrb	r0, [r3, #1]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80035e8:	2301      	movs	r3, #1
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	f7fd fe14 	bl	8001218 <disk_read>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d004      	beq.n	8003600 <f_read+0x1f2>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	745a      	strb	r2, [r3, #17]
 80035fc:	2301      	movs	r3, #1
 80035fe:	e035      	b.n	800366c <f_read+0x25e>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	61da      	str	r2, [r3, #28]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d901      	bls.n	8003620 <f_read+0x212>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362e:	4413      	add	r3, r2
 8003630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003632:	4619      	mov	r1, r3
 8003634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003636:	f7fe f927 	bl	8001888 <mem_cpy>
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	441a      	add	r2, r3
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	4413      	add	r3, r2
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365c:	441a      	add	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	615a      	str	r2, [r3, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f47f af0d 	bne.w	8003484 <f_read+0x76>
 800366a:	2300      	movs	r3, #0
 800366c:	4618      	mov	r0, r3
 800366e:	3738      	adds	r7, #56	; 0x38
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <f_sync>:
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f107 0208 	add.w	r2, r7, #8
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fcc9 	bl	800301c <validate>
 800368a:	4603      	mov	r3, r0
 800368c:	75fb      	strb	r3, [r7, #23]
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d168      	bne.n	8003766 <f_sync+0xf2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7c1b      	ldrb	r3, [r3, #16]
 8003698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d062      	beq.n	8003766 <f_sync+0xf2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	7c1b      	ldrb	r3, [r3, #16]
 80036a4:	b25b      	sxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da15      	bge.n	80036d6 <f_sync+0x62>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	7858      	ldrb	r0, [r3, #1]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	2301      	movs	r3, #1
 80036ba:	f7fd fe17 	bl	80012ec <disk_write>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <f_sync+0x54>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e04f      	b.n	8003768 <f_sync+0xf4>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	7c1b      	ldrb	r3, [r3, #16]
 80036cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	741a      	strb	r2, [r3, #16]
 80036d6:	f7fe f84b 	bl	8001770 <get_fattime>
 80036da:	6138      	str	r0, [r7, #16]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f7fe f9d2 	bl	8001a8e <move_window>
 80036ea:	4603      	mov	r3, r0
 80036ec:	75fb      	strb	r3, [r7, #23]
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d138      	bne.n	8003766 <f_sync+0xf2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	330b      	adds	r3, #11
 80036fe:	781a      	ldrb	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	330b      	adds	r3, #11
 8003704:	f042 0220 	orr.w	r2, r2, #32
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	461a      	mov	r2, r3
 8003716:	68f9      	ldr	r1, [r7, #12]
 8003718:	f7fe fef4 	bl	8002504 <st_clust>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f103 021c 	add.w	r2, r3, #28
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7fe f881 	bl	8001830 <st_dword>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3316      	adds	r3, #22
 8003732:	6939      	ldr	r1, [r7, #16]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe f87b 	bl	8001830 <st_dword>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3312      	adds	r3, #18
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe f85a 	bl	80017fa <st_word>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2201      	movs	r2, #1
 800374a:	70da      	strb	r2, [r3, #3]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe f9ca 	bl	8001ae8 <sync_fs>
 8003754:	4603      	mov	r3, r0
 8003756:	75fb      	strb	r3, [r7, #23]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	7c1b      	ldrb	r3, [r3, #16]
 800375c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003760:	b2da      	uxtb	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	741a      	strb	r2, [r3, #16]
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <f_close>:
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ff7b 	bl	8003674 <f_sync>
 800377e:	4603      	mov	r3, r0
 8003780:	73fb      	strb	r3, [r7, #15]
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10e      	bne.n	80037a6 <f_close+0x36>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f107 0208 	add.w	r2, r7, #8
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fc43 	bl	800301c <validate>
 8003796:	4603      	mov	r3, r0
 8003798:	73fb      	strb	r3, [r7, #15]
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <f_close+0x36>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <f_opendir>:
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <f_opendir+0x14>
 80037c0:	2309      	movs	r3, #9
 80037c2:	e04a      	b.n	800385a <f_opendir+0xaa>
 80037c4:	f107 0108 	add.w	r1, r7, #8
 80037c8:	463b      	mov	r3, r7
 80037ca:	2200      	movs	r2, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff f9cd 	bl	8002b6c <find_volume>
 80037d2:	4603      	mov	r3, r0
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d137      	bne.n	800384c <f_opendir+0x9c>
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	4619      	mov	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff f8b6 	bl	8002958 <follow_path>
 80037ec:	4603      	mov	r3, r0
 80037ee:	73fb      	strb	r3, [r7, #15]
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d125      	bne.n	8003842 <f_opendir+0x92>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80037fc:	b25b      	sxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	db12      	blt.n	8003828 <f_opendir+0x78>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	799b      	ldrb	r3, [r3, #6]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <f_opendir+0x74>
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f7fe fe55 	bl	80024c6 <ld_clust>
 800381c:	4602      	mov	r2, r0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	e001      	b.n	8003828 <f_opendir+0x78>
 8003824:	2305      	movs	r3, #5
 8003826:	73fb      	strb	r3, [r7, #15]
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <f_opendir+0x92>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	88da      	ldrh	r2, [r3, #6]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	809a      	strh	r2, [r3, #4]
 8003836:	2100      	movs	r1, #0
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fe fcec 	bl	8002216 <dir_sdi>
 800383e:	4603      	mov	r3, r0
 8003840:	73fb      	strb	r3, [r7, #15]
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d101      	bne.n	800384c <f_opendir+0x9c>
 8003848:	2305      	movs	r3, #5
 800384a:	73fb      	strb	r3, [r7, #15]
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <f_opendir+0xa8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <f_readdir>:
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f107 0208 	add.w	r2, r7, #8
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fbd1 	bl	800301c <validate>
 800387a:	4603      	mov	r3, r0
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d126      	bne.n	80038d2 <f_readdir+0x70>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <f_readdir+0x36>
 800388a:	2100      	movs	r1, #0
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7fe fcc2 	bl	8002216 <dir_sdi>
 8003892:	4603      	mov	r3, r0
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	e01c      	b.n	80038d2 <f_readdir+0x70>
 8003898:	2100      	movs	r1, #0
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fe fe52 	bl	8002544 <dir_read>
 80038a0:	4603      	mov	r3, r0
 80038a2:	73fb      	strb	r3, [r7, #15]
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d101      	bne.n	80038ae <f_readdir+0x4c>
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10e      	bne.n	80038d2 <f_readdir+0x70>
 80038b4:	6839      	ldr	r1, [r7, #0]
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fe ff28 	bl	800270c <get_fileinfo>
 80038bc:	2100      	movs	r1, #0
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fe fd24 	bl	800230c <dir_next>
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d101      	bne.n	80038d2 <f_readdir+0x70>
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <lcd_send_cmd>:
	lcd_send_cmd(0x40 + (Location * 8));  //Send the Address of CGRAM
	for (i = 0; i < 8; i++)
		lcd_send_data(Pattern[i]);  //Pass the bytes of pattern on LCD
}

void lcd_send_cmd(char cmd) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	4603      	mov	r3, r0
 80038e4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	f023 030f 	bic.w	r3, r3, #15
 80038ec:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	f043 030c 	orr.w	r3, r3, #12
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	f043 0308 	orr.w	r3, r3, #8
 8003904:	b2db      	uxtb	r3, r3
 8003906:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8003908:	7bbb      	ldrb	r3, [r7, #14]
 800390a:	f043 030c 	orr.w	r3, r3, #12
 800390e:	b2db      	uxtb	r3, r3
 8003910:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 8003912:	7bbb      	ldrb	r3, [r7, #14]
 8003914:	f043 0308 	orr.w	r3, r3, #8
 8003918:	b2db      	uxtb	r3, r3
 800391a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c3, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 800391c:	f107 0208 	add.w	r2, r7, #8
 8003920:	2364      	movs	r3, #100	; 0x64
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	2304      	movs	r3, #4
 8003926:	214e      	movs	r1, #78	; 0x4e
 8003928:	4804      	ldr	r0, [pc, #16]	; (800393c <lcd_send_cmd+0x60>)
 800392a:	f003 fb63 	bl	8006ff4 <HAL_I2C_Master_Transmit>
 800392e:	4603      	mov	r3, r0
 8003930:	737b      	strb	r3, [r7, #13]
			100);
}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000368 	.word	0x20000368

08003940 <lcd_send_data>:

void lcd_send_data(char data) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af02      	add	r7, sp, #8
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	f023 030f 	bic.w	r3, r3, #15
 8003950:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	f043 030d 	orr.w	r3, r3, #13
 800395e:	b2db      	uxtb	r3, r3
 8003960:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	f043 0309 	orr.w	r3, r3, #9
 8003968:	b2db      	uxtb	r3, r3
 800396a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800396c:	7bbb      	ldrb	r3, [r7, #14]
 800396e:	f043 030d 	orr.w	r3, r3, #13
 8003972:	b2db      	uxtb	r3, r3
 8003974:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 8003976:	7bbb      	ldrb	r3, [r7, #14]
 8003978:	f043 0309 	orr.w	r3, r3, #9
 800397c:	b2db      	uxtb	r3, r3
 800397e:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c3, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8003980:	f107 0208 	add.w	r2, r7, #8
 8003984:	2364      	movs	r3, #100	; 0x64
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	2304      	movs	r3, #4
 800398a:	214e      	movs	r1, #78	; 0x4e
 800398c:	4804      	ldr	r0, [pc, #16]	; (80039a0 <lcd_send_data+0x60>)
 800398e:	f003 fb31 	bl	8006ff4 <HAL_I2C_Master_Transmit>
 8003992:	4603      	mov	r3, r0
 8003994:	737b      	strb	r3, [r7, #13]
			100);
}
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000368 	.word	0x20000368

080039a4 <lcd_clear>:

void lcd_clear(void) {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x00);
 80039aa:	2000      	movs	r0, #0
 80039ac:	f7ff ff96 	bl	80038dc <lcd_send_cmd>
	for (int i = 0; i < 100; i++) {
 80039b0:	2300      	movs	r3, #0
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	e005      	b.n	80039c2 <lcd_clear+0x1e>
		lcd_send_data(' ');
 80039b6:	2020      	movs	r0, #32
 80039b8:	f7ff ffc2 	bl	8003940 <lcd_send_data>
	for (int i = 0; i < 100; i++) {
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3301      	adds	r3, #1
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b63      	cmp	r3, #99	; 0x63
 80039c6:	ddf6      	ble.n	80039b6 <lcd_clear+0x12>
	}
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <lcd_init>:

void lcd_init(void) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80039d4:	2032      	movs	r0, #50	; 0x32
 80039d6:	f001 fc6f 	bl	80052b8 <HAL_Delay>
	lcd_send_cmd(0x30);
 80039da:	2030      	movs	r0, #48	; 0x30
 80039dc:	f7ff ff7e 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80039e0:	2005      	movs	r0, #5
 80039e2:	f001 fc69 	bl	80052b8 <HAL_Delay>
	lcd_send_cmd(0x30);
 80039e6:	2030      	movs	r0, #48	; 0x30
 80039e8:	f7ff ff78 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80039ec:	2001      	movs	r0, #1
 80039ee:	f001 fc63 	bl	80052b8 <HAL_Delay>
	lcd_send_cmd(0x30);
 80039f2:	2030      	movs	r0, #48	; 0x30
 80039f4:	f7ff ff72 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(10);
 80039f8:	200a      	movs	r0, #10
 80039fa:	f001 fc5d 	bl	80052b8 <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 80039fe:	2020      	movs	r0, #32
 8003a00:	f7ff ff6c 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(10);
 8003a04:	200a      	movs	r0, #10
 8003a06:	f001 fc57 	bl	80052b8 <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003a0a:	2028      	movs	r0, #40	; 0x28
 8003a0c:	f7ff ff66 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(1);
 8003a10:	2001      	movs	r0, #1
 8003a12:	f001 fc51 	bl	80052b8 <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8003a16:	2008      	movs	r0, #8
 8003a18:	f7ff ff60 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(1);
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	f001 fc4b 	bl	80052b8 <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 8003a22:	2001      	movs	r0, #1
 8003a24:	f7ff ff5a 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(1);
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f001 fc45 	bl	80052b8 <HAL_Delay>
	HAL_Delay(1);
 8003a2e:	2001      	movs	r0, #1
 8003a30:	f001 fc42 	bl	80052b8 <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8003a34:	2006      	movs	r0, #6
 8003a36:	f7ff ff51 	bl	80038dc <lcd_send_cmd>
	HAL_Delay(1);
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	f001 fc3c 	bl	80052b8 <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8003a40:	200c      	movs	r0, #12
 8003a42:	f7ff ff4b 	bl	80038dc <lcd_send_cmd>
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <lcd_send_string>:

void lcd_send_string(char *str) {
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
	while (*str)
 8003a52:	e006      	b.n	8003a62 <lcd_send_string+0x18>
		lcd_send_data(*str++);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff6f 	bl	8003940 <lcd_send_data>
	while (*str)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f4      	bne.n	8003a54 <lcd_send_string+0xa>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
    switch (row)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <lcd_put_cur+0x16>
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d005      	beq.n	8003a92 <lcd_put_cur+0x20>
 8003a86:	e009      	b.n	8003a9c <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8e:	603b      	str	r3, [r7, #0]
            break;
 8003a90:	e004      	b.n	8003a9c <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a98:	603b      	str	r3, [r7, #0]
            break;
 8003a9a:	bf00      	nop
    }

    lcd_send_cmd (col);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff ff1b 	bl	80038dc <lcd_send_cmd>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <read_song>:
static void MX_DAC_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2S3_Init(void);
/* USER CODE BEGIN PFP */

void read_song(){
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08e      	sub	sp, #56	; 0x38
 8003ab4:	af00      	add	r7, sp, #0

FRESULT res;
    DIR dir;
    UINT i=0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
    UINT z;

    static FILINFO fno;


		res = f_opendir(&dir, "/");
 8003aba:	463b      	mov	r3, r7
 8003abc:	492e      	ldr	r1, [pc, #184]	; (8003b78 <read_song+0xc8>)
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fe76 	bl	80037b0 <f_opendir>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    	if (res == FR_OK) {
 8003aca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d147      	bne.n	8003b62 <read_song+0xb2>


  	  	  	do{
            		res = f_readdir(&dir, &fno);
 8003ad2:	463b      	mov	r3, r7
 8003ad4:	4929      	ldr	r1, [pc, #164]	; (8003b7c <read_song+0xcc>)
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fec3 	bl	8003862 <f_readdir>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            		if (res != FR_OK || fno.fname[0] == 0) {i=1; break;}
 8003ae2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d103      	bne.n	8003af2 <read_song+0x42>
 8003aea:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <read_song+0xcc>)
 8003aec:	7a5b      	ldrb	r3, [r3, #9]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <read_song+0x48>
 8003af2:	2301      	movs	r3, #1
 8003af4:	637b      	str	r3, [r7, #52]	; 0x34
 8003af6:	e024      	b.n	8003b42 <read_song+0x92>
            		printf("%s\n", fno.fname);
 8003af8:	4821      	ldr	r0, [pc, #132]	; (8003b80 <read_song+0xd0>)
 8003afa:	f008 fb1b 	bl	800c134 <puts>
                	z = strlen(fno.fname);
 8003afe:	4820      	ldr	r0, [pc, #128]	; (8003b80 <read_song+0xd0>)
 8003b00:	f7fc fb62 	bl	80001c8 <strlen>
 8003b04:	62f8      	str	r0, [r7, #44]	; 0x2c
                	i++;
 8003b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b08:	3301      	adds	r3, #1
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
            	}
            	while(i<=nr_utworu ||(fno.fname[z-1]!='V') || (fno.fname[z-2]!='A')|| (fno.fname[z-3]!='W'));
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <read_song+0xd4>)
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d9dc      	bls.n	8003ad2 <read_song+0x22>
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <read_song+0xcc>)
 8003b1e:	4413      	add	r3, r2
 8003b20:	7a5b      	ldrb	r3, [r3, #9]
 8003b22:	2b56      	cmp	r3, #86	; 0x56
 8003b24:	d1d5      	bne.n	8003ad2 <read_song+0x22>
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	3b02      	subs	r3, #2
 8003b2a:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <read_song+0xcc>)
 8003b2c:	4413      	add	r3, r2
 8003b2e:	7a5b      	ldrb	r3, [r3, #9]
 8003b30:	2b41      	cmp	r3, #65	; 0x41
 8003b32:	d1ce      	bne.n	8003ad2 <read_song+0x22>
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b36:	3b03      	subs	r3, #3
 8003b38:	4a10      	ldr	r2, [pc, #64]	; (8003b7c <read_song+0xcc>)
 8003b3a:	4413      	add	r3, r2
 8003b3c:	7a5b      	ldrb	r3, [r3, #9]
 8003b3e:	2b57      	cmp	r3, #87	; 0x57
 8003b40:	d1c7      	bne.n	8003ad2 <read_song+0x22>
  	  	  	//||
  	  	  	//(fno.fname[z-1]!='3') || (fno.fname[z-2]!='P')|| (fno.fname[z-3]!='M')
  	  	  		sprintf(utwor,"%s",fno.fname);
 8003b42:	490f      	ldr	r1, [pc, #60]	; (8003b80 <read_song+0xd0>)
 8003b44:	4810      	ldr	r0, [pc, #64]	; (8003b88 <read_song+0xd8>)
 8003b46:	f008 fafd 	bl	800c144 <strcpy>
  	  	  		nr_utworu=i-1;
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <read_song+0xd4>)
 8003b54:	801a      	strh	r2, [r3, #0]
  	  	  		if(nr_utworu==0)read_song();
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <read_song+0xd4>)
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <read_song+0xb2>
 8003b5e:	f7ff ffa7 	bl	8003ab0 <read_song>
            	}


    			sizeutwor = strlen(utwor);
 8003b62:	4809      	ldr	r0, [pc, #36]	; (8003b88 <read_song+0xd8>)
 8003b64:	f7fc fb30 	bl	80001c8 <strlen>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <read_song+0xdc>)
 8003b6e:	701a      	strb	r2, [r3, #0]
               	return;
 8003b70:	bf00      	nop
}
 8003b72:	3738      	adds	r7, #56	; 0x38
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	0800c990 	.word	0x0800c990
 8003b7c:	2000033c 	.word	0x2000033c
 8003b80:	20000345 	.word	0x20000345
 8003b84:	20000336 	.word	0x20000336
 8003b88:	2000045c 	.word	0x2000045c
 8003b8c:	20000b48 	.word	0x20000b48

08003b90 <next>:

void next(){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim4);
 8003b94:	4820      	ldr	r0, [pc, #128]	; (8003c18 <next+0x88>)
 8003b96:	f006 ffc8 	bl	800ab2a <HAL_TIM_Base_Stop_IT>
	f_close(&file);
 8003b9a:	4820      	ldr	r0, [pc, #128]	; (8003c1c <next+0x8c>)
 8003b9c:	f7ff fde8 	bl	8003770 <f_close>
	nr_utworu++;
 8003ba0:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <next+0x90>)
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <next+0x90>)
 8003baa:	801a      	strh	r2, [r3, #0]
	read_song();
 8003bac:	f7ff ff80 	bl	8003ab0 <read_song>
	fresult = f_open(&file, &utwor , FA_READ|FA_OPEN_EXISTING);
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	491c      	ldr	r1, [pc, #112]	; (8003c24 <next+0x94>)
 8003bb4:	4819      	ldr	r0, [pc, #100]	; (8003c1c <next+0x8c>)
 8003bb6:	f7ff faa7 	bl	8003108 <f_open>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <next+0x98>)
 8003bc0:	701a      	strb	r2, [r3, #0]
	f_read(&file, &buf, BUFSIZE, &bytes_read);
 8003bc2:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <next+0x9c>)
 8003bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bc8:	4919      	ldr	r1, [pc, #100]	; (8003c30 <next+0xa0>)
 8003bca:	4814      	ldr	r0, [pc, #80]	; (8003c1c <next+0x8c>)
 8003bcc:	f7ff fc1f 	bl	800340e <f_read>
	i=0;
 8003bd0:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <next+0xa4>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
	j=0;
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <next+0xa8>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
	 lcd_clear ();
 8003bdc:	f7ff fee2 	bl	80039a4 <lcd_clear>
	lcd_put_cur(0, 0);
 8003be0:	2100      	movs	r1, #0
 8003be2:	2000      	movs	r0, #0
 8003be4:	f7ff ff45 	bl	8003a72 <lcd_put_cur>
	lcd_send_string(&utwor);
 8003be8:	480e      	ldr	r0, [pc, #56]	; (8003c24 <next+0x94>)
 8003bea:	f7ff ff2e 	bl	8003a4a <lcd_send_string>
	lcd_put_cur(1, 0);
 8003bee:	2100      	movs	r1, #0
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	f7ff ff3e 	bl	8003a72 <lcd_put_cur>
	lcd_send_string("PLAY");
 8003bf6:	4811      	ldr	r0, [pc, #68]	; (8003c3c <next+0xac>)
 8003bf8:	f7ff ff27 	bl	8003a4a <lcd_send_string>
	HAL_UART_Transmit_IT(&huart2, &utwor, sizeutwor);
 8003bfc:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <next+0xb0>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	4907      	ldr	r1, [pc, #28]	; (8003c24 <next+0x94>)
 8003c06:	480f      	ldr	r0, [pc, #60]	; (8003c44 <next+0xb4>)
 8003c08:	f007 fbb9 	bl	800b37e <HAL_UART_Transmit_IT>

	 HAL_TIM_Base_Start_IT(&htim4);
 8003c0c:	4802      	ldr	r0, [pc, #8]	; (8003c18 <next+0x88>)
 8003c0e:	f006 ff68 	bl	800aae2 <HAL_TIM_Base_Start_IT>
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	200003bc 	.word	0x200003bc
 8003c1c:	200004d4 	.word	0x200004d4
 8003c20:	20000336 	.word	0x20000336
 8003c24:	2000045c 	.word	0x2000045c
 8003c28:	20001030 	.word	0x20001030
 8003c2c:	20000744 	.word	0x20000744
 8003c30:	20000c30 	.word	0x20000c30
 8003c34:	20000330 	.word	0x20000330
 8003c38:	20000004 	.word	0x20000004
 8003c3c:	0800c994 	.word	0x0800c994
 8003c40:	20000b48 	.word	0x20000b48
 8003c44:	2000108c 	.word	0x2000108c

08003c48 <prev>:

void prev(){
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim4);
 8003c4c:	4820      	ldr	r0, [pc, #128]	; (8003cd0 <prev+0x88>)
 8003c4e:	f006 ff6c 	bl	800ab2a <HAL_TIM_Base_Stop_IT>
	f_close(&file);
 8003c52:	4820      	ldr	r0, [pc, #128]	; (8003cd4 <prev+0x8c>)
 8003c54:	f7ff fd8c 	bl	8003770 <f_close>
	nr_utworu--;
 8003c58:	4b1f      	ldr	r3, [pc, #124]	; (8003cd8 <prev+0x90>)
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <prev+0x90>)
 8003c62:	801a      	strh	r2, [r3, #0]
	read_song();
 8003c64:	f7ff ff24 	bl	8003ab0 <read_song>
	fresult = f_open(&file, &utwor , FA_READ|FA_OPEN_EXISTING);
 8003c68:	2201      	movs	r2, #1
 8003c6a:	491c      	ldr	r1, [pc, #112]	; (8003cdc <prev+0x94>)
 8003c6c:	4819      	ldr	r0, [pc, #100]	; (8003cd4 <prev+0x8c>)
 8003c6e:	f7ff fa4b 	bl	8003108 <f_open>
 8003c72:	4603      	mov	r3, r0
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <prev+0x98>)
 8003c78:	701a      	strb	r2, [r3, #0]
	f_read(&file, &buf, BUFSIZE, &bytes_read);
 8003c7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <prev+0x9c>)
 8003c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c80:	4919      	ldr	r1, [pc, #100]	; (8003ce8 <prev+0xa0>)
 8003c82:	4814      	ldr	r0, [pc, #80]	; (8003cd4 <prev+0x8c>)
 8003c84:	f7ff fbc3 	bl	800340e <f_read>
	i=0;
 8003c88:	4b18      	ldr	r3, [pc, #96]	; (8003cec <prev+0xa4>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
	j=0;
 8003c8e:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <prev+0xa8>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
	 lcd_clear ();
 8003c94:	f7ff fe86 	bl	80039a4 <lcd_clear>
	lcd_put_cur(0, 0);
 8003c98:	2100      	movs	r1, #0
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	f7ff fee9 	bl	8003a72 <lcd_put_cur>
	lcd_send_string(&utwor);
 8003ca0:	480e      	ldr	r0, [pc, #56]	; (8003cdc <prev+0x94>)
 8003ca2:	f7ff fed2 	bl	8003a4a <lcd_send_string>
	lcd_put_cur(1, 0);
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f7ff fee2 	bl	8003a72 <lcd_put_cur>
	lcd_send_string("PLAY");
 8003cae:	4811      	ldr	r0, [pc, #68]	; (8003cf4 <prev+0xac>)
 8003cb0:	f7ff fecb 	bl	8003a4a <lcd_send_string>
	HAL_UART_Transmit_IT(&huart2, &utwor, sizeutwor);
 8003cb4:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <prev+0xb0>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4907      	ldr	r1, [pc, #28]	; (8003cdc <prev+0x94>)
 8003cbe:	480f      	ldr	r0, [pc, #60]	; (8003cfc <prev+0xb4>)
 8003cc0:	f007 fb5d 	bl	800b37e <HAL_UART_Transmit_IT>

	HAL_TIM_Base_Start_IT(&htim4);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <prev+0x88>)
 8003cc6:	f006 ff0c 	bl	800aae2 <HAL_TIM_Base_Start_IT>
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	200003bc 	.word	0x200003bc
 8003cd4:	200004d4 	.word	0x200004d4
 8003cd8:	20000336 	.word	0x20000336
 8003cdc:	2000045c 	.word	0x2000045c
 8003ce0:	20001030 	.word	0x20001030
 8003ce4:	20000744 	.word	0x20000744
 8003ce8:	20000c30 	.word	0x20000c30
 8003cec:	20000330 	.word	0x20000330
 8003cf0:	20000004 	.word	0x20000004
 8003cf4:	0800c994 	.word	0x0800c994
 8003cf8:	20000b48 	.word	0x20000b48
 8003cfc:	2000108c 	.word	0x2000108c

08003d00 <HAL_ADC_ConvCpltCallback>:
		  	else if(value[0]>3692 && value[0] <= 4095) indeks_glosnosci = 9;
	}
}*/


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

	if(hadc->Instance == hadc1.Instance){
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_ADC_ConvCpltCallback+0x28>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d102      	bne.n	8003d1a <HAL_ADC_ConvCpltCallback+0x1a>
		zrodlo_gloscnoci=1;
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_ADC_ConvCpltCallback+0x2c>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	701a      	strb	r2, [r3, #0]
	}
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	200006fc 	.word	0x200006fc
 8003d2c:	20000334 	.word	0x20000334

08003d30 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	80fb      	strh	r3, [r7, #6]

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET){
 8003d3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d3e:	483c      	ldr	r0, [pc, #240]	; (8003e30 <HAL_GPIO_EXTI_Callback+0x100>)
 8003d40:	f002 ffbc 	bl	8006cbc <HAL_GPIO_ReadPin>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d110      	bne.n	8003d6c <HAL_GPIO_EXTI_Callback+0x3c>

		 //ciszej

		 if(indeks_glosnosci>0 && indeks_glosnosci<=9) {indeks_glosnosci--; zrodlo_gloscnoci=0;}
 8003d4a:	4b3a      	ldr	r3, [pc, #232]	; (8003e34 <HAL_GPIO_EXTI_Callback+0x104>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00c      	beq.n	8003d6c <HAL_GPIO_EXTI_Callback+0x3c>
 8003d52:	4b38      	ldr	r3, [pc, #224]	; (8003e34 <HAL_GPIO_EXTI_Callback+0x104>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b09      	cmp	r3, #9
 8003d58:	d808      	bhi.n	8003d6c <HAL_GPIO_EXTI_Callback+0x3c>
 8003d5a:	4b36      	ldr	r3, [pc, #216]	; (8003e34 <HAL_GPIO_EXTI_Callback+0x104>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <HAL_GPIO_EXTI_Callback+0x104>)
 8003d64:	701a      	strb	r2, [r3, #0]
 8003d66:	4b34      	ldr	r3, [pc, #208]	; (8003e38 <HAL_GPIO_EXTI_Callback+0x108>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]

		  	}

	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 8003d6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d70:	482f      	ldr	r0, [pc, #188]	; (8003e30 <HAL_GPIO_EXTI_Callback+0x100>)
 8003d72:	f002 ffa3 	bl	8006cbc <HAL_GPIO_ReadPin>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_GPIO_EXTI_Callback+0x50>
			  		//prev song
		prev();
 8003d7c:	f7ff ff64 	bl	8003c48 <prev>


			}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 8003d80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d84:	482a      	ldr	r0, [pc, #168]	; (8003e30 <HAL_GPIO_EXTI_Callback+0x100>)
 8003d86:	f002 ff99 	bl	8006cbc <HAL_GPIO_ReadPin>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d129      	bne.n	8003de4 <HAL_GPIO_EXTI_Callback+0xb4>


		 //pause/start

		 if(stan==1){
 8003d90:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <HAL_GPIO_EXTI_Callback+0x10c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d116      	bne.n	8003dc6 <HAL_GPIO_EXTI_Callback+0x96>
		//HAL_TIM_Base_Start(&htim6);
		//HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &buf, BUFSIZE, DAC_ALIGN_12B_R);
		lcd_clear();
 8003d98:	f7ff fe04 	bl	80039a4 <lcd_clear>
		lcd_put_cur(0, 0);
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	2000      	movs	r0, #0
 8003da0:	f7ff fe67 	bl	8003a72 <lcd_put_cur>
		lcd_send_string(&utwor);
 8003da4:	4826      	ldr	r0, [pc, #152]	; (8003e40 <HAL_GPIO_EXTI_Callback+0x110>)
 8003da6:	f7ff fe50 	bl	8003a4a <lcd_send_string>
		lcd_put_cur(1, 0);
 8003daa:	2100      	movs	r1, #0
 8003dac:	2001      	movs	r0, #1
 8003dae:	f7ff fe60 	bl	8003a72 <lcd_put_cur>
		lcd_send_string("PLAY");
 8003db2:	4824      	ldr	r0, [pc, #144]	; (8003e44 <HAL_GPIO_EXTI_Callback+0x114>)
 8003db4:	f7ff fe49 	bl	8003a4a <lcd_send_string>

		HAL_TIM_Base_Start_IT(&htim4);
 8003db8:	4823      	ldr	r0, [pc, #140]	; (8003e48 <HAL_GPIO_EXTI_Callback+0x118>)
 8003dba:	f006 fe92 	bl	800aae2 <HAL_TIM_Base_Start_IT>
		 //HAL_TIM_Base_Start_IT(&htim7);
		 stan = 0;
 8003dbe:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <HAL_GPIO_EXTI_Callback+0x10c>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e00e      	b.n	8003de4 <HAL_GPIO_EXTI_Callback+0xb4>
		 }
		 else
		 {
			 lcd_clear();
 8003dc6:	f7ff fded 	bl	80039a4 <lcd_clear>
			 lcd_put_cur(1, 0);
 8003dca:	2100      	movs	r1, #0
 8003dcc:	2001      	movs	r0, #1
 8003dce:	f7ff fe50 	bl	8003a72 <lcd_put_cur>
			 lcd_send_string("PAUSE");
 8003dd2:	481e      	ldr	r0, [pc, #120]	; (8003e4c <HAL_GPIO_EXTI_Callback+0x11c>)
 8003dd4:	f7ff fe39 	bl	8003a4a <lcd_send_string>
			 //HAL_TIM_Base_Start(&htim6);
			HAL_TIM_Base_Stop_IT(&htim4);
 8003dd8:	481b      	ldr	r0, [pc, #108]	; (8003e48 <HAL_GPIO_EXTI_Callback+0x118>)
 8003dda:	f006 fea6 	bl	800ab2a <HAL_TIM_Base_Stop_IT>
			 stan=1;
 8003dde:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <HAL_GPIO_EXTI_Callback+0x10c>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
		 }

	 		}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET){
 8003de4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003de8:	4811      	ldr	r0, [pc, #68]	; (8003e30 <HAL_GPIO_EXTI_Callback+0x100>)
 8003dea:	f002 ff67 	bl	8006cbc <HAL_GPIO_ReadPin>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_GPIO_EXTI_Callback+0xc8>
		 	next();
 8003df4:	f7ff fecc 	bl	8003b90 <next>

		 	}
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 8003df8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dfc:	480c      	ldr	r0, [pc, #48]	; (8003e30 <HAL_GPIO_EXTI_Callback+0x100>)
 8003dfe:	f002 ff5d 	bl	8006cbc <HAL_GPIO_ReadPin>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10c      	bne.n	8003e22 <HAL_GPIO_EXTI_Callback+0xf2>

		 //glosniej

		 if(indeks_glosnosci>=0 && indeks_glosnosci<9)
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_GPIO_EXTI_Callback+0x104>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d805      	bhi.n	8003e1c <HAL_GPIO_EXTI_Callback+0xec>
					 indeks_glosnosci++;
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <HAL_GPIO_EXTI_Callback+0x104>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	3301      	adds	r3, #1
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_GPIO_EXTI_Callback+0x104>)
 8003e1a:	701a      	strb	r2, [r3, #0]
				 	 zrodlo_gloscnoci=0;
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_GPIO_EXTI_Callback+0x108>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	701a      	strb	r2, [r3, #0]
					 	}
	 HAL_Delay(200);
 8003e22:	20c8      	movs	r0, #200	; 0xc8
 8003e24:	f001 fa48 	bl	80052b8 <HAL_Delay>

}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40020400 	.word	0x40020400
 8003e34:	20000008 	.word	0x20000008
 8003e38:	20000334 	.word	0x20000334
 8003e3c:	20000060 	.word	0x20000060
 8003e40:	2000045c 	.word	0x2000045c
 8003e44:	0800c994 	.word	0x0800c994
 8003e48:	200003bc 	.word	0x200003bc
 8003e4c:	0800c99c 	.word	0x0800c99c

08003e50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003e50:	b590      	push	{r4, r7, lr}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a5f      	ldr	r2, [pc, #380]	; (8003fdc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	f040 80b8 	bne.w	8003fd4 <HAL_TIM_PeriodElapsedCallback+0x184>
	{
		switch (zrodlo_gloscnoci){
 8003e64:	4b5e      	ldr	r3, [pc, #376]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_TIM_PeriodElapsedCallback+0x22>
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d00b      	beq.n	8003e88 <HAL_TIM_PeriodElapsedCallback+0x38>
 8003e70:	e01a      	b.n	8003ea8 <HAL_TIM_PeriodElapsedCallback+0x58>
				case 0:
					glosnosc= glosnosc_guziczki[indeks_glosnosci];
 8003e72:	4b5c      	ldr	r3, [pc, #368]	; (8003fe4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	4a5c      	ldr	r2, [pc, #368]	; (8003fe8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e80:	4a5a      	ldr	r2, [pc, #360]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003e82:	e9c2 3400 	strd	r3, r4, [r2]
					break;
 8003e86:	e00f      	b.n	8003ea8 <HAL_TIM_PeriodElapsedCallback+0x58>
				case 1:
					glosnosc = (value[0]/500);
 8003e88:	4b59      	ldr	r3, [pc, #356]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	4a59      	ldr	r2, [pc, #356]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fc faf0 	bl	800047c <__aeabi_i2d>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	4a52      	ldr	r2, [pc, #328]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003ea2:	e9c2 3400 	strd	r3, r4, [r2]
					break;
 8003ea6:	bf00      	nop

				}

		if(aktualny_bufor==0){
 8003ea8:	4b53      	ldr	r3, [pc, #332]	; (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d146      	bne.n	8003f3e <HAL_TIM_PeriodElapsedCallback+0xee>
					HAL_DAC_SetValue(&hdac,DAC_CHANNEL_2,DAC_ALIGN_12B_R,buf[i]*glosnosc);
 8003eb0:	4b52      	ldr	r3, [pc, #328]	; (8003ffc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a52      	ldr	r2, [pc, #328]	; (8004000 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003eb6:	5cd3      	ldrb	r3, [r2, r3]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc fade 	bl	800047c <__aeabi_i2d>
 8003ec0:	4b4a      	ldr	r3, [pc, #296]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003ec2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4623      	mov	r3, r4
 8003eca:	f7fc fb41 	bl	8000550 <__aeabi_dmul>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	f7fc fd4d 	bl	8000974 <__aeabi_d2uiz>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2200      	movs	r2, #0
 8003ede:	2110      	movs	r1, #16
 8003ee0:	4848      	ldr	r0, [pc, #288]	; (8004004 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003ee2:	f002 f983 	bl	80061ec <HAL_DAC_SetValue>
					//HAL_I2S_Transmit(&hi2s2, &buf[i], BUFSIZE,100);
					eof=f_eof(&file);
 8003ee6:	4b48      	ldr	r3, [pc, #288]	; (8004008 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	4b47      	ldr	r3, [pc, #284]	; (8004008 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	bf0c      	ite	eq
 8003ef2:	2301      	moveq	r3, #1
 8003ef4:	2300      	movne	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4b44      	ldr	r3, [pc, #272]	; (800400c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003efc:	701a      	strb	r2, [r3, #0]
					if(eof ==0) f_read(&file, &buf2[i],1, &bytes_read);
 8003efe:	4b43      	ldr	r3, [pc, #268]	; (800400c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <HAL_TIM_PeriodElapsedCallback+0xca>
 8003f06:	4b3d      	ldr	r3, [pc, #244]	; (8003ffc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a41      	ldr	r2, [pc, #260]	; (8004010 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003f0c:	1899      	adds	r1, r3, r2
 8003f0e:	4b41      	ldr	r3, [pc, #260]	; (8004014 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	483d      	ldr	r0, [pc, #244]	; (8004008 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003f14:	f7ff fa7b 	bl	800340e <f_read>
 8003f18:	e001      	b.n	8003f1e <HAL_TIM_PeriodElapsedCallback+0xce>
					else {next();}
 8003f1a:	f7ff fe39 	bl	8003b90 <next>
					i++;
 8003f1e:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3301      	adds	r3, #1
 8003f24:	4a35      	ldr	r2, [pc, #212]	; (8003ffc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003f26:	6013      	str	r3, [r2, #0]
					if(i==BUFSIZE){
 8003f28:	4b34      	ldr	r3, [pc, #208]	; (8003ffc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f30:	d105      	bne.n	8003f3e <HAL_TIM_PeriodElapsedCallback+0xee>
						aktualny_bufor = 1;
 8003f32:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	701a      	strb	r2, [r3, #0]
						j=0;
 8003f38:	4b37      	ldr	r3, [pc, #220]	; (8004018 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
						//HAL_TIM_Base_Start_IT(&htim7);*glosnosc_guziczki[indeks_glosnosci]
					}
				}

			if(aktualny_bufor==1){
 8003f3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d146      	bne.n	8003fd4 <HAL_TIM_PeriodElapsedCallback+0x184>
				HAL_DAC_SetValue(&hdac,DAC_CHANNEL_2,DAC_ALIGN_12B_R,buf2[j]*glosnosc);
 8003f46:	4b34      	ldr	r3, [pc, #208]	; (8004018 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a31      	ldr	r2, [pc, #196]	; (8004010 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003f4c:	5cd3      	ldrb	r3, [r2, r3]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc fa93 	bl	800047c <__aeabi_i2d>
 8003f56:	4b25      	ldr	r3, [pc, #148]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003f58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4623      	mov	r3, r4
 8003f60:	f7fc faf6 	bl	8000550 <__aeabi_dmul>
 8003f64:	4603      	mov	r3, r0
 8003f66:	460c      	mov	r4, r1
 8003f68:	4618      	mov	r0, r3
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	f7fc fd02 	bl	8000974 <__aeabi_d2uiz>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2200      	movs	r2, #0
 8003f74:	2110      	movs	r1, #16
 8003f76:	4823      	ldr	r0, [pc, #140]	; (8004004 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003f78:	f002 f938 	bl	80061ec <HAL_DAC_SetValue>
				//HAL_I2S_Transmit(&hi2s2, &buf2[j], BUFSIZE,100);
				eof=f_eof(&file);
 8003f7c:	4b22      	ldr	r3, [pc, #136]	; (8004008 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	4b21      	ldr	r3, [pc, #132]	; (8004008 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4b1e      	ldr	r3, [pc, #120]	; (800400c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003f92:	701a      	strb	r2, [r3, #0]
				if(eof ==0) f_read(&file, &buf[j],1, &bytes_read);
 8003f94:	4b1d      	ldr	r3, [pc, #116]	; (800400c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d109      	bne.n	8003fb0 <HAL_TIM_PeriodElapsedCallback+0x160>
 8003f9c:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a17      	ldr	r2, [pc, #92]	; (8004000 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003fa2:	1899      	adds	r1, r3, r2
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4817      	ldr	r0, [pc, #92]	; (8004008 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003faa:	f7ff fa30 	bl	800340e <f_read>
 8003fae:	e001      	b.n	8003fb4 <HAL_TIM_PeriodElapsedCallback+0x164>
				else {next();}
 8003fb0:	f7ff fdee 	bl	8003b90 <next>
				j++;
 8003fb4:	4b18      	ldr	r3, [pc, #96]	; (8004018 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	4a17      	ldr	r2, [pc, #92]	; (8004018 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003fbc:	6013      	str	r3, [r2, #0]
				if(j==BUFSIZE){
 8003fbe:	4b16      	ldr	r3, [pc, #88]	; (8004018 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc6:	d105      	bne.n	8003fd4 <HAL_TIM_PeriodElapsedCallback+0x184>
					aktualny_bufor = 0;
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
					i=0;
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
			else bufforek();*/

	}


}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd90      	pop	{r4, r7, pc}
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	20000334 	.word	0x20000334
 8003fe4:	20000008 	.word	0x20000008
 8003fe8:	20000010 	.word	0x20000010
 8003fec:	20000400 	.word	0x20000400
 8003ff0:	20001118 	.word	0x20001118
 8003ff4:	10624dd3 	.word	0x10624dd3
 8003ff8:	20000338 	.word	0x20000338
 8003ffc:	20000330 	.word	0x20000330
 8004000:	20000c30 	.word	0x20000c30
 8004004:	20000b4c 	.word	0x20000b4c
 8004008:	200004d4 	.word	0x200004d4
 800400c:	20000470 	.word	0x20000470
 8004010:	20000748 	.word	0x20000748
 8004014:	20000744 	.word	0x20000744
 8004018:	20000004 	.word	0x20000004

0800401c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
	{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
		if(huart->Instance == USART2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a2f      	ldr	r2, [pc, #188]	; (80040e8 <HAL_UART_RxCpltCallback+0xcc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d157      	bne.n	80040de <HAL_UART_RxCpltCallback+0xc2>
			{

			HAL_UART_Receive_IT(&huart2, receiveUART, sizeReceiveUART);
 800402e:	4b2f      	ldr	r3, [pc, #188]	; (80040ec <HAL_UART_RxCpltCallback+0xd0>)
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	492e      	ldr	r1, [pc, #184]	; (80040f0 <HAL_UART_RxCpltCallback+0xd4>)
 8004036:	482f      	ldr	r0, [pc, #188]	; (80040f4 <HAL_UART_RxCpltCallback+0xd8>)
 8004038:	f007 f9e6 	bl	800b408 <HAL_UART_Receive_IT>
			if(receiveUART[0]==65){
 800403c:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_UART_RxCpltCallback+0xd4>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b41      	cmp	r3, #65	; 0x41
 8004042:	d106      	bne.n	8004052 <HAL_UART_RxCpltCallback+0x36>
							HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8004044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004048:	482b      	ldr	r0, [pc, #172]	; (80040f8 <HAL_UART_RxCpltCallback+0xdc>)
 800404a:	f002 fe68 	bl	8006d1e <HAL_GPIO_TogglePin>
							prev();
 800404e:	f7ff fdfb 	bl	8003c48 <prev>
						}
						if(receiveUART[0]==66){
 8004052:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <HAL_UART_RxCpltCallback+0xd4>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b42      	cmp	r3, #66	; 0x42
 8004058:	d136      	bne.n	80040c8 <HAL_UART_RxCpltCallback+0xac>

							HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800405a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800405e:	4826      	ldr	r0, [pc, #152]	; (80040f8 <HAL_UART_RxCpltCallback+0xdc>)
 8004060:	f002 fe5d 	bl	8006d1e <HAL_GPIO_TogglePin>
							if(stan==1){
 8004064:	4b25      	ldr	r3, [pc, #148]	; (80040fc <HAL_UART_RxCpltCallback+0xe0>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d11e      	bne.n	80040aa <HAL_UART_RxCpltCallback+0x8e>
								HAL_UART_Transmit_IT(&huart2, &utwor, sizeutwor);
 800406c:	4b24      	ldr	r3, [pc, #144]	; (8004100 <HAL_UART_RxCpltCallback+0xe4>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	4923      	ldr	r1, [pc, #140]	; (8004104 <HAL_UART_RxCpltCallback+0xe8>)
 8004076:	481f      	ldr	r0, [pc, #124]	; (80040f4 <HAL_UART_RxCpltCallback+0xd8>)
 8004078:	f007 f981 	bl	800b37e <HAL_UART_Transmit_IT>
									lcd_clear();
 800407c:	f7ff fc92 	bl	80039a4 <lcd_clear>
									lcd_put_cur(0, 0);
 8004080:	2100      	movs	r1, #0
 8004082:	2000      	movs	r0, #0
 8004084:	f7ff fcf5 	bl	8003a72 <lcd_put_cur>
									lcd_send_string(&utwor);
 8004088:	481e      	ldr	r0, [pc, #120]	; (8004104 <HAL_UART_RxCpltCallback+0xe8>)
 800408a:	f7ff fcde 	bl	8003a4a <lcd_send_string>
									lcd_put_cur(1, 0);
 800408e:	2100      	movs	r1, #0
 8004090:	2001      	movs	r0, #1
 8004092:	f7ff fcee 	bl	8003a72 <lcd_put_cur>
									lcd_send_string("PLAY");
 8004096:	481c      	ldr	r0, [pc, #112]	; (8004108 <HAL_UART_RxCpltCallback+0xec>)
 8004098:	f7ff fcd7 	bl	8003a4a <lcd_send_string>
									 HAL_TIM_Base_Start_IT(&htim4);
 800409c:	481b      	ldr	r0, [pc, #108]	; (800410c <HAL_UART_RxCpltCallback+0xf0>)
 800409e:	f006 fd20 	bl	800aae2 <HAL_TIM_Base_Start_IT>
									 stan = 0;
 80040a2:	4b16      	ldr	r3, [pc, #88]	; (80040fc <HAL_UART_RxCpltCallback+0xe0>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e00e      	b.n	80040c8 <HAL_UART_RxCpltCallback+0xac>
									 }
									 else
									 {
										 lcd_clear();
 80040aa:	f7ff fc7b 	bl	80039a4 <lcd_clear>
										 lcd_put_cur(1, 0);
 80040ae:	2100      	movs	r1, #0
 80040b0:	2001      	movs	r0, #1
 80040b2:	f7ff fcde 	bl	8003a72 <lcd_put_cur>
										 lcd_send_string("PAUSE");
 80040b6:	4816      	ldr	r0, [pc, #88]	; (8004110 <HAL_UART_RxCpltCallback+0xf4>)
 80040b8:	f7ff fcc7 	bl	8003a4a <lcd_send_string>
										 HAL_TIM_Base_Stop_IT(&htim4);
 80040bc:	4813      	ldr	r0, [pc, #76]	; (800410c <HAL_UART_RxCpltCallback+0xf0>)
 80040be:	f006 fd34 	bl	800ab2a <HAL_TIM_Base_Stop_IT>
										 stan=1;
 80040c2:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <HAL_UART_RxCpltCallback+0xe0>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
									 }
									}
						if(receiveUART[0]==67){
 80040c8:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <HAL_UART_RxCpltCallback+0xd4>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b43      	cmp	r3, #67	; 0x43
 80040ce:	d106      	bne.n	80040de <HAL_UART_RxCpltCallback+0xc2>
							HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80040d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040d4:	4808      	ldr	r0, [pc, #32]	; (80040f8 <HAL_UART_RxCpltCallback+0xdc>)
 80040d6:	f002 fe22 	bl	8006d1e <HAL_GPIO_TogglePin>
										next();
 80040da:	f7ff fd59 	bl	8003b90 <next>
									}
			}
	}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40004400 	.word	0x40004400
 80040ec:	20000002 	.word	0x20000002
 80040f0:	20000c00 	.word	0x20000c00
 80040f4:	2000108c 	.word	0x2000108c
 80040f8:	40020c00 	.word	0x40020c00
 80040fc:	20000060 	.word	0x20000060
 8004100:	20000b48 	.word	0x20000b48
 8004104:	2000045c 	.word	0x2000045c
 8004108:	0800c994 	.word	0x0800c994
 800410c:	200003bc 	.word	0x200003bc
 8004110:	0800c99c 	.word	0x0800c99c

08004114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004118:	f001 f85c 	bl	80051d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800411c:	f000 f86e 	bl	80041fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004120:	f000 fb08 	bl	8004734 <MX_GPIO_Init>
  MX_DMA_Init();
 8004124:	f000 fad0 	bl	80046c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8004128:	f000 f8e8 	bl	80042fc <MX_ADC1_Init>
  MX_I2C3_Init();
 800412c:	f000 f990 	bl	8004450 <MX_I2C3_Init>
  MX_TIM6_Init();
 8004130:	f000 fa6c 	bl	800460c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8004134:	f000 fa9e 	bl	8004674 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8004138:	f000 fa1c 	bl	8004574 <MX_TIM4_Init>
  MX_SPI1_Init();
 800413c:	f000 f9e4 	bl	8004508 <MX_SPI1_Init>
  MX_DAC_Init();
 8004140:	f000 f92e 	bl	80043a0 <MX_DAC_Init>
  MX_I2C1_Init();
 8004144:	f000 f956 	bl	80043f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8004148:	f000 f9b0 	bl	80044ac <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac,DAC_CHANNEL_2);
 800414c:	2110      	movs	r1, #16
 800414e:	481d      	ldr	r0, [pc, #116]	; (80041c4 <main+0xb0>)
 8004150:	f001 ff45 	bl	8005fde <HAL_DAC_Start>

  	  	HAL_UART_Receive_IT(&huart2, receiveUART, sizeReceiveUART);
 8004154:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <main+0xb4>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	491c      	ldr	r1, [pc, #112]	; (80041cc <main+0xb8>)
 800415c:	481c      	ldr	r0, [pc, #112]	; (80041d0 <main+0xbc>)
 800415e:	f007 f953 	bl	800b408 <HAL_UART_Receive_IT>
    	fresult = f_mount(&FatFs, "", 1);
 8004162:	2201      	movs	r2, #1
 8004164:	491b      	ldr	r1, [pc, #108]	; (80041d4 <main+0xc0>)
 8004166:	481c      	ldr	r0, [pc, #112]	; (80041d8 <main+0xc4>)
 8004168:	f7fe ff8e 	bl	8003088 <f_mount>
 800416c:	4603      	mov	r3, r0
 800416e:	461a      	mov	r2, r3
 8004170:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <main+0xc8>)
 8004172:	701a      	strb	r2, [r3, #0]
    	read_song();
 8004174:	f7ff fc9c 	bl	8003ab0 <read_song>
        fresult = f_open(&file, &utwor , FA_READ|FA_OPEN_EXISTING|FA_OPEN_ALWAYS);
 8004178:	2211      	movs	r2, #17
 800417a:	4919      	ldr	r1, [pc, #100]	; (80041e0 <main+0xcc>)
 800417c:	4819      	ldr	r0, [pc, #100]	; (80041e4 <main+0xd0>)
 800417e:	f7fe ffc3 	bl	8003108 <f_open>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <main+0xc8>)
 8004188:	701a      	strb	r2, [r3, #0]
        fresult = f_read(&file, &buf2, 352, &bytes_read);
 800418a:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <main+0xd4>)
 800418c:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8004190:	4916      	ldr	r1, [pc, #88]	; (80041ec <main+0xd8>)
 8004192:	4814      	ldr	r0, [pc, #80]	; (80041e4 <main+0xd0>)
 8004194:	f7ff f93b 	bl	800340e <f_read>
 8004198:	4603      	mov	r3, r0
 800419a:	461a      	mov	r2, r3
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <main+0xc8>)
 800419e:	701a      	strb	r2, [r3, #0]

        f_read(&file, &buf,BUFSIZE, &bytes_read);
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <main+0xd4>)
 80041a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041a6:	4912      	ldr	r1, [pc, #72]	; (80041f0 <main+0xdc>)
 80041a8:	480e      	ldr	r0, [pc, #56]	; (80041e4 <main+0xd0>)
 80041aa:	f7ff f930 	bl	800340e <f_read>
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 1);
 80041ae:	2201      	movs	r2, #1
 80041b0:	4910      	ldr	r1, [pc, #64]	; (80041f4 <main+0xe0>)
 80041b2:	4811      	ldr	r0, [pc, #68]	; (80041f8 <main+0xe4>)
 80041b4:	f001 fa26 	bl	8005604 <HAL_ADC_Start_DMA>

        lcd_init();
 80041b8:	f7ff fc0a 	bl	80039d0 <lcd_init>
        lcd_clear();
 80041bc:	f7ff fbf2 	bl	80039a4 <lcd_clear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80041c0:	e7fe      	b.n	80041c0 <main+0xac>
 80041c2:	bf00      	nop
 80041c4:	20000b4c 	.word	0x20000b4c
 80041c8:	20000002 	.word	0x20000002
 80041cc:	20000c00 	.word	0x20000c00
 80041d0:	2000108c 	.word	0x2000108c
 80041d4:	0800c9a4 	.word	0x0800c9a4
 80041d8:	20000100 	.word	0x20000100
 80041dc:	20001030 	.word	0x20001030
 80041e0:	2000045c 	.word	0x2000045c
 80041e4:	200004d4 	.word	0x200004d4
 80041e8:	20000744 	.word	0x20000744
 80041ec:	20000748 	.word	0x20000748
 80041f0:	20000c30 	.word	0x20000c30
 80041f4:	20001118 	.word	0x20001118
 80041f8:	200006fc 	.word	0x200006fc

080041fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b098      	sub	sp, #96	; 0x60
 8004200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004206:	2230      	movs	r2, #48	; 0x30
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f007 ff2e 	bl	800c06c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004210:	f107 031c 	add.w	r3, r7, #28
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004220:	f107 030c 	add.w	r3, r7, #12
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <SystemClock_Config+0xf8>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	4a2f      	ldr	r2, [pc, #188]	; (80042f4 <SystemClock_Config+0xf8>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	; 0x40
 800423e:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <SystemClock_Config+0xf8>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800424a:	2300      	movs	r3, #0
 800424c:	607b      	str	r3, [r7, #4]
 800424e:	4b2a      	ldr	r3, [pc, #168]	; (80042f8 <SystemClock_Config+0xfc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a29      	ldr	r2, [pc, #164]	; (80042f8 <SystemClock_Config+0xfc>)
 8004254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <SystemClock_Config+0xfc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004262:	607b      	str	r3, [r7, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004266:	2301      	movs	r3, #1
 8004268:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800426a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800426e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004270:	2302      	movs	r3, #2
 8004272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004274:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004278:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800427a:	2304      	movs	r3, #4
 800427c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800427e:	23a8      	movs	r3, #168	; 0xa8
 8004280:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004282:	2302      	movs	r3, #2
 8004284:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004286:	2303      	movs	r3, #3
 8004288:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800428a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800428e:	4618      	mov	r0, r3
 8004290:	f005 fa68 	bl	8009764 <HAL_RCC_OscConfig>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800429a:	f000 fadf 	bl	800485c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800429e:	230f      	movs	r3, #15
 80042a0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042a2:	2302      	movs	r3, #2
 80042a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042a6:	2300      	movs	r3, #0
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80042aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80042b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80042b6:	f107 031c 	add.w	r3, r7, #28
 80042ba:	2105      	movs	r1, #5
 80042bc:	4618      	mov	r0, r3
 80042be:	f005 fcc1 	bl	8009c44 <HAL_RCC_ClockConfig>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80042c8:	f000 fac8 	bl	800485c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80042cc:	2301      	movs	r3, #1
 80042ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80042d0:	23c0      	movs	r3, #192	; 0xc0
 80042d2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80042d4:	2302      	movs	r3, #2
 80042d6:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042d8:	f107 030c 	add.w	r3, r7, #12
 80042dc:	4618      	mov	r0, r3
 80042de:	f005 fea3 	bl	800a028 <HAL_RCCEx_PeriphCLKConfig>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80042e8:	f000 fab8 	bl	800485c <Error_Handler>
  }
}
 80042ec:	bf00      	nop
 80042ee:	3760      	adds	r7, #96	; 0x60
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40007000 	.word	0x40007000

080042fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004302:	463b      	mov	r3, r7
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	605a      	str	r2, [r3, #4]
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800430e:	4b21      	ldr	r3, [pc, #132]	; (8004394 <MX_ADC1_Init+0x98>)
 8004310:	4a21      	ldr	r2, [pc, #132]	; (8004398 <MX_ADC1_Init+0x9c>)
 8004312:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8004314:	4b1f      	ldr	r3, [pc, #124]	; (8004394 <MX_ADC1_Init+0x98>)
 8004316:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800431a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800431c:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <MX_ADC1_Init+0x98>)
 800431e:	2200      	movs	r2, #0
 8004320:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004322:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <MX_ADC1_Init+0x98>)
 8004324:	2200      	movs	r2, #0
 8004326:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004328:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <MX_ADC1_Init+0x98>)
 800432a:	2201      	movs	r2, #1
 800432c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800432e:	4b19      	ldr	r3, [pc, #100]	; (8004394 <MX_ADC1_Init+0x98>)
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004336:	4b17      	ldr	r3, [pc, #92]	; (8004394 <MX_ADC1_Init+0x98>)
 8004338:	2200      	movs	r2, #0
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800433c:	4b15      	ldr	r3, [pc, #84]	; (8004394 <MX_ADC1_Init+0x98>)
 800433e:	4a17      	ldr	r2, [pc, #92]	; (800439c <MX_ADC1_Init+0xa0>)
 8004340:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004342:	4b14      	ldr	r3, [pc, #80]	; (8004394 <MX_ADC1_Init+0x98>)
 8004344:	2200      	movs	r2, #0
 8004346:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004348:	4b12      	ldr	r3, [pc, #72]	; (8004394 <MX_ADC1_Init+0x98>)
 800434a:	2201      	movs	r2, #1
 800434c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800434e:	4b11      	ldr	r3, [pc, #68]	; (8004394 <MX_ADC1_Init+0x98>)
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004356:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <MX_ADC1_Init+0x98>)
 8004358:	2201      	movs	r2, #1
 800435a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800435c:	480d      	ldr	r0, [pc, #52]	; (8004394 <MX_ADC1_Init+0x98>)
 800435e:	f000 ffcd 	bl	80052fc <HAL_ADC_Init>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004368:	f000 fa78 	bl	800485c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800436c:	2303      	movs	r3, #3
 800436e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004370:	2301      	movs	r3, #1
 8004372:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004374:	2303      	movs	r3, #3
 8004376:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004378:	463b      	mov	r3, r7
 800437a:	4619      	mov	r1, r3
 800437c:	4805      	ldr	r0, [pc, #20]	; (8004394 <MX_ADC1_Init+0x98>)
 800437e:	f001 fa51 	bl	8005824 <HAL_ADC_ConfigChannel>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004388:	f000 fa68 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	200006fc 	.word	0x200006fc
 8004398:	40012000 	.word	0x40012000
 800439c:	0f000001 	.word	0x0f000001

080043a0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80043a6:	463b      	mov	r3, r7
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <MX_DAC_Init+0x4c>)
 80043b0:	4a0f      	ldr	r2, [pc, #60]	; (80043f0 <MX_DAC_Init+0x50>)
 80043b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80043b4:	480d      	ldr	r0, [pc, #52]	; (80043ec <MX_DAC_Init+0x4c>)
 80043b6:	f001 fdf0 	bl	8005f9a <HAL_DAC_Init>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80043c0:	f000 fa4c 	bl	800485c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80043c4:	2300      	movs	r3, #0
 80043c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80043c8:	2300      	movs	r3, #0
 80043ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80043cc:	463b      	mov	r3, r7
 80043ce:	2210      	movs	r2, #16
 80043d0:	4619      	mov	r1, r3
 80043d2:	4806      	ldr	r0, [pc, #24]	; (80043ec <MX_DAC_Init+0x4c>)
 80043d4:	f001 febd 	bl	8006152 <HAL_DAC_ConfigChannel>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80043de:	f000 fa3d 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000b4c 	.word	0x20000b4c
 80043f0:	40007400 	.word	0x40007400

080043f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80043f8:	4b12      	ldr	r3, [pc, #72]	; (8004444 <MX_I2C1_Init+0x50>)
 80043fa:	4a13      	ldr	r2, [pc, #76]	; (8004448 <MX_I2C1_Init+0x54>)
 80043fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80043fe:	4b11      	ldr	r3, [pc, #68]	; (8004444 <MX_I2C1_Init+0x50>)
 8004400:	4a12      	ldr	r2, [pc, #72]	; (800444c <MX_I2C1_Init+0x58>)
 8004402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004404:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <MX_I2C1_Init+0x50>)
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <MX_I2C1_Init+0x50>)
 800440c:	2200      	movs	r2, #0
 800440e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <MX_I2C1_Init+0x50>)
 8004412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004416:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <MX_I2C1_Init+0x50>)
 800441a:	2200      	movs	r2, #0
 800441c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <MX_I2C1_Init+0x50>)
 8004420:	2200      	movs	r2, #0
 8004422:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004424:	4b07      	ldr	r3, [pc, #28]	; (8004444 <MX_I2C1_Init+0x50>)
 8004426:	2200      	movs	r2, #0
 8004428:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <MX_I2C1_Init+0x50>)
 800442c:	2200      	movs	r2, #0
 800442e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004430:	4804      	ldr	r0, [pc, #16]	; (8004444 <MX_I2C1_Init+0x50>)
 8004432:	f002 fca7 	bl	8006d84 <HAL_I2C_Init>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800443c:	f000 fa0e 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004440:	bf00      	nop
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000408 	.word	0x20000408
 8004448:	40005400 	.word	0x40005400
 800444c:	000186a0 	.word	0x000186a0

08004450 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004454:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <MX_I2C3_Init+0x50>)
 8004456:	4a13      	ldr	r2, [pc, #76]	; (80044a4 <MX_I2C3_Init+0x54>)
 8004458:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800445a:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <MX_I2C3_Init+0x50>)
 800445c:	4a12      	ldr	r2, [pc, #72]	; (80044a8 <MX_I2C3_Init+0x58>)
 800445e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <MX_I2C3_Init+0x50>)
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004466:	4b0e      	ldr	r3, [pc, #56]	; (80044a0 <MX_I2C3_Init+0x50>)
 8004468:	2200      	movs	r2, #0
 800446a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <MX_I2C3_Init+0x50>)
 800446e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004472:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <MX_I2C3_Init+0x50>)
 8004476:	2200      	movs	r2, #0
 8004478:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <MX_I2C3_Init+0x50>)
 800447c:	2200      	movs	r2, #0
 800447e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <MX_I2C3_Init+0x50>)
 8004482:	2200      	movs	r2, #0
 8004484:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <MX_I2C3_Init+0x50>)
 8004488:	2200      	movs	r2, #0
 800448a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800448c:	4804      	ldr	r0, [pc, #16]	; (80044a0 <MX_I2C3_Init+0x50>)
 800448e:	f002 fc79 	bl	8006d84 <HAL_I2C_Init>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004498:	f000 f9e0 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800449c:	bf00      	nop
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000368 	.word	0x20000368
 80044a4:	40005c00 	.word	0x40005c00
 80044a8:	000186a0 	.word	0x000186a0

080044ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80044b0:	4b13      	ldr	r3, [pc, #76]	; (8004500 <MX_I2S3_Init+0x54>)
 80044b2:	4a14      	ldr	r2, [pc, #80]	; (8004504 <MX_I2S3_Init+0x58>)
 80044b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <MX_I2S3_Init+0x54>)
 80044b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80044be:	4b10      	ldr	r3, [pc, #64]	; (8004500 <MX_I2S3_Init+0x54>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80044c4:	4b0e      	ldr	r3, [pc, #56]	; (8004500 <MX_I2S3_Init+0x54>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <MX_I2S3_Init+0x54>)
 80044cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <MX_I2S3_Init+0x54>)
 80044d4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80044d8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80044da:	4b09      	ldr	r3, [pc, #36]	; (8004500 <MX_I2S3_Init+0x54>)
 80044dc:	2200      	movs	r2, #0
 80044de:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80044e0:	4b07      	ldr	r3, [pc, #28]	; (8004500 <MX_I2S3_Init+0x54>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <MX_I2S3_Init+0x54>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80044ec:	4804      	ldr	r0, [pc, #16]	; (8004500 <MX_I2S3_Init+0x54>)
 80044ee:	f004 fc99 	bl	8008e24 <HAL_I2S_Init>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80044f8:	f000 f9b0 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80044fc:	bf00      	nop
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	200010d0 	.word	0x200010d0
 8004504:	40003c00 	.word	0x40003c00

08004508 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800450c:	4b17      	ldr	r3, [pc, #92]	; (800456c <MX_SPI1_Init+0x64>)
 800450e:	4a18      	ldr	r2, [pc, #96]	; (8004570 <MX_SPI1_Init+0x68>)
 8004510:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004512:	4b16      	ldr	r3, [pc, #88]	; (800456c <MX_SPI1_Init+0x64>)
 8004514:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004518:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <MX_SPI1_Init+0x64>)
 800451c:	2200      	movs	r2, #0
 800451e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004520:	4b12      	ldr	r3, [pc, #72]	; (800456c <MX_SPI1_Init+0x64>)
 8004522:	2200      	movs	r2, #0
 8004524:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <MX_SPI1_Init+0x64>)
 8004528:	2200      	movs	r2, #0
 800452a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <MX_SPI1_Init+0x64>)
 800452e:	2200      	movs	r2, #0
 8004530:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004532:	4b0e      	ldr	r3, [pc, #56]	; (800456c <MX_SPI1_Init+0x64>)
 8004534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004538:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800453a:	4b0c      	ldr	r3, [pc, #48]	; (800456c <MX_SPI1_Init+0x64>)
 800453c:	2218      	movs	r2, #24
 800453e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <MX_SPI1_Init+0x64>)
 8004542:	2200      	movs	r2, #0
 8004544:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <MX_SPI1_Init+0x64>)
 8004548:	2200      	movs	r2, #0
 800454a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800454c:	4b07      	ldr	r3, [pc, #28]	; (800456c <MX_SPI1_Init+0x64>)
 800454e:	2200      	movs	r2, #0
 8004550:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <MX_SPI1_Init+0x64>)
 8004554:	220a      	movs	r2, #10
 8004556:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004558:	4804      	ldr	r0, [pc, #16]	; (800456c <MX_SPI1_Init+0x64>)
 800455a:	f005 fea3 	bl	800a2a4 <HAL_SPI_Init>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004564:	f000 f97a 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004568:	bf00      	nop
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20001034 	.word	0x20001034
 8004570:	40013000 	.word	0x40013000

08004574 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800457a:	f107 0308 	add.w	r3, r7, #8
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	609a      	str	r2, [r3, #8]
 8004586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004588:	463b      	mov	r3, r7
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004590:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <MX_TIM4_Init+0x90>)
 8004592:	4a1d      	ldr	r2, [pc, #116]	; (8004608 <MX_TIM4_Init+0x94>)
 8004594:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 126;
 8004596:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <MX_TIM4_Init+0x90>)
 8004598:	227e      	movs	r2, #126	; 0x7e
 800459a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800459c:	4b19      	ldr	r3, [pc, #100]	; (8004604 <MX_TIM4_Init+0x90>)
 800459e:	2200      	movs	r2, #0
 80045a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 14;
 80045a2:	4b18      	ldr	r3, [pc, #96]	; (8004604 <MX_TIM4_Init+0x90>)
 80045a4:	220e      	movs	r2, #14
 80045a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045a8:	4b16      	ldr	r3, [pc, #88]	; (8004604 <MX_TIM4_Init+0x90>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ae:	4b15      	ldr	r3, [pc, #84]	; (8004604 <MX_TIM4_Init+0x90>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80045b4:	4813      	ldr	r0, [pc, #76]	; (8004604 <MX_TIM4_Init+0x90>)
 80045b6:	f006 fa69 	bl	800aa8c <HAL_TIM_Base_Init>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80045c0:	f000 f94c 	bl	800485c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80045ca:	f107 0308 	add.w	r3, r7, #8
 80045ce:	4619      	mov	r1, r3
 80045d0:	480c      	ldr	r0, [pc, #48]	; (8004604 <MX_TIM4_Init+0x90>)
 80045d2:	f006 fbdd 	bl	800ad90 <HAL_TIM_ConfigClockSource>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80045dc:	f000 f93e 	bl	800485c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045e0:	2300      	movs	r3, #0
 80045e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80045e8:	463b      	mov	r3, r7
 80045ea:	4619      	mov	r1, r3
 80045ec:	4805      	ldr	r0, [pc, #20]	; (8004604 <MX_TIM4_Init+0x90>)
 80045ee:	f006 fde9 	bl	800b1c4 <HAL_TIMEx_MasterConfigSynchronization>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80045f8:	f000 f930 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80045fc:	bf00      	nop
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	200003bc 	.word	0x200003bc
 8004608:	40000800 	.word	0x40000800

0800460c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004612:	463b      	mov	r3, r7
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800461a:	4b14      	ldr	r3, [pc, #80]	; (800466c <MX_TIM6_Init+0x60>)
 800461c:	4a14      	ldr	r2, [pc, #80]	; (8004670 <MX_TIM6_Init+0x64>)
 800461e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 126;
 8004620:	4b12      	ldr	r3, [pc, #72]	; (800466c <MX_TIM6_Init+0x60>)
 8004622:	227e      	movs	r2, #126	; 0x7e
 8004624:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004626:	4b11      	ldr	r3, [pc, #68]	; (800466c <MX_TIM6_Init+0x60>)
 8004628:	2200      	movs	r2, #0
 800462a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 114;
 800462c:	4b0f      	ldr	r3, [pc, #60]	; (800466c <MX_TIM6_Init+0x60>)
 800462e:	2272      	movs	r2, #114	; 0x72
 8004630:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004632:	4b0e      	ldr	r3, [pc, #56]	; (800466c <MX_TIM6_Init+0x60>)
 8004634:	2200      	movs	r2, #0
 8004636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004638:	480c      	ldr	r0, [pc, #48]	; (800466c <MX_TIM6_Init+0x60>)
 800463a:	f006 fa27 	bl	800aa8c <HAL_TIM_Base_Init>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8004644:	f000 f90a 	bl	800485c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004648:	2320      	movs	r3, #32
 800464a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800464c:	2300      	movs	r3, #0
 800464e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004650:	463b      	mov	r3, r7
 8004652:	4619      	mov	r1, r3
 8004654:	4805      	ldr	r0, [pc, #20]	; (800466c <MX_TIM6_Init+0x60>)
 8004656:	f006 fdb5 	bl	800b1c4 <HAL_TIMEx_MasterConfigSynchronization>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8004660:	f000 f8fc 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20000bc0 	.word	0x20000bc0
 8004670:	40001000 	.word	0x40001000

08004674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <MX_USART2_UART_Init+0x4c>)
 800467a:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <MX_USART2_UART_Init+0x50>)
 800467c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800467e:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <MX_USART2_UART_Init+0x4c>)
 8004680:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <MX_USART2_UART_Init+0x4c>)
 8004688:	2200      	movs	r2, #0
 800468a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800468c:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <MX_USART2_UART_Init+0x4c>)
 800468e:	2200      	movs	r2, #0
 8004690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <MX_USART2_UART_Init+0x4c>)
 8004694:	2200      	movs	r2, #0
 8004696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004698:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <MX_USART2_UART_Init+0x4c>)
 800469a:	220c      	movs	r2, #12
 800469c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800469e:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <MX_USART2_UART_Init+0x4c>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <MX_USART2_UART_Init+0x4c>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046aa:	4805      	ldr	r0, [pc, #20]	; (80046c0 <MX_USART2_UART_Init+0x4c>)
 80046ac:	f006 fe1a 	bl	800b2e4 <HAL_UART_Init>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80046b6:	f000 f8d1 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	2000108c 	.word	0x2000108c
 80046c4:	40004400 	.word	0x40004400

080046c8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80046ce:	2300      	movs	r3, #0
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	4b17      	ldr	r3, [pc, #92]	; (8004730 <MX_DMA_Init+0x68>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	4a16      	ldr	r2, [pc, #88]	; (8004730 <MX_DMA_Init+0x68>)
 80046d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046dc:	6313      	str	r3, [r2, #48]	; 0x30
 80046de:	4b14      	ldr	r3, [pc, #80]	; (8004730 <MX_DMA_Init+0x68>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e6:	607b      	str	r3, [r7, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80046ea:	2300      	movs	r3, #0
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	4b10      	ldr	r3, [pc, #64]	; (8004730 <MX_DMA_Init+0x68>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	4a0f      	ldr	r2, [pc, #60]	; (8004730 <MX_DMA_Init+0x68>)
 80046f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046f8:	6313      	str	r3, [r2, #48]	; 0x30
 80046fa:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <MX_DMA_Init+0x68>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004706:	2200      	movs	r2, #0
 8004708:	2100      	movs	r1, #0
 800470a:	2010      	movs	r0, #16
 800470c:	f001 fc0f 	bl	8005f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004710:	2010      	movs	r0, #16
 8004712:	f001 fc28 	bl	8005f66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004716:	2200      	movs	r2, #0
 8004718:	2100      	movs	r1, #0
 800471a:	2038      	movs	r0, #56	; 0x38
 800471c:	f001 fc07 	bl	8005f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004720:	2038      	movs	r0, #56	; 0x38
 8004722:	f001 fc20 	bl	8005f66 <HAL_NVIC_EnableIRQ>

}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40023800 	.word	0x40023800

08004734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	; 0x28
 8004738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800473a:	f107 0314 	add.w	r3, r7, #20
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	605a      	str	r2, [r3, #4]
 8004744:	609a      	str	r2, [r3, #8]
 8004746:	60da      	str	r2, [r3, #12]
 8004748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	4b3f      	ldr	r3, [pc, #252]	; (800484c <MX_GPIO_Init+0x118>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	4a3e      	ldr	r2, [pc, #248]	; (800484c <MX_GPIO_Init+0x118>)
 8004754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004758:	6313      	str	r3, [r2, #48]	; 0x30
 800475a:	4b3c      	ldr	r3, [pc, #240]	; (800484c <MX_GPIO_Init+0x118>)
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	4b38      	ldr	r3, [pc, #224]	; (800484c <MX_GPIO_Init+0x118>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	4a37      	ldr	r2, [pc, #220]	; (800484c <MX_GPIO_Init+0x118>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	6313      	str	r3, [r2, #48]	; 0x30
 8004776:	4b35      	ldr	r3, [pc, #212]	; (800484c <MX_GPIO_Init+0x118>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004782:	2300      	movs	r3, #0
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	4b31      	ldr	r3, [pc, #196]	; (800484c <MX_GPIO_Init+0x118>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	4a30      	ldr	r2, [pc, #192]	; (800484c <MX_GPIO_Init+0x118>)
 800478c:	f043 0302 	orr.w	r3, r3, #2
 8004790:	6313      	str	r3, [r2, #48]	; 0x30
 8004792:	4b2e      	ldr	r3, [pc, #184]	; (800484c <MX_GPIO_Init+0x118>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	4b2a      	ldr	r3, [pc, #168]	; (800484c <MX_GPIO_Init+0x118>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	4a29      	ldr	r2, [pc, #164]	; (800484c <MX_GPIO_Init+0x118>)
 80047a8:	f043 0308 	orr.w	r3, r3, #8
 80047ac:	6313      	str	r3, [r2, #48]	; 0x30
 80047ae:	4b27      	ldr	r3, [pc, #156]	; (800484c <MX_GPIO_Init+0x118>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	607b      	str	r3, [r7, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	4b23      	ldr	r3, [pc, #140]	; (800484c <MX_GPIO_Init+0x118>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	4a22      	ldr	r2, [pc, #136]	; (800484c <MX_GPIO_Init+0x118>)
 80047c4:	f043 0304 	orr.w	r3, r3, #4
 80047c8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ca:	4b20      	ldr	r3, [pc, #128]	; (800484c <MX_GPIO_Init+0x118>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80047d6:	2200      	movs	r2, #0
 80047d8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80047dc:	481c      	ldr	r0, [pc, #112]	; (8004850 <MX_GPIO_Init+0x11c>)
 80047de:	f002 fa85 	bl	8006cec <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 80047e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80047e8:	4b1a      	ldr	r3, [pc, #104]	; (8004854 <MX_GPIO_Init+0x120>)
 80047ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ec:	2301      	movs	r3, #1
 80047ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047f0:	f107 0314 	add.w	r3, r7, #20
 80047f4:	4619      	mov	r1, r3
 80047f6:	4818      	ldr	r0, [pc, #96]	; (8004858 <MX_GPIO_Init+0x124>)
 80047f8:	f002 f8c6 	bl	8006988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80047fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004802:	2300      	movs	r3, #0
 8004804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800480a:	f107 0314 	add.w	r3, r7, #20
 800480e:	4619      	mov	r1, r3
 8004810:	480f      	ldr	r0, [pc, #60]	; (8004850 <MX_GPIO_Init+0x11c>)
 8004812:	f002 f8b9 	bl	8006988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8004816:	f24f 0310 	movw	r3, #61456	; 0xf010
 800481a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800481c:	2301      	movs	r3, #1
 800481e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004824:	2300      	movs	r3, #0
 8004826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004828:	f107 0314 	add.w	r3, r7, #20
 800482c:	4619      	mov	r1, r3
 800482e:	4808      	ldr	r0, [pc, #32]	; (8004850 <MX_GPIO_Init+0x11c>)
 8004830:	f002 f8aa 	bl	8006988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8004834:	2200      	movs	r2, #0
 8004836:	2101      	movs	r1, #1
 8004838:	2028      	movs	r0, #40	; 0x28
 800483a:	f001 fb78 	bl	8005f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800483e:	2028      	movs	r0, #40	; 0x28
 8004840:	f001 fb91 	bl	8005f66 <HAL_NVIC_EnableIRQ>

}
 8004844:	bf00      	nop
 8004846:	3728      	adds	r7, #40	; 0x28
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40023800 	.word	0x40023800
 8004850:	40020c00 	.word	0x40020c00
 8004854:	10310000 	.word	0x10310000
 8004858:	40020400 	.word	0x40020400

0800485c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004860:	bf00      	nop
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004872:	2300      	movs	r3, #0
 8004874:	607b      	str	r3, [r7, #4]
 8004876:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <HAL_MspInit+0x4c>)
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	4a0f      	ldr	r2, [pc, #60]	; (80048b8 <HAL_MspInit+0x4c>)
 800487c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004880:	6453      	str	r3, [r2, #68]	; 0x44
 8004882:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <HAL_MspInit+0x4c>)
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800488a:	607b      	str	r3, [r7, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800488e:	2300      	movs	r3, #0
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <HAL_MspInit+0x4c>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	4a08      	ldr	r2, [pc, #32]	; (80048b8 <HAL_MspInit+0x4c>)
 8004898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489c:	6413      	str	r3, [r2, #64]	; 0x40
 800489e:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <HAL_MspInit+0x4c>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40023800 	.word	0x40023800

080048bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	; 0x28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c4:	f107 0314 	add.w	r3, r7, #20
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	60da      	str	r2, [r3, #12]
 80048d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a33      	ldr	r2, [pc, #204]	; (80049a8 <HAL_ADC_MspInit+0xec>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d15f      	bne.n	800499e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	4b32      	ldr	r3, [pc, #200]	; (80049ac <HAL_ADC_MspInit+0xf0>)
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	4a31      	ldr	r2, [pc, #196]	; (80049ac <HAL_ADC_MspInit+0xf0>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	6453      	str	r3, [r2, #68]	; 0x44
 80048ee:	4b2f      	ldr	r3, [pc, #188]	; (80049ac <HAL_ADC_MspInit+0xf0>)
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	4b2b      	ldr	r3, [pc, #172]	; (80049ac <HAL_ADC_MspInit+0xf0>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	4a2a      	ldr	r2, [pc, #168]	; (80049ac <HAL_ADC_MspInit+0xf0>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	6313      	str	r3, [r2, #48]	; 0x30
 800490a:	4b28      	ldr	r3, [pc, #160]	; (80049ac <HAL_ADC_MspInit+0xf0>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004916:	2308      	movs	r3, #8
 8004918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800491a:	2303      	movs	r3, #3
 800491c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004922:	f107 0314 	add.w	r3, r7, #20
 8004926:	4619      	mov	r1, r3
 8004928:	4821      	ldr	r0, [pc, #132]	; (80049b0 <HAL_ADC_MspInit+0xf4>)
 800492a:	f002 f82d 	bl	8006988 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800492e:	4b21      	ldr	r3, [pc, #132]	; (80049b4 <HAL_ADC_MspInit+0xf8>)
 8004930:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <HAL_ADC_MspInit+0xfc>)
 8004932:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004934:	4b1f      	ldr	r3, [pc, #124]	; (80049b4 <HAL_ADC_MspInit+0xf8>)
 8004936:	2200      	movs	r2, #0
 8004938:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800493a:	4b1e      	ldr	r3, [pc, #120]	; (80049b4 <HAL_ADC_MspInit+0xf8>)
 800493c:	2200      	movs	r2, #0
 800493e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004940:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <HAL_ADC_MspInit+0xf8>)
 8004942:	2200      	movs	r2, #0
 8004944:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004946:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <HAL_ADC_MspInit+0xf8>)
 8004948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800494c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800494e:	4b19      	ldr	r3, [pc, #100]	; (80049b4 <HAL_ADC_MspInit+0xf8>)
 8004950:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004954:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004956:	4b17      	ldr	r3, [pc, #92]	; (80049b4 <HAL_ADC_MspInit+0xf8>)
 8004958:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800495c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800495e:	4b15      	ldr	r3, [pc, #84]	; (80049b4 <HAL_ADC_MspInit+0xf8>)
 8004960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004964:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004966:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <HAL_ADC_MspInit+0xf8>)
 8004968:	2200      	movs	r2, #0
 800496a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800496c:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <HAL_ADC_MspInit+0xf8>)
 800496e:	2200      	movs	r2, #0
 8004970:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004972:	4810      	ldr	r0, [pc, #64]	; (80049b4 <HAL_ADC_MspInit+0xf8>)
 8004974:	f001 fc6a 	bl	800624c <HAL_DMA_Init>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800497e:	f7ff ff6d 	bl	800485c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a0b      	ldr	r2, [pc, #44]	; (80049b4 <HAL_ADC_MspInit+0xf8>)
 8004986:	639a      	str	r2, [r3, #56]	; 0x38
 8004988:	4a0a      	ldr	r2, [pc, #40]	; (80049b4 <HAL_ADC_MspInit+0xf8>)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800498e:	2200      	movs	r2, #0
 8004990:	2100      	movs	r1, #0
 8004992:	2012      	movs	r0, #18
 8004994:	f001 facb 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004998:	2012      	movs	r0, #18
 800499a:	f001 fae4 	bl	8005f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800499e:	bf00      	nop
 80049a0:	3728      	adds	r7, #40	; 0x28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40012000 	.word	0x40012000
 80049ac:	40023800 	.word	0x40023800
 80049b0:	40020000 	.word	0x40020000
 80049b4:	20000b60 	.word	0x20000b60
 80049b8:	40026410 	.word	0x40026410

080049bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08a      	sub	sp, #40	; 0x28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c4:	f107 0314 	add.w	r3, r7, #20
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	609a      	str	r2, [r3, #8]
 80049d0:	60da      	str	r2, [r3, #12]
 80049d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1b      	ldr	r2, [pc, #108]	; (8004a48 <HAL_DAC_MspInit+0x8c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d12f      	bne.n	8004a3e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80049de:	2300      	movs	r3, #0
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <HAL_DAC_MspInit+0x90>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	4a19      	ldr	r2, [pc, #100]	; (8004a4c <HAL_DAC_MspInit+0x90>)
 80049e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049ec:	6413      	str	r3, [r2, #64]	; 0x40
 80049ee:	4b17      	ldr	r3, [pc, #92]	; (8004a4c <HAL_DAC_MspInit+0x90>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <HAL_DAC_MspInit+0x90>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <HAL_DAC_MspInit+0x90>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6313      	str	r3, [r2, #48]	; 0x30
 8004a0a:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <HAL_DAC_MspInit+0x90>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004a16:	2320      	movs	r3, #32
 8004a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a22:	f107 0314 	add.w	r3, r7, #20
 8004a26:	4619      	mov	r1, r3
 8004a28:	4809      	ldr	r0, [pc, #36]	; (8004a50 <HAL_DAC_MspInit+0x94>)
 8004a2a:	f001 ffad 	bl	8006988 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2100      	movs	r1, #0
 8004a32:	2036      	movs	r0, #54	; 0x36
 8004a34:	f001 fa7b 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a38:	2036      	movs	r0, #54	; 0x36
 8004a3a:	f001 fa94 	bl	8005f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004a3e:	bf00      	nop
 8004a40:	3728      	adds	r7, #40	; 0x28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40007400 	.word	0x40007400
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	40020000 	.word	0x40020000

08004a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08c      	sub	sp, #48	; 0x30
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5c:	f107 031c 	add.w	r3, r7, #28
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	605a      	str	r2, [r3, #4]
 8004a66:	609a      	str	r2, [r3, #8]
 8004a68:	60da      	str	r2, [r3, #12]
 8004a6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a4a      	ldr	r2, [pc, #296]	; (8004b9c <HAL_I2C_MspInit+0x148>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d12d      	bne.n	8004ad2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	4b49      	ldr	r3, [pc, #292]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	4a48      	ldr	r2, [pc, #288]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004a80:	f043 0302 	orr.w	r3, r3, #2
 8004a84:	6313      	str	r3, [r2, #48]	; 0x30
 8004a86:	4b46      	ldr	r3, [pc, #280]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	61bb      	str	r3, [r7, #24]
 8004a90:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8004a92:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a98:	2312      	movs	r3, #18
 8004a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa8:	f107 031c 	add.w	r3, r7, #28
 8004aac:	4619      	mov	r1, r3
 8004aae:	483d      	ldr	r0, [pc, #244]	; (8004ba4 <HAL_I2C_MspInit+0x150>)
 8004ab0:	f001 ff6a 	bl	8006988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	4b39      	ldr	r3, [pc, #228]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	4a38      	ldr	r2, [pc, #224]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004abe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac4:	4b36      	ldr	r3, [pc, #216]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004ad0:	e060      	b.n	8004b94 <HAL_I2C_MspInit+0x140>
  else if(hi2c->Instance==I2C3)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a34      	ldr	r2, [pc, #208]	; (8004ba8 <HAL_I2C_MspInit+0x154>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d15b      	bne.n	8004b94 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	4b2f      	ldr	r3, [pc, #188]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	4a2e      	ldr	r2, [pc, #184]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004ae6:	f043 0304 	orr.w	r3, r3, #4
 8004aea:	6313      	str	r3, [r2, #48]	; 0x30
 8004aec:	4b2c      	ldr	r3, [pc, #176]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	4b28      	ldr	r3, [pc, #160]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	4a27      	ldr	r2, [pc, #156]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	6313      	str	r3, [r2, #48]	; 0x30
 8004b08:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b1a:	2312      	movs	r3, #18
 8004b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b22:	2303      	movs	r3, #3
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b26:	2304      	movs	r3, #4
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b2a:	f107 031c 	add.w	r3, r7, #28
 8004b2e:	4619      	mov	r1, r3
 8004b30:	481e      	ldr	r0, [pc, #120]	; (8004bac <HAL_I2C_MspInit+0x158>)
 8004b32:	f001 ff29 	bl	8006988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b3c:	2312      	movs	r3, #18
 8004b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b40:	2301      	movs	r3, #1
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b44:	2303      	movs	r3, #3
 8004b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b48:	2304      	movs	r3, #4
 8004b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4c:	f107 031c 	add.w	r3, r7, #28
 8004b50:	4619      	mov	r1, r3
 8004b52:	4817      	ldr	r0, [pc, #92]	; (8004bb0 <HAL_I2C_MspInit+0x15c>)
 8004b54:	f001 ff18 	bl	8006988 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	4a0f      	ldr	r2, [pc, #60]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004b62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b66:	6413      	str	r3, [r2, #64]	; 0x40
 8004b68:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <HAL_I2C_MspInit+0x14c>)
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b70:	60bb      	str	r3, [r7, #8]
 8004b72:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8004b74:	2200      	movs	r2, #0
 8004b76:	2100      	movs	r1, #0
 8004b78:	2048      	movs	r0, #72	; 0x48
 8004b7a:	f001 f9d8 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8004b7e:	2048      	movs	r0, #72	; 0x48
 8004b80:	f001 f9f1 	bl	8005f66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8004b84:	2200      	movs	r2, #0
 8004b86:	2100      	movs	r1, #0
 8004b88:	2049      	movs	r0, #73	; 0x49
 8004b8a:	f001 f9d0 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8004b8e:	2049      	movs	r0, #73	; 0x49
 8004b90:	f001 f9e9 	bl	8005f66 <HAL_NVIC_EnableIRQ>
}
 8004b94:	bf00      	nop
 8004b96:	3730      	adds	r7, #48	; 0x30
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40005400 	.word	0x40005400
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	40020400 	.word	0x40020400
 8004ba8:	40005c00 	.word	0x40005c00
 8004bac:	40020800 	.word	0x40020800
 8004bb0:	40020000 	.word	0x40020000

08004bb4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bbc:	f107 0314 	add.w	r3, r7, #20
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	609a      	str	r2, [r3, #8]
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a40      	ldr	r2, [pc, #256]	; (8004cd4 <HAL_I2S_MspInit+0x120>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d17a      	bne.n	8004ccc <HAL_I2S_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	4b3f      	ldr	r3, [pc, #252]	; (8004cd8 <HAL_I2S_MspInit+0x124>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	4a3e      	ldr	r2, [pc, #248]	; (8004cd8 <HAL_I2S_MspInit+0x124>)
 8004be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be4:	6413      	str	r3, [r2, #64]	; 0x40
 8004be6:	4b3c      	ldr	r3, [pc, #240]	; (8004cd8 <HAL_I2S_MspInit+0x124>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	4b38      	ldr	r3, [pc, #224]	; (8004cd8 <HAL_I2S_MspInit+0x124>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	4a37      	ldr	r2, [pc, #220]	; (8004cd8 <HAL_I2S_MspInit+0x124>)
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	6313      	str	r3, [r2, #48]	; 0x30
 8004c02:	4b35      	ldr	r3, [pc, #212]	; (8004cd8 <HAL_I2S_MspInit+0x124>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	4b31      	ldr	r3, [pc, #196]	; (8004cd8 <HAL_I2S_MspInit+0x124>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	4a30      	ldr	r2, [pc, #192]	; (8004cd8 <HAL_I2S_MspInit+0x124>)
 8004c18:	f043 0304 	orr.w	r3, r3, #4
 8004c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1e:	4b2e      	ldr	r3, [pc, #184]	; (8004cd8 <HAL_I2S_MspInit+0x124>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	60bb      	str	r3, [r7, #8]
 8004c28:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004c2a:	2310      	movs	r3, #16
 8004c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c36:	2300      	movs	r3, #0
 8004c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004c3a:	2306      	movs	r3, #6
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3e:	f107 0314 	add.w	r3, r7, #20
 8004c42:	4619      	mov	r1, r3
 8004c44:	4825      	ldr	r0, [pc, #148]	; (8004cdc <HAL_I2S_MspInit+0x128>)
 8004c46:	f001 fe9f 	bl	8006988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8004c4a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8004c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c50:	2302      	movs	r3, #2
 8004c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004c5c:	2306      	movs	r3, #6
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c60:	f107 0314 	add.w	r3, r7, #20
 8004c64:	4619      	mov	r1, r3
 8004c66:	481e      	ldr	r0, [pc, #120]	; (8004ce0 <HAL_I2S_MspInit+0x12c>)
 8004c68:	f001 fe8e 	bl	8006988 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8004c6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <HAL_I2S_MspInit+0x130>)
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ce8 <HAL_I2S_MspInit+0x134>)
 8004c70:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8004c72:	4b1c      	ldr	r3, [pc, #112]	; (8004ce4 <HAL_I2S_MspInit+0x130>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c78:	4b1a      	ldr	r3, [pc, #104]	; (8004ce4 <HAL_I2S_MspInit+0x130>)
 8004c7a:	2240      	movs	r2, #64	; 0x40
 8004c7c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c7e:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <HAL_I2S_MspInit+0x130>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c84:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <HAL_I2S_MspInit+0x130>)
 8004c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c8a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c8c:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <HAL_I2S_MspInit+0x130>)
 8004c8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c92:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c94:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <HAL_I2S_MspInit+0x130>)
 8004c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c9a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8004c9c:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <HAL_I2S_MspInit+0x130>)
 8004c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ca2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <HAL_I2S_MspInit+0x130>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004caa:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <HAL_I2S_MspInit+0x130>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004cb0:	480c      	ldr	r0, [pc, #48]	; (8004ce4 <HAL_I2S_MspInit+0x130>)
 8004cb2:	f001 facb 	bl	800624c <HAL_DMA_Init>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8004cbc:	f7ff fdce 	bl	800485c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a08      	ldr	r2, [pc, #32]	; (8004ce4 <HAL_I2S_MspInit+0x130>)
 8004cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8004cc6:	4a07      	ldr	r2, [pc, #28]	; (8004ce4 <HAL_I2S_MspInit+0x130>)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004ccc:	bf00      	nop
 8004cce:	3728      	adds	r7, #40	; 0x28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40003c00 	.word	0x40003c00
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40020000 	.word	0x40020000
 8004ce0:	40020800 	.word	0x40020800
 8004ce4:	20000474 	.word	0x20000474
 8004ce8:	40026088 	.word	0x40026088

08004cec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	; 0x28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	605a      	str	r2, [r3, #4]
 8004cfe:	609a      	str	r2, [r3, #8]
 8004d00:	60da      	str	r2, [r3, #12]
 8004d02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a19      	ldr	r2, [pc, #100]	; (8004d70 <HAL_SPI_MspInit+0x84>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d12b      	bne.n	8004d66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	4b18      	ldr	r3, [pc, #96]	; (8004d74 <HAL_SPI_MspInit+0x88>)
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	4a17      	ldr	r2, [pc, #92]	; (8004d74 <HAL_SPI_MspInit+0x88>)
 8004d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d1e:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <HAL_SPI_MspInit+0x88>)
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <HAL_SPI_MspInit+0x88>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	4a10      	ldr	r2, [pc, #64]	; (8004d74 <HAL_SPI_MspInit+0x88>)
 8004d34:	f043 0302 	orr.w	r3, r3, #2
 8004d38:	6313      	str	r3, [r2, #48]	; 0x30
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <HAL_SPI_MspInit+0x88>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004d46:	2338      	movs	r3, #56	; 0x38
 8004d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d52:	2303      	movs	r3, #3
 8004d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d56:	2305      	movs	r3, #5
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d5a:	f107 0314 	add.w	r3, r7, #20
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4805      	ldr	r0, [pc, #20]	; (8004d78 <HAL_SPI_MspInit+0x8c>)
 8004d62:	f001 fe11 	bl	8006988 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004d66:	bf00      	nop
 8004d68:	3728      	adds	r7, #40	; 0x28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40013000 	.word	0x40013000
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40020400 	.word	0x40020400

08004d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1c      	ldr	r2, [pc, #112]	; (8004dfc <HAL_TIM_Base_MspInit+0x80>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d116      	bne.n	8004dbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <HAL_TIM_Base_MspInit+0x84>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	4a1a      	ldr	r2, [pc, #104]	; (8004e00 <HAL_TIM_Base_MspInit+0x84>)
 8004d98:	f043 0304 	orr.w	r3, r3, #4
 8004d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9e:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <HAL_TIM_Base_MspInit+0x84>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8004daa:	2200      	movs	r2, #0
 8004dac:	2101      	movs	r1, #1
 8004dae:	201e      	movs	r0, #30
 8004db0:	f001 f8bd 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004db4:	201e      	movs	r0, #30
 8004db6:	f001 f8d6 	bl	8005f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004dba:	e01a      	b.n	8004df2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a10      	ldr	r2, [pc, #64]	; (8004e04 <HAL_TIM_Base_MspInit+0x88>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d115      	bne.n	8004df2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <HAL_TIM_Base_MspInit+0x84>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	4a0c      	ldr	r2, [pc, #48]	; (8004e00 <HAL_TIM_Base_MspInit+0x84>)
 8004dd0:	f043 0310 	orr.w	r3, r3, #16
 8004dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd6:	4b0a      	ldr	r3, [pc, #40]	; (8004e00 <HAL_TIM_Base_MspInit+0x84>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f003 0310 	and.w	r3, r3, #16
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004de2:	2200      	movs	r2, #0
 8004de4:	2100      	movs	r1, #0
 8004de6:	2036      	movs	r0, #54	; 0x36
 8004de8:	f001 f8a1 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004dec:	2036      	movs	r0, #54	; 0x36
 8004dee:	f001 f8ba 	bl	8005f66 <HAL_NVIC_EnableIRQ>
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40000800 	.word	0x40000800
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40001000 	.word	0x40001000

08004e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e10:	f107 0314 	add.w	r3, r7, #20
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	609a      	str	r2, [r3, #8]
 8004e1c:	60da      	str	r2, [r3, #12]
 8004e1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a2c      	ldr	r2, [pc, #176]	; (8004ed8 <HAL_UART_MspInit+0xd0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d151      	bne.n	8004ece <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	4b2b      	ldr	r3, [pc, #172]	; (8004edc <HAL_UART_MspInit+0xd4>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <HAL_UART_MspInit+0xd4>)
 8004e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e38:	6413      	str	r3, [r2, #64]	; 0x40
 8004e3a:	4b28      	ldr	r3, [pc, #160]	; (8004edc <HAL_UART_MspInit+0xd4>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	4b24      	ldr	r3, [pc, #144]	; (8004edc <HAL_UART_MspInit+0xd4>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	4a23      	ldr	r2, [pc, #140]	; (8004edc <HAL_UART_MspInit+0xd4>)
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	6313      	str	r3, [r2, #48]	; 0x30
 8004e56:	4b21      	ldr	r3, [pc, #132]	; (8004edc <HAL_UART_MspInit+0xd4>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e62:	2300      	movs	r3, #0
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	4b1d      	ldr	r3, [pc, #116]	; (8004edc <HAL_UART_MspInit+0xd4>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	4a1c      	ldr	r2, [pc, #112]	; (8004edc <HAL_UART_MspInit+0xd4>)
 8004e6c:	f043 0308 	orr.w	r3, r3, #8
 8004e70:	6313      	str	r3, [r2, #48]	; 0x30
 8004e72:	4b1a      	ldr	r3, [pc, #104]	; (8004edc <HAL_UART_MspInit+0xd4>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	60bb      	str	r3, [r7, #8]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e7e:	2304      	movs	r3, #4
 8004e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e82:	2302      	movs	r3, #2
 8004e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e8e:	2307      	movs	r3, #7
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e92:	f107 0314 	add.w	r3, r7, #20
 8004e96:	4619      	mov	r1, r3
 8004e98:	4811      	ldr	r0, [pc, #68]	; (8004ee0 <HAL_UART_MspInit+0xd8>)
 8004e9a:	f001 fd75 	bl	8006988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004e9e:	2340      	movs	r3, #64	; 0x40
 8004ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004eae:	2307      	movs	r3, #7
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004eb2:	f107 0314 	add.w	r3, r7, #20
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	480a      	ldr	r0, [pc, #40]	; (8004ee4 <HAL_UART_MspInit+0xdc>)
 8004eba:	f001 fd65 	bl	8006988 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	2026      	movs	r0, #38	; 0x26
 8004ec4:	f001 f833 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004ec8:	2026      	movs	r0, #38	; 0x26
 8004eca:	f001 f84c 	bl	8005f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004ece:	bf00      	nop
 8004ed0:	3728      	adds	r7, #40	; 0x28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40004400 	.word	0x40004400
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	40020000 	.word	0x40020000
 8004ee4:	40020c00 	.word	0x40020c00

08004ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004efa:	e7fe      	b.n	8004efa <HardFault_Handler+0x4>

08004efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f00:	e7fe      	b.n	8004f00 <MemManage_Handler+0x4>

08004f02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f02:	b480      	push	{r7}
 8004f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f06:	e7fe      	b.n	8004f06 <BusFault_Handler+0x4>

08004f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f0c:	e7fe      	b.n	8004f0c <UsageFault_Handler+0x4>

08004f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f12:	bf00      	nop
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f20:	bf00      	nop
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8004f3c:	f7fc fc00 	bl	8001740 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f40:	f000 f99a 	bl	8005278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f44:	bf00      	nop
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8004f4c:	4802      	ldr	r0, [pc, #8]	; (8004f58 <DMA1_Stream5_IRQHandler+0x10>)
 8004f4e:	f001 faa5 	bl	800649c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004f52:	bf00      	nop
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000474 	.word	0x20000474

08004f5c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004f60:	4802      	ldr	r0, [pc, #8]	; (8004f6c <ADC_IRQHandler+0x10>)
 8004f62:	f000 fa0e 	bl	8005382 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004f66:	bf00      	nop
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200006fc 	.word	0x200006fc

08004f70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004f74:	4802      	ldr	r0, [pc, #8]	; (8004f80 <TIM4_IRQHandler+0x10>)
 8004f76:	f005 fe03 	bl	800ab80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004f7a:	bf00      	nop
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	200003bc 	.word	0x200003bc

08004f84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f88:	4802      	ldr	r0, [pc, #8]	; (8004f94 <USART2_IRQHandler+0x10>)
 8004f8a:	f006 fa93 	bl	800b4b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	2000108c 	.word	0x2000108c

08004f98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004f9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004fa0:	f001 fed8 	bl	8006d54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004fa4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004fa8:	f001 fed4 	bl	8006d54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004fac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004fb0:	f001 fed0 	bl	8006d54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004fb4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004fb8:	f001 fecc 	bl	8006d54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004fbc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004fc0:	f001 fec8 	bl	8006d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004fc4:	bf00      	nop
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8004fcc:	4803      	ldr	r0, [pc, #12]	; (8004fdc <TIM6_DAC_IRQHandler+0x14>)
 8004fce:	f001 f86c 	bl	80060aa <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8004fd2:	4803      	ldr	r0, [pc, #12]	; (8004fe0 <TIM6_DAC_IRQHandler+0x18>)
 8004fd4:	f005 fdd4 	bl	800ab80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004fd8:	bf00      	nop
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	20000b4c 	.word	0x20000b4c
 8004fe0:	20000bc0 	.word	0x20000bc0

08004fe4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004fe8:	4802      	ldr	r0, [pc, #8]	; (8004ff4 <DMA2_Stream0_IRQHandler+0x10>)
 8004fea:	f001 fa57 	bl	800649c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004fee:	bf00      	nop
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000b60 	.word	0x20000b60

08004ff8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004ffc:	4802      	ldr	r0, [pc, #8]	; (8005008 <I2C3_EV_IRQHandler+0x10>)
 8004ffe:	f002 f8f7 	bl	80071f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8005002:	bf00      	nop
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000368 	.word	0x20000368

0800500c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8005010:	4802      	ldr	r0, [pc, #8]	; (800501c <I2C3_ER_IRQHandler+0x10>)
 8005012:	f002 fa53 	bl	80074bc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8005016:	bf00      	nop
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20000368 	.word	0x20000368

08005020 <_read>:
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	e00a      	b.n	8005048 <_read+0x28>
 8005032:	f3af 8000 	nop.w
 8005036:	4601      	mov	r1, r0
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	60ba      	str	r2, [r7, #8]
 800503e:	b2ca      	uxtb	r2, r1
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	3301      	adds	r3, #1
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	429a      	cmp	r2, r3
 800504e:	dbf0      	blt.n	8005032 <_read+0x12>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <_write>:
 800505a:	b580      	push	{r7, lr}
 800505c:	b086      	sub	sp, #24
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e009      	b.n	8005080 <_write+0x26>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	60ba      	str	r2, [r7, #8]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f3af 8000 	nop.w
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	3301      	adds	r3, #1
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	dbf1      	blt.n	800506c <_write+0x12>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <_close>:
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	f04f 33ff 	mov.w	r3, #4294967295
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <_fstat>:
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050ba:	605a      	str	r2, [r3, #4]
 80050bc:	2300      	movs	r3, #0
 80050be:	4618      	mov	r0, r3
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <_isatty>:
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	2301      	movs	r3, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <_lseek>:
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	2300      	movs	r3, #0
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <_sbrk>:
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	4b11      	ldr	r3, [pc, #68]	; (800514c <_sbrk+0x50>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d102      	bne.n	8005112 <_sbrk+0x16>
 800510c:	4b0f      	ldr	r3, [pc, #60]	; (800514c <_sbrk+0x50>)
 800510e:	4a10      	ldr	r2, [pc, #64]	; (8005150 <_sbrk+0x54>)
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	4b0e      	ldr	r3, [pc, #56]	; (800514c <_sbrk+0x50>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	4b0c      	ldr	r3, [pc, #48]	; (800514c <_sbrk+0x50>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4413      	add	r3, r2
 8005120:	466a      	mov	r2, sp
 8005122:	4293      	cmp	r3, r2
 8005124:	d907      	bls.n	8005136 <_sbrk+0x3a>
 8005126:	f006 ff77 	bl	800c018 <__errno>
 800512a:	4602      	mov	r2, r0
 800512c:	230c      	movs	r3, #12
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	f04f 33ff 	mov.w	r3, #4294967295
 8005134:	e006      	b.n	8005144 <_sbrk+0x48>
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <_sbrk+0x50>)
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	4a03      	ldr	r2, [pc, #12]	; (800514c <_sbrk+0x50>)
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20000354 	.word	0x20000354
 8005150:	20001128 	.word	0x20001128

08005154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005158:	4b08      	ldr	r3, [pc, #32]	; (800517c <SystemInit+0x28>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515e:	4a07      	ldr	r2, [pc, #28]	; (800517c <SystemInit+0x28>)
 8005160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005168:	4b04      	ldr	r3, [pc, #16]	; (800517c <SystemInit+0x28>)
 800516a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800516e:	609a      	str	r2, [r3, #8]
#endif
}
 8005170:	bf00      	nop
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	e000ed00 	.word	0xe000ed00

08005180 <Reset_Handler>:
 8005180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051b8 <LoopFillZerobss+0x14>
 8005184:	2100      	movs	r1, #0
 8005186:	e003      	b.n	8005190 <LoopCopyDataInit>

08005188 <CopyDataInit>:
 8005188:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <LoopFillZerobss+0x18>)
 800518a:	585b      	ldr	r3, [r3, r1]
 800518c:	5043      	str	r3, [r0, r1]
 800518e:	3104      	adds	r1, #4

08005190 <LoopCopyDataInit>:
 8005190:	480b      	ldr	r0, [pc, #44]	; (80051c0 <LoopFillZerobss+0x1c>)
 8005192:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <LoopFillZerobss+0x20>)
 8005194:	1842      	adds	r2, r0, r1
 8005196:	429a      	cmp	r2, r3
 8005198:	d3f6      	bcc.n	8005188 <CopyDataInit>
 800519a:	4a0b      	ldr	r2, [pc, #44]	; (80051c8 <LoopFillZerobss+0x24>)
 800519c:	e002      	b.n	80051a4 <LoopFillZerobss>

0800519e <FillZerobss>:
 800519e:	2300      	movs	r3, #0
 80051a0:	f842 3b04 	str.w	r3, [r2], #4

080051a4 <LoopFillZerobss>:
 80051a4:	4b09      	ldr	r3, [pc, #36]	; (80051cc <LoopFillZerobss+0x28>)
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d3f9      	bcc.n	800519e <FillZerobss>
 80051aa:	f7ff ffd3 	bl	8005154 <SystemInit>
 80051ae:	f006 ff39 	bl	800c024 <__libc_init_array>
 80051b2:	f7fe ffaf 	bl	8004114 <main>
 80051b6:	4770      	bx	lr
 80051b8:	20020000 	.word	0x20020000
 80051bc:	0800ca3c 	.word	0x0800ca3c
 80051c0:	20000000 	.word	0x20000000
 80051c4:	200000d4 	.word	0x200000d4
 80051c8:	200000d8 	.word	0x200000d8
 80051cc:	20001124 	.word	0x20001124

080051d0 <CAN1_RX0_IRQHandler>:
 80051d0:	e7fe      	b.n	80051d0 <CAN1_RX0_IRQHandler>
	...

080051d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051d8:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <HAL_Init+0x40>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a0d      	ldr	r2, [pc, #52]	; (8005214 <HAL_Init+0x40>)
 80051de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_Init+0x40>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a0a      	ldr	r2, [pc, #40]	; (8005214 <HAL_Init+0x40>)
 80051ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051f0:	4b08      	ldr	r3, [pc, #32]	; (8005214 <HAL_Init+0x40>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a07      	ldr	r2, [pc, #28]	; (8005214 <HAL_Init+0x40>)
 80051f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051fc:	2003      	movs	r0, #3
 80051fe:	f000 fe8b 	bl	8005f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005202:	2000      	movs	r0, #0
 8005204:	f000 f808 	bl	8005218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005208:	f7ff fb30 	bl	800486c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40023c00 	.word	0x40023c00

08005218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005220:	4b12      	ldr	r3, [pc, #72]	; (800526c <HAL_InitTick+0x54>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b12      	ldr	r3, [pc, #72]	; (8005270 <HAL_InitTick+0x58>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	4619      	mov	r1, r3
 800522a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800522e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fea3 	bl	8005f82 <HAL_SYSTICK_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e00e      	b.n	8005264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b0f      	cmp	r3, #15
 800524a:	d80a      	bhi.n	8005262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800524c:	2200      	movs	r2, #0
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	f04f 30ff 	mov.w	r0, #4294967295
 8005254:	f000 fe6b 	bl	8005f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005258:	4a06      	ldr	r2, [pc, #24]	; (8005274 <HAL_InitTick+0x5c>)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	e000      	b.n	8005264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20000064 	.word	0x20000064
 8005270:	2000006c 	.word	0x2000006c
 8005274:	20000068 	.word	0x20000068

08005278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800527c:	4b06      	ldr	r3, [pc, #24]	; (8005298 <HAL_IncTick+0x20>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	4b06      	ldr	r3, [pc, #24]	; (800529c <HAL_IncTick+0x24>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4413      	add	r3, r2
 8005288:	4a04      	ldr	r2, [pc, #16]	; (800529c <HAL_IncTick+0x24>)
 800528a:	6013      	str	r3, [r2, #0]
}
 800528c:	bf00      	nop
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	2000006c 	.word	0x2000006c
 800529c:	2000111c 	.word	0x2000111c

080052a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  return uwTick;
 80052a4:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <HAL_GetTick+0x14>)
 80052a6:	681b      	ldr	r3, [r3, #0]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	2000111c 	.word	0x2000111c

080052b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052c0:	f7ff ffee 	bl	80052a0 <HAL_GetTick>
 80052c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d005      	beq.n	80052de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052d2:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <HAL_Delay+0x40>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80052de:	bf00      	nop
 80052e0:	f7ff ffde 	bl	80052a0 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d8f7      	bhi.n	80052e0 <HAL_Delay+0x28>
  {
  }
}
 80052f0:	bf00      	nop
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	2000006c 	.word	0x2000006c

080052fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e033      	b.n	800537a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d109      	bne.n	800532e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff face 	bl	80048bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f003 0310 	and.w	r3, r3, #16
 8005336:	2b00      	cmp	r3, #0
 8005338:	d118      	bne.n	800536c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005342:	f023 0302 	bic.w	r3, r3, #2
 8005346:	f043 0202 	orr.w	r2, r3, #2
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fb8a 	bl	8005a68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f023 0303 	bic.w	r3, r3, #3
 8005362:	f043 0201 	orr.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
 800536a:	e001      	b.n	8005370 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005378:	7bfb      	ldrb	r3, [r7, #15]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	2300      	movs	r3, #0
 8005390:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b02      	cmp	r3, #2
 800539e:	bf0c      	ite	eq
 80053a0:	2301      	moveq	r3, #1
 80053a2:	2300      	movne	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	bf0c      	ite	eq
 80053b6:	2301      	moveq	r3, #1
 80053b8:	2300      	movne	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d049      	beq.n	8005458 <HAL_ADC_IRQHandler+0xd6>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d046      	beq.n	8005458 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d105      	bne.n	80053e2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d12b      	bne.n	8005448 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d127      	bne.n	8005448 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005402:	2b00      	cmp	r3, #0
 8005404:	d006      	beq.n	8005414 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005410:	2b00      	cmp	r3, #0
 8005412:	d119      	bne.n	8005448 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0220 	bic.w	r2, r2, #32
 8005422:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d105      	bne.n	8005448 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	f043 0201 	orr.w	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7fe fc59 	bl	8003d00 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f06f 0212 	mvn.w	r2, #18
 8005456:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b04      	cmp	r3, #4
 8005464:	bf0c      	ite	eq
 8005466:	2301      	moveq	r3, #1
 8005468:	2300      	movne	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	2b80      	cmp	r3, #128	; 0x80
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d057      	beq.n	800553a <HAL_ADC_IRQHandler+0x1b8>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d054      	beq.n	800553a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b00      	cmp	r3, #0
 800549a:	d105      	bne.n	80054a8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d139      	bne.n	800552a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d006      	beq.n	80054d2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d12b      	bne.n	800552a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d124      	bne.n	800552a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d11d      	bne.n	800552a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d119      	bne.n	800552a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005504:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551a:	2b00      	cmp	r3, #0
 800551c:	d105      	bne.n	800552a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f043 0201 	orr.w	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fc1a 	bl	8005d64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 020c 	mvn.w	r2, #12
 8005538:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b01      	cmp	r3, #1
 8005546:	bf0c      	ite	eq
 8005548:	2301      	moveq	r3, #1
 800554a:	2300      	movne	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	bf0c      	ite	eq
 800555e:	2301      	moveq	r3, #1
 8005560:	2300      	movne	r3, #0
 8005562:	b2db      	uxtb	r3, r3
 8005564:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d017      	beq.n	800559c <HAL_ADC_IRQHandler+0x21a>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d014      	beq.n	800559c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b01      	cmp	r3, #1
 800557e:	d10d      	bne.n	800559c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f935 	bl	80057fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f06f 0201 	mvn.w	r2, #1
 800559a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	bf0c      	ite	eq
 80055aa:	2301      	moveq	r3, #1
 80055ac:	2300      	movne	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055c0:	bf0c      	ite	eq
 80055c2:	2301      	moveq	r3, #1
 80055c4:	2300      	movne	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d015      	beq.n	80055fc <HAL_ADC_IRQHandler+0x27a>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d012      	beq.n	80055fc <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	f043 0202 	orr.w	r2, r3, #2
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f06f 0220 	mvn.w	r2, #32
 80055ea:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f90f 	bl	8005810 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f06f 0220 	mvn.w	r2, #32
 80055fa:	601a      	str	r2, [r3, #0]
  }
}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <HAL_ADC_Start_DMA+0x1e>
 800561e:	2302      	movs	r3, #2
 8005620:	e0cc      	b.n	80057bc <HAL_ADC_Start_DMA+0x1b8>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b01      	cmp	r3, #1
 8005636:	d018      	beq.n	800566a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005648:	4b5e      	ldr	r3, [pc, #376]	; (80057c4 <HAL_ADC_Start_DMA+0x1c0>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a5e      	ldr	r2, [pc, #376]	; (80057c8 <HAL_ADC_Start_DMA+0x1c4>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	0c9a      	lsrs	r2, r3, #18
 8005654:	4613      	mov	r3, r2
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4413      	add	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800565c:	e002      	b.n	8005664 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	3b01      	subs	r3, #1
 8005662:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f9      	bne.n	800565e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b01      	cmp	r3, #1
 8005676:	f040 80a0 	bne.w	80057ba <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005682:	f023 0301 	bic.w	r3, r3, #1
 8005686:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80056a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b8:	d106      	bne.n	80056c8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056be:	f023 0206 	bic.w	r2, r3, #6
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44
 80056c6:	e002      	b.n	80056ce <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056d6:	4b3d      	ldr	r3, [pc, #244]	; (80057cc <HAL_ADC_Start_DMA+0x1c8>)
 80056d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	4a3c      	ldr	r2, [pc, #240]	; (80057d0 <HAL_ADC_Start_DMA+0x1cc>)
 80056e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	4a3b      	ldr	r2, [pc, #236]	; (80057d4 <HAL_ADC_Start_DMA+0x1d0>)
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	4a3a      	ldr	r2, [pc, #232]	; (80057d8 <HAL_ADC_Start_DMA+0x1d4>)
 80056f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80056fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800570a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800571a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	334c      	adds	r3, #76	; 0x4c
 8005726:	4619      	mov	r1, r3
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f000 fe3c 	bl	80063a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	2b00      	cmp	r3, #0
 800573a:	d12a      	bne.n	8005792 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a26      	ldr	r2, [pc, #152]	; (80057dc <HAL_ADC_Start_DMA+0x1d8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d015      	beq.n	8005772 <HAL_ADC_Start_DMA+0x16e>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a25      	ldr	r2, [pc, #148]	; (80057e0 <HAL_ADC_Start_DMA+0x1dc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d105      	bne.n	800575c <HAL_ADC_Start_DMA+0x158>
 8005750:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <HAL_ADC_Start_DMA+0x1c8>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 031f 	and.w	r3, r3, #31
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a20      	ldr	r2, [pc, #128]	; (80057e4 <HAL_ADC_Start_DMA+0x1e0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d129      	bne.n	80057ba <HAL_ADC_Start_DMA+0x1b6>
 8005766:	4b19      	ldr	r3, [pc, #100]	; (80057cc <HAL_ADC_Start_DMA+0x1c8>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f003 031f 	and.w	r3, r3, #31
 800576e:	2b0f      	cmp	r3, #15
 8005770:	d823      	bhi.n	80057ba <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d11c      	bne.n	80057ba <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800578e:	609a      	str	r2, [r3, #8]
 8005790:	e013      	b.n	80057ba <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a11      	ldr	r2, [pc, #68]	; (80057dc <HAL_ADC_Start_DMA+0x1d8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d10e      	bne.n	80057ba <HAL_ADC_Start_DMA+0x1b6>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d107      	bne.n	80057ba <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80057b8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20000064 	.word	0x20000064
 80057c8:	431bde83 	.word	0x431bde83
 80057cc:	40012300 	.word	0x40012300
 80057d0:	08005c61 	.word	0x08005c61
 80057d4:	08005d1b 	.word	0x08005d1b
 80057d8:	08005d37 	.word	0x08005d37
 80057dc:	40012000 	.word	0x40012000
 80057e0:	40012100 	.word	0x40012100
 80057e4:	40012200 	.word	0x40012200

080057e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_ADC_ConfigChannel+0x1c>
 800583c:	2302      	movs	r3, #2
 800583e:	e105      	b.n	8005a4c <HAL_ADC_ConfigChannel+0x228>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b09      	cmp	r3, #9
 800584e:	d925      	bls.n	800589c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68d9      	ldr	r1, [r3, #12]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	b29b      	uxth	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	4613      	mov	r3, r2
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4413      	add	r3, r2
 8005864:	3b1e      	subs	r3, #30
 8005866:	2207      	movs	r2, #7
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	43da      	mvns	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	400a      	ands	r2, r1
 8005874:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68d9      	ldr	r1, [r3, #12]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	b29b      	uxth	r3, r3
 8005886:	4618      	mov	r0, r3
 8005888:	4603      	mov	r3, r0
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	4403      	add	r3, r0
 800588e:	3b1e      	subs	r3, #30
 8005890:	409a      	lsls	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	60da      	str	r2, [r3, #12]
 800589a:	e022      	b.n	80058e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6919      	ldr	r1, [r3, #16]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	461a      	mov	r2, r3
 80058aa:	4613      	mov	r3, r2
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	4413      	add	r3, r2
 80058b0:	2207      	movs	r2, #7
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	43da      	mvns	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	400a      	ands	r2, r1
 80058be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6919      	ldr	r1, [r3, #16]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	4618      	mov	r0, r3
 80058d2:	4603      	mov	r3, r0
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	4403      	add	r3, r0
 80058d8:	409a      	lsls	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b06      	cmp	r3, #6
 80058e8:	d824      	bhi.n	8005934 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	3b05      	subs	r3, #5
 80058fc:	221f      	movs	r2, #31
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	43da      	mvns	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	400a      	ands	r2, r1
 800590a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	4618      	mov	r0, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	3b05      	subs	r3, #5
 8005926:	fa00 f203 	lsl.w	r2, r0, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	635a      	str	r2, [r3, #52]	; 0x34
 8005932:	e04c      	b.n	80059ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2b0c      	cmp	r3, #12
 800593a:	d824      	bhi.n	8005986 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	3b23      	subs	r3, #35	; 0x23
 800594e:	221f      	movs	r2, #31
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	43da      	mvns	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	400a      	ands	r2, r1
 800595c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	4618      	mov	r0, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	3b23      	subs	r3, #35	; 0x23
 8005978:	fa00 f203 	lsl.w	r2, r0, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	631a      	str	r2, [r3, #48]	; 0x30
 8005984:	e023      	b.n	80059ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	3b41      	subs	r3, #65	; 0x41
 8005998:	221f      	movs	r2, #31
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	43da      	mvns	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	400a      	ands	r2, r1
 80059a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	4618      	mov	r0, r3
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	3b41      	subs	r3, #65	; 0x41
 80059c2:	fa00 f203 	lsl.w	r2, r0, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059ce:	4b22      	ldr	r3, [pc, #136]	; (8005a58 <HAL_ADC_ConfigChannel+0x234>)
 80059d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a21      	ldr	r2, [pc, #132]	; (8005a5c <HAL_ADC_ConfigChannel+0x238>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d109      	bne.n	80059f0 <HAL_ADC_ConfigChannel+0x1cc>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b12      	cmp	r3, #18
 80059e2:	d105      	bne.n	80059f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a19      	ldr	r2, [pc, #100]	; (8005a5c <HAL_ADC_ConfigChannel+0x238>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d123      	bne.n	8005a42 <HAL_ADC_ConfigChannel+0x21e>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b10      	cmp	r3, #16
 8005a00:	d003      	beq.n	8005a0a <HAL_ADC_ConfigChannel+0x1e6>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b11      	cmp	r3, #17
 8005a08:	d11b      	bne.n	8005a42 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b10      	cmp	r3, #16
 8005a1c:	d111      	bne.n	8005a42 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005a1e:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <HAL_ADC_ConfigChannel+0x23c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a10      	ldr	r2, [pc, #64]	; (8005a64 <HAL_ADC_ConfigChannel+0x240>)
 8005a24:	fba2 2303 	umull	r2, r3, r2, r3
 8005a28:	0c9a      	lsrs	r2, r3, #18
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005a34:	e002      	b.n	8005a3c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1f9      	bne.n	8005a36 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40012300 	.word	0x40012300
 8005a5c:	40012000 	.word	0x40012000
 8005a60:	20000064 	.word	0x20000064
 8005a64:	431bde83 	.word	0x431bde83

08005a68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a70:	4b79      	ldr	r3, [pc, #484]	; (8005c58 <ADC_Init+0x1f0>)
 8005a72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6859      	ldr	r1, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	021a      	lsls	r2, r3, #8
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005ac0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6859      	ldr	r1, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6899      	ldr	r1, [r3, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	4a58      	ldr	r2, [pc, #352]	; (8005c5c <ADC_Init+0x1f4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d022      	beq.n	8005b46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6899      	ldr	r1, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6899      	ldr	r1, [r3, #8]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	609a      	str	r2, [r3, #8]
 8005b44:	e00f      	b.n	8005b66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0202 	bic.w	r2, r2, #2
 8005b74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6899      	ldr	r1, [r3, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	7e1b      	ldrb	r3, [r3, #24]
 8005b80:	005a      	lsls	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01b      	beq.n	8005bcc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005bb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6859      	ldr	r1, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	035a      	lsls	r2, r3, #13
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
 8005bca:	e007      	b.n	8005bdc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	051a      	lsls	r2, r3, #20
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6899      	ldr	r1, [r3, #8]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c1e:	025a      	lsls	r2, r3, #9
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6899      	ldr	r1, [r3, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	029a      	lsls	r2, r3, #10
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	609a      	str	r2, [r3, #8]
}
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	40012300 	.word	0x40012300
 8005c5c:	0f000001 	.word	0x0f000001

08005c60 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d13c      	bne.n	8005cf4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d12b      	bne.n	8005cec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d127      	bne.n	8005cec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d006      	beq.n	8005cb8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d119      	bne.n	8005cec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0220 	bic.w	r2, r2, #32
 8005cc6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce4:	f043 0201 	orr.w	r2, r3, #1
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7fe f807 	bl	8003d00 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005cf2:	e00e      	b.n	8005d12 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f7ff fd85 	bl	8005810 <HAL_ADC_ErrorCallback>
}
 8005d06:	e004      	b.n	8005d12 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	4798      	blx	r3
}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f7ff fd5d 	bl	80057e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d2e:	bf00      	nop
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2240      	movs	r2, #64	; 0x40
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	f043 0204 	orr.w	r2, r3, #4
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff fd5a 	bl	8005810 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d88:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <__NVIC_SetPriorityGrouping+0x44>)
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d94:	4013      	ands	r3, r2
 8005d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005daa:	4a04      	ldr	r2, [pc, #16]	; (8005dbc <__NVIC_SetPriorityGrouping+0x44>)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	60d3      	str	r3, [r2, #12]
}
 8005db0:	bf00      	nop
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	e000ed00 	.word	0xe000ed00

08005dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dc4:	4b04      	ldr	r3, [pc, #16]	; (8005dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	0a1b      	lsrs	r3, r3, #8
 8005dca:	f003 0307 	and.w	r3, r3, #7
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	e000ed00 	.word	0xe000ed00

08005ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	4603      	mov	r3, r0
 8005de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	db0b      	blt.n	8005e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	f003 021f 	and.w	r2, r3, #31
 8005df4:	4907      	ldr	r1, [pc, #28]	; (8005e14 <__NVIC_EnableIRQ+0x38>)
 8005df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	2001      	movs	r0, #1
 8005dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8005e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	e000e100 	.word	0xe000e100

08005e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	6039      	str	r1, [r7, #0]
 8005e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	db0a      	blt.n	8005e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	490c      	ldr	r1, [pc, #48]	; (8005e64 <__NVIC_SetPriority+0x4c>)
 8005e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e36:	0112      	lsls	r2, r2, #4
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e40:	e00a      	b.n	8005e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	4908      	ldr	r1, [pc, #32]	; (8005e68 <__NVIC_SetPriority+0x50>)
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	3b04      	subs	r3, #4
 8005e50:	0112      	lsls	r2, r2, #4
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	440b      	add	r3, r1
 8005e56:	761a      	strb	r2, [r3, #24]
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	e000e100 	.word	0xe000e100
 8005e68:	e000ed00 	.word	0xe000ed00

08005e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b089      	sub	sp, #36	; 0x24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f1c3 0307 	rsb	r3, r3, #7
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	bf28      	it	cs
 8005e8a:	2304      	movcs	r3, #4
 8005e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	3304      	adds	r3, #4
 8005e92:	2b06      	cmp	r3, #6
 8005e94:	d902      	bls.n	8005e9c <NVIC_EncodePriority+0x30>
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3b03      	subs	r3, #3
 8005e9a:	e000      	b.n	8005e9e <NVIC_EncodePriority+0x32>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eaa:	43da      	mvns	r2, r3
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	401a      	ands	r2, r3
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebe:	43d9      	mvns	r1, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ec4:	4313      	orrs	r3, r2
         );
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3724      	adds	r7, #36	; 0x24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
	...

08005ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ee4:	d301      	bcc.n	8005eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e00f      	b.n	8005f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005eea:	4a0a      	ldr	r2, [pc, #40]	; (8005f14 <SysTick_Config+0x40>)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ef2:	210f      	movs	r1, #15
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef8:	f7ff ff8e 	bl	8005e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005efc:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <SysTick_Config+0x40>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f02:	4b04      	ldr	r3, [pc, #16]	; (8005f14 <SysTick_Config+0x40>)
 8005f04:	2207      	movs	r2, #7
 8005f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	e000e010 	.word	0xe000e010

08005f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff ff29 	bl	8005d78 <__NVIC_SetPriorityGrouping>
}
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b086      	sub	sp, #24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	4603      	mov	r3, r0
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f40:	f7ff ff3e 	bl	8005dc0 <__NVIC_GetPriorityGrouping>
 8005f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	6978      	ldr	r0, [r7, #20]
 8005f4c:	f7ff ff8e 	bl	8005e6c <NVIC_EncodePriority>
 8005f50:	4602      	mov	r2, r0
 8005f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff ff5d 	bl	8005e18 <__NVIC_SetPriority>
}
 8005f5e:	bf00      	nop
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff ff31 	bl	8005ddc <__NVIC_EnableIRQ>
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ffa2 	bl	8005ed4 <SysTick_Config>
 8005f90:	4603      	mov	r3, r0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b082      	sub	sp, #8
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e014      	b.n	8005fd6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	791b      	ldrb	r3, [r3, #4]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d105      	bne.n	8005fc2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7fe fcfd 	bl	80049bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	2300      	movs	r3, #0
 8005fee:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	795b      	ldrb	r3, [r3, #5]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d101      	bne.n	8005ffc <HAL_DAC_Start+0x1e>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e050      	b.n	800609e <HAL_DAC_Start+0xc0>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2202      	movs	r2, #2
 8006006:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6819      	ldr	r1, [r3, #0]
 800600e:	2201      	movs	r2, #1
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	409a      	lsls	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d11a      	bne.n	8006058 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006038:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2b04      	cmp	r3, #4
 800603e:	d127      	bne.n	8006090 <HAL_DAC_Start+0xb2>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b38      	cmp	r3, #56	; 0x38
 8006044:	d124      	bne.n	8006090 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0201 	orr.w	r2, r2, #1
 8006054:	605a      	str	r2, [r3, #4]
 8006056:	e01b      	b.n	8006090 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006062:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800606e:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006076:	d10b      	bne.n	8006090 <HAL_DAC_Start+0xb2>
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800607e:	d107      	bne.n	8006090 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0202 	orr.w	r2, r2, #2
 800608e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c0:	d118      	bne.n	80060f4 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2204      	movs	r2, #4
 80060c6:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f043 0201 	orr.w	r2, r3, #1
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060dc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060ec:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f825 	bl	800613e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006102:	d118      	bne.n	8006136 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2204      	movs	r2, #4
 8006108:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f043 0202 	orr.w	r2, r3, #2
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800611e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800612e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f880 	bl	8006236 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8006136:	bf00      	nop
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8006152:	b480      	push	{r7}
 8006154:	b087      	sub	sp, #28
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	617b      	str	r3, [r7, #20]
 8006162:	2300      	movs	r3, #0
 8006164:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	795b      	ldrb	r3, [r3, #5]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <HAL_DAC_ConfigChannel+0x20>
 800616e:	2302      	movs	r3, #2
 8006170:	e036      	b.n	80061e0 <HAL_DAC_ConfigChannel+0x8e>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2202      	movs	r2, #2
 800617c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006186:	f640 72fe 	movw	r2, #4094	; 0xffe
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	43db      	mvns	r3, r3
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4013      	ands	r3, r2
 8006196:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6819      	ldr	r1, [r3, #0]
 80061c0:	22c0      	movs	r2, #192	; 0xc0
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	43da      	mvns	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	400a      	ands	r2, r1
 80061d0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d105      	bne.n	8006216 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4413      	add	r3, r2
 8006210:	3308      	adds	r3, #8
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	e004      	b.n	8006220 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4413      	add	r3, r2
 800621c:	3314      	adds	r3, #20
 800621e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	461a      	mov	r2, r3
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006258:	f7ff f822 	bl	80052a0 <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e099      	b.n	800639c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0201 	bic.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006288:	e00f      	b.n	80062aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800628a:	f7ff f809 	bl	80052a0 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b05      	cmp	r3, #5
 8006296:	d908      	bls.n	80062aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2203      	movs	r2, #3
 80062a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e078      	b.n	800639c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e8      	bne.n	800628a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4b38      	ldr	r3, [pc, #224]	; (80063a4 <HAL_DMA_Init+0x158>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	2b04      	cmp	r3, #4
 8006302:	d107      	bne.n	8006314 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630c:	4313      	orrs	r3, r2
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f023 0307 	bic.w	r3, r3, #7
 800632a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	2b04      	cmp	r3, #4
 800633c:	d117      	bne.n	800636e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	4313      	orrs	r3, r2
 8006346:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00e      	beq.n	800636e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fa9f 	bl	8006894 <DMA_CheckFifoParam>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2240      	movs	r2, #64	; 0x40
 8006360:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800636a:	2301      	movs	r3, #1
 800636c:	e016      	b.n	800639c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fa56 	bl	8006828 <DMA_CalcBaseAndBitshift>
 800637c:	4603      	mov	r3, r0
 800637e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006384:	223f      	movs	r2, #63	; 0x3f
 8006386:	409a      	lsls	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	f010803f 	.word	0xf010803f

080063a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_DMA_Start_IT+0x26>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e040      	b.n	8006450 <HAL_DMA_Start_IT+0xa8>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d12f      	bne.n	8006442 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2202      	movs	r2, #2
 80063e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 f9e8 	bl	80067cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006400:	223f      	movs	r2, #63	; 0x3f
 8006402:	409a      	lsls	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0216 	orr.w	r2, r2, #22
 8006416:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641c:	2b00      	cmp	r3, #0
 800641e:	d007      	beq.n	8006430 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0208 	orr.w	r2, r2, #8
 800642e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0201 	orr.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	e005      	b.n	800644e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800644a:	2302      	movs	r3, #2
 800644c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800644e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d004      	beq.n	8006476 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2280      	movs	r2, #128	; 0x80
 8006470:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e00c      	b.n	8006490 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2205      	movs	r2, #5
 800647a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0201 	bic.w	r2, r2, #1
 800648c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80064a8:	4b92      	ldr	r3, [pc, #584]	; (80066f4 <HAL_DMA_IRQHandler+0x258>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a92      	ldr	r2, [pc, #584]	; (80066f8 <HAL_DMA_IRQHandler+0x25c>)
 80064ae:	fba2 2303 	umull	r2, r3, r2, r3
 80064b2:	0a9b      	lsrs	r3, r3, #10
 80064b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c6:	2208      	movs	r2, #8
 80064c8:	409a      	lsls	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4013      	ands	r3, r2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d01a      	beq.n	8006508 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d013      	beq.n	8006508 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0204 	bic.w	r2, r2, #4
 80064ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f4:	2208      	movs	r2, #8
 80064f6:	409a      	lsls	r2, r3
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006500:	f043 0201 	orr.w	r2, r3, #1
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650c:	2201      	movs	r2, #1
 800650e:	409a      	lsls	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4013      	ands	r3, r2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d012      	beq.n	800653e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00b      	beq.n	800653e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652a:	2201      	movs	r2, #1
 800652c:	409a      	lsls	r2, r3
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	f043 0202 	orr.w	r2, r3, #2
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006542:	2204      	movs	r2, #4
 8006544:	409a      	lsls	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d012      	beq.n	8006574 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006560:	2204      	movs	r2, #4
 8006562:	409a      	lsls	r2, r3
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656c:	f043 0204 	orr.w	r2, r3, #4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006578:	2210      	movs	r2, #16
 800657a:	409a      	lsls	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4013      	ands	r3, r2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d043      	beq.n	800660c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d03c      	beq.n	800660c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006596:	2210      	movs	r2, #16
 8006598:	409a      	lsls	r2, r3
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d018      	beq.n	80065de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d108      	bne.n	80065cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d024      	beq.n	800660c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	4798      	blx	r3
 80065ca:	e01f      	b.n	800660c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01b      	beq.n	800660c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
 80065dc:	e016      	b.n	800660c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d107      	bne.n	80065fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0208 	bic.w	r2, r2, #8
 80065fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006610:	2220      	movs	r2, #32
 8006612:	409a      	lsls	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4013      	ands	r3, r2
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 808e 	beq.w	800673a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 8086 	beq.w	800673a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006632:	2220      	movs	r2, #32
 8006634:	409a      	lsls	r2, r3
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b05      	cmp	r3, #5
 8006644:	d136      	bne.n	80066b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0216 	bic.w	r2, r2, #22
 8006654:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695a      	ldr	r2, [r3, #20]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006664:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d103      	bne.n	8006676 <HAL_DMA_IRQHandler+0x1da>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006672:	2b00      	cmp	r3, #0
 8006674:	d007      	beq.n	8006686 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0208 	bic.w	r2, r2, #8
 8006684:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668a:	223f      	movs	r2, #63	; 0x3f
 800668c:	409a      	lsls	r2, r3
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d07d      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
        }
        return;
 80066b2:	e078      	b.n	80067a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01c      	beq.n	80066fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d108      	bne.n	80066e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d030      	beq.n	800673a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	4798      	blx	r3
 80066e0:	e02b      	b.n	800673a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d027      	beq.n	800673a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
 80066f2:	e022      	b.n	800673a <HAL_DMA_IRQHandler+0x29e>
 80066f4:	20000064 	.word	0x20000064
 80066f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10f      	bne.n	800672a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0210 	bic.w	r2, r2, #16
 8006718:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673e:	2b00      	cmp	r3, #0
 8006740:	d032      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d022      	beq.n	8006794 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2205      	movs	r2, #5
 8006752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0201 	bic.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	3301      	adds	r3, #1
 800676a:	60bb      	str	r3, [r7, #8]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	429a      	cmp	r2, r3
 8006770:	d307      	bcc.n	8006782 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1f2      	bne.n	8006766 <HAL_DMA_IRQHandler+0x2ca>
 8006780:	e000      	b.n	8006784 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006782:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	4798      	blx	r3
 80067a4:	e000      	b.n	80067a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80067a6:	bf00      	nop
    }
  }
}
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop

080067b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067be:	b2db      	uxtb	r3, r3
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b40      	cmp	r3, #64	; 0x40
 80067f8:	d108      	bne.n	800680c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800680a:	e007      	b.n	800681c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	60da      	str	r2, [r3, #12]
}
 800681c:	bf00      	nop
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	b2db      	uxtb	r3, r3
 8006836:	3b10      	subs	r3, #16
 8006838:	4a14      	ldr	r2, [pc, #80]	; (800688c <DMA_CalcBaseAndBitshift+0x64>)
 800683a:	fba2 2303 	umull	r2, r3, r2, r3
 800683e:	091b      	lsrs	r3, r3, #4
 8006840:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006842:	4a13      	ldr	r2, [pc, #76]	; (8006890 <DMA_CalcBaseAndBitshift+0x68>)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b03      	cmp	r3, #3
 8006854:	d909      	bls.n	800686a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800685e:	f023 0303 	bic.w	r3, r3, #3
 8006862:	1d1a      	adds	r2, r3, #4
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	659a      	str	r2, [r3, #88]	; 0x58
 8006868:	e007      	b.n	800687a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006872:	f023 0303 	bic.w	r3, r3, #3
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	aaaaaaab 	.word	0xaaaaaaab
 8006890:	0800c9c0 	.word	0x0800c9c0

08006894 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d11f      	bne.n	80068ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d855      	bhi.n	8006960 <DMA_CheckFifoParam+0xcc>
 80068b4:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <DMA_CheckFifoParam+0x28>)
 80068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ba:	bf00      	nop
 80068bc:	080068cd 	.word	0x080068cd
 80068c0:	080068df 	.word	0x080068df
 80068c4:	080068cd 	.word	0x080068cd
 80068c8:	08006961 	.word	0x08006961
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d045      	beq.n	8006964 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068dc:	e042      	b.n	8006964 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068e6:	d13f      	bne.n	8006968 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068ec:	e03c      	b.n	8006968 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f6:	d121      	bne.n	800693c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d836      	bhi.n	800696c <DMA_CheckFifoParam+0xd8>
 80068fe:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <DMA_CheckFifoParam+0x70>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	08006915 	.word	0x08006915
 8006908:	0800691b 	.word	0x0800691b
 800690c:	08006915 	.word	0x08006915
 8006910:	0800692d 	.word	0x0800692d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
      break;
 8006918:	e02f      	b.n	800697a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d024      	beq.n	8006970 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800692a:	e021      	b.n	8006970 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006934:	d11e      	bne.n	8006974 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800693a:	e01b      	b.n	8006974 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d902      	bls.n	8006948 <DMA_CheckFifoParam+0xb4>
 8006942:	2b03      	cmp	r3, #3
 8006944:	d003      	beq.n	800694e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006946:	e018      	b.n	800697a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
      break;
 800694c:	e015      	b.n	800697a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00e      	beq.n	8006978 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	73fb      	strb	r3, [r7, #15]
      break;
 800695e:	e00b      	b.n	8006978 <DMA_CheckFifoParam+0xe4>
      break;
 8006960:	bf00      	nop
 8006962:	e00a      	b.n	800697a <DMA_CheckFifoParam+0xe6>
      break;
 8006964:	bf00      	nop
 8006966:	e008      	b.n	800697a <DMA_CheckFifoParam+0xe6>
      break;
 8006968:	bf00      	nop
 800696a:	e006      	b.n	800697a <DMA_CheckFifoParam+0xe6>
      break;
 800696c:	bf00      	nop
 800696e:	e004      	b.n	800697a <DMA_CheckFifoParam+0xe6>
      break;
 8006970:	bf00      	nop
 8006972:	e002      	b.n	800697a <DMA_CheckFifoParam+0xe6>
      break;   
 8006974:	bf00      	nop
 8006976:	e000      	b.n	800697a <DMA_CheckFifoParam+0xe6>
      break;
 8006978:	bf00      	nop
    }
  } 
  
  return status; 
 800697a:	7bfb      	ldrb	r3, [r7, #15]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006988:	b480      	push	{r7}
 800698a:	b089      	sub	sp, #36	; 0x24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006992:	2300      	movs	r3, #0
 8006994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006996:	2300      	movs	r3, #0
 8006998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800699a:	2300      	movs	r3, #0
 800699c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
 80069a2:	e16b      	b.n	8006c7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069a4:	2201      	movs	r2, #1
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4013      	ands	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	429a      	cmp	r2, r3
 80069be:	f040 815a 	bne.w	8006c76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d00b      	beq.n	80069e2 <HAL_GPIO_Init+0x5a>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d007      	beq.n	80069e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069d6:	2b11      	cmp	r3, #17
 80069d8:	d003      	beq.n	80069e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2b12      	cmp	r3, #18
 80069e0:	d130      	bne.n	8006a44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	2203      	movs	r2, #3
 80069ee:	fa02 f303 	lsl.w	r3, r2, r3
 80069f2:	43db      	mvns	r3, r3
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	4013      	ands	r3, r2
 80069f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a18:	2201      	movs	r2, #1
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	43db      	mvns	r3, r3
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	4013      	ands	r3, r2
 8006a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	f003 0201 	and.w	r2, r3, #1
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	fa02 f303 	lsl.w	r3, r2, r3
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	2203      	movs	r2, #3
 8006a50:	fa02 f303 	lsl.w	r3, r2, r3
 8006a54:	43db      	mvns	r3, r3
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	fa02 f303 	lsl.w	r3, r2, r3
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d003      	beq.n	8006a84 <HAL_GPIO_Init+0xfc>
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	2b12      	cmp	r3, #18
 8006a82:	d123      	bne.n	8006acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	08da      	lsrs	r2, r3, #3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3208      	adds	r2, #8
 8006a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	220f      	movs	r2, #15
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f003 0307 	and.w	r3, r3, #7
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	08da      	lsrs	r2, r3, #3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3208      	adds	r2, #8
 8006ac6:	69b9      	ldr	r1, [r7, #24]
 8006ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	2203      	movs	r2, #3
 8006ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8006adc:	43db      	mvns	r3, r3
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f003 0203 	and.w	r2, r3, #3
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	fa02 f303 	lsl.w	r3, r2, r3
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 80b4 	beq.w	8006c76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	4b5f      	ldr	r3, [pc, #380]	; (8006c90 <HAL_GPIO_Init+0x308>)
 8006b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b16:	4a5e      	ldr	r2, [pc, #376]	; (8006c90 <HAL_GPIO_Init+0x308>)
 8006b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b1e:	4b5c      	ldr	r3, [pc, #368]	; (8006c90 <HAL_GPIO_Init+0x308>)
 8006b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b2a:	4a5a      	ldr	r2, [pc, #360]	; (8006c94 <HAL_GPIO_Init+0x30c>)
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	089b      	lsrs	r3, r3, #2
 8006b30:	3302      	adds	r3, #2
 8006b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	220f      	movs	r2, #15
 8006b42:	fa02 f303 	lsl.w	r3, r2, r3
 8006b46:	43db      	mvns	r3, r3
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a51      	ldr	r2, [pc, #324]	; (8006c98 <HAL_GPIO_Init+0x310>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d02b      	beq.n	8006bae <HAL_GPIO_Init+0x226>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a50      	ldr	r2, [pc, #320]	; (8006c9c <HAL_GPIO_Init+0x314>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d025      	beq.n	8006baa <HAL_GPIO_Init+0x222>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a4f      	ldr	r2, [pc, #316]	; (8006ca0 <HAL_GPIO_Init+0x318>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d01f      	beq.n	8006ba6 <HAL_GPIO_Init+0x21e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a4e      	ldr	r2, [pc, #312]	; (8006ca4 <HAL_GPIO_Init+0x31c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d019      	beq.n	8006ba2 <HAL_GPIO_Init+0x21a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a4d      	ldr	r2, [pc, #308]	; (8006ca8 <HAL_GPIO_Init+0x320>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <HAL_GPIO_Init+0x216>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a4c      	ldr	r2, [pc, #304]	; (8006cac <HAL_GPIO_Init+0x324>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00d      	beq.n	8006b9a <HAL_GPIO_Init+0x212>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a4b      	ldr	r2, [pc, #300]	; (8006cb0 <HAL_GPIO_Init+0x328>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <HAL_GPIO_Init+0x20e>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a4a      	ldr	r2, [pc, #296]	; (8006cb4 <HAL_GPIO_Init+0x32c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d101      	bne.n	8006b92 <HAL_GPIO_Init+0x20a>
 8006b8e:	2307      	movs	r3, #7
 8006b90:	e00e      	b.n	8006bb0 <HAL_GPIO_Init+0x228>
 8006b92:	2308      	movs	r3, #8
 8006b94:	e00c      	b.n	8006bb0 <HAL_GPIO_Init+0x228>
 8006b96:	2306      	movs	r3, #6
 8006b98:	e00a      	b.n	8006bb0 <HAL_GPIO_Init+0x228>
 8006b9a:	2305      	movs	r3, #5
 8006b9c:	e008      	b.n	8006bb0 <HAL_GPIO_Init+0x228>
 8006b9e:	2304      	movs	r3, #4
 8006ba0:	e006      	b.n	8006bb0 <HAL_GPIO_Init+0x228>
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e004      	b.n	8006bb0 <HAL_GPIO_Init+0x228>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e002      	b.n	8006bb0 <HAL_GPIO_Init+0x228>
 8006baa:	2301      	movs	r3, #1
 8006bac:	e000      	b.n	8006bb0 <HAL_GPIO_Init+0x228>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	69fa      	ldr	r2, [r7, #28]
 8006bb2:	f002 0203 	and.w	r2, r2, #3
 8006bb6:	0092      	lsls	r2, r2, #2
 8006bb8:	4093      	lsls	r3, r2
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bc0:	4934      	ldr	r1, [pc, #208]	; (8006c94 <HAL_GPIO_Init+0x30c>)
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	089b      	lsrs	r3, r3, #2
 8006bc6:	3302      	adds	r3, #2
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bce:	4b3a      	ldr	r3, [pc, #232]	; (8006cb8 <HAL_GPIO_Init+0x330>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	43db      	mvns	r3, r3
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006bf2:	4a31      	ldr	r2, [pc, #196]	; (8006cb8 <HAL_GPIO_Init+0x330>)
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006bf8:	4b2f      	ldr	r3, [pc, #188]	; (8006cb8 <HAL_GPIO_Init+0x330>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	43db      	mvns	r3, r3
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	4013      	ands	r3, r2
 8006c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c1c:	4a26      	ldr	r2, [pc, #152]	; (8006cb8 <HAL_GPIO_Init+0x330>)
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c22:	4b25      	ldr	r3, [pc, #148]	; (8006cb8 <HAL_GPIO_Init+0x330>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	43db      	mvns	r3, r3
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c46:	4a1c      	ldr	r2, [pc, #112]	; (8006cb8 <HAL_GPIO_Init+0x330>)
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c4c:	4b1a      	ldr	r3, [pc, #104]	; (8006cb8 <HAL_GPIO_Init+0x330>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	43db      	mvns	r3, r3
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c70:	4a11      	ldr	r2, [pc, #68]	; (8006cb8 <HAL_GPIO_Init+0x330>)
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	61fb      	str	r3, [r7, #28]
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	2b0f      	cmp	r3, #15
 8006c80:	f67f ae90 	bls.w	80069a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c84:	bf00      	nop
 8006c86:	3724      	adds	r7, #36	; 0x24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	40023800 	.word	0x40023800
 8006c94:	40013800 	.word	0x40013800
 8006c98:	40020000 	.word	0x40020000
 8006c9c:	40020400 	.word	0x40020400
 8006ca0:	40020800 	.word	0x40020800
 8006ca4:	40020c00 	.word	0x40020c00
 8006ca8:	40021000 	.word	0x40021000
 8006cac:	40021400 	.word	0x40021400
 8006cb0:	40021800 	.word	0x40021800
 8006cb4:	40021c00 	.word	0x40021c00
 8006cb8:	40013c00 	.word	0x40013c00

08006cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	887b      	ldrh	r3, [r7, #2]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	73fb      	strb	r3, [r7, #15]
 8006cd8:	e001      	b.n	8006cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	807b      	strh	r3, [r7, #2]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006cfc:	787b      	ldrb	r3, [r7, #1]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d02:	887a      	ldrh	r2, [r7, #2]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d08:	e003      	b.n	8006d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d0a:	887b      	ldrh	r3, [r7, #2]
 8006d0c:	041a      	lsls	r2, r3, #16
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	619a      	str	r2, [r3, #24]
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	460b      	mov	r3, r1
 8006d28:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	695a      	ldr	r2, [r3, #20]
 8006d2e:	887b      	ldrh	r3, [r7, #2]
 8006d30:	401a      	ands	r2, r3
 8006d32:	887b      	ldrh	r3, [r7, #2]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d104      	bne.n	8006d42 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d38:	887b      	ldrh	r3, [r7, #2]
 8006d3a:	041a      	lsls	r2, r3, #16
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006d40:	e002      	b.n	8006d48 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006d42:	887a      	ldrh	r2, [r7, #2]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	619a      	str	r2, [r3, #24]
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006d5e:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d60:	695a      	ldr	r2, [r3, #20]
 8006d62:	88fb      	ldrh	r3, [r7, #6]
 8006d64:	4013      	ands	r3, r2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d006      	beq.n	8006d78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d6a:	4a05      	ldr	r2, [pc, #20]	; (8006d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d6c:	88fb      	ldrh	r3, [r7, #6]
 8006d6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d70:	88fb      	ldrh	r3, [r7, #6]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fc ffdc 	bl	8003d30 <HAL_GPIO_EXTI_Callback>
  }
}
 8006d78:	bf00      	nop
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40013c00 	.word	0x40013c00

08006d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e11f      	b.n	8006fd6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d106      	bne.n	8006db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7fd fe52 	bl	8004a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2224      	movs	r2, #36	; 0x24
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0201 	bic.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006de8:	f003 f8f6 	bl	8009fd8 <HAL_RCC_GetPCLK1Freq>
 8006dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	4a7b      	ldr	r2, [pc, #492]	; (8006fe0 <HAL_I2C_Init+0x25c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d807      	bhi.n	8006e08 <HAL_I2C_Init+0x84>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4a7a      	ldr	r2, [pc, #488]	; (8006fe4 <HAL_I2C_Init+0x260>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	bf94      	ite	ls
 8006e00:	2301      	movls	r3, #1
 8006e02:	2300      	movhi	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	e006      	b.n	8006e16 <HAL_I2C_Init+0x92>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4a77      	ldr	r2, [pc, #476]	; (8006fe8 <HAL_I2C_Init+0x264>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	bf94      	ite	ls
 8006e10:	2301      	movls	r3, #1
 8006e12:	2300      	movhi	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e0db      	b.n	8006fd6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4a72      	ldr	r2, [pc, #456]	; (8006fec <HAL_I2C_Init+0x268>)
 8006e22:	fba2 2303 	umull	r2, r3, r2, r3
 8006e26:	0c9b      	lsrs	r3, r3, #18
 8006e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	4a64      	ldr	r2, [pc, #400]	; (8006fe0 <HAL_I2C_Init+0x25c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d802      	bhi.n	8006e58 <HAL_I2C_Init+0xd4>
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	3301      	adds	r3, #1
 8006e56:	e009      	b.n	8006e6c <HAL_I2C_Init+0xe8>
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
 8006e62:	4a63      	ldr	r2, [pc, #396]	; (8006ff0 <HAL_I2C_Init+0x26c>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	099b      	lsrs	r3, r3, #6
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6812      	ldr	r2, [r2, #0]
 8006e70:	430b      	orrs	r3, r1
 8006e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006e7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	4956      	ldr	r1, [pc, #344]	; (8006fe0 <HAL_I2C_Init+0x25c>)
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	d80d      	bhi.n	8006ea8 <HAL_I2C_Init+0x124>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	1e59      	subs	r1, r3, #1
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	bf38      	it	cc
 8006ea4:	2304      	movcc	r3, #4
 8006ea6:	e04f      	b.n	8006f48 <HAL_I2C_Init+0x1c4>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d111      	bne.n	8006ed4 <HAL_I2C_Init+0x150>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	1e58      	subs	r0, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6859      	ldr	r1, [r3, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	440b      	add	r3, r1
 8006ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bf0c      	ite	eq
 8006ecc:	2301      	moveq	r3, #1
 8006ece:	2300      	movne	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	e012      	b.n	8006efa <HAL_I2C_Init+0x176>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	1e58      	subs	r0, r3, #1
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6859      	ldr	r1, [r3, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	440b      	add	r3, r1
 8006ee2:	0099      	lsls	r1, r3, #2
 8006ee4:	440b      	add	r3, r1
 8006ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006eea:	3301      	adds	r3, #1
 8006eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2301      	moveq	r3, #1
 8006ef6:	2300      	movne	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <HAL_I2C_Init+0x17e>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e022      	b.n	8006f48 <HAL_I2C_Init+0x1c4>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10e      	bne.n	8006f28 <HAL_I2C_Init+0x1a4>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	1e58      	subs	r0, r3, #1
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6859      	ldr	r1, [r3, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	440b      	add	r3, r1
 8006f18:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f26:	e00f      	b.n	8006f48 <HAL_I2C_Init+0x1c4>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	1e58      	subs	r0, r3, #1
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6859      	ldr	r1, [r3, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	0099      	lsls	r1, r3, #2
 8006f38:	440b      	add	r3, r1
 8006f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f3e:	3301      	adds	r3, #1
 8006f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	6809      	ldr	r1, [r1, #0]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69da      	ldr	r2, [r3, #28]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6911      	ldr	r1, [r2, #16]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	68d2      	ldr	r2, [r2, #12]
 8006f82:	4311      	orrs	r1, r2
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	430b      	orrs	r3, r1
 8006f8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	695a      	ldr	r2, [r3, #20]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0201 	orr.w	r2, r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	000186a0 	.word	0x000186a0
 8006fe4:	001e847f 	.word	0x001e847f
 8006fe8:	003d08ff 	.word	0x003d08ff
 8006fec:	431bde83 	.word	0x431bde83
 8006ff0:	10624dd3 	.word	0x10624dd3

08006ff4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b088      	sub	sp, #32
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	607a      	str	r2, [r7, #4]
 8006ffe:	461a      	mov	r2, r3
 8007000:	460b      	mov	r3, r1
 8007002:	817b      	strh	r3, [r7, #10]
 8007004:	4613      	mov	r3, r2
 8007006:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007008:	f7fe f94a 	bl	80052a0 <HAL_GetTick>
 800700c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b20      	cmp	r3, #32
 8007018:	f040 80e0 	bne.w	80071dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	2319      	movs	r3, #25
 8007022:	2201      	movs	r2, #1
 8007024:	4970      	ldr	r1, [pc, #448]	; (80071e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f001 fd59 	bl	8008ade <I2C_WaitOnFlagUntilTimeout>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007032:	2302      	movs	r3, #2
 8007034:	e0d3      	b.n	80071de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800703c:	2b01      	cmp	r3, #1
 800703e:	d101      	bne.n	8007044 <HAL_I2C_Master_Transmit+0x50>
 8007040:	2302      	movs	r3, #2
 8007042:	e0cc      	b.n	80071de <HAL_I2C_Master_Transmit+0x1ea>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b01      	cmp	r3, #1
 8007058:	d007      	beq.n	800706a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 0201 	orr.w	r2, r2, #1
 8007068:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007078:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2221      	movs	r2, #33	; 0x21
 800707e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2210      	movs	r2, #16
 8007086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	893a      	ldrh	r2, [r7, #8]
 800709a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4a50      	ldr	r2, [pc, #320]	; (80071ec <HAL_I2C_Master_Transmit+0x1f8>)
 80070aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80070ac:	8979      	ldrh	r1, [r7, #10]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	6a3a      	ldr	r2, [r7, #32]
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f001 fc12 	bl	80088dc <I2C_MasterRequestWrite>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e08d      	b.n	80071de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070c2:	2300      	movs	r3, #0
 80070c4:	613b      	str	r3, [r7, #16]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	613b      	str	r3, [r7, #16]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80070d8:	e066      	b.n	80071a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	6a39      	ldr	r1, [r7, #32]
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f001 fdd3 	bl	8008c8a <I2C_WaitOnTXEFlagUntilTimeout>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00d      	beq.n	8007106 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d107      	bne.n	8007102 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007100:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e06b      	b.n	80071de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	781a      	ldrb	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007120:	b29b      	uxth	r3, r3
 8007122:	3b01      	subs	r3, #1
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b04      	cmp	r3, #4
 8007142:	d11b      	bne.n	800717c <HAL_I2C_Master_Transmit+0x188>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007148:	2b00      	cmp	r3, #0
 800714a:	d017      	beq.n	800717c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	781a      	ldrb	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007166:	b29b      	uxth	r3, r3
 8007168:	3b01      	subs	r3, #1
 800716a:	b29a      	uxth	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	6a39      	ldr	r1, [r7, #32]
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f001 fdc3 	bl	8008d0c <I2C_WaitOnBTFFlagUntilTimeout>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00d      	beq.n	80071a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	2b04      	cmp	r3, #4
 8007192:	d107      	bne.n	80071a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e01a      	b.n	80071de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d194      	bne.n	80070da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2220      	movs	r2, #32
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	e000      	b.n	80071de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80071dc:	2302      	movs	r3, #2
  }
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	00100002 	.word	0x00100002
 80071ec:	ffff0000 	.word	0xffff0000

080071f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007210:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007218:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	2b10      	cmp	r3, #16
 800721e:	d003      	beq.n	8007228 <HAL_I2C_EV_IRQHandler+0x38>
 8007220:	7bfb      	ldrb	r3, [r7, #15]
 8007222:	2b40      	cmp	r3, #64	; 0x40
 8007224:	f040 80b6 	bne.w	8007394 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10d      	bne.n	800725e <HAL_I2C_EV_IRQHandler+0x6e>
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007248:	d003      	beq.n	8007252 <HAL_I2C_EV_IRQHandler+0x62>
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007250:	d101      	bne.n	8007256 <HAL_I2C_EV_IRQHandler+0x66>
 8007252:	2301      	movs	r3, #1
 8007254:	e000      	b.n	8007258 <HAL_I2C_EV_IRQHandler+0x68>
 8007256:	2300      	movs	r3, #0
 8007258:	2b01      	cmp	r3, #1
 800725a:	f000 8127 	beq.w	80074ac <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00c      	beq.n	8007282 <HAL_I2C_EV_IRQHandler+0x92>
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	0a5b      	lsrs	r3, r3, #9
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d006      	beq.n	8007282 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 fdb9 	bl	8008dec <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fd1c 	bl	8007cb8 <I2C_Master_SB>
 8007280:	e087      	b.n	8007392 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	08db      	lsrs	r3, r3, #3
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b00      	cmp	r3, #0
 800728c:	d009      	beq.n	80072a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	0a5b      	lsrs	r3, r3, #9
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fd92 	bl	8007dc4 <I2C_Master_ADD10>
 80072a0:	e077      	b.n	8007392 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	085b      	lsrs	r3, r3, #1
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d009      	beq.n	80072c2 <HAL_I2C_EV_IRQHandler+0xd2>
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	0a5b      	lsrs	r3, r3, #9
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fdac 	bl	8007e18 <I2C_Master_ADDR>
 80072c0:	e067      	b.n	8007392 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	089b      	lsrs	r3, r3, #2
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d030      	beq.n	8007330 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072dc:	f000 80e8 	beq.w	80074b0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	09db      	lsrs	r3, r3, #7
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00f      	beq.n	800730c <HAL_I2C_EV_IRQHandler+0x11c>
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	0a9b      	lsrs	r3, r3, #10
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d009      	beq.n	800730c <HAL_I2C_EV_IRQHandler+0x11c>
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	089b      	lsrs	r3, r3, #2
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d103      	bne.n	800730c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f9e8 	bl	80076da <I2C_MasterTransmit_TXE>
 800730a:	e042      	b.n	8007392 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	089b      	lsrs	r3, r3, #2
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80cb 	beq.w	80074b0 <HAL_I2C_EV_IRQHandler+0x2c0>
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	0a5b      	lsrs	r3, r3, #9
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 80c4 	beq.w	80074b0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fa72 	bl	8007812 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800732e:	e0bf      	b.n	80074b0 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800733a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800733e:	f000 80b7 	beq.w	80074b0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	099b      	lsrs	r3, r3, #6
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00f      	beq.n	800736e <HAL_I2C_EV_IRQHandler+0x17e>
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	0a9b      	lsrs	r3, r3, #10
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d009      	beq.n	800736e <HAL_I2C_EV_IRQHandler+0x17e>
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	089b      	lsrs	r3, r3, #2
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b00      	cmp	r3, #0
 8007364:	d103      	bne.n	800736e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fb3a 	bl	80079e0 <I2C_MasterReceive_RXNE>
 800736c:	e011      	b.n	8007392 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	089b      	lsrs	r3, r3, #2
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 809a 	beq.w	80074b0 <HAL_I2C_EV_IRQHandler+0x2c0>
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	0a5b      	lsrs	r3, r3, #9
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 8093 	beq.w	80074b0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fbaa 	bl	8007ae4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007390:	e08e      	b.n	80074b0 <HAL_I2C_EV_IRQHandler+0x2c0>
 8007392:	e08d      	b.n	80074b0 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	d004      	beq.n	80073a6 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	61fb      	str	r3, [r7, #28]
 80073a4:	e007      	b.n	80073b6 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	085b      	lsrs	r3, r3, #1
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d012      	beq.n	80073e8 <HAL_I2C_EV_IRQHandler+0x1f8>
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	0a5b      	lsrs	r3, r3, #9
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00c      	beq.n	80073e8 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80073de:	69b9      	ldr	r1, [r7, #24]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 ff68 	bl	80082b6 <I2C_Slave_ADDR>
 80073e6:	e066      	b.n	80074b6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	091b      	lsrs	r3, r3, #4
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d009      	beq.n	8007408 <HAL_I2C_EV_IRQHandler+0x218>
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	0a5b      	lsrs	r3, r3, #9
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 ff9d 	bl	8008340 <I2C_Slave_STOPF>
 8007406:	e056      	b.n	80074b6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	2b21      	cmp	r3, #33	; 0x21
 800740c:	d002      	beq.n	8007414 <HAL_I2C_EV_IRQHandler+0x224>
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	2b29      	cmp	r3, #41	; 0x29
 8007412:	d125      	bne.n	8007460 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	09db      	lsrs	r3, r3, #7
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00f      	beq.n	8007440 <HAL_I2C_EV_IRQHandler+0x250>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	0a9b      	lsrs	r3, r3, #10
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <HAL_I2C_EV_IRQHandler+0x250>
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	089b      	lsrs	r3, r3, #2
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d103      	bne.n	8007440 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fe7e 	bl	800813a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800743e:	e039      	b.n	80074b4 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	089b      	lsrs	r3, r3, #2
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	2b00      	cmp	r3, #0
 800744a:	d033      	beq.n	80074b4 <HAL_I2C_EV_IRQHandler+0x2c4>
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	0a5b      	lsrs	r3, r3, #9
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b00      	cmp	r3, #0
 8007456:	d02d      	beq.n	80074b4 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 feab 	bl	80081b4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800745e:	e029      	b.n	80074b4 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	099b      	lsrs	r3, r3, #6
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00f      	beq.n	800748c <HAL_I2C_EV_IRQHandler+0x29c>
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	0a9b      	lsrs	r3, r3, #10
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d009      	beq.n	800748c <HAL_I2C_EV_IRQHandler+0x29c>
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	089b      	lsrs	r3, r3, #2
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b00      	cmp	r3, #0
 8007482:	d103      	bne.n	800748c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 feb6 	bl	80081f6 <I2C_SlaveReceive_RXNE>
 800748a:	e014      	b.n	80074b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	089b      	lsrs	r3, r3, #2
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00e      	beq.n	80074b6 <HAL_I2C_EV_IRQHandler+0x2c6>
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	0a5b      	lsrs	r3, r3, #9
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d008      	beq.n	80074b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fee4 	bl	8008272 <I2C_SlaveReceive_BTF>
 80074aa:	e004      	b.n	80074b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80074ac:	bf00      	nop
 80074ae:	e002      	b.n	80074b6 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074b0:	bf00      	nop
 80074b2:	e000      	b.n	80074b6 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80074b4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80074b6:	3720      	adds	r7, #32
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80074d4:	2300      	movs	r3, #0
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074de:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	0a1b      	lsrs	r3, r3, #8
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00e      	beq.n	800750a <HAL_I2C_ER_IRQHandler+0x4e>
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d008      	beq.n	800750a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	f043 0301 	orr.w	r3, r3, #1
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007508:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	0a5b      	lsrs	r3, r3, #9
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00e      	beq.n	8007534 <HAL_I2C_ER_IRQHandler+0x78>
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	0a1b      	lsrs	r3, r3, #8
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d008      	beq.n	8007534 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	f043 0302 	orr.w	r3, r3, #2
 8007528:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007532:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	0a9b      	lsrs	r3, r3, #10
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d03f      	beq.n	80075c0 <HAL_I2C_ER_IRQHandler+0x104>
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	0a1b      	lsrs	r3, r3, #8
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d039      	beq.n	80075c0 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800754c:	7efb      	ldrb	r3, [r7, #27]
 800754e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007554:	b29b      	uxth	r3, r3
 8007556:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007566:	7ebb      	ldrb	r3, [r7, #26]
 8007568:	2b20      	cmp	r3, #32
 800756a:	d112      	bne.n	8007592 <HAL_I2C_ER_IRQHandler+0xd6>
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10f      	bne.n	8007592 <HAL_I2C_ER_IRQHandler+0xd6>
 8007572:	7cfb      	ldrb	r3, [r7, #19]
 8007574:	2b21      	cmp	r3, #33	; 0x21
 8007576:	d008      	beq.n	800758a <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007578:	7cfb      	ldrb	r3, [r7, #19]
 800757a:	2b29      	cmp	r3, #41	; 0x29
 800757c:	d005      	beq.n	800758a <HAL_I2C_ER_IRQHandler+0xce>
 800757e:	7cfb      	ldrb	r3, [r7, #19]
 8007580:	2b28      	cmp	r3, #40	; 0x28
 8007582:	d106      	bne.n	8007592 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b21      	cmp	r3, #33	; 0x21
 8007588:	d103      	bne.n	8007592 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f001 f808 	bl	80085a0 <I2C_Slave_AF>
 8007590:	e016      	b.n	80075c0 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800759a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	f043 0304 	orr.w	r3, r3, #4
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80075a4:	7efb      	ldrb	r3, [r7, #27]
 80075a6:	2b10      	cmp	r3, #16
 80075a8:	d002      	beq.n	80075b0 <HAL_I2C_ER_IRQHandler+0xf4>
 80075aa:	7efb      	ldrb	r3, [r7, #27]
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d107      	bne.n	80075c0 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075be:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	0adb      	lsrs	r3, r3, #11
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00e      	beq.n	80075ea <HAL_I2C_ER_IRQHandler+0x12e>
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	0a1b      	lsrs	r3, r3, #8
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d008      	beq.n	80075ea <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	f043 0308 	orr.w	r3, r3, #8
 80075de:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80075e8:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d008      	beq.n	8007602 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 f83f 	bl	8008680 <I2C_ITError>
  }
}
 8007602:	bf00      	nop
 8007604:	3728      	adds	r7, #40	; 0x28
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007626:	bf00      	nop
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	70fb      	strb	r3, [r7, #3]
 8007666:	4613      	mov	r3, r2
 8007668:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076f0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d150      	bne.n	80077a2 <I2C_MasterTransmit_TXE+0xc8>
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	2b21      	cmp	r3, #33	; 0x21
 8007704:	d14d      	bne.n	80077a2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b08      	cmp	r3, #8
 800770a:	d01d      	beq.n	8007748 <I2C_MasterTransmit_TXE+0x6e>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b20      	cmp	r3, #32
 8007710:	d01a      	beq.n	8007748 <I2C_MasterTransmit_TXE+0x6e>
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007718:	d016      	beq.n	8007748 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007728:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2211      	movs	r2, #17
 800772e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff ff62 	bl	800760a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007746:	e060      	b.n	800780a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007756:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007766:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	d107      	bne.n	8007792 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7ff ff7d 	bl	800768a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007790:	e03b      	b.n	800780a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff ff35 	bl	800760a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80077a0:	e033      	b.n	800780a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	2b21      	cmp	r3, #33	; 0x21
 80077a6:	d005      	beq.n	80077b4 <I2C_MasterTransmit_TXE+0xda>
 80077a8:	7bbb      	ldrb	r3, [r7, #14]
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d12d      	bne.n	800780a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	2b22      	cmp	r3, #34	; 0x22
 80077b2:	d12a      	bne.n	800780a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d108      	bne.n	80077d0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077cc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80077ce:	e01c      	b.n	800780a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b40      	cmp	r3, #64	; 0x40
 80077da:	d103      	bne.n	80077e4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f898 	bl	8007912 <I2C_MemoryTransmit_TXE_BTF>
}
 80077e2:	e012      	b.n	800780a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	781a      	ldrb	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007808:	e7ff      	b.n	800780a <I2C_MasterTransmit_TXE+0x130>
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007826:	b2db      	uxtb	r3, r3
 8007828:	2b21      	cmp	r3, #33	; 0x21
 800782a:	d165      	bne.n	80078f8 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d012      	beq.n	800785c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	781a      	ldrb	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	1c5a      	adds	r2, r3, #1
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007850:	b29b      	uxth	r3, r3
 8007852:	3b01      	subs	r3, #1
 8007854:	b29a      	uxth	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800785a:	e056      	b.n	800790a <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b08      	cmp	r3, #8
 8007860:	d01d      	beq.n	800789e <I2C_MasterTransmit_BTF+0x8c>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2b20      	cmp	r3, #32
 8007866:	d01a      	beq.n	800789e <I2C_MasterTransmit_BTF+0x8c>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800786e:	d016      	beq.n	800789e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800787e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2211      	movs	r2, #17
 8007884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff feb7 	bl	800760a <HAL_I2C_MasterTxCpltCallback>
}
 800789c:	e035      	b.n	800790a <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078ac:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078bc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b40      	cmp	r3, #64	; 0x40
 80078d6:	d107      	bne.n	80078e8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7ff fed2 	bl	800768a <HAL_I2C_MemTxCpltCallback>
}
 80078e6:	e010      	b.n	800790a <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff fe8a 	bl	800760a <HAL_I2C_MasterTxCpltCallback>
}
 80078f6:	e008      	b.n	800790a <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b40      	cmp	r3, #64	; 0x40
 8007902:	d102      	bne.n	800790a <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f804 	bl	8007912 <I2C_MemoryTransmit_TXE_BTF>
}
 800790a:	bf00      	nop
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791e:	2b00      	cmp	r3, #0
 8007920:	d11d      	bne.n	800795e <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007926:	2b01      	cmp	r3, #1
 8007928:	d10b      	bne.n	8007942 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800792e:	b2da      	uxtb	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800793a:	1c9a      	adds	r2, r3, #2
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007940:	e048      	b.n	80079d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007946:	b29b      	uxth	r3, r3
 8007948:	121b      	asrs	r3, r3, #8
 800794a:	b2da      	uxtb	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800795c:	e03a      	b.n	80079d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007962:	2b01      	cmp	r3, #1
 8007964:	d10b      	bne.n	800797e <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800796a:	b2da      	uxtb	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800797c:	e02a      	b.n	80079d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007982:	2b02      	cmp	r3, #2
 8007984:	d126      	bne.n	80079d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b22      	cmp	r3, #34	; 0x22
 8007990:	d108      	bne.n	80079a4 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079a0:	601a      	str	r2, [r3, #0]
}
 80079a2:	e017      	b.n	80079d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b21      	cmp	r3, #33	; 0x21
 80079ae:	d111      	bne.n	80079d4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	781a      	ldrb	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b22      	cmp	r3, #34	; 0x22
 80079f2:	d173      	bne.n	8007adc <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d920      	bls.n	8007a44 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	691a      	ldr	r2, [r3, #16]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	b2d2      	uxtb	r2, r2
 8007a0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d154      	bne.n	8007adc <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a40:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007a42:	e04b      	b.n	8007adc <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d047      	beq.n	8007adc <I2C_MasterReceive_RXNE+0xfc>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d002      	beq.n	8007a58 <I2C_MasterReceive_RXNE+0x78>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d141      	bne.n	8007adc <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a66:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a76:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	691a      	ldr	r2, [r3, #16]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a82:	b2d2      	uxtb	r2, r2
 8007a84:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b40      	cmp	r3, #64	; 0x40
 8007ab0:	d10a      	bne.n	8007ac8 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff fdec 	bl	800769e <HAL_I2C_MemRxCpltCallback>
}
 8007ac6:	e009      	b.n	8007adc <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2212      	movs	r2, #18
 8007ad4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff fda1 	bl	800761e <HAL_I2C_MasterRxCpltCallback>
}
 8007adc:	bf00      	nop
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d11b      	bne.n	8007b34 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b0a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	691a      	ldr	r2, [r3, #16]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007b32:	e0bd      	b.n	8007cb0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d129      	bne.n	8007b92 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b4c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d00a      	beq.n	8007b6a <I2C_MasterReceive_BTF+0x86>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d007      	beq.n	8007b6a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b68:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	691a      	ldr	r2, [r3, #16]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	b2d2      	uxtb	r2, r2
 8007b76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007b90:	e08e      	b.n	8007cb0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d176      	bne.n	8007c8a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d002      	beq.n	8007ba8 <I2C_MasterReceive_BTF+0xc4>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2b10      	cmp	r3, #16
 8007ba6:	d108      	bne.n	8007bba <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	e019      	b.n	8007bee <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d002      	beq.n	8007bc6 <I2C_MasterReceive_BTF+0xe2>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d108      	bne.n	8007bd8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	e00a      	b.n	8007bee <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b10      	cmp	r3, #16
 8007bdc:	d007      	beq.n	8007bee <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	691a      	ldr	r2, [r3, #16]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	b2d2      	uxtb	r2, r2
 8007bfa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691a      	ldr	r2, [r3, #16]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007c48:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b40      	cmp	r3, #64	; 0x40
 8007c5c:	d10a      	bne.n	8007c74 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff fd16 	bl	800769e <HAL_I2C_MemRxCpltCallback>
}
 8007c72:	e01d      	b.n	8007cb0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2212      	movs	r2, #18
 8007c80:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7ff fccb 	bl	800761e <HAL_I2C_MasterRxCpltCallback>
}
 8007c88:	e012      	b.n	8007cb0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	b2d2      	uxtb	r2, r2
 8007c96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007cb0:	bf00      	nop
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b40      	cmp	r3, #64	; 0x40
 8007cca:	d117      	bne.n	8007cfc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d109      	bne.n	8007ce8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	461a      	mov	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ce4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007ce6:	e067      	b.n	8007db8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	f043 0301 	orr.w	r3, r3, #1
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	611a      	str	r2, [r3, #16]
}
 8007cfa:	e05d      	b.n	8007db8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d04:	d133      	bne.n	8007d6e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b21      	cmp	r3, #33	; 0x21
 8007d10:	d109      	bne.n	8007d26 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d22:	611a      	str	r2, [r3, #16]
 8007d24:	e008      	b.n	8007d38 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	f043 0301 	orr.w	r3, r3, #1
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d004      	beq.n	8007d4a <I2C_Master_SB+0x92>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d108      	bne.n	8007d5c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d032      	beq.n	8007db8 <I2C_Master_SB+0x100>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d02d      	beq.n	8007db8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d6a:	605a      	str	r2, [r3, #4]
}
 8007d6c:	e024      	b.n	8007db8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10e      	bne.n	8007d94 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	11db      	asrs	r3, r3, #7
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	f003 0306 	and.w	r3, r3, #6
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	f063 030f 	orn	r3, r3, #15
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	611a      	str	r2, [r3, #16]
}
 8007d92:	e011      	b.n	8007db8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d10d      	bne.n	8007db8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	11db      	asrs	r3, r3, #7
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	f003 0306 	and.w	r3, r3, #6
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	f063 030e 	orn	r3, r3, #14
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	611a      	str	r2, [r3, #16]
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d103      	bne.n	8007de8 <I2C_Master_ADD10+0x24>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d011      	beq.n	8007e0c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d104      	bne.n	8007dfc <I2C_Master_ADD10+0x38>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d007      	beq.n	8007e0c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e0a:	605a      	str	r2, [r3, #4]
    }
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b091      	sub	sp, #68	; 0x44
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e34:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b22      	cmp	r3, #34	; 0x22
 8007e40:	f040 8169 	bne.w	8008116 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10f      	bne.n	8007e6c <I2C_Master_ADDR+0x54>
 8007e4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007e50:	2b40      	cmp	r3, #64	; 0x40
 8007e52:	d10b      	bne.n	8007e6c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e54:	2300      	movs	r3, #0
 8007e56:	633b      	str	r3, [r7, #48]	; 0x30
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	633b      	str	r3, [r7, #48]	; 0x30
 8007e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6a:	e160      	b.n	800812e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d11d      	bne.n	8007eb0 <I2C_Master_ADDR+0x98>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e7c:	d118      	bne.n	8007eb0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e7e:	2300      	movs	r3, #0
 8007e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ea2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	651a      	str	r2, [r3, #80]	; 0x50
 8007eae:	e13e      	b.n	800812e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d113      	bne.n	8007ee2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eba:	2300      	movs	r3, #0
 8007ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ece:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ede:	601a      	str	r2, [r3, #0]
 8007ee0:	e115      	b.n	800810e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	f040 808a 	bne.w	8008002 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ef4:	d137      	bne.n	8007f66 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f04:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f14:	d113      	bne.n	8007f3e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f24:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f26:	2300      	movs	r3, #0
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	627b      	str	r3, [r7, #36]	; 0x24
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	627b      	str	r3, [r7, #36]	; 0x24
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	e0e7      	b.n	800810e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f3e:	2300      	movs	r3, #0
 8007f40:	623b      	str	r3, [r7, #32]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	623b      	str	r3, [r7, #32]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	623b      	str	r3, [r7, #32]
 8007f52:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	e0d3      	b.n	800810e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	d02e      	beq.n	8007fca <I2C_Master_ADDR+0x1b2>
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	2b20      	cmp	r3, #32
 8007f70:	d02b      	beq.n	8007fca <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f74:	2b12      	cmp	r3, #18
 8007f76:	d102      	bne.n	8007f7e <I2C_Master_ADDR+0x166>
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d125      	bne.n	8007fca <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f80:	2b04      	cmp	r3, #4
 8007f82:	d00e      	beq.n	8007fa2 <I2C_Master_ADDR+0x18a>
 8007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d00b      	beq.n	8007fa2 <I2C_Master_ADDR+0x18a>
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	2b10      	cmp	r3, #16
 8007f8e:	d008      	beq.n	8007fa2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	e007      	b.n	8007fb2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fb0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	61fb      	str	r3, [r7, #28]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	61fb      	str	r3, [r7, #28]
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	e0a1      	b.n	800810e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fd8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fda:	2300      	movs	r3, #0
 8007fdc:	61bb      	str	r3, [r7, #24]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	61bb      	str	r3, [r7, #24]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	61bb      	str	r3, [r7, #24]
 8007fee:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	e085      	b.n	800810e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008006:	b29b      	uxth	r3, r3
 8008008:	2b02      	cmp	r3, #2
 800800a:	d14d      	bne.n	80080a8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800e:	2b04      	cmp	r3, #4
 8008010:	d016      	beq.n	8008040 <I2C_Master_ADDR+0x228>
 8008012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008014:	2b02      	cmp	r3, #2
 8008016:	d013      	beq.n	8008040 <I2C_Master_ADDR+0x228>
 8008018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801a:	2b10      	cmp	r3, #16
 800801c:	d010      	beq.n	8008040 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800802c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	e007      	b.n	8008050 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800804e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800805a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800805e:	d117      	bne.n	8008090 <I2C_Master_ADDR+0x278>
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008066:	d00b      	beq.n	8008080 <I2C_Master_ADDR+0x268>
 8008068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806a:	2b01      	cmp	r3, #1
 800806c:	d008      	beq.n	8008080 <I2C_Master_ADDR+0x268>
 800806e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008070:	2b08      	cmp	r3, #8
 8008072:	d005      	beq.n	8008080 <I2C_Master_ADDR+0x268>
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	2b10      	cmp	r3, #16
 8008078:	d002      	beq.n	8008080 <I2C_Master_ADDR+0x268>
 800807a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807c:	2b20      	cmp	r3, #32
 800807e:	d107      	bne.n	8008090 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800808e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	617b      	str	r3, [r7, #20]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	e032      	b.n	800810e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080b6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080c6:	d117      	bne.n	80080f8 <I2C_Master_ADDR+0x2e0>
 80080c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080ce:	d00b      	beq.n	80080e8 <I2C_Master_ADDR+0x2d0>
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d008      	beq.n	80080e8 <I2C_Master_ADDR+0x2d0>
 80080d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d005      	beq.n	80080e8 <I2C_Master_ADDR+0x2d0>
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	2b10      	cmp	r3, #16
 80080e0:	d002      	beq.n	80080e8 <I2C_Master_ADDR+0x2d0>
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	2b20      	cmp	r3, #32
 80080e6:	d107      	bne.n	80080f8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080f6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080f8:	2300      	movs	r3, #0
 80080fa:	613b      	str	r3, [r7, #16]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	613b      	str	r3, [r7, #16]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	613b      	str	r3, [r7, #16]
 800810c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008114:	e00b      	b.n	800812e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008116:	2300      	movs	r3, #0
 8008118:	60fb      	str	r3, [r7, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	68fb      	ldr	r3, [r7, #12]
}
 800812c:	e7ff      	b.n	800812e <I2C_Master_ADDR+0x316>
 800812e:	bf00      	nop
 8008130:	3744      	adds	r7, #68	; 0x44
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008148:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d02b      	beq.n	80081ac <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	781a      	ldrb	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800816e:	b29b      	uxth	r3, r3
 8008170:	3b01      	subs	r3, #1
 8008172:	b29a      	uxth	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800817c:	b29b      	uxth	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d114      	bne.n	80081ac <I2C_SlaveTransmit_TXE+0x72>
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	2b29      	cmp	r3, #41	; 0x29
 8008186:	d111      	bne.n	80081ac <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008196:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2221      	movs	r2, #33	; 0x21
 800819c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2228      	movs	r2, #40	; 0x28
 80081a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff fa43 	bl	8007632 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80081ac:	bf00      	nop
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d011      	beq.n	80081ea <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	781a      	ldrb	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008204:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800820a:	b29b      	uxth	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	d02c      	beq.n	800826a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	691a      	ldr	r2, [r3, #16]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	b2d2      	uxtb	r2, r2
 800821c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800822c:	b29b      	uxth	r3, r3
 800822e:	3b01      	subs	r3, #1
 8008230:	b29a      	uxth	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800823a:	b29b      	uxth	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	d114      	bne.n	800826a <I2C_SlaveReceive_RXNE+0x74>
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	2b2a      	cmp	r3, #42	; 0x2a
 8008244:	d111      	bne.n	800826a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008254:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2222      	movs	r2, #34	; 0x22
 800825a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2228      	movs	r2, #40	; 0x28
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7ff f9ee 	bl	8007646 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008272:	b480      	push	{r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800827e:	b29b      	uxth	r3, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	d012      	beq.n	80082aa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	691a      	ldr	r2, [r3, #16]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	b2d2      	uxtb	r2, r2
 8008290:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	1c5a      	adds	r2, r3, #1
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	3b01      	subs	r3, #1
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80082d0:	2b28      	cmp	r3, #40	; 0x28
 80082d2:	d127      	bne.n	8008324 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082e2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	089b      	lsrs	r3, r3, #2
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80082f0:	2301      	movs	r3, #1
 80082f2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	09db      	lsrs	r3, r3, #7
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	81bb      	strh	r3, [r7, #12]
 8008306:	e002      	b.n	800830e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008316:	89ba      	ldrh	r2, [r7, #12]
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7ff f99c 	bl	800765a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008322:	e008      	b.n	8008336 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f06f 0202 	mvn.w	r2, #2
 800832c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008336:	bf00      	nop
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800834e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800835e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008360:	2300      	movs	r3, #0
 8008362:	60bb      	str	r3, [r7, #8]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	60bb      	str	r3, [r7, #8]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0201 	orr.w	r2, r2, #1
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800838c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800839c:	d172      	bne.n	8008484 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	2b22      	cmp	r3, #34	; 0x22
 80083a2:	d002      	beq.n	80083aa <I2C_Slave_STOPF+0x6a>
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	2b2a      	cmp	r3, #42	; 0x2a
 80083a8:	d135      	bne.n	8008416 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083bc:	b29b      	uxth	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d005      	beq.n	80083ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c6:	f043 0204 	orr.w	r2, r3, #4
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe f9e4 	bl	80067b0 <HAL_DMA_GetState>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d049      	beq.n	8008482 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f2:	4a69      	ldr	r2, [pc, #420]	; (8008598 <I2C_Slave_STOPF+0x258>)
 80083f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe f82c 	bl	8006458 <HAL_DMA_Abort_IT>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d03d      	beq.n	8008482 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008410:	4610      	mov	r0, r2
 8008412:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008414:	e035      	b.n	8008482 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	b29a      	uxth	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d005      	beq.n	800843a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	f043 0204 	orr.w	r2, r3, #4
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008448:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844e:	4618      	mov	r0, r3
 8008450:	f7fe f9ae 	bl	80067b0 <HAL_DMA_GetState>
 8008454:	4603      	mov	r3, r0
 8008456:	2b01      	cmp	r3, #1
 8008458:	d014      	beq.n	8008484 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845e:	4a4e      	ldr	r2, [pc, #312]	; (8008598 <I2C_Slave_STOPF+0x258>)
 8008460:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008466:	4618      	mov	r0, r3
 8008468:	f7fd fff6 	bl	8006458 <HAL_DMA_Abort_IT>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d008      	beq.n	8008484 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800847c:	4610      	mov	r0, r2
 800847e:	4798      	blx	r3
 8008480:	e000      	b.n	8008484 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008482:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d03e      	beq.n	800850c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	f003 0304 	and.w	r3, r3, #4
 8008498:	2b04      	cmp	r3, #4
 800849a:	d112      	bne.n	80084c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	691a      	ldr	r2, [r3, #16]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	b2d2      	uxtb	r2, r2
 80084a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ae:	1c5a      	adds	r2, r3, #1
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	3b01      	subs	r3, #1
 80084bc:	b29a      	uxth	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084cc:	2b40      	cmp	r3, #64	; 0x40
 80084ce:	d112      	bne.n	80084f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	691a      	ldr	r2, [r3, #16]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d005      	beq.n	800850c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008504:	f043 0204 	orr.w	r2, r3, #4
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f8b3 	bl	8008680 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800851a:	e039      	b.n	8008590 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	2b2a      	cmp	r3, #42	; 0x2a
 8008520:	d109      	bne.n	8008536 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2228      	movs	r2, #40	; 0x28
 800852c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7ff f888 	bl	8007646 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b28      	cmp	r3, #40	; 0x28
 8008540:	d111      	bne.n	8008566 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a15      	ldr	r2, [pc, #84]	; (800859c <I2C_Slave_STOPF+0x25c>)
 8008546:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2220      	movs	r2, #32
 8008552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7ff f889 	bl	8007676 <HAL_I2C_ListenCpltCallback>
}
 8008564:	e014      	b.n	8008590 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856a:	2b22      	cmp	r3, #34	; 0x22
 800856c:	d002      	beq.n	8008574 <I2C_Slave_STOPF+0x234>
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	2b22      	cmp	r3, #34	; 0x22
 8008572:	d10d      	bne.n	8008590 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2220      	movs	r2, #32
 800857e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff f85b 	bl	8007646 <HAL_I2C_SlaveRxCpltCallback>
}
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	080089e1 	.word	0x080089e1
 800859c:	ffff0000 	.word	0xffff0000

080085a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d002      	beq.n	80085c2 <I2C_Slave_AF+0x22>
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2b20      	cmp	r3, #32
 80085c0:	d129      	bne.n	8008616 <I2C_Slave_AF+0x76>
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
 80085c4:	2b28      	cmp	r3, #40	; 0x28
 80085c6:	d126      	bne.n	8008616 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a2c      	ldr	r2, [pc, #176]	; (800867c <I2C_Slave_AF+0xdc>)
 80085cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2220      	movs	r2, #32
 8008602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7ff f831 	bl	8007676 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008614:	e02e      	b.n	8008674 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008616:	7bfb      	ldrb	r3, [r7, #15]
 8008618:	2b21      	cmp	r3, #33	; 0x21
 800861a:	d126      	bne.n	800866a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a17      	ldr	r2, [pc, #92]	; (800867c <I2C_Slave_AF+0xdc>)
 8008620:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2221      	movs	r2, #33	; 0x21
 8008626:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2220      	movs	r2, #32
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008646:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008650:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008660:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7fe ffe5 	bl	8007632 <HAL_I2C_SlaveTxCpltCallback>
}
 8008668:	e004      	b.n	8008674 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008672:	615a      	str	r2, [r3, #20]
}
 8008674:	bf00      	nop
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	ffff0000 	.word	0xffff0000

08008680 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800868e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b10      	cmp	r3, #16
 800869a:	d10a      	bne.n	80086b2 <I2C_ITError+0x32>
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	2b22      	cmp	r3, #34	; 0x22
 80086a0:	d107      	bne.n	80086b2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80086b8:	2b28      	cmp	r3, #40	; 0x28
 80086ba:	d107      	bne.n	80086cc <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2228      	movs	r2, #40	; 0x28
 80086c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80086ca:	e015      	b.n	80086f8 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086da:	d006      	beq.n	80086ea <I2C_ITError+0x6a>
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	2b60      	cmp	r3, #96	; 0x60
 80086e0:	d003      	beq.n	80086ea <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008706:	d162      	bne.n	80087ce <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008716:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b01      	cmp	r3, #1
 8008724:	d020      	beq.n	8008768 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872a:	4a6a      	ldr	r2, [pc, #424]	; (80088d4 <I2C_ITError+0x254>)
 800872c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	4618      	mov	r0, r3
 8008734:	f7fd fe90 	bl	8006458 <HAL_DMA_Abort_IT>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 8089 	beq.w	8008852 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0201 	bic.w	r2, r2, #1
 800874e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2220      	movs	r2, #32
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008762:	4610      	mov	r0, r2
 8008764:	4798      	blx	r3
 8008766:	e074      	b.n	8008852 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876c:	4a59      	ldr	r2, [pc, #356]	; (80088d4 <I2C_ITError+0x254>)
 800876e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008774:	4618      	mov	r0, r3
 8008776:	f7fd fe6f 	bl	8006458 <HAL_DMA_Abort_IT>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d068      	beq.n	8008852 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878a:	2b40      	cmp	r3, #64	; 0x40
 800878c:	d10b      	bne.n	80087a6 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	691a      	ldr	r2, [r3, #16]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0201 	bic.w	r2, r2, #1
 80087b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087c8:	4610      	mov	r0, r2
 80087ca:	4798      	blx	r3
 80087cc:	e041      	b.n	8008852 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b60      	cmp	r3, #96	; 0x60
 80087d8:	d125      	bne.n	8008826 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2220      	movs	r2, #32
 80087de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f2:	2b40      	cmp	r3, #64	; 0x40
 80087f4:	d10b      	bne.n	800880e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	691a      	ldr	r2, [r3, #16]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	b2d2      	uxtb	r2, r2
 8008802:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	1c5a      	adds	r2, r3, #1
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f022 0201 	bic.w	r2, r2, #1
 800881c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7fe ff51 	bl	80076c6 <HAL_I2C_AbortCpltCallback>
 8008824:	e015      	b.n	8008852 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008830:	2b40      	cmp	r3, #64	; 0x40
 8008832:	d10b      	bne.n	800884c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	691a      	ldr	r2, [r3, #16]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	b2d2      	uxtb	r2, r2
 8008840:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7fe ff30 	bl	80076b2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008856:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10e      	bne.n	8008880 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008868:	2b00      	cmp	r3, #0
 800886a:	d109      	bne.n	8008880 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008872:	2b00      	cmp	r3, #0
 8008874:	d104      	bne.n	8008880 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800887c:	2b00      	cmp	r3, #0
 800887e:	d007      	beq.n	8008890 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800888e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008896:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d113      	bne.n	80088cc <I2C_ITError+0x24c>
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	2b28      	cmp	r3, #40	; 0x28
 80088a8:	d110      	bne.n	80088cc <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a0a      	ldr	r2, [pc, #40]	; (80088d8 <I2C_ITError+0x258>)
 80088ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2220      	movs	r2, #32
 80088ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7fe fed5 	bl	8007676 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80088cc:	bf00      	nop
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	080089e1 	.word	0x080089e1
 80088d8:	ffff0000 	.word	0xffff0000

080088dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b088      	sub	sp, #32
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	607a      	str	r2, [r7, #4]
 80088e6:	603b      	str	r3, [r7, #0]
 80088e8:	460b      	mov	r3, r1
 80088ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b08      	cmp	r3, #8
 80088f6:	d006      	beq.n	8008906 <I2C_MasterRequestWrite+0x2a>
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d003      	beq.n	8008906 <I2C_MasterRequestWrite+0x2a>
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008904:	d108      	bne.n	8008918 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	e00b      	b.n	8008930 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891c:	2b12      	cmp	r3, #18
 800891e:	d107      	bne.n	8008930 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800892e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 f8ce 	bl	8008ade <I2C_WaitOnFlagUntilTimeout>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00c      	beq.n	8008962 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800895c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e035      	b.n	80089ce <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800896a:	d108      	bne.n	800897e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800896c:	897b      	ldrh	r3, [r7, #10]
 800896e:	b2db      	uxtb	r3, r3
 8008970:	461a      	mov	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800897a:	611a      	str	r2, [r3, #16]
 800897c:	e01b      	b.n	80089b6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800897e:	897b      	ldrh	r3, [r7, #10]
 8008980:	11db      	asrs	r3, r3, #7
 8008982:	b2db      	uxtb	r3, r3
 8008984:	f003 0306 	and.w	r3, r3, #6
 8008988:	b2db      	uxtb	r3, r3
 800898a:	f063 030f 	orn	r3, r3, #15
 800898e:	b2da      	uxtb	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	490f      	ldr	r1, [pc, #60]	; (80089d8 <I2C_MasterRequestWrite+0xfc>)
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 f8f5 	bl	8008b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e010      	b.n	80089ce <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80089ac:	897b      	ldrh	r3, [r7, #10]
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	4908      	ldr	r1, [pc, #32]	; (80089dc <I2C_MasterRequestWrite+0x100>)
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 f8e5 	bl	8008b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e000      	b.n	80089ce <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	00010008 	.word	0x00010008
 80089dc:	00010002 	.word	0x00010002

080089e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ec:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a02:	2200      	movs	r2, #0
 8008a04:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a12:	2200      	movs	r2, #0
 8008a14:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a24:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d003      	beq.n	8008a3c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a38:	2200      	movs	r2, #0
 8008a3a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d003      	beq.n	8008a4c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a48:	2200      	movs	r2, #0
 8008a4a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f022 0201 	bic.w	r2, r2, #1
 8008a5a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b60      	cmp	r3, #96	; 0x60
 8008a66:	d10e      	bne.n	8008a86 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f7fe fe21 	bl	80076c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a84:	e027      	b.n	8008ad6 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a86:	7afb      	ldrb	r3, [r7, #11]
 8008a88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008a8c:	2b28      	cmp	r3, #40	; 0x28
 8008a8e:	d117      	bne.n	8008ac0 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008aae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2228      	movs	r2, #40	; 0x28
 8008aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008abe:	e007      	b.n	8008ad0 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7fe fdee 	bl	80076b2 <HAL_I2C_ErrorCallback>
}
 8008ad6:	bf00      	nop
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b084      	sub	sp, #16
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	60f8      	str	r0, [r7, #12]
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	603b      	str	r3, [r7, #0]
 8008aea:	4613      	mov	r3, r2
 8008aec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008aee:	e025      	b.n	8008b3c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af6:	d021      	beq.n	8008b3c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af8:	f7fc fbd2 	bl	80052a0 <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d302      	bcc.n	8008b0e <I2C_WaitOnFlagUntilTimeout+0x30>
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d116      	bne.n	8008b3c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b28:	f043 0220 	orr.w	r2, r3, #32
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e023      	b.n	8008b84 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	0c1b      	lsrs	r3, r3, #16
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d10d      	bne.n	8008b62 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	43da      	mvns	r2, r3
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	4013      	ands	r3, r2
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bf0c      	ite	eq
 8008b58:	2301      	moveq	r3, #1
 8008b5a:	2300      	movne	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	e00c      	b.n	8008b7c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	43da      	mvns	r2, r3
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	bf0c      	ite	eq
 8008b74:	2301      	moveq	r3, #1
 8008b76:	2300      	movne	r3, #0
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d0b6      	beq.n	8008af0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b9a:	e051      	b.n	8008c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008baa:	d123      	bne.n	8008bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008bc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2220      	movs	r2, #32
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	f043 0204 	orr.w	r2, r3, #4
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e046      	b.n	8008c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfa:	d021      	beq.n	8008c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bfc:	f7fc fb50 	bl	80052a0 <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d302      	bcc.n	8008c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d116      	bne.n	8008c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2c:	f043 0220 	orr.w	r2, r3, #32
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e020      	b.n	8008c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	0c1b      	lsrs	r3, r3, #16
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d10c      	bne.n	8008c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	43da      	mvns	r2, r3
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	4013      	ands	r3, r2
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	bf14      	ite	ne
 8008c5c:	2301      	movne	r3, #1
 8008c5e:	2300      	moveq	r3, #0
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	e00b      	b.n	8008c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	43da      	mvns	r2, r3
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bf14      	ite	ne
 8008c76:	2301      	movne	r3, #1
 8008c78:	2300      	moveq	r3, #0
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d18d      	bne.n	8008b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c96:	e02d      	b.n	8008cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 f878 	bl	8008d8e <I2C_IsAcknowledgeFailed>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d001      	beq.n	8008ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e02d      	b.n	8008d04 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cae:	d021      	beq.n	8008cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cb0:	f7fc faf6 	bl	80052a0 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d302      	bcc.n	8008cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d116      	bne.n	8008cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2220      	movs	r2, #32
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce0:	f043 0220 	orr.w	r2, r3, #32
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e007      	b.n	8008d04 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cfe:	2b80      	cmp	r3, #128	; 0x80
 8008d00:	d1ca      	bne.n	8008c98 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008d18:	e02d      	b.n	8008d76 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 f837 	bl	8008d8e <I2C_IsAcknowledgeFailed>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e02d      	b.n	8008d86 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d30:	d021      	beq.n	8008d76 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d32:	f7fc fab5 	bl	80052a0 <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d302      	bcc.n	8008d48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d116      	bne.n	8008d76 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2220      	movs	r2, #32
 8008d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	f043 0220 	orr.w	r2, r3, #32
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e007      	b.n	8008d86 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	d1ca      	bne.n	8008d1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b083      	sub	sp, #12
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	695b      	ldr	r3, [r3, #20]
 8008d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008da4:	d11b      	bne.n	8008dde <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008dae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2220      	movs	r2, #32
 8008dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dca:	f043 0204 	orr.w	r2, r3, #4
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008dfc:	d103      	bne.n	8008e06 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008e04:	e007      	b.n	8008e16 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008e0e:	d102      	bne.n	8008e16 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2208      	movs	r2, #8
 8008e14:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
	...

08008e24 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e128      	b.n	8009088 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d109      	bne.n	8008e56 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a90      	ldr	r2, [pc, #576]	; (8009090 <HAL_I2S_Init+0x26c>)
 8008e4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7fb feaf 	bl	8004bb4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2202      	movs	r2, #2
 8008e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	69db      	ldr	r3, [r3, #28]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	6812      	ldr	r2, [r2, #0]
 8008e68:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008e6c:	f023 030f 	bic.w	r3, r3, #15
 8008e70:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2202      	movs	r2, #2
 8008e78:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d060      	beq.n	8008f44 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d102      	bne.n	8008e90 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008e8a:	2310      	movs	r3, #16
 8008e8c:	617b      	str	r3, [r7, #20]
 8008e8e:	e001      	b.n	8008e94 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008e90:	2320      	movs	r3, #32
 8008e92:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	2b20      	cmp	r3, #32
 8008e9a:	d802      	bhi.n	8008ea2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	005b      	lsls	r3, r3, #1
 8008ea0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8008ea2:	2001      	movs	r0, #1
 8008ea4:	f001 f9a2 	bl	800a1ec <HAL_RCCEx_GetPeriphCLKFreq>
 8008ea8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eb2:	d125      	bne.n	8008f00 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d010      	beq.n	8008ede <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	461a      	mov	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed8:	3305      	adds	r3, #5
 8008eda:	613b      	str	r3, [r7, #16]
 8008edc:	e01f      	b.n	8008f1e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	00db      	lsls	r3, r3, #3
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ee8:	4613      	mov	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	005b      	lsls	r3, r3, #1
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008efa:	3305      	adds	r3, #5
 8008efc:	613b      	str	r3, [r7, #16]
 8008efe:	e00e      	b.n	8008f1e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f08:	4613      	mov	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	005b      	lsls	r3, r3, #1
 8008f10:	461a      	mov	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f1a:	3305      	adds	r3, #5
 8008f1c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	4a5c      	ldr	r2, [pc, #368]	; (8009094 <HAL_I2S_Init+0x270>)
 8008f22:	fba2 2303 	umull	r2, r3, r2, r3
 8008f26:	08db      	lsrs	r3, r3, #3
 8008f28:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	085b      	lsrs	r3, r3, #1
 8008f3a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	021b      	lsls	r3, r3, #8
 8008f40:	61bb      	str	r3, [r7, #24]
 8008f42:	e003      	b.n	8008f4c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008f44:	2302      	movs	r3, #2
 8008f46:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d902      	bls.n	8008f58 <HAL_I2S_Init+0x134>
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	2bff      	cmp	r3, #255	; 0xff
 8008f56:	d907      	bls.n	8008f68 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5c:	f043 0210 	orr.w	r2, r3, #16
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e08f      	b.n	8009088 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	691a      	ldr	r2, [r3, #16]
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	ea42 0103 	orr.w	r1, r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	69fa      	ldr	r2, [r7, #28]
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008f86:	f023 030f 	bic.w	r3, r3, #15
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	6851      	ldr	r1, [r2, #4]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6892      	ldr	r2, [r2, #8]
 8008f92:	4311      	orrs	r1, r2
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	68d2      	ldr	r2, [r2, #12]
 8008f98:	4311      	orrs	r1, r2
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	6992      	ldr	r2, [r2, #24]
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	431a      	orrs	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008faa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a1b      	ldr	r3, [r3, #32]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d161      	bne.n	8009078 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a38      	ldr	r2, [pc, #224]	; (8009098 <HAL_I2S_Init+0x274>)
 8008fb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a37      	ldr	r2, [pc, #220]	; (800909c <HAL_I2S_Init+0x278>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d101      	bne.n	8008fc8 <HAL_I2S_Init+0x1a4>
 8008fc4:	4b36      	ldr	r3, [pc, #216]	; (80090a0 <HAL_I2S_Init+0x27c>)
 8008fc6:	e001      	b.n	8008fcc <HAL_I2S_Init+0x1a8>
 8008fc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	6812      	ldr	r2, [r2, #0]
 8008fd2:	4932      	ldr	r1, [pc, #200]	; (800909c <HAL_I2S_Init+0x278>)
 8008fd4:	428a      	cmp	r2, r1
 8008fd6:	d101      	bne.n	8008fdc <HAL_I2S_Init+0x1b8>
 8008fd8:	4a31      	ldr	r2, [pc, #196]	; (80090a0 <HAL_I2S_Init+0x27c>)
 8008fda:	e001      	b.n	8008fe0 <HAL_I2S_Init+0x1bc>
 8008fdc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8008fe0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008fe4:	f023 030f 	bic.w	r3, r3, #15
 8008fe8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a2b      	ldr	r2, [pc, #172]	; (800909c <HAL_I2S_Init+0x278>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d101      	bne.n	8008ff8 <HAL_I2S_Init+0x1d4>
 8008ff4:	4b2a      	ldr	r3, [pc, #168]	; (80090a0 <HAL_I2S_Init+0x27c>)
 8008ff6:	e001      	b.n	8008ffc <HAL_I2S_Init+0x1d8>
 8008ff8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a25      	ldr	r2, [pc, #148]	; (800909c <HAL_I2S_Init+0x278>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d101      	bne.n	800900e <HAL_I2S_Init+0x1ea>
 800900a:	4b25      	ldr	r3, [pc, #148]	; (80090a0 <HAL_I2S_Init+0x27c>)
 800900c:	e001      	b.n	8009012 <HAL_I2S_Init+0x1ee>
 800900e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800901e:	d003      	beq.n	8009028 <HAL_I2S_Init+0x204>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d103      	bne.n	8009030 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8009028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800902c:	613b      	str	r3, [r7, #16]
 800902e:	e001      	b.n	8009034 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8009030:	2300      	movs	r3, #0
 8009032:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	b299      	uxth	r1, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800904a:	4303      	orrs	r3, r0
 800904c:	b29b      	uxth	r3, r3
 800904e:	430b      	orrs	r3, r1
 8009050:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8009052:	4313      	orrs	r3, r2
 8009054:	b29a      	uxth	r2, r3
 8009056:	897b      	ldrh	r3, [r7, #10]
 8009058:	4313      	orrs	r3, r2
 800905a:	b29b      	uxth	r3, r3
 800905c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009060:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a0d      	ldr	r2, [pc, #52]	; (800909c <HAL_I2S_Init+0x278>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d101      	bne.n	8009070 <HAL_I2S_Init+0x24c>
 800906c:	4b0c      	ldr	r3, [pc, #48]	; (80090a0 <HAL_I2S_Init+0x27c>)
 800906e:	e001      	b.n	8009074 <HAL_I2S_Init+0x250>
 8009070:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009074:	897a      	ldrh	r2, [r7, #10]
 8009076:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3720      	adds	r7, #32
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	0800919b 	.word	0x0800919b
 8009094:	cccccccd 	.word	0xcccccccd
 8009098:	080092b1 	.word	0x080092b1
 800909c:	40003800 	.word	0x40003800
 80090a0:	40003400 	.word	0x40003400

080090a4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	881a      	ldrh	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f8:	1c9a      	adds	r2, r3, #2
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009102:	b29b      	uxth	r3, r3
 8009104:	3b01      	subs	r3, #1
 8009106:	b29a      	uxth	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009110:	b29b      	uxth	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10e      	bne.n	8009134 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009124:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff ffb8 	bl	80090a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68da      	ldr	r2, [r3, #12]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914e:	b292      	uxth	r2, r2
 8009150:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009156:	1c9a      	adds	r2, r3, #2
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009160:	b29b      	uxth	r3, r3
 8009162:	3b01      	subs	r3, #1
 8009164:	b29a      	uxth	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800916e:	b29b      	uxth	r3, r3
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10e      	bne.n	8009192 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009182:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff ff93 	bl	80090b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b086      	sub	sp, #24
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	d13a      	bne.n	800922c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f003 0301 	and.w	r3, r3, #1
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d109      	bne.n	80091d4 <I2S_IRQHandler+0x3a>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ca:	2b40      	cmp	r3, #64	; 0x40
 80091cc:	d102      	bne.n	80091d4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff ffb4 	bl	800913c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091da:	2b40      	cmp	r3, #64	; 0x40
 80091dc:	d126      	bne.n	800922c <I2S_IRQHandler+0x92>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	f003 0320 	and.w	r3, r3, #32
 80091e8:	2b20      	cmp	r3, #32
 80091ea:	d11f      	bne.n	800922c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80091fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80091fc:	2300      	movs	r3, #0
 80091fe:	613b      	str	r3, [r7, #16]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	613b      	str	r3, [r7, #16]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	613b      	str	r3, [r7, #16]
 8009210:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800921e:	f043 0202 	orr.w	r2, r3, #2
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff ff50 	bl	80090cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b03      	cmp	r3, #3
 8009236:	d136      	bne.n	80092a6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b02      	cmp	r3, #2
 8009240:	d109      	bne.n	8009256 <I2S_IRQHandler+0xbc>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800924c:	2b80      	cmp	r3, #128	; 0x80
 800924e:	d102      	bne.n	8009256 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff ff45 	bl	80090e0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f003 0308 	and.w	r3, r3, #8
 800925c:	2b08      	cmp	r3, #8
 800925e:	d122      	bne.n	80092a6 <I2S_IRQHandler+0x10c>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f003 0320 	and.w	r3, r3, #32
 800926a:	2b20      	cmp	r3, #32
 800926c:	d11b      	bne.n	80092a6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800927c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800927e:	2300      	movs	r3, #0
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	60fb      	str	r3, [r7, #12]
 800928a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009298:	f043 0204 	orr.w	r2, r3, #4
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7ff ff13 	bl	80090cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80092a6:	bf00      	nop
 80092a8:	3718      	adds	r7, #24
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
	...

080092b0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4aa2      	ldr	r2, [pc, #648]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d101      	bne.n	80092ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80092ca:	4ba2      	ldr	r3, [pc, #648]	; (8009554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80092cc:	e001      	b.n	80092d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80092ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a9b      	ldr	r2, [pc, #620]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d101      	bne.n	80092ec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80092e8:	4b9a      	ldr	r3, [pc, #616]	; (8009554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80092ea:	e001      	b.n	80092f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80092ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092fc:	d004      	beq.n	8009308 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	f040 8099 	bne.w	800943a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b02      	cmp	r3, #2
 8009310:	d107      	bne.n	8009322 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f925 	bl	800956c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	2b01      	cmp	r3, #1
 800932a:	d107      	bne.n	800933c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f9c8 	bl	80096cc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009342:	2b40      	cmp	r3, #64	; 0x40
 8009344:	d13a      	bne.n	80093bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f003 0320 	and.w	r3, r3, #32
 800934c:	2b00      	cmp	r3, #0
 800934e:	d035      	beq.n	80093bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a7e      	ldr	r2, [pc, #504]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d101      	bne.n	800935e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800935a:	4b7e      	ldr	r3, [pc, #504]	; (8009554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800935c:	e001      	b.n	8009362 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800935e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009362:	685a      	ldr	r2, [r3, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4979      	ldr	r1, [pc, #484]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800936a:	428b      	cmp	r3, r1
 800936c:	d101      	bne.n	8009372 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800936e:	4b79      	ldr	r3, [pc, #484]	; (8009554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009370:	e001      	b.n	8009376 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8009372:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009376:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800937a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800938a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800938c:	2300      	movs	r3, #0
 800938e:	60fb      	str	r3, [r7, #12]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	60fb      	str	r3, [r7, #12]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	60fb      	str	r3, [r7, #12]
 80093a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ae:	f043 0202 	orr.w	r2, r3, #2
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff fe88 	bl	80090cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	f003 0308 	and.w	r3, r3, #8
 80093c2:	2b08      	cmp	r3, #8
 80093c4:	f040 80be 	bne.w	8009544 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	f003 0320 	and.w	r3, r3, #32
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 80b8 	beq.w	8009544 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80093e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a59      	ldr	r2, [pc, #356]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d101      	bne.n	80093f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80093ee:	4b59      	ldr	r3, [pc, #356]	; (8009554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80093f0:	e001      	b.n	80093f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80093f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4954      	ldr	r1, [pc, #336]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80093fe:	428b      	cmp	r3, r1
 8009400:	d101      	bne.n	8009406 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8009402:	4b54      	ldr	r3, [pc, #336]	; (8009554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009404:	e001      	b.n	800940a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8009406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800940a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800940e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009410:	2300      	movs	r3, #0
 8009412:	60bb      	str	r3, [r7, #8]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	60bb      	str	r3, [r7, #8]
 800941c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800942a:	f043 0204 	orr.w	r2, r3, #4
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff fe4a 	bl	80090cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009438:	e084      	b.n	8009544 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b02      	cmp	r3, #2
 8009442:	d107      	bne.n	8009454 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800944a:	2b00      	cmp	r3, #0
 800944c:	d002      	beq.n	8009454 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f8be 	bl	80095d0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	f003 0301 	and.w	r3, r3, #1
 800945a:	2b01      	cmp	r3, #1
 800945c:	d107      	bne.n	800946e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f8fd 	bl	8009668 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009474:	2b40      	cmp	r3, #64	; 0x40
 8009476:	d12f      	bne.n	80094d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f003 0320 	and.w	r3, r3, #32
 800947e:	2b00      	cmp	r3, #0
 8009480:	d02a      	beq.n	80094d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009490:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a2e      	ldr	r2, [pc, #184]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d101      	bne.n	80094a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800949c:	4b2d      	ldr	r3, [pc, #180]	; (8009554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800949e:	e001      	b.n	80094a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80094a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4929      	ldr	r1, [pc, #164]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80094ac:	428b      	cmp	r3, r1
 80094ae:	d101      	bne.n	80094b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80094b0:	4b28      	ldr	r3, [pc, #160]	; (8009554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80094b2:	e001      	b.n	80094b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80094b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80094bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ca:	f043 0202 	orr.w	r2, r3, #2
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff fdfa 	bl	80090cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	f003 0308 	and.w	r3, r3, #8
 80094de:	2b08      	cmp	r3, #8
 80094e0:	d131      	bne.n	8009546 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f003 0320 	and.w	r3, r3, #32
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d02c      	beq.n	8009546 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a17      	ldr	r2, [pc, #92]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d101      	bne.n	80094fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80094f6:	4b17      	ldr	r3, [pc, #92]	; (8009554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80094f8:	e001      	b.n	80094fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80094fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4912      	ldr	r1, [pc, #72]	; (8009550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009506:	428b      	cmp	r3, r1
 8009508:	d101      	bne.n	800950e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800950a:	4b12      	ldr	r3, [pc, #72]	; (8009554 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800950c:	e001      	b.n	8009512 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800950e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009512:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009516:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009526:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009534:	f043 0204 	orr.w	r2, r3, #4
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff fdc5 	bl	80090cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009542:	e000      	b.n	8009546 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009544:	bf00      	nop
}
 8009546:	bf00      	nop
 8009548:	3720      	adds	r7, #32
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	40003800 	.word	0x40003800
 8009554:	40003400 	.word	0x40003400

08009558 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009578:	1c99      	adds	r1, r3, #2
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	6251      	str	r1, [r2, #36]	; 0x24
 800957e:	881a      	ldrh	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800958a:	b29b      	uxth	r3, r3
 800958c:	3b01      	subs	r3, #1
 800958e:	b29a      	uxth	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009598:	b29b      	uxth	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d113      	bne.n	80095c6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685a      	ldr	r2, [r3, #4]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80095ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d106      	bne.n	80095c6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff ffc9 	bl	8009558 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80095c6:	bf00      	nop
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	1c99      	adds	r1, r3, #2
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	6251      	str	r1, [r2, #36]	; 0x24
 80095e2:	8819      	ldrh	r1, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a1d      	ldr	r2, [pc, #116]	; (8009660 <I2SEx_TxISR_I2SExt+0x90>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d101      	bne.n	80095f2 <I2SEx_TxISR_I2SExt+0x22>
 80095ee:	4b1d      	ldr	r3, [pc, #116]	; (8009664 <I2SEx_TxISR_I2SExt+0x94>)
 80095f0:	e001      	b.n	80095f6 <I2SEx_TxISR_I2SExt+0x26>
 80095f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80095f6:	460a      	mov	r2, r1
 80095f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095fe:	b29b      	uxth	r3, r3
 8009600:	3b01      	subs	r3, #1
 8009602:	b29a      	uxth	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800960c:	b29b      	uxth	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d121      	bne.n	8009656 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a12      	ldr	r2, [pc, #72]	; (8009660 <I2SEx_TxISR_I2SExt+0x90>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d101      	bne.n	8009620 <I2SEx_TxISR_I2SExt+0x50>
 800961c:	4b11      	ldr	r3, [pc, #68]	; (8009664 <I2SEx_TxISR_I2SExt+0x94>)
 800961e:	e001      	b.n	8009624 <I2SEx_TxISR_I2SExt+0x54>
 8009620:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	490d      	ldr	r1, [pc, #52]	; (8009660 <I2SEx_TxISR_I2SExt+0x90>)
 800962c:	428b      	cmp	r3, r1
 800962e:	d101      	bne.n	8009634 <I2SEx_TxISR_I2SExt+0x64>
 8009630:	4b0c      	ldr	r3, [pc, #48]	; (8009664 <I2SEx_TxISR_I2SExt+0x94>)
 8009632:	e001      	b.n	8009638 <I2SEx_TxISR_I2SExt+0x68>
 8009634:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009638:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800963c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009642:	b29b      	uxth	r3, r3
 8009644:	2b00      	cmp	r3, #0
 8009646:	d106      	bne.n	8009656 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff ff81 	bl	8009558 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009656:	bf00      	nop
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	40003800 	.word	0x40003800
 8009664:	40003400 	.word	0x40003400

08009668 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68d8      	ldr	r0, [r3, #12]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967a:	1c99      	adds	r1, r3, #2
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8009680:	b282      	uxth	r2, r0
 8009682:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009688:	b29b      	uxth	r3, r3
 800968a:	3b01      	subs	r3, #1
 800968c:	b29a      	uxth	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009696:	b29b      	uxth	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	d113      	bne.n	80096c4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	685a      	ldr	r2, [r3, #4]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80096aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d106      	bne.n	80096c4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7ff ff4a 	bl	8009558 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a20      	ldr	r2, [pc, #128]	; (800975c <I2SEx_RxISR_I2SExt+0x90>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d101      	bne.n	80096e2 <I2SEx_RxISR_I2SExt+0x16>
 80096de:	4b20      	ldr	r3, [pc, #128]	; (8009760 <I2SEx_RxISR_I2SExt+0x94>)
 80096e0:	e001      	b.n	80096e6 <I2SEx_RxISR_I2SExt+0x1a>
 80096e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80096e6:	68d8      	ldr	r0, [r3, #12]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ec:	1c99      	adds	r1, r3, #2
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80096f2:	b282      	uxth	r2, r0
 80096f4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	3b01      	subs	r3, #1
 80096fe:	b29a      	uxth	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009708:	b29b      	uxth	r3, r3
 800970a:	2b00      	cmp	r3, #0
 800970c:	d121      	bne.n	8009752 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a12      	ldr	r2, [pc, #72]	; (800975c <I2SEx_RxISR_I2SExt+0x90>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d101      	bne.n	800971c <I2SEx_RxISR_I2SExt+0x50>
 8009718:	4b11      	ldr	r3, [pc, #68]	; (8009760 <I2SEx_RxISR_I2SExt+0x94>)
 800971a:	e001      	b.n	8009720 <I2SEx_RxISR_I2SExt+0x54>
 800971c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	490d      	ldr	r1, [pc, #52]	; (800975c <I2SEx_RxISR_I2SExt+0x90>)
 8009728:	428b      	cmp	r3, r1
 800972a:	d101      	bne.n	8009730 <I2SEx_RxISR_I2SExt+0x64>
 800972c:	4b0c      	ldr	r3, [pc, #48]	; (8009760 <I2SEx_RxISR_I2SExt+0x94>)
 800972e:	e001      	b.n	8009734 <I2SEx_RxISR_I2SExt+0x68>
 8009730:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009734:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009738:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800973e:	b29b      	uxth	r3, r3
 8009740:	2b00      	cmp	r3, #0
 8009742:	d106      	bne.n	8009752 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7ff ff03 	bl	8009558 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009752:	bf00      	nop
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	40003800 	.word	0x40003800
 8009760:	40003400 	.word	0x40003400

08009764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e25b      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b00      	cmp	r3, #0
 8009780:	d075      	beq.n	800986e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009782:	4ba3      	ldr	r3, [pc, #652]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f003 030c 	and.w	r3, r3, #12
 800978a:	2b04      	cmp	r3, #4
 800978c:	d00c      	beq.n	80097a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800978e:	4ba0      	ldr	r3, [pc, #640]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009796:	2b08      	cmp	r3, #8
 8009798:	d112      	bne.n	80097c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800979a:	4b9d      	ldr	r3, [pc, #628]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097a6:	d10b      	bne.n	80097c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097a8:	4b99      	ldr	r3, [pc, #612]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d05b      	beq.n	800986c <HAL_RCC_OscConfig+0x108>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d157      	bne.n	800986c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e236      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097c8:	d106      	bne.n	80097d8 <HAL_RCC_OscConfig+0x74>
 80097ca:	4b91      	ldr	r3, [pc, #580]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a90      	ldr	r2, [pc, #576]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097d4:	6013      	str	r3, [r2, #0]
 80097d6:	e01d      	b.n	8009814 <HAL_RCC_OscConfig+0xb0>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097e0:	d10c      	bne.n	80097fc <HAL_RCC_OscConfig+0x98>
 80097e2:	4b8b      	ldr	r3, [pc, #556]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a8a      	ldr	r2, [pc, #552]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	4b88      	ldr	r3, [pc, #544]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a87      	ldr	r2, [pc, #540]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097f8:	6013      	str	r3, [r2, #0]
 80097fa:	e00b      	b.n	8009814 <HAL_RCC_OscConfig+0xb0>
 80097fc:	4b84      	ldr	r3, [pc, #528]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a83      	ldr	r2, [pc, #524]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009806:	6013      	str	r3, [r2, #0]
 8009808:	4b81      	ldr	r3, [pc, #516]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a80      	ldr	r2, [pc, #512]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 800980e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d013      	beq.n	8009844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800981c:	f7fb fd40 	bl	80052a0 <HAL_GetTick>
 8009820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009822:	e008      	b.n	8009836 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009824:	f7fb fd3c 	bl	80052a0 <HAL_GetTick>
 8009828:	4602      	mov	r2, r0
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	2b64      	cmp	r3, #100	; 0x64
 8009830:	d901      	bls.n	8009836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e1fb      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009836:	4b76      	ldr	r3, [pc, #472]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0f0      	beq.n	8009824 <HAL_RCC_OscConfig+0xc0>
 8009842:	e014      	b.n	800986e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009844:	f7fb fd2c 	bl	80052a0 <HAL_GetTick>
 8009848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800984a:	e008      	b.n	800985e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800984c:	f7fb fd28 	bl	80052a0 <HAL_GetTick>
 8009850:	4602      	mov	r2, r0
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	2b64      	cmp	r3, #100	; 0x64
 8009858:	d901      	bls.n	800985e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800985a:	2303      	movs	r3, #3
 800985c:	e1e7      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800985e:	4b6c      	ldr	r3, [pc, #432]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1f0      	bne.n	800984c <HAL_RCC_OscConfig+0xe8>
 800986a:	e000      	b.n	800986e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800986c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 0302 	and.w	r3, r3, #2
 8009876:	2b00      	cmp	r3, #0
 8009878:	d063      	beq.n	8009942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800987a:	4b65      	ldr	r3, [pc, #404]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	f003 030c 	and.w	r3, r3, #12
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00b      	beq.n	800989e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009886:	4b62      	ldr	r3, [pc, #392]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800988e:	2b08      	cmp	r3, #8
 8009890:	d11c      	bne.n	80098cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009892:	4b5f      	ldr	r3, [pc, #380]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d116      	bne.n	80098cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800989e:	4b5c      	ldr	r3, [pc, #368]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 0302 	and.w	r3, r3, #2
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d005      	beq.n	80098b6 <HAL_RCC_OscConfig+0x152>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d001      	beq.n	80098b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e1bb      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098b6:	4b56      	ldr	r3, [pc, #344]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	00db      	lsls	r3, r3, #3
 80098c4:	4952      	ldr	r1, [pc, #328]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098ca:	e03a      	b.n	8009942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d020      	beq.n	8009916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80098d4:	4b4f      	ldr	r3, [pc, #316]	; (8009a14 <HAL_RCC_OscConfig+0x2b0>)
 80098d6:	2201      	movs	r2, #1
 80098d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098da:	f7fb fce1 	bl	80052a0 <HAL_GetTick>
 80098de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098e0:	e008      	b.n	80098f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098e2:	f7fb fcdd 	bl	80052a0 <HAL_GetTick>
 80098e6:	4602      	mov	r2, r0
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d901      	bls.n	80098f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e19c      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098f4:	4b46      	ldr	r3, [pc, #280]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0302 	and.w	r3, r3, #2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d0f0      	beq.n	80098e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009900:	4b43      	ldr	r3, [pc, #268]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	00db      	lsls	r3, r3, #3
 800990e:	4940      	ldr	r1, [pc, #256]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009910:	4313      	orrs	r3, r2
 8009912:	600b      	str	r3, [r1, #0]
 8009914:	e015      	b.n	8009942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009916:	4b3f      	ldr	r3, [pc, #252]	; (8009a14 <HAL_RCC_OscConfig+0x2b0>)
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800991c:	f7fb fcc0 	bl	80052a0 <HAL_GetTick>
 8009920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009922:	e008      	b.n	8009936 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009924:	f7fb fcbc 	bl	80052a0 <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	2b02      	cmp	r3, #2
 8009930:	d901      	bls.n	8009936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e17b      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009936:	4b36      	ldr	r3, [pc, #216]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0302 	and.w	r3, r3, #2
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1f0      	bne.n	8009924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0308 	and.w	r3, r3, #8
 800994a:	2b00      	cmp	r3, #0
 800994c:	d030      	beq.n	80099b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d016      	beq.n	8009984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009956:	4b30      	ldr	r3, [pc, #192]	; (8009a18 <HAL_RCC_OscConfig+0x2b4>)
 8009958:	2201      	movs	r2, #1
 800995a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800995c:	f7fb fca0 	bl	80052a0 <HAL_GetTick>
 8009960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009962:	e008      	b.n	8009976 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009964:	f7fb fc9c 	bl	80052a0 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	2b02      	cmp	r3, #2
 8009970:	d901      	bls.n	8009976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e15b      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009976:	4b26      	ldr	r3, [pc, #152]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800997a:	f003 0302 	and.w	r3, r3, #2
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0f0      	beq.n	8009964 <HAL_RCC_OscConfig+0x200>
 8009982:	e015      	b.n	80099b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009984:	4b24      	ldr	r3, [pc, #144]	; (8009a18 <HAL_RCC_OscConfig+0x2b4>)
 8009986:	2200      	movs	r2, #0
 8009988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800998a:	f7fb fc89 	bl	80052a0 <HAL_GetTick>
 800998e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009990:	e008      	b.n	80099a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009992:	f7fb fc85 	bl	80052a0 <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	2b02      	cmp	r3, #2
 800999e:	d901      	bls.n	80099a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e144      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099a4:	4b1a      	ldr	r3, [pc, #104]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80099a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099a8:	f003 0302 	and.w	r3, r3, #2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1f0      	bne.n	8009992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0304 	and.w	r3, r3, #4
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 80a0 	beq.w	8009afe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099be:	2300      	movs	r3, #0
 80099c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099c2:	4b13      	ldr	r3, [pc, #76]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80099c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10f      	bne.n	80099ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099ce:	2300      	movs	r3, #0
 80099d0:	60bb      	str	r3, [r7, #8]
 80099d2:	4b0f      	ldr	r3, [pc, #60]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	4a0e      	ldr	r2, [pc, #56]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80099d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099dc:	6413      	str	r3, [r2, #64]	; 0x40
 80099de:	4b0c      	ldr	r3, [pc, #48]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80099e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099e6:	60bb      	str	r3, [r7, #8]
 80099e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099ea:	2301      	movs	r3, #1
 80099ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099ee:	4b0b      	ldr	r3, [pc, #44]	; (8009a1c <HAL_RCC_OscConfig+0x2b8>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d121      	bne.n	8009a3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099fa:	4b08      	ldr	r3, [pc, #32]	; (8009a1c <HAL_RCC_OscConfig+0x2b8>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a07      	ldr	r2, [pc, #28]	; (8009a1c <HAL_RCC_OscConfig+0x2b8>)
 8009a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a06:	f7fb fc4b 	bl	80052a0 <HAL_GetTick>
 8009a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a0c:	e011      	b.n	8009a32 <HAL_RCC_OscConfig+0x2ce>
 8009a0e:	bf00      	nop
 8009a10:	40023800 	.word	0x40023800
 8009a14:	42470000 	.word	0x42470000
 8009a18:	42470e80 	.word	0x42470e80
 8009a1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a20:	f7fb fc3e 	bl	80052a0 <HAL_GetTick>
 8009a24:	4602      	mov	r2, r0
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d901      	bls.n	8009a32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e0fd      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a32:	4b81      	ldr	r3, [pc, #516]	; (8009c38 <HAL_RCC_OscConfig+0x4d4>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d0f0      	beq.n	8009a20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d106      	bne.n	8009a54 <HAL_RCC_OscConfig+0x2f0>
 8009a46:	4b7d      	ldr	r3, [pc, #500]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a4a:	4a7c      	ldr	r2, [pc, #496]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a4c:	f043 0301 	orr.w	r3, r3, #1
 8009a50:	6713      	str	r3, [r2, #112]	; 0x70
 8009a52:	e01c      	b.n	8009a8e <HAL_RCC_OscConfig+0x32a>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	2b05      	cmp	r3, #5
 8009a5a:	d10c      	bne.n	8009a76 <HAL_RCC_OscConfig+0x312>
 8009a5c:	4b77      	ldr	r3, [pc, #476]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a60:	4a76      	ldr	r2, [pc, #472]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a62:	f043 0304 	orr.w	r3, r3, #4
 8009a66:	6713      	str	r3, [r2, #112]	; 0x70
 8009a68:	4b74      	ldr	r3, [pc, #464]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a6c:	4a73      	ldr	r2, [pc, #460]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a6e:	f043 0301 	orr.w	r3, r3, #1
 8009a72:	6713      	str	r3, [r2, #112]	; 0x70
 8009a74:	e00b      	b.n	8009a8e <HAL_RCC_OscConfig+0x32a>
 8009a76:	4b71      	ldr	r3, [pc, #452]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7a:	4a70      	ldr	r2, [pc, #448]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a7c:	f023 0301 	bic.w	r3, r3, #1
 8009a80:	6713      	str	r3, [r2, #112]	; 0x70
 8009a82:	4b6e      	ldr	r3, [pc, #440]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a86:	4a6d      	ldr	r2, [pc, #436]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a88:	f023 0304 	bic.w	r3, r3, #4
 8009a8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d015      	beq.n	8009ac2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a96:	f7fb fc03 	bl	80052a0 <HAL_GetTick>
 8009a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a9c:	e00a      	b.n	8009ab4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a9e:	f7fb fbff 	bl	80052a0 <HAL_GetTick>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d901      	bls.n	8009ab4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e0bc      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ab4:	4b61      	ldr	r3, [pc, #388]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab8:	f003 0302 	and.w	r3, r3, #2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d0ee      	beq.n	8009a9e <HAL_RCC_OscConfig+0x33a>
 8009ac0:	e014      	b.n	8009aec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ac2:	f7fb fbed 	bl	80052a0 <HAL_GetTick>
 8009ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ac8:	e00a      	b.n	8009ae0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009aca:	f7fb fbe9 	bl	80052a0 <HAL_GetTick>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	1ad3      	subs	r3, r2, r3
 8009ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d901      	bls.n	8009ae0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e0a6      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ae0:	4b56      	ldr	r3, [pc, #344]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae4:	f003 0302 	and.w	r3, r3, #2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1ee      	bne.n	8009aca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009aec:	7dfb      	ldrb	r3, [r7, #23]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d105      	bne.n	8009afe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009af2:	4b52      	ldr	r3, [pc, #328]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af6:	4a51      	ldr	r2, [pc, #324]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009afc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 8092 	beq.w	8009c2c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b08:	4b4c      	ldr	r3, [pc, #304]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f003 030c 	and.w	r3, r3, #12
 8009b10:	2b08      	cmp	r3, #8
 8009b12:	d05c      	beq.n	8009bce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d141      	bne.n	8009ba0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b1c:	4b48      	ldr	r3, [pc, #288]	; (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b22:	f7fb fbbd 	bl	80052a0 <HAL_GetTick>
 8009b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b28:	e008      	b.n	8009b3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b2a:	f7fb fbb9 	bl	80052a0 <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d901      	bls.n	8009b3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e078      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b3c:	4b3f      	ldr	r3, [pc, #252]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1f0      	bne.n	8009b2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	69da      	ldr	r2, [r3, #28]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	431a      	orrs	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b56:	019b      	lsls	r3, r3, #6
 8009b58:	431a      	orrs	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5e:	085b      	lsrs	r3, r3, #1
 8009b60:	3b01      	subs	r3, #1
 8009b62:	041b      	lsls	r3, r3, #16
 8009b64:	431a      	orrs	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6a:	061b      	lsls	r3, r3, #24
 8009b6c:	4933      	ldr	r1, [pc, #204]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b72:	4b33      	ldr	r3, [pc, #204]	; (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009b74:	2201      	movs	r2, #1
 8009b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b78:	f7fb fb92 	bl	80052a0 <HAL_GetTick>
 8009b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b7e:	e008      	b.n	8009b92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b80:	f7fb fb8e 	bl	80052a0 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e04d      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b92:	4b2a      	ldr	r3, [pc, #168]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0f0      	beq.n	8009b80 <HAL_RCC_OscConfig+0x41c>
 8009b9e:	e045      	b.n	8009c2c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ba0:	4b27      	ldr	r3, [pc, #156]	; (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ba6:	f7fb fb7b 	bl	80052a0 <HAL_GetTick>
 8009baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bac:	e008      	b.n	8009bc0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bae:	f7fb fb77 	bl	80052a0 <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d901      	bls.n	8009bc0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e036      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bc0:	4b1e      	ldr	r3, [pc, #120]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1f0      	bne.n	8009bae <HAL_RCC_OscConfig+0x44a>
 8009bcc:	e02e      	b.n	8009c2c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d101      	bne.n	8009bda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e029      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009bda:	4b18      	ldr	r3, [pc, #96]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d11c      	bne.n	8009c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d115      	bne.n	8009c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009c02:	4013      	ands	r3, r2
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d10d      	bne.n	8009c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d106      	bne.n	8009c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d001      	beq.n	8009c2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e000      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3718      	adds	r7, #24
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	40007000 	.word	0x40007000
 8009c3c:	40023800 	.word	0x40023800
 8009c40:	42470060 	.word	0x42470060

08009c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e0cc      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c58:	4b68      	ldr	r3, [pc, #416]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 030f 	and.w	r3, r3, #15
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d90c      	bls.n	8009c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c66:	4b65      	ldr	r3, [pc, #404]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	b2d2      	uxtb	r2, r2
 8009c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c6e:	4b63      	ldr	r3, [pc, #396]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 030f 	and.w	r3, r3, #15
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d001      	beq.n	8009c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e0b8      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0302 	and.w	r3, r3, #2
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d020      	beq.n	8009cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 0304 	and.w	r3, r3, #4
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d005      	beq.n	8009ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c98:	4b59      	ldr	r3, [pc, #356]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	4a58      	ldr	r2, [pc, #352]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009ca2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 0308 	and.w	r3, r3, #8
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d005      	beq.n	8009cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009cb0:	4b53      	ldr	r3, [pc, #332]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	4a52      	ldr	r2, [pc, #328]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cbc:	4b50      	ldr	r3, [pc, #320]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	494d      	ldr	r1, [pc, #308]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d044      	beq.n	8009d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d107      	bne.n	8009cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ce2:	4b47      	ldr	r3, [pc, #284]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d119      	bne.n	8009d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e07f      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d003      	beq.n	8009d02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cfe:	2b03      	cmp	r3, #3
 8009d00:	d107      	bne.n	8009d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d02:	4b3f      	ldr	r3, [pc, #252]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d109      	bne.n	8009d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e06f      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d12:	4b3b      	ldr	r3, [pc, #236]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0302 	and.w	r3, r3, #2
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e067      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d22:	4b37      	ldr	r3, [pc, #220]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f023 0203 	bic.w	r2, r3, #3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	4934      	ldr	r1, [pc, #208]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d30:	4313      	orrs	r3, r2
 8009d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d34:	f7fb fab4 	bl	80052a0 <HAL_GetTick>
 8009d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d3a:	e00a      	b.n	8009d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d3c:	f7fb fab0 	bl	80052a0 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d901      	bls.n	8009d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	e04f      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d52:	4b2b      	ldr	r3, [pc, #172]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	f003 020c 	and.w	r2, r3, #12
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d1eb      	bne.n	8009d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d64:	4b25      	ldr	r3, [pc, #148]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 030f 	and.w	r3, r3, #15
 8009d6c:	683a      	ldr	r2, [r7, #0]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d20c      	bcs.n	8009d8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d72:	4b22      	ldr	r3, [pc, #136]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	b2d2      	uxtb	r2, r2
 8009d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d7a:	4b20      	ldr	r3, [pc, #128]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 030f 	and.w	r3, r3, #15
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d001      	beq.n	8009d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e032      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d008      	beq.n	8009daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d98:	4b19      	ldr	r3, [pc, #100]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	4916      	ldr	r1, [pc, #88]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0308 	and.w	r3, r3, #8
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d009      	beq.n	8009dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009db6:	4b12      	ldr	r3, [pc, #72]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	00db      	lsls	r3, r3, #3
 8009dc4:	490e      	ldr	r1, [pc, #56]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009dca:	f000 f821 	bl	8009e10 <HAL_RCC_GetSysClockFreq>
 8009dce:	4601      	mov	r1, r0
 8009dd0:	4b0b      	ldr	r3, [pc, #44]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	091b      	lsrs	r3, r3, #4
 8009dd6:	f003 030f 	and.w	r3, r3, #15
 8009dda:	4a0a      	ldr	r2, [pc, #40]	; (8009e04 <HAL_RCC_ClockConfig+0x1c0>)
 8009ddc:	5cd3      	ldrb	r3, [r2, r3]
 8009dde:	fa21 f303 	lsr.w	r3, r1, r3
 8009de2:	4a09      	ldr	r2, [pc, #36]	; (8009e08 <HAL_RCC_ClockConfig+0x1c4>)
 8009de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009de6:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <HAL_RCC_ClockConfig+0x1c8>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fb fa14 	bl	8005218 <HAL_InitTick>

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	40023c00 	.word	0x40023c00
 8009e00:	40023800 	.word	0x40023800
 8009e04:	0800c9a8 	.word	0x0800c9a8
 8009e08:	20000064 	.word	0x20000064
 8009e0c:	20000068 	.word	0x20000068

08009e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	607b      	str	r3, [r7, #4]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009e22:	2300      	movs	r3, #0
 8009e24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e26:	4b63      	ldr	r3, [pc, #396]	; (8009fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	f003 030c 	and.w	r3, r3, #12
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d007      	beq.n	8009e42 <HAL_RCC_GetSysClockFreq+0x32>
 8009e32:	2b08      	cmp	r3, #8
 8009e34:	d008      	beq.n	8009e48 <HAL_RCC_GetSysClockFreq+0x38>
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f040 80b4 	bne.w	8009fa4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e3c:	4b5e      	ldr	r3, [pc, #376]	; (8009fb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009e3e:	60bb      	str	r3, [r7, #8]
       break;
 8009e40:	e0b3      	b.n	8009faa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e42:	4b5e      	ldr	r3, [pc, #376]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009e44:	60bb      	str	r3, [r7, #8]
      break;
 8009e46:	e0b0      	b.n	8009faa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e48:	4b5a      	ldr	r3, [pc, #360]	; (8009fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e52:	4b58      	ldr	r3, [pc, #352]	; (8009fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d04a      	beq.n	8009ef4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e5e:	4b55      	ldr	r3, [pc, #340]	; (8009fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	099b      	lsrs	r3, r3, #6
 8009e64:	f04f 0400 	mov.w	r4, #0
 8009e68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	ea03 0501 	and.w	r5, r3, r1
 8009e74:	ea04 0602 	and.w	r6, r4, r2
 8009e78:	4629      	mov	r1, r5
 8009e7a:	4632      	mov	r2, r6
 8009e7c:	f04f 0300 	mov.w	r3, #0
 8009e80:	f04f 0400 	mov.w	r4, #0
 8009e84:	0154      	lsls	r4, r2, #5
 8009e86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009e8a:	014b      	lsls	r3, r1, #5
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4622      	mov	r2, r4
 8009e90:	1b49      	subs	r1, r1, r5
 8009e92:	eb62 0206 	sbc.w	r2, r2, r6
 8009e96:	f04f 0300 	mov.w	r3, #0
 8009e9a:	f04f 0400 	mov.w	r4, #0
 8009e9e:	0194      	lsls	r4, r2, #6
 8009ea0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009ea4:	018b      	lsls	r3, r1, #6
 8009ea6:	1a5b      	subs	r3, r3, r1
 8009ea8:	eb64 0402 	sbc.w	r4, r4, r2
 8009eac:	f04f 0100 	mov.w	r1, #0
 8009eb0:	f04f 0200 	mov.w	r2, #0
 8009eb4:	00e2      	lsls	r2, r4, #3
 8009eb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009eba:	00d9      	lsls	r1, r3, #3
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4614      	mov	r4, r2
 8009ec0:	195b      	adds	r3, r3, r5
 8009ec2:	eb44 0406 	adc.w	r4, r4, r6
 8009ec6:	f04f 0100 	mov.w	r1, #0
 8009eca:	f04f 0200 	mov.w	r2, #0
 8009ece:	0262      	lsls	r2, r4, #9
 8009ed0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009ed4:	0259      	lsls	r1, r3, #9
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	4614      	mov	r4, r2
 8009eda:	4618      	mov	r0, r3
 8009edc:	4621      	mov	r1, r4
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f04f 0400 	mov.w	r4, #0
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	4623      	mov	r3, r4
 8009ee8:	f7f6 fd64 	bl	80009b4 <__aeabi_uldivmod>
 8009eec:	4603      	mov	r3, r0
 8009eee:	460c      	mov	r4, r1
 8009ef0:	60fb      	str	r3, [r7, #12]
 8009ef2:	e049      	b.n	8009f88 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ef4:	4b2f      	ldr	r3, [pc, #188]	; (8009fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	099b      	lsrs	r3, r3, #6
 8009efa:	f04f 0400 	mov.w	r4, #0
 8009efe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009f02:	f04f 0200 	mov.w	r2, #0
 8009f06:	ea03 0501 	and.w	r5, r3, r1
 8009f0a:	ea04 0602 	and.w	r6, r4, r2
 8009f0e:	4629      	mov	r1, r5
 8009f10:	4632      	mov	r2, r6
 8009f12:	f04f 0300 	mov.w	r3, #0
 8009f16:	f04f 0400 	mov.w	r4, #0
 8009f1a:	0154      	lsls	r4, r2, #5
 8009f1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009f20:	014b      	lsls	r3, r1, #5
 8009f22:	4619      	mov	r1, r3
 8009f24:	4622      	mov	r2, r4
 8009f26:	1b49      	subs	r1, r1, r5
 8009f28:	eb62 0206 	sbc.w	r2, r2, r6
 8009f2c:	f04f 0300 	mov.w	r3, #0
 8009f30:	f04f 0400 	mov.w	r4, #0
 8009f34:	0194      	lsls	r4, r2, #6
 8009f36:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009f3a:	018b      	lsls	r3, r1, #6
 8009f3c:	1a5b      	subs	r3, r3, r1
 8009f3e:	eb64 0402 	sbc.w	r4, r4, r2
 8009f42:	f04f 0100 	mov.w	r1, #0
 8009f46:	f04f 0200 	mov.w	r2, #0
 8009f4a:	00e2      	lsls	r2, r4, #3
 8009f4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009f50:	00d9      	lsls	r1, r3, #3
 8009f52:	460b      	mov	r3, r1
 8009f54:	4614      	mov	r4, r2
 8009f56:	195b      	adds	r3, r3, r5
 8009f58:	eb44 0406 	adc.w	r4, r4, r6
 8009f5c:	f04f 0100 	mov.w	r1, #0
 8009f60:	f04f 0200 	mov.w	r2, #0
 8009f64:	02a2      	lsls	r2, r4, #10
 8009f66:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009f6a:	0299      	lsls	r1, r3, #10
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4614      	mov	r4, r2
 8009f70:	4618      	mov	r0, r3
 8009f72:	4621      	mov	r1, r4
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f04f 0400 	mov.w	r4, #0
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	4623      	mov	r3, r4
 8009f7e:	f7f6 fd19 	bl	80009b4 <__aeabi_uldivmod>
 8009f82:	4603      	mov	r3, r0
 8009f84:	460c      	mov	r4, r1
 8009f86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009f88:	4b0a      	ldr	r3, [pc, #40]	; (8009fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	0c1b      	lsrs	r3, r3, #16
 8009f8e:	f003 0303 	and.w	r3, r3, #3
 8009f92:	3301      	adds	r3, #1
 8009f94:	005b      	lsls	r3, r3, #1
 8009f96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa0:	60bb      	str	r3, [r7, #8]
      break;
 8009fa2:	e002      	b.n	8009faa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fa4:	4b04      	ldr	r3, [pc, #16]	; (8009fb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009fa6:	60bb      	str	r3, [r7, #8]
      break;
 8009fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009faa:	68bb      	ldr	r3, [r7, #8]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb4:	40023800 	.word	0x40023800
 8009fb8:	00f42400 	.word	0x00f42400
 8009fbc:	007a1200 	.word	0x007a1200

08009fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fc4:	4b03      	ldr	r3, [pc, #12]	; (8009fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	20000064 	.word	0x20000064

08009fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009fdc:	f7ff fff0 	bl	8009fc0 <HAL_RCC_GetHCLKFreq>
 8009fe0:	4601      	mov	r1, r0
 8009fe2:	4b05      	ldr	r3, [pc, #20]	; (8009ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	0a9b      	lsrs	r3, r3, #10
 8009fe8:	f003 0307 	and.w	r3, r3, #7
 8009fec:	4a03      	ldr	r2, [pc, #12]	; (8009ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009fee:	5cd3      	ldrb	r3, [r2, r3]
 8009ff0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	40023800 	.word	0x40023800
 8009ffc:	0800c9b8 	.word	0x0800c9b8

0800a000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a004:	f7ff ffdc 	bl	8009fc0 <HAL_RCC_GetHCLKFreq>
 800a008:	4601      	mov	r1, r0
 800a00a:	4b05      	ldr	r3, [pc, #20]	; (800a020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	0b5b      	lsrs	r3, r3, #13
 800a010:	f003 0307 	and.w	r3, r3, #7
 800a014:	4a03      	ldr	r2, [pc, #12]	; (800a024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a016:	5cd3      	ldrb	r3, [r2, r3]
 800a018:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	40023800 	.word	0x40023800
 800a024:	0800c9b8 	.word	0x0800c9b8

0800a028 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a030:	2300      	movs	r3, #0
 800a032:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a034:	2300      	movs	r3, #0
 800a036:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b00      	cmp	r3, #0
 800a042:	d105      	bne.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d035      	beq.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a050:	4b62      	ldr	r3, [pc, #392]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a052:	2200      	movs	r2, #0
 800a054:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a056:	f7fb f923 	bl	80052a0 <HAL_GetTick>
 800a05a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a05c:	e008      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a05e:	f7fb f91f 	bl	80052a0 <HAL_GetTick>
 800a062:	4602      	mov	r2, r0
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d901      	bls.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e0b0      	b.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a070:	4b5b      	ldr	r3, [pc, #364]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1f0      	bne.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	019a      	lsls	r2, r3, #6
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	071b      	lsls	r3, r3, #28
 800a088:	4955      	ldr	r1, [pc, #340]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a090:	4b52      	ldr	r3, [pc, #328]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a092:	2201      	movs	r2, #1
 800a094:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a096:	f7fb f903 	bl	80052a0 <HAL_GetTick>
 800a09a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a09c:	e008      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a09e:	f7fb f8ff 	bl	80052a0 <HAL_GetTick>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d901      	bls.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e090      	b.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a0b0:	4b4b      	ldr	r3, [pc, #300]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d0f0      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 0302 	and.w	r3, r3, #2
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f000 8083 	beq.w	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	60fb      	str	r3, [r7, #12]
 800a0ce:	4b44      	ldr	r3, [pc, #272]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d2:	4a43      	ldr	r2, [pc, #268]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a0d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0d8:	6413      	str	r3, [r2, #64]	; 0x40
 800a0da:	4b41      	ldr	r3, [pc, #260]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0e2:	60fb      	str	r3, [r7, #12]
 800a0e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a0e6:	4b3f      	ldr	r3, [pc, #252]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a3e      	ldr	r2, [pc, #248]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a0ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a0f2:	f7fb f8d5 	bl	80052a0 <HAL_GetTick>
 800a0f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a0f8:	e008      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a0fa:	f7fb f8d1 	bl	80052a0 <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	2b02      	cmp	r3, #2
 800a106:	d901      	bls.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e062      	b.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a10c:	4b35      	ldr	r3, [pc, #212]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0f0      	beq.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a118:	4b31      	ldr	r3, [pc, #196]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a11a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a11c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a120:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d02f      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	429a      	cmp	r2, r3
 800a134:	d028      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a136:	4b2a      	ldr	r3, [pc, #168]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a13e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a140:	4b29      	ldr	r3, [pc, #164]	; (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a142:	2201      	movs	r2, #1
 800a144:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a146:	4b28      	ldr	r3, [pc, #160]	; (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a148:	2200      	movs	r2, #0
 800a14a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a14c:	4a24      	ldr	r2, [pc, #144]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a152:	4b23      	ldr	r3, [pc, #140]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a156:	f003 0301 	and.w	r3, r3, #1
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d114      	bne.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a15e:	f7fb f89f 	bl	80052a0 <HAL_GetTick>
 800a162:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a164:	e00a      	b.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a166:	f7fb f89b 	bl	80052a0 <HAL_GetTick>
 800a16a:	4602      	mov	r2, r0
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	f241 3288 	movw	r2, #5000	; 0x1388
 800a174:	4293      	cmp	r3, r2
 800a176:	d901      	bls.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a178:	2303      	movs	r3, #3
 800a17a:	e02a      	b.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a17c:	4b18      	ldr	r3, [pc, #96]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a17e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a180:	f003 0302 	and.w	r3, r3, #2
 800a184:	2b00      	cmp	r3, #0
 800a186:	d0ee      	beq.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a194:	d10d      	bne.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a196:	4b12      	ldr	r3, [pc, #72]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a1a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1aa:	490d      	ldr	r1, [pc, #52]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	608b      	str	r3, [r1, #8]
 800a1b0:	e005      	b.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a1b2:	4b0b      	ldr	r3, [pc, #44]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	4a0a      	ldr	r2, [pc, #40]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a1b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a1bc:	6093      	str	r3, [r2, #8]
 800a1be:	4b08      	ldr	r3, [pc, #32]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a1c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1ca:	4905      	ldr	r1, [pc, #20]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3718      	adds	r7, #24
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	42470068 	.word	0x42470068
 800a1e0:	40023800 	.word	0x40023800
 800a1e4:	40007000 	.word	0x40007000
 800a1e8:	42470e40 	.word	0x42470e40

0800a1ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b087      	sub	sp, #28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800a200:	2300      	movs	r3, #0
 800a202:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d13d      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800a20a:	4b22      	ldr	r3, [pc, #136]	; (800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a212:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d004      	beq.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d12f      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a21e:	4b1e      	ldr	r3, [pc, #120]	; (800a298 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a220:	617b      	str	r3, [r7, #20]
          break;
 800a222:	e02f      	b.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a224:	4b1b      	ldr	r3, [pc, #108]	; (800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a22c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a230:	d108      	bne.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a232:	4b18      	ldr	r3, [pc, #96]	; (800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a23a:	4a18      	ldr	r2, [pc, #96]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a23c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a240:	613b      	str	r3, [r7, #16]
 800a242:	e007      	b.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a244:	4b13      	ldr	r3, [pc, #76]	; (800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a24c:	4a14      	ldr	r2, [pc, #80]	; (800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a24e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a252:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a254:	4b0f      	ldr	r3, [pc, #60]	; (800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800a256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a25a:	099b      	lsrs	r3, r3, #6
 800a25c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	fb02 f303 	mul.w	r3, r2, r3
 800a266:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a268:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800a26a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a26e:	0f1b      	lsrs	r3, r3, #28
 800a270:	f003 0307 	and.w	r3, r3, #7
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	fbb2 f3f3 	udiv	r3, r2, r3
 800a27a:	617b      	str	r3, [r7, #20]
          break;
 800a27c:	e002      	b.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a27e:	2300      	movs	r3, #0
 800a280:	617b      	str	r3, [r7, #20]
          break;
 800a282:	bf00      	nop
        }
      }
      break;
 800a284:	bf00      	nop
    }
  }
  return frequency;
 800a286:	697b      	ldr	r3, [r7, #20]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	371c      	adds	r7, #28
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	40023800 	.word	0x40023800
 800a298:	00bb8000 	.word	0x00bb8000
 800a29c:	007a1200 	.word	0x007a1200
 800a2a0:	00f42400 	.word	0x00f42400

0800a2a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d101      	bne.n	800a2b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e056      	b.n	800a364 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d106      	bne.n	800a2d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7fa fd0b 	bl	8004cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2202      	movs	r2, #2
 800a2da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	431a      	orrs	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	431a      	orrs	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	431a      	orrs	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	695b      	ldr	r3, [r3, #20]
 800a308:	431a      	orrs	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a312:	431a      	orrs	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	431a      	orrs	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	ea42 0103 	orr.w	r1, r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	430a      	orrs	r2, r1
 800a32c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	0c1b      	lsrs	r3, r3, #16
 800a334:	f003 0104 	and.w	r1, r3, #4
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	430a      	orrs	r2, r1
 800a342:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	69da      	ldr	r2, [r3, #28]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a352:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	603b      	str	r3, [r7, #0]
 800a378:	4613      	mov	r3, r2
 800a37a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a386:	2b01      	cmp	r3, #1
 800a388:	d101      	bne.n	800a38e <HAL_SPI_Transmit+0x22>
 800a38a:	2302      	movs	r3, #2
 800a38c:	e11e      	b.n	800a5cc <HAL_SPI_Transmit+0x260>
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a396:	f7fa ff83 	bl	80052a0 <HAL_GetTick>
 800a39a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a39c:	88fb      	ldrh	r3, [r7, #6]
 800a39e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d002      	beq.n	800a3b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a3b0:	e103      	b.n	800a5ba <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <HAL_SPI_Transmit+0x52>
 800a3b8:	88fb      	ldrh	r3, [r7, #6]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d102      	bne.n	800a3c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a3c2:	e0fa      	b.n	800a5ba <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2203      	movs	r2, #3
 800a3c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	88fa      	ldrh	r2, [r7, #6]
 800a3dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	88fa      	ldrh	r2, [r7, #6]
 800a3e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a40a:	d107      	bne.n	800a41c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a41a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a426:	2b40      	cmp	r3, #64	; 0x40
 800a428:	d007      	beq.n	800a43a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a438:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a442:	d14b      	bne.n	800a4dc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d002      	beq.n	800a452 <HAL_SPI_Transmit+0xe6>
 800a44c:	8afb      	ldrh	r3, [r7, #22]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d13e      	bne.n	800a4d0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a456:	881a      	ldrh	r2, [r3, #0]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a462:	1c9a      	adds	r2, r3, #2
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	3b01      	subs	r3, #1
 800a470:	b29a      	uxth	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a476:	e02b      	b.n	800a4d0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	f003 0302 	and.w	r3, r3, #2
 800a482:	2b02      	cmp	r3, #2
 800a484:	d112      	bne.n	800a4ac <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48a:	881a      	ldrh	r2, [r3, #0]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a496:	1c9a      	adds	r2, r3, #2
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	86da      	strh	r2, [r3, #54]	; 0x36
 800a4aa:	e011      	b.n	800a4d0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4ac:	f7fa fef8 	bl	80052a0 <HAL_GetTick>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d803      	bhi.n	800a4c4 <HAL_SPI_Transmit+0x158>
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c2:	d102      	bne.n	800a4ca <HAL_SPI_Transmit+0x15e>
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d102      	bne.n	800a4d0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a4ce:	e074      	b.n	800a5ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1ce      	bne.n	800a478 <HAL_SPI_Transmit+0x10c>
 800a4da:	e04c      	b.n	800a576 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d002      	beq.n	800a4ea <HAL_SPI_Transmit+0x17e>
 800a4e4:	8afb      	ldrh	r3, [r7, #22]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d140      	bne.n	800a56c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	330c      	adds	r3, #12
 800a4f4:	7812      	ldrb	r2, [r2, #0]
 800a4f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fc:	1c5a      	adds	r2, r3, #1
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a506:	b29b      	uxth	r3, r3
 800a508:	3b01      	subs	r3, #1
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a510:	e02c      	b.n	800a56c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f003 0302 	and.w	r3, r3, #2
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d113      	bne.n	800a548 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	330c      	adds	r3, #12
 800a52a:	7812      	ldrb	r2, [r2, #0]
 800a52c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	3b01      	subs	r3, #1
 800a540:	b29a      	uxth	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	86da      	strh	r2, [r3, #54]	; 0x36
 800a546:	e011      	b.n	800a56c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a548:	f7fa feaa 	bl	80052a0 <HAL_GetTick>
 800a54c:	4602      	mov	r2, r0
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	683a      	ldr	r2, [r7, #0]
 800a554:	429a      	cmp	r2, r3
 800a556:	d803      	bhi.n	800a560 <HAL_SPI_Transmit+0x1f4>
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55e:	d102      	bne.n	800a566 <HAL_SPI_Transmit+0x1fa>
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d102      	bne.n	800a56c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a566:	2303      	movs	r3, #3
 800a568:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a56a:	e026      	b.n	800a5ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a570:	b29b      	uxth	r3, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1cd      	bne.n	800a512 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a576:	69ba      	ldr	r2, [r7, #24]
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f000 fa44 	bl	800aa08 <SPI_EndRxTxTransaction>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d002      	beq.n	800a58c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2220      	movs	r2, #32
 800a58a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10a      	bne.n	800a5aa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a594:	2300      	movs	r3, #0
 800a596:	613b      	str	r3, [r7, #16]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	613b      	str	r3, [r7, #16]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	613b      	str	r3, [r7, #16]
 800a5a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d002      	beq.n	800a5b8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	77fb      	strb	r3, [r7, #31]
 800a5b6:	e000      	b.n	800a5ba <HAL_SPI_Transmit+0x24e>
  }

error:
 800a5b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a5ca:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3720      	adds	r7, #32
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b08c      	sub	sp, #48	; 0x30
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
 800a5e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d101      	bne.n	800a5fa <HAL_SPI_TransmitReceive+0x26>
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	e18a      	b.n	800a910 <HAL_SPI_TransmitReceive+0x33c>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a602:	f7fa fe4d 	bl	80052a0 <HAL_GetTick>
 800a606:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a60e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a618:	887b      	ldrh	r3, [r7, #2]
 800a61a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a61c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a620:	2b01      	cmp	r3, #1
 800a622:	d00f      	beq.n	800a644 <HAL_SPI_TransmitReceive+0x70>
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a62a:	d107      	bne.n	800a63c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d103      	bne.n	800a63c <HAL_SPI_TransmitReceive+0x68>
 800a634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a638:	2b04      	cmp	r3, #4
 800a63a:	d003      	beq.n	800a644 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a63c:	2302      	movs	r3, #2
 800a63e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a642:	e15b      	b.n	800a8fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d005      	beq.n	800a656 <HAL_SPI_TransmitReceive+0x82>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d002      	beq.n	800a656 <HAL_SPI_TransmitReceive+0x82>
 800a650:	887b      	ldrh	r3, [r7, #2]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d103      	bne.n	800a65e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a65c:	e14e      	b.n	800a8fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a664:	b2db      	uxtb	r3, r3
 800a666:	2b04      	cmp	r3, #4
 800a668:	d003      	beq.n	800a672 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2205      	movs	r2, #5
 800a66e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	887a      	ldrh	r2, [r7, #2]
 800a682:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	887a      	ldrh	r2, [r7, #2]
 800a688:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	887a      	ldrh	r2, [r7, #2]
 800a694:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	887a      	ldrh	r2, [r7, #2]
 800a69a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6b2:	2b40      	cmp	r3, #64	; 0x40
 800a6b4:	d007      	beq.n	800a6c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6ce:	d178      	bne.n	800a7c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d002      	beq.n	800a6de <HAL_SPI_TransmitReceive+0x10a>
 800a6d8:	8b7b      	ldrh	r3, [r7, #26]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d166      	bne.n	800a7ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e2:	881a      	ldrh	r2, [r3, #0]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ee:	1c9a      	adds	r2, r3, #2
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a702:	e053      	b.n	800a7ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	f003 0302 	and.w	r3, r3, #2
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d11b      	bne.n	800a74a <HAL_SPI_TransmitReceive+0x176>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a716:	b29b      	uxth	r3, r3
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d016      	beq.n	800a74a <HAL_SPI_TransmitReceive+0x176>
 800a71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d113      	bne.n	800a74a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a726:	881a      	ldrh	r2, [r3, #0]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a732:	1c9a      	adds	r2, r3, #2
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	3b01      	subs	r3, #1
 800a740:	b29a      	uxth	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a746:	2300      	movs	r3, #0
 800a748:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	2b01      	cmp	r3, #1
 800a756:	d119      	bne.n	800a78c <HAL_SPI_TransmitReceive+0x1b8>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d014      	beq.n	800a78c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68da      	ldr	r2, [r3, #12]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76c:	b292      	uxth	r2, r2
 800a76e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a774:	1c9a      	adds	r2, r3, #2
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a77e:	b29b      	uxth	r3, r3
 800a780:	3b01      	subs	r3, #1
 800a782:	b29a      	uxth	r2, r3
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a788:	2301      	movs	r3, #1
 800a78a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a78c:	f7fa fd88 	bl	80052a0 <HAL_GetTick>
 800a790:	4602      	mov	r2, r0
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a798:	429a      	cmp	r2, r3
 800a79a:	d807      	bhi.n	800a7ac <HAL_SPI_TransmitReceive+0x1d8>
 800a79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a2:	d003      	beq.n	800a7ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a7aa:	e0a7      	b.n	800a8fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1a6      	bne.n	800a704 <HAL_SPI_TransmitReceive+0x130>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1a1      	bne.n	800a704 <HAL_SPI_TransmitReceive+0x130>
 800a7c0:	e07c      	b.n	800a8bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d002      	beq.n	800a7d0 <HAL_SPI_TransmitReceive+0x1fc>
 800a7ca:	8b7b      	ldrh	r3, [r7, #26]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d16b      	bne.n	800a8a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	330c      	adds	r3, #12
 800a7da:	7812      	ldrb	r2, [r2, #0]
 800a7dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e2:	1c5a      	adds	r2, r3, #1
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7f6:	e057      	b.n	800a8a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	f003 0302 	and.w	r3, r3, #2
 800a802:	2b02      	cmp	r3, #2
 800a804:	d11c      	bne.n	800a840 <HAL_SPI_TransmitReceive+0x26c>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d017      	beq.n	800a840 <HAL_SPI_TransmitReceive+0x26c>
 800a810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a812:	2b01      	cmp	r3, #1
 800a814:	d114      	bne.n	800a840 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	330c      	adds	r3, #12
 800a820:	7812      	ldrb	r2, [r2, #0]
 800a822:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a828:	1c5a      	adds	r2, r3, #1
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a832:	b29b      	uxth	r3, r3
 800a834:	3b01      	subs	r3, #1
 800a836:	b29a      	uxth	r2, r3
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a83c:	2300      	movs	r3, #0
 800a83e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	f003 0301 	and.w	r3, r3, #1
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d119      	bne.n	800a882 <HAL_SPI_TransmitReceive+0x2ae>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a852:	b29b      	uxth	r3, r3
 800a854:	2b00      	cmp	r3, #0
 800a856:	d014      	beq.n	800a882 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	68da      	ldr	r2, [r3, #12]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a862:	b2d2      	uxtb	r2, r2
 800a864:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a874:	b29b      	uxth	r3, r3
 800a876:	3b01      	subs	r3, #1
 800a878:	b29a      	uxth	r2, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a87e:	2301      	movs	r3, #1
 800a880:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a882:	f7fa fd0d 	bl	80052a0 <HAL_GetTick>
 800a886:	4602      	mov	r2, r0
 800a888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a88e:	429a      	cmp	r2, r3
 800a890:	d803      	bhi.n	800a89a <HAL_SPI_TransmitReceive+0x2c6>
 800a892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a898:	d102      	bne.n	800a8a0 <HAL_SPI_TransmitReceive+0x2cc>
 800a89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d103      	bne.n	800a8a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a8a6:	e029      	b.n	800a8fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1a2      	bne.n	800a7f8 <HAL_SPI_TransmitReceive+0x224>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d19d      	bne.n	800a7f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a8bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f000 f8a1 	bl	800aa08 <SPI_EndRxTxTransaction>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d006      	beq.n	800a8da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2220      	movs	r2, #32
 800a8d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a8d8:	e010      	b.n	800a8fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10b      	bne.n	800a8fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	617b      	str	r3, [r7, #20]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	617b      	str	r3, [r7, #20]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	617b      	str	r3, [r7, #20]
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	e000      	b.n	800a8fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a8fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a90c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a910:	4618      	mov	r0, r3
 800a912:	3730      	adds	r7, #48	; 0x30
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a926:	b2db      	uxtb	r3, r3
}
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	603b      	str	r3, [r7, #0]
 800a940:	4613      	mov	r3, r2
 800a942:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a944:	e04c      	b.n	800a9e0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94c:	d048      	beq.n	800a9e0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a94e:	f7fa fca7 	bl	80052a0 <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d902      	bls.n	800a964 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d13d      	bne.n	800a9e0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	685a      	ldr	r2, [r3, #4]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a972:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a97c:	d111      	bne.n	800a9a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a986:	d004      	beq.n	800a992 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a990:	d107      	bne.n	800a9a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9aa:	d10f      	bne.n	800a9cc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a9ba:	601a      	str	r2, [r3, #0]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a9ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	e00f      	b.n	800aa00 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	689a      	ldr	r2, [r3, #8]
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	bf0c      	ite	eq
 800a9f0:	2301      	moveq	r3, #1
 800a9f2:	2300      	movne	r3, #0
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	79fb      	ldrb	r3, [r7, #7]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d1a3      	bne.n	800a946 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af02      	add	r7, sp, #8
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aa14:	4b1b      	ldr	r3, [pc, #108]	; (800aa84 <SPI_EndRxTxTransaction+0x7c>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a1b      	ldr	r2, [pc, #108]	; (800aa88 <SPI_EndRxTxTransaction+0x80>)
 800aa1a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1e:	0d5b      	lsrs	r3, r3, #21
 800aa20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa24:	fb02 f303 	mul.w	r3, r2, r3
 800aa28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa32:	d112      	bne.n	800aa5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	2180      	movs	r1, #128	; 0x80
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f7ff ff78 	bl	800a934 <SPI_WaitFlagStateUntilTimeout>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d016      	beq.n	800aa78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa4e:	f043 0220 	orr.w	r2, r3, #32
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aa56:	2303      	movs	r3, #3
 800aa58:	e00f      	b.n	800aa7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00a      	beq.n	800aa76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa70:	2b80      	cmp	r3, #128	; 0x80
 800aa72:	d0f2      	beq.n	800aa5a <SPI_EndRxTxTransaction+0x52>
 800aa74:	e000      	b.n	800aa78 <SPI_EndRxTxTransaction+0x70>
        break;
 800aa76:	bf00      	nop
  }

  return HAL_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	20000064 	.word	0x20000064
 800aa88:	165e9f81 	.word	0x165e9f81

0800aa8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e01d      	b.n	800aada <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d106      	bne.n	800aab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7fa f962 	bl	8004d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2202      	movs	r2, #2
 800aabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	3304      	adds	r3, #4
 800aac8:	4619      	mov	r1, r3
 800aaca:	4610      	mov	r0, r2
 800aacc:	f000 fa40 	bl	800af50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aae2:	b480      	push	{r7}
 800aae4:	b085      	sub	sp, #20
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68da      	ldr	r2, [r3, #12]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f042 0201 	orr.w	r2, r2, #1
 800aaf8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	f003 0307 	and.w	r3, r3, #7
 800ab04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b06      	cmp	r3, #6
 800ab0a:	d007      	beq.n	800ab1c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f042 0201 	orr.w	r2, r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b083      	sub	sp, #12
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68da      	ldr	r2, [r3, #12]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f022 0201 	bic.w	r2, r2, #1
 800ab40:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	6a1a      	ldr	r2, [r3, #32]
 800ab48:	f241 1311 	movw	r3, #4369	; 0x1111
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10f      	bne.n	800ab72 <HAL_TIM_Base_Stop_IT+0x48>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6a1a      	ldr	r2, [r3, #32]
 800ab58:	f240 4344 	movw	r3, #1092	; 0x444
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d107      	bne.n	800ab72 <HAL_TIM_Base_Stop_IT+0x48>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f022 0201 	bic.w	r2, r2, #1
 800ab70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	f003 0302 	and.w	r3, r3, #2
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d122      	bne.n	800abdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	f003 0302 	and.w	r3, r3, #2
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d11b      	bne.n	800abdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f06f 0202 	mvn.w	r2, #2
 800abac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	699b      	ldr	r3, [r3, #24]
 800abba:	f003 0303 	and.w	r3, r3, #3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f9a5 	bl	800af12 <HAL_TIM_IC_CaptureCallback>
 800abc8:	e005      	b.n	800abd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 f997 	bl	800aefe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f9a8 	bl	800af26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	f003 0304 	and.w	r3, r3, #4
 800abe6:	2b04      	cmp	r3, #4
 800abe8:	d122      	bne.n	800ac30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	f003 0304 	and.w	r3, r3, #4
 800abf4:	2b04      	cmp	r3, #4
 800abf6:	d11b      	bne.n	800ac30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f06f 0204 	mvn.w	r2, #4
 800ac00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2202      	movs	r2, #2
 800ac06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d003      	beq.n	800ac1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f97b 	bl	800af12 <HAL_TIM_IC_CaptureCallback>
 800ac1c:	e005      	b.n	800ac2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f96d 	bl	800aefe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 f97e 	bl	800af26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	f003 0308 	and.w	r3, r3, #8
 800ac3a:	2b08      	cmp	r3, #8
 800ac3c:	d122      	bne.n	800ac84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	f003 0308 	and.w	r3, r3, #8
 800ac48:	2b08      	cmp	r3, #8
 800ac4a:	d11b      	bne.n	800ac84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f06f 0208 	mvn.w	r2, #8
 800ac54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2204      	movs	r2, #4
 800ac5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	69db      	ldr	r3, [r3, #28]
 800ac62:	f003 0303 	and.w	r3, r3, #3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d003      	beq.n	800ac72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f951 	bl	800af12 <HAL_TIM_IC_CaptureCallback>
 800ac70:	e005      	b.n	800ac7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f943 	bl	800aefe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f954 	bl	800af26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	f003 0310 	and.w	r3, r3, #16
 800ac8e:	2b10      	cmp	r3, #16
 800ac90:	d122      	bne.n	800acd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	f003 0310 	and.w	r3, r3, #16
 800ac9c:	2b10      	cmp	r3, #16
 800ac9e:	d11b      	bne.n	800acd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f06f 0210 	mvn.w	r2, #16
 800aca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2208      	movs	r2, #8
 800acae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	69db      	ldr	r3, [r3, #28]
 800acb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d003      	beq.n	800acc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f927 	bl	800af12 <HAL_TIM_IC_CaptureCallback>
 800acc4:	e005      	b.n	800acd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f919 	bl	800aefe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f92a 	bl	800af26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d10e      	bne.n	800ad04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	f003 0301 	and.w	r3, r3, #1
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d107      	bne.n	800ad04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f06f 0201 	mvn.w	r2, #1
 800acfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7f9 f8a6 	bl	8003e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad0e:	2b80      	cmp	r3, #128	; 0x80
 800ad10:	d10e      	bne.n	800ad30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad1c:	2b80      	cmp	r3, #128	; 0x80
 800ad1e:	d107      	bne.n	800ad30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fad0 	bl	800b2d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad3a:	2b40      	cmp	r3, #64	; 0x40
 800ad3c:	d10e      	bne.n	800ad5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad48:	2b40      	cmp	r3, #64	; 0x40
 800ad4a:	d107      	bne.n	800ad5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f8ef 	bl	800af3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	f003 0320 	and.w	r3, r3, #32
 800ad66:	2b20      	cmp	r3, #32
 800ad68:	d10e      	bne.n	800ad88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	f003 0320 	and.w	r3, r3, #32
 800ad74:	2b20      	cmp	r3, #32
 800ad76:	d107      	bne.n	800ad88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f06f 0220 	mvn.w	r2, #32
 800ad80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fa9a 	bl	800b2bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad88:	bf00      	nop
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d101      	bne.n	800ada8 <HAL_TIM_ConfigClockSource+0x18>
 800ada4:	2302      	movs	r3, #2
 800ada6:	e0a6      	b.n	800aef6 <HAL_TIM_ConfigClockSource+0x166>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2202      	movs	r2, #2
 800adb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800adc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b40      	cmp	r3, #64	; 0x40
 800adde:	d067      	beq.n	800aeb0 <HAL_TIM_ConfigClockSource+0x120>
 800ade0:	2b40      	cmp	r3, #64	; 0x40
 800ade2:	d80b      	bhi.n	800adfc <HAL_TIM_ConfigClockSource+0x6c>
 800ade4:	2b10      	cmp	r3, #16
 800ade6:	d073      	beq.n	800aed0 <HAL_TIM_ConfigClockSource+0x140>
 800ade8:	2b10      	cmp	r3, #16
 800adea:	d802      	bhi.n	800adf2 <HAL_TIM_ConfigClockSource+0x62>
 800adec:	2b00      	cmp	r3, #0
 800adee:	d06f      	beq.n	800aed0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800adf0:	e078      	b.n	800aee4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800adf2:	2b20      	cmp	r3, #32
 800adf4:	d06c      	beq.n	800aed0 <HAL_TIM_ConfigClockSource+0x140>
 800adf6:	2b30      	cmp	r3, #48	; 0x30
 800adf8:	d06a      	beq.n	800aed0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800adfa:	e073      	b.n	800aee4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800adfc:	2b70      	cmp	r3, #112	; 0x70
 800adfe:	d00d      	beq.n	800ae1c <HAL_TIM_ConfigClockSource+0x8c>
 800ae00:	2b70      	cmp	r3, #112	; 0x70
 800ae02:	d804      	bhi.n	800ae0e <HAL_TIM_ConfigClockSource+0x7e>
 800ae04:	2b50      	cmp	r3, #80	; 0x50
 800ae06:	d033      	beq.n	800ae70 <HAL_TIM_ConfigClockSource+0xe0>
 800ae08:	2b60      	cmp	r3, #96	; 0x60
 800ae0a:	d041      	beq.n	800ae90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800ae0c:	e06a      	b.n	800aee4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ae0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae12:	d066      	beq.n	800aee2 <HAL_TIM_ConfigClockSource+0x152>
 800ae14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae18:	d017      	beq.n	800ae4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800ae1a:	e063      	b.n	800aee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6818      	ldr	r0, [r3, #0]
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	6899      	ldr	r1, [r3, #8]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	685a      	ldr	r2, [r3, #4]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	f000 f9aa 	bl	800b184 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ae3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	609a      	str	r2, [r3, #8]
      break;
 800ae48:	e04c      	b.n	800aee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6818      	ldr	r0, [r3, #0]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	6899      	ldr	r1, [r3, #8]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	685a      	ldr	r2, [r3, #4]
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	f000 f993 	bl	800b184 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	689a      	ldr	r2, [r3, #8]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae6c:	609a      	str	r2, [r3, #8]
      break;
 800ae6e:	e039      	b.n	800aee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6818      	ldr	r0, [r3, #0]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	6859      	ldr	r1, [r3, #4]
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	f000 f907 	bl	800b090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2150      	movs	r1, #80	; 0x50
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f000 f960 	bl	800b14e <TIM_ITRx_SetConfig>
      break;
 800ae8e:	e029      	b.n	800aee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6818      	ldr	r0, [r3, #0]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	6859      	ldr	r1, [r3, #4]
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	f000 f926 	bl	800b0ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2160      	movs	r1, #96	; 0x60
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 f950 	bl	800b14e <TIM_ITRx_SetConfig>
      break;
 800aeae:	e019      	b.n	800aee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6818      	ldr	r0, [r3, #0]
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	6859      	ldr	r1, [r3, #4]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	461a      	mov	r2, r3
 800aebe:	f000 f8e7 	bl	800b090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2140      	movs	r1, #64	; 0x40
 800aec8:	4618      	mov	r0, r3
 800aeca:	f000 f940 	bl	800b14e <TIM_ITRx_SetConfig>
      break;
 800aece:	e009      	b.n	800aee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4619      	mov	r1, r3
 800aeda:	4610      	mov	r0, r2
 800aedc:	f000 f937 	bl	800b14e <TIM_ITRx_SetConfig>
      break;
 800aee0:	e000      	b.n	800aee4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800aee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aefe:	b480      	push	{r7}
 800af00:	b083      	sub	sp, #12
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af06:	bf00      	nop
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af12:	b480      	push	{r7}
 800af14:	b083      	sub	sp, #12
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af1a:	bf00      	nop
 800af1c:	370c      	adds	r7, #12
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr

0800af26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af26:	b480      	push	{r7}
 800af28:	b083      	sub	sp, #12
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af2e:	bf00      	nop
 800af30:	370c      	adds	r7, #12
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b083      	sub	sp, #12
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af42:	bf00      	nop
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
	...

0800af50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a40      	ldr	r2, [pc, #256]	; (800b064 <TIM_Base_SetConfig+0x114>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d013      	beq.n	800af90 <TIM_Base_SetConfig+0x40>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af6e:	d00f      	beq.n	800af90 <TIM_Base_SetConfig+0x40>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a3d      	ldr	r2, [pc, #244]	; (800b068 <TIM_Base_SetConfig+0x118>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d00b      	beq.n	800af90 <TIM_Base_SetConfig+0x40>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a3c      	ldr	r2, [pc, #240]	; (800b06c <TIM_Base_SetConfig+0x11c>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d007      	beq.n	800af90 <TIM_Base_SetConfig+0x40>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a3b      	ldr	r2, [pc, #236]	; (800b070 <TIM_Base_SetConfig+0x120>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d003      	beq.n	800af90 <TIM_Base_SetConfig+0x40>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a3a      	ldr	r2, [pc, #232]	; (800b074 <TIM_Base_SetConfig+0x124>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d108      	bne.n	800afa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a2f      	ldr	r2, [pc, #188]	; (800b064 <TIM_Base_SetConfig+0x114>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d02b      	beq.n	800b002 <TIM_Base_SetConfig+0xb2>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afb0:	d027      	beq.n	800b002 <TIM_Base_SetConfig+0xb2>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4a2c      	ldr	r2, [pc, #176]	; (800b068 <TIM_Base_SetConfig+0x118>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d023      	beq.n	800b002 <TIM_Base_SetConfig+0xb2>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a2b      	ldr	r2, [pc, #172]	; (800b06c <TIM_Base_SetConfig+0x11c>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d01f      	beq.n	800b002 <TIM_Base_SetConfig+0xb2>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a2a      	ldr	r2, [pc, #168]	; (800b070 <TIM_Base_SetConfig+0x120>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d01b      	beq.n	800b002 <TIM_Base_SetConfig+0xb2>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a29      	ldr	r2, [pc, #164]	; (800b074 <TIM_Base_SetConfig+0x124>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d017      	beq.n	800b002 <TIM_Base_SetConfig+0xb2>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4a28      	ldr	r2, [pc, #160]	; (800b078 <TIM_Base_SetConfig+0x128>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d013      	beq.n	800b002 <TIM_Base_SetConfig+0xb2>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a27      	ldr	r2, [pc, #156]	; (800b07c <TIM_Base_SetConfig+0x12c>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d00f      	beq.n	800b002 <TIM_Base_SetConfig+0xb2>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a26      	ldr	r2, [pc, #152]	; (800b080 <TIM_Base_SetConfig+0x130>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d00b      	beq.n	800b002 <TIM_Base_SetConfig+0xb2>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a25      	ldr	r2, [pc, #148]	; (800b084 <TIM_Base_SetConfig+0x134>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d007      	beq.n	800b002 <TIM_Base_SetConfig+0xb2>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a24      	ldr	r2, [pc, #144]	; (800b088 <TIM_Base_SetConfig+0x138>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d003      	beq.n	800b002 <TIM_Base_SetConfig+0xb2>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a23      	ldr	r2, [pc, #140]	; (800b08c <TIM_Base_SetConfig+0x13c>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d108      	bne.n	800b014 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	4313      	orrs	r3, r2
 800b012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	695b      	ldr	r3, [r3, #20]
 800b01e:	4313      	orrs	r3, r2
 800b020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	689a      	ldr	r2, [r3, #8]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a0a      	ldr	r2, [pc, #40]	; (800b064 <TIM_Base_SetConfig+0x114>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d003      	beq.n	800b048 <TIM_Base_SetConfig+0xf8>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a0c      	ldr	r2, [pc, #48]	; (800b074 <TIM_Base_SetConfig+0x124>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d103      	bne.n	800b050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	691a      	ldr	r2, [r3, #16]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	615a      	str	r2, [r3, #20]
}
 800b056:	bf00      	nop
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	40010000 	.word	0x40010000
 800b068:	40000400 	.word	0x40000400
 800b06c:	40000800 	.word	0x40000800
 800b070:	40000c00 	.word	0x40000c00
 800b074:	40010400 	.word	0x40010400
 800b078:	40014000 	.word	0x40014000
 800b07c:	40014400 	.word	0x40014400
 800b080:	40014800 	.word	0x40014800
 800b084:	40001800 	.word	0x40001800
 800b088:	40001c00 	.word	0x40001c00
 800b08c:	40002000 	.word	0x40002000

0800b090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b090:	b480      	push	{r7}
 800b092:	b087      	sub	sp, #28
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6a1b      	ldr	r3, [r3, #32]
 800b0a6:	f023 0201 	bic.w	r2, r3, #1
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	011b      	lsls	r3, r3, #4
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	f023 030a 	bic.w	r3, r3, #10
 800b0cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0ce:	697a      	ldr	r2, [r7, #20]
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	697a      	ldr	r2, [r7, #20]
 800b0e0:	621a      	str	r2, [r3, #32]
}
 800b0e2:	bf00      	nop
 800b0e4:	371c      	adds	r7, #28
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b087      	sub	sp, #28
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	60f8      	str	r0, [r7, #12]
 800b0f6:	60b9      	str	r1, [r7, #8]
 800b0f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6a1b      	ldr	r3, [r3, #32]
 800b0fe:	f023 0210 	bic.w	r2, r3, #16
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6a1b      	ldr	r3, [r3, #32]
 800b110:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b118:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	031b      	lsls	r3, r3, #12
 800b11e:	697a      	ldr	r2, [r7, #20]
 800b120:	4313      	orrs	r3, r2
 800b122:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b12a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	011b      	lsls	r3, r3, #4
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	4313      	orrs	r3, r2
 800b134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	697a      	ldr	r2, [r7, #20]
 800b13a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	693a      	ldr	r2, [r7, #16]
 800b140:	621a      	str	r2, [r3, #32]
}
 800b142:	bf00      	nop
 800b144:	371c      	adds	r7, #28
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b14e:	b480      	push	{r7}
 800b150:	b085      	sub	sp, #20
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b164:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b166:	683a      	ldr	r2, [r7, #0]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	f043 0307 	orr.w	r3, r3, #7
 800b170:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	609a      	str	r2, [r3, #8]
}
 800b178:	bf00      	nop
 800b17a:	3714      	adds	r7, #20
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b184:	b480      	push	{r7}
 800b186:	b087      	sub	sp, #28
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	607a      	str	r2, [r7, #4]
 800b190:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b19e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	021a      	lsls	r2, r3, #8
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	431a      	orrs	r2, r3
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	697a      	ldr	r2, [r7, #20]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	609a      	str	r2, [r3, #8]
}
 800b1b8:	bf00      	nop
 800b1ba:	371c      	adds	r7, #28
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d101      	bne.n	800b1dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1d8:	2302      	movs	r3, #2
 800b1da:	e05a      	b.n	800b292 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b202:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a21      	ldr	r2, [pc, #132]	; (800b2a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d022      	beq.n	800b266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b228:	d01d      	beq.n	800b266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a1d      	ldr	r2, [pc, #116]	; (800b2a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d018      	beq.n	800b266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a1b      	ldr	r2, [pc, #108]	; (800b2a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d013      	beq.n	800b266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a1a      	ldr	r2, [pc, #104]	; (800b2ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d00e      	beq.n	800b266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a18      	ldr	r2, [pc, #96]	; (800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d009      	beq.n	800b266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a17      	ldr	r2, [pc, #92]	; (800b2b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d004      	beq.n	800b266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a15      	ldr	r2, [pc, #84]	; (800b2b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d10c      	bne.n	800b280 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b26c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	68ba      	ldr	r2, [r7, #8]
 800b274:	4313      	orrs	r3, r2
 800b276:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3714      	adds	r7, #20
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	40010000 	.word	0x40010000
 800b2a4:	40000400 	.word	0x40000400
 800b2a8:	40000800 	.word	0x40000800
 800b2ac:	40000c00 	.word	0x40000c00
 800b2b0:	40010400 	.word	0x40010400
 800b2b4:	40014000 	.word	0x40014000
 800b2b8:	40001800 	.word	0x40001800

0800b2bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2d8:	bf00      	nop
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d101      	bne.n	800b2f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e03f      	b.n	800b376 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d106      	bne.n	800b310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7f9 fd7c 	bl	8004e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2224      	movs	r2, #36	; 0x24
 800b314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68da      	ldr	r2, [r3, #12]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 faf9 	bl	800b920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	691a      	ldr	r2, [r3, #16]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b33c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	695a      	ldr	r2, [r3, #20]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b34c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68da      	ldr	r2, [r3, #12]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b35c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2220      	movs	r2, #32
 800b368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2220      	movs	r2, #32
 800b370:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3708      	adds	r7, #8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b37e:	b480      	push	{r7}
 800b380:	b085      	sub	sp, #20
 800b382:	af00      	add	r7, sp, #0
 800b384:	60f8      	str	r0, [r7, #12]
 800b386:	60b9      	str	r1, [r7, #8]
 800b388:	4613      	mov	r3, r2
 800b38a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b20      	cmp	r3, #32
 800b396:	d130      	bne.n	800b3fa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d002      	beq.n	800b3a4 <HAL_UART_Transmit_IT+0x26>
 800b39e:	88fb      	ldrh	r3, [r7, #6]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e029      	b.n	800b3fc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d101      	bne.n	800b3b6 <HAL_UART_Transmit_IT+0x38>
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	e022      	b.n	800b3fc <HAL_UART_Transmit_IT+0x7e>
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	88fa      	ldrh	r2, [r7, #6]
 800b3c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	88fa      	ldrh	r2, [r7, #6]
 800b3ce:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2221      	movs	r2, #33	; 0x21
 800b3da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	68da      	ldr	r2, [r3, #12]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b3f4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	e000      	b.n	800b3fc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b3fa:	2302      	movs	r3, #2
  }
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b408:	b480      	push	{r7}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	4613      	mov	r3, r2
 800b414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	2b20      	cmp	r3, #32
 800b420:	d140      	bne.n	800b4a4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <HAL_UART_Receive_IT+0x26>
 800b428:	88fb      	ldrh	r3, [r7, #6]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d101      	bne.n	800b432 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e039      	b.n	800b4a6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d101      	bne.n	800b440 <HAL_UART_Receive_IT+0x38>
 800b43c:	2302      	movs	r3, #2
 800b43e:	e032      	b.n	800b4a6 <HAL_UART_Receive_IT+0x9e>
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	88fa      	ldrh	r2, [r7, #6]
 800b452:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	88fa      	ldrh	r2, [r7, #6]
 800b458:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2222      	movs	r2, #34	; 0x22
 800b464:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	68da      	ldr	r2, [r3, #12]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b47e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	695a      	ldr	r2, [r3, #20]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f042 0201 	orr.w	r2, r2, #1
 800b48e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68da      	ldr	r2, [r3, #12]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f042 0220 	orr.w	r2, r2, #32
 800b49e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	e000      	b.n	800b4a6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b4a4:	2302      	movs	r3, #2
  }
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3714      	adds	r7, #20
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr
	...

0800b4b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	695b      	ldr	r3, [r3, #20]
 800b4d2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	f003 030f 	and.w	r3, r3, #15
 800b4e2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d10d      	bne.n	800b506 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	f003 0320 	and.w	r3, r3, #32
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d008      	beq.n	800b506 <HAL_UART_IRQHandler+0x52>
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	f003 0320 	and.w	r3, r3, #32
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f98c 	bl	800b81c <UART_Receive_IT>
      return;
 800b504:	e0d1      	b.n	800b6aa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f000 80b0 	beq.w	800b66e <HAL_UART_IRQHandler+0x1ba>
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f003 0301 	and.w	r3, r3, #1
 800b514:	2b00      	cmp	r3, #0
 800b516:	d105      	bne.n	800b524 <HAL_UART_IRQHandler+0x70>
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f000 80a5 	beq.w	800b66e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	f003 0301 	and.w	r3, r3, #1
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00a      	beq.n	800b544 <HAL_UART_IRQHandler+0x90>
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b534:	2b00      	cmp	r3, #0
 800b536:	d005      	beq.n	800b544 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b53c:	f043 0201 	orr.w	r2, r3, #1
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	f003 0304 	and.w	r3, r3, #4
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00a      	beq.n	800b564 <HAL_UART_IRQHandler+0xb0>
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	f003 0301 	and.w	r3, r3, #1
 800b554:	2b00      	cmp	r3, #0
 800b556:	d005      	beq.n	800b564 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b55c:	f043 0202 	orr.w	r2, r3, #2
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	f003 0302 	and.w	r3, r3, #2
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00a      	beq.n	800b584 <HAL_UART_IRQHandler+0xd0>
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	f003 0301 	and.w	r3, r3, #1
 800b574:	2b00      	cmp	r3, #0
 800b576:	d005      	beq.n	800b584 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b57c:	f043 0204 	orr.w	r2, r3, #4
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	f003 0308 	and.w	r3, r3, #8
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00f      	beq.n	800b5ae <HAL_UART_IRQHandler+0xfa>
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	f003 0320 	and.w	r3, r3, #32
 800b594:	2b00      	cmp	r3, #0
 800b596:	d104      	bne.n	800b5a2 <HAL_UART_IRQHandler+0xee>
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	f003 0301 	and.w	r3, r3, #1
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d005      	beq.n	800b5ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5a6:	f043 0208 	orr.w	r2, r3, #8
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d078      	beq.n	800b6a8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	f003 0320 	and.w	r3, r3, #32
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d007      	beq.n	800b5d0 <HAL_UART_IRQHandler+0x11c>
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	f003 0320 	and.w	r3, r3, #32
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d002      	beq.n	800b5d0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f926 	bl	800b81c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5da:	2b40      	cmp	r3, #64	; 0x40
 800b5dc:	bf0c      	ite	eq
 800b5de:	2301      	moveq	r3, #1
 800b5e0:	2300      	movne	r3, #0
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ea:	f003 0308 	and.w	r3, r3, #8
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d102      	bne.n	800b5f8 <HAL_UART_IRQHandler+0x144>
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d031      	beq.n	800b65c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f86f 	bl	800b6dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	695b      	ldr	r3, [r3, #20]
 800b604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b608:	2b40      	cmp	r3, #64	; 0x40
 800b60a:	d123      	bne.n	800b654 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	695a      	ldr	r2, [r3, #20]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b61a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b620:	2b00      	cmp	r3, #0
 800b622:	d013      	beq.n	800b64c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b628:	4a21      	ldr	r2, [pc, #132]	; (800b6b0 <HAL_UART_IRQHandler+0x1fc>)
 800b62a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b630:	4618      	mov	r0, r3
 800b632:	f7fa ff11 	bl	8006458 <HAL_DMA_Abort_IT>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d016      	beq.n	800b66a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b646:	4610      	mov	r0, r2
 800b648:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b64a:	e00e      	b.n	800b66a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f83b 	bl	800b6c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b652:	e00a      	b.n	800b66a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f837 	bl	800b6c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b65a:	e006      	b.n	800b66a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f833 	bl	800b6c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800b668:	e01e      	b.n	800b6a8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b66a:	bf00      	nop
    return;
 800b66c:	e01c      	b.n	800b6a8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b674:	2b00      	cmp	r3, #0
 800b676:	d008      	beq.n	800b68a <HAL_UART_IRQHandler+0x1d6>
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d003      	beq.n	800b68a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f85c 	bl	800b740 <UART_Transmit_IT>
    return;
 800b688:	e00f      	b.n	800b6aa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00a      	beq.n	800b6aa <HAL_UART_IRQHandler+0x1f6>
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d005      	beq.n	800b6aa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 f8a4 	bl	800b7ec <UART_EndTransmit_IT>
    return;
 800b6a4:	bf00      	nop
 800b6a6:	e000      	b.n	800b6aa <HAL_UART_IRQHandler+0x1f6>
    return;
 800b6a8:	bf00      	nop
  }
}
 800b6aa:	3720      	adds	r7, #32
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	0800b719 	.word	0x0800b719

0800b6b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	68da      	ldr	r2, [r3, #12]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b6f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	695a      	ldr	r2, [r3, #20]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f022 0201 	bic.w	r2, r2, #1
 800b702:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2220      	movs	r2, #32
 800b708:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b724:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f7ff ffc8 	bl	800b6c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b738:	bf00      	nop
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	2b21      	cmp	r3, #33	; 0x21
 800b752:	d144      	bne.n	800b7de <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b75c:	d11a      	bne.n	800b794 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	881b      	ldrh	r3, [r3, #0]
 800b768:	461a      	mov	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b772:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d105      	bne.n	800b788 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6a1b      	ldr	r3, [r3, #32]
 800b780:	1c9a      	adds	r2, r3, #2
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	621a      	str	r2, [r3, #32]
 800b786:	e00e      	b.n	800b7a6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6a1b      	ldr	r3, [r3, #32]
 800b78c:	1c5a      	adds	r2, r3, #1
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	621a      	str	r2, [r3, #32]
 800b792:	e008      	b.n	800b7a6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a1b      	ldr	r3, [r3, #32]
 800b798:	1c59      	adds	r1, r3, #1
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	6211      	str	r1, [r2, #32]
 800b79e:	781a      	ldrb	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10f      	bne.n	800b7da <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	68da      	ldr	r2, [r3, #12]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	68da      	ldr	r2, [r3, #12]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	e000      	b.n	800b7e0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b7de:	2302      	movs	r3, #2
  }
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68da      	ldr	r2, [r3, #12]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b802:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2220      	movs	r2, #32
 800b808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f7ff ff51 	bl	800b6b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b22      	cmp	r3, #34	; 0x22
 800b82e:	d171      	bne.n	800b914 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b838:	d123      	bne.n	800b882 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b83e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d10e      	bne.n	800b866 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	b29b      	uxth	r3, r3
 800b850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b854:	b29a      	uxth	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85e:	1c9a      	adds	r2, r3, #2
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	629a      	str	r2, [r3, #40]	; 0x28
 800b864:	e029      	b.n	800b8ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	b29a      	uxth	r2, r3
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	629a      	str	r2, [r3, #40]	; 0x28
 800b880:	e01b      	b.n	800b8ba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10a      	bne.n	800b8a0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6858      	ldr	r0, [r3, #4]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b894:	1c59      	adds	r1, r3, #1
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	6291      	str	r1, [r2, #40]	; 0x28
 800b89a:	b2c2      	uxtb	r2, r0
 800b89c:	701a      	strb	r2, [r3, #0]
 800b89e:	e00c      	b.n	800b8ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	b2da      	uxtb	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ac:	1c58      	adds	r0, r3, #1
 800b8ae:	6879      	ldr	r1, [r7, #4]
 800b8b0:	6288      	str	r0, [r1, #40]	; 0x28
 800b8b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b8b6:	b2d2      	uxtb	r2, r2
 800b8b8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d120      	bne.n	800b910 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68da      	ldr	r2, [r3, #12]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f022 0220 	bic.w	r2, r2, #32
 800b8dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68da      	ldr	r2, [r3, #12]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b8ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	695a      	ldr	r2, [r3, #20]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f022 0201 	bic.w	r2, r2, #1
 800b8fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2220      	movs	r2, #32
 800b902:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f7f8 fb88 	bl	800401c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b90c:	2300      	movs	r3, #0
 800b90e:	e002      	b.n	800b916 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b910:	2300      	movs	r3, #0
 800b912:	e000      	b.n	800b916 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b914:	2302      	movs	r3, #2
  }
}
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
	...

0800b920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	b085      	sub	sp, #20
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	68da      	ldr	r2, [r3, #12]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	430a      	orrs	r2, r1
 800b93e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	689a      	ldr	r2, [r3, #8]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	431a      	orrs	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	695b      	ldr	r3, [r3, #20]
 800b94e:	431a      	orrs	r2, r3
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	69db      	ldr	r3, [r3, #28]
 800b954:	4313      	orrs	r3, r2
 800b956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b962:	f023 030c 	bic.w	r3, r3, #12
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	6812      	ldr	r2, [r2, #0]
 800b96a:	68f9      	ldr	r1, [r7, #12]
 800b96c:	430b      	orrs	r3, r1
 800b96e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	699a      	ldr	r2, [r3, #24]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	430a      	orrs	r2, r1
 800b984:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	69db      	ldr	r3, [r3, #28]
 800b98a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b98e:	f040 818b 	bne.w	800bca8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4ac1      	ldr	r2, [pc, #772]	; (800bc9c <UART_SetConfig+0x37c>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d005      	beq.n	800b9a8 <UART_SetConfig+0x88>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4abf      	ldr	r2, [pc, #764]	; (800bca0 <UART_SetConfig+0x380>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	f040 80bd 	bne.w	800bb22 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b9a8:	f7fe fb2a 	bl	800a000 <HAL_RCC_GetPCLK2Freq>
 800b9ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	461d      	mov	r5, r3
 800b9b2:	f04f 0600 	mov.w	r6, #0
 800b9b6:	46a8      	mov	r8, r5
 800b9b8:	46b1      	mov	r9, r6
 800b9ba:	eb18 0308 	adds.w	r3, r8, r8
 800b9be:	eb49 0409 	adc.w	r4, r9, r9
 800b9c2:	4698      	mov	r8, r3
 800b9c4:	46a1      	mov	r9, r4
 800b9c6:	eb18 0805 	adds.w	r8, r8, r5
 800b9ca:	eb49 0906 	adc.w	r9, r9, r6
 800b9ce:	f04f 0100 	mov.w	r1, #0
 800b9d2:	f04f 0200 	mov.w	r2, #0
 800b9d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b9da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b9de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b9e2:	4688      	mov	r8, r1
 800b9e4:	4691      	mov	r9, r2
 800b9e6:	eb18 0005 	adds.w	r0, r8, r5
 800b9ea:	eb49 0106 	adc.w	r1, r9, r6
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	461d      	mov	r5, r3
 800b9f4:	f04f 0600 	mov.w	r6, #0
 800b9f8:	196b      	adds	r3, r5, r5
 800b9fa:	eb46 0406 	adc.w	r4, r6, r6
 800b9fe:	461a      	mov	r2, r3
 800ba00:	4623      	mov	r3, r4
 800ba02:	f7f4 ffd7 	bl	80009b4 <__aeabi_uldivmod>
 800ba06:	4603      	mov	r3, r0
 800ba08:	460c      	mov	r4, r1
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	4ba5      	ldr	r3, [pc, #660]	; (800bca4 <UART_SetConfig+0x384>)
 800ba0e:	fba3 2302 	umull	r2, r3, r3, r2
 800ba12:	095b      	lsrs	r3, r3, #5
 800ba14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	461d      	mov	r5, r3
 800ba1c:	f04f 0600 	mov.w	r6, #0
 800ba20:	46a9      	mov	r9, r5
 800ba22:	46b2      	mov	sl, r6
 800ba24:	eb19 0309 	adds.w	r3, r9, r9
 800ba28:	eb4a 040a 	adc.w	r4, sl, sl
 800ba2c:	4699      	mov	r9, r3
 800ba2e:	46a2      	mov	sl, r4
 800ba30:	eb19 0905 	adds.w	r9, r9, r5
 800ba34:	eb4a 0a06 	adc.w	sl, sl, r6
 800ba38:	f04f 0100 	mov.w	r1, #0
 800ba3c:	f04f 0200 	mov.w	r2, #0
 800ba40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ba48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ba4c:	4689      	mov	r9, r1
 800ba4e:	4692      	mov	sl, r2
 800ba50:	eb19 0005 	adds.w	r0, r9, r5
 800ba54:	eb4a 0106 	adc.w	r1, sl, r6
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	461d      	mov	r5, r3
 800ba5e:	f04f 0600 	mov.w	r6, #0
 800ba62:	196b      	adds	r3, r5, r5
 800ba64:	eb46 0406 	adc.w	r4, r6, r6
 800ba68:	461a      	mov	r2, r3
 800ba6a:	4623      	mov	r3, r4
 800ba6c:	f7f4 ffa2 	bl	80009b4 <__aeabi_uldivmod>
 800ba70:	4603      	mov	r3, r0
 800ba72:	460c      	mov	r4, r1
 800ba74:	461a      	mov	r2, r3
 800ba76:	4b8b      	ldr	r3, [pc, #556]	; (800bca4 <UART_SetConfig+0x384>)
 800ba78:	fba3 1302 	umull	r1, r3, r3, r2
 800ba7c:	095b      	lsrs	r3, r3, #5
 800ba7e:	2164      	movs	r1, #100	; 0x64
 800ba80:	fb01 f303 	mul.w	r3, r1, r3
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	00db      	lsls	r3, r3, #3
 800ba88:	3332      	adds	r3, #50	; 0x32
 800ba8a:	4a86      	ldr	r2, [pc, #536]	; (800bca4 <UART_SetConfig+0x384>)
 800ba8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba90:	095b      	lsrs	r3, r3, #5
 800ba92:	005b      	lsls	r3, r3, #1
 800ba94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ba98:	4498      	add	r8, r3
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	461d      	mov	r5, r3
 800ba9e:	f04f 0600 	mov.w	r6, #0
 800baa2:	46a9      	mov	r9, r5
 800baa4:	46b2      	mov	sl, r6
 800baa6:	eb19 0309 	adds.w	r3, r9, r9
 800baaa:	eb4a 040a 	adc.w	r4, sl, sl
 800baae:	4699      	mov	r9, r3
 800bab0:	46a2      	mov	sl, r4
 800bab2:	eb19 0905 	adds.w	r9, r9, r5
 800bab6:	eb4a 0a06 	adc.w	sl, sl, r6
 800baba:	f04f 0100 	mov.w	r1, #0
 800babe:	f04f 0200 	mov.w	r2, #0
 800bac2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bac6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800baca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bace:	4689      	mov	r9, r1
 800bad0:	4692      	mov	sl, r2
 800bad2:	eb19 0005 	adds.w	r0, r9, r5
 800bad6:	eb4a 0106 	adc.w	r1, sl, r6
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	461d      	mov	r5, r3
 800bae0:	f04f 0600 	mov.w	r6, #0
 800bae4:	196b      	adds	r3, r5, r5
 800bae6:	eb46 0406 	adc.w	r4, r6, r6
 800baea:	461a      	mov	r2, r3
 800baec:	4623      	mov	r3, r4
 800baee:	f7f4 ff61 	bl	80009b4 <__aeabi_uldivmod>
 800baf2:	4603      	mov	r3, r0
 800baf4:	460c      	mov	r4, r1
 800baf6:	461a      	mov	r2, r3
 800baf8:	4b6a      	ldr	r3, [pc, #424]	; (800bca4 <UART_SetConfig+0x384>)
 800bafa:	fba3 1302 	umull	r1, r3, r3, r2
 800bafe:	095b      	lsrs	r3, r3, #5
 800bb00:	2164      	movs	r1, #100	; 0x64
 800bb02:	fb01 f303 	mul.w	r3, r1, r3
 800bb06:	1ad3      	subs	r3, r2, r3
 800bb08:	00db      	lsls	r3, r3, #3
 800bb0a:	3332      	adds	r3, #50	; 0x32
 800bb0c:	4a65      	ldr	r2, [pc, #404]	; (800bca4 <UART_SetConfig+0x384>)
 800bb0e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb12:	095b      	lsrs	r3, r3, #5
 800bb14:	f003 0207 	and.w	r2, r3, #7
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4442      	add	r2, r8
 800bb1e:	609a      	str	r2, [r3, #8]
 800bb20:	e26f      	b.n	800c002 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bb22:	f7fe fa59 	bl	8009fd8 <HAL_RCC_GetPCLK1Freq>
 800bb26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	461d      	mov	r5, r3
 800bb2c:	f04f 0600 	mov.w	r6, #0
 800bb30:	46a8      	mov	r8, r5
 800bb32:	46b1      	mov	r9, r6
 800bb34:	eb18 0308 	adds.w	r3, r8, r8
 800bb38:	eb49 0409 	adc.w	r4, r9, r9
 800bb3c:	4698      	mov	r8, r3
 800bb3e:	46a1      	mov	r9, r4
 800bb40:	eb18 0805 	adds.w	r8, r8, r5
 800bb44:	eb49 0906 	adc.w	r9, r9, r6
 800bb48:	f04f 0100 	mov.w	r1, #0
 800bb4c:	f04f 0200 	mov.w	r2, #0
 800bb50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bb54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bb58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bb5c:	4688      	mov	r8, r1
 800bb5e:	4691      	mov	r9, r2
 800bb60:	eb18 0005 	adds.w	r0, r8, r5
 800bb64:	eb49 0106 	adc.w	r1, r9, r6
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	461d      	mov	r5, r3
 800bb6e:	f04f 0600 	mov.w	r6, #0
 800bb72:	196b      	adds	r3, r5, r5
 800bb74:	eb46 0406 	adc.w	r4, r6, r6
 800bb78:	461a      	mov	r2, r3
 800bb7a:	4623      	mov	r3, r4
 800bb7c:	f7f4 ff1a 	bl	80009b4 <__aeabi_uldivmod>
 800bb80:	4603      	mov	r3, r0
 800bb82:	460c      	mov	r4, r1
 800bb84:	461a      	mov	r2, r3
 800bb86:	4b47      	ldr	r3, [pc, #284]	; (800bca4 <UART_SetConfig+0x384>)
 800bb88:	fba3 2302 	umull	r2, r3, r3, r2
 800bb8c:	095b      	lsrs	r3, r3, #5
 800bb8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	461d      	mov	r5, r3
 800bb96:	f04f 0600 	mov.w	r6, #0
 800bb9a:	46a9      	mov	r9, r5
 800bb9c:	46b2      	mov	sl, r6
 800bb9e:	eb19 0309 	adds.w	r3, r9, r9
 800bba2:	eb4a 040a 	adc.w	r4, sl, sl
 800bba6:	4699      	mov	r9, r3
 800bba8:	46a2      	mov	sl, r4
 800bbaa:	eb19 0905 	adds.w	r9, r9, r5
 800bbae:	eb4a 0a06 	adc.w	sl, sl, r6
 800bbb2:	f04f 0100 	mov.w	r1, #0
 800bbb6:	f04f 0200 	mov.w	r2, #0
 800bbba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bbbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bbc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bbc6:	4689      	mov	r9, r1
 800bbc8:	4692      	mov	sl, r2
 800bbca:	eb19 0005 	adds.w	r0, r9, r5
 800bbce:	eb4a 0106 	adc.w	r1, sl, r6
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	461d      	mov	r5, r3
 800bbd8:	f04f 0600 	mov.w	r6, #0
 800bbdc:	196b      	adds	r3, r5, r5
 800bbde:	eb46 0406 	adc.w	r4, r6, r6
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	4623      	mov	r3, r4
 800bbe6:	f7f4 fee5 	bl	80009b4 <__aeabi_uldivmod>
 800bbea:	4603      	mov	r3, r0
 800bbec:	460c      	mov	r4, r1
 800bbee:	461a      	mov	r2, r3
 800bbf0:	4b2c      	ldr	r3, [pc, #176]	; (800bca4 <UART_SetConfig+0x384>)
 800bbf2:	fba3 1302 	umull	r1, r3, r3, r2
 800bbf6:	095b      	lsrs	r3, r3, #5
 800bbf8:	2164      	movs	r1, #100	; 0x64
 800bbfa:	fb01 f303 	mul.w	r3, r1, r3
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	00db      	lsls	r3, r3, #3
 800bc02:	3332      	adds	r3, #50	; 0x32
 800bc04:	4a27      	ldr	r2, [pc, #156]	; (800bca4 <UART_SetConfig+0x384>)
 800bc06:	fba2 2303 	umull	r2, r3, r2, r3
 800bc0a:	095b      	lsrs	r3, r3, #5
 800bc0c:	005b      	lsls	r3, r3, #1
 800bc0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bc12:	4498      	add	r8, r3
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	461d      	mov	r5, r3
 800bc18:	f04f 0600 	mov.w	r6, #0
 800bc1c:	46a9      	mov	r9, r5
 800bc1e:	46b2      	mov	sl, r6
 800bc20:	eb19 0309 	adds.w	r3, r9, r9
 800bc24:	eb4a 040a 	adc.w	r4, sl, sl
 800bc28:	4699      	mov	r9, r3
 800bc2a:	46a2      	mov	sl, r4
 800bc2c:	eb19 0905 	adds.w	r9, r9, r5
 800bc30:	eb4a 0a06 	adc.w	sl, sl, r6
 800bc34:	f04f 0100 	mov.w	r1, #0
 800bc38:	f04f 0200 	mov.w	r2, #0
 800bc3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bc44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bc48:	4689      	mov	r9, r1
 800bc4a:	4692      	mov	sl, r2
 800bc4c:	eb19 0005 	adds.w	r0, r9, r5
 800bc50:	eb4a 0106 	adc.w	r1, sl, r6
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	461d      	mov	r5, r3
 800bc5a:	f04f 0600 	mov.w	r6, #0
 800bc5e:	196b      	adds	r3, r5, r5
 800bc60:	eb46 0406 	adc.w	r4, r6, r6
 800bc64:	461a      	mov	r2, r3
 800bc66:	4623      	mov	r3, r4
 800bc68:	f7f4 fea4 	bl	80009b4 <__aeabi_uldivmod>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	460c      	mov	r4, r1
 800bc70:	461a      	mov	r2, r3
 800bc72:	4b0c      	ldr	r3, [pc, #48]	; (800bca4 <UART_SetConfig+0x384>)
 800bc74:	fba3 1302 	umull	r1, r3, r3, r2
 800bc78:	095b      	lsrs	r3, r3, #5
 800bc7a:	2164      	movs	r1, #100	; 0x64
 800bc7c:	fb01 f303 	mul.w	r3, r1, r3
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	00db      	lsls	r3, r3, #3
 800bc84:	3332      	adds	r3, #50	; 0x32
 800bc86:	4a07      	ldr	r2, [pc, #28]	; (800bca4 <UART_SetConfig+0x384>)
 800bc88:	fba2 2303 	umull	r2, r3, r2, r3
 800bc8c:	095b      	lsrs	r3, r3, #5
 800bc8e:	f003 0207 	and.w	r2, r3, #7
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4442      	add	r2, r8
 800bc98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800bc9a:	e1b2      	b.n	800c002 <UART_SetConfig+0x6e2>
 800bc9c:	40011000 	.word	0x40011000
 800bca0:	40011400 	.word	0x40011400
 800bca4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4ad7      	ldr	r2, [pc, #860]	; (800c00c <UART_SetConfig+0x6ec>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d005      	beq.n	800bcbe <UART_SetConfig+0x39e>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4ad6      	ldr	r2, [pc, #856]	; (800c010 <UART_SetConfig+0x6f0>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	f040 80d1 	bne.w	800be60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800bcbe:	f7fe f99f 	bl	800a000 <HAL_RCC_GetPCLK2Freq>
 800bcc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	469a      	mov	sl, r3
 800bcc8:	f04f 0b00 	mov.w	fp, #0
 800bccc:	46d0      	mov	r8, sl
 800bcce:	46d9      	mov	r9, fp
 800bcd0:	eb18 0308 	adds.w	r3, r8, r8
 800bcd4:	eb49 0409 	adc.w	r4, r9, r9
 800bcd8:	4698      	mov	r8, r3
 800bcda:	46a1      	mov	r9, r4
 800bcdc:	eb18 080a 	adds.w	r8, r8, sl
 800bce0:	eb49 090b 	adc.w	r9, r9, fp
 800bce4:	f04f 0100 	mov.w	r1, #0
 800bce8:	f04f 0200 	mov.w	r2, #0
 800bcec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bcf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bcf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bcf8:	4688      	mov	r8, r1
 800bcfa:	4691      	mov	r9, r2
 800bcfc:	eb1a 0508 	adds.w	r5, sl, r8
 800bd00:	eb4b 0609 	adc.w	r6, fp, r9
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	4619      	mov	r1, r3
 800bd0a:	f04f 0200 	mov.w	r2, #0
 800bd0e:	f04f 0300 	mov.w	r3, #0
 800bd12:	f04f 0400 	mov.w	r4, #0
 800bd16:	0094      	lsls	r4, r2, #2
 800bd18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bd1c:	008b      	lsls	r3, r1, #2
 800bd1e:	461a      	mov	r2, r3
 800bd20:	4623      	mov	r3, r4
 800bd22:	4628      	mov	r0, r5
 800bd24:	4631      	mov	r1, r6
 800bd26:	f7f4 fe45 	bl	80009b4 <__aeabi_uldivmod>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	461a      	mov	r2, r3
 800bd30:	4bb8      	ldr	r3, [pc, #736]	; (800c014 <UART_SetConfig+0x6f4>)
 800bd32:	fba3 2302 	umull	r2, r3, r3, r2
 800bd36:	095b      	lsrs	r3, r3, #5
 800bd38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	469b      	mov	fp, r3
 800bd40:	f04f 0c00 	mov.w	ip, #0
 800bd44:	46d9      	mov	r9, fp
 800bd46:	46e2      	mov	sl, ip
 800bd48:	eb19 0309 	adds.w	r3, r9, r9
 800bd4c:	eb4a 040a 	adc.w	r4, sl, sl
 800bd50:	4699      	mov	r9, r3
 800bd52:	46a2      	mov	sl, r4
 800bd54:	eb19 090b 	adds.w	r9, r9, fp
 800bd58:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bd5c:	f04f 0100 	mov.w	r1, #0
 800bd60:	f04f 0200 	mov.w	r2, #0
 800bd64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bd6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bd70:	4689      	mov	r9, r1
 800bd72:	4692      	mov	sl, r2
 800bd74:	eb1b 0509 	adds.w	r5, fp, r9
 800bd78:	eb4c 060a 	adc.w	r6, ip, sl
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	4619      	mov	r1, r3
 800bd82:	f04f 0200 	mov.w	r2, #0
 800bd86:	f04f 0300 	mov.w	r3, #0
 800bd8a:	f04f 0400 	mov.w	r4, #0
 800bd8e:	0094      	lsls	r4, r2, #2
 800bd90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bd94:	008b      	lsls	r3, r1, #2
 800bd96:	461a      	mov	r2, r3
 800bd98:	4623      	mov	r3, r4
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	4631      	mov	r1, r6
 800bd9e:	f7f4 fe09 	bl	80009b4 <__aeabi_uldivmod>
 800bda2:	4603      	mov	r3, r0
 800bda4:	460c      	mov	r4, r1
 800bda6:	461a      	mov	r2, r3
 800bda8:	4b9a      	ldr	r3, [pc, #616]	; (800c014 <UART_SetConfig+0x6f4>)
 800bdaa:	fba3 1302 	umull	r1, r3, r3, r2
 800bdae:	095b      	lsrs	r3, r3, #5
 800bdb0:	2164      	movs	r1, #100	; 0x64
 800bdb2:	fb01 f303 	mul.w	r3, r1, r3
 800bdb6:	1ad3      	subs	r3, r2, r3
 800bdb8:	011b      	lsls	r3, r3, #4
 800bdba:	3332      	adds	r3, #50	; 0x32
 800bdbc:	4a95      	ldr	r2, [pc, #596]	; (800c014 <UART_SetConfig+0x6f4>)
 800bdbe:	fba2 2303 	umull	r2, r3, r2, r3
 800bdc2:	095b      	lsrs	r3, r3, #5
 800bdc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdc8:	4498      	add	r8, r3
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	469b      	mov	fp, r3
 800bdce:	f04f 0c00 	mov.w	ip, #0
 800bdd2:	46d9      	mov	r9, fp
 800bdd4:	46e2      	mov	sl, ip
 800bdd6:	eb19 0309 	adds.w	r3, r9, r9
 800bdda:	eb4a 040a 	adc.w	r4, sl, sl
 800bdde:	4699      	mov	r9, r3
 800bde0:	46a2      	mov	sl, r4
 800bde2:	eb19 090b 	adds.w	r9, r9, fp
 800bde6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bdea:	f04f 0100 	mov.w	r1, #0
 800bdee:	f04f 0200 	mov.w	r2, #0
 800bdf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bdf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bdfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bdfe:	4689      	mov	r9, r1
 800be00:	4692      	mov	sl, r2
 800be02:	eb1b 0509 	adds.w	r5, fp, r9
 800be06:	eb4c 060a 	adc.w	r6, ip, sl
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	4619      	mov	r1, r3
 800be10:	f04f 0200 	mov.w	r2, #0
 800be14:	f04f 0300 	mov.w	r3, #0
 800be18:	f04f 0400 	mov.w	r4, #0
 800be1c:	0094      	lsls	r4, r2, #2
 800be1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800be22:	008b      	lsls	r3, r1, #2
 800be24:	461a      	mov	r2, r3
 800be26:	4623      	mov	r3, r4
 800be28:	4628      	mov	r0, r5
 800be2a:	4631      	mov	r1, r6
 800be2c:	f7f4 fdc2 	bl	80009b4 <__aeabi_uldivmod>
 800be30:	4603      	mov	r3, r0
 800be32:	460c      	mov	r4, r1
 800be34:	461a      	mov	r2, r3
 800be36:	4b77      	ldr	r3, [pc, #476]	; (800c014 <UART_SetConfig+0x6f4>)
 800be38:	fba3 1302 	umull	r1, r3, r3, r2
 800be3c:	095b      	lsrs	r3, r3, #5
 800be3e:	2164      	movs	r1, #100	; 0x64
 800be40:	fb01 f303 	mul.w	r3, r1, r3
 800be44:	1ad3      	subs	r3, r2, r3
 800be46:	011b      	lsls	r3, r3, #4
 800be48:	3332      	adds	r3, #50	; 0x32
 800be4a:	4a72      	ldr	r2, [pc, #456]	; (800c014 <UART_SetConfig+0x6f4>)
 800be4c:	fba2 2303 	umull	r2, r3, r2, r3
 800be50:	095b      	lsrs	r3, r3, #5
 800be52:	f003 020f 	and.w	r2, r3, #15
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4442      	add	r2, r8
 800be5c:	609a      	str	r2, [r3, #8]
 800be5e:	e0d0      	b.n	800c002 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800be60:	f7fe f8ba 	bl	8009fd8 <HAL_RCC_GetPCLK1Freq>
 800be64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	469a      	mov	sl, r3
 800be6a:	f04f 0b00 	mov.w	fp, #0
 800be6e:	46d0      	mov	r8, sl
 800be70:	46d9      	mov	r9, fp
 800be72:	eb18 0308 	adds.w	r3, r8, r8
 800be76:	eb49 0409 	adc.w	r4, r9, r9
 800be7a:	4698      	mov	r8, r3
 800be7c:	46a1      	mov	r9, r4
 800be7e:	eb18 080a 	adds.w	r8, r8, sl
 800be82:	eb49 090b 	adc.w	r9, r9, fp
 800be86:	f04f 0100 	mov.w	r1, #0
 800be8a:	f04f 0200 	mov.w	r2, #0
 800be8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800be92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800be96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800be9a:	4688      	mov	r8, r1
 800be9c:	4691      	mov	r9, r2
 800be9e:	eb1a 0508 	adds.w	r5, sl, r8
 800bea2:	eb4b 0609 	adc.w	r6, fp, r9
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	4619      	mov	r1, r3
 800beac:	f04f 0200 	mov.w	r2, #0
 800beb0:	f04f 0300 	mov.w	r3, #0
 800beb4:	f04f 0400 	mov.w	r4, #0
 800beb8:	0094      	lsls	r4, r2, #2
 800beba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bebe:	008b      	lsls	r3, r1, #2
 800bec0:	461a      	mov	r2, r3
 800bec2:	4623      	mov	r3, r4
 800bec4:	4628      	mov	r0, r5
 800bec6:	4631      	mov	r1, r6
 800bec8:	f7f4 fd74 	bl	80009b4 <__aeabi_uldivmod>
 800becc:	4603      	mov	r3, r0
 800bece:	460c      	mov	r4, r1
 800bed0:	461a      	mov	r2, r3
 800bed2:	4b50      	ldr	r3, [pc, #320]	; (800c014 <UART_SetConfig+0x6f4>)
 800bed4:	fba3 2302 	umull	r2, r3, r3, r2
 800bed8:	095b      	lsrs	r3, r3, #5
 800beda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	469b      	mov	fp, r3
 800bee2:	f04f 0c00 	mov.w	ip, #0
 800bee6:	46d9      	mov	r9, fp
 800bee8:	46e2      	mov	sl, ip
 800beea:	eb19 0309 	adds.w	r3, r9, r9
 800beee:	eb4a 040a 	adc.w	r4, sl, sl
 800bef2:	4699      	mov	r9, r3
 800bef4:	46a2      	mov	sl, r4
 800bef6:	eb19 090b 	adds.w	r9, r9, fp
 800befa:	eb4a 0a0c 	adc.w	sl, sl, ip
 800befe:	f04f 0100 	mov.w	r1, #0
 800bf02:	f04f 0200 	mov.w	r2, #0
 800bf06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bf0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bf0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bf12:	4689      	mov	r9, r1
 800bf14:	4692      	mov	sl, r2
 800bf16:	eb1b 0509 	adds.w	r5, fp, r9
 800bf1a:	eb4c 060a 	adc.w	r6, ip, sl
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	4619      	mov	r1, r3
 800bf24:	f04f 0200 	mov.w	r2, #0
 800bf28:	f04f 0300 	mov.w	r3, #0
 800bf2c:	f04f 0400 	mov.w	r4, #0
 800bf30:	0094      	lsls	r4, r2, #2
 800bf32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bf36:	008b      	lsls	r3, r1, #2
 800bf38:	461a      	mov	r2, r3
 800bf3a:	4623      	mov	r3, r4
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	4631      	mov	r1, r6
 800bf40:	f7f4 fd38 	bl	80009b4 <__aeabi_uldivmod>
 800bf44:	4603      	mov	r3, r0
 800bf46:	460c      	mov	r4, r1
 800bf48:	461a      	mov	r2, r3
 800bf4a:	4b32      	ldr	r3, [pc, #200]	; (800c014 <UART_SetConfig+0x6f4>)
 800bf4c:	fba3 1302 	umull	r1, r3, r3, r2
 800bf50:	095b      	lsrs	r3, r3, #5
 800bf52:	2164      	movs	r1, #100	; 0x64
 800bf54:	fb01 f303 	mul.w	r3, r1, r3
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	011b      	lsls	r3, r3, #4
 800bf5c:	3332      	adds	r3, #50	; 0x32
 800bf5e:	4a2d      	ldr	r2, [pc, #180]	; (800c014 <UART_SetConfig+0x6f4>)
 800bf60:	fba2 2303 	umull	r2, r3, r2, r3
 800bf64:	095b      	lsrs	r3, r3, #5
 800bf66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf6a:	4498      	add	r8, r3
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	469b      	mov	fp, r3
 800bf70:	f04f 0c00 	mov.w	ip, #0
 800bf74:	46d9      	mov	r9, fp
 800bf76:	46e2      	mov	sl, ip
 800bf78:	eb19 0309 	adds.w	r3, r9, r9
 800bf7c:	eb4a 040a 	adc.w	r4, sl, sl
 800bf80:	4699      	mov	r9, r3
 800bf82:	46a2      	mov	sl, r4
 800bf84:	eb19 090b 	adds.w	r9, r9, fp
 800bf88:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bf8c:	f04f 0100 	mov.w	r1, #0
 800bf90:	f04f 0200 	mov.w	r2, #0
 800bf94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bf98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bf9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bfa0:	4689      	mov	r9, r1
 800bfa2:	4692      	mov	sl, r2
 800bfa4:	eb1b 0509 	adds.w	r5, fp, r9
 800bfa8:	eb4c 060a 	adc.w	r6, ip, sl
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	f04f 0200 	mov.w	r2, #0
 800bfb6:	f04f 0300 	mov.w	r3, #0
 800bfba:	f04f 0400 	mov.w	r4, #0
 800bfbe:	0094      	lsls	r4, r2, #2
 800bfc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bfc4:	008b      	lsls	r3, r1, #2
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	4623      	mov	r3, r4
 800bfca:	4628      	mov	r0, r5
 800bfcc:	4631      	mov	r1, r6
 800bfce:	f7f4 fcf1 	bl	80009b4 <__aeabi_uldivmod>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	460c      	mov	r4, r1
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	4b0e      	ldr	r3, [pc, #56]	; (800c014 <UART_SetConfig+0x6f4>)
 800bfda:	fba3 1302 	umull	r1, r3, r3, r2
 800bfde:	095b      	lsrs	r3, r3, #5
 800bfe0:	2164      	movs	r1, #100	; 0x64
 800bfe2:	fb01 f303 	mul.w	r3, r1, r3
 800bfe6:	1ad3      	subs	r3, r2, r3
 800bfe8:	011b      	lsls	r3, r3, #4
 800bfea:	3332      	adds	r3, #50	; 0x32
 800bfec:	4a09      	ldr	r2, [pc, #36]	; (800c014 <UART_SetConfig+0x6f4>)
 800bfee:	fba2 2303 	umull	r2, r3, r2, r3
 800bff2:	095b      	lsrs	r3, r3, #5
 800bff4:	f003 020f 	and.w	r2, r3, #15
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4442      	add	r2, r8
 800bffe:	609a      	str	r2, [r3, #8]
}
 800c000:	e7ff      	b.n	800c002 <UART_SetConfig+0x6e2>
 800c002:	bf00      	nop
 800c004:	3714      	adds	r7, #20
 800c006:	46bd      	mov	sp, r7
 800c008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c00c:	40011000 	.word	0x40011000
 800c010:	40011400 	.word	0x40011400
 800c014:	51eb851f 	.word	0x51eb851f

0800c018 <__errno>:
 800c018:	4b01      	ldr	r3, [pc, #4]	; (800c020 <__errno+0x8>)
 800c01a:	6818      	ldr	r0, [r3, #0]
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	20000070 	.word	0x20000070

0800c024 <__libc_init_array>:
 800c024:	b570      	push	{r4, r5, r6, lr}
 800c026:	4e0d      	ldr	r6, [pc, #52]	; (800c05c <__libc_init_array+0x38>)
 800c028:	4c0d      	ldr	r4, [pc, #52]	; (800c060 <__libc_init_array+0x3c>)
 800c02a:	1ba4      	subs	r4, r4, r6
 800c02c:	10a4      	asrs	r4, r4, #2
 800c02e:	2500      	movs	r5, #0
 800c030:	42a5      	cmp	r5, r4
 800c032:	d109      	bne.n	800c048 <__libc_init_array+0x24>
 800c034:	4e0b      	ldr	r6, [pc, #44]	; (800c064 <__libc_init_array+0x40>)
 800c036:	4c0c      	ldr	r4, [pc, #48]	; (800c068 <__libc_init_array+0x44>)
 800c038:	f000 fc90 	bl	800c95c <_init>
 800c03c:	1ba4      	subs	r4, r4, r6
 800c03e:	10a4      	asrs	r4, r4, #2
 800c040:	2500      	movs	r5, #0
 800c042:	42a5      	cmp	r5, r4
 800c044:	d105      	bne.n	800c052 <__libc_init_array+0x2e>
 800c046:	bd70      	pop	{r4, r5, r6, pc}
 800c048:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c04c:	4798      	blx	r3
 800c04e:	3501      	adds	r5, #1
 800c050:	e7ee      	b.n	800c030 <__libc_init_array+0xc>
 800c052:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c056:	4798      	blx	r3
 800c058:	3501      	adds	r5, #1
 800c05a:	e7f2      	b.n	800c042 <__libc_init_array+0x1e>
 800c05c:	0800ca34 	.word	0x0800ca34
 800c060:	0800ca34 	.word	0x0800ca34
 800c064:	0800ca34 	.word	0x0800ca34
 800c068:	0800ca38 	.word	0x0800ca38

0800c06c <memset>:
 800c06c:	4402      	add	r2, r0
 800c06e:	4603      	mov	r3, r0
 800c070:	4293      	cmp	r3, r2
 800c072:	d100      	bne.n	800c076 <memset+0xa>
 800c074:	4770      	bx	lr
 800c076:	f803 1b01 	strb.w	r1, [r3], #1
 800c07a:	e7f9      	b.n	800c070 <memset+0x4>

0800c07c <_puts_r>:
 800c07c:	b570      	push	{r4, r5, r6, lr}
 800c07e:	460e      	mov	r6, r1
 800c080:	4605      	mov	r5, r0
 800c082:	b118      	cbz	r0, 800c08c <_puts_r+0x10>
 800c084:	6983      	ldr	r3, [r0, #24]
 800c086:	b90b      	cbnz	r3, 800c08c <_puts_r+0x10>
 800c088:	f000 fa14 	bl	800c4b4 <__sinit>
 800c08c:	69ab      	ldr	r3, [r5, #24]
 800c08e:	68ac      	ldr	r4, [r5, #8]
 800c090:	b913      	cbnz	r3, 800c098 <_puts_r+0x1c>
 800c092:	4628      	mov	r0, r5
 800c094:	f000 fa0e 	bl	800c4b4 <__sinit>
 800c098:	4b23      	ldr	r3, [pc, #140]	; (800c128 <_puts_r+0xac>)
 800c09a:	429c      	cmp	r4, r3
 800c09c:	d117      	bne.n	800c0ce <_puts_r+0x52>
 800c09e:	686c      	ldr	r4, [r5, #4]
 800c0a0:	89a3      	ldrh	r3, [r4, #12]
 800c0a2:	071b      	lsls	r3, r3, #28
 800c0a4:	d51d      	bpl.n	800c0e2 <_puts_r+0x66>
 800c0a6:	6923      	ldr	r3, [r4, #16]
 800c0a8:	b1db      	cbz	r3, 800c0e2 <_puts_r+0x66>
 800c0aa:	3e01      	subs	r6, #1
 800c0ac:	68a3      	ldr	r3, [r4, #8]
 800c0ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	60a3      	str	r3, [r4, #8]
 800c0b6:	b9e9      	cbnz	r1, 800c0f4 <_puts_r+0x78>
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	da2e      	bge.n	800c11a <_puts_r+0x9e>
 800c0bc:	4622      	mov	r2, r4
 800c0be:	210a      	movs	r1, #10
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f000 f847 	bl	800c154 <__swbuf_r>
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	d011      	beq.n	800c0ee <_puts_r+0x72>
 800c0ca:	200a      	movs	r0, #10
 800c0cc:	e011      	b.n	800c0f2 <_puts_r+0x76>
 800c0ce:	4b17      	ldr	r3, [pc, #92]	; (800c12c <_puts_r+0xb0>)
 800c0d0:	429c      	cmp	r4, r3
 800c0d2:	d101      	bne.n	800c0d8 <_puts_r+0x5c>
 800c0d4:	68ac      	ldr	r4, [r5, #8]
 800c0d6:	e7e3      	b.n	800c0a0 <_puts_r+0x24>
 800c0d8:	4b15      	ldr	r3, [pc, #84]	; (800c130 <_puts_r+0xb4>)
 800c0da:	429c      	cmp	r4, r3
 800c0dc:	bf08      	it	eq
 800c0de:	68ec      	ldreq	r4, [r5, #12]
 800c0e0:	e7de      	b.n	800c0a0 <_puts_r+0x24>
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f000 f887 	bl	800c1f8 <__swsetup_r>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	d0dd      	beq.n	800c0aa <_puts_r+0x2e>
 800c0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f2:	bd70      	pop	{r4, r5, r6, pc}
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	da04      	bge.n	800c102 <_puts_r+0x86>
 800c0f8:	69a2      	ldr	r2, [r4, #24]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	dc06      	bgt.n	800c10c <_puts_r+0x90>
 800c0fe:	290a      	cmp	r1, #10
 800c100:	d004      	beq.n	800c10c <_puts_r+0x90>
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	1c5a      	adds	r2, r3, #1
 800c106:	6022      	str	r2, [r4, #0]
 800c108:	7019      	strb	r1, [r3, #0]
 800c10a:	e7cf      	b.n	800c0ac <_puts_r+0x30>
 800c10c:	4622      	mov	r2, r4
 800c10e:	4628      	mov	r0, r5
 800c110:	f000 f820 	bl	800c154 <__swbuf_r>
 800c114:	3001      	adds	r0, #1
 800c116:	d1c9      	bne.n	800c0ac <_puts_r+0x30>
 800c118:	e7e9      	b.n	800c0ee <_puts_r+0x72>
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	200a      	movs	r0, #10
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	6022      	str	r2, [r4, #0]
 800c122:	7018      	strb	r0, [r3, #0]
 800c124:	e7e5      	b.n	800c0f2 <_puts_r+0x76>
 800c126:	bf00      	nop
 800c128:	0800c9ec 	.word	0x0800c9ec
 800c12c:	0800ca0c 	.word	0x0800ca0c
 800c130:	0800c9cc 	.word	0x0800c9cc

0800c134 <puts>:
 800c134:	4b02      	ldr	r3, [pc, #8]	; (800c140 <puts+0xc>)
 800c136:	4601      	mov	r1, r0
 800c138:	6818      	ldr	r0, [r3, #0]
 800c13a:	f7ff bf9f 	b.w	800c07c <_puts_r>
 800c13e:	bf00      	nop
 800c140:	20000070 	.word	0x20000070

0800c144 <strcpy>:
 800c144:	4603      	mov	r3, r0
 800c146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c14a:	f803 2b01 	strb.w	r2, [r3], #1
 800c14e:	2a00      	cmp	r2, #0
 800c150:	d1f9      	bne.n	800c146 <strcpy+0x2>
 800c152:	4770      	bx	lr

0800c154 <__swbuf_r>:
 800c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c156:	460e      	mov	r6, r1
 800c158:	4614      	mov	r4, r2
 800c15a:	4605      	mov	r5, r0
 800c15c:	b118      	cbz	r0, 800c166 <__swbuf_r+0x12>
 800c15e:	6983      	ldr	r3, [r0, #24]
 800c160:	b90b      	cbnz	r3, 800c166 <__swbuf_r+0x12>
 800c162:	f000 f9a7 	bl	800c4b4 <__sinit>
 800c166:	4b21      	ldr	r3, [pc, #132]	; (800c1ec <__swbuf_r+0x98>)
 800c168:	429c      	cmp	r4, r3
 800c16a:	d12a      	bne.n	800c1c2 <__swbuf_r+0x6e>
 800c16c:	686c      	ldr	r4, [r5, #4]
 800c16e:	69a3      	ldr	r3, [r4, #24]
 800c170:	60a3      	str	r3, [r4, #8]
 800c172:	89a3      	ldrh	r3, [r4, #12]
 800c174:	071a      	lsls	r2, r3, #28
 800c176:	d52e      	bpl.n	800c1d6 <__swbuf_r+0x82>
 800c178:	6923      	ldr	r3, [r4, #16]
 800c17a:	b363      	cbz	r3, 800c1d6 <__swbuf_r+0x82>
 800c17c:	6923      	ldr	r3, [r4, #16]
 800c17e:	6820      	ldr	r0, [r4, #0]
 800c180:	1ac0      	subs	r0, r0, r3
 800c182:	6963      	ldr	r3, [r4, #20]
 800c184:	b2f6      	uxtb	r6, r6
 800c186:	4283      	cmp	r3, r0
 800c188:	4637      	mov	r7, r6
 800c18a:	dc04      	bgt.n	800c196 <__swbuf_r+0x42>
 800c18c:	4621      	mov	r1, r4
 800c18e:	4628      	mov	r0, r5
 800c190:	f000 f926 	bl	800c3e0 <_fflush_r>
 800c194:	bb28      	cbnz	r0, 800c1e2 <__swbuf_r+0x8e>
 800c196:	68a3      	ldr	r3, [r4, #8]
 800c198:	3b01      	subs	r3, #1
 800c19a:	60a3      	str	r3, [r4, #8]
 800c19c:	6823      	ldr	r3, [r4, #0]
 800c19e:	1c5a      	adds	r2, r3, #1
 800c1a0:	6022      	str	r2, [r4, #0]
 800c1a2:	701e      	strb	r6, [r3, #0]
 800c1a4:	6963      	ldr	r3, [r4, #20]
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	4283      	cmp	r3, r0
 800c1aa:	d004      	beq.n	800c1b6 <__swbuf_r+0x62>
 800c1ac:	89a3      	ldrh	r3, [r4, #12]
 800c1ae:	07db      	lsls	r3, r3, #31
 800c1b0:	d519      	bpl.n	800c1e6 <__swbuf_r+0x92>
 800c1b2:	2e0a      	cmp	r6, #10
 800c1b4:	d117      	bne.n	800c1e6 <__swbuf_r+0x92>
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	f000 f911 	bl	800c3e0 <_fflush_r>
 800c1be:	b190      	cbz	r0, 800c1e6 <__swbuf_r+0x92>
 800c1c0:	e00f      	b.n	800c1e2 <__swbuf_r+0x8e>
 800c1c2:	4b0b      	ldr	r3, [pc, #44]	; (800c1f0 <__swbuf_r+0x9c>)
 800c1c4:	429c      	cmp	r4, r3
 800c1c6:	d101      	bne.n	800c1cc <__swbuf_r+0x78>
 800c1c8:	68ac      	ldr	r4, [r5, #8]
 800c1ca:	e7d0      	b.n	800c16e <__swbuf_r+0x1a>
 800c1cc:	4b09      	ldr	r3, [pc, #36]	; (800c1f4 <__swbuf_r+0xa0>)
 800c1ce:	429c      	cmp	r4, r3
 800c1d0:	bf08      	it	eq
 800c1d2:	68ec      	ldreq	r4, [r5, #12]
 800c1d4:	e7cb      	b.n	800c16e <__swbuf_r+0x1a>
 800c1d6:	4621      	mov	r1, r4
 800c1d8:	4628      	mov	r0, r5
 800c1da:	f000 f80d 	bl	800c1f8 <__swsetup_r>
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	d0cc      	beq.n	800c17c <__swbuf_r+0x28>
 800c1e2:	f04f 37ff 	mov.w	r7, #4294967295
 800c1e6:	4638      	mov	r0, r7
 800c1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	0800c9ec 	.word	0x0800c9ec
 800c1f0:	0800ca0c 	.word	0x0800ca0c
 800c1f4:	0800c9cc 	.word	0x0800c9cc

0800c1f8 <__swsetup_r>:
 800c1f8:	4b32      	ldr	r3, [pc, #200]	; (800c2c4 <__swsetup_r+0xcc>)
 800c1fa:	b570      	push	{r4, r5, r6, lr}
 800c1fc:	681d      	ldr	r5, [r3, #0]
 800c1fe:	4606      	mov	r6, r0
 800c200:	460c      	mov	r4, r1
 800c202:	b125      	cbz	r5, 800c20e <__swsetup_r+0x16>
 800c204:	69ab      	ldr	r3, [r5, #24]
 800c206:	b913      	cbnz	r3, 800c20e <__swsetup_r+0x16>
 800c208:	4628      	mov	r0, r5
 800c20a:	f000 f953 	bl	800c4b4 <__sinit>
 800c20e:	4b2e      	ldr	r3, [pc, #184]	; (800c2c8 <__swsetup_r+0xd0>)
 800c210:	429c      	cmp	r4, r3
 800c212:	d10f      	bne.n	800c234 <__swsetup_r+0x3c>
 800c214:	686c      	ldr	r4, [r5, #4]
 800c216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c21a:	b29a      	uxth	r2, r3
 800c21c:	0715      	lsls	r5, r2, #28
 800c21e:	d42c      	bmi.n	800c27a <__swsetup_r+0x82>
 800c220:	06d0      	lsls	r0, r2, #27
 800c222:	d411      	bmi.n	800c248 <__swsetup_r+0x50>
 800c224:	2209      	movs	r2, #9
 800c226:	6032      	str	r2, [r6, #0]
 800c228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c22c:	81a3      	strh	r3, [r4, #12]
 800c22e:	f04f 30ff 	mov.w	r0, #4294967295
 800c232:	e03e      	b.n	800c2b2 <__swsetup_r+0xba>
 800c234:	4b25      	ldr	r3, [pc, #148]	; (800c2cc <__swsetup_r+0xd4>)
 800c236:	429c      	cmp	r4, r3
 800c238:	d101      	bne.n	800c23e <__swsetup_r+0x46>
 800c23a:	68ac      	ldr	r4, [r5, #8]
 800c23c:	e7eb      	b.n	800c216 <__swsetup_r+0x1e>
 800c23e:	4b24      	ldr	r3, [pc, #144]	; (800c2d0 <__swsetup_r+0xd8>)
 800c240:	429c      	cmp	r4, r3
 800c242:	bf08      	it	eq
 800c244:	68ec      	ldreq	r4, [r5, #12]
 800c246:	e7e6      	b.n	800c216 <__swsetup_r+0x1e>
 800c248:	0751      	lsls	r1, r2, #29
 800c24a:	d512      	bpl.n	800c272 <__swsetup_r+0x7a>
 800c24c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c24e:	b141      	cbz	r1, 800c262 <__swsetup_r+0x6a>
 800c250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c254:	4299      	cmp	r1, r3
 800c256:	d002      	beq.n	800c25e <__swsetup_r+0x66>
 800c258:	4630      	mov	r0, r6
 800c25a:	f000 fa19 	bl	800c690 <_free_r>
 800c25e:	2300      	movs	r3, #0
 800c260:	6363      	str	r3, [r4, #52]	; 0x34
 800c262:	89a3      	ldrh	r3, [r4, #12]
 800c264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c268:	81a3      	strh	r3, [r4, #12]
 800c26a:	2300      	movs	r3, #0
 800c26c:	6063      	str	r3, [r4, #4]
 800c26e:	6923      	ldr	r3, [r4, #16]
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	89a3      	ldrh	r3, [r4, #12]
 800c274:	f043 0308 	orr.w	r3, r3, #8
 800c278:	81a3      	strh	r3, [r4, #12]
 800c27a:	6923      	ldr	r3, [r4, #16]
 800c27c:	b94b      	cbnz	r3, 800c292 <__swsetup_r+0x9a>
 800c27e:	89a3      	ldrh	r3, [r4, #12]
 800c280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c288:	d003      	beq.n	800c292 <__swsetup_r+0x9a>
 800c28a:	4621      	mov	r1, r4
 800c28c:	4630      	mov	r0, r6
 800c28e:	f000 f9bf 	bl	800c610 <__smakebuf_r>
 800c292:	89a2      	ldrh	r2, [r4, #12]
 800c294:	f012 0301 	ands.w	r3, r2, #1
 800c298:	d00c      	beq.n	800c2b4 <__swsetup_r+0xbc>
 800c29a:	2300      	movs	r3, #0
 800c29c:	60a3      	str	r3, [r4, #8]
 800c29e:	6963      	ldr	r3, [r4, #20]
 800c2a0:	425b      	negs	r3, r3
 800c2a2:	61a3      	str	r3, [r4, #24]
 800c2a4:	6923      	ldr	r3, [r4, #16]
 800c2a6:	b953      	cbnz	r3, 800c2be <__swsetup_r+0xc6>
 800c2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c2b0:	d1ba      	bne.n	800c228 <__swsetup_r+0x30>
 800c2b2:	bd70      	pop	{r4, r5, r6, pc}
 800c2b4:	0792      	lsls	r2, r2, #30
 800c2b6:	bf58      	it	pl
 800c2b8:	6963      	ldrpl	r3, [r4, #20]
 800c2ba:	60a3      	str	r3, [r4, #8]
 800c2bc:	e7f2      	b.n	800c2a4 <__swsetup_r+0xac>
 800c2be:	2000      	movs	r0, #0
 800c2c0:	e7f7      	b.n	800c2b2 <__swsetup_r+0xba>
 800c2c2:	bf00      	nop
 800c2c4:	20000070 	.word	0x20000070
 800c2c8:	0800c9ec 	.word	0x0800c9ec
 800c2cc:	0800ca0c 	.word	0x0800ca0c
 800c2d0:	0800c9cc 	.word	0x0800c9cc

0800c2d4 <__sflush_r>:
 800c2d4:	898a      	ldrh	r2, [r1, #12]
 800c2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2da:	4605      	mov	r5, r0
 800c2dc:	0710      	lsls	r0, r2, #28
 800c2de:	460c      	mov	r4, r1
 800c2e0:	d458      	bmi.n	800c394 <__sflush_r+0xc0>
 800c2e2:	684b      	ldr	r3, [r1, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	dc05      	bgt.n	800c2f4 <__sflush_r+0x20>
 800c2e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	dc02      	bgt.n	800c2f4 <__sflush_r+0x20>
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2f6:	2e00      	cmp	r6, #0
 800c2f8:	d0f9      	beq.n	800c2ee <__sflush_r+0x1a>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c300:	682f      	ldr	r7, [r5, #0]
 800c302:	6a21      	ldr	r1, [r4, #32]
 800c304:	602b      	str	r3, [r5, #0]
 800c306:	d032      	beq.n	800c36e <__sflush_r+0x9a>
 800c308:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c30a:	89a3      	ldrh	r3, [r4, #12]
 800c30c:	075a      	lsls	r2, r3, #29
 800c30e:	d505      	bpl.n	800c31c <__sflush_r+0x48>
 800c310:	6863      	ldr	r3, [r4, #4]
 800c312:	1ac0      	subs	r0, r0, r3
 800c314:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c316:	b10b      	cbz	r3, 800c31c <__sflush_r+0x48>
 800c318:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c31a:	1ac0      	subs	r0, r0, r3
 800c31c:	2300      	movs	r3, #0
 800c31e:	4602      	mov	r2, r0
 800c320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c322:	6a21      	ldr	r1, [r4, #32]
 800c324:	4628      	mov	r0, r5
 800c326:	47b0      	blx	r6
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	89a3      	ldrh	r3, [r4, #12]
 800c32c:	d106      	bne.n	800c33c <__sflush_r+0x68>
 800c32e:	6829      	ldr	r1, [r5, #0]
 800c330:	291d      	cmp	r1, #29
 800c332:	d848      	bhi.n	800c3c6 <__sflush_r+0xf2>
 800c334:	4a29      	ldr	r2, [pc, #164]	; (800c3dc <__sflush_r+0x108>)
 800c336:	40ca      	lsrs	r2, r1
 800c338:	07d6      	lsls	r6, r2, #31
 800c33a:	d544      	bpl.n	800c3c6 <__sflush_r+0xf2>
 800c33c:	2200      	movs	r2, #0
 800c33e:	6062      	str	r2, [r4, #4]
 800c340:	04d9      	lsls	r1, r3, #19
 800c342:	6922      	ldr	r2, [r4, #16]
 800c344:	6022      	str	r2, [r4, #0]
 800c346:	d504      	bpl.n	800c352 <__sflush_r+0x7e>
 800c348:	1c42      	adds	r2, r0, #1
 800c34a:	d101      	bne.n	800c350 <__sflush_r+0x7c>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	b903      	cbnz	r3, 800c352 <__sflush_r+0x7e>
 800c350:	6560      	str	r0, [r4, #84]	; 0x54
 800c352:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c354:	602f      	str	r7, [r5, #0]
 800c356:	2900      	cmp	r1, #0
 800c358:	d0c9      	beq.n	800c2ee <__sflush_r+0x1a>
 800c35a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c35e:	4299      	cmp	r1, r3
 800c360:	d002      	beq.n	800c368 <__sflush_r+0x94>
 800c362:	4628      	mov	r0, r5
 800c364:	f000 f994 	bl	800c690 <_free_r>
 800c368:	2000      	movs	r0, #0
 800c36a:	6360      	str	r0, [r4, #52]	; 0x34
 800c36c:	e7c0      	b.n	800c2f0 <__sflush_r+0x1c>
 800c36e:	2301      	movs	r3, #1
 800c370:	4628      	mov	r0, r5
 800c372:	47b0      	blx	r6
 800c374:	1c41      	adds	r1, r0, #1
 800c376:	d1c8      	bne.n	800c30a <__sflush_r+0x36>
 800c378:	682b      	ldr	r3, [r5, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d0c5      	beq.n	800c30a <__sflush_r+0x36>
 800c37e:	2b1d      	cmp	r3, #29
 800c380:	d001      	beq.n	800c386 <__sflush_r+0xb2>
 800c382:	2b16      	cmp	r3, #22
 800c384:	d101      	bne.n	800c38a <__sflush_r+0xb6>
 800c386:	602f      	str	r7, [r5, #0]
 800c388:	e7b1      	b.n	800c2ee <__sflush_r+0x1a>
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c390:	81a3      	strh	r3, [r4, #12]
 800c392:	e7ad      	b.n	800c2f0 <__sflush_r+0x1c>
 800c394:	690f      	ldr	r7, [r1, #16]
 800c396:	2f00      	cmp	r7, #0
 800c398:	d0a9      	beq.n	800c2ee <__sflush_r+0x1a>
 800c39a:	0793      	lsls	r3, r2, #30
 800c39c:	680e      	ldr	r6, [r1, #0]
 800c39e:	bf08      	it	eq
 800c3a0:	694b      	ldreq	r3, [r1, #20]
 800c3a2:	600f      	str	r7, [r1, #0]
 800c3a4:	bf18      	it	ne
 800c3a6:	2300      	movne	r3, #0
 800c3a8:	eba6 0807 	sub.w	r8, r6, r7
 800c3ac:	608b      	str	r3, [r1, #8]
 800c3ae:	f1b8 0f00 	cmp.w	r8, #0
 800c3b2:	dd9c      	ble.n	800c2ee <__sflush_r+0x1a>
 800c3b4:	4643      	mov	r3, r8
 800c3b6:	463a      	mov	r2, r7
 800c3b8:	6a21      	ldr	r1, [r4, #32]
 800c3ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3bc:	4628      	mov	r0, r5
 800c3be:	47b0      	blx	r6
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	dc06      	bgt.n	800c3d2 <__sflush_r+0xfe>
 800c3c4:	89a3      	ldrh	r3, [r4, #12]
 800c3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ca:	81a3      	strh	r3, [r4, #12]
 800c3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d0:	e78e      	b.n	800c2f0 <__sflush_r+0x1c>
 800c3d2:	4407      	add	r7, r0
 800c3d4:	eba8 0800 	sub.w	r8, r8, r0
 800c3d8:	e7e9      	b.n	800c3ae <__sflush_r+0xda>
 800c3da:	bf00      	nop
 800c3dc:	20400001 	.word	0x20400001

0800c3e0 <_fflush_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	690b      	ldr	r3, [r1, #16]
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	460c      	mov	r4, r1
 800c3e8:	b1db      	cbz	r3, 800c422 <_fflush_r+0x42>
 800c3ea:	b118      	cbz	r0, 800c3f4 <_fflush_r+0x14>
 800c3ec:	6983      	ldr	r3, [r0, #24]
 800c3ee:	b90b      	cbnz	r3, 800c3f4 <_fflush_r+0x14>
 800c3f0:	f000 f860 	bl	800c4b4 <__sinit>
 800c3f4:	4b0c      	ldr	r3, [pc, #48]	; (800c428 <_fflush_r+0x48>)
 800c3f6:	429c      	cmp	r4, r3
 800c3f8:	d109      	bne.n	800c40e <_fflush_r+0x2e>
 800c3fa:	686c      	ldr	r4, [r5, #4]
 800c3fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c400:	b17b      	cbz	r3, 800c422 <_fflush_r+0x42>
 800c402:	4621      	mov	r1, r4
 800c404:	4628      	mov	r0, r5
 800c406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c40a:	f7ff bf63 	b.w	800c2d4 <__sflush_r>
 800c40e:	4b07      	ldr	r3, [pc, #28]	; (800c42c <_fflush_r+0x4c>)
 800c410:	429c      	cmp	r4, r3
 800c412:	d101      	bne.n	800c418 <_fflush_r+0x38>
 800c414:	68ac      	ldr	r4, [r5, #8]
 800c416:	e7f1      	b.n	800c3fc <_fflush_r+0x1c>
 800c418:	4b05      	ldr	r3, [pc, #20]	; (800c430 <_fflush_r+0x50>)
 800c41a:	429c      	cmp	r4, r3
 800c41c:	bf08      	it	eq
 800c41e:	68ec      	ldreq	r4, [r5, #12]
 800c420:	e7ec      	b.n	800c3fc <_fflush_r+0x1c>
 800c422:	2000      	movs	r0, #0
 800c424:	bd38      	pop	{r3, r4, r5, pc}
 800c426:	bf00      	nop
 800c428:	0800c9ec 	.word	0x0800c9ec
 800c42c:	0800ca0c 	.word	0x0800ca0c
 800c430:	0800c9cc 	.word	0x0800c9cc

0800c434 <std>:
 800c434:	2300      	movs	r3, #0
 800c436:	b510      	push	{r4, lr}
 800c438:	4604      	mov	r4, r0
 800c43a:	e9c0 3300 	strd	r3, r3, [r0]
 800c43e:	6083      	str	r3, [r0, #8]
 800c440:	8181      	strh	r1, [r0, #12]
 800c442:	6643      	str	r3, [r0, #100]	; 0x64
 800c444:	81c2      	strh	r2, [r0, #14]
 800c446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c44a:	6183      	str	r3, [r0, #24]
 800c44c:	4619      	mov	r1, r3
 800c44e:	2208      	movs	r2, #8
 800c450:	305c      	adds	r0, #92	; 0x5c
 800c452:	f7ff fe0b 	bl	800c06c <memset>
 800c456:	4b05      	ldr	r3, [pc, #20]	; (800c46c <std+0x38>)
 800c458:	6263      	str	r3, [r4, #36]	; 0x24
 800c45a:	4b05      	ldr	r3, [pc, #20]	; (800c470 <std+0x3c>)
 800c45c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c45e:	4b05      	ldr	r3, [pc, #20]	; (800c474 <std+0x40>)
 800c460:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c462:	4b05      	ldr	r3, [pc, #20]	; (800c478 <std+0x44>)
 800c464:	6224      	str	r4, [r4, #32]
 800c466:	6323      	str	r3, [r4, #48]	; 0x30
 800c468:	bd10      	pop	{r4, pc}
 800c46a:	bf00      	nop
 800c46c:	0800c801 	.word	0x0800c801
 800c470:	0800c823 	.word	0x0800c823
 800c474:	0800c85b 	.word	0x0800c85b
 800c478:	0800c87f 	.word	0x0800c87f

0800c47c <_cleanup_r>:
 800c47c:	4901      	ldr	r1, [pc, #4]	; (800c484 <_cleanup_r+0x8>)
 800c47e:	f000 b885 	b.w	800c58c <_fwalk_reent>
 800c482:	bf00      	nop
 800c484:	0800c3e1 	.word	0x0800c3e1

0800c488 <__sfmoreglue>:
 800c488:	b570      	push	{r4, r5, r6, lr}
 800c48a:	1e4a      	subs	r2, r1, #1
 800c48c:	2568      	movs	r5, #104	; 0x68
 800c48e:	4355      	muls	r5, r2
 800c490:	460e      	mov	r6, r1
 800c492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c496:	f000 f949 	bl	800c72c <_malloc_r>
 800c49a:	4604      	mov	r4, r0
 800c49c:	b140      	cbz	r0, 800c4b0 <__sfmoreglue+0x28>
 800c49e:	2100      	movs	r1, #0
 800c4a0:	e9c0 1600 	strd	r1, r6, [r0]
 800c4a4:	300c      	adds	r0, #12
 800c4a6:	60a0      	str	r0, [r4, #8]
 800c4a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4ac:	f7ff fdde 	bl	800c06c <memset>
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	bd70      	pop	{r4, r5, r6, pc}

0800c4b4 <__sinit>:
 800c4b4:	6983      	ldr	r3, [r0, #24]
 800c4b6:	b510      	push	{r4, lr}
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	bb33      	cbnz	r3, 800c50a <__sinit+0x56>
 800c4bc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c4c0:	6503      	str	r3, [r0, #80]	; 0x50
 800c4c2:	4b12      	ldr	r3, [pc, #72]	; (800c50c <__sinit+0x58>)
 800c4c4:	4a12      	ldr	r2, [pc, #72]	; (800c510 <__sinit+0x5c>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	6282      	str	r2, [r0, #40]	; 0x28
 800c4ca:	4298      	cmp	r0, r3
 800c4cc:	bf04      	itt	eq
 800c4ce:	2301      	moveq	r3, #1
 800c4d0:	6183      	streq	r3, [r0, #24]
 800c4d2:	f000 f81f 	bl	800c514 <__sfp>
 800c4d6:	6060      	str	r0, [r4, #4]
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f000 f81b 	bl	800c514 <__sfp>
 800c4de:	60a0      	str	r0, [r4, #8]
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f000 f817 	bl	800c514 <__sfp>
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	60e0      	str	r0, [r4, #12]
 800c4ea:	2104      	movs	r1, #4
 800c4ec:	6860      	ldr	r0, [r4, #4]
 800c4ee:	f7ff ffa1 	bl	800c434 <std>
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	2109      	movs	r1, #9
 800c4f6:	68a0      	ldr	r0, [r4, #8]
 800c4f8:	f7ff ff9c 	bl	800c434 <std>
 800c4fc:	2202      	movs	r2, #2
 800c4fe:	2112      	movs	r1, #18
 800c500:	68e0      	ldr	r0, [r4, #12]
 800c502:	f7ff ff97 	bl	800c434 <std>
 800c506:	2301      	movs	r3, #1
 800c508:	61a3      	str	r3, [r4, #24]
 800c50a:	bd10      	pop	{r4, pc}
 800c50c:	0800c9c8 	.word	0x0800c9c8
 800c510:	0800c47d 	.word	0x0800c47d

0800c514 <__sfp>:
 800c514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c516:	4b1b      	ldr	r3, [pc, #108]	; (800c584 <__sfp+0x70>)
 800c518:	681e      	ldr	r6, [r3, #0]
 800c51a:	69b3      	ldr	r3, [r6, #24]
 800c51c:	4607      	mov	r7, r0
 800c51e:	b913      	cbnz	r3, 800c526 <__sfp+0x12>
 800c520:	4630      	mov	r0, r6
 800c522:	f7ff ffc7 	bl	800c4b4 <__sinit>
 800c526:	3648      	adds	r6, #72	; 0x48
 800c528:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c52c:	3b01      	subs	r3, #1
 800c52e:	d503      	bpl.n	800c538 <__sfp+0x24>
 800c530:	6833      	ldr	r3, [r6, #0]
 800c532:	b133      	cbz	r3, 800c542 <__sfp+0x2e>
 800c534:	6836      	ldr	r6, [r6, #0]
 800c536:	e7f7      	b.n	800c528 <__sfp+0x14>
 800c538:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c53c:	b16d      	cbz	r5, 800c55a <__sfp+0x46>
 800c53e:	3468      	adds	r4, #104	; 0x68
 800c540:	e7f4      	b.n	800c52c <__sfp+0x18>
 800c542:	2104      	movs	r1, #4
 800c544:	4638      	mov	r0, r7
 800c546:	f7ff ff9f 	bl	800c488 <__sfmoreglue>
 800c54a:	6030      	str	r0, [r6, #0]
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d1f1      	bne.n	800c534 <__sfp+0x20>
 800c550:	230c      	movs	r3, #12
 800c552:	603b      	str	r3, [r7, #0]
 800c554:	4604      	mov	r4, r0
 800c556:	4620      	mov	r0, r4
 800c558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c55a:	4b0b      	ldr	r3, [pc, #44]	; (800c588 <__sfp+0x74>)
 800c55c:	6665      	str	r5, [r4, #100]	; 0x64
 800c55e:	e9c4 5500 	strd	r5, r5, [r4]
 800c562:	60a5      	str	r5, [r4, #8]
 800c564:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c568:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c56c:	2208      	movs	r2, #8
 800c56e:	4629      	mov	r1, r5
 800c570:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c574:	f7ff fd7a 	bl	800c06c <memset>
 800c578:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c57c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c580:	e7e9      	b.n	800c556 <__sfp+0x42>
 800c582:	bf00      	nop
 800c584:	0800c9c8 	.word	0x0800c9c8
 800c588:	ffff0001 	.word	0xffff0001

0800c58c <_fwalk_reent>:
 800c58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c590:	4680      	mov	r8, r0
 800c592:	4689      	mov	r9, r1
 800c594:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c598:	2600      	movs	r6, #0
 800c59a:	b914      	cbnz	r4, 800c5a2 <_fwalk_reent+0x16>
 800c59c:	4630      	mov	r0, r6
 800c59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c5a6:	3f01      	subs	r7, #1
 800c5a8:	d501      	bpl.n	800c5ae <_fwalk_reent+0x22>
 800c5aa:	6824      	ldr	r4, [r4, #0]
 800c5ac:	e7f5      	b.n	800c59a <_fwalk_reent+0xe>
 800c5ae:	89ab      	ldrh	r3, [r5, #12]
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d907      	bls.n	800c5c4 <_fwalk_reent+0x38>
 800c5b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	d003      	beq.n	800c5c4 <_fwalk_reent+0x38>
 800c5bc:	4629      	mov	r1, r5
 800c5be:	4640      	mov	r0, r8
 800c5c0:	47c8      	blx	r9
 800c5c2:	4306      	orrs	r6, r0
 800c5c4:	3568      	adds	r5, #104	; 0x68
 800c5c6:	e7ee      	b.n	800c5a6 <_fwalk_reent+0x1a>

0800c5c8 <__swhatbuf_r>:
 800c5c8:	b570      	push	{r4, r5, r6, lr}
 800c5ca:	460e      	mov	r6, r1
 800c5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d0:	2900      	cmp	r1, #0
 800c5d2:	b096      	sub	sp, #88	; 0x58
 800c5d4:	4614      	mov	r4, r2
 800c5d6:	461d      	mov	r5, r3
 800c5d8:	da07      	bge.n	800c5ea <__swhatbuf_r+0x22>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	602b      	str	r3, [r5, #0]
 800c5de:	89b3      	ldrh	r3, [r6, #12]
 800c5e0:	061a      	lsls	r2, r3, #24
 800c5e2:	d410      	bmi.n	800c606 <__swhatbuf_r+0x3e>
 800c5e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5e8:	e00e      	b.n	800c608 <__swhatbuf_r+0x40>
 800c5ea:	466a      	mov	r2, sp
 800c5ec:	f000 f96e 	bl	800c8cc <_fstat_r>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	dbf2      	blt.n	800c5da <__swhatbuf_r+0x12>
 800c5f4:	9a01      	ldr	r2, [sp, #4]
 800c5f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c5fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c5fe:	425a      	negs	r2, r3
 800c600:	415a      	adcs	r2, r3
 800c602:	602a      	str	r2, [r5, #0]
 800c604:	e7ee      	b.n	800c5e4 <__swhatbuf_r+0x1c>
 800c606:	2340      	movs	r3, #64	; 0x40
 800c608:	2000      	movs	r0, #0
 800c60a:	6023      	str	r3, [r4, #0]
 800c60c:	b016      	add	sp, #88	; 0x58
 800c60e:	bd70      	pop	{r4, r5, r6, pc}

0800c610 <__smakebuf_r>:
 800c610:	898b      	ldrh	r3, [r1, #12]
 800c612:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c614:	079d      	lsls	r5, r3, #30
 800c616:	4606      	mov	r6, r0
 800c618:	460c      	mov	r4, r1
 800c61a:	d507      	bpl.n	800c62c <__smakebuf_r+0x1c>
 800c61c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c620:	6023      	str	r3, [r4, #0]
 800c622:	6123      	str	r3, [r4, #16]
 800c624:	2301      	movs	r3, #1
 800c626:	6163      	str	r3, [r4, #20]
 800c628:	b002      	add	sp, #8
 800c62a:	bd70      	pop	{r4, r5, r6, pc}
 800c62c:	ab01      	add	r3, sp, #4
 800c62e:	466a      	mov	r2, sp
 800c630:	f7ff ffca 	bl	800c5c8 <__swhatbuf_r>
 800c634:	9900      	ldr	r1, [sp, #0]
 800c636:	4605      	mov	r5, r0
 800c638:	4630      	mov	r0, r6
 800c63a:	f000 f877 	bl	800c72c <_malloc_r>
 800c63e:	b948      	cbnz	r0, 800c654 <__smakebuf_r+0x44>
 800c640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c644:	059a      	lsls	r2, r3, #22
 800c646:	d4ef      	bmi.n	800c628 <__smakebuf_r+0x18>
 800c648:	f023 0303 	bic.w	r3, r3, #3
 800c64c:	f043 0302 	orr.w	r3, r3, #2
 800c650:	81a3      	strh	r3, [r4, #12]
 800c652:	e7e3      	b.n	800c61c <__smakebuf_r+0xc>
 800c654:	4b0d      	ldr	r3, [pc, #52]	; (800c68c <__smakebuf_r+0x7c>)
 800c656:	62b3      	str	r3, [r6, #40]	; 0x28
 800c658:	89a3      	ldrh	r3, [r4, #12]
 800c65a:	6020      	str	r0, [r4, #0]
 800c65c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c660:	81a3      	strh	r3, [r4, #12]
 800c662:	9b00      	ldr	r3, [sp, #0]
 800c664:	6163      	str	r3, [r4, #20]
 800c666:	9b01      	ldr	r3, [sp, #4]
 800c668:	6120      	str	r0, [r4, #16]
 800c66a:	b15b      	cbz	r3, 800c684 <__smakebuf_r+0x74>
 800c66c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c670:	4630      	mov	r0, r6
 800c672:	f000 f93d 	bl	800c8f0 <_isatty_r>
 800c676:	b128      	cbz	r0, 800c684 <__smakebuf_r+0x74>
 800c678:	89a3      	ldrh	r3, [r4, #12]
 800c67a:	f023 0303 	bic.w	r3, r3, #3
 800c67e:	f043 0301 	orr.w	r3, r3, #1
 800c682:	81a3      	strh	r3, [r4, #12]
 800c684:	89a3      	ldrh	r3, [r4, #12]
 800c686:	431d      	orrs	r5, r3
 800c688:	81a5      	strh	r5, [r4, #12]
 800c68a:	e7cd      	b.n	800c628 <__smakebuf_r+0x18>
 800c68c:	0800c47d 	.word	0x0800c47d

0800c690 <_free_r>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	4605      	mov	r5, r0
 800c694:	2900      	cmp	r1, #0
 800c696:	d045      	beq.n	800c724 <_free_r+0x94>
 800c698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c69c:	1f0c      	subs	r4, r1, #4
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	bfb8      	it	lt
 800c6a2:	18e4      	addlt	r4, r4, r3
 800c6a4:	f000 f946 	bl	800c934 <__malloc_lock>
 800c6a8:	4a1f      	ldr	r2, [pc, #124]	; (800c728 <_free_r+0x98>)
 800c6aa:	6813      	ldr	r3, [r2, #0]
 800c6ac:	4610      	mov	r0, r2
 800c6ae:	b933      	cbnz	r3, 800c6be <_free_r+0x2e>
 800c6b0:	6063      	str	r3, [r4, #4]
 800c6b2:	6014      	str	r4, [r2, #0]
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6ba:	f000 b93c 	b.w	800c936 <__malloc_unlock>
 800c6be:	42a3      	cmp	r3, r4
 800c6c0:	d90c      	bls.n	800c6dc <_free_r+0x4c>
 800c6c2:	6821      	ldr	r1, [r4, #0]
 800c6c4:	1862      	adds	r2, r4, r1
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	bf04      	itt	eq
 800c6ca:	681a      	ldreq	r2, [r3, #0]
 800c6cc:	685b      	ldreq	r3, [r3, #4]
 800c6ce:	6063      	str	r3, [r4, #4]
 800c6d0:	bf04      	itt	eq
 800c6d2:	1852      	addeq	r2, r2, r1
 800c6d4:	6022      	streq	r2, [r4, #0]
 800c6d6:	6004      	str	r4, [r0, #0]
 800c6d8:	e7ec      	b.n	800c6b4 <_free_r+0x24>
 800c6da:	4613      	mov	r3, r2
 800c6dc:	685a      	ldr	r2, [r3, #4]
 800c6de:	b10a      	cbz	r2, 800c6e4 <_free_r+0x54>
 800c6e0:	42a2      	cmp	r2, r4
 800c6e2:	d9fa      	bls.n	800c6da <_free_r+0x4a>
 800c6e4:	6819      	ldr	r1, [r3, #0]
 800c6e6:	1858      	adds	r0, r3, r1
 800c6e8:	42a0      	cmp	r0, r4
 800c6ea:	d10b      	bne.n	800c704 <_free_r+0x74>
 800c6ec:	6820      	ldr	r0, [r4, #0]
 800c6ee:	4401      	add	r1, r0
 800c6f0:	1858      	adds	r0, r3, r1
 800c6f2:	4282      	cmp	r2, r0
 800c6f4:	6019      	str	r1, [r3, #0]
 800c6f6:	d1dd      	bne.n	800c6b4 <_free_r+0x24>
 800c6f8:	6810      	ldr	r0, [r2, #0]
 800c6fa:	6852      	ldr	r2, [r2, #4]
 800c6fc:	605a      	str	r2, [r3, #4]
 800c6fe:	4401      	add	r1, r0
 800c700:	6019      	str	r1, [r3, #0]
 800c702:	e7d7      	b.n	800c6b4 <_free_r+0x24>
 800c704:	d902      	bls.n	800c70c <_free_r+0x7c>
 800c706:	230c      	movs	r3, #12
 800c708:	602b      	str	r3, [r5, #0]
 800c70a:	e7d3      	b.n	800c6b4 <_free_r+0x24>
 800c70c:	6820      	ldr	r0, [r4, #0]
 800c70e:	1821      	adds	r1, r4, r0
 800c710:	428a      	cmp	r2, r1
 800c712:	bf04      	itt	eq
 800c714:	6811      	ldreq	r1, [r2, #0]
 800c716:	6852      	ldreq	r2, [r2, #4]
 800c718:	6062      	str	r2, [r4, #4]
 800c71a:	bf04      	itt	eq
 800c71c:	1809      	addeq	r1, r1, r0
 800c71e:	6021      	streq	r1, [r4, #0]
 800c720:	605c      	str	r4, [r3, #4]
 800c722:	e7c7      	b.n	800c6b4 <_free_r+0x24>
 800c724:	bd38      	pop	{r3, r4, r5, pc}
 800c726:	bf00      	nop
 800c728:	20000358 	.word	0x20000358

0800c72c <_malloc_r>:
 800c72c:	b570      	push	{r4, r5, r6, lr}
 800c72e:	1ccd      	adds	r5, r1, #3
 800c730:	f025 0503 	bic.w	r5, r5, #3
 800c734:	3508      	adds	r5, #8
 800c736:	2d0c      	cmp	r5, #12
 800c738:	bf38      	it	cc
 800c73a:	250c      	movcc	r5, #12
 800c73c:	2d00      	cmp	r5, #0
 800c73e:	4606      	mov	r6, r0
 800c740:	db01      	blt.n	800c746 <_malloc_r+0x1a>
 800c742:	42a9      	cmp	r1, r5
 800c744:	d903      	bls.n	800c74e <_malloc_r+0x22>
 800c746:	230c      	movs	r3, #12
 800c748:	6033      	str	r3, [r6, #0]
 800c74a:	2000      	movs	r0, #0
 800c74c:	bd70      	pop	{r4, r5, r6, pc}
 800c74e:	f000 f8f1 	bl	800c934 <__malloc_lock>
 800c752:	4a21      	ldr	r2, [pc, #132]	; (800c7d8 <_malloc_r+0xac>)
 800c754:	6814      	ldr	r4, [r2, #0]
 800c756:	4621      	mov	r1, r4
 800c758:	b991      	cbnz	r1, 800c780 <_malloc_r+0x54>
 800c75a:	4c20      	ldr	r4, [pc, #128]	; (800c7dc <_malloc_r+0xb0>)
 800c75c:	6823      	ldr	r3, [r4, #0]
 800c75e:	b91b      	cbnz	r3, 800c768 <_malloc_r+0x3c>
 800c760:	4630      	mov	r0, r6
 800c762:	f000 f83d 	bl	800c7e0 <_sbrk_r>
 800c766:	6020      	str	r0, [r4, #0]
 800c768:	4629      	mov	r1, r5
 800c76a:	4630      	mov	r0, r6
 800c76c:	f000 f838 	bl	800c7e0 <_sbrk_r>
 800c770:	1c43      	adds	r3, r0, #1
 800c772:	d124      	bne.n	800c7be <_malloc_r+0x92>
 800c774:	230c      	movs	r3, #12
 800c776:	6033      	str	r3, [r6, #0]
 800c778:	4630      	mov	r0, r6
 800c77a:	f000 f8dc 	bl	800c936 <__malloc_unlock>
 800c77e:	e7e4      	b.n	800c74a <_malloc_r+0x1e>
 800c780:	680b      	ldr	r3, [r1, #0]
 800c782:	1b5b      	subs	r3, r3, r5
 800c784:	d418      	bmi.n	800c7b8 <_malloc_r+0x8c>
 800c786:	2b0b      	cmp	r3, #11
 800c788:	d90f      	bls.n	800c7aa <_malloc_r+0x7e>
 800c78a:	600b      	str	r3, [r1, #0]
 800c78c:	50cd      	str	r5, [r1, r3]
 800c78e:	18cc      	adds	r4, r1, r3
 800c790:	4630      	mov	r0, r6
 800c792:	f000 f8d0 	bl	800c936 <__malloc_unlock>
 800c796:	f104 000b 	add.w	r0, r4, #11
 800c79a:	1d23      	adds	r3, r4, #4
 800c79c:	f020 0007 	bic.w	r0, r0, #7
 800c7a0:	1ac3      	subs	r3, r0, r3
 800c7a2:	d0d3      	beq.n	800c74c <_malloc_r+0x20>
 800c7a4:	425a      	negs	r2, r3
 800c7a6:	50e2      	str	r2, [r4, r3]
 800c7a8:	e7d0      	b.n	800c74c <_malloc_r+0x20>
 800c7aa:	428c      	cmp	r4, r1
 800c7ac:	684b      	ldr	r3, [r1, #4]
 800c7ae:	bf16      	itet	ne
 800c7b0:	6063      	strne	r3, [r4, #4]
 800c7b2:	6013      	streq	r3, [r2, #0]
 800c7b4:	460c      	movne	r4, r1
 800c7b6:	e7eb      	b.n	800c790 <_malloc_r+0x64>
 800c7b8:	460c      	mov	r4, r1
 800c7ba:	6849      	ldr	r1, [r1, #4]
 800c7bc:	e7cc      	b.n	800c758 <_malloc_r+0x2c>
 800c7be:	1cc4      	adds	r4, r0, #3
 800c7c0:	f024 0403 	bic.w	r4, r4, #3
 800c7c4:	42a0      	cmp	r0, r4
 800c7c6:	d005      	beq.n	800c7d4 <_malloc_r+0xa8>
 800c7c8:	1a21      	subs	r1, r4, r0
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	f000 f808 	bl	800c7e0 <_sbrk_r>
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	d0cf      	beq.n	800c774 <_malloc_r+0x48>
 800c7d4:	6025      	str	r5, [r4, #0]
 800c7d6:	e7db      	b.n	800c790 <_malloc_r+0x64>
 800c7d8:	20000358 	.word	0x20000358
 800c7dc:	2000035c 	.word	0x2000035c

0800c7e0 <_sbrk_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4c06      	ldr	r4, [pc, #24]	; (800c7fc <_sbrk_r+0x1c>)
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	4605      	mov	r5, r0
 800c7e8:	4608      	mov	r0, r1
 800c7ea:	6023      	str	r3, [r4, #0]
 800c7ec:	f7f8 fc86 	bl	80050fc <_sbrk>
 800c7f0:	1c43      	adds	r3, r0, #1
 800c7f2:	d102      	bne.n	800c7fa <_sbrk_r+0x1a>
 800c7f4:	6823      	ldr	r3, [r4, #0]
 800c7f6:	b103      	cbz	r3, 800c7fa <_sbrk_r+0x1a>
 800c7f8:	602b      	str	r3, [r5, #0]
 800c7fa:	bd38      	pop	{r3, r4, r5, pc}
 800c7fc:	20001120 	.word	0x20001120

0800c800 <__sread>:
 800c800:	b510      	push	{r4, lr}
 800c802:	460c      	mov	r4, r1
 800c804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c808:	f000 f896 	bl	800c938 <_read_r>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	bfab      	itete	ge
 800c810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c812:	89a3      	ldrhlt	r3, [r4, #12]
 800c814:	181b      	addge	r3, r3, r0
 800c816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c81a:	bfac      	ite	ge
 800c81c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c81e:	81a3      	strhlt	r3, [r4, #12]
 800c820:	bd10      	pop	{r4, pc}

0800c822 <__swrite>:
 800c822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c826:	461f      	mov	r7, r3
 800c828:	898b      	ldrh	r3, [r1, #12]
 800c82a:	05db      	lsls	r3, r3, #23
 800c82c:	4605      	mov	r5, r0
 800c82e:	460c      	mov	r4, r1
 800c830:	4616      	mov	r6, r2
 800c832:	d505      	bpl.n	800c840 <__swrite+0x1e>
 800c834:	2302      	movs	r3, #2
 800c836:	2200      	movs	r2, #0
 800c838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c83c:	f000 f868 	bl	800c910 <_lseek_r>
 800c840:	89a3      	ldrh	r3, [r4, #12]
 800c842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c84a:	81a3      	strh	r3, [r4, #12]
 800c84c:	4632      	mov	r2, r6
 800c84e:	463b      	mov	r3, r7
 800c850:	4628      	mov	r0, r5
 800c852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c856:	f000 b817 	b.w	800c888 <_write_r>

0800c85a <__sseek>:
 800c85a:	b510      	push	{r4, lr}
 800c85c:	460c      	mov	r4, r1
 800c85e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c862:	f000 f855 	bl	800c910 <_lseek_r>
 800c866:	1c43      	adds	r3, r0, #1
 800c868:	89a3      	ldrh	r3, [r4, #12]
 800c86a:	bf15      	itete	ne
 800c86c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c86e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c876:	81a3      	strheq	r3, [r4, #12]
 800c878:	bf18      	it	ne
 800c87a:	81a3      	strhne	r3, [r4, #12]
 800c87c:	bd10      	pop	{r4, pc}

0800c87e <__sclose>:
 800c87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c882:	f000 b813 	b.w	800c8ac <_close_r>
	...

0800c888 <_write_r>:
 800c888:	b538      	push	{r3, r4, r5, lr}
 800c88a:	4c07      	ldr	r4, [pc, #28]	; (800c8a8 <_write_r+0x20>)
 800c88c:	4605      	mov	r5, r0
 800c88e:	4608      	mov	r0, r1
 800c890:	4611      	mov	r1, r2
 800c892:	2200      	movs	r2, #0
 800c894:	6022      	str	r2, [r4, #0]
 800c896:	461a      	mov	r2, r3
 800c898:	f7f8 fbdf 	bl	800505a <_write>
 800c89c:	1c43      	adds	r3, r0, #1
 800c89e:	d102      	bne.n	800c8a6 <_write_r+0x1e>
 800c8a0:	6823      	ldr	r3, [r4, #0]
 800c8a2:	b103      	cbz	r3, 800c8a6 <_write_r+0x1e>
 800c8a4:	602b      	str	r3, [r5, #0]
 800c8a6:	bd38      	pop	{r3, r4, r5, pc}
 800c8a8:	20001120 	.word	0x20001120

0800c8ac <_close_r>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	4c06      	ldr	r4, [pc, #24]	; (800c8c8 <_close_r+0x1c>)
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	6023      	str	r3, [r4, #0]
 800c8b8:	f7f8 fbeb 	bl	8005092 <_close>
 800c8bc:	1c43      	adds	r3, r0, #1
 800c8be:	d102      	bne.n	800c8c6 <_close_r+0x1a>
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	b103      	cbz	r3, 800c8c6 <_close_r+0x1a>
 800c8c4:	602b      	str	r3, [r5, #0]
 800c8c6:	bd38      	pop	{r3, r4, r5, pc}
 800c8c8:	20001120 	.word	0x20001120

0800c8cc <_fstat_r>:
 800c8cc:	b538      	push	{r3, r4, r5, lr}
 800c8ce:	4c07      	ldr	r4, [pc, #28]	; (800c8ec <_fstat_r+0x20>)
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	4605      	mov	r5, r0
 800c8d4:	4608      	mov	r0, r1
 800c8d6:	4611      	mov	r1, r2
 800c8d8:	6023      	str	r3, [r4, #0]
 800c8da:	f7f8 fbe6 	bl	80050aa <_fstat>
 800c8de:	1c43      	adds	r3, r0, #1
 800c8e0:	d102      	bne.n	800c8e8 <_fstat_r+0x1c>
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	b103      	cbz	r3, 800c8e8 <_fstat_r+0x1c>
 800c8e6:	602b      	str	r3, [r5, #0]
 800c8e8:	bd38      	pop	{r3, r4, r5, pc}
 800c8ea:	bf00      	nop
 800c8ec:	20001120 	.word	0x20001120

0800c8f0 <_isatty_r>:
 800c8f0:	b538      	push	{r3, r4, r5, lr}
 800c8f2:	4c06      	ldr	r4, [pc, #24]	; (800c90c <_isatty_r+0x1c>)
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	4605      	mov	r5, r0
 800c8f8:	4608      	mov	r0, r1
 800c8fa:	6023      	str	r3, [r4, #0]
 800c8fc:	f7f8 fbe5 	bl	80050ca <_isatty>
 800c900:	1c43      	adds	r3, r0, #1
 800c902:	d102      	bne.n	800c90a <_isatty_r+0x1a>
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	b103      	cbz	r3, 800c90a <_isatty_r+0x1a>
 800c908:	602b      	str	r3, [r5, #0]
 800c90a:	bd38      	pop	{r3, r4, r5, pc}
 800c90c:	20001120 	.word	0x20001120

0800c910 <_lseek_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	4c07      	ldr	r4, [pc, #28]	; (800c930 <_lseek_r+0x20>)
 800c914:	4605      	mov	r5, r0
 800c916:	4608      	mov	r0, r1
 800c918:	4611      	mov	r1, r2
 800c91a:	2200      	movs	r2, #0
 800c91c:	6022      	str	r2, [r4, #0]
 800c91e:	461a      	mov	r2, r3
 800c920:	f7f8 fbde 	bl	80050e0 <_lseek>
 800c924:	1c43      	adds	r3, r0, #1
 800c926:	d102      	bne.n	800c92e <_lseek_r+0x1e>
 800c928:	6823      	ldr	r3, [r4, #0]
 800c92a:	b103      	cbz	r3, 800c92e <_lseek_r+0x1e>
 800c92c:	602b      	str	r3, [r5, #0]
 800c92e:	bd38      	pop	{r3, r4, r5, pc}
 800c930:	20001120 	.word	0x20001120

0800c934 <__malloc_lock>:
 800c934:	4770      	bx	lr

0800c936 <__malloc_unlock>:
 800c936:	4770      	bx	lr

0800c938 <_read_r>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	4c07      	ldr	r4, [pc, #28]	; (800c958 <_read_r+0x20>)
 800c93c:	4605      	mov	r5, r0
 800c93e:	4608      	mov	r0, r1
 800c940:	4611      	mov	r1, r2
 800c942:	2200      	movs	r2, #0
 800c944:	6022      	str	r2, [r4, #0]
 800c946:	461a      	mov	r2, r3
 800c948:	f7f8 fb6a 	bl	8005020 <_read>
 800c94c:	1c43      	adds	r3, r0, #1
 800c94e:	d102      	bne.n	800c956 <_read_r+0x1e>
 800c950:	6823      	ldr	r3, [r4, #0]
 800c952:	b103      	cbz	r3, 800c956 <_read_r+0x1e>
 800c954:	602b      	str	r3, [r5, #0]
 800c956:	bd38      	pop	{r3, r4, r5, pc}
 800c958:	20001120 	.word	0x20001120

0800c95c <_init>:
 800c95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95e:	bf00      	nop
 800c960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c962:	bc08      	pop	{r3}
 800c964:	469e      	mov	lr, r3
 800c966:	4770      	bx	lr

0800c968 <_fini>:
 800c968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96a:	bf00      	nop
 800c96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c96e:	bc08      	pop	{r3}
 800c970:	469e      	mov	lr, r3
 800c972:	4770      	bx	lr
